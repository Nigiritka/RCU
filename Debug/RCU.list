
RCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ecc  08013490  08013490  00023490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801635c  0801635c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801635c  0801635c  0002635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016364  08016364  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016364  08016364  00026364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016368  08016368  00026368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801636c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b5c0  2000007c  080163e8  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2001b63c  080163e8  0003b63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006d2fa  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b324  00000000  00000000  0009d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00036618  00000000  00000000  000a86ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026c0  00000000  00000000  000dece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003500  00000000  00000000  000e13a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014267  00000000  00000000  000e48a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000545b9  00000000  00000000  000f8b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001210bf  00000000  00000000  0014d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0026e187  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007de8  00000000  00000000  0026e1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013478 	.word	0x08013478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08013478 	.word	0x08013478

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <StartEthernetTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernetTask */
void StartEthernetTask(void *argument)
{
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	b087      	sub	sp, #28
  /* init code for LWIP */
  MX_LWIP_Init();
 80005ac:	f005 ffd6 	bl	800655c <MX_LWIP_Init>
  struct netconn *conn, *newconn;
  struct netbuf *buf;
  void *data;
  uint16_t len;
  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80005b0:	2200      	movs	r2, #0
 80005b2:	4611      	mov	r1, r2
 80005b4:	2010      	movs	r0, #16
 80005b6:	f009 f897 	bl	80096e8 <netconn_new_with_proto_and_callback>
  if (conn!=NULL)
 80005ba:	4605      	mov	r5, r0
 80005bc:	b140      	cbz	r0, 80005d0 <StartEthernetTask+0x28>
	{
		/* Bind connection to well known port number 7. */
		err = netconn_bind(conn, NULL, 7);
 80005be:	2207      	movs	r2, #7
 80005c0:	2100      	movs	r1, #0
 80005c2:	f009 f90f 	bl	80097e4 <netconn_bind>
		if (err == ERR_OK)
 80005c6:	b928      	cbnz	r0, 80005d4 <StartEthernetTask+0x2c>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 80005c8:	21ff      	movs	r1, #255	; 0xff
 80005ca:	4628      	mov	r0, r5
 80005cc:	f009 f932 	bl	8009834 <netconn_listen_with_backlog>
		{
		  do
		  {
			netbuf_data(buf, &data, &len);
			//netconn_write(newconn, data, len, NETCONN_COPY);
			netconn_write(newconn, ImageBuffer, 50000, NETCONN_COPY);
 80005d0:	4c19      	ldr	r4, [pc, #100]	; (8000638 <StartEthernetTask+0x90>)
 80005d2:	e029      	b.n	8000628 <StartEthernetTask+0x80>
			netconn_delete(conn);
 80005d4:	4628      	mov	r0, r5
 80005d6:	f009 f8f5 	bl	80097c4 <netconn_delete>
 80005da:	e7f9      	b.n	80005d0 <StartEthernetTask+0x28>
			netbuf_data(buf, &data, &len);
 80005dc:	f10d 020a 	add.w	r2, sp, #10
 80005e0:	a903      	add	r1, sp, #12
 80005e2:	9804      	ldr	r0, [sp, #16]
 80005e4:	f00a fc0a 	bl	800adfc <netbuf_data>
			netconn_write(newconn, ImageBuffer, 50000, NETCONN_COPY);
 80005e8:	2300      	movs	r3, #0
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80005f2:	4621      	mov	r1, r4
 80005f4:	9805      	ldr	r0, [sp, #20]
 80005f6:	f009 f9d5 	bl	80099a4 <netconn_write_partly>


		  }
		  while (netbuf_next(buf) >= 0);
 80005fa:	9804      	ldr	r0, [sp, #16]
 80005fc:	f00a fc34 	bl	800ae68 <netbuf_next>
 8000600:	2800      	cmp	r0, #0
 8000602:	daeb      	bge.n	80005dc <StartEthernetTask+0x34>

		  netbuf_delete(buf);
 8000604:	9804      	ldr	r0, [sp, #16]
 8000606:	f00a fbe9 	bl	800addc <netbuf_delete>
		while (netconn_recv(newconn, &buf) == ERR_OK)
 800060a:	a904      	add	r1, sp, #16
 800060c:	9805      	ldr	r0, [sp, #20]
 800060e:	f009 fb2b 	bl	8009c68 <netconn_recv>
 8000612:	2800      	cmp	r0, #0
 8000614:	d0e2      	beq.n	80005dc <StartEthernetTask+0x34>
		}

		/* Close connection and discard connection identifier. */
		netconn_close(newconn);
 8000616:	9805      	ldr	r0, [sp, #20]
 8000618:	f009 f9d1 	bl	80099be <netconn_close>
		netconn_delete(newconn);
 800061c:	9805      	ldr	r0, [sp, #20]
 800061e:	f009 f8d1 	bl	80097c4 <netconn_delete>
	  }

	osDelay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f006 fbae 	bl	8006d84 <osDelay>
	   accept_err = netconn_accept(conn, &newconn);
 8000628:	a905      	add	r1, sp, #20
 800062a:	4628      	mov	r0, r5
 800062c:	f009 f9dc 	bl	80099e8 <netconn_accept>
	  if (accept_err == ERR_OK)
 8000630:	2800      	cmp	r0, #0
 8000632:	d0ea      	beq.n	800060a <StartEthernetTask+0x62>
 8000634:	e7f5      	b.n	8000622 <StartEthernetTask+0x7a>
 8000636:	bf00      	nop
 8000638:	20000098 	.word	0x20000098

0800063c <SystemClock_Config>:
{
 800063c:	b500      	push	{lr}
 800063e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000640:	2230      	movs	r2, #48	; 0x30
 8000642:	2100      	movs	r1, #0
 8000644:	a808      	add	r0, sp, #32
 8000646:	f011 ff82 	bl	801254e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064a:	2300      	movs	r3, #0
 800064c:	9303      	str	r3, [sp, #12]
 800064e:	9304      	str	r3, [sp, #16]
 8000650:	9305      	str	r3, [sp, #20]
 8000652:	9306      	str	r3, [sp, #24]
 8000654:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xa0>)
 8000658:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800065a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800065e:	6411      	str	r1, [r2, #64]	; 0x40
 8000660:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000662:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066a:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <SystemClock_Config+0xa4>)
 800066c:	6811      	ldr	r1, [r2, #0]
 800066e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000672:	6011      	str	r1, [r2, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800067a:	9202      	str	r2, [sp, #8]
 800067c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067e:	2202      	movs	r2, #2
 8000680:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	2101      	movs	r1, #1
 8000684:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2110      	movs	r1, #16
 8000688:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068e:	2308      	movs	r3, #8
 8000690:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000692:	23d8      	movs	r3, #216	; 0xd8
 8000694:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000698:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	a808      	add	r0, sp, #32
 800069c:	f004 f9ec 	bl	8004a78 <HAL_RCC_OscConfig>
 80006a0:	b9b0      	cbnz	r0, 80006d0 <SystemClock_Config+0x94>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a2:	f004 f9ab 	bl	80049fc <HAL_PWREx_EnableOverDrive>
 80006a6:	b9a8      	cbnz	r0, 80006d4 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006c0:	2107      	movs	r1, #7
 80006c2:	a803      	add	r0, sp, #12
 80006c4:	f004 fc44 	bl	8004f50 <HAL_RCC_ClockConfig>
 80006c8:	b930      	cbnz	r0, 80006d8 <SystemClock_Config+0x9c>
}
 80006ca:	b015      	add	sp, #84	; 0x54
 80006cc:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <SystemClock_Config+0x96>
 80006d4:	b672      	cpsid	i
 80006d6:	e7fe      	b.n	80006d6 <SystemClock_Config+0x9a>
 80006d8:	b672      	cpsid	i
 80006da:	e7fe      	b.n	80006da <SystemClock_Config+0x9e>
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <main>:
{
 80006e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80006e8:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80006ea:	f001 f9cf 	bl	8001a8c <HAL_Init>
  SystemClock_Config();
 80006ee:	f7ff ffa5 	bl	800063c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	2400      	movs	r4, #0
 80006f4:	940b      	str	r4, [sp, #44]	; 0x2c
 80006f6:	940c      	str	r4, [sp, #48]	; 0x30
 80006f8:	940d      	str	r4, [sp, #52]	; 0x34
 80006fa:	940e      	str	r4, [sp, #56]	; 0x38
 80006fc:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	4baa      	ldr	r3, [pc, #680]	; (80009a8 <main+0x2c4>)
 8000700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000702:	f042 0210 	orr.w	r2, r2, #16
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
 8000708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800070a:	f002 0210 	and.w	r2, r2, #16
 800070e:	9200      	str	r2, [sp, #0]
 8000710:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
 800071a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000726:	f042 0202 	orr.w	r2, r2, #2
 800072a:	631a      	str	r2, [r3, #48]	; 0x30
 800072c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800072e:	f002 0202 	and.w	r2, r2, #2
 8000732:	9202      	str	r2, [sp, #8]
 8000734:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000738:	f042 0208 	orr.w	r2, r2, #8
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
 800073e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000740:	f002 0208 	and.w	r2, r2, #8
 8000744:	9203      	str	r2, [sp, #12]
 8000746:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074a:	f042 0204 	orr.w	r2, r2, #4
 800074e:	631a      	str	r2, [r3, #48]	; 0x30
 8000750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000752:	f002 0204 	and.w	r2, r2, #4
 8000756:	9204      	str	r2, [sp, #16]
 8000758:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800075c:	f042 0201 	orr.w	r2, r2, #1
 8000760:	631a      	str	r2, [r3, #48]	; 0x30
 8000762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000764:	f002 0201 	and.w	r2, r2, #1
 8000768:	9205      	str	r2, [sp, #20]
 800076a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800076c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800076e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
 8000774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000776:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800077a:	9206      	str	r2, [sp, #24]
 800077c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800077e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
 8000786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000788:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800078c:	9207      	str	r2, [sp, #28]
 800078e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
 8000798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800079e:	9208      	str	r2, [sp, #32]
 80007a0:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a4:	f042 0220 	orr.w	r2, r2, #32
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
 80007aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ac:	f002 0220 	and.w	r2, r2, #32
 80007b0:	9209      	str	r2, [sp, #36]	; 0x24
 80007b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	930a      	str	r3, [sp, #40]	; 0x28
 80007c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2120      	movs	r1, #32
 80007ca:	4878      	ldr	r0, [pc, #480]	; (80009ac <main+0x2c8>)
 80007cc:	f003 f9de 	bl	8003b8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD1_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80007d0:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80009d0 <main+0x2ec>
 80007d4:	4622      	mov	r2, r4
 80007d6:	f241 010e 	movw	r1, #4110	; 0x100e
 80007da:	4650      	mov	r0, sl
 80007dc:	f003 f9d6 	bl	8003b8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80007e0:	4622      	mov	r2, r4
 80007e2:	2108      	movs	r1, #8
 80007e4:	4872      	ldr	r0, [pc, #456]	; (80009b0 <main+0x2cc>)
 80007e6:	f003 f9d1 	bl	8003b8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007ea:	4622      	mov	r2, r4
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	4870      	ldr	r0, [pc, #448]	; (80009b4 <main+0x2d0>)
 80007f2:	f003 f9cb 	bl	8003b8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007f6:	4622      	mov	r2, r4
 80007f8:	21c8      	movs	r1, #200	; 0xc8
 80007fa:	486f      	ldr	r0, [pc, #444]	; (80009b8 <main+0x2d4>)
 80007fc:	f003 f9c6 	bl	8003b8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000800:	2310      	movs	r3, #16
 8000802:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2502      	movs	r5, #2
 8000806:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800080c:	230e      	movs	r3, #14
 800080e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000810:	4f6a      	ldr	r7, [pc, #424]	; (80009bc <main+0x2d8>)
 8000812:	a90b      	add	r1, sp, #44	; 0x2c
 8000814:	4638      	mov	r0, r7
 8000816:	f003 f8b7 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000822:	a90b      	add	r1, sp, #44	; 0x2c
 8000824:	4638      	mov	r0, r7
 8000826:	f003 f8af 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800082a:	2304      	movs	r3, #4
 800082c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2603      	movs	r6, #3
 8000834:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000836:	2309      	movs	r3, #9
 8000838:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800083a:	a90b      	add	r1, sp, #44	; 0x2c
 800083c:	4638      	mov	r0, r7
 800083e:	f003 f8a3 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000842:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000846:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084e:	f04f 080c 	mov.w	r8, #12
 8000852:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	a90b      	add	r1, sp, #44	; 0x2c
 8000858:	4638      	mov	r0, r7
 800085a:	f003 f895 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800085e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000862:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800086a:	f04f 090a 	mov.w	r9, #10
 800086e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	a90b      	add	r1, sp, #44	; 0x2c
 8000874:	4852      	ldr	r0, [pc, #328]	; (80009c0 <main+0x2dc>)
 8000876:	f003 f887 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800087a:	2310      	movs	r3, #16
 800087c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000884:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000886:	a90b      	add	r1, sp, #44	; 0x2c
 8000888:	484d      	ldr	r0, [pc, #308]	; (80009c0 <main+0x2dc>)
 800088a:	f003 f87d 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000898:	2308      	movs	r3, #8
 800089a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800089c:	a90b      	add	r1, sp, #44	; 0x2c
 800089e:	4843      	ldr	r0, [pc, #268]	; (80009ac <main+0x2c8>)
 80008a0:	f003 f872 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	a90b      	add	r1, sp, #44	; 0x2c
 80008b6:	4843      	ldr	r0, [pc, #268]	; (80009c4 <main+0x2e0>)
 80008b8:	f003 f866 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008c8:	2701      	movs	r7, #1
 80008ca:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008cc:	a90b      	add	r1, sp, #44	; 0x2c
 80008ce:	483e      	ldr	r0, [pc, #248]	; (80009c8 <main+0x2e4>)
 80008d0:	f003 f85a 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008de:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008e2:	a90b      	add	r1, sp, #44	; 0x2c
 80008e4:	4836      	ldr	r0, [pc, #216]	; (80009c0 <main+0x2dc>)
 80008e6:	f003 f84f 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008ea:	f248 1333 	movw	r3, #33075	; 0x8133
 80008ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fa:	a90b      	add	r1, sp, #44	; 0x2c
 80008fc:	482e      	ldr	r0, [pc, #184]	; (80009b8 <main+0x2d4>)
 80008fe:	f003 f843 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000902:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000906:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800090e:	230e      	movs	r3, #14
 8000910:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000912:	a90b      	add	r1, sp, #44	; 0x2c
 8000914:	482d      	ldr	r0, [pc, #180]	; (80009cc <main+0x2e8>)
 8000916:	f003 f837 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800091a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 800091e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000926:	a90b      	add	r1, sp, #44	; 0x2c
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <main+0x2e8>)
 800092a:	f003 f82d 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000932:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000936:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800093a:	a90b      	add	r1, sp, #44	; 0x2c
 800093c:	481b      	ldr	r0, [pc, #108]	; (80009ac <main+0x2c8>)
 800093e:	f003 f823 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000942:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000946:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	a90b      	add	r1, sp, #44	; 0x2c
 8000954:	4815      	ldr	r0, [pc, #84]	; (80009ac <main+0x2c8>)
 8000956:	f003 f817 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800095a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800095e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	a90b      	add	r1, sp, #44	; 0x2c
 800096c:	4816      	ldr	r0, [pc, #88]	; (80009c8 <main+0x2e4>)
 800096e:	f003 f80b 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000972:	23f0      	movs	r3, #240	; 0xf0
 8000974:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800097c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000980:	a90b      	add	r1, sp, #44	; 0x2c
 8000982:	4650      	mov	r0, sl
 8000984:	f003 f800 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000988:	23f7      	movs	r3, #247	; 0xf7
 800098a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000992:	230e      	movs	r3, #14
 8000994:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000996:	a90b      	add	r1, sp, #44	; 0x2c
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <main+0x2cc>)
 800099a:	f002 fff5 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800099e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	950c      	str	r5, [sp, #48]	; 0x30
 80009a4:	e016      	b.n	80009d4 <main+0x2f0>
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40022800 	.word	0x40022800
 80009b4:	40021c00 	.word	0x40021c00
 80009b8:	40021800 	.word	0x40021800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40022400 	.word	0x40022400
 80009d0:	40022000 	.word	0x40022000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009d8:	2309      	movs	r3, #9
 80009da:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009dc:	a90b      	add	r1, sp, #44	; 0x2c
 80009de:	48a6      	ldr	r0, [pc, #664]	; (8000c78 <main+0x594>)
 80009e0:	f002 ffd2 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009f0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009f4:	a90b      	add	r1, sp, #44	; 0x2c
 80009f6:	48a0      	ldr	r0, [pc, #640]	; (8000c78 <main+0x594>)
 80009f8:	f002 ffc6 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009fc:	2320      	movs	r3, #32
 80009fe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a06:	a90b      	add	r1, sp, #44	; 0x2c
 8000a08:	489c      	ldr	r0, [pc, #624]	; (8000c7c <main+0x598>)
 8000a0a:	f002 ffbd 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000a0e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000a12:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a1c:	4650      	mov	r0, sl
 8000a1e:	f002 ffb3 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a22:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8000a26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a30:	4893      	ldr	r0, [pc, #588]	; (8000c80 <main+0x59c>)
 8000a32:	f002 ffa9 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a36:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a3a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a42:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a46:	a90b      	add	r1, sp, #44	; 0x2c
 8000a48:	488e      	ldr	r0, [pc, #568]	; (8000c84 <main+0x5a0>)
 8000a4a:	f002 ff9d 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a4e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000a52:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a5a:	230e      	movs	r3, #14
 8000a5c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a60:	4650      	mov	r0, sl
 8000a62:	f002 ff91 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a70:	a90b      	add	r1, sp, #44	; 0x2c
 8000a72:	4885      	ldr	r0, [pc, #532]	; (8000c88 <main+0x5a4>)
 8000a74:	f002 ff88 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	a90b      	add	r1, sp, #44	; 0x2c
 8000a82:	487e      	ldr	r0, [pc, #504]	; (8000c7c <main+0x598>)
 8000a84:	f002 ff80 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a92:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000a96:	a90b      	add	r1, sp, #44	; 0x2c
 8000a98:	4878      	ldr	r0, [pc, #480]	; (8000c7c <main+0x598>)
 8000a9a:	f002 ff75 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000a9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000aa2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aa8:	a90b      	add	r1, sp, #44	; 0x2c
 8000aaa:	4878      	ldr	r0, [pc, #480]	; (8000c8c <main+0x5a8>)
 8000aac:	f002 ff6c 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ab0:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	a90b      	add	r1, sp, #44	; 0x2c
 8000aba:	4650      	mov	r0, sl
 8000abc:	f002 ff64 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ac0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aca:	a90b      	add	r1, sp, #44	; 0x2c
 8000acc:	486f      	ldr	r0, [pc, #444]	; (8000c8c <main+0x5a8>)
 8000ace:	f002 ff5b 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ad2:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ada:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000adc:	a90b      	add	r1, sp, #44	; 0x2c
 8000ade:	4650      	mov	r0, sl
 8000ae0:	f002 ff52 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aee:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af2:	a90b      	add	r1, sp, #44	; 0x2c
 8000af4:	4650      	mov	r0, sl
 8000af6:	f002 ff47 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b06:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000b08:	a90b      	add	r1, sp, #44	; 0x2c
 8000b0a:	4861      	ldr	r0, [pc, #388]	; (8000c90 <main+0x5ac>)
 8000b0c:	f002 ff3c 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000b10:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b18:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	a90b      	add	r1, sp, #44	; 0x2c
 8000b1e:	4650      	mov	r0, sl
 8000b20:	f002 ff32 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000b24:	2310      	movs	r3, #16
 8000b26:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b2e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000b32:	a90b      	add	r1, sp, #44	; 0x2c
 8000b34:	4855      	ldr	r0, [pc, #340]	; (8000c8c <main+0x5a8>)
 8000b36:	f002 ff27 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000b3a:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8000b3e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b48:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b4c:	a90b      	add	r1, sp, #44	; 0x2c
 8000b4e:	484f      	ldr	r0, [pc, #316]	; (8000c8c <main+0x5a8>)
 8000b50:	f002 ff1a 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000b54:	23c8      	movs	r3, #200	; 0xc8
 8000b56:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5e:	a90b      	add	r1, sp, #44	; 0x2c
 8000b60:	4845      	ldr	r0, [pc, #276]	; (8000c78 <main+0x594>)
 8000b62:	f002 ff11 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000b66:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000b6a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b70:	a90b      	add	r1, sp, #44	; 0x2c
 8000b72:	4844      	ldr	r0, [pc, #272]	; (8000c84 <main+0x5a0>)
 8000b74:	f002 ff08 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b82:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000b86:	a90b      	add	r1, sp, #44	; 0x2c
 8000b88:	483d      	ldr	r0, [pc, #244]	; (8000c80 <main+0x59c>)
 8000b8a:	f002 fefd 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000b8e:	f04f 0b05 	mov.w	fp, #5
 8000b92:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b9c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	a90b      	add	r1, sp, #44	; 0x2c
 8000ba2:	4837      	ldr	r0, [pc, #220]	; (8000c80 <main+0x59c>)
 8000ba4:	f002 fef0 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	a90b      	add	r1, sp, #44	; 0x2c
 8000bb8:	4836      	ldr	r0, [pc, #216]	; (8000c94 <main+0x5b0>)
 8000bba:	f002 fee5 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000bbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bc2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bca:	2309      	movs	r3, #9
 8000bcc:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	a90b      	add	r1, sp, #44	; 0x2c
 8000bd0:	482a      	ldr	r0, [pc, #168]	; (8000c7c <main+0x598>)
 8000bd2:	f002 fed9 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000bde:	a90b      	add	r1, sp, #44	; 0x2c
 8000be0:	4825      	ldr	r0, [pc, #148]	; (8000c78 <main+0x594>)
 8000be2:	f002 fed1 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000be6:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be8:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000bec:	a90b      	add	r1, sp, #44	; 0x2c
 8000bee:	4828      	ldr	r0, [pc, #160]	; (8000c90 <main+0x5ac>)
 8000bf0:	f002 feca 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000bf4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bf8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c02:	2304      	movs	r3, #4
 8000c04:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c06:	a90b      	add	r1, sp, #44	; 0x2c
 8000c08:	4820      	ldr	r0, [pc, #128]	; (8000c8c <main+0x5a8>)
 8000c0a:	f002 febd 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000c0e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c18:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	a90b      	add	r1, sp, #44	; 0x2c
 8000c1e:	481c      	ldr	r0, [pc, #112]	; (8000c90 <main+0x5ac>)
 8000c20:	f002 feb2 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000c2e:	2309      	movs	r3, #9
 8000c30:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000c32:	a90b      	add	r1, sp, #44	; 0x2c
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <main+0x5a8>)
 8000c36:	f002 fea7 	bl	8003988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000c3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c3e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c46:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	a90b      	add	r1, sp, #44	; 0x2c
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <main+0x5b0>)
 8000c4e:	f002 fe9b 	bl	8003988 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c52:	4622      	mov	r2, r4
 8000c54:	4659      	mov	r1, fp
 8000c56:	4650      	mov	r0, sl
 8000c58:	f000 ff62 	bl	8001b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5c:	4650      	mov	r0, sl
 8000c5e:	f000 ff8f 	bl	8001b80 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <main+0x5b4>)
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <main+0x5b8>)
 8000c66:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 2000000;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <main+0x5bc>)
 8000c6a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6c:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c6e:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c70:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c72:	f8c0 8014 	str.w	r8, [r0, #20]
 8000c76:	e015      	b.n	8000ca4 <main+0x5c0>
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40021400 	.word	0x40021400
 8000c88:	40022800 	.word	0x40022800
 8000c8c:	40021c00 	.word	0x40021c00
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400
 8000c98:	20012e04 	.word	0x20012e04
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	001e8480 	.word	0x001e8480
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca6:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca8:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000caa:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cac:	f005 fc25 	bl	80064fa <HAL_UART_Init>
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	f040 808c 	bne.w	8000dce <main+0x6ea>
  huart6.Instance = USART6;
 8000cb6:	484e      	ldr	r0, [pc, #312]	; (8000df0 <main+0x70c>)
 8000cb8:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <main+0x710>)
 8000cba:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 2962900;
 8000cbc:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <main+0x714>)
 8000cbe:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cc6:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	220c      	movs	r2, #12
 8000cca:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ccc:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8000cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cd2:	61c2      	str	r2, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd4:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd6:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cd8:	f005 fc0f 	bl	80064fa <HAL_UART_Init>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d178      	bne.n	8000dd2 <main+0x6ee>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8000ce6:	930d      	str	r3, [sp, #52]	; 0x34
  htim6.Instance = TIM6;
 8000ce8:	4844      	ldr	r0, [pc, #272]	; (8000dfc <main+0x718>)
 8000cea:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <main+0x71c>)
 8000cec:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 1;
 8000cee:	2201      	movs	r2, #1
 8000cf0:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 5000;
 8000cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf8:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cfc:	f004 fe92 	bl	8005a24 <HAL_TIM_Base_Init>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d168      	bne.n	8000dd6 <main+0x6f2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	930b      	str	r3, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d0a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d0c:	483b      	ldr	r0, [pc, #236]	; (8000dfc <main+0x718>)
 8000d0e:	f004 feb9 	bl	8005a84 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d161      	bne.n	8000dda <main+0x6f6>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d16:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <main+0x720>)
 8000d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2105      	movs	r1, #5
 8000d2e:	2039      	movs	r0, #57	; 0x39
 8000d30:	f000 fef6 	bl	8001b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d34:	2039      	movs	r0, #57	; 0x39
 8000d36:	f000 ff23 	bl	8001b80 <HAL_NVIC_EnableIRQ>
  hdcmi.Instance = DCMI;
 8000d3a:	4833      	ldr	r0, [pc, #204]	; (8000e08 <main+0x724>)
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <main+0x728>)
 8000d3e:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000d44:	2220      	movs	r2, #32
 8000d46:	6082      	str	r2, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	60c2      	str	r2, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	6102      	str	r2, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d50:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d52:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000d54:	2208      	movs	r2, #8
 8000d56:	6202      	str	r2, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d58:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d5a:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d5c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d5e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d60:	f000 ff6c 	bl	8001c3c <HAL_DCMI_Init>
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d13a      	bne.n	8000dde <main+0x6fa>
  hi2c1.Instance = I2C1;
 8000d68:	4829      	ldr	r0, [pc, #164]	; (8000e10 <main+0x72c>)
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <main+0x730>)
 8000d6c:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d6e:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
 8000d72:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8000d76:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d80:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d82:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d84:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d86:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	f003 f8eb 	bl	8003f64 <HAL_I2C_Init>
 8000d8e:	bb40      	cbnz	r0, 8000de2 <main+0x6fe>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	481f      	ldr	r0, [pc, #124]	; (8000e10 <main+0x72c>)
 8000d94:	f003 fdd8 	bl	8004948 <HAL_I2CEx_ConfigAnalogFilter>
 8000d98:	bb28      	cbnz	r0, 8000de6 <main+0x702>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	481c      	ldr	r0, [pc, #112]	; (8000e10 <main+0x72c>)
 8000d9e:	f003 fe01 	bl	80049a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000da2:	bb10      	cbnz	r0, 8000dea <main+0x706>
	OV5640_Init(&Camera, OV5640_R800x480, OV5640_JPEG);
 8000da4:	2208      	movs	r2, #8
 8000da6:	2104      	movs	r1, #4
 8000da8:	481b      	ldr	r0, [pc, #108]	; (8000e18 <main+0x734>)
 8000daa:	f000 faa5 	bl	80012f8 <OV5640_Init>
	HAL_Delay(500);
 8000dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db2:	f000 fe8f 	bl	8001ad4 <HAL_Delay>
  osKernelInitialize();
 8000db6:	f005 ff35 	bl	8006c24 <osKernelInitialize>
  EthernetTaskHandle = osThreadNew(StartEthernetTask, NULL, &EthernetTask_attributes);
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <main+0x738>)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <main+0x73c>)
 8000dc0:	f005 ff88 	bl	8006cd4 <osThreadNew>
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <main+0x740>)
 8000dc6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000dc8:	f005 ff4a 	bl	8006c60 <osKernelStart>
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x6e8>
 8000dce:	b672      	cpsid	i
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <main+0x6ec>
 8000dd2:	b672      	cpsid	i
 8000dd4:	e7fe      	b.n	8000dd4 <main+0x6f0>
 8000dd6:	b672      	cpsid	i
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x6f4>
 8000dda:	b672      	cpsid	i
 8000ddc:	e7fe      	b.n	8000ddc <main+0x6f8>
 8000dde:	b672      	cpsid	i
 8000de0:	e7fe      	b.n	8000de0 <main+0x6fc>
 8000de2:	b672      	cpsid	i
 8000de4:	e7fe      	b.n	8000de4 <main+0x700>
 8000de6:	b672      	cpsid	i
 8000de8:	e7fe      	b.n	8000de8 <main+0x704>
 8000dea:	b672      	cpsid	i
 8000dec:	e7fe      	b.n	8000dec <main+0x708>
 8000dee:	bf00      	nop
 8000df0:	20012ed4 	.word	0x20012ed4
 8000df4:	40011400 	.word	0x40011400
 8000df8:	002d35d4 	.word	0x002d35d4
 8000dfc:	20012e88 	.word	0x20012e88
 8000e00:	40001000 	.word	0x40001000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	20012db4 	.word	0x20012db4
 8000e0c:	50050000 	.word	0x50050000
 8000e10:	20012d08 	.word	0x20012d08
 8000e14:	40005400 	.word	0x40005400
 8000e18:	20012f58 	.word	0x20012f58
 8000e1c:	080134a0 	.word	0x080134a0
 8000e20:	080005a9 	.word	0x080005a9
 8000e24:	20012f80 	.word	0x20012f80

08000e28 <HAL_GPIO_EXTI_Callback>:
{
 8000e28:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x24>)
 8000e30:	f002 feac 	bl	8003b8c <HAL_GPIO_WritePin>
	HAL_DCMI_Stop(&hdcmi);
 8000e34:	4c06      	ldr	r4, [pc, #24]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x28>)
 8000e36:	4620      	mov	r0, r4
 8000e38:	f000 ffbc 	bl	8001db4 <HAL_DCMI_Stop>
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)ImageBuffer, IMAGE_SIZE/4);
 8000e3c:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e42:	2102      	movs	r1, #2
 8000e44:	4620      	mov	r0, r4
 8000e46:	f000 ff49 	bl	8001cdc <HAL_DCMI_Start_DMA>
}
 8000e4a:	bd10      	pop	{r4, pc}
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	20012db4 	.word	0x20012db4
 8000e54:	20000098 	.word	0x20000098

08000e58 <HAL_UART_TxCpltCallback>:
}
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_TIM_PeriodElapsedCallback>:
{
 8000e5c:	b508      	push	{r3, lr}
  if (htim->Instance == TIM14) {
 8000e5e:	6802      	ldr	r2, [r0, #0]
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d000      	beq.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8000e66:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000e68:	f000 fe22 	bl	8001ab0 <HAL_IncTick>
}
 8000e6c:	e7fb      	b.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000e6e:	bf00      	nop
 8000e70:	40002000 	.word	0x40002000

08000e74 <Error_Handler>:
 8000e74:	b672      	cpsid	i
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <Error_Handler+0x2>

08000e78 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8000e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e7c:	b082      	sub	sp, #8
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8000e7e:	2904      	cmp	r1, #4
 8000e80:	f200 809e 	bhi.w	8000fc0 <OV5640_SetResolution+0x148>
    ret = OV5640_ERROR;
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8000e84:	2904      	cmp	r1, #4
 8000e86:	f200 80a1 	bhi.w	8000fcc <OV5640_SetResolution+0x154>
 8000e8a:	e8df f001 	tbb	[pc, r1]
 8000e8e:	2103      	.short	0x2103
 8000e90:	5d3f      	.short	0x5d3f
 8000e92:	7b          	.byte	0x7b
 8000e93:	00          	.byte	0x00
 8000e94:	4e4f      	ldr	r6, [pc, #316]	; (8000fd4 <OV5640_SetResolution+0x15c>)
 8000e96:	f106 0710 	add.w	r7, r6, #16
  int32_t ret = OV5640_OK;
 8000e9a:	2400      	movs	r4, #0
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
        {
          if (ret != OV5640_ERROR)
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8000e9c:	f100 0518 	add.w	r5, r0, #24
 8000ea0:	f04f 0801 	mov.w	r8, #1
 8000ea4:	e010      	b.n	8000ec8 <OV5640_SetResolution+0x50>
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8000ea6:	8873      	ldrh	r3, [r6, #2]
 8000ea8:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8000eac:	4643      	mov	r3, r8
 8000eae:	f10d 0207 	add.w	r2, sp, #7
 8000eb2:	8831      	ldrh	r1, [r6, #0]
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f000 faad 	bl	8001414 <ov5640_write_reg>
            {
              ret = OV5640_ERROR;
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	bf18      	it	ne
 8000ebe:	f04f 34ff 	movne.w	r4, #4294967295
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8000ec2:	3604      	adds	r6, #4
 8000ec4:	42b7      	cmp	r7, r6
 8000ec6:	d07d      	beq.n	8000fc4 <OV5640_SetResolution+0x14c>
          if (ret != OV5640_ERROR)
 8000ec8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ecc:	d0f9      	beq.n	8000ec2 <OV5640_SetResolution+0x4a>
 8000ece:	e7ea      	b.n	8000ea6 <OV5640_SetResolution+0x2e>
 8000ed0:	4e41      	ldr	r6, [pc, #260]	; (8000fd8 <OV5640_SetResolution+0x160>)
 8000ed2:	f106 0710 	add.w	r7, r6, #16
  int32_t ret = OV5640_OK;
 8000ed6:	2400      	movs	r4, #0
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
        {
          if (ret != OV5640_ERROR)
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8000ed8:	f100 0518 	add.w	r5, r0, #24
 8000edc:	f04f 0801 	mov.w	r8, #1
 8000ee0:	e010      	b.n	8000f04 <OV5640_SetResolution+0x8c>
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8000ee2:	8873      	ldrh	r3, [r6, #2]
 8000ee4:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8000ee8:	4643      	mov	r3, r8
 8000eea:	f10d 0207 	add.w	r2, sp, #7
 8000eee:	8831      	ldrh	r1, [r6, #0]
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f000 fa8f 	bl	8001414 <ov5640_write_reg>
            {
              ret = OV5640_ERROR;
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	bf18      	it	ne
 8000efa:	f04f 34ff 	movne.w	r4, #4294967295
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8000efe:	3604      	adds	r6, #4
 8000f00:	42b7      	cmp	r7, r6
 8000f02:	d05f      	beq.n	8000fc4 <OV5640_SetResolution+0x14c>
          if (ret != OV5640_ERROR)
 8000f04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f08:	d0f9      	beq.n	8000efe <OV5640_SetResolution+0x86>
 8000f0a:	e7ea      	b.n	8000ee2 <OV5640_SetResolution+0x6a>
 8000f0c:	4e33      	ldr	r6, [pc, #204]	; (8000fdc <OV5640_SetResolution+0x164>)
 8000f0e:	f106 0710 	add.w	r7, r6, #16
  int32_t ret = OV5640_OK;
 8000f12:	2400      	movs	r4, #0
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
        {
          if (ret != OV5640_ERROR)
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8000f14:	f100 0518 	add.w	r5, r0, #24
 8000f18:	f04f 0801 	mov.w	r8, #1
 8000f1c:	e010      	b.n	8000f40 <OV5640_SetResolution+0xc8>
            tmp = (uint8_t)OV5640_480x272[index][1];
 8000f1e:	8873      	ldrh	r3, [r6, #2]
 8000f20:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8000f24:	4643      	mov	r3, r8
 8000f26:	f10d 0207 	add.w	r2, sp, #7
 8000f2a:	8831      	ldrh	r1, [r6, #0]
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	f000 fa71 	bl	8001414 <ov5640_write_reg>
            {
              ret = OV5640_ERROR;
 8000f32:	2800      	cmp	r0, #0
 8000f34:	bf18      	it	ne
 8000f36:	f04f 34ff 	movne.w	r4, #4294967295
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8000f3a:	3604      	adds	r6, #4
 8000f3c:	42be      	cmp	r6, r7
 8000f3e:	d041      	beq.n	8000fc4 <OV5640_SetResolution+0x14c>
          if (ret != OV5640_ERROR)
 8000f40:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f44:	d0f9      	beq.n	8000f3a <OV5640_SetResolution+0xc2>
 8000f46:	e7ea      	b.n	8000f1e <OV5640_SetResolution+0xa6>
 8000f48:	4e25      	ldr	r6, [pc, #148]	; (8000fe0 <OV5640_SetResolution+0x168>)
 8000f4a:	f106 0710 	add.w	r7, r6, #16
  int32_t ret = OV5640_OK;
 8000f4e:	2400      	movs	r4, #0
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
        {
          if (ret != OV5640_ERROR)
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8000f50:	f100 0518 	add.w	r5, r0, #24
 8000f54:	f04f 0801 	mov.w	r8, #1
 8000f58:	e010      	b.n	8000f7c <OV5640_SetResolution+0x104>
            tmp = (uint8_t)OV5640_VGA[index][1];
 8000f5a:	8873      	ldrh	r3, [r6, #2]
 8000f5c:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8000f60:	4643      	mov	r3, r8
 8000f62:	f10d 0207 	add.w	r2, sp, #7
 8000f66:	8831      	ldrh	r1, [r6, #0]
 8000f68:	4628      	mov	r0, r5
 8000f6a:	f000 fa53 	bl	8001414 <ov5640_write_reg>
            {
              ret = OV5640_ERROR;
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	bf18      	it	ne
 8000f72:	f04f 34ff 	movne.w	r4, #4294967295
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8000f76:	3604      	adds	r6, #4
 8000f78:	42be      	cmp	r6, r7
 8000f7a:	d023      	beq.n	8000fc4 <OV5640_SetResolution+0x14c>
          if (ret != OV5640_ERROR)
 8000f7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f80:	d0f9      	beq.n	8000f76 <OV5640_SetResolution+0xfe>
 8000f82:	e7ea      	b.n	8000f5a <OV5640_SetResolution+0xe2>
 8000f84:	4e17      	ldr	r6, [pc, #92]	; (8000fe4 <OV5640_SetResolution+0x16c>)
 8000f86:	f106 0710 	add.w	r7, r6, #16
  int32_t ret = OV5640_OK;
 8000f8a:	2400      	movs	r4, #0
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
        {
          if (ret != OV5640_ERROR)
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8000f8c:	f100 0518 	add.w	r5, r0, #24
 8000f90:	f04f 0801 	mov.w	r8, #1
 8000f94:	e010      	b.n	8000fb8 <OV5640_SetResolution+0x140>
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8000f96:	8873      	ldrh	r3, [r6, #2]
 8000f98:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	f10d 0207 	add.w	r2, sp, #7
 8000fa2:	8831      	ldrh	r1, [r6, #0]
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f000 fa35 	bl	8001414 <ov5640_write_reg>
            {
              ret = OV5640_ERROR;
 8000faa:	2800      	cmp	r0, #0
 8000fac:	bf18      	it	ne
 8000fae:	f04f 34ff 	movne.w	r4, #4294967295
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8000fb2:	3604      	adds	r6, #4
 8000fb4:	42be      	cmp	r6, r7
 8000fb6:	d005      	beq.n	8000fc4 <OV5640_SetResolution+0x14c>
          if (ret != OV5640_ERROR)
 8000fb8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000fbc:	d0f9      	beq.n	8000fb2 <OV5640_SetResolution+0x13a>
 8000fbe:	e7ea      	b.n	8000f96 <OV5640_SetResolution+0x11e>
    ret = OV5640_ERROR;
 8000fc0:	f04f 34ff 	mov.w	r4, #4294967295
        break;
    }
  }

  return ret;
}
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	b002      	add	sp, #8
 8000fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Resolution > OV5640_R800x480)
 8000fcc:	f04f 34ff 	mov.w	r4, #4294967295
  return ret;
 8000fd0:	e7f8      	b.n	8000fc4 <OV5640_SetResolution+0x14c>
 8000fd2:	bf00      	nop
 8000fd4:	080138cc 	.word	0x080138cc
 8000fd8:	080138dc 	.word	0x080138dc
 8000fdc:	080134c4 	.word	0x080134c4
 8000fe0:	080138ec 	.word	0x080138ec
 8000fe4:	080138fc 	.word	0x080138fc

08000fe8 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	460d      	mov	r5, r1

  uint32_t tickstart = HAL_GetTick();
 8000fec:	f000 fd6c 	bl	8001ac8 <HAL_GetTick>
 8000ff0:	4604      	mov	r4, r0

  uint32_t wait = Delay;

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	f000 fd69 	bl	8001ac8 <HAL_GetTick>
 8000ff6:	1b00      	subs	r0, r0, r4
 8000ff8:	42a8      	cmp	r0, r5
 8000ffa:	d202      	bcs.n	8001002 <OV5640_Delay+0x1a>
  {
	  HAL_IncTick();
 8000ffc:	f000 fd58 	bl	8001ab0 <HAL_IncTick>
 8001000:	e7f7      	b.n	8000ff2 <OV5640_Delay+0xa>
  }

return OV5640_OK;
}
 8001002:	2000      	movs	r0, #0
 8001004:	bd38      	pop	{r3, r4, r5, pc}

08001006 <OV5640_SetPixelFormat>:
{
 8001006:	b570      	push	{r4, r5, r6, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	4605      	mov	r5, r0
 800100c:	460c      	mov	r4, r1
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800100e:	2902      	cmp	r1, #2
 8001010:	d903      	bls.n	800101a <OV5640_SetPixelFormat+0x14>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001012:	1fcb      	subs	r3, r1, #7
 8001014:	2b01      	cmp	r3, #1
 8001016:	f200 8136 	bhi.w	8001286 <OV5640_SetPixelFormat+0x280>
    switch (PixelFormat)
 800101a:	1e63      	subs	r3, r4, #1
 800101c:	2b07      	cmp	r3, #7
 800101e:	f200 8105 	bhi.w	800122c <OV5640_SetPixelFormat+0x226>
 8001022:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001026:	0032      	.short	0x0032
 8001028:	01030008 	.word	0x01030008
 800102c:	01030103 	.word	0x01030103
 8001030:	005b0103 	.word	0x005b0103
 8001034:	0085      	.short	0x0085
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001036:	2330      	movs	r3, #48	; 0x30
 8001038:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800103c:	2301      	movs	r3, #1
 800103e:	f10d 0207 	add.w	r2, sp, #7
 8001042:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8001046:	f105 0018 	add.w	r0, r5, #24
 800104a:	f000 f9e3 	bl	8001414 <ov5640_write_reg>
 800104e:	b110      	cbz	r0, 8001056 <OV5640_SetPixelFormat+0x50>
 8001050:	f04f 36ff 	mov.w	r6, #4294967295
 8001054:	e0fb      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              (void)OV5640_Delay(pObj, 1);
 8001056:	2101      	movs	r1, #1
 8001058:	4628      	mov	r0, r5
 800105a:	f7ff ffc5 	bl	8000fe8 <OV5640_Delay>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800105e:	2300      	movs	r3, #0
 8001060:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001064:	2301      	movs	r3, #1
 8001066:	f10d 0207 	add.w	r2, sp, #7
 800106a:	f245 011f 	movw	r1, #20511	; 0x501f
 800106e:	f105 0018 	add.w	r0, r5, #24
 8001072:	f000 f9cf 	bl	8001414 <ov5640_write_reg>
 8001076:	4606      	mov	r6, r0
 8001078:	b110      	cbz	r0, 8001080 <OV5640_SetPixelFormat+0x7a>
              ret = OV5640_ERROR;
 800107a:	f04f 36ff 	mov.w	r6, #4294967295
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800107e:	e0e6      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              (void)OV5640_Delay(pObj, 1);
 8001080:	2101      	movs	r1, #1
 8001082:	4628      	mov	r0, r5
 8001084:	f7ff ffb0 	bl	8000fe8 <OV5640_Delay>
 8001088:	e0e1      	b.n	800124e <OV5640_SetPixelFormat+0x248>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800108a:	2323      	movs	r3, #35	; 0x23
 800108c:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001090:	2301      	movs	r3, #1
 8001092:	f10d 0207 	add.w	r2, sp, #7
 8001096:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 800109a:	f105 0018 	add.w	r0, r5, #24
 800109e:	f000 f9b9 	bl	8001414 <ov5640_write_reg>
 80010a2:	b110      	cbz	r0, 80010aa <OV5640_SetPixelFormat+0xa4>
 80010a4:	f04f 36ff 	mov.w	r6, #4294967295
 80010a8:	e0d1      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              (void)OV5640_Delay(pObj, 1);
 80010aa:	2101      	movs	r1, #1
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff ff9b 	bl	8000fe8 <OV5640_Delay>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80010b2:	2301      	movs	r3, #1
 80010b4:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80010b8:	f10d 0207 	add.w	r2, sp, #7
 80010bc:	f245 011f 	movw	r1, #20511	; 0x501f
 80010c0:	f105 0018 	add.w	r0, r5, #24
 80010c4:	f000 f9a6 	bl	8001414 <ov5640_write_reg>
 80010c8:	4606      	mov	r6, r0
 80010ca:	b110      	cbz	r0, 80010d2 <OV5640_SetPixelFormat+0xcc>
              ret = OV5640_ERROR;
 80010cc:	f04f 36ff 	mov.w	r6, #4294967295
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80010d0:	e0bd      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              (void)OV5640_Delay(pObj, 1);
 80010d2:	2101      	movs	r1, #1
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff ff87 	bl	8000fe8 <OV5640_Delay>
 80010da:	e0b8      	b.n	800124e <OV5640_SetPixelFormat+0x248>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80010dc:	2310      	movs	r3, #16
 80010de:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80010e2:	2301      	movs	r3, #1
 80010e4:	f10d 0207 	add.w	r2, sp, #7
 80010e8:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 80010ec:	f105 0018 	add.w	r0, r5, #24
 80010f0:	f000 f990 	bl	8001414 <ov5640_write_reg>
 80010f4:	b110      	cbz	r0, 80010fc <OV5640_SetPixelFormat+0xf6>
 80010f6:	f04f 36ff 	mov.w	r6, #4294967295
 80010fa:	e0a8      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              (void)OV5640_Delay(pObj, 1);
 80010fc:	2101      	movs	r1, #1
 80010fe:	4628      	mov	r0, r5
 8001100:	f7ff ff72 	bl	8000fe8 <OV5640_Delay>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001104:	2300      	movs	r3, #0
 8001106:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800110a:	2301      	movs	r3, #1
 800110c:	f10d 0207 	add.w	r2, sp, #7
 8001110:	f245 011f 	movw	r1, #20511	; 0x501f
 8001114:	f105 0018 	add.w	r0, r5, #24
 8001118:	f000 f97c 	bl	8001414 <ov5640_write_reg>
 800111c:	4606      	mov	r6, r0
 800111e:	b110      	cbz	r0, 8001126 <OV5640_SetPixelFormat+0x120>
              ret = OV5640_ERROR;
 8001120:	f04f 36ff 	mov.w	r6, #4294967295
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001124:	e093      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              (void)OV5640_Delay(pObj, 1);
 8001126:	2101      	movs	r1, #1
 8001128:	4628      	mov	r0, r5
 800112a:	f7ff ff5d 	bl	8000fe8 <OV5640_Delay>
 800112e:	e08e      	b.n	800124e <OV5640_SetPixelFormat+0x248>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001130:	2330      	movs	r3, #48	; 0x30
 8001132:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001136:	2301      	movs	r3, #1
 8001138:	f10d 0207 	add.w	r2, sp, #7
 800113c:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8001140:	f105 0018 	add.w	r0, r5, #24
 8001144:	f000 f966 	bl	8001414 <ov5640_write_reg>
 8001148:	2800      	cmp	r0, #0
 800114a:	d055      	beq.n	80011f8 <OV5640_SetPixelFormat+0x1f2>
 800114c:	f04f 36ff 	mov.w	r6, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001150:	3518      	adds	r5, #24
 8001152:	2301      	movs	r3, #1
 8001154:	f10d 0207 	add.w	r2, sp, #7
 8001158:	f643 0121 	movw	r1, #14369	; 0x3821
 800115c:	4628      	mov	r0, r5
 800115e:	f000 f925 	bl	80013ac <ov5640_read_reg>
 8001162:	2800      	cmp	r0, #0
 8001164:	f040 8092 	bne.w	800128c <OV5640_SetPixelFormat+0x286>
        tmp |= (1 << 5);
 8001168:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	f88d 3007 	strb.w	r3, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001174:	2301      	movs	r3, #1
 8001176:	f10d 0207 	add.w	r2, sp, #7
 800117a:	f643 0121 	movw	r1, #14369	; 0x3821
 800117e:	4628      	mov	r0, r5
 8001180:	f000 f948 	bl	8001414 <ov5640_write_reg>
 8001184:	2800      	cmp	r0, #0
 8001186:	f040 8084 	bne.w	8001292 <OV5640_SetPixelFormat+0x28c>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800118a:	2301      	movs	r3, #1
 800118c:	f10d 0207 	add.w	r2, sp, #7
 8001190:	f243 0102 	movw	r1, #12290	; 0x3002
 8001194:	4628      	mov	r0, r5
 8001196:	f000 f909 	bl	80013ac <ov5640_read_reg>
 800119a:	2800      	cmp	r0, #0
 800119c:	d17c      	bne.n	8001298 <OV5640_SetPixelFormat+0x292>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800119e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011a2:	f023 031c 	bic.w	r3, r3, #28
 80011a6:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80011aa:	2301      	movs	r3, #1
 80011ac:	f10d 0207 	add.w	r2, sp, #7
 80011b0:	f243 0102 	movw	r1, #12290	; 0x3002
 80011b4:	4628      	mov	r0, r5
 80011b6:	f000 f92d 	bl	8001414 <ov5640_write_reg>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d16f      	bne.n	800129e <OV5640_SetPixelFormat+0x298>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80011be:	2301      	movs	r3, #1
 80011c0:	f10d 0207 	add.w	r2, sp, #7
 80011c4:	f243 0106 	movw	r1, #12294	; 0x3006
 80011c8:	4628      	mov	r0, r5
 80011ca:	f000 f8ef 	bl	80013ac <ov5640_read_reg>
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d168      	bne.n	80012a4 <OV5640_SetPixelFormat+0x29e>
                tmp |= ((1 << 5) | (1 << 3));
 80011d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011d6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80011da:	f88d 3007 	strb.w	r3, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80011de:	2301      	movs	r3, #1
 80011e0:	f10d 0207 	add.w	r2, sp, #7
 80011e4:	f243 0106 	movw	r1, #12294	; 0x3006
 80011e8:	4628      	mov	r0, r5
 80011ea:	f000 f913 	bl	8001414 <ov5640_write_reg>
                  ret = OV5640_ERROR;
 80011ee:	2800      	cmp	r0, #0
 80011f0:	bf18      	it	ne
 80011f2:	f04f 36ff 	movne.w	r6, #4294967295
 80011f6:	e02a      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              (void)OV5640_Delay(pObj, 1);
 80011f8:	2101      	movs	r1, #1
 80011fa:	4628      	mov	r0, r5
 80011fc:	f7ff fef4 	bl	8000fe8 <OV5640_Delay>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001200:	2300      	movs	r3, #0
 8001202:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001206:	2301      	movs	r3, #1
 8001208:	f10d 0207 	add.w	r2, sp, #7
 800120c:	f245 011f 	movw	r1, #20511	; 0x501f
 8001210:	f105 0018 	add.w	r0, r5, #24
 8001214:	f000 f8fe 	bl	8001414 <ov5640_write_reg>
 8001218:	4606      	mov	r6, r0
 800121a:	b110      	cbz	r0, 8001222 <OV5640_SetPixelFormat+0x21c>
              ret = OV5640_ERROR;
 800121c:	f04f 36ff 	mov.w	r6, #4294967295
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001220:	e796      	b.n	8001150 <OV5640_SetPixelFormat+0x14a>
              (void)OV5640_Delay(pObj, 1);
 8001222:	2101      	movs	r1, #1
 8001224:	4628      	mov	r0, r5
 8001226:	f7ff fedf 	bl	8000fe8 <OV5640_Delay>
 800122a:	e791      	b.n	8001150 <OV5640_SetPixelFormat+0x14a>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800122c:	236f      	movs	r3, #111	; 0x6f
 800122e:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001232:	2301      	movs	r3, #1
 8001234:	f10d 0207 	add.w	r2, sp, #7
 8001238:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 800123c:	f105 0018 	add.w	r0, r5, #24
 8001240:	f000 f8e8 	bl	8001414 <ov5640_write_reg>
 8001244:	b130      	cbz	r0, 8001254 <OV5640_SetPixelFormat+0x24e>
 8001246:	f04f 36ff 	mov.w	r6, #4294967295
    if (PixelFormat == OV5640_JPEG)
 800124a:	2c08      	cmp	r4, #8
 800124c:	d080      	beq.n	8001150 <OV5640_SetPixelFormat+0x14a>
}
 800124e:	4630      	mov	r0, r6
 8001250:	b002      	add	sp, #8
 8001252:	bd70      	pop	{r4, r5, r6, pc}
              (void)OV5640_Delay(pObj, 1);
 8001254:	2101      	movs	r1, #1
 8001256:	4628      	mov	r0, r5
 8001258:	f7ff fec6 	bl	8000fe8 <OV5640_Delay>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800125c:	2301      	movs	r3, #1
 800125e:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001262:	f10d 0207 	add.w	r2, sp, #7
 8001266:	f245 011f 	movw	r1, #20511	; 0x501f
 800126a:	f105 0018 	add.w	r0, r5, #24
 800126e:	f000 f8d1 	bl	8001414 <ov5640_write_reg>
 8001272:	4606      	mov	r6, r0
 8001274:	b110      	cbz	r0, 800127c <OV5640_SetPixelFormat+0x276>
              ret = OV5640_ERROR;
 8001276:	f04f 36ff 	mov.w	r6, #4294967295
 800127a:	e7e6      	b.n	800124a <OV5640_SetPixelFormat+0x244>
              (void)OV5640_Delay(pObj, 1);
 800127c:	2101      	movs	r1, #1
 800127e:	4628      	mov	r0, r5
 8001280:	f7ff feb2 	bl	8000fe8 <OV5640_Delay>
 8001284:	e7e1      	b.n	800124a <OV5640_SetPixelFormat+0x244>
    ret = OV5640_ERROR;
 8001286:	f04f 36ff 	mov.w	r6, #4294967295
 800128a:	e7e0      	b.n	800124e <OV5640_SetPixelFormat+0x248>
        ret = OV5640_ERROR;
 800128c:	f04f 36ff 	mov.w	r6, #4294967295
 8001290:	e7dd      	b.n	800124e <OV5640_SetPixelFormat+0x248>
          ret = OV5640_ERROR;
 8001292:	f04f 36ff 	mov.w	r6, #4294967295
 8001296:	e7da      	b.n	800124e <OV5640_SetPixelFormat+0x248>
            ret = OV5640_ERROR;
 8001298:	f04f 36ff 	mov.w	r6, #4294967295
 800129c:	e7d7      	b.n	800124e <OV5640_SetPixelFormat+0x248>
              ret = OV5640_ERROR;
 800129e:	f04f 36ff 	mov.w	r6, #4294967295
 80012a2:	e7d4      	b.n	800124e <OV5640_SetPixelFormat+0x248>
                ret = OV5640_ERROR;
 80012a4:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 80012a8:	e7d1      	b.n	800124e <OV5640_SetPixelFormat+0x248>

080012aa <OV5640_SetPolarities>:
  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80012aa:	b308      	cbz	r0, 80012f0 <OV5640_SetPolarities+0x46>
{
 80012ac:	b510      	push	{r4, lr}
 80012ae:	b082      	sub	sp, #8
  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80012b0:	2901      	cmp	r1, #1
 80012b2:	d817      	bhi.n	80012e4 <OV5640_SetPolarities+0x3a>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 80012b4:	2a01      	cmp	r2, #1
 80012b6:	d818      	bhi.n	80012ea <OV5640_SetPolarities+0x40>
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d816      	bhi.n	80012ea <OV5640_SetPolarities+0x40>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80012bc:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80012c0:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 80012c4:	f88d 1007 	strb.w	r1, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 80012c8:	2301      	movs	r3, #1
 80012ca:	f10d 0207 	add.w	r2, sp, #7
 80012ce:	f244 7140 	movw	r1, #18240	; 0x4740
 80012d2:	3018      	adds	r0, #24
 80012d4:	f000 f89e 	bl	8001414 <ov5640_write_reg>
 80012d8:	3800      	subs	r0, #0
 80012da:	bf18      	it	ne
 80012dc:	2001      	movne	r0, #1
 80012de:	4240      	negs	r0, r0
}
 80012e0:	b002      	add	sp, #8
 80012e2:	bd10      	pop	{r4, pc}
    ret = OV5640_ERROR;
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	e7fa      	b.n	80012e0 <OV5640_SetPolarities+0x36>
 80012ea:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80012ee:	e7f7      	b.n	80012e0 <OV5640_SetPolarities+0x36>
    ret = OV5640_ERROR;
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80012f4:	4770      	bx	lr
	...

080012f8 <OV5640_Init>:
{
 80012f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012fc:	b083      	sub	sp, #12
  if (pObj->IsInitialized == 0U)
 80012fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001302:	bbe3      	cbnz	r3, 800137e <OV5640_Init+0x86>
 8001304:	4681      	mov	r9, r0
 8001306:	468b      	mov	fp, r1
 8001308:	4692      	mov	sl, r2
    if ((Resolution > OV5640_R800x480) ||
 800130a:	2904      	cmp	r1, #4
 800130c:	d83c      	bhi.n	8001388 <OV5640_Init+0x90>
 800130e:	2a02      	cmp	r2, #2
 8001310:	d902      	bls.n	8001318 <OV5640_Init+0x20>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001312:	1fd3      	subs	r3, r2, #7
 8001314:	2b01      	cmp	r3, #1
 8001316:	d83a      	bhi.n	800138e <OV5640_Init+0x96>
 8001318:	4c23      	ldr	r4, [pc, #140]	; (80013a8 <OV5640_Init+0xb0>)
 800131a:	f504 767e 	add.w	r6, r4, #1016	; 0x3f8
{
 800131e:	2500      	movs	r5, #0
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001320:	f109 0818 	add.w	r8, r9, #24
 8001324:	2701      	movs	r7, #1
 8001326:	e010      	b.n	800134a <OV5640_Init+0x52>
          tmp = (uint8_t)OV5640_Common[index][1];
 8001328:	8863      	ldrh	r3, [r4, #2]
 800132a:	f88d 3007 	strb.w	r3, [sp, #7]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	f10d 0207 	add.w	r2, sp, #7
 8001334:	8821      	ldrh	r1, [r4, #0]
 8001336:	4640      	mov	r0, r8
 8001338:	f000 f86c 	bl	8001414 <ov5640_write_reg>
            ret = OV5640_ERROR;
 800133c:	2800      	cmp	r0, #0
 800133e:	bf18      	it	ne
 8001340:	f04f 35ff 	movne.w	r5, #4294967295
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001344:	3404      	adds	r4, #4
 8001346:	42a6      	cmp	r6, r4
 8001348:	d003      	beq.n	8001352 <OV5640_Init+0x5a>
        if (ret != OV5640_ERROR)
 800134a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800134e:	d0f9      	beq.n	8001344 <OV5640_Init+0x4c>
 8001350:	e7ea      	b.n	8001328 <OV5640_Init+0x30>
      if (ret == OV5640_OK)
 8001352:	b9ad      	cbnz	r5, 8001380 <OV5640_Init+0x88>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001354:	4659      	mov	r1, fp
 8001356:	4648      	mov	r0, r9
 8001358:	f7ff fd8e 	bl	8000e78 <OV5640_SetResolution>
 800135c:	b9d0      	cbnz	r0, 8001394 <OV5640_Init+0x9c>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800135e:	4651      	mov	r1, sl
 8001360:	4648      	mov	r0, r9
 8001362:	f7ff fe50 	bl	8001006 <OV5640_SetPixelFormat>
 8001366:	b9c0      	cbnz	r0, 800139a <OV5640_Init+0xa2>
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001368:	2300      	movs	r3, #0
 800136a:	2201      	movs	r2, #1
 800136c:	4611      	mov	r1, r2
 800136e:	4648      	mov	r0, r9
 8001370:	f7ff ff9b 	bl	80012aa <OV5640_SetPolarities>
 8001374:	b9a0      	cbnz	r0, 80013a0 <OV5640_Init+0xa8>
          pObj->IsInitialized = 1U;
 8001376:	2301      	movs	r3, #1
 8001378:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 800137c:	e000      	b.n	8001380 <OV5640_Init+0x88>
  int32_t ret = OV5640_OK;
 800137e:	2500      	movs	r5, #0
}
 8001380:	4628      	mov	r0, r5
 8001382:	b003      	add	sp, #12
 8001384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ret = OV5640_ERROR;
 8001388:	f04f 35ff 	mov.w	r5, #4294967295
 800138c:	e7f8      	b.n	8001380 <OV5640_Init+0x88>
 800138e:	f04f 35ff 	mov.w	r5, #4294967295
 8001392:	e7f5      	b.n	8001380 <OV5640_Init+0x88>
          ret = OV5640_ERROR;
 8001394:	f04f 35ff 	mov.w	r5, #4294967295
 8001398:	e7f2      	b.n	8001380 <OV5640_Init+0x88>
          ret = OV5640_ERROR;
 800139a:	f04f 35ff 	mov.w	r5, #4294967295
 800139e:	e7ef      	b.n	8001380 <OV5640_Init+0x88>
          ret = OV5640_ERROR;
 80013a0:	f04f 35ff 	mov.w	r5, #4294967295
  return ret;
 80013a4:	e7ec      	b.n	8001380 <OV5640_Init+0x88>
 80013a6:	bf00      	nop
 80013a8:	080134d4 	.word	0x080134d4

080013ac <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80013ac:	b530      	push	{r4, r5, lr}
 80013ae:	b085      	sub	sp, #20
 80013b0:	4614      	mov	r4, r2
 80013b2:	461d      	mov	r5, r3
	uint16_t temp = reg;
	uint8_t package[2] = {0};
	package[1] = temp;
 80013b4:	f88d 100d 	strb.w	r1, [sp, #13]
	temp >>= 8;
 80013b8:	0a09      	lsrs	r1, r1, #8
	package[0] = temp;
 80013ba:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, (OV5640_SLAVE_ADDR << 1) | I2C_WRITE_BIT, package, sizeof(package), 100) == HAL_OK)
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2302      	movs	r3, #2
 80013c4:	aa03      	add	r2, sp, #12
 80013c6:	2178      	movs	r1, #120	; 0x78
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <ov5640_read_reg+0x5c>)
 80013ca:	f002 fe25 	bl	8004018 <HAL_I2C_Master_Transmit>
 80013ce:	b988      	cbnz	r0, 80013f4 <ov5640_read_reg+0x48>
	{
		if (HAL_I2C_Master_Receive(&hi2c1, (OV5640_SLAVE_ADDR << 1) | I2C_READ_BIT, pdata, length, 100) == HAL_OK)
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	462b      	mov	r3, r5
 80013d6:	4622      	mov	r2, r4
 80013d8:	2179      	movs	r1, #121	; 0x79
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <ov5640_read_reg+0x5c>)
 80013dc:	f002 fee0 	bl	80041a0 <HAL_I2C_Master_Receive>
 80013e0:	b940      	cbnz	r0, 80013f4 <ov5640_read_reg+0x48>
			{
				HAL_UART_Transmit(&huart1, pdata, 1, 10);
 80013e2:	230a      	movs	r3, #10
 80013e4:	2201      	movs	r2, #1
 80013e6:	4621      	mov	r1, r4
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <ov5640_read_reg+0x60>)
 80013ea:	f004 fff1 	bl	80063d0 <HAL_UART_Transmit>
				return OV5640_OK;
 80013ee:	2000      	movs	r0, #0
			}
	}
	HAL_UART_Transmit(&huart1, ERROR_MESSAGE, sizeof(ERROR_MESSAGE), 10);
	return OV5640_ERROR;
}
 80013f0:	b005      	add	sp, #20
 80013f2:	bd30      	pop	{r4, r5, pc}
	HAL_UART_Transmit(&huart1, ERROR_MESSAGE, sizeof(ERROR_MESSAGE), 10);
 80013f4:	230a      	movs	r3, #10
 80013f6:	221b      	movs	r2, #27
 80013f8:	4905      	ldr	r1, [pc, #20]	; (8001410 <ov5640_read_reg+0x64>)
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <ov5640_read_reg+0x60>)
 80013fc:	f004 ffe8 	bl	80063d0 <HAL_UART_Transmit>
	return OV5640_ERROR;
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	e7f4      	b.n	80013f0 <ov5640_read_reg+0x44>
 8001406:	bf00      	nop
 8001408:	20012d08 	.word	0x20012d08
 800140c:	20012e04 	.word	0x20012e04
 8001410:	0801390c 	.word	0x0801390c

08001414 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8001414:	b500      	push	{lr}
 8001416:	b085      	sub	sp, #20
	uint16_t temp = reg;
	uint8_t package[3] = {0};
	package[1] = temp;
 8001418:	f88d 100d 	strb.w	r1, [sp, #13]
	temp >>= 8;
 800141c:	0a09      	lsrs	r1, r1, #8
	package[0] = temp;
 800141e:	f88d 100c 	strb.w	r1, [sp, #12]
	package[2] = *data;
 8001422:	7813      	ldrb	r3, [r2, #0]
 8001424:	f88d 300e 	strb.w	r3, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, (OV5640_SLAVE_ADDR << 1) | I2C_WRITE_BIT, package, sizeof(package), 100) == HAL_OK)
 8001428:	2364      	movs	r3, #100	; 0x64
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2303      	movs	r3, #3
 800142e:	aa03      	add	r2, sp, #12
 8001430:	2178      	movs	r1, #120	; 0x78
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <ov5640_write_reg+0x4c>)
 8001434:	f002 fdf0 	bl	8004018 <HAL_I2C_Master_Transmit>
 8001438:	b948      	cbnz	r0, 800144e <ov5640_write_reg+0x3a>
	{

		HAL_UART_Transmit(&huart1, package, 3, 10);
 800143a:	230a      	movs	r3, #10
 800143c:	2203      	movs	r2, #3
 800143e:	a903      	add	r1, sp, #12
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <ov5640_write_reg+0x50>)
 8001442:	f004 ffc5 	bl	80063d0 <HAL_UART_Transmit>
		return OV5640_OK;
 8001446:	2000      	movs	r0, #0
	}
	HAL_UART_Transmit(&huart1, ERROR_MESSAGE, sizeof(ERROR_MESSAGE), 10);
	return OV5640_ERROR;
}
 8001448:	b005      	add	sp, #20
 800144a:	f85d fb04 	ldr.w	pc, [sp], #4
	HAL_UART_Transmit(&huart1, ERROR_MESSAGE, sizeof(ERROR_MESSAGE), 10);
 800144e:	230a      	movs	r3, #10
 8001450:	221b      	movs	r2, #27
 8001452:	4905      	ldr	r1, [pc, #20]	; (8001468 <ov5640_write_reg+0x54>)
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <ov5640_write_reg+0x50>)
 8001456:	f004 ffbb 	bl	80063d0 <HAL_UART_Transmit>
	return OV5640_ERROR;
 800145a:	f04f 30ff 	mov.w	r0, #4294967295
 800145e:	e7f3      	b.n	8001448 <ov5640_write_reg+0x34>
 8001460:	20012d08 	.word	0x20012d08
 8001464:	20012e04 	.word	0x20012e04
 8001468:	0801390c 	.word	0x0801390c

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b500      	push	{lr}
 800146e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x3c>)
 8001472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001474:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
 800147a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001480:	9200      	str	r2, [sp, #0]
 8001482:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800148a:	645a      	str	r2, [r3, #68]	; 0x44
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	210f      	movs	r1, #15
 800149a:	f06f 0001 	mvn.w	r0, #1
 800149e:	f000 fb3f 	bl	8001b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	b003      	add	sp, #12
 80014a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b0:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	2300      	movs	r3, #0
 80014b4:	9307      	str	r3, [sp, #28]
 80014b6:	9308      	str	r3, [sp, #32]
 80014b8:	9309      	str	r3, [sp, #36]	; 0x24
 80014ba:	930a      	str	r3, [sp, #40]	; 0x28
 80014bc:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hdcmi->Instance==DCMI)
 80014be:	6802      	ldr	r2, [r0, #0]
 80014c0:	4b50      	ldr	r3, [pc, #320]	; (8001604 <HAL_DCMI_MspInit+0x158>)
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d002      	beq.n	80014cc <HAL_DCMI_MspInit+0x20>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80014c6:	b00c      	add	sp, #48	; 0x30
 80014c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014cc:	4604      	mov	r4, r0
    __HAL_RCC_DCMI_CLK_ENABLE();
 80014ce:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <HAL_DCMI_MspInit+0x15c>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
 80014d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014da:	f002 0201 	and.w	r2, r2, #1
 80014de:	9201      	str	r2, [sp, #4]
 80014e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e4:	f042 0210 	orr.w	r2, r2, #16
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
 80014ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ec:	f002 0210 	and.w	r2, r2, #16
 80014f0:	9202      	str	r2, [sp, #8]
 80014f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f6:	f042 0208 	orr.w	r2, r2, #8
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
 80014fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fe:	f002 0208 	and.w	r2, r2, #8
 8001502:	9203      	str	r2, [sp, #12]
 8001504:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
 800150e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001510:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001514:	9204      	str	r2, [sp, #16]
 8001516:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
 8001520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001522:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001526:	9205      	str	r2, [sp, #20]
 8001528:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152c:	f042 0201 	orr.w	r2, r2, #1
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	9306      	str	r3, [sp, #24]
 800153a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	f04f 0802 	mov.w	r8, #2
 8001544:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2500      	movs	r5, #0
 800154a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2603      	movs	r6, #3
 800154e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001550:	270d      	movs	r7, #13
 8001552:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001554:	a907      	add	r1, sp, #28
 8001556:	482d      	ldr	r0, [pc, #180]	; (800160c <HAL_DCMI_MspInit+0x160>)
 8001558:	f002 fa16 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800155c:	2308      	movs	r3, #8
 800155e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001568:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800156a:	a907      	add	r1, sp, #28
 800156c:	4828      	ldr	r0, [pc, #160]	; (8001610 <HAL_DCMI_MspInit+0x164>)
 800156e:	f002 fa0b 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001576:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001580:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001582:	a907      	add	r1, sp, #28
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <HAL_DCMI_MspInit+0x168>)
 8001586:	f002 f9ff 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800158a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800158e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001598:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800159a:	a907      	add	r1, sp, #28
 800159c:	481e      	ldr	r0, [pc, #120]	; (8001618 <HAL_DCMI_MspInit+0x16c>)
 800159e:	f002 f9f3 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80015a2:	2350      	movs	r3, #80	; 0x50
 80015a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015ae:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	a907      	add	r1, sp, #28
 80015b2:	481a      	ldr	r0, [pc, #104]	; (800161c <HAL_DCMI_MspInit+0x170>)
 80015b4:	f002 f9e8 	bl	8003988 <HAL_GPIO_Init>
    hdma_dcmi.Instance = DMA2_Stream1;
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <HAL_DCMI_MspInit+0x174>)
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_DCMI_MspInit+0x178>)
 80015bc:	6003      	str	r3, [r0, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80015be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c2:	6043      	str	r3, [r0, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c4:	6085      	str	r5, [r0, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c6:	60c5      	str	r5, [r0, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015cc:	6103      	str	r3, [r0, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	6143      	str	r3, [r0, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d8:	6183      	str	r3, [r0, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80015da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015de:	61c3      	str	r3, [r0, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80015e0:	6205      	str	r5, [r0, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015e2:	2304      	movs	r3, #4
 80015e4:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015e6:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 80015e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015ec:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015ee:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80015f0:	f000 fc52 	bl	8001e98 <HAL_DMA_Init>
 80015f4:	b918      	cbnz	r0, 80015fe <HAL_DCMI_MspInit+0x152>
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_DCMI_MspInit+0x174>)
 80015f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80015fa:	639c      	str	r4, [r3, #56]	; 0x38
}
 80015fc:	e763      	b.n	80014c6 <HAL_DCMI_MspInit+0x1a>
      Error_Handler();
 80015fe:	f7ff fc39 	bl	8000e74 <Error_Handler>
 8001602:	e7f8      	b.n	80015f6 <HAL_DCMI_MspInit+0x14a>
 8001604:	50050000 	.word	0x50050000
 8001608:	40023800 	.word	0x40023800
 800160c:	40021000 	.word	0x40021000
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021800 	.word	0x40021800
 8001618:	40021c00 	.word	0x40021c00
 800161c:	40020000 	.word	0x40020000
 8001620:	20012d54 	.word	0x20012d54
 8001624:	40026428 	.word	0x40026428

08001628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b530      	push	{r4, r5, lr}
 800162a:	b0a9      	sub	sp, #164	; 0xa4
 800162c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	2100      	movs	r1, #0
 8001630:	9123      	str	r1, [sp, #140]	; 0x8c
 8001632:	9124      	str	r1, [sp, #144]	; 0x90
 8001634:	9125      	str	r1, [sp, #148]	; 0x94
 8001636:	9126      	str	r1, [sp, #152]	; 0x98
 8001638:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800163a:	2284      	movs	r2, #132	; 0x84
 800163c:	a802      	add	r0, sp, #8
 800163e:	f010 ff86 	bl	801254e <memset>
  if(hi2c->Instance==I2C1)
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_I2C_MspInit+0xa4>)
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164a:	b029      	add	sp, #164	; 0xa4
 800164c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800164e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001652:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001654:	2300      	movs	r3, #0
 8001656:	931b      	str	r3, [sp, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001658:	a802      	add	r0, sp, #8
 800165a:	f003 fd75 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	2800      	cmp	r0, #0
 8001660:	d131      	bne.n	80016c6 <HAL_I2C_MspInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4c1b      	ldr	r4, [pc, #108]	; (80016d0 <HAL_I2C_MspInit+0xa8>)
 8001664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	6323      	str	r3, [r4, #48]	; 0x30
 800166c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = DCMI_SCL_Pin|DCMI_SDA_Pin;
 8001676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167a:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2500      	movs	r5, #0
 8001682:	9525      	str	r5, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	9526      	str	r5, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001686:	2304      	movs	r3, #4
 8001688:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	a923      	add	r1, sp, #140	; 0x8c
 800168c:	4811      	ldr	r0, [pc, #68]	; (80016d4 <HAL_I2C_MspInit+0xac>)
 800168e:	f002 f97b 	bl	8003988 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001698:	6423      	str	r3, [r4, #64]	; 0x40
 800169a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800169c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016a4:	462a      	mov	r2, r5
 80016a6:	2105      	movs	r1, #5
 80016a8:	201f      	movs	r0, #31
 80016aa:	f000 fa39 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016ae:	201f      	movs	r0, #31
 80016b0:	f000 fa66 	bl	8001b80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016b4:	462a      	mov	r2, r5
 80016b6:	2105      	movs	r1, #5
 80016b8:	2020      	movs	r0, #32
 80016ba:	f000 fa31 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016be:	2020      	movs	r0, #32
 80016c0:	f000 fa5e 	bl	8001b80 <HAL_NVIC_EnableIRQ>
}
 80016c4:	e7c1      	b.n	800164a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80016c6:	f7ff fbd5 	bl	8000e74 <Error_Handler>
 80016ca:	e7ca      	b.n	8001662 <HAL_I2C_MspInit+0x3a>
 80016cc:	40005400 	.word	0x40005400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020400 	.word	0x40020400

080016d8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80016d8:	6802      	ldr	r2, [r0, #0]
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_TIM_Base_MspInit+0x3c>)
 80016dc:	429a      	cmp	r2, r3
 80016de:	d000      	beq.n	80016e2 <HAL_TIM_Base_MspInit+0xa>
 80016e0:	4770      	bx	lr
{
 80016e2:	b500      	push	{lr}
 80016e4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016e6:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80016ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ec:	f042 0210 	orr.w	r2, r2, #16
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2105      	movs	r1, #5
 8001700:	2036      	movs	r0, #54	; 0x36
 8001702:	f000 fa0d 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001706:	2036      	movs	r0, #54	; 0x36
 8001708:	f000 fa3a 	bl	8001b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800170c:	b003      	add	sp, #12
 800170e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001712:	bf00      	nop
 8001714:	40001000 	.word	0x40001000

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	b0ac      	sub	sp, #176	; 0xb0
 800171c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	2100      	movs	r1, #0
 8001720:	9127      	str	r1, [sp, #156]	; 0x9c
 8001722:	9128      	str	r1, [sp, #160]	; 0xa0
 8001724:	9129      	str	r1, [sp, #164]	; 0xa4
 8001726:	912a      	str	r1, [sp, #168]	; 0xa8
 8001728:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172a:	2284      	movs	r2, #132	; 0x84
 800172c:	a806      	add	r0, sp, #24
 800172e:	f010 ff0e 	bl	801254e <memset>
  if(huart->Instance==USART1)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	4a43      	ldr	r2, [pc, #268]	; (8001844 <HAL_UART_MspInit+0x12c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d004      	beq.n	8001744 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800173a:	4a43      	ldr	r2, [pc, #268]	; (8001848 <HAL_UART_MspInit+0x130>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04a      	beq.n	80017d6 <HAL_UART_MspInit+0xbe>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001740:	b02c      	add	sp, #176	; 0xb0
 8001742:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001748:	2300      	movs	r3, #0
 800174a:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174c:	a806      	add	r0, sp, #24
 800174e:	f003 fcfb 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8001752:	2800      	cmp	r0, #0
 8001754:	d13c      	bne.n	80017d0 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_UART_MspInit+0x134>)
 8001758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800175a:	f042 0210 	orr.w	r2, r2, #16
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
 8001760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001762:	f002 0210 	and.w	r2, r2, #16
 8001766:	9201      	str	r2, [sp, #4]
 8001768:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176c:	f042 0202 	orr.w	r2, r2, #2
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001774:	f002 0202 	and.w	r2, r2, #2
 8001778:	9202      	str	r2, [sp, #8]
 800177a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	9303      	str	r3, [sp, #12]
 800178c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2602      	movs	r6, #2
 8001794:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2400      	movs	r4, #0
 8001798:	9429      	str	r4, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179c:	2507      	movs	r5, #7
 800179e:	952b      	str	r5, [sp, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017a0:	a927      	add	r1, sp, #156	; 0x9c
 80017a2:	482b      	ldr	r0, [pc, #172]	; (8001850 <HAL_UART_MspInit+0x138>)
 80017a4:	f002 f8f0 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	9429      	str	r4, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b4:	952b      	str	r5, [sp, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80017b6:	a927      	add	r1, sp, #156	; 0x9c
 80017b8:	4826      	ldr	r0, [pc, #152]	; (8001854 <HAL_UART_MspInit+0x13c>)
 80017ba:	f002 f8e5 	bl	8003988 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017be:	4622      	mov	r2, r4
 80017c0:	2105      	movs	r1, #5
 80017c2:	2025      	movs	r0, #37	; 0x25
 80017c4:	f000 f9ac 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017c8:	2025      	movs	r0, #37	; 0x25
 80017ca:	f000 f9d9 	bl	8001b80 <HAL_NVIC_EnableIRQ>
 80017ce:	e7b7      	b.n	8001740 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80017d0:	f7ff fb50 	bl	8000e74 <Error_Handler>
 80017d4:	e7bf      	b.n	8001756 <HAL_UART_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80017d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017da:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80017dc:	2300      	movs	r3, #0
 80017de:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e0:	a806      	add	r0, sp, #24
 80017e2:	f003 fcb1 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	bb48      	cbnz	r0, 800183c <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_UART_MspInit+0x134>)
 80017ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ec:	f042 0220 	orr.w	r2, r2, #32
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
 80017f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017f4:	f002 0220 	and.w	r2, r2, #32
 80017f8:	9204      	str	r2, [sp, #16]
 80017fa:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fe:	f042 0204 	orr.w	r2, r2, #4
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	9305      	str	r3, [sp, #20]
 800180c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2400      	movs	r4, #0
 8001818:	9429      	str	r4, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800181e:	2308      	movs	r3, #8
 8001820:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	a927      	add	r1, sp, #156	; 0x9c
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <HAL_UART_MspInit+0x140>)
 8001826:	f002 f8af 	bl	8003988 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800182a:	4622      	mov	r2, r4
 800182c:	2105      	movs	r1, #5
 800182e:	2047      	movs	r0, #71	; 0x47
 8001830:	f000 f976 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001834:	2047      	movs	r0, #71	; 0x47
 8001836:	f000 f9a3 	bl	8001b80 <HAL_NVIC_EnableIRQ>
}
 800183a:	e781      	b.n	8001740 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800183c:	f7ff fb1a 	bl	8000e74 <Error_Handler>
 8001840:	e7d2      	b.n	80017e8 <HAL_UART_MspInit+0xd0>
 8001842:	bf00      	nop
 8001844:	40011000 	.word	0x40011000
 8001848:	40011400 	.word	0x40011400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020400 	.word	0x40020400
 8001854:	40020000 	.word	0x40020000
 8001858:	40020800 	.word	0x40020800

0800185c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b500      	push	{lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001862:	2200      	movs	r2, #0
 8001864:	202d      	movs	r0, #45	; 0x2d
 8001866:	f000 f95b 	bl	8001b20 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800186a:	202d      	movs	r0, #45	; 0x2d
 800186c:	f000 f988 	bl	8001b80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_InitTick+0x6c>)
 8001872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001884:	a902      	add	r1, sp, #8
 8001886:	a803      	add	r0, sp, #12
 8001888:	f003 fc40 	bl	800510c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800188c:	f003 fc1e 	bl	80050cc <HAL_RCC_GetPCLK1Freq>
 8001890:	4603      	mov	r3, r0
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_InitTick+0x70>)
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_InitTick+0x74>)
 8001896:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189c:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800189e:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a0:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_InitTick+0x78>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9b      	lsrs	r3, r3, #18
 80018a8:	3b01      	subs	r3, #1
  htim14.Init.Prescaler = uwPrescalerValue;
 80018aa:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80018b2:	f004 f8b7 	bl	8005a24 <HAL_TIM_Base_Init>
 80018b6:	b118      	cbz	r0, 80018c0 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
  }

  /* Return function status */
  return HAL_ERROR;
 80018b8:	2001      	movs	r0, #1
}
 80018ba:	b009      	add	sp, #36	; 0x24
 80018bc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim14);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <HAL_InitTick+0x70>)
 80018c2:	f003 ff11 	bl	80056e8 <HAL_TIM_Base_Start_IT>
 80018c6:	e7f8      	b.n	80018ba <HAL_InitTick+0x5e>
 80018c8:	40023800 	.word	0x40023800
 80018cc:	20012f84 	.word	0x20012f84
 80018d0:	40002000 	.word	0x40002000
 80018d4:	431bde83 	.word	0x431bde83

080018d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler>

080018da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler>

080018dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler>

080018de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler>

080018e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler>

080018e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	4770      	bx	lr

080018e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018e6:	4802      	ldr	r0, [pc, #8]	; (80018f0 <I2C1_EV_IRQHandler+0xc>)
 80018e8:	f002 fd1e 	bl	8004328 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018ec:	bd08      	pop	{r3, pc}
 80018ee:	bf00      	nop
 80018f0:	20012d08 	.word	0x20012d08

080018f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018f6:	4802      	ldr	r0, [pc, #8]	; (8001900 <I2C1_ER_IRQHandler+0xc>)
 80018f8:	f002 ffd6 	bl	80048a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018fc:	bd08      	pop	{r3, pc}
 80018fe:	bf00      	nop
 8001900:	20012d08 	.word	0x20012d08

08001904 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001904:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001906:	4802      	ldr	r0, [pc, #8]	; (8001910 <USART1_IRQHandler+0xc>)
 8001908:	f004 f952 	bl	8005bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800190c:	bd08      	pop	{r3, pc}
 800190e:	bf00      	nop
 8001910:	20012e04 	.word	0x20012e04

08001914 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDMMC_D3_Pin);
 8001916:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800191a:	f002 f93d 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800191e:	bd08      	pop	{r3, pc}

08001920 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001922:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 8001924:	f003 ff3c 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001928:	bd08      	pop	{r3, pc}
 800192a:	bf00      	nop
 800192c:	20012f84 	.word	0x20012f84

08001930 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001932:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM6_DAC_IRQHandler+0xc>)
 8001934:	f003 ff34 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001938:	bd08      	pop	{r3, pc}
 800193a:	bf00      	nop
 800193c:	20012e88 	.word	0x20012e88

08001940 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001942:	4802      	ldr	r0, [pc, #8]	; (800194c <DMA2_Stream1_IRQHandler+0xc>)
 8001944:	f000 fbe8 	bl	8002118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001948:	bd08      	pop	{r3, pc}
 800194a:	bf00      	nop
 800194c:	20012d54 	.word	0x20012d54

08001950 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001952:	4802      	ldr	r0, [pc, #8]	; (800195c <ETH_IRQHandler+0xc>)
 8001954:	f001 fd16 	bl	8003384 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001958:	bd08      	pop	{r3, pc}
 800195a:	bf00      	nop
 800195c:	2001491c 	.word	0x2001491c

08001960 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001962:	4802      	ldr	r0, [pc, #8]	; (800196c <USART6_IRQHandler+0xc>)
 8001964:	f004 f924 	bl	8005bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001968:	bd08      	pop	{r3, pc}
 800196a:	bf00      	nop
 800196c:	20012ed4 	.word	0x20012ed4

08001970 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001970:	2001      	movs	r0, #1
 8001972:	4770      	bx	lr

08001974 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <_kill+0xc>)
 8001976:	2216      	movs	r2, #22
 8001978:	601a      	str	r2, [r3, #0]
	return -1;
}
 800197a:	f04f 30ff 	mov.w	r0, #4294967295
 800197e:	4770      	bx	lr
 8001980:	2001b628 	.word	0x2001b628

08001984 <_exit>:
	errno = EINVAL;
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <_exit+0x8>)
 8001986:	2216      	movs	r2, #22
 8001988:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800198a:	e7fe      	b.n	800198a <_exit+0x6>
 800198c:	2001b628 	.word	0x2001b628

08001990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001990:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	1e16      	subs	r6, r2, #0
 8001994:	dd07      	ble.n	80019a6 <_read+0x16>
 8001996:	460c      	mov	r4, r1
 8001998:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800199a:	f3af 8000 	nop.w
 800199e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	42a5      	cmp	r5, r4
 80019a4:	d1f9      	bne.n	800199a <_read+0xa>
	}

return len;
}
 80019a6:	4630      	mov	r0, r6
 80019a8:	bd70      	pop	{r4, r5, r6, pc}

080019aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019aa:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ac:	1e16      	subs	r6, r2, #0
 80019ae:	dd07      	ble.n	80019c0 <_write+0x16>
 80019b0:	460c      	mov	r4, r1
 80019b2:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80019b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80019b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	42a5      	cmp	r5, r4
 80019be:	d1f9      	bne.n	80019b4 <_write+0xa>
	}
	return len;
}
 80019c0:	4630      	mov	r0, r6
 80019c2:	bd70      	pop	{r4, r5, r6, pc}

080019c4 <_close>:

int _close(int file)
{
	return -1;
}
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	604b      	str	r3, [r1, #4]
	return 0;
}
 80019d0:	2000      	movs	r0, #0
 80019d2:	4770      	bx	lr

080019d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019d4:	2001      	movs	r0, #1
 80019d6:	4770      	bx	lr

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019d8:	2000      	movs	r0, #0
 80019da:	4770      	bx	lr

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <_sbrk+0x34>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	b152      	cbz	r2, 80019fa <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <_sbrk+0x34>)
 80019e6:	6810      	ldr	r0, [r2, #0]
 80019e8:	4403      	add	r3, r0
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <_sbrk+0x38>)
 80019ec:	490a      	ldr	r1, [pc, #40]	; (8001a18 <_sbrk+0x3c>)
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d806      	bhi.n	8001a02 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <_sbrk+0x34>)
 80019f6:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80019f8:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x34>)
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <_sbrk+0x40>)
 80019fe:	6011      	str	r1, [r2, #0]
 8001a00:	e7f0      	b.n	80019e4 <_sbrk+0x8>
    errno = ENOMEM;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x44>)
 8001a04:	220c      	movs	r2, #12
 8001a06:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	2000e198 	.word	0x2000e198
 8001a14:	20050000 	.word	0x20050000
 8001a18:	00004000 	.word	0x00004000
 8001a1c:	2001b640 	.word	0x2001b640
 8001a20:	2001b628 	.word	0x2001b628

08001a24 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <SystemInit+0x10>)
 8001a26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a3e:	490e      	ldr	r1, [pc, #56]	; (8001a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a54:	4c0b      	ldr	r4, [pc, #44]	; (8001a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a62:	f7ff ffdf 	bl	8001a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f010 fd2f 	bl	80124c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7fe fe3b 	bl	80006e4 <main>
  bx  lr    
 8001a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001a7c:	0801636c 	.word	0x0801636c
  ldr r2, =_sbss
 8001a80:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001a84:	2001b63c 	.word	0x2001b63c

08001a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x20>)
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f82f 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f7ff fedc 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fce2 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	bd08      	pop	{r3, pc}
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_IncTick+0x10>)
 8001ab2:	6811      	ldr	r1, [r2, #0]
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_IncTick+0x14>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	440b      	add	r3, r1
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20012fd0 	.word	0x20012fd0
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ac8:	4b01      	ldr	r3, [pc, #4]	; (8001ad0 <HAL_GetTick+0x8>)
 8001aca:	6818      	ldr	r0, [r3, #0]
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20012fd0 	.word	0x20012fd0

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff fff6 	bl	8001ac8 <HAL_GetTick>
 8001adc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001ae2:	d002      	beq.n	8001aea <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_Delay+0x24>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aea:	f7ff ffed 	bl	8001ac8 <HAL_GetTick>
 8001aee:	1b40      	subs	r0, r0, r5
 8001af0:	42a0      	cmp	r0, r4
 8001af2:	d3fa      	bcc.n	8001aea <HAL_Delay+0x16>
  {
  }
}
 8001af4:	bd38      	pop	{r3, r4, r5, pc}
 8001af6:	bf00      	nop
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001afe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	0200      	lsls	r0, r0, #8
 8001b02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b14:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00
 8001b1c:	05fa0000 	.word	0x05fa0000

08001b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b20:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_NVIC_SetPriority+0x54>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2a:	f1c3 0407 	rsb	r4, r3, #7
 8001b2e:	2c04      	cmp	r4, #4
 8001b30:	bf28      	it	cs
 8001b32:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b34:	1d1d      	adds	r5, r3, #4
 8001b36:	2d06      	cmp	r5, #6
 8001b38:	bf8c      	ite	hi
 8001b3a:	3b03      	subhi	r3, #3
 8001b3c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3e:	f04f 35ff 	mov.w	r5, #4294967295
 8001b42:	fa05 f404 	lsl.w	r4, r5, r4
 8001b46:	ea21 0104 	bic.w	r1, r1, r4
 8001b4a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	fa05 f303 	lsl.w	r3, r5, r3
 8001b50:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001b56:	2800      	cmp	r0, #0
 8001b58:	db05      	blt.n	8001b66 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	0109      	lsls	r1, r1, #4
 8001b5c:	b2c9      	uxtb	r1, r1
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_NVIC_SetPriority+0x58>)
 8001b60:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b62:	bc30      	pop	{r4, r5}
 8001b64:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	f000 000f 	and.w	r0, r0, #15
 8001b6a:	0109      	lsls	r1, r1, #4
 8001b6c:	b2c9      	uxtb	r1, r1
 8001b6e:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_NVIC_SetPriority+0x5c>)
 8001b70:	5419      	strb	r1, [r3, r0]
 8001b72:	e7f6      	b.n	8001b62 <HAL_NVIC_SetPriority+0x42>
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	e000e400 	.word	0xe000e400
 8001b7c:	e000ed14 	.word	0xe000ed14

08001b80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b80:	2800      	cmp	r0, #0
 8001b82:	db08      	blt.n	8001b96 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b84:	0942      	lsrs	r2, r0, #5
 8001b86:	f000 001f 	and.w	r0, r0, #31
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8001b90:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <HAL_NVIC_EnableIRQ+0x18>)
 8001b92:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b9e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdcmi->XferCount != 0)
 8001ba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ba2:	b343      	cbz	r3, 8001bf6 <DCMI_DMAXferCplt+0x5a>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001ba4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8001baa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001bac:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001bb0:	d002      	beq.n	8001bb8 <DCMI_DMAXferCplt+0x1c>
 8001bb2:	f011 0f01 	tst.w	r1, #1
 8001bb6:	d008      	beq.n	8001bca <DCMI_DMAXferCplt+0x2e>
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
      hdcmi->XferCount--;
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001bbe:	d00f      	beq.n	8001be0 <DCMI_DMAXferCplt+0x44>
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
    hdcmi->XferCount = hdcmi->XferTransferNumber;
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d02b      	beq.n	8001c20 <DCMI_DMAXferCplt+0x84>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8001bc8:	bd10      	pop	{r4, pc}
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001bca:	68db      	ldr	r3, [r3, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8001bcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bce:	2200      	movs	r2, #0
 8001bd0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001bd4:	f001 f9c2 	bl	8002f5c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	63a3      	str	r3, [r4, #56]	; 0x38
 8001bde:	e7ef      	b.n	8001bc0 <DCMI_DMAXferCplt+0x24>
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001be0:	691b      	ldr	r3, [r3, #16]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8001be2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001be4:	2201      	movs	r2, #1
 8001be6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001bea:	f001 f9b7 	bl	8002f5c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001bee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	63a3      	str	r3, [r4, #56]	; 0x38
 8001bf4:	e7e4      	b.n	8001bc0 <DCMI_DMAXferCplt+0x24>
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8001bf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001c00:	d002      	beq.n	8001c08 <DCMI_DMAXferCplt+0x6c>
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001c02:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	e7db      	b.n	8001bc0 <DCMI_DMAXferCplt+0x24>
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001c0e:	d1d7      	bne.n	8001bc0 <DCMI_DMAXferCplt+0x24>
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8001c10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c12:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001c18:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c1e:	e7cf      	b.n	8001bc0 <DCMI_DMAXferCplt+0x24>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	68d3      	ldr	r3, [r2, #12]
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	60d3      	str	r3, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f013 0f02 	tst.w	r3, #2
 8001c32:	d0c9      	beq.n	8001bc8 <DCMI_DMAXferCplt+0x2c>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001c3a:	e7c5      	b.n	8001bc8 <DCMI_DMAXferCplt+0x2c>

08001c3c <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d048      	beq.n	8001cd2 <HAL_DCMI_Init+0x96>
{
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4604      	mov	r4, r0
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c44:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d032      	beq.n	8001cb2 <HAL_DCMI_Init+0x76>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001c52:	69a3      	ldr	r3, [r4, #24]
 8001c54:	b10b      	cbz	r3, 8001c5a <HAL_DCMI_Init+0x1e>
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	6263      	str	r3, [r4, #36]	; 0x24
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001c5a:	6822      	ldr	r2, [r4, #0]
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_DCMI_Init+0x9c>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	6013      	str	r3, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	6811      	ldr	r1, [r2, #0]
 8001c68:	6863      	ldr	r3, [r4, #4]
 8001c6a:	6960      	ldr	r0, [r4, #20]
 8001c6c:	4303      	orrs	r3, r0
 8001c6e:	68e0      	ldr	r0, [r4, #12]
 8001c70:	4303      	orrs	r3, r0
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001c72:	6920      	ldr	r0, [r4, #16]
 8001c74:	4303      	orrs	r3, r0
 8001c76:	68a0      	ldr	r0, [r4, #8]
 8001c78:	4303      	orrs	r3, r0
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001c7a:	69a0      	ldr	r0, [r4, #24]
 8001c7c:	4303      	orrs	r3, r0
 8001c7e:	6a20      	ldr	r0, [r4, #32]
 8001c80:	4303      	orrs	r3, r0
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001c82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c84:	4303      	orrs	r3, r0
 8001c86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c88:	4303      	orrs	r3, r0
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001c8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001c90:	4303      	orrs	r3, r0
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001c92:	430b      	orrs	r3, r1
 8001c94:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_DCMI_Init+0x7c>
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	68d3      	ldr	r3, [r2, #12]
 8001ca0:	f043 031e 	orr.w	r3, r3, #30
 8001ca4:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001cb0:	bd10      	pop	{r4, pc}
    HAL_DCMI_MspInit(hdcmi);
 8001cb2:	f7ff fbfb 	bl	80014ac <HAL_DCMI_MspInit>
 8001cb6:	e7c9      	b.n	8001c4c <HAL_DCMI_Init+0x10>
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001cb8:	6822      	ldr	r2, [r4, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001cba:	7f61      	ldrb	r1, [r4, #29]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001cbc:	7fa3      	ldrb	r3, [r4, #30]
 8001cbe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001cc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001cc4:	7f21      	ldrb	r1, [r4, #28]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001cc6:	430b      	orrs	r3, r1
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001cc8:	7fe1      	ldrb	r1, [r4, #31]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001cca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	e7e4      	b.n	8001c9c <HAL_DCMI_Init+0x60>
    return HAL_ERROR;
 8001cd2:	2001      	movs	r0, #1
}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	ffe0f007 	.word	0xffe0f007

08001cdc <HAL_DCMI_Start_DMA>:
{
 8001cdc:	b530      	push	{r4, r5, lr}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 8001ce2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001ce6:	2801      	cmp	r0, #1
 8001ce8:	d05b      	beq.n	8001da2 <HAL_DCMI_Start_DMA+0xc6>
 8001cea:	2001      	movs	r0, #1
 8001cec:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  __HAL_DCMI_ENABLE(hdcmi);
 8001cf6:	6825      	ldr	r5, [r4, #0]
 8001cf8:	6828      	ldr	r0, [r5, #0]
 8001cfa:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8001cfe:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001d00:	6825      	ldr	r5, [r4, #0]
 8001d02:	6828      	ldr	r0, [r5, #0]
 8001d04:	f020 0002 	bic.w	r0, r0, #2
 8001d08:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001d0a:	6825      	ldr	r5, [r4, #0]
 8001d0c:	6828      	ldr	r0, [r5, #0]
 8001d0e:	4301      	orrs	r1, r0
 8001d10:	6029      	str	r1, [r5, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001d12:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d14:	4825      	ldr	r0, [pc, #148]	; (8001dac <HAL_DCMI_Start_DMA+0xd0>)
 8001d16:	63c8      	str	r0, [r1, #60]	; 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001d18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d1a:	4825      	ldr	r0, [pc, #148]	; (8001db0 <HAL_DCMI_Start_DMA+0xd4>)
 8001d1c:	64c8      	str	r0, [r1, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001d1e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001d20:	2100      	movs	r1, #0
 8001d22:	6501      	str	r1, [r0, #80]	; 0x50
  hdcmi->XferCount = 0;
 8001d24:	63a1      	str	r1, [r4, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001d26:	6421      	str	r1, [r4, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001d28:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001d2a:	6461      	str	r1, [r4, #68]	; 0x44
  if (Length <= 0xFFFFU)
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d32e      	bcc.n	8001d90 <HAL_DCMI_Start_DMA+0xb4>
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001d32:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d34:	481d      	ldr	r0, [pc, #116]	; (8001dac <HAL_DCMI_Start_DMA+0xd0>)
 8001d36:	6448      	str	r0, [r1, #68]	; 0x44
    hdcmi->XferCount = 1;
 8001d38:	2101      	movs	r1, #1
 8001d3a:	63a1      	str	r1, [r4, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001d3c:	63e3      	str	r3, [r4, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001d3e:	6462      	str	r2, [r4, #68]	; 0x44
    while (hdcmi->XferSize > 0xFFFFU)
 8001d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d309      	bcc.n	8001d5c <HAL_DCMI_Start_DMA+0x80>
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001d54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d2f5      	bcs.n	8001d48 <HAL_DCMI_Start_DMA+0x6c>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d5e:	3b02      	subs	r3, #2
 8001d60:	63a3      	str	r3, [r4, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d64:	6423      	str	r3, [r4, #64]	; 0x40
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8001d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001d68:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d6a:	6821      	ldr	r1, [r4, #0]
 8001d6c:	9000      	str	r0, [sp, #0]
 8001d6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001d72:	3128      	adds	r1, #40	; 0x28
 8001d74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001d76:	f000 fac1 	bl	80022fc <HAL_DMAEx_MultiBufferStart_IT>
 8001d7a:	b9a0      	cbnz	r0, 8001da6 <HAL_DCMI_Start_DMA+0xca>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	6813      	ldr	r3, [r2, #0]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8001d8c:	b003      	add	sp, #12
 8001d8e:	bd30      	pop	{r4, r5, pc}
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001d90:	6821      	ldr	r1, [r4, #0]
 8001d92:	3128      	adds	r1, #40	; 0x28
 8001d94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001d96:	f000 f917 	bl	8001fc8 <HAL_DMA_Start_IT>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d0ee      	beq.n	8001d7c <HAL_DCMI_Start_DMA+0xa0>
      return HAL_ERROR;
 8001d9e:	2001      	movs	r0, #1
 8001da0:	e7f4      	b.n	8001d8c <HAL_DCMI_Start_DMA+0xb0>
  __HAL_LOCK(hdcmi);
 8001da2:	2002      	movs	r0, #2
 8001da4:	e7f2      	b.n	8001d8c <HAL_DCMI_Start_DMA+0xb0>
      return HAL_ERROR;
 8001da6:	2001      	movs	r0, #1
 8001da8:	e7f0      	b.n	8001d8c <HAL_DCMI_Start_DMA+0xb0>
 8001daa:	bf00      	nop
 8001dac:	08001b9d 	.word	0x08001b9d
 8001db0:	08001e3f 	.word	0x08001e3f

08001db4 <HAL_DCMI_Stop>:
{
 8001db4:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001db6:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_DCMI_Stop+0x80>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_DCMI_Stop+0x84>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	0a5a      	lsrs	r2, r3, #9
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fb03 f302 	mul.w	r3, r3, r2
  __HAL_LOCK(hdcmi);
 8001dca:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8001dce:	2a01      	cmp	r2, #1
 8001dd0:	d02d      	beq.n	8001e2e <HAL_DCMI_Stop+0x7a>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001de0:	6801      	ldr	r1, [r0, #0]
 8001de2:	680a      	ldr	r2, [r1, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	600a      	str	r2, [r1, #0]
    if (count-- == 0U)
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d006      	beq.n	8001e00 <HAL_DCMI_Stop+0x4c>
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	f012 0f01 	tst.w	r2, #1
 8001dfa:	d1f6      	bne.n	8001dea <HAL_DCMI_Stop+0x36>
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	e004      	b.n	8001e0a <HAL_DCMI_Stop+0x56>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001e00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	64e3      	str	r3, [r4, #76]	; 0x4c
      status = HAL_TIMEOUT;
 8001e08:	2503      	movs	r5, #3
  __HAL_DCMI_DISABLE(hdcmi);
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	6813      	ldr	r3, [r2, #0]
 8001e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e12:	6013      	str	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001e14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e16:	f000 f921 	bl	800205c <HAL_DMA_Abort>
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001e1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e1c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 8001e24:	2300      	movs	r3, #0
 8001e26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdcmi);
 8001e2e:	2502      	movs	r5, #2
 8001e30:	e7fb      	b.n	8001e2a <HAL_DCMI_Stop+0x76>
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <HAL_DCMI_ErrorCallback>:
}
 8001e3c:	4770      	bx	lr

08001e3e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e3e:	b508      	push	{r3, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e40:	6b80      	ldr	r0, [r0, #56]	; 0x38

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001e42:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d006      	beq.n	8001e58 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001e50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001e58:	f7ff fff0 	bl	8001e3c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8001e5c:	bd08      	pop	{r3, pc}
	...

08001e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e60:	b410      	push	{r4}
 8001e62:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e64:	6804      	ldr	r4, [r0, #0]
 8001e66:	b2e1      	uxtb	r1, r4
 8001e68:	3910      	subs	r1, #16
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <DMA_CalcBaseAndBitshift+0x2c>)
 8001e6c:	fba3 0301 	umull	r0, r3, r3, r1
 8001e70:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <DMA_CalcBaseAndBitshift+0x30>)
 8001e74:	5cc3      	ldrb	r3, [r0, r3]
 8001e76:	65d3      	str	r3, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e78:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <DMA_CalcBaseAndBitshift+0x34>)
 8001e7c:	ea00 0004 	and.w	r0, r0, r4
 8001e80:	bf88      	it	hi
 8001e82:	3004      	addhi	r0, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e84:	6590      	str	r0, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	aaaaaaab 	.word	0xaaaaaaab
 8001e90:	08013940 	.word	0x08013940
 8001e94:	fffffc00 	.word	0xfffffc00

08001e98 <HAL_DMA_Init>:
{
 8001e98:	b538      	push	{r3, r4, r5, lr}
 8001e9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff fe14 	bl	8001ac8 <HAL_GetTick>
  if(hdma == NULL)
 8001ea0:	2c00      	cmp	r4, #0
 8001ea2:	f000 808c 	beq.w	8001fbe <HAL_DMA_Init+0x126>
 8001ea6:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f012 0f01 	tst.w	r2, #1
 8001ec6:	d00a      	beq.n	8001ede <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec8:	f7ff fdfe 	bl	8001ac8 <HAL_GetTick>
 8001ecc:	1b43      	subs	r3, r0, r5
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d9f5      	bls.n	8001ebe <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed6:	2003      	movs	r0, #3
 8001ed8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8001ede:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee0:	4838      	ldr	r0, [pc, #224]	; (8001fc4 <HAL_DMA_Init+0x12c>)
 8001ee2:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee4:	6861      	ldr	r1, [r4, #4]
 8001ee6:	68a2      	ldr	r2, [r4, #8]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	68e1      	ldr	r1, [r4, #12]
 8001eec:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eee:	6921      	ldr	r1, [r4, #16]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	6961      	ldr	r1, [r4, #20]
 8001ef4:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	69a1      	ldr	r1, [r4, #24]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	69e1      	ldr	r1, [r4, #28]
 8001efc:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efe:	6a21      	ldr	r1, [r4, #32]
 8001f00:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f02:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f06:	2904      	cmp	r1, #4
 8001f08:	d021      	beq.n	8001f4e <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 8001f0a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001f0c:	6821      	ldr	r1, [r4, #0]
 8001f0e:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f10:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8001f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f16:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d10a      	bne.n	8001f32 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8001f1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f1e:	431a      	orrs	r2, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f22:	b130      	cbz	r0, 8001f32 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f24:	69a5      	ldr	r5, [r4, #24]
 8001f26:	bb3d      	cbnz	r5, 8001f78 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d01f      	beq.n	8001f6c <HAL_DMA_Init+0xd4>
 8001f2c:	f033 0302 	bics.w	r3, r3, #2
 8001f30:	d012      	beq.n	8001f58 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 8001f32:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ff93 	bl	8001e60 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f3c:	233f      	movs	r3, #63	; 0x3f
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f42:	2000      	movs	r0, #0
 8001f44:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001f4c:	e7c6      	b.n	8001edc <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001f52:	4301      	orrs	r1, r0
 8001f54:	430a      	orrs	r2, r1
 8001f56:	e7d8      	b.n	8001f0a <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001f58:	f3c0 6000 	ubfx	r0, r0, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d0e8      	beq.n	8001f32 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f60:	2340      	movs	r3, #64	; 0x40
 8001f62:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001f64:	2001      	movs	r0, #1
 8001f66:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001f6a:	e7b7      	b.n	8001edc <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001f70:	bf14      	ite	ne
 8001f72:	2000      	movne	r0, #0
 8001f74:	2001      	moveq	r0, #1
 8001f76:	e7f1      	b.n	8001f5c <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f78:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001f7c:	d006      	beq.n	8001f8c <HAL_DMA_Init+0xf4>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d9ee      	bls.n	8001f60 <HAL_DMA_Init+0xc8>
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d1d5      	bne.n	8001f32 <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 8001f86:	f3c0 6000 	ubfx	r0, r0, #24, #1
 8001f8a:	e7e7      	b.n	8001f5c <HAL_DMA_Init+0xc4>
    switch (tmp)
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d814      	bhi.n	8001fba <HAL_DMA_Init+0x122>
 8001f90:	a501      	add	r5, pc, #4	; (adr r5, 8001f98 <HAL_DMA_Init+0x100>)
 8001f92:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001f61 	.word	0x08001f61
 8001f9c:	08001fa9 	.word	0x08001fa9
 8001fa0:	08001f61 	.word	0x08001f61
 8001fa4:	08001faf 	.word	0x08001faf
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	f3c0 6000 	ubfx	r0, r0, #24, #1
 8001fac:	e7d6      	b.n	8001f5c <HAL_DMA_Init+0xc4>
 8001fae:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001fb2:	bf14      	ite	ne
 8001fb4:	2000      	movne	r0, #0
 8001fb6:	2001      	moveq	r0, #1
 8001fb8:	e7d0      	b.n	8001f5c <HAL_DMA_Init+0xc4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7ce      	b.n	8001f5c <HAL_DMA_Init+0xc4>
    return HAL_ERROR;
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	e78c      	b.n	8001edc <HAL_DMA_Init+0x44>
 8001fc2:	bf00      	nop
 8001fc4:	f010803f 	.word	0xf010803f

08001fc8 <HAL_DMA_Start_IT>:
{
 8001fc8:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001fcc:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001fd0:	2c01      	cmp	r4, #1
 8001fd2:	d041      	beq.n	8002058 <HAL_DMA_Start_IT+0x90>
 8001fd4:	2401      	movs	r4, #1
 8001fd6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fda:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001fde:	b2e4      	uxtb	r4, r4
 8001fe0:	2c01      	cmp	r4, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001fea:	2002      	movs	r0, #2
}
 8001fec:	bc70      	pop	{r4, r5, r6}
 8001fee:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	2402      	movs	r4, #2
 8001ff2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	6544      	str	r4, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ffa:	6806      	ldr	r6, [r0, #0]
 8001ffc:	6834      	ldr	r4, [r6, #0]
 8001ffe:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002002:	6034      	str	r4, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8002004:	6804      	ldr	r4, [r0, #0]
 8002006:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002008:	6883      	ldr	r3, [r0, #8]
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d01f      	beq.n	800204e <HAL_DMA_Start_IT+0x86>
    hdma->Instance->PAR = SrcAddress;
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002012:	6803      	ldr	r3, [r0, #0]
 8002014:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002018:	233f      	movs	r3, #63	; 0x3f
 800201a:	4093      	lsls	r3, r2
 800201c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800201e:	6802      	ldr	r2, [r0, #0]
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	f043 0316 	orr.w	r3, r3, #22
 8002026:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002028:	6802      	ldr	r2, [r0, #0]
 800202a:	6953      	ldr	r3, [r2, #20]
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002032:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002034:	b123      	cbz	r3, 8002040 <HAL_DMA_Start_IT+0x78>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002036:	6802      	ldr	r2, [r0, #0]
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2000      	movs	r0, #0
 800204c:	e7ce      	b.n	8001fec <HAL_DMA_Start_IT+0x24>
    hdma->Instance->PAR = DstAddress;
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002052:	6803      	ldr	r3, [r0, #0]
 8002054:	60d9      	str	r1, [r3, #12]
 8002056:	e7de      	b.n	8002016 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002058:	2002      	movs	r0, #2
 800205a:	e7c7      	b.n	8001fec <HAL_DMA_Start_IT+0x24>

0800205c <HAL_DMA_Abort>:
{
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002060:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002062:	f7ff fd31 	bl	8001ac8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002066:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d006      	beq.n	800207e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002074:	2300      	movs	r3, #0
 8002076:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
}
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002080:	6822      	ldr	r2, [r4, #0]
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f023 0316 	bic.w	r3, r3, #22
 8002088:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	6953      	ldr	r3, [r2, #20]
 800208e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002092:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002096:	b1e3      	cbz	r3, 80020d2 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	6822      	ldr	r2, [r4, #0]
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	f023 0308 	bic.w	r3, r3, #8
 80020a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f013 0f01 	tst.w	r3, #1
 80020b4:	d011      	beq.n	80020da <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b6:	f7ff fd07 	bl	8001ac8 <HAL_GetTick>
 80020ba:	1b43      	subs	r3, r0, r5
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d9f5      	bls.n	80020ac <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c0:	2320      	movs	r3, #32
 80020c2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c4:	2003      	movs	r0, #3
 80020c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80020ca:	2300      	movs	r3, #0
 80020cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80020d0:	e7d4      	b.n	800207c <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1df      	bne.n	8002098 <HAL_DMA_Abort+0x3c>
 80020d8:	e7e3      	b.n	80020a2 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020dc:	233f      	movs	r3, #63	; 0x3f
 80020de:	4093      	lsls	r3, r2
 80020e0:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 80020ee:	e7c5      	b.n	800207c <HAL_DMA_Abort+0x20>

080020f0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d003      	beq.n	8002102 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
 8002100:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002102:	2305      	movs	r3, #5
 8002104:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002108:	6802      	ldr	r2, [r0, #0]
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002112:	2000      	movs	r0, #0
}
 8002114:	4770      	bx	lr
	...

08002118 <HAL_DMA_IRQHandler>:
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	b083      	sub	sp, #12
 800211c:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8002122:	4b72      	ldr	r3, [pc, #456]	; (80022ec <HAL_DMA_IRQHandler+0x1d4>)
 8002124:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002128:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800212a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800212c:	2308      	movs	r3, #8
 800212e:	4093      	lsls	r3, r2
 8002130:	422b      	tst	r3, r5
 8002132:	d010      	beq.n	8002156 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002134:	6803      	ldr	r3, [r0, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f012 0f04 	tst.w	r2, #4
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f022 0204 	bic.w	r2, r2, #4
 8002144:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002146:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002148:	2308      	movs	r3, #8
 800214a:	4093      	lsls	r3, r2
 800214c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800214e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002158:	2301      	movs	r3, #1
 800215a:	4093      	lsls	r3, r2
 800215c:	422b      	tst	r3, r5
 800215e:	d009      	beq.n	8002174 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002160:	6822      	ldr	r2, [r4, #0]
 8002162:	6952      	ldr	r2, [r2, #20]
 8002164:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002168:	d004      	beq.n	8002174 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800216a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800216c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002176:	2304      	movs	r3, #4
 8002178:	4093      	lsls	r3, r2
 800217a:	422b      	tst	r3, r5
 800217c:	d009      	beq.n	8002192 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	f012 0f02 	tst.w	r2, #2
 8002186:	d004      	beq.n	8002192 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002188:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800218a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002192:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002194:	2310      	movs	r3, #16
 8002196:	4093      	lsls	r3, r2
 8002198:	422b      	tst	r3, r5
 800219a:	d024      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	f012 0f08 	tst.w	r2, #8
 80021a4:	d01f      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021a6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80021b0:	d00d      	beq.n	80021ce <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80021b8:	d104      	bne.n	80021c4 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 80021ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021bc:	b19b      	cbz	r3, 80021e6 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 80021be:	4620      	mov	r0, r4
 80021c0:	4798      	blx	r3
 80021c2:	e010      	b.n	80021e6 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021c6:	b173      	cbz	r3, 80021e6 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 80021c8:	4620      	mov	r0, r4
 80021ca:	4798      	blx	r3
 80021cc:	e00b      	b.n	80021e6 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80021d4:	d103      	bne.n	80021de <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80021de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e0:	b10b      	cbz	r3, 80021e6 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 80021e2:	4620      	mov	r0, r4
 80021e4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80021e8:	2320      	movs	r3, #32
 80021ea:	4093      	lsls	r3, r2
 80021ec:	422b      	tst	r3, r5
 80021ee:	d055      	beq.n	800229c <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021f0:	6822      	ldr	r2, [r4, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f012 0f10 	tst.w	r2, #16
 80021f8:	d050      	beq.n	800229c <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021fa:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021fc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b05      	cmp	r3, #5
 8002204:	d00e      	beq.n	8002224 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800220e:	d033      	beq.n	8002278 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002216:	d12a      	bne.n	800226e <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8002218:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800221a:	2b00      	cmp	r3, #0
 800221c:	d03e      	beq.n	800229c <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 800221e:	4620      	mov	r0, r4
 8002220:	4798      	blx	r3
 8002222:	e03b      	b.n	800229c <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f023 0316 	bic.w	r3, r3, #22
 800222c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	6953      	ldr	r3, [r2, #20]
 8002232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002236:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800223a:	b1a3      	cbz	r3, 8002266 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223c:	6822      	ldr	r2, [r4, #0]
 800223e:	6813      	ldr	r3, [r2, #0]
 8002240:	f023 0308 	bic.w	r3, r3, #8
 8002244:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002246:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002248:	233f      	movs	r3, #63	; 0x3f
 800224a:	4093      	lsls	r3, r2
 800224c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800224e:	2301      	movs	r3, #1
 8002250:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002254:	2300      	movs	r3, #0
 8002256:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800225a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800225c:	2b00      	cmp	r3, #0
 800225e:	d043      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002260:	4620      	mov	r0, r4
 8002262:	4798      	blx	r3
 8002264:	e040      	b.n	80022e8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e7      	bne.n	800223c <HAL_DMA_IRQHandler+0x124>
 800226c:	e7eb      	b.n	8002246 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 800226e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002270:	b1a3      	cbz	r3, 800229c <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8002272:	4620      	mov	r0, r4
 8002274:	4798      	blx	r3
 8002276:	e011      	b.n	800229c <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800227e:	d109      	bne.n	8002294 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f022 0210 	bic.w	r2, r2, #16
 8002286:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002288:	2301      	movs	r3, #1
 800228a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800228e:	2300      	movs	r3, #0
 8002290:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002296:	b10b      	cbz	r3, 800229c <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8002298:	4620      	mov	r0, r4
 800229a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800229c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800229e:	b31b      	cbz	r3, 80022e8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022a2:	f013 0f01 	tst.w	r3, #1
 80022a6:	d01b      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_DMA_IRQHandler+0x1d8>)
 80022aa:	fba3 3606 	umull	r3, r6, r3, r6
 80022ae:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b0:	2305      	movs	r3, #5
 80022b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80022c0:	9b01      	ldr	r3, [sp, #4]
 80022c2:	3301      	adds	r3, #1
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	42b3      	cmp	r3, r6
 80022c8:	d804      	bhi.n	80022d4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f013 0f01 	tst.w	r3, #1
 80022d2:	d1f5      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80022da:	2300      	movs	r3, #0
 80022dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80022e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022e2:	b10b      	cbz	r3, 80022e8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80022e4:	4620      	mov	r0, r4
 80022e6:	4798      	blx	r3
}
 80022e8:	b003      	add	sp, #12
 80022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ec:	20000000 	.word	0x20000000
 80022f0:	1b4e81b5 	.word	0x1b4e81b5

080022f4 <HAL_DMA_GetState>:
  return hdma->State;
 80022f4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80022fc:	b430      	push	{r4, r5}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022fe:	6884      	ldr	r4, [r0, #8]
 8002300:	2c80      	cmp	r4, #128	; 0x80
 8002302:	d012      	beq.n	800232a <HAL_DMAEx_MultiBufferStart_IT+0x2e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002304:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002308:	2c01      	cmp	r4, #1
 800230a:	f000 8618 	beq.w	8002f3e <HAL_DMAEx_MultiBufferStart_IT+0xc42>
 800230e:	2401      	movs	r4, #1
 8002310:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002314:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002318:	b2e4      	uxtb	r4, r4
 800231a:	2c01      	cmp	r4, #1
 800231c:	d00a      	beq.n	8002334 <HAL_DMAEx_MultiBufferStart_IT+0x38>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800231e:	2300      	movs	r3, #0
 8002320:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002324:	2002      	movs	r0, #2
  }  
  return status; 
}
 8002326:	bc30      	pop	{r4, r5}
 8002328:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800232a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002330:	2001      	movs	r0, #1
 8002332:	e7f8      	b.n	8002326 <HAL_DMAEx_MultiBufferStart_IT+0x2a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	2402      	movs	r4, #2
 8002336:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233a:	2400      	movs	r4, #0
 800233c:	6544      	str	r4, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800233e:	6805      	ldr	r5, [r0, #0]
 8002340:	682c      	ldr	r4, [r5, #0]
 8002342:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8002346:	602c      	str	r4, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8002348:	6804      	ldr	r4, [r0, #0]
 800234a:	6123      	str	r3, [r4, #16]
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234c:	6803      	ldr	r3, [r0, #0]
 800234e:	9c02      	ldr	r4, [sp, #8]
 8002350:	605c      	str	r4, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002352:	6883      	ldr	r3, [r0, #8]
 8002354:	2b40      	cmp	r3, #64	; 0x40
 8002356:	f000 80a5 	beq.w	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x1a8>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800235a:	6803      	ldr	r3, [r0, #0]
 800235c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002362:	6803      	ldr	r3, [r0, #0]
 8002364:	4aa3      	ldr	r2, [pc, #652]	; (80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f240 80ce 	bls.w	8002508 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 800236c:	3a48      	subs	r2, #72	; 0x48
 800236e:	49a2      	ldr	r1, [pc, #648]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	bf18      	it	ne
 8002374:	428b      	cmpne	r3, r1
 8002376:	bf14      	ite	ne
 8002378:	2201      	movne	r2, #1
 800237a:	2200      	moveq	r2, #0
 800237c:	3160      	adds	r1, #96	; 0x60
 800237e:	428b      	cmp	r3, r1
 8002380:	bf0c      	ite	eq
 8002382:	2200      	moveq	r2, #0
 8002384:	f002 0201 	andne.w	r2, r2, #1
 8002388:	b11a      	cbz	r2, 8002392 <HAL_DMAEx_MultiBufferStart_IT+0x96>
 800238a:	4a9c      	ldr	r2, [pc, #624]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800238c:	4293      	cmp	r3, r2
 800238e:	f040 808e 	bne.w	80024ae <HAL_DMAEx_MultiBufferStart_IT+0x1b2>
 8002392:	2220      	movs	r2, #32
 8002394:	4b9a      	ldr	r3, [pc, #616]	; (8002600 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002396:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	4a96      	ldr	r2, [pc, #600]	; (80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	f240 81c3 	bls.w	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x42c>
 80023a2:	3a48      	subs	r2, #72	; 0x48
 80023a4:	4994      	ldr	r1, [pc, #592]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	bf18      	it	ne
 80023aa:	428b      	cmpne	r3, r1
 80023ac:	bf14      	ite	ne
 80023ae:	2201      	movne	r2, #1
 80023b0:	2200      	moveq	r2, #0
 80023b2:	3160      	adds	r1, #96	; 0x60
 80023b4:	428b      	cmp	r3, r1
 80023b6:	bf0c      	ite	eq
 80023b8:	2200      	moveq	r2, #0
 80023ba:	f002 0201 	andne.w	r2, r2, #1
 80023be:	b11a      	cbz	r2, 80023c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc>
 80023c0:	4a8e      	ldr	r2, [pc, #568]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	f040 8183 	bne.w	80026ce <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80023c8:	2210      	movs	r2, #16
 80023ca:	4b8d      	ldr	r3, [pc, #564]	; (8002600 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80023cc:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80023ce:	6803      	ldr	r3, [r0, #0]
 80023d0:	4a88      	ldr	r2, [pc, #544]	; (80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	f240 82b8 	bls.w	8002948 <HAL_DMAEx_MultiBufferStart_IT+0x64c>
 80023d8:	3a48      	subs	r2, #72	; 0x48
 80023da:	4987      	ldr	r1, [pc, #540]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf18      	it	ne
 80023e0:	428b      	cmpne	r3, r1
 80023e2:	bf14      	ite	ne
 80023e4:	2201      	movne	r2, #1
 80023e6:	2200      	moveq	r2, #0
 80023e8:	3160      	adds	r1, #96	; 0x60
 80023ea:	428b      	cmp	r3, r1
 80023ec:	bf0c      	ite	eq
 80023ee:	2200      	moveq	r2, #0
 80023f0:	f002 0201 	andne.w	r2, r2, #1
 80023f4:	b11a      	cbz	r2, 80023fe <HAL_DMAEx_MultiBufferStart_IT+0x102>
 80023f6:	4a81      	ldr	r2, [pc, #516]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	f040 8278 	bne.w	80028ee <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80023fe:	2208      	movs	r2, #8
 8002400:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002402:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002404:	6803      	ldr	r3, [r0, #0]
 8002406:	4a7b      	ldr	r2, [pc, #492]	; (80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	f240 839b 	bls.w	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 800240e:	3a48      	subs	r2, #72	; 0x48
 8002410:	4979      	ldr	r1, [pc, #484]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	bf18      	it	ne
 8002416:	428b      	cmpne	r3, r1
 8002418:	bf14      	ite	ne
 800241a:	2201      	movne	r2, #1
 800241c:	2200      	moveq	r2, #0
 800241e:	3160      	adds	r1, #96	; 0x60
 8002420:	428b      	cmp	r3, r1
 8002422:	bf0c      	ite	eq
 8002424:	2200      	moveq	r2, #0
 8002426:	f002 0201 	andne.w	r2, r2, #1
 800242a:	b11a      	cbz	r2, 8002434 <HAL_DMAEx_MultiBufferStart_IT+0x138>
 800242c:	4a73      	ldr	r2, [pc, #460]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800242e:	4293      	cmp	r3, r2
 8002430:	f040 835b 	bne.w	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8002434:	2204      	movs	r2, #4
 8002436:	4b72      	ldr	r3, [pc, #456]	; (8002600 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002438:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	4a6d      	ldr	r2, [pc, #436]	; (80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f240 8493 	bls.w	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0xa6e>
 8002444:	3a48      	subs	r2, #72	; 0x48
 8002446:	496c      	ldr	r1, [pc, #432]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	bf18      	it	ne
 800244c:	428b      	cmpne	r3, r1
 800244e:	bf14      	ite	ne
 8002450:	2201      	movne	r2, #1
 8002452:	2200      	moveq	r2, #0
 8002454:	3160      	adds	r1, #96	; 0x60
 8002456:	428b      	cmp	r3, r1
 8002458:	bf0c      	ite	eq
 800245a:	2200      	moveq	r2, #0
 800245c:	f002 0201 	andne.w	r2, r2, #1
 8002460:	b11a      	cbz	r2, 800246a <HAL_DMAEx_MultiBufferStart_IT+0x16e>
 8002462:	4a66      	ldr	r2, [pc, #408]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002464:	4293      	cmp	r3, r2
 8002466:	f040 8451 	bne.w	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800246a:	2201      	movs	r2, #1
 800246c:	4b64      	ldr	r3, [pc, #400]	; (8002600 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800246e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002470:	6802      	ldr	r2, [r0, #0]
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	f043 0316 	orr.w	r3, r3, #22
 8002478:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800247a:	6802      	ldr	r2, [r0, #0]
 800247c:	6953      	ldr	r3, [r2, #20]
 800247e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002482:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002484:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8553 	beq.w	8002f32 <HAL_DMAEx_MultiBufferStart_IT+0xc36>
      hdma->Instance->CR  |= DMA_IT_HT;
 800248c:	6802      	ldr	r2, [r0, #0]
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma); 
 8002496:	6802      	ldr	r2, [r0, #0]
 8002498:	6813      	ldr	r3, [r2, #0]
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2000      	movs	r0, #0
 80024a2:	e740      	b.n	8002326 <HAL_DMAEx_MultiBufferStart_IT+0x2a>
    hdma->Instance->PAR = DstAddress;
 80024a4:	6803      	ldr	r3, [r0, #0]
 80024a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80024a8:	6803      	ldr	r3, [r0, #0]
 80024aa:	60d9      	str	r1, [r3, #12]
 80024ac:	e759      	b.n	8002362 <HAL_DMAEx_MultiBufferStart_IT+0x66>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024ae:	3a48      	subs	r2, #72	; 0x48
 80024b0:	3948      	subs	r1, #72	; 0x48
 80024b2:	4293      	cmp	r3, r2
 80024b4:	bf18      	it	ne
 80024b6:	428b      	cmpne	r3, r1
 80024b8:	bf14      	ite	ne
 80024ba:	2201      	movne	r2, #1
 80024bc:	2200      	moveq	r2, #0
 80024be:	3160      	adds	r1, #96	; 0x60
 80024c0:	428b      	cmp	r3, r1
 80024c2:	bf0c      	ite	eq
 80024c4:	2200      	moveq	r2, #0
 80024c6:	f002 0201 	andne.w	r2, r2, #1
 80024ca:	b112      	cbz	r2, 80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 80024cc:	4a4d      	ldr	r2, [pc, #308]	; (8002604 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d102      	bne.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x1dc>
 80024d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024d6:	e75d      	b.n	8002394 <HAL_DMAEx_MultiBufferStart_IT+0x98>
 80024d8:	3a48      	subs	r2, #72	; 0x48
 80024da:	3948      	subs	r1, #72	; 0x48
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf18      	it	ne
 80024e0:	428b      	cmpne	r3, r1
 80024e2:	bf14      	ite	ne
 80024e4:	2201      	movne	r2, #1
 80024e6:	2200      	moveq	r2, #0
 80024e8:	3160      	adds	r1, #96	; 0x60
 80024ea:	428b      	cmp	r3, r1
 80024ec:	bf0c      	ite	eq
 80024ee:	2200      	moveq	r2, #0
 80024f0:	f002 0201 	andne.w	r2, r2, #1
 80024f4:	b112      	cbz	r2, 80024fc <HAL_DMAEx_MultiBufferStart_IT+0x200>
 80024f6:	4a44      	ldr	r2, [pc, #272]	; (8002608 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d102      	bne.n	8002502 <HAL_DMAEx_MultiBufferStart_IT+0x206>
 80024fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002500:	e748      	b.n	8002394 <HAL_DMAEx_MultiBufferStart_IT+0x98>
 8002502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002506:	e745      	b.n	8002394 <HAL_DMAEx_MultiBufferStart_IT+0x98>
 8002508:	4a40      	ldr	r2, [pc, #256]	; (800260c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d943      	bls.n	8002596 <HAL_DMAEx_MultiBufferStart_IT+0x29a>
 800250e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002512:	4939      	ldr	r1, [pc, #228]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	bf18      	it	ne
 8002518:	428b      	cmpne	r3, r1
 800251a:	bf14      	ite	ne
 800251c:	2201      	movne	r2, #1
 800251e:	2200      	moveq	r2, #0
 8002520:	3160      	adds	r1, #96	; 0x60
 8002522:	428b      	cmp	r3, r1
 8002524:	bf0c      	ite	eq
 8002526:	2200      	moveq	r2, #0
 8002528:	f002 0201 	andne.w	r2, r2, #1
 800252c:	b112      	cbz	r2, 8002534 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 800252e:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d103      	bne.n	800253c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002534:	2220      	movs	r2, #32
 8002536:	4b32      	ldr	r3, [pc, #200]	; (8002600 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	e72d      	b.n	8002398 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 800253c:	3a48      	subs	r2, #72	; 0x48
 800253e:	3948      	subs	r1, #72	; 0x48
 8002540:	4293      	cmp	r3, r2
 8002542:	bf18      	it	ne
 8002544:	428b      	cmpne	r3, r1
 8002546:	bf14      	ite	ne
 8002548:	2201      	movne	r2, #1
 800254a:	2200      	moveq	r2, #0
 800254c:	3160      	adds	r1, #96	; 0x60
 800254e:	428b      	cmp	r3, r1
 8002550:	bf0c      	ite	eq
 8002552:	2200      	moveq	r2, #0
 8002554:	f002 0201 	andne.w	r2, r2, #1
 8002558:	b112      	cbz	r2, 8002560 <HAL_DMAEx_MultiBufferStart_IT+0x264>
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d102      	bne.n	8002566 <HAL_DMAEx_MultiBufferStart_IT+0x26a>
 8002560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002564:	e7e7      	b.n	8002536 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002566:	3a48      	subs	r2, #72	; 0x48
 8002568:	3948      	subs	r1, #72	; 0x48
 800256a:	4293      	cmp	r3, r2
 800256c:	bf18      	it	ne
 800256e:	428b      	cmpne	r3, r1
 8002570:	bf14      	ite	ne
 8002572:	2201      	movne	r2, #1
 8002574:	2200      	moveq	r2, #0
 8002576:	3160      	adds	r1, #96	; 0x60
 8002578:	428b      	cmp	r3, r1
 800257a:	bf0c      	ite	eq
 800257c:	2200      	moveq	r2, #0
 800257e:	f002 0201 	andne.w	r2, r2, #1
 8002582:	b112      	cbz	r2, 800258a <HAL_DMAEx_MultiBufferStart_IT+0x28e>
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d102      	bne.n	8002590 <HAL_DMAEx_MultiBufferStart_IT+0x294>
 800258a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800258e:	e7d2      	b.n	8002536 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002590:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002594:	e7cf      	b.n	8002536 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d955      	bls.n	8002648 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800259c:	f502 726e 	add.w	r2, r2, #952	; 0x3b8
 80025a0:	4915      	ldr	r1, [pc, #84]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	bf18      	it	ne
 80025a6:	428b      	cmpne	r3, r1
 80025a8:	bf14      	ite	ne
 80025aa:	2201      	movne	r2, #1
 80025ac:	2200      	moveq	r2, #0
 80025ae:	3160      	adds	r1, #96	; 0x60
 80025b0:	428b      	cmp	r3, r1
 80025b2:	bf0c      	ite	eq
 80025b4:	2200      	moveq	r2, #0
 80025b6:	f002 0201 	andne.w	r2, r2, #1
 80025ba:	b112      	cbz	r2, 80025c2 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d103      	bne.n	80025ca <HAL_DMAEx_MultiBufferStart_IT+0x2ce>
 80025c2:	2320      	movs	r3, #32
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80025c6:	60d3      	str	r3, [r2, #12]
 80025c8:	e6e6      	b.n	8002398 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 80025ca:	3a48      	subs	r2, #72	; 0x48
 80025cc:	3948      	subs	r1, #72	; 0x48
 80025ce:	4293      	cmp	r3, r2
 80025d0:	bf18      	it	ne
 80025d2:	428b      	cmpne	r3, r1
 80025d4:	bf14      	ite	ne
 80025d6:	2201      	movne	r2, #1
 80025d8:	2200      	moveq	r2, #0
 80025da:	3160      	adds	r1, #96	; 0x60
 80025dc:	428b      	cmp	r3, r1
 80025de:	bf0c      	ite	eq
 80025e0:	2200      	moveq	r2, #0
 80025e2:	f002 0201 	andne.w	r2, r2, #1
 80025e6:	b112      	cbz	r2, 80025ee <HAL_DMAEx_MultiBufferStart_IT+0x2f2>
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d114      	bne.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x31c>
 80025ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f2:	e7e7      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80025f4:	40026458 	.word	0x40026458
 80025f8:	40026010 	.word	0x40026010
 80025fc:	40026470 	.word	0x40026470
 8002600:	40026400 	.word	0x40026400
 8002604:	40026488 	.word	0x40026488
 8002608:	400264a0 	.word	0x400264a0
 800260c:	400260b8 	.word	0x400260b8
 8002610:	40026058 	.word	0x40026058
 8002614:	40026000 	.word	0x40026000
 8002618:	3a48      	subs	r2, #72	; 0x48
 800261a:	3948      	subs	r1, #72	; 0x48
 800261c:	4293      	cmp	r3, r2
 800261e:	bf18      	it	ne
 8002620:	428b      	cmpne	r3, r1
 8002622:	bf14      	ite	ne
 8002624:	2201      	movne	r2, #1
 8002626:	2200      	moveq	r2, #0
 8002628:	3160      	adds	r1, #96	; 0x60
 800262a:	428b      	cmp	r3, r1
 800262c:	bf0c      	ite	eq
 800262e:	2200      	moveq	r2, #0
 8002630:	f002 0201 	andne.w	r2, r2, #1
 8002634:	b112      	cbz	r2, 800263c <HAL_DMAEx_MultiBufferStart_IT+0x340>
 8002636:	4aa3      	ldr	r2, [pc, #652]	; (80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d102      	bne.n	8002642 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800263c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002640:	e7c0      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002646:	e7bd      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002648:	4a9f      	ldr	r2, [pc, #636]	; (80028c8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800264a:	49a0      	ldr	r1, [pc, #640]	; (80028cc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	bf18      	it	ne
 8002650:	428b      	cmpne	r3, r1
 8002652:	bf14      	ite	ne
 8002654:	2201      	movne	r2, #1
 8002656:	2200      	moveq	r2, #0
 8002658:	3160      	adds	r1, #96	; 0x60
 800265a:	428b      	cmp	r3, r1
 800265c:	bf0c      	ite	eq
 800265e:	2200      	moveq	r2, #0
 8002660:	f002 0201 	andne.w	r2, r2, #1
 8002664:	b112      	cbz	r2, 800266c <HAL_DMAEx_MultiBufferStart_IT+0x370>
 8002666:	4a9a      	ldr	r2, [pc, #616]	; (80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <HAL_DMAEx_MultiBufferStart_IT+0x378>
 800266c:	2320      	movs	r3, #32
 800266e:	4a99      	ldr	r2, [pc, #612]	; (80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002670:	6093      	str	r3, [r2, #8]
 8002672:	e691      	b.n	8002398 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 8002674:	3a48      	subs	r2, #72	; 0x48
 8002676:	3948      	subs	r1, #72	; 0x48
 8002678:	4293      	cmp	r3, r2
 800267a:	bf18      	it	ne
 800267c:	428b      	cmpne	r3, r1
 800267e:	bf14      	ite	ne
 8002680:	2201      	movne	r2, #1
 8002682:	2200      	moveq	r2, #0
 8002684:	3160      	adds	r1, #96	; 0x60
 8002686:	428b      	cmp	r3, r1
 8002688:	bf0c      	ite	eq
 800268a:	2200      	moveq	r2, #0
 800268c:	f002 0201 	andne.w	r2, r2, #1
 8002690:	b112      	cbz	r2, 8002698 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8002692:	4a91      	ldr	r2, [pc, #580]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d102      	bne.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
 8002698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800269c:	e7e7      	b.n	800266e <HAL_DMAEx_MultiBufferStart_IT+0x372>
 800269e:	3a48      	subs	r2, #72	; 0x48
 80026a0:	3948      	subs	r1, #72	; 0x48
 80026a2:	4293      	cmp	r3, r2
 80026a4:	bf18      	it	ne
 80026a6:	428b      	cmpne	r3, r1
 80026a8:	bf14      	ite	ne
 80026aa:	2201      	movne	r2, #1
 80026ac:	2200      	moveq	r2, #0
 80026ae:	3160      	adds	r1, #96	; 0x60
 80026b0:	428b      	cmp	r3, r1
 80026b2:	bf0c      	ite	eq
 80026b4:	2200      	moveq	r2, #0
 80026b6:	f002 0201 	andne.w	r2, r2, #1
 80026ba:	b112      	cbz	r2, 80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 80026bc:	4a81      	ldr	r2, [pc, #516]	; (80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d102      	bne.n	80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 80026c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026c6:	e7d2      	b.n	800266e <HAL_DMAEx_MultiBufferStart_IT+0x372>
 80026c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026cc:	e7cf      	b.n	800266e <HAL_DMAEx_MultiBufferStart_IT+0x372>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026ce:	3a48      	subs	r2, #72	; 0x48
 80026d0:	3948      	subs	r1, #72	; 0x48
 80026d2:	4293      	cmp	r3, r2
 80026d4:	bf18      	it	ne
 80026d6:	428b      	cmpne	r3, r1
 80026d8:	bf14      	ite	ne
 80026da:	2201      	movne	r2, #1
 80026dc:	2200      	moveq	r2, #0
 80026de:	3160      	adds	r1, #96	; 0x60
 80026e0:	428b      	cmp	r3, r1
 80026e2:	bf0c      	ite	eq
 80026e4:	2200      	moveq	r2, #0
 80026e6:	f002 0201 	andne.w	r2, r2, #1
 80026ea:	b112      	cbz	r2, 80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80026ec:	4a7a      	ldr	r2, [pc, #488]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d102      	bne.n	80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80026f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f6:	e668      	b.n	80023ca <HAL_DMAEx_MultiBufferStart_IT+0xce>
 80026f8:	3a48      	subs	r2, #72	; 0x48
 80026fa:	3948      	subs	r1, #72	; 0x48
 80026fc:	4293      	cmp	r3, r2
 80026fe:	bf18      	it	ne
 8002700:	428b      	cmpne	r3, r1
 8002702:	bf14      	ite	ne
 8002704:	2201      	movne	r2, #1
 8002706:	2200      	moveq	r2, #0
 8002708:	3160      	adds	r1, #96	; 0x60
 800270a:	428b      	cmp	r3, r1
 800270c:	bf0c      	ite	eq
 800270e:	2200      	moveq	r2, #0
 8002710:	f002 0201 	andne.w	r2, r2, #1
 8002714:	b112      	cbz	r2, 800271c <HAL_DMAEx_MultiBufferStart_IT+0x420>
 8002716:	4a6b      	ldr	r2, [pc, #428]	; (80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d102      	bne.n	8002722 <HAL_DMAEx_MultiBufferStart_IT+0x426>
 800271c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002720:	e653      	b.n	80023ca <HAL_DMAEx_MultiBufferStart_IT+0xce>
 8002722:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002726:	e650      	b.n	80023ca <HAL_DMAEx_MultiBufferStart_IT+0xce>
 8002728:	4a6c      	ldr	r2, [pc, #432]	; (80028dc <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d943      	bls.n	80027b6 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800272e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002732:	4966      	ldr	r1, [pc, #408]	; (80028cc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf18      	it	ne
 8002738:	428b      	cmpne	r3, r1
 800273a:	bf14      	ite	ne
 800273c:	2201      	movne	r2, #1
 800273e:	2200      	moveq	r2, #0
 8002740:	3160      	adds	r1, #96	; 0x60
 8002742:	428b      	cmp	r3, r1
 8002744:	bf0c      	ite	eq
 8002746:	2200      	moveq	r2, #0
 8002748:	f002 0201 	andne.w	r2, r2, #1
 800274c:	b112      	cbz	r2, 8002754 <HAL_DMAEx_MultiBufferStart_IT+0x458>
 800274e:	4a60      	ldr	r2, [pc, #384]	; (80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d103      	bne.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x460>
 8002754:	2210      	movs	r2, #16
 8002756:	4b62      	ldr	r3, [pc, #392]	; (80028e0 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	e638      	b.n	80023ce <HAL_DMAEx_MultiBufferStart_IT+0xd2>
 800275c:	3a48      	subs	r2, #72	; 0x48
 800275e:	3948      	subs	r1, #72	; 0x48
 8002760:	4293      	cmp	r3, r2
 8002762:	bf18      	it	ne
 8002764:	428b      	cmpne	r3, r1
 8002766:	bf14      	ite	ne
 8002768:	2201      	movne	r2, #1
 800276a:	2200      	moveq	r2, #0
 800276c:	3160      	adds	r1, #96	; 0x60
 800276e:	428b      	cmp	r3, r1
 8002770:	bf0c      	ite	eq
 8002772:	2200      	moveq	r2, #0
 8002774:	f002 0201 	andne.w	r2, r2, #1
 8002778:	b112      	cbz	r2, 8002780 <HAL_DMAEx_MultiBufferStart_IT+0x484>
 800277a:	4a57      	ldr	r2, [pc, #348]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d102      	bne.n	8002786 <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 8002780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002784:	e7e7      	b.n	8002756 <HAL_DMAEx_MultiBufferStart_IT+0x45a>
 8002786:	3a48      	subs	r2, #72	; 0x48
 8002788:	3948      	subs	r1, #72	; 0x48
 800278a:	4293      	cmp	r3, r2
 800278c:	bf18      	it	ne
 800278e:	428b      	cmpne	r3, r1
 8002790:	bf14      	ite	ne
 8002792:	2201      	movne	r2, #1
 8002794:	2200      	moveq	r2, #0
 8002796:	3160      	adds	r1, #96	; 0x60
 8002798:	428b      	cmp	r3, r1
 800279a:	bf0c      	ite	eq
 800279c:	2200      	moveq	r2, #0
 800279e:	f002 0201 	andne.w	r2, r2, #1
 80027a2:	b112      	cbz	r2, 80027aa <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80027a4:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d102      	bne.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80027aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ae:	e7d2      	b.n	8002756 <HAL_DMAEx_MultiBufferStart_IT+0x45a>
 80027b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027b4:	e7cf      	b.n	8002756 <HAL_DMAEx_MultiBufferStart_IT+0x45a>
 80027b6:	4a4b      	ldr	r2, [pc, #300]	; (80028e4 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d943      	bls.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 80027bc:	f502 726e 	add.w	r2, r2, #952	; 0x3b8
 80027c0:	4942      	ldr	r1, [pc, #264]	; (80028cc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	bf18      	it	ne
 80027c6:	428b      	cmpne	r3, r1
 80027c8:	bf14      	ite	ne
 80027ca:	2201      	movne	r2, #1
 80027cc:	2200      	moveq	r2, #0
 80027ce:	3160      	adds	r1, #96	; 0x60
 80027d0:	428b      	cmp	r3, r1
 80027d2:	bf0c      	ite	eq
 80027d4:	2200      	moveq	r2, #0
 80027d6:	f002 0201 	andne.w	r2, r2, #1
 80027da:	b112      	cbz	r2, 80027e2 <HAL_DMAEx_MultiBufferStart_IT+0x4e6>
 80027dc:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d103      	bne.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x4ee>
 80027e2:	2310      	movs	r3, #16
 80027e4:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	e5f1      	b.n	80023ce <HAL_DMAEx_MultiBufferStart_IT+0xd2>
 80027ea:	3a48      	subs	r2, #72	; 0x48
 80027ec:	3948      	subs	r1, #72	; 0x48
 80027ee:	4293      	cmp	r3, r2
 80027f0:	bf18      	it	ne
 80027f2:	428b      	cmpne	r3, r1
 80027f4:	bf14      	ite	ne
 80027f6:	2201      	movne	r2, #1
 80027f8:	2200      	moveq	r2, #0
 80027fa:	3160      	adds	r1, #96	; 0x60
 80027fc:	428b      	cmp	r3, r1
 80027fe:	bf0c      	ite	eq
 8002800:	2200      	moveq	r2, #0
 8002802:	f002 0201 	andne.w	r2, r2, #1
 8002806:	b112      	cbz	r2, 800280e <HAL_DMAEx_MultiBufferStart_IT+0x512>
 8002808:	4a33      	ldr	r2, [pc, #204]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d102      	bne.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x518>
 800280e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002812:	e7e7      	b.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x4e8>
 8002814:	3a48      	subs	r2, #72	; 0x48
 8002816:	3948      	subs	r1, #72	; 0x48
 8002818:	4293      	cmp	r3, r2
 800281a:	bf18      	it	ne
 800281c:	428b      	cmpne	r3, r1
 800281e:	bf14      	ite	ne
 8002820:	2201      	movne	r2, #1
 8002822:	2200      	moveq	r2, #0
 8002824:	3160      	adds	r1, #96	; 0x60
 8002826:	428b      	cmp	r3, r1
 8002828:	bf0c      	ite	eq
 800282a:	2200      	moveq	r2, #0
 800282c:	f002 0201 	andne.w	r2, r2, #1
 8002830:	b112      	cbz	r2, 8002838 <HAL_DMAEx_MultiBufferStart_IT+0x53c>
 8002832:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d102      	bne.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x542>
 8002838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800283c:	e7d2      	b.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x4e8>
 800283e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002842:	e7cf      	b.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x4e8>
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002846:	4921      	ldr	r1, [pc, #132]	; (80028cc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	bf18      	it	ne
 800284c:	428b      	cmpne	r3, r1
 800284e:	bf14      	ite	ne
 8002850:	2201      	movne	r2, #1
 8002852:	2200      	moveq	r2, #0
 8002854:	3160      	adds	r1, #96	; 0x60
 8002856:	428b      	cmp	r3, r1
 8002858:	bf0c      	ite	eq
 800285a:	2200      	moveq	r2, #0
 800285c:	f002 0201 	andne.w	r2, r2, #1
 8002860:	b112      	cbz	r2, 8002868 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d103      	bne.n	8002870 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8002868:	2310      	movs	r3, #16
 800286a:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800286c:	6093      	str	r3, [r2, #8]
 800286e:	e5ae      	b.n	80023ce <HAL_DMAEx_MultiBufferStart_IT+0xd2>
 8002870:	3a48      	subs	r2, #72	; 0x48
 8002872:	3948      	subs	r1, #72	; 0x48
 8002874:	4293      	cmp	r3, r2
 8002876:	bf18      	it	ne
 8002878:	428b      	cmpne	r3, r1
 800287a:	bf14      	ite	ne
 800287c:	2201      	movne	r2, #1
 800287e:	2200      	moveq	r2, #0
 8002880:	3160      	adds	r1, #96	; 0x60
 8002882:	428b      	cmp	r3, r1
 8002884:	bf0c      	ite	eq
 8002886:	2200      	moveq	r2, #0
 8002888:	f002 0201 	andne.w	r2, r2, #1
 800288c:	b112      	cbz	r2, 8002894 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	e7e7      	b.n	800286a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 800289a:	3a48      	subs	r2, #72	; 0x48
 800289c:	3948      	subs	r1, #72	; 0x48
 800289e:	4293      	cmp	r3, r2
 80028a0:	bf18      	it	ne
 80028a2:	428b      	cmpne	r3, r1
 80028a4:	bf14      	ite	ne
 80028a6:	2201      	movne	r2, #1
 80028a8:	2200      	moveq	r2, #0
 80028aa:	3160      	adds	r1, #96	; 0x60
 80028ac:	428b      	cmp	r3, r1
 80028ae:	bf0c      	ite	eq
 80028b0:	2200      	moveq	r2, #0
 80028b2:	f002 0201 	andne.w	r2, r2, #1
 80028b6:	b112      	cbz	r2, 80028be <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 80028b8:	4a02      	ldr	r2, [pc, #8]	; (80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d114      	bne.n	80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80028be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c2:	e7d2      	b.n	800286a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80028c4:	400264a0 	.word	0x400264a0
 80028c8:	40026410 	.word	0x40026410
 80028cc:	40026010 	.word	0x40026010
 80028d0:	40026470 	.word	0x40026470
 80028d4:	40026000 	.word	0x40026000
 80028d8:	40026488 	.word	0x40026488
 80028dc:	400260b8 	.word	0x400260b8
 80028e0:	40026400 	.word	0x40026400
 80028e4:	40026058 	.word	0x40026058
 80028e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028ec:	e7bd      	b.n	800286a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80028ee:	3a48      	subs	r2, #72	; 0x48
 80028f0:	3948      	subs	r1, #72	; 0x48
 80028f2:	4293      	cmp	r3, r2
 80028f4:	bf18      	it	ne
 80028f6:	428b      	cmpne	r3, r1
 80028f8:	bf14      	ite	ne
 80028fa:	2201      	movne	r2, #1
 80028fc:	2200      	moveq	r2, #0
 80028fe:	3160      	adds	r1, #96	; 0x60
 8002900:	428b      	cmp	r3, r1
 8002902:	bf0c      	ite	eq
 8002904:	2200      	moveq	r2, #0
 8002906:	f002 0201 	andne.w	r2, r2, #1
 800290a:	b112      	cbz	r2, 8002912 <HAL_DMAEx_MultiBufferStart_IT+0x616>
 800290c:	4a9a      	ldr	r2, [pc, #616]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d102      	bne.n	8002918 <HAL_DMAEx_MultiBufferStart_IT+0x61c>
 8002912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002916:	e573      	b.n	8002400 <HAL_DMAEx_MultiBufferStart_IT+0x104>
 8002918:	3a48      	subs	r2, #72	; 0x48
 800291a:	3948      	subs	r1, #72	; 0x48
 800291c:	4293      	cmp	r3, r2
 800291e:	bf18      	it	ne
 8002920:	428b      	cmpne	r3, r1
 8002922:	bf14      	ite	ne
 8002924:	2201      	movne	r2, #1
 8002926:	2200      	moveq	r2, #0
 8002928:	3160      	adds	r1, #96	; 0x60
 800292a:	428b      	cmp	r3, r1
 800292c:	bf0c      	ite	eq
 800292e:	2200      	moveq	r2, #0
 8002930:	f002 0201 	andne.w	r2, r2, #1
 8002934:	b112      	cbz	r2, 800293c <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8002936:	4a91      	ldr	r2, [pc, #580]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d102      	bne.n	8002942 <HAL_DMAEx_MultiBufferStart_IT+0x646>
 800293c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002940:	e55e      	b.n	8002400 <HAL_DMAEx_MultiBufferStart_IT+0x104>
 8002942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002946:	e55b      	b.n	8002400 <HAL_DMAEx_MultiBufferStart_IT+0x104>
 8002948:	4a8d      	ldr	r2, [pc, #564]	; (8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d943      	bls.n	80029d6 <HAL_DMAEx_MultiBufferStart_IT+0x6da>
 800294e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002952:	498c      	ldr	r1, [pc, #560]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002954:	4293      	cmp	r3, r2
 8002956:	bf18      	it	ne
 8002958:	428b      	cmpne	r3, r1
 800295a:	bf14      	ite	ne
 800295c:	2201      	movne	r2, #1
 800295e:	2200      	moveq	r2, #0
 8002960:	3160      	adds	r1, #96	; 0x60
 8002962:	428b      	cmp	r3, r1
 8002964:	bf0c      	ite	eq
 8002966:	2200      	moveq	r2, #0
 8002968:	f002 0201 	andne.w	r2, r2, #1
 800296c:	b112      	cbz	r2, 8002974 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 800296e:	4a86      	ldr	r2, [pc, #536]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <HAL_DMAEx_MultiBufferStart_IT+0x680>
 8002974:	2208      	movs	r2, #8
 8002976:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	e543      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 800297c:	3a48      	subs	r2, #72	; 0x48
 800297e:	3948      	subs	r1, #72	; 0x48
 8002980:	4293      	cmp	r3, r2
 8002982:	bf18      	it	ne
 8002984:	428b      	cmpne	r3, r1
 8002986:	bf14      	ite	ne
 8002988:	2201      	movne	r2, #1
 800298a:	2200      	moveq	r2, #0
 800298c:	3160      	adds	r1, #96	; 0x60
 800298e:	428b      	cmp	r3, r1
 8002990:	bf0c      	ite	eq
 8002992:	2200      	moveq	r2, #0
 8002994:	f002 0201 	andne.w	r2, r2, #1
 8002998:	b112      	cbz	r2, 80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>
 800299a:	4a77      	ldr	r2, [pc, #476]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d102      	bne.n	80029a6 <HAL_DMAEx_MultiBufferStart_IT+0x6aa>
 80029a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a4:	e7e7      	b.n	8002976 <HAL_DMAEx_MultiBufferStart_IT+0x67a>
 80029a6:	3a48      	subs	r2, #72	; 0x48
 80029a8:	3948      	subs	r1, #72	; 0x48
 80029aa:	4293      	cmp	r3, r2
 80029ac:	bf18      	it	ne
 80029ae:	428b      	cmpne	r3, r1
 80029b0:	bf14      	ite	ne
 80029b2:	2201      	movne	r2, #1
 80029b4:	2200      	moveq	r2, #0
 80029b6:	3160      	adds	r1, #96	; 0x60
 80029b8:	428b      	cmp	r3, r1
 80029ba:	bf0c      	ite	eq
 80029bc:	2200      	moveq	r2, #0
 80029be:	f002 0201 	andne.w	r2, r2, #1
 80029c2:	b112      	cbz	r2, 80029ca <HAL_DMAEx_MultiBufferStart_IT+0x6ce>
 80029c4:	4a6d      	ldr	r2, [pc, #436]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d102      	bne.n	80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x6d4>
 80029ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029ce:	e7d2      	b.n	8002976 <HAL_DMAEx_MultiBufferStart_IT+0x67a>
 80029d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d4:	e7cf      	b.n	8002976 <HAL_DMAEx_MultiBufferStart_IT+0x67a>
 80029d6:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x894>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d943      	bls.n	8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 80029dc:	f502 726e 	add.w	r2, r2, #952	; 0x3b8
 80029e0:	4968      	ldr	r1, [pc, #416]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	bf18      	it	ne
 80029e6:	428b      	cmpne	r3, r1
 80029e8:	bf14      	ite	ne
 80029ea:	2201      	movne	r2, #1
 80029ec:	2200      	moveq	r2, #0
 80029ee:	3160      	adds	r1, #96	; 0x60
 80029f0:	428b      	cmp	r3, r1
 80029f2:	bf0c      	ite	eq
 80029f4:	2200      	moveq	r2, #0
 80029f6:	f002 0201 	andne.w	r2, r2, #1
 80029fa:	b112      	cbz	r2, 8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x706>
 80029fc:	4a62      	ldr	r2, [pc, #392]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d103      	bne.n	8002a0a <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 8002a02:	2308      	movs	r3, #8
 8002a04:	4a63      	ldr	r2, [pc, #396]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x898>)
 8002a06:	60d3      	str	r3, [r2, #12]
 8002a08:	e4fc      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 8002a0a:	3a48      	subs	r2, #72	; 0x48
 8002a0c:	3948      	subs	r1, #72	; 0x48
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	bf18      	it	ne
 8002a12:	428b      	cmpne	r3, r1
 8002a14:	bf14      	ite	ne
 8002a16:	2201      	movne	r2, #1
 8002a18:	2200      	moveq	r2, #0
 8002a1a:	3160      	adds	r1, #96	; 0x60
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	bf0c      	ite	eq
 8002a20:	2200      	moveq	r2, #0
 8002a22:	f002 0201 	andne.w	r2, r2, #1
 8002a26:	b112      	cbz	r2, 8002a2e <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8002a28:	4a53      	ldr	r2, [pc, #332]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d102      	bne.n	8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 8002a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a32:	e7e7      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x708>
 8002a34:	3a48      	subs	r2, #72	; 0x48
 8002a36:	3948      	subs	r1, #72	; 0x48
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bf18      	it	ne
 8002a3c:	428b      	cmpne	r3, r1
 8002a3e:	bf14      	ite	ne
 8002a40:	2201      	movne	r2, #1
 8002a42:	2200      	moveq	r2, #0
 8002a44:	3160      	adds	r1, #96	; 0x60
 8002a46:	428b      	cmp	r3, r1
 8002a48:	bf0c      	ite	eq
 8002a4a:	2200      	moveq	r2, #0
 8002a4c:	f002 0201 	andne.w	r2, r2, #1
 8002a50:	b112      	cbz	r2, 8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002a52:	4a4a      	ldr	r2, [pc, #296]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002a58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a5c:	e7d2      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x708>
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a62:	e7cf      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x708>
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x89c>)
 8002a66:	4947      	ldr	r1, [pc, #284]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bf18      	it	ne
 8002a6c:	428b      	cmpne	r3, r1
 8002a6e:	bf14      	ite	ne
 8002a70:	2201      	movne	r2, #1
 8002a72:	2200      	moveq	r2, #0
 8002a74:	3160      	adds	r1, #96	; 0x60
 8002a76:	428b      	cmp	r3, r1
 8002a78:	bf0c      	ite	eq
 8002a7a:	2200      	moveq	r2, #0
 8002a7c:	f002 0201 	andne.w	r2, r2, #1
 8002a80:	b112      	cbz	r2, 8002a88 <HAL_DMAEx_MultiBufferStart_IT+0x78c>
 8002a82:	4a41      	ldr	r2, [pc, #260]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d103      	bne.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x794>
 8002a88:	2308      	movs	r3, #8
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x898>)
 8002a8c:	6093      	str	r3, [r2, #8]
 8002a8e:	e4b9      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 8002a90:	3a48      	subs	r2, #72	; 0x48
 8002a92:	3948      	subs	r1, #72	; 0x48
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bf18      	it	ne
 8002a98:	428b      	cmpne	r3, r1
 8002a9a:	bf14      	ite	ne
 8002a9c:	2201      	movne	r2, #1
 8002a9e:	2200      	moveq	r2, #0
 8002aa0:	3160      	adds	r1, #96	; 0x60
 8002aa2:	428b      	cmp	r3, r1
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2200      	moveq	r2, #0
 8002aa8:	f002 0201 	andne.w	r2, r2, #1
 8002aac:	b112      	cbz	r2, 8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x7b8>
 8002aae:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d102      	bne.n	8002aba <HAL_DMAEx_MultiBufferStart_IT+0x7be>
 8002ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab8:	e7e7      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x78e>
 8002aba:	3a48      	subs	r2, #72	; 0x48
 8002abc:	3948      	subs	r1, #72	; 0x48
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	bf18      	it	ne
 8002ac2:	428b      	cmpne	r3, r1
 8002ac4:	bf14      	ite	ne
 8002ac6:	2201      	movne	r2, #1
 8002ac8:	2200      	moveq	r2, #0
 8002aca:	3160      	adds	r1, #96	; 0x60
 8002acc:	428b      	cmp	r3, r1
 8002ace:	bf0c      	ite	eq
 8002ad0:	2200      	moveq	r2, #0
 8002ad2:	f002 0201 	andne.w	r2, r2, #1
 8002ad6:	b112      	cbz	r2, 8002ade <HAL_DMAEx_MultiBufferStart_IT+0x7e2>
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d102      	bne.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 8002ade:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ae2:	e7d2      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x78e>
 8002ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae8:	e7cf      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x78e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002aea:	3a48      	subs	r2, #72	; 0x48
 8002aec:	3948      	subs	r1, #72	; 0x48
 8002aee:	4293      	cmp	r3, r2
 8002af0:	bf18      	it	ne
 8002af2:	428b      	cmpne	r3, r1
 8002af4:	bf14      	ite	ne
 8002af6:	2201      	movne	r2, #1
 8002af8:	2200      	moveq	r2, #0
 8002afa:	3160      	adds	r1, #96	; 0x60
 8002afc:	428b      	cmp	r3, r1
 8002afe:	bf0c      	ite	eq
 8002b00:	2200      	moveq	r2, #0
 8002b02:	f002 0201 	andne.w	r2, r2, #1
 8002b06:	b112      	cbz	r2, 8002b0e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d102      	bne.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b12:	e490      	b.n	8002436 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002b14:	3a48      	subs	r2, #72	; 0x48
 8002b16:	3948      	subs	r1, #72	; 0x48
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf18      	it	ne
 8002b1c:	428b      	cmpne	r3, r1
 8002b1e:	bf14      	ite	ne
 8002b20:	2201      	movne	r2, #1
 8002b22:	2200      	moveq	r2, #0
 8002b24:	3160      	adds	r1, #96	; 0x60
 8002b26:	428b      	cmp	r3, r1
 8002b28:	bf0c      	ite	eq
 8002b2a:	2200      	moveq	r2, #0
 8002b2c:	f002 0201 	andne.w	r2, r2, #1
 8002b30:	b112      	cbz	r2, 8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d102      	bne.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002b38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b3c:	e47b      	b.n	8002436 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002b3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b42:	e478      	b.n	8002436 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002b44:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d955      	bls.n	8002bf6 <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8002b4a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002b4e:	490d      	ldr	r1, [pc, #52]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	bf18      	it	ne
 8002b54:	428b      	cmpne	r3, r1
 8002b56:	bf14      	ite	ne
 8002b58:	2201      	movne	r2, #1
 8002b5a:	2200      	moveq	r2, #0
 8002b5c:	3160      	adds	r1, #96	; 0x60
 8002b5e:	428b      	cmp	r3, r1
 8002b60:	bf0c      	ite	eq
 8002b62:	2200      	moveq	r2, #0
 8002b64:	f002 0201 	andne.w	r2, r2, #1
 8002b68:	b112      	cbz	r2, 8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x874>
 8002b6a:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d115      	bne.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 8002b70:	2204      	movs	r2, #4
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	e460      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8002b78:	40026488 	.word	0x40026488
 8002b7c:	400264a0 	.word	0x400264a0
 8002b80:	400260b8 	.word	0x400260b8
 8002b84:	40026010 	.word	0x40026010
 8002b88:	40026470 	.word	0x40026470
 8002b8c:	40026400 	.word	0x40026400
 8002b90:	40026058 	.word	0x40026058
 8002b94:	40026000 	.word	0x40026000
 8002b98:	40026410 	.word	0x40026410
 8002b9c:	3a48      	subs	r2, #72	; 0x48
 8002b9e:	3948      	subs	r1, #72	; 0x48
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bf18      	it	ne
 8002ba4:	428b      	cmpne	r3, r1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2201      	movne	r2, #1
 8002baa:	2200      	moveq	r2, #0
 8002bac:	3160      	adds	r1, #96	; 0x60
 8002bae:	428b      	cmp	r3, r1
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2200      	moveq	r2, #0
 8002bb4:	f002 0201 	andne.w	r2, r2, #1
 8002bb8:	b112      	cbz	r2, 8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8002bba:	4a9d      	ldr	r2, [pc, #628]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xb34>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8002bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc4:	e7d5      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x876>
 8002bc6:	3a48      	subs	r2, #72	; 0x48
 8002bc8:	3948      	subs	r1, #72	; 0x48
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	bf18      	it	ne
 8002bce:	428b      	cmpne	r3, r1
 8002bd0:	bf14      	ite	ne
 8002bd2:	2201      	movne	r2, #1
 8002bd4:	2200      	moveq	r2, #0
 8002bd6:	3160      	adds	r1, #96	; 0x60
 8002bd8:	428b      	cmp	r3, r1
 8002bda:	bf0c      	ite	eq
 8002bdc:	2200      	moveq	r2, #0
 8002bde:	f002 0201 	andne.w	r2, r2, #1
 8002be2:	b112      	cbz	r2, 8002bea <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8002be4:	4a93      	ldr	r2, [pc, #588]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xb38>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d102      	bne.n	8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8002bea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bee:	e7c0      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x876>
 8002bf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bf4:	e7bd      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x876>
 8002bf6:	4a90      	ldr	r2, [pc, #576]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0xb3c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d943      	bls.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x988>
 8002bfc:	f502 726e 	add.w	r2, r2, #952	; 0x3b8
 8002c00:	498e      	ldr	r1, [pc, #568]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xb40>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	bf18      	it	ne
 8002c06:	428b      	cmpne	r3, r1
 8002c08:	bf14      	ite	ne
 8002c0a:	2201      	movne	r2, #1
 8002c0c:	2200      	moveq	r2, #0
 8002c0e:	3160      	adds	r1, #96	; 0x60
 8002c10:	428b      	cmp	r3, r1
 8002c12:	bf0c      	ite	eq
 8002c14:	2200      	moveq	r2, #0
 8002c16:	f002 0201 	andne.w	r2, r2, #1
 8002c1a:	b112      	cbz	r2, 8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8002c1c:	4a88      	ldr	r2, [pc, #544]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xb44>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d103      	bne.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002c22:	2304      	movs	r3, #4
 8002c24:	4a87      	ldr	r2, [pc, #540]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xb48>)
 8002c26:	60d3      	str	r3, [r2, #12]
 8002c28:	e407      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8002c2a:	3a48      	subs	r2, #72	; 0x48
 8002c2c:	3948      	subs	r1, #72	; 0x48
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bf18      	it	ne
 8002c32:	428b      	cmpne	r3, r1
 8002c34:	bf14      	ite	ne
 8002c36:	2201      	movne	r2, #1
 8002c38:	2200      	moveq	r2, #0
 8002c3a:	3160      	adds	r1, #96	; 0x60
 8002c3c:	428b      	cmp	r3, r1
 8002c3e:	bf0c      	ite	eq
 8002c40:	2200      	moveq	r2, #0
 8002c42:	f002 0201 	andne.w	r2, r2, #1
 8002c46:	b112      	cbz	r2, 8002c4e <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8002c48:	4a79      	ldr	r2, [pc, #484]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xb34>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d102      	bne.n	8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c52:	e7e7      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002c54:	3a48      	subs	r2, #72	; 0x48
 8002c56:	3948      	subs	r1, #72	; 0x48
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	bf18      	it	ne
 8002c5c:	428b      	cmpne	r3, r1
 8002c5e:	bf14      	ite	ne
 8002c60:	2201      	movne	r2, #1
 8002c62:	2200      	moveq	r2, #0
 8002c64:	3160      	adds	r1, #96	; 0x60
 8002c66:	428b      	cmp	r3, r1
 8002c68:	bf0c      	ite	eq
 8002c6a:	2200      	moveq	r2, #0
 8002c6c:	f002 0201 	andne.w	r2, r2, #1
 8002c70:	b112      	cbz	r2, 8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x97c>
 8002c72:	4a70      	ldr	r2, [pc, #448]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xb38>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d102      	bne.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x982>
 8002c78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c7c:	e7d2      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c82:	e7cf      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002c84:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0xb4c>)
 8002c86:	496d      	ldr	r1, [pc, #436]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xb40>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	bf18      	it	ne
 8002c8c:	428b      	cmpne	r3, r1
 8002c8e:	bf14      	ite	ne
 8002c90:	2201      	movne	r2, #1
 8002c92:	2200      	moveq	r2, #0
 8002c94:	3160      	adds	r1, #96	; 0x60
 8002c96:	428b      	cmp	r3, r1
 8002c98:	bf0c      	ite	eq
 8002c9a:	2200      	moveq	r2, #0
 8002c9c:	f002 0201 	andne.w	r2, r2, #1
 8002ca0:	b112      	cbz	r2, 8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x9ac>
 8002ca2:	4a67      	ldr	r2, [pc, #412]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xb44>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d104      	bne.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x9b6>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	4a66      	ldr	r2, [pc, #408]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xb48>)
 8002cac:	6093      	str	r3, [r2, #8]
 8002cae:	f7ff bbc4 	b.w	800243a <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8002cb2:	3a48      	subs	r2, #72	; 0x48
 8002cb4:	3948      	subs	r1, #72	; 0x48
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	bf18      	it	ne
 8002cba:	428b      	cmpne	r3, r1
 8002cbc:	bf14      	ite	ne
 8002cbe:	2201      	movne	r2, #1
 8002cc0:	2200      	moveq	r2, #0
 8002cc2:	3160      	adds	r1, #96	; 0x60
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2200      	moveq	r2, #0
 8002cca:	f002 0201 	andne.w	r2, r2, #1
 8002cce:	b112      	cbz	r2, 8002cd6 <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 8002cd0:	4a57      	ldr	r2, [pc, #348]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xb34>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d102      	bne.n	8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 8002cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cda:	e7e6      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x9ae>
 8002cdc:	3a48      	subs	r2, #72	; 0x48
 8002cde:	3948      	subs	r1, #72	; 0x48
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	bf18      	it	ne
 8002ce4:	428b      	cmpne	r3, r1
 8002ce6:	bf14      	ite	ne
 8002ce8:	2201      	movne	r2, #1
 8002cea:	2200      	moveq	r2, #0
 8002cec:	3160      	adds	r1, #96	; 0x60
 8002cee:	428b      	cmp	r3, r1
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2200      	moveq	r2, #0
 8002cf4:	f002 0201 	andne.w	r2, r2, #1
 8002cf8:	b112      	cbz	r2, 8002d00 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002cfa:	4a4e      	ldr	r2, [pc, #312]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xb38>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d102      	bne.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8002d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d04:	e7d1      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x9ae>
 8002d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d0a:	e7ce      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x9ae>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002d0c:	3a48      	subs	r2, #72	; 0x48
 8002d0e:	3948      	subs	r1, #72	; 0x48
 8002d10:	4293      	cmp	r3, r2
 8002d12:	bf18      	it	ne
 8002d14:	428b      	cmpne	r3, r1
 8002d16:	bf14      	ite	ne
 8002d18:	2201      	movne	r2, #1
 8002d1a:	2200      	moveq	r2, #0
 8002d1c:	3160      	adds	r1, #96	; 0x60
 8002d1e:	428b      	cmp	r3, r1
 8002d20:	bf0c      	ite	eq
 8002d22:	2200      	moveq	r2, #0
 8002d24:	f002 0201 	andne.w	r2, r2, #1
 8002d28:	b112      	cbz	r2, 8002d30 <HAL_DMAEx_MultiBufferStart_IT+0xa34>
 8002d2a:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xb34>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0xa3a>
 8002d30:	2240      	movs	r2, #64	; 0x40
 8002d32:	f7ff bb9b 	b.w	800246c <HAL_DMAEx_MultiBufferStart_IT+0x170>
 8002d36:	3a48      	subs	r2, #72	; 0x48
 8002d38:	3948      	subs	r1, #72	; 0x48
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	bf18      	it	ne
 8002d3e:	428b      	cmpne	r3, r1
 8002d40:	bf14      	ite	ne
 8002d42:	2201      	movne	r2, #1
 8002d44:	2200      	moveq	r2, #0
 8002d46:	3160      	adds	r1, #96	; 0x60
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2200      	moveq	r2, #0
 8002d4e:	f002 0201 	andne.w	r2, r2, #1
 8002d52:	b112      	cbz	r2, 8002d5a <HAL_DMAEx_MultiBufferStart_IT+0xa5e>
 8002d54:	4a37      	ldr	r2, [pc, #220]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xb38>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d103      	bne.n	8002d62 <HAL_DMAEx_MultiBufferStart_IT+0xa66>
 8002d5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d5e:	f7ff bb85 	b.w	800246c <HAL_DMAEx_MultiBufferStart_IT+0x170>
 8002d62:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d66:	f7ff bb81 	b.w	800246c <HAL_DMAEx_MultiBufferStart_IT+0x170>
 8002d6a:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0xb50>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d943      	bls.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>
 8002d70:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002d74:	4931      	ldr	r1, [pc, #196]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xb40>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	bf18      	it	ne
 8002d7a:	428b      	cmpne	r3, r1
 8002d7c:	bf14      	ite	ne
 8002d7e:	2201      	movne	r2, #1
 8002d80:	2200      	moveq	r2, #0
 8002d82:	3160      	adds	r1, #96	; 0x60
 8002d84:	428b      	cmp	r3, r1
 8002d86:	bf0c      	ite	eq
 8002d88:	2200      	moveq	r2, #0
 8002d8a:	f002 0201 	andne.w	r2, r2, #1
 8002d8e:	b112      	cbz	r2, 8002d96 <HAL_DMAEx_MultiBufferStart_IT+0xa9a>
 8002d90:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xb44>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d104      	bne.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>
 8002d96:	2201      	movs	r2, #1
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0xb54>)
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	f7ff bb68 	b.w	8002470 <HAL_DMAEx_MultiBufferStart_IT+0x174>
 8002da0:	3a48      	subs	r2, #72	; 0x48
 8002da2:	3948      	subs	r1, #72	; 0x48
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf18      	it	ne
 8002da8:	428b      	cmpne	r3, r1
 8002daa:	bf14      	ite	ne
 8002dac:	2201      	movne	r2, #1
 8002dae:	2200      	moveq	r2, #0
 8002db0:	3160      	adds	r1, #96	; 0x60
 8002db2:	428b      	cmp	r3, r1
 8002db4:	bf0c      	ite	eq
 8002db6:	2200      	moveq	r2, #0
 8002db8:	f002 0201 	andne.w	r2, r2, #1
 8002dbc:	b112      	cbz	r2, 8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xb34>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	e7e7      	b.n	8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8002dc8:	3a48      	subs	r2, #72	; 0x48
 8002dca:	3948      	subs	r1, #72	; 0x48
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf18      	it	ne
 8002dd0:	428b      	cmpne	r3, r1
 8002dd2:	bf14      	ite	ne
 8002dd4:	2201      	movne	r2, #1
 8002dd6:	2200      	moveq	r2, #0
 8002dd8:	3160      	adds	r1, #96	; 0x60
 8002dda:	428b      	cmp	r3, r1
 8002ddc:	bf0c      	ite	eq
 8002dde:	2200      	moveq	r2, #0
 8002de0:	f002 0201 	andne.w	r2, r2, #1
 8002de4:	b112      	cbz	r2, 8002dec <HAL_DMAEx_MultiBufferStart_IT+0xaf0>
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xb38>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d102      	bne.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0xaf6>
 8002dec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002df0:	e7d2      	b.n	8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8002df2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002df6:	e7cf      	b.n	8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8002df8:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0xb3c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d956      	bls.n	8002eac <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 8002dfe:	f502 726e 	add.w	r2, r2, #952	; 0x3b8
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xb40>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf18      	it	ne
 8002e08:	428b      	cmpne	r3, r1
 8002e0a:	bf14      	ite	ne
 8002e0c:	2201      	movne	r2, #1
 8002e0e:	2200      	moveq	r2, #0
 8002e10:	3160      	adds	r1, #96	; 0x60
 8002e12:	428b      	cmp	r3, r1
 8002e14:	bf0c      	ite	eq
 8002e16:	2200      	moveq	r2, #0
 8002e18:	f002 0201 	andne.w	r2, r2, #1
 8002e1c:	b112      	cbz	r2, 8002e24 <HAL_DMAEx_MultiBufferStart_IT+0xb28>
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xb44>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d117      	bne.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xb58>
 8002e24:	2301      	movs	r3, #1
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xb48>)
 8002e28:	60d3      	str	r3, [r2, #12]
 8002e2a:	f7ff bb21 	b.w	8002470 <HAL_DMAEx_MultiBufferStart_IT+0x174>
 8002e2e:	bf00      	nop
 8002e30:	40026488 	.word	0x40026488
 8002e34:	400264a0 	.word	0x400264a0
 8002e38:	40026058 	.word	0x40026058
 8002e3c:	40026010 	.word	0x40026010
 8002e40:	40026470 	.word	0x40026470
 8002e44:	40026000 	.word	0x40026000
 8002e48:	40026410 	.word	0x40026410
 8002e4c:	400260b8 	.word	0x400260b8
 8002e50:	40026400 	.word	0x40026400
 8002e54:	3a48      	subs	r2, #72	; 0x48
 8002e56:	3948      	subs	r1, #72	; 0x48
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	bf18      	it	ne
 8002e5c:	428b      	cmpne	r3, r1
 8002e5e:	bf14      	ite	ne
 8002e60:	2201      	movne	r2, #1
 8002e62:	2200      	moveq	r2, #0
 8002e64:	3160      	adds	r1, #96	; 0x60
 8002e66:	428b      	cmp	r3, r1
 8002e68:	bf0c      	ite	eq
 8002e6a:	2200      	moveq	r2, #0
 8002e6c:	f002 0201 	andne.w	r2, r2, #1
 8002e70:	b112      	cbz	r2, 8002e78 <HAL_DMAEx_MultiBufferStart_IT+0xb7c>
 8002e72:	4a34      	ldr	r2, [pc, #208]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xc48>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0xb80>
 8002e78:	2340      	movs	r3, #64	; 0x40
 8002e7a:	e7d4      	b.n	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002e7c:	3a48      	subs	r2, #72	; 0x48
 8002e7e:	3948      	subs	r1, #72	; 0x48
 8002e80:	4293      	cmp	r3, r2
 8002e82:	bf18      	it	ne
 8002e84:	428b      	cmpne	r3, r1
 8002e86:	bf14      	ite	ne
 8002e88:	2201      	movne	r2, #1
 8002e8a:	2200      	moveq	r2, #0
 8002e8c:	3160      	adds	r1, #96	; 0x60
 8002e8e:	428b      	cmp	r3, r1
 8002e90:	bf0c      	ite	eq
 8002e92:	2200      	moveq	r2, #0
 8002e94:	f002 0201 	andne.w	r2, r2, #1
 8002e98:	b112      	cbz	r2, 8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 8002e9a:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xc4c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 8002ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea4:	e7bf      	b.n	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eaa:	e7bc      	b.n	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002eac:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0xc50>)
 8002eae:	4928      	ldr	r1, [pc, #160]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0xc54>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	bf18      	it	ne
 8002eb4:	428b      	cmpne	r3, r1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2201      	movne	r2, #1
 8002eba:	2200      	moveq	r2, #0
 8002ebc:	3160      	adds	r1, #96	; 0x60
 8002ebe:	428b      	cmp	r3, r1
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2200      	moveq	r2, #0
 8002ec4:	f002 0201 	andne.w	r2, r2, #1
 8002ec8:	b112      	cbz	r2, 8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002eca:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0xc58>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d104      	bne.n	8002eda <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0xc5c>)
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	f7ff bacb 	b.w	8002470 <HAL_DMAEx_MultiBufferStart_IT+0x174>
 8002eda:	3a48      	subs	r2, #72	; 0x48
 8002edc:	3948      	subs	r1, #72	; 0x48
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf18      	it	ne
 8002ee2:	428b      	cmpne	r3, r1
 8002ee4:	bf14      	ite	ne
 8002ee6:	2201      	movne	r2, #1
 8002ee8:	2200      	moveq	r2, #0
 8002eea:	3160      	adds	r1, #96	; 0x60
 8002eec:	428b      	cmp	r3, r1
 8002eee:	bf0c      	ite	eq
 8002ef0:	2200      	moveq	r2, #0
 8002ef2:	f002 0201 	andne.w	r2, r2, #1
 8002ef6:	b112      	cbz	r2, 8002efe <HAL_DMAEx_MultiBufferStart_IT+0xc02>
 8002ef8:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xc48>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0xc06>
 8002efe:	2340      	movs	r3, #64	; 0x40
 8002f00:	e7e7      	b.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002f02:	3a48      	subs	r2, #72	; 0x48
 8002f04:	3948      	subs	r1, #72	; 0x48
 8002f06:	4293      	cmp	r3, r2
 8002f08:	bf18      	it	ne
 8002f0a:	428b      	cmpne	r3, r1
 8002f0c:	bf14      	ite	ne
 8002f0e:	2201      	movne	r2, #1
 8002f10:	2200      	moveq	r2, #0
 8002f12:	3160      	adds	r1, #96	; 0x60
 8002f14:	428b      	cmp	r3, r1
 8002f16:	bf0c      	ite	eq
 8002f18:	2200      	moveq	r2, #0
 8002f1a:	f002 0201 	andne.w	r2, r2, #1
 8002f1e:	b112      	cbz	r2, 8002f26 <HAL_DMAEx_MultiBufferStart_IT+0xc2a>
 8002f20:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xc4c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d102      	bne.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xc30>
 8002f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f2a:	e7d2      	b.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002f2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f30:	e7cf      	b.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f32:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f47f aaa9 	bne.w	800248c <HAL_DMAEx_MultiBufferStart_IT+0x190>
 8002f3a:	f7ff baac 	b.w	8002496 <HAL_DMAEx_MultiBufferStart_IT+0x19a>
  __HAL_LOCK(hdma);
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f7ff b9f1 	b.w	8002326 <HAL_DMAEx_MultiBufferStart_IT+0x2a>
 8002f44:	40026488 	.word	0x40026488
 8002f48:	400264a0 	.word	0x400264a0
 8002f4c:	40026410 	.word	0x40026410
 8002f50:	40026010 	.word	0x40026010
 8002f54:	40026470 	.word	0x40026470
 8002f58:	40026000 	.word	0x40026000

08002f5c <HAL_DMAEx_ChangeMemory>:
  if(memory == MEMORY0)
 8002f5c:	b91a      	cbnz	r2, 8002f66 <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 8002f5e:	6803      	ldr	r3, [r0, #0]
 8002f60:	60d9      	str	r1, [r3, #12]
}
 8002f62:	2000      	movs	r0, #0
 8002f64:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 8002f66:	6803      	ldr	r3, [r0, #0]
 8002f68:	6119      	str	r1, [r3, #16]
 8002f6a:	e7fa      	b.n	8002f62 <HAL_DMAEx_ChangeMemory+0x6>

08002f6c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002f70:	b129      	cbz	r1, 8002f7e <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f76:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002f78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f7c:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002f7e:	69e3      	ldr	r3, [r4, #28]
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8002f88:	2200      	movne	r2, #0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002f8a:	6821      	ldr	r1, [r4, #0]
 8002f8c:	6808      	ldr	r0, [r1, #0]
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8002f8e:	68a3      	ldr	r3, [r4, #8]
 8002f90:	68e5      	ldr	r5, [r4, #12]
 8002f92:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
 8002f94:	4313      	orrs	r3, r2
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <ETH_MACDMAConfig+0x114>)
 8002f98:	4002      	ands	r2, r0
 8002f9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002fa0:	600b      	str	r3, [r1, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7fe fd94 	bl	8001ad4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	601d      	str	r5, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	605a      	str	r2, [r3, #4]
                                        macinit.MulticastFramesFilter |
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7fe fd8a 	bl	8001ad4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	605d      	str	r5, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	6993      	ldr	r3, [r2, #24]
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002fd2:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	0c1b      	lsrs	r3, r3, #16
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002fde:	6193      	str	r3, [r2, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fe fd75 	bl	8001ad4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	619e      	str	r6, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	61dd      	str	r5, [r3, #28]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7fe fd6c 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	61dd      	str	r5, [r3, #28]
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
    dmainit.DescriptorSkipLength = 0x0;
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003000:	6821      	ldr	r1, [r4, #0]
 8003002:	f241 0518 	movw	r5, #4120	; 0x1018
 8003006:	594b      	ldr	r3, [r1, r5]
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003008:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <ETH_MACDMAConfig+0x118>)
 800300a:	401a      	ands	r2, r3
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <ETH_MACDMAConfig+0x11c>)
 800300e:	4313      	orrs	r3, r2
                         dmainit.ForwardUndersizedGoodFrames |
                         dmainit.ReceiveThresholdControl |
                         dmainit.SecondFrameOperate);
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003010:	514b      	str	r3, [r1, r5]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003016:	2001      	movs	r0, #1
 8003018:	f7fe fd5c 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	515e      	str	r6, [r3, r5]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <ETH_MACDMAConfig+0x120>)
 8003028:	601a      	str	r2, [r3, #0]
                                          dmainit.DMAArbitration |
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003030:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003032:	2001      	movs	r0, #1
 8003034:	f7fe fd4e 	bl	8001ad4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303e:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003040:	69a3      	ldr	r3, [r4, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d013      	beq.n	800306e <ETH_MACDMAConfig+0x102>
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003046:	6962      	ldr	r2, [r4, #20]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003048:	7951      	ldrb	r1, [r2, #5]
 800304a:	7913      	ldrb	r3, [r2, #4]
 800304c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003050:	490f      	ldr	r1, [pc, #60]	; (8003090 <ETH_MACDMAConfig+0x124>)
 8003052:	600b      	str	r3, [r1, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003054:	78d1      	ldrb	r1, [r2, #3]
 8003056:	7893      	ldrb	r3, [r2, #2]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800305e:	7811      	ldrb	r1, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	7852      	ldrb	r2, [r2, #1]
 8003064:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <ETH_MACDMAConfig+0x128>)
 800306a:	6013      	str	r3, [r2, #0]
}
 800306c:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800306e:	6821      	ldr	r1, [r4, #0]
 8003070:	f241 021c 	movw	r2, #4124	; 0x101c
 8003074:	5888      	ldr	r0, [r1, r2]
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <ETH_MACDMAConfig+0x12c>)
 8003078:	4303      	orrs	r3, r0
 800307a:	508b      	str	r3, [r1, r2]
 800307c:	e7e3      	b.n	8003046 <ETH_MACDMAConfig+0xda>
 800307e:	bf00      	nop
 8003080:	ff20810f 	.word	0xff20810f
 8003084:	f8de3f23 	.word	0xf8de3f23
 8003088:	02200004 	.word	0x02200004
 800308c:	02c12080 	.word	0x02c12080
 8003090:	40028040 	.word	0x40028040
 8003094:	40028044 	.word	0x40028044
 8003098:	00010040 	.word	0x00010040

0800309c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800309c:	b530      	push	{r4, r5, lr}
 800309e:	b083      	sub	sp, #12
 80030a0:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80030a6:	6802      	ldr	r2, [r0, #0]
 80030a8:	f241 0518 	movw	r5, #4120	; 0x1018
 80030ac:	5953      	ldr	r3, [r2, r5]
 80030ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b2:	5153      	str	r3, [r2, r5]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80030b4:	6803      	ldr	r3, [r0, #0]
 80030b6:	595b      	ldr	r3, [r3, r5]
 80030b8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f7fe fd0a 	bl	8001ad4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	9a01      	ldr	r2, [sp, #4]
 80030c4:	515a      	str	r2, [r3, r5]
}
 80030c6:	b003      	add	sp, #12
 80030c8:	bd30      	pop	{r4, r5, pc}

080030ca <HAL_ETH_DMATxDescListInit>:
{
 80030ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80030ce:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80030d2:	2c01      	cmp	r4, #1
 80030d4:	d034      	beq.n	8003140 <HAL_ETH_DMATxDescListInit+0x76>
 80030d6:	2401      	movs	r4, #1
 80030d8:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80030dc:	2402      	movs	r4, #2
 80030de:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 80030e2:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 80030e4:	b1fb      	cbz	r3, 8003126 <HAL_ETH_DMATxDescListInit+0x5c>
 80030e6:	460c      	mov	r4, r1
 80030e8:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80030ea:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 80030ee:	f103 3cff 	add.w	ip, r3, #4294967295
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80030f2:	4688      	mov	r8, r1
 80030f4:	e00b      	b.n	800310e <HAL_ETH_DMATxDescListInit+0x44>
    if(i < (TxBuffCount-1))
 80030f6:	45ac      	cmp	ip, r5
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80030f8:	bf8c      	ite	hi
 80030fa:	f104 0720 	addhi.w	r7, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80030fe:	4647      	movls	r7, r8
 8003100:	60f7      	str	r7, [r6, #12]
  for(i=0; i < TxBuffCount; i++)
 8003102:	3501      	adds	r5, #1
 8003104:	3420      	adds	r4, #32
 8003106:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800310a:	42ab      	cmp	r3, r5
 800310c:	d00b      	beq.n	8003126 <HAL_ETH_DMATxDescListInit+0x5c>
    dmatxdesc = DMATxDescTab + i;
 800310e:	4626      	mov	r6, r4
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003110:	f8c4 e000 	str.w	lr, [r4]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003114:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003116:	69c7      	ldr	r7, [r0, #28]
 8003118:	2f00      	cmp	r7, #0
 800311a:	d1ec      	bne.n	80030f6 <HAL_ETH_DMATxDescListInit+0x2c>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800311c:	6827      	ldr	r7, [r4, #0]
 800311e:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 8003122:	6027      	str	r7, [r4, #0]
 8003124:	e7e7      	b.n	80030f6 <HAL_ETH_DMATxDescListInit+0x2c>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003126:	6802      	ldr	r2, [r0, #0]
 8003128:	f241 0310 	movw	r3, #4112	; 0x1010
 800312c:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800312e:	2301      	movs	r3, #1
 8003130:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003134:	2300      	movs	r3, #0
 8003136:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800313a:	4618      	mov	r0, r3
}
 800313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 8003140:	2002      	movs	r0, #2
 8003142:	e7fb      	b.n	800313c <HAL_ETH_DMATxDescListInit+0x72>

08003144 <HAL_ETH_DMARxDescListInit>:
{
 8003144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003148:	468e      	mov	lr, r1
  __HAL_LOCK(heth);
 800314a:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
 800314e:	2901      	cmp	r1, #1
 8003150:	d02f      	beq.n	80031b2 <HAL_ETH_DMARxDescListInit+0x6e>
 8003152:	2101      	movs	r1, #1
 8003154:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8003158:	2102      	movs	r1, #2
 800315a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 800315e:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8003162:	b1c3      	cbz	r3, 8003196 <HAL_ETH_DMARxDescListInit+0x52>
 8003164:	4674      	mov	r4, lr
 8003166:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003168:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800316c:	f244 51f4 	movw	r1, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 8003170:	f103 3cff 	add.w	ip, r3, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003174:	46f1      	mov	r9, lr
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003176:	f8c4 8000 	str.w	r8, [r4]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800317a:	6061      	str	r1, [r4, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800317c:	60a2      	str	r2, [r4, #8]
    if(i < (RxBuffCount-1))
 800317e:	45ac      	cmp	ip, r5
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003180:	bf8c      	ite	hi
 8003182:	f104 0720 	addhi.w	r7, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003186:	464f      	movls	r7, r9
 8003188:	60e7      	str	r7, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
 800318a:	3501      	adds	r5, #1
 800318c:	3420      	adds	r4, #32
 800318e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8003192:	42ab      	cmp	r3, r5
 8003194:	d1ef      	bne.n	8003176 <HAL_ETH_DMARxDescListInit+0x32>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003196:	6802      	ldr	r2, [r0, #0]
 8003198:	f241 030c 	movw	r3, #4108	; 0x100c
 800319c:	f842 e003 	str.w	lr, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80031a6:	2300      	movs	r3, #0
 80031a8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80031ac:	4618      	mov	r0, r3
}
 80031ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(heth);
 80031b2:	2002      	movs	r0, #2
 80031b4:	e7fb      	b.n	80031ae <HAL_ETH_DMARxDescListInit+0x6a>
	...

080031b8 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80031b8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f000 8086 	beq.w	80032ce <HAL_ETH_TransmitFrame+0x116>
 80031c2:	2301      	movs	r3, #1
 80031c4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 80031ce:	b1f1      	cbz	r1, 800320e <HAL_ETH_TransmitFrame+0x56>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80031d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	db22      	blt.n	800321e <HAL_ETH_TransmitFrame+0x66>
{
 80031d8:	b4f0      	push	{r4, r5, r6, r7}
  if (FrameLength > ETH_TX_BUF_SIZE)
 80031da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031de:	4291      	cmp	r1, r2
 80031e0:	d927      	bls.n	8003232 <HAL_ETH_TransmitFrame+0x7a>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80031e2:	4d3c      	ldr	r5, [pc, #240]	; (80032d4 <HAL_ETH_TransmitFrame+0x11c>)
 80031e4:	fba5 2501 	umull	r2, r5, r5, r1
 80031e8:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80031ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031ee:	fb02 1215 	mls	r2, r2, r5, r1
 80031f2:	b1e2      	cbz	r2, 800322e <HAL_ETH_TransmitFrame+0x76>
      bufcount++;
 80031f4:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80031f6:	f201 53f4 	addw	r3, r1, #1524	; 0x5f4
 80031fa:	4937      	ldr	r1, [pc, #220]	; (80032d8 <HAL_ETH_TransmitFrame+0x120>)
 80031fc:	fb01 3105 	mla	r1, r1, r5, r3
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003200:	f3c1 010c 	ubfx	r1, r1, #0, #13
    for (i=0; i< bufcount; i++)
 8003204:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003206:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 800320a:	1e6f      	subs	r7, r5, #1
 800320c:	e04c      	b.n	80032a8 <HAL_ETH_TransmitFrame+0xf0>
    heth->State = HAL_ETH_STATE_READY;
 800320e:	2301      	movs	r3, #1
 8003210:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8003214:	2200      	movs	r2, #0
 8003216:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 800321a:	4618      	mov	r0, r3
 800321c:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800321e:	2312      	movs	r3, #18
 8003220:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8003224:	2300      	movs	r3, #0
 8003226:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800322a:	2001      	movs	r0, #1
 800322c:	4770      	bx	lr
  if (bufcount == 1)
 800322e:	2d01      	cmp	r5, #1
 8003230:	d1e1      	bne.n	80031f6 <HAL_ETH_TransmitFrame+0x3e>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003238:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800323a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800323c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8003240:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003242:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003244:	6813      	ldr	r3, [r2, #0]
 8003246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800324a:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800324c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	f241 0214 	movw	r2, #4116	; 0x1014
 8003258:	589a      	ldr	r2, [r3, r2]
 800325a:	f012 0f04 	tst.w	r2, #4
 800325e:	d008      	beq.n	8003272 <HAL_ETH_TransmitFrame+0xba>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003260:	f241 0214 	movw	r2, #4116	; 0x1014
 8003264:	2104      	movs	r1, #4
 8003266:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8003268:	6802      	ldr	r2, [r0, #0]
 800326a:	f241 0304 	movw	r3, #4100	; 0x1004
 800326e:	2100      	movs	r1, #0
 8003270:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8003272:	2301      	movs	r3, #1
 8003274:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003278:	2300      	movs	r3, #0
 800327a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800327e:	4618      	mov	r0, r3
}
 8003280:	bcf0      	pop	{r4, r5, r6, r7}
 8003282:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003284:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6013      	str	r3, [r2, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800328e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003290:	605e      	str	r6, [r3, #4]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003292:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800329a:	6013      	str	r3, [r2, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800329c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	62c3      	str	r3, [r0, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80032a2:	3401      	adds	r4, #1
 80032a4:	42ac      	cmp	r4, r5
 80032a6:	d0d4      	beq.n	8003252 <HAL_ETH_TransmitFrame+0x9a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80032a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80032b0:	6013      	str	r3, [r2, #0]
      if (i == 0) 
 80032b2:	2c00      	cmp	r4, #0
 80032b4:	d0e6      	beq.n	8003284 <HAL_ETH_TransmitFrame+0xcc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80032b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80032b8:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80032ba:	42a7      	cmp	r7, r4
 80032bc:	d1e9      	bne.n	8003292 <HAL_ETH_TransmitFrame+0xda>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80032be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032c6:	6013      	str	r3, [r2, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80032c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80032ca:	6059      	str	r1, [r3, #4]
 80032cc:	e7e1      	b.n	8003292 <HAL_ETH_TransmitFrame+0xda>
  __HAL_LOCK(heth);
 80032ce:	2002      	movs	r0, #2
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	ac02b00b 	.word	0xac02b00b
 80032d8:	fffffa0c 	.word	0xfffffa0c

080032dc <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 80032dc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d04b      	beq.n	800337c <HAL_ETH_GetReceivedFrame_IT+0xa0>
{
 80032e4:	b410      	push	{r4}
  __HAL_LOCK(heth);
 80032e6:	2301      	movs	r3, #1
 80032e8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80032f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	db36      	blt.n	8003368 <HAL_ETH_GetReceivedFrame_IT+0x8c>
  uint32_t descriptorscancounter = 0;
 80032fa:	2100      	movs	r1, #0
      heth->RxFrameInfos.SegCount = 1;   
 80032fc:	2401      	movs	r4, #1
 80032fe:	e009      	b.n	8003314 <HAL_ETH_GetReceivedFrame_IT+0x38>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003300:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8003302:	6384      	str	r4, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003308:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2903      	cmp	r1, #3
 800330e:	d82b      	bhi.n	8003368 <HAL_ETH_GetReceivedFrame_IT+0x8c>
 8003310:	2a00      	cmp	r2, #0
 8003312:	db29      	blt.n	8003368 <HAL_ETH_GetReceivedFrame_IT+0x8c>
    descriptorscancounter++;
 8003314:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800331c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003320:	d0ee      	beq.n	8003300 <HAL_ETH_GetReceivedFrame_IT+0x24>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	f412 7f40 	tst.w	r2, #768	; 0x300
 8003328:	d105      	bne.n	8003336 <HAL_ETH_GetReceivedFrame_IT+0x5a>
      (heth->RxFrameInfos.SegCount)++;
 800332a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800332c:	3201      	adds	r2, #1
 800332e:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	6283      	str	r3, [r0, #40]	; 0x28
 8003334:	e7e8      	b.n	8003308 <HAL_ETH_GetReceivedFrame_IT+0x2c>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003336:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8003338:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800333a:	3201      	adds	r2, #1
 800333c:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800333e:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003340:	bf08      	it	eq
 8003342:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f3c2 420d 	ubfx	r2, r2, #16, #14
 800334a:	3a04      	subs	r2, #4
 800334c:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800334e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003350:	6892      	ldr	r2, [r2, #8]
 8003352:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8003358:	2301      	movs	r3, #1
 800335a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800335e:	2300      	movs	r3, #0
 8003360:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8003364:	4618      	mov	r0, r3
 8003366:	e006      	b.n	8003376 <HAL_ETH_GetReceivedFrame_IT+0x9a>
  heth->State = HAL_ETH_STATE_READY;
 8003368:	2301      	movs	r3, #1
 800336a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800336e:	2200      	movs	r2, #0
 8003370:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8003374:	4618      	mov	r0, r3
}
 8003376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800337a:	4770      	bx	lr
  __HAL_LOCK(heth);
 800337c:	2002      	movs	r0, #2
}
 800337e:	4770      	bx	lr

08003380 <HAL_ETH_TxCpltCallback>:
}
 8003380:	4770      	bx	lr

08003382 <HAL_ETH_ErrorCallback>:
}
 8003382:	4770      	bx	lr

08003384 <HAL_ETH_IRQHandler>:
{
 8003384:	b510      	push	{r4, lr}
 8003386:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	f241 0214 	movw	r2, #4116	; 0x1014
 800338e:	589a      	ldr	r2, [r3, r2]
 8003390:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003394:	d111      	bne.n	80033ba <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003396:	f241 0214 	movw	r2, #4116	; 0x1014
 800339a:	589b      	ldr	r3, [r3, r2]
 800339c:	f013 0f01 	tst.w	r3, #1
 80033a0:	d119      	bne.n	80033d6 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	f241 0314 	movw	r3, #4116	; 0x1014
 80033a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80033ac:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	58d3      	ldr	r3, [r2, r3]
 80033b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80033b6:	d11b      	bne.n	80033f0 <HAL_ETH_IRQHandler+0x6c>
}
 80033b8:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 80033ba:	f003 fae3 	bl	8006984 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	f241 0314 	movw	r3, #4116	; 0x1014
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80033ce:	2300      	movs	r3, #0
 80033d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033d4:	e7e5      	b.n	80033a2 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 80033d6:	f7ff ffd3 	bl	8003380 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80033da:	6821      	ldr	r1, [r4, #0]
 80033dc:	2301      	movs	r3, #1
 80033de:	f241 0214 	movw	r2, #4116	; 0x1014
 80033e2:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 80033e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80033e8:	2300      	movs	r3, #0
 80033ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033ee:	e7d8      	b.n	80033a2 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7ff ffc6 	bl	8003382 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80033fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003400:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8003402:	2301      	movs	r3, #1
 8003404:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8003408:	2300      	movs	r3, #0
 800340a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800340e:	e7d3      	b.n	80033b8 <HAL_ETH_IRQHandler+0x34>

08003410 <HAL_ETH_ReadPHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003410:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b82      	cmp	r3, #130	; 0x82
 8003418:	d032      	beq.n	8003480 <HAL_ETH_ReadPHYRegister+0x70>
{
 800341a:	b570      	push	{r4, r5, r6, lr}
 800341c:	4604      	mov	r4, r0
 800341e:	4615      	mov	r5, r2
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003420:	2382      	movs	r3, #130	; 0x82
 8003422:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8003426:	6800      	ldr	r0, [r0, #0]
 8003428:	6902      	ldr	r2, [r0, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800342a:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800342e:	8a23      	ldrh	r3, [r4, #16]
 8003430:	02db      	lsls	r3, r3, #11
 8003432:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003434:	0189      	lsls	r1, r1, #6
 8003436:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 800343a:	430b      	orrs	r3, r1
 800343c:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800343e:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 8003442:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8003444:	f7fe fb40 	bl	8001ac8 <HAL_GetTick>
 8003448:	4606      	mov	r6, r0
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800344a:	f7fe fb3d 	bl	8001ac8 <HAL_GetTick>
 800344e:	1b83      	subs	r3, r0, r6
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d20c      	bcs.n	8003470 <HAL_ETH_ReadPHYRegister+0x60>
    tmpreg = heth->Instance->MACMIIAR;
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800345a:	f011 0f01 	tst.w	r1, #1
 800345e:	d1f4      	bne.n	800344a <HAL_ETH_ReadPHYRegister+0x3a>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	b29b      	uxth	r3, r3
 8003464:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8003466:	2301      	movs	r3, #1
 8003468:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800346c:	2000      	movs	r0, #0
}
 800346e:	bd70      	pop	{r4, r5, r6, pc}
      heth->State= HAL_ETH_STATE_READY;
 8003470:	2301      	movs	r3, #1
 8003472:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8003476:	2300      	movs	r3, #0
 8003478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      return HAL_TIMEOUT;
 800347c:	2003      	movs	r0, #3
 800347e:	e7f6      	b.n	800346e <HAL_ETH_ReadPHYRegister+0x5e>
    return HAL_BUSY;
 8003480:	2002      	movs	r0, #2
}
 8003482:	4770      	bx	lr

08003484 <HAL_ETH_WritePHYRegister>:
{
 8003484:	b538      	push	{r3, r4, r5, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003486:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b42      	cmp	r3, #66	; 0x42
 800348e:	d030      	beq.n	80034f2 <HAL_ETH_WritePHYRegister+0x6e>
 8003490:	4604      	mov	r4, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003492:	2342      	movs	r3, #66	; 0x42
 8003494:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8003498:	6805      	ldr	r5, [r0, #0]
 800349a:	6928      	ldr	r0, [r5, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800349c:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80034a0:	8a23      	ldrh	r3, [r4, #16]
 80034a2:	02db      	lsls	r3, r3, #11
 80034a4:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80034a6:	0189      	lsls	r1, r1, #6
 80034a8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 80034ac:	430b      	orrs	r3, r1
 80034ae:	4303      	orrs	r3, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80034b0:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80034b4:	b292      	uxth	r2, r2
 80034b6:	616a      	str	r2, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg;
 80034b8:	6822      	ldr	r2, [r4, #0]
 80034ba:	6113      	str	r3, [r2, #16]
  tickstart = HAL_GetTick();
 80034bc:	f7fe fb04 	bl	8001ac8 <HAL_GetTick>
 80034c0:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80034c2:	f7fe fb01 	bl	8001ac8 <HAL_GetTick>
 80034c6:	1b43      	subs	r3, r0, r5
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d209      	bcs.n	80034e2 <HAL_ETH_WritePHYRegister+0x5e>
    tmpreg = heth->Instance->MACMIIAR;
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034d2:	f013 0f01 	tst.w	r3, #1
 80034d6:	d1f4      	bne.n	80034c2 <HAL_ETH_WritePHYRegister+0x3e>
  heth->State = HAL_ETH_STATE_READY;
 80034d8:	2301      	movs	r3, #1
 80034da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK; 
 80034de:	2000      	movs	r0, #0
}
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
      heth->State= HAL_ETH_STATE_READY;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80034e8:	2300      	movs	r3, #0
 80034ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      return HAL_TIMEOUT;
 80034ee:	2003      	movs	r0, #3
 80034f0:	e7f6      	b.n	80034e0 <HAL_ETH_WritePHYRegister+0x5c>
    return HAL_BUSY;
 80034f2:	2002      	movs	r0, #2
 80034f4:	e7f4      	b.n	80034e0 <HAL_ETH_WritePHYRegister+0x5c>
	...

080034f8 <HAL_ETH_Init>:
{
 80034f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fc:	b082      	sub	sp, #8
  uint32_t tempreg = 0, phyreg = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8003502:	2800      	cmp	r0, #0
 8003504:	f000 810a 	beq.w	800371c <HAL_ETH_Init+0x224>
 8003508:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 800350a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800350e:	2b00      	cmp	r3, #0
 8003510:	d033      	beq.n	800357a <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	4b83      	ldr	r3, [pc, #524]	; (8003720 <HAL_ETH_Init+0x228>)
 8003514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351a:	645a      	str	r2, [r3, #68]	; 0x44
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003526:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <HAL_ETH_Init+0x22c>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800352e:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	6a21      	ldr	r1, [r4, #32]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003546:	f7fe fabf 	bl	8001ac8 <HAL_GetTick>
 800354a:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	f012 0f01 	tst.w	r2, #1
 8003558:	d014      	beq.n	8003584 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800355a:	f7fe fab5 	bl	8001ac8 <HAL_GetTick>
 800355e:	1b40      	subs	r0, r0, r5
 8003560:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003564:	d9f2      	bls.n	800354c <HAL_ETH_Init+0x54>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003566:	2503      	movs	r5, #3
 8003568:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800356c:	2300      	movs	r3, #0
 800356e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8003572:	4628      	mov	r0, r5
 8003574:	b002      	add	sp, #8
 8003576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    heth->Lock = HAL_UNLOCKED;
 800357a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800357e:	f003 f987 	bl	8006890 <HAL_ETH_MspInit>
 8003582:	e7c6      	b.n	8003512 <HAL_ETH_Init+0x1a>
  tempreg = (heth->Instance)->MACMIIAR;
 8003584:	691d      	ldr	r5, [r3, #16]
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003586:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 800358a:	f001 fd99 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800358e:	4b66      	ldr	r3, [pc, #408]	; (8003728 <HAL_ETH_Init+0x230>)
 8003590:	4403      	add	r3, r0
 8003592:	4a66      	ldr	r2, [pc, #408]	; (800372c <HAL_ETH_Init+0x234>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d25b      	bcs.n	8003650 <HAL_ETH_Init+0x158>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003598:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80035a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035a4:	2100      	movs	r1, #0
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7ff ff6c 	bl	8003484 <HAL_ETH_WritePHYRegister>
 80035ac:	4605      	mov	r5, r0
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d165      	bne.n	800367e <HAL_ETH_Init+0x186>
  HAL_Delay(PHY_RESET_DELAY);
 80035b2:	20ff      	movs	r0, #255	; 0xff
 80035b4:	f7fe fa8e 	bl	8001ad4 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80035b8:	6863      	ldr	r3, [r4, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 808f 	beq.w	80036de <HAL_ETH_Init+0x1e6>
    tickstart = HAL_GetTick();
 80035c0:	f7fe fa82 	bl	8001ac8 <HAL_GetTick>
 80035c4:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80035c6:	f04f 0801 	mov.w	r8, #1
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80035ca:	f241 3788 	movw	r7, #5000	; 0x1388
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80035ce:	aa01      	add	r2, sp, #4
 80035d0:	4641      	mov	r1, r8
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7ff ff1c 	bl	8003410 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80035d8:	f7fe fa76 	bl	8001ac8 <HAL_GetTick>
 80035dc:	1b80      	subs	r0, r0, r6
 80035de:	42b8      	cmp	r0, r7
 80035e0:	d855      	bhi.n	800368e <HAL_ETH_Init+0x196>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80035e2:	9b01      	ldr	r3, [sp, #4]
 80035e4:	f013 0f04 	tst.w	r3, #4
 80035e8:	d0f1      	beq.n	80035ce <HAL_ETH_Init+0xd6>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80035ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ee:	2100      	movs	r1, #0
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff ff47 	bl	8003484 <HAL_ETH_WritePHYRegister>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d155      	bne.n	80036a6 <HAL_ETH_Init+0x1ae>
    tickstart = HAL_GetTick();
 80035fa:	f7fe fa65 	bl	8001ac8 <HAL_GetTick>
 80035fe:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003600:	f04f 0801 	mov.w	r8, #1
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003604:	f241 3788 	movw	r7, #5000	; 0x1388
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003608:	aa01      	add	r2, sp, #4
 800360a:	4641      	mov	r1, r8
 800360c:	4620      	mov	r0, r4
 800360e:	f7ff feff 	bl	8003410 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003612:	f7fe fa59 	bl	8001ac8 <HAL_GetTick>
 8003616:	1b80      	subs	r0, r0, r6
 8003618:	42b8      	cmp	r0, r7
 800361a:	d84c      	bhi.n	80036b6 <HAL_ETH_Init+0x1be>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800361c:	9b01      	ldr	r3, [sp, #4]
 800361e:	f013 0f20 	tst.w	r3, #32
 8003622:	d0f1      	beq.n	8003608 <HAL_ETH_Init+0x110>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003624:	aa01      	add	r2, sp, #4
 8003626:	2110      	movs	r1, #16
 8003628:	4620      	mov	r0, r4
 800362a:	f7ff fef1 	bl	8003410 <HAL_ETH_ReadPHYRegister>
 800362e:	2800      	cmp	r0, #0
 8003630:	d14d      	bne.n	80036ce <HAL_ETH_Init+0x1d6>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003632:	9b01      	ldr	r3, [sp, #4]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003634:	f013 0204 	ands.w	r2, r3, #4
 8003638:	bf18      	it	ne
 800363a:	f44f 6200 	movne.w	r2, #2048	; 0x800
 800363e:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003640:	f013 0f02 	tst.w	r3, #2
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003644:	bf14      	ite	ne
 8003646:	2300      	movne	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8003648:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	e055      	b.n	80036fc <HAL_ETH_Init+0x204>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003650:	4b37      	ldr	r3, [pc, #220]	; (8003730 <HAL_ETH_Init+0x238>)
 8003652:	4403      	add	r3, r0
 8003654:	4a37      	ldr	r2, [pc, #220]	; (8003734 <HAL_ETH_Init+0x23c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d802      	bhi.n	8003660 <HAL_ETH_Init+0x168>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800365a:	f045 050c 	orr.w	r5, r5, #12
 800365e:	e79d      	b.n	800359c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003660:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_ETH_Init+0x240>)
 8003662:	4403      	add	r3, r0
 8003664:	4a35      	ldr	r2, [pc, #212]	; (800373c <HAL_ETH_Init+0x244>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d398      	bcc.n	800359c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800366a:	4b35      	ldr	r3, [pc, #212]	; (8003740 <HAL_ETH_Init+0x248>)
 800366c:	4403      	add	r3, r0
 800366e:	4a35      	ldr	r2, [pc, #212]	; (8003744 <HAL_ETH_Init+0x24c>)
 8003670:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003672:	bf94      	ite	ls
 8003674:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003678:	f045 0510 	orrhi.w	r5, r5, #16
 800367c:	e78e      	b.n	800359c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 800367e:	2101      	movs	r1, #1
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff fc73 	bl	8002f6c <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8003686:	2501      	movs	r5, #1
 8003688:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 800368c:	e771      	b.n	8003572 <HAL_ETH_Init+0x7a>
        ETH_MACDMAConfig(heth, err);
 800368e:	2101      	movs	r1, #1
 8003690:	4620      	mov	r0, r4
 8003692:	f7ff fc6b 	bl	8002f6c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8003696:	2301      	movs	r3, #1
 8003698:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800369c:	2300      	movs	r3, #0
 800369e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80036a2:	2503      	movs	r5, #3
 80036a4:	e765      	b.n	8003572 <HAL_ETH_Init+0x7a>
      ETH_MACDMAConfig(heth, err);
 80036a6:	2101      	movs	r1, #1
 80036a8:	4620      	mov	r0, r4
 80036aa:	f7ff fc5f 	bl	8002f6c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80036ae:	2501      	movs	r5, #1
 80036b0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80036b4:	e75d      	b.n	8003572 <HAL_ETH_Init+0x7a>
        ETH_MACDMAConfig(heth, err);
 80036b6:	2101      	movs	r1, #1
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff fc57 	bl	8002f6c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80036be:	2301      	movs	r3, #1
 80036c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80036c4:	2300      	movs	r3, #0
 80036c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80036ca:	2503      	movs	r5, #3
 80036cc:	e751      	b.n	8003572 <HAL_ETH_Init+0x7a>
      ETH_MACDMAConfig(heth, err);
 80036ce:	2101      	movs	r1, #1
 80036d0:	4620      	mov	r0, r4
 80036d2:	f7ff fc4b 	bl	8002f6c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80036d6:	2501      	movs	r5, #1
 80036d8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80036dc:	e749      	b.n	8003572 <HAL_ETH_Init+0x7a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80036de:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80036e0:	68a3      	ldr	r3, [r4, #8]
 80036e2:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80036e4:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 80036e8:	b292      	uxth	r2, r2
 80036ea:	2100      	movs	r1, #0
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff fec9 	bl	8003484 <HAL_ETH_WritePHYRegister>
 80036f2:	b958      	cbnz	r0, 800370c <HAL_ETH_Init+0x214>
    HAL_Delay(PHY_CONFIG_DELAY);
 80036f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80036f8:	f7fe f9ec 	bl	8001ad4 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 80036fc:	2100      	movs	r1, #0
 80036fe:	4620      	mov	r0, r4
 8003700:	f7ff fc34 	bl	8002f6c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8003704:	2301      	movs	r3, #1
 8003706:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800370a:	e732      	b.n	8003572 <HAL_ETH_Init+0x7a>
      ETH_MACDMAConfig(heth, err);
 800370c:	2101      	movs	r1, #1
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff fc2c 	bl	8002f6c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8003714:	2501      	movs	r5, #1
 8003716:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800371a:	e72a      	b.n	8003572 <HAL_ETH_Init+0x7a>
    return HAL_ERROR;
 800371c:	2501      	movs	r5, #1
 800371e:	e728      	b.n	8003572 <HAL_ETH_Init+0x7a>
 8003720:	40023800 	.word	0x40023800
 8003724:	40013800 	.word	0x40013800
 8003728:	feced300 	.word	0xfeced300
 800372c:	00e4e1c0 	.word	0x00e4e1c0
 8003730:	fde9f140 	.word	0xfde9f140
 8003734:	017d783f 	.word	0x017d783f
 8003738:	fc6c7900 	.word	0xfc6c7900
 800373c:	02625a00 	.word	0x02625a00
 8003740:	fa0a1f00 	.word	0xfa0a1f00
 8003744:	02faf07f 	.word	0x02faf07f

08003748 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8003748:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800374c:	2b01      	cmp	r3, #1
 800374e:	d03d      	beq.n	80037cc <HAL_ETH_Start+0x84>
{  
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8003756:	2601      	movs	r6, #1
 8003758:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __IO uint32_t tmpreg = 0;
 8003762:	2500      	movs	r5, #0
 8003764:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003766:	6802      	ldr	r2, [r0, #0]
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003770:	6803      	ldr	r3, [r0, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003776:	4630      	mov	r0, r6
 8003778:	f7fe f9ac 	bl	8001ad4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	9a01      	ldr	r2, [sp, #4]
 8003780:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8003782:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003794:	4630      	mov	r0, r6
 8003796:	f7fe f99d 	bl	8001ad4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	9a00      	ldr	r2, [sp, #0]
 800379e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff fc7b 	bl	800309c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80037a6:	6821      	ldr	r1, [r4, #0]
 80037a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80037ac:	58ca      	ldr	r2, [r1, r3]
 80037ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b2:	50ca      	str	r2, [r1, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80037b4:	6821      	ldr	r1, [r4, #0]
 80037b6:	58ca      	ldr	r2, [r1, r3]
 80037b8:	f042 0202 	orr.w	r2, r2, #2
 80037bc:	50ca      	str	r2, [r1, r3]
  heth->State= HAL_ETH_STATE_READY;
 80037be:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80037c2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  return HAL_OK;
 80037c6:	4628      	mov	r0, r5
}
 80037c8:	b002      	add	sp, #8
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 80037cc:	2002      	movs	r0, #2
}
 80037ce:	4770      	bx	lr

080037d0 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 80037d0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d03d      	beq.n	8003854 <HAL_ETH_Stop+0x84>
{  
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 80037de:	2601      	movs	r6, #1
 80037e0:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80037ea:	6801      	ldr	r1, [r0, #0]
 80037ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80037f0:	58ca      	ldr	r2, [r1, r3]
 80037f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f6:	50ca      	str	r2, [r1, r3]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80037f8:	6801      	ldr	r1, [r0, #0]
 80037fa:	58ca      	ldr	r2, [r1, r3]
 80037fc:	f022 0202 	bic.w	r2, r2, #2
 8003800:	50ca      	str	r2, [r1, r3]
  __IO uint32_t tmpreg = 0;
 8003802:	2500      	movs	r5, #0
 8003804:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003806:	6802      	ldr	r2, [r0, #0]
 8003808:	6813      	ldr	r3, [r2, #0]
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003810:	6803      	ldr	r3, [r0, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003816:	4630      	mov	r0, r6
 8003818:	f7fe f95c 	bl	8001ad4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	9a01      	ldr	r2, [sp, #4]
 8003820:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff fc3a 	bl	800309c <ETH_FlushTransmitFIFO>
  __IO uint32_t tmpreg = 0;
 8003828:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	f023 0308 	bic.w	r3, r3, #8
 8003832:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800383a:	4630      	mov	r0, r6
 800383c:	f7fe f94a 	bl	8001ad4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	9a00      	ldr	r2, [sp, #0]
 8003844:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8003846:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800384a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  return HAL_OK;
 800384e:	4628      	mov	r0, r5
}
 8003850:	b002      	add	sp, #8
 8003852:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8003854:	2002      	movs	r0, #2
}
 8003856:	4770      	bx	lr

08003858 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8003858:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800385c:	2b01      	cmp	r3, #1
 800385e:	f000 808e 	beq.w	800397e <HAL_ETH_ConfigMAC+0x126>
{
 8003862:	b570      	push	{r4, r5, r6, lr}
 8003864:	4605      	mov	r5, r0
 8003866:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8003868:	2301      	movs	r3, #1
 800386a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800386e:	2302      	movs	r3, #2
 8003870:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 8003874:	2900      	cmp	r1, #0
 8003876:	d071      	beq.n	800395c <HAL_ETH_ConfigMAC+0x104>
    tmpreg = (heth->Instance)->MACCR;
 8003878:	6802      	ldr	r2, [r0, #0]
 800387a:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800387c:	4941      	ldr	r1, [pc, #260]	; (8003984 <HAL_ETH_ConfigMAC+0x12c>)
 800387e:	4019      	ands	r1, r3
                         macconf->BackOffLimit | 
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	6860      	ldr	r0, [r4, #4]
 8003884:	4303      	orrs	r3, r0
 8003886:	68a0      	ldr	r0, [r4, #8]
 8003888:	4303      	orrs	r3, r0
 800388a:	68e0      	ldr	r0, [r4, #12]
 800388c:	4303      	orrs	r3, r0
 800388e:	6920      	ldr	r0, [r4, #16]
 8003890:	4303      	orrs	r3, r0
 8003892:	6960      	ldr	r0, [r4, #20]
 8003894:	4303      	orrs	r3, r0
 8003896:	69a0      	ldr	r0, [r4, #24]
 8003898:	4303      	orrs	r3, r0
 800389a:	69e0      	ldr	r0, [r4, #28]
 800389c:	4303      	orrs	r3, r0
 800389e:	6a20      	ldr	r0, [r4, #32]
 80038a0:	4303      	orrs	r3, r0
 80038a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038a4:	4303      	orrs	r3, r0
 80038a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038a8:	4303      	orrs	r3, r0
 80038aa:	68a8      	ldr	r0, [r5, #8]
 80038ac:	4303      	orrs	r3, r0
 80038ae:	68e8      	ldr	r0, [r5, #12]
 80038b0:	4303      	orrs	r3, r0
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80038b2:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80038b4:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 80038b6:	682b      	ldr	r3, [r5, #0]
 80038b8:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7fe f90a 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80038c4:	682a      	ldr	r2, [r5, #0]
 80038c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80038ca:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 80038cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038ce:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 80038d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80038d2:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 80038d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80038d6:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 80038d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80038da:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 80038dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80038de:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 80038e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80038e2:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80038e4:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 80038e6:	682b      	ldr	r3, [r5, #0]
 80038e8:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f7fe f8f2 	bl	8001ad4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80038f8:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80038fe:	60da      	str	r2, [r3, #12]
     tmpreg = (heth->Instance)->MACFCR;
 8003900:	6829      	ldr	r1, [r5, #0]
 8003902:	698a      	ldr	r2, [r1, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003904:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8003908:	0412      	lsls	r2, r2, #16
 800390a:	0c12      	lsrs	r2, r2, #16
                          macconf->ReceiveFlowControl |
 800390c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800390e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003910:	4303      	orrs	r3, r0
 8003912:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003914:	4303      	orrs	r3, r0
 8003916:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003918:	4303      	orrs	r3, r0
 800391a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800391c:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800391e:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 8003920:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003924:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003926:	618b      	str	r3, [r1, #24]
     tmpreg = (heth->Instance)->MACFCR;
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800392c:	2001      	movs	r0, #1
 800392e:	f7fe f8d1 	bl	8001ad4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8003932:	682b      	ldr	r3, [r5, #0]
 8003934:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003936:	682a      	ldr	r2, [r5, #0]
 8003938:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800393a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800393c:	430b      	orrs	r3, r1
 800393e:	61d3      	str	r3, [r2, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003944:	2001      	movs	r0, #1
 8003946:	f7fe f8c5 	bl	8001ad4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 800394e:	2301      	movs	r3, #1
 8003950:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003954:	2000      	movs	r0, #0
 8003956:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 800395a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = (heth->Instance)->MACCR;
 800395c:	6801      	ldr	r1, [r0, #0]
 800395e:	680a      	ldr	r2, [r1, #0]
    tmpreg &= ~((uint32_t)0x00004800);
 8003960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003964:	6883      	ldr	r3, [r0, #8]
 8003966:	68c0      	ldr	r0, [r0, #12]
 8003968:	4303      	orrs	r3, r0
 800396a:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800396c:	600b      	str	r3, [r1, #0]
    tmpreg = (heth->Instance)->MACCR;
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003972:	2001      	movs	r0, #1
 8003974:	f7fe f8ae 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	601c      	str	r4, [r3, #0]
 800397c:	e7e7      	b.n	800394e <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 800397e:	2002      	movs	r0, #2
}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	ff20810f 	.word	0xff20810f

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800398e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003990:	4e78      	ldr	r6, [pc, #480]	; (8003b74 <HAL_GPIO_Init+0x1ec>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003992:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8003b80 <HAL_GPIO_Init+0x1f8>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003996:	4d78      	ldr	r5, [pc, #480]	; (8003b78 <HAL_GPIO_Init+0x1f0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003998:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8003b84 <HAL_GPIO_Init+0x1fc>
 800399c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8003b88 <HAL_GPIO_Init+0x200>
 80039a0:	e049      	b.n	8003a36 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR; 
 80039a2:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039a6:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f20b 	lsl.w	r2, r2, fp
 80039b0:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 80039b4:	68ca      	ldr	r2, [r1, #12]
 80039b6:	fa02 f20b 	lsl.w	r2, r2, fp
 80039ba:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 80039be:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80039c0:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c2:	ea22 0a04 	bic.w	sl, r2, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039c6:	684a      	ldr	r2, [r1, #4]
 80039c8:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80039cc:	409c      	lsls	r4, r3
 80039ce:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 80039d2:	6044      	str	r4, [r0, #4]
 80039d4:	e03d      	b.n	8003a52 <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039d6:	2200      	movs	r2, #0
 80039d8:	fa02 f20b 	lsl.w	r2, r2, fp
 80039dc:	ea42 020a 	orr.w	r2, r2, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 80039e0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80039e2:	68ac      	ldr	r4, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80039e4:	ea6f 0208 	mvn.w	r2, r8
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039e8:	684f      	ldr	r7, [r1, #4]
 80039ea:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80039ee:	bf0c      	ite	eq
 80039f0:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 80039f2:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->RTSR = temp;
 80039f6:	60ac      	str	r4, [r5, #8]

        temp = EXTI->FTSR;
 80039f8:	68ec      	ldr	r4, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039fa:	684f      	ldr	r7, [r1, #4]
 80039fc:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8003a00:	bf0c      	ite	eq
 8003a02:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8003a04:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->FTSR = temp;
 8003a08:	60ec      	str	r4, [r5, #12]

        temp = EXTI->EMR;
 8003a0a:	686c      	ldr	r4, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a0c:	684f      	ldr	r7, [r1, #4]
 8003a0e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003a12:	bf0c      	ite	eq
 8003a14:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8003a16:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->EMR = temp;
 8003a1a:	606c      	str	r4, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a1c:	682c      	ldr	r4, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a1e:	684f      	ldr	r7, [r1, #4]
 8003a20:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003a24:	bf0c      	ite	eq
 8003a26:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8003a28:	ea48 0204 	orrne.w	r2, r8, r4
        }
        EXTI->IMR = temp;
 8003a2c:	602a      	str	r2, [r5, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a2e:	3301      	adds	r3, #1
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	f000 809b 	beq.w	8003b6c <HAL_GPIO_Init+0x1e4>
    ioposition = ((uint32_t)0x01) << position;
 8003a36:	2401      	movs	r4, #1
 8003a38:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a3a:	680a      	ldr	r2, [r1, #0]
 8003a3c:	ea04 0802 	and.w	r8, r4, r2
    if(iocurrent == ioposition)
 8003a40:	ea34 0202 	bics.w	r2, r4, r2
 8003a44:	d1f3      	bne.n	8003a2e <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a46:	684a      	ldr	r2, [r1, #4]
 8003a48:	f002 0203 	and.w	r2, r2, #3
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	2a01      	cmp	r2, #1
 8003a50:	d9a7      	bls.n	80039a2 <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a52:	684a      	ldr	r2, [r1, #4]
 8003a54:	f002 0203 	and.w	r2, r2, #3
 8003a58:	2a03      	cmp	r2, #3
 8003a5a:	d025      	beq.n	8003aa8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003a5c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a5e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f20a 	lsl.w	r2, r2, sl
 8003a68:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a6c:	688a      	ldr	r2, [r1, #8]
 8003a6e:	fa02 f20a 	lsl.w	r2, r2, sl
 8003a72:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003a74:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a76:	684a      	ldr	r2, [r1, #4]
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	2a02      	cmp	r2, #2
 8003a7e:	d113      	bne.n	8003aa8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3];
 8003a80:	08dc      	lsrs	r4, r3, #3
 8003a82:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003a86:	f8d4 a020 	ldr.w	sl, [r4, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a8a:	f003 0207 	and.w	r2, r3, #7
 8003a8e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f20b 	lsl.w	r2, r2, fp
 8003a98:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a9c:	690a      	ldr	r2, [r1, #16]
 8003a9e:	fa02 f20b 	lsl.w	r2, r2, fp
 8003aa2:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3] = temp;
 8003aa6:	6222      	str	r2, [r4, #32]
      temp = GPIOx->MODER;
 8003aa8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003aaa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8003aae:	2203      	movs	r2, #3
 8003ab0:	fa02 f20a 	lsl.w	r2, r2, sl
 8003ab4:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ab8:	684a      	ldr	r2, [r1, #4]
 8003aba:	f002 0203 	and.w	r2, r2, #3
 8003abe:	fa02 f20a 	lsl.w	r2, r2, sl
 8003ac2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003ac4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ac6:	684a      	ldr	r2, [r1, #4]
 8003ac8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8003acc:	d0af      	beq.n	8003a2e <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8003ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad4:	6472      	str	r2, [r6, #68]	; 0x44
 8003ad6:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8003ad8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003adc:	9201      	str	r2, [sp, #4]
 8003ade:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003ae0:	f023 0403 	bic.w	r4, r3, #3
 8003ae4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003ae8:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8003aec:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003af0:	f003 0203 	and.w	r2, r3, #3
 8003af4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f20b 	lsl.w	r2, r2, fp
 8003afe:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b02:	4560      	cmp	r0, ip
 8003b04:	f43f af67 	beq.w	80039d6 <HAL_GPIO_Init+0x4e>
 8003b08:	4570      	cmp	r0, lr
 8003b0a:	d01f      	beq.n	8003b4c <HAL_GPIO_Init+0x1c4>
 8003b0c:	4548      	cmp	r0, r9
 8003b0e:	d01f      	beq.n	8003b50 <HAL_GPIO_Init+0x1c8>
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <HAL_GPIO_Init+0x1f4>)
 8003b12:	4290      	cmp	r0, r2
 8003b14:	d01e      	beq.n	8003b54 <HAL_GPIO_Init+0x1cc>
 8003b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b1a:	4290      	cmp	r0, r2
 8003b1c:	d01c      	beq.n	8003b58 <HAL_GPIO_Init+0x1d0>
 8003b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b22:	4290      	cmp	r0, r2
 8003b24:	d01a      	beq.n	8003b5c <HAL_GPIO_Init+0x1d4>
 8003b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b2a:	4290      	cmp	r0, r2
 8003b2c:	d018      	beq.n	8003b60 <HAL_GPIO_Init+0x1d8>
 8003b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b32:	4290      	cmp	r0, r2
 8003b34:	d016      	beq.n	8003b64 <HAL_GPIO_Init+0x1dc>
 8003b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b3a:	4290      	cmp	r0, r2
 8003b3c:	d014      	beq.n	8003b68 <HAL_GPIO_Init+0x1e0>
 8003b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b42:	4290      	cmp	r0, r2
 8003b44:	bf0c      	ite	eq
 8003b46:	2209      	moveq	r2, #9
 8003b48:	220a      	movne	r2, #10
 8003b4a:	e745      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	e743      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b50:	2202      	movs	r2, #2
 8003b52:	e741      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b54:	2203      	movs	r2, #3
 8003b56:	e73f      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b58:	2204      	movs	r2, #4
 8003b5a:	e73d      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b5c:	2205      	movs	r2, #5
 8003b5e:	e73b      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b60:	2206      	movs	r2, #6
 8003b62:	e739      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b64:	2207      	movs	r2, #7
 8003b66:	e737      	b.n	80039d8 <HAL_GPIO_Init+0x50>
 8003b68:	2208      	movs	r2, #8
 8003b6a:	e735      	b.n	80039d8 <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 8003b6c:	b003      	add	sp, #12
 8003b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40013c00 	.word	0x40013c00
 8003b7c:	40020c00 	.word	0x40020c00
 8003b80:	40020000 	.word	0x40020000
 8003b84:	40020400 	.word	0x40020400
 8003b88:	40020800 	.word	0x40020800

08003b8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b8c:	b10a      	cbz	r2, 8003b92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8e:	6181      	str	r1, [r0, #24]
 8003b90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b92:	0409      	lsls	r1, r1, #16
 8003b94:	6181      	str	r1, [r0, #24]
  }
}
 8003b96:	4770      	bx	lr

08003b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b98:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4203      	tst	r3, r0
 8003ba0:	d100      	bne.n	8003ba4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003ba2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ba4:	4b02      	ldr	r3, [pc, #8]	; (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003ba6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ba8:	f7fd f93e 	bl	8000e28 <HAL_GPIO_EXTI_Callback>
}
 8003bac:	e7f9      	b.n	8003ba2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003bae:	bf00      	nop
 8003bb0:	40013c00 	.word	0x40013c00

08003bb4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bb4:	6803      	ldr	r3, [r0, #0]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	f012 0f02 	tst.w	r2, #2
 8003bbc:	d001      	beq.n	8003bc2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc2:	6803      	ldr	r3, [r0, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	f012 0f01 	tst.w	r2, #1
 8003bca:	d103      	bne.n	8003bd4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	619a      	str	r2, [r3, #24]
  }
}
 8003bd4:	4770      	bx	lr

08003bd6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bd6:	b430      	push	{r4, r5}
 8003bd8:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bda:	6805      	ldr	r5, [r0, #0]
 8003bdc:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bde:	4323      	orrs	r3, r4
 8003be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003be4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003be8:	430b      	orrs	r3, r1
 8003bea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bee:	0d64      	lsrs	r4, r4, #21
 8003bf0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003bf4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003bf8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8003bfc:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003c00:	f044 0403 	orr.w	r4, r4, #3
 8003c04:	ea20 0404 	bic.w	r4, r0, r4
 8003c08:	4323      	orrs	r3, r4
 8003c0a:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c0c:	bc30      	pop	{r4, r5}
 8003c0e:	4770      	bx	lr

08003c10 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c10:	f011 0f01 	tst.w	r1, #1
 8003c14:	d01c      	beq.n	8003c50 <I2C_Disable_IRQ+0x40>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c1e:	2b28      	cmp	r3, #40	; 0x28
 8003c20:	bf0c      	ite	eq
 8003c22:	2342      	moveq	r3, #66	; 0x42
 8003c24:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c26:	f011 0f02 	tst.w	r1, #2
 8003c2a:	d009      	beq.n	8003c40 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c2c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003c30:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003c34:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c36:	bf0c      	ite	eq
 8003c38:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c3c:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c40:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8003c44:	d106      	bne.n	8003c54 <I2C_Disable_IRQ+0x44>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c46:	2910      	cmp	r1, #16
 8003c48:	d110      	bne.n	8003c6c <I2C_Disable_IRQ+0x5c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c4a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c4e:	e007      	b.n	8003c60 <I2C_Disable_IRQ+0x50>
  uint32_t tmpisr = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e7e8      	b.n	8003c26 <I2C_Disable_IRQ+0x16>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c54:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c58:	2940      	cmp	r1, #64	; 0x40
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c5a:	bf08      	it	eq
 8003c5c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c60:	6801      	ldr	r1, [r0, #0]
 8003c62:	680a      	ldr	r2, [r1, #0]
 8003c64:	ea22 0303 	bic.w	r3, r2, r3
 8003c68:	600b      	str	r3, [r1, #0]
}
 8003c6a:	4770      	bx	lr
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c6c:	2920      	cmp	r1, #32
 8003c6e:	d1f3      	bne.n	8003c58 <I2C_Disable_IRQ+0x48>
    tmpisr |= I2C_IT_STOPI;
 8003c70:	f043 0320 	orr.w	r3, r3, #32
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c74:	e7f4      	b.n	8003c60 <I2C_Disable_IRQ+0x50>

08003c76 <I2C_IsErrorOccurred>:
{
 8003c76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7a:	4605      	mov	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c7c:	6803      	ldr	r3, [r0, #0]
 8003c7e:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c80:	f017 0710 	ands.w	r7, r7, #16
 8003c84:	d052      	beq.n	8003d2c <I2C_IsErrorOccurred+0xb6>
 8003c86:	460e      	mov	r6, r1
 8003c88:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2400      	movs	r4, #0
 8003c90:	46a1      	mov	r9, r4
 8003c92:	46a2      	mov	sl, r4
 8003c94:	4627      	mov	r7, r4
              hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	f04f 0b20 	mov.w	fp, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c9a:	682a      	ldr	r2, [r5, #0]
 8003c9c:	6993      	ldr	r3, [r2, #24]
 8003c9e:	f013 0f20 	tst.w	r3, #32
 8003ca2:	d13c      	bne.n	8003d1e <I2C_IsErrorOccurred+0xa8>
 8003ca4:	2c00      	cmp	r4, #0
 8003ca6:	d13a      	bne.n	8003d1e <I2C_IsErrorOccurred+0xa8>
      if (Timeout != HAL_MAX_DELAY)
 8003ca8:	463c      	mov	r4, r7
 8003caa:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003cae:	d0f5      	beq.n	8003c9c <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fd ff0a 	bl	8001ac8 <HAL_GetTick>
 8003cb4:	4654      	mov	r4, sl
 8003cb6:	eba0 0008 	sub.w	r0, r0, r8
 8003cba:	42b0      	cmp	r0, r6
 8003cbc:	d801      	bhi.n	8003cc2 <I2C_IsErrorOccurred+0x4c>
 8003cbe:	2e00      	cmp	r6, #0
 8003cc0:	d1eb      	bne.n	8003c9a <I2C_IsErrorOccurred+0x24>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cc2:	682a      	ldr	r2, [r5, #0]
 8003cc4:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8003cc6:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 8003cca:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ccc:	6991      	ldr	r1, [r2, #24]
 8003cce:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8003cd2:	d004      	beq.n	8003cde <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8003cd4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003cd8:	d101      	bne.n	8003cde <I2C_IsErrorOccurred+0x68>
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d117      	bne.n	8003d0e <I2C_IsErrorOccurred+0x98>
{
 8003cde:	464c      	mov	r4, r9
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f013 0f20 	tst.w	r3, #32
 8003ce8:	d1d7      	bne.n	8003c9a <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cea:	f7fd feed 	bl	8001ac8 <HAL_GetTick>
 8003cee:	eba0 0008 	sub.w	r0, r0, r8
 8003cf2:	2819      	cmp	r0, #25
 8003cf4:	d9f4      	bls.n	8003ce0 <I2C_IsErrorOccurred+0x6a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003cf8:	f043 0320 	orr.w	r3, r3, #32
 8003cfc:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	f885 b041 	strb.w	fp, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	f885 9042 	strb.w	r9, [r5, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8003d06:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
              status = HAL_ERROR;
 8003d0a:	2401      	movs	r4, #1
 8003d0c:	e7e8      	b.n	8003ce0 <I2C_IsErrorOccurred+0x6a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d0e:	6853      	ldr	r3, [r2, #4]
 8003d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d14:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8003d16:	f7fd fed7 	bl	8001ac8 <HAL_GetTick>
 8003d1a:	4680      	mov	r8, r0
 8003d1c:	e7df      	b.n	8003cde <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	d13f      	bne.n	8003da2 <I2C_IsErrorOccurred+0x12c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d22:	2320      	movs	r3, #32
 8003d24:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003d26:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003d28:	2401      	movs	r4, #1
 8003d2a:	e000      	b.n	8003d2e <I2C_IsErrorOccurred+0xb8>
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2400      	movs	r4, #0
  itflag = hi2c->Instance->ISR;
 8003d2e:	682a      	ldr	r2, [r5, #0]
 8003d30:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d36:	d005      	beq.n	8003d44 <I2C_IsErrorOccurred+0xce>
    error_code |= HAL_I2C_ERROR_BERR;
 8003d38:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d40:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8003d42:	2401      	movs	r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d44:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d48:	d02d      	beq.n	8003da6 <I2C_IsErrorOccurred+0x130>
    error_code |= HAL_I2C_ERROR_OVR;
 8003d4a:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d4e:	682a      	ldr	r2, [r5, #0]
 8003d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d54:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d56:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d5a:	d005      	beq.n	8003d68 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d5c:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d66:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7ff ff23 	bl	8003bb4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003d6e:	682a      	ldr	r2, [r5, #0]
 8003d70:	6853      	ldr	r3, [r2, #4]
 8003d72:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003d76:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003d7a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003d84:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003d86:	431f      	orrs	r7, r3
 8003d88:	646f      	str	r7, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003d96:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8003d9a:	2401      	movs	r4, #1
}
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8003da2:	2704      	movs	r7, #4
 8003da4:	e7c3      	b.n	8003d2e <I2C_IsErrorOccurred+0xb8>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003da6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003daa:	d1d7      	bne.n	8003d5c <I2C_IsErrorOccurred+0xe6>
  if (status != HAL_OK)
 8003dac:	2c00      	cmp	r4, #0
 8003dae:	d0f5      	beq.n	8003d9c <I2C_IsErrorOccurred+0x126>
 8003db0:	e7da      	b.n	8003d68 <I2C_IsErrorOccurred+0xf2>

08003db2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003db2:	b570      	push	{r4, r5, r6, lr}
 8003db4:	4604      	mov	r4, r0
 8003db6:	460d      	mov	r5, r1
 8003db8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f013 0f02 	tst.w	r3, #2
 8003dc2:	d11d      	bne.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	4632      	mov	r2, r6
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f7ff ff54 	bl	8003c76 <I2C_IsErrorOccurred>
 8003dce:	b9c8      	cbnz	r0, 8003e04 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003dd0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dd4:	d0f1      	beq.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fd fe77 	bl	8001ac8 <HAL_GetTick>
 8003dda:	1b80      	subs	r0, r0, r6
 8003ddc:	42a8      	cmp	r0, r5
 8003dde:	d801      	bhi.n	8003de4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	d1ea      	bne.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	2320      	movs	r3, #32
 8003dee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003df8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	e000      	b.n	8003e02 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003e00:	2000      	movs	r0, #0
}
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003e04:	2001      	movs	r0, #1
 8003e06:	e7fc      	b.n	8003e02 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003e08 <I2C_WaitOnFlagUntilTimeout>:
{
 8003e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0c:	4680      	mov	r8, r0
 8003e0e:	460f      	mov	r7, r1
 8003e10:	4616      	mov	r6, r2
 8003e12:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	f8d8 3000 	ldr.w	r3, [r8]
 8003e18:	699c      	ldr	r4, [r3, #24]
 8003e1a:	ea37 0204 	bics.w	r2, r7, r4
 8003e1e:	bf0c      	ite	eq
 8003e20:	2401      	moveq	r4, #1
 8003e22:	2400      	movne	r4, #0
 8003e24:	42b4      	cmp	r4, r6
 8003e26:	d11a      	bne.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003e28:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e2c:	d0f4      	beq.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fd fe4b 	bl	8001ac8 <HAL_GetTick>
 8003e32:	9b06      	ldr	r3, [sp, #24]
 8003e34:	1ac0      	subs	r0, r0, r3
 8003e36:	42a8      	cmp	r0, r5
 8003e38:	d801      	bhi.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x36>
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	d1ea      	bne.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e3e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003e42:	f043 0320 	orr.w	r3, r3, #32
 8003e46:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003e56:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	e000      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x58>
  return HAL_OK;
 8003e5e:	2000      	movs	r0, #0
}
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e64 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	4605      	mov	r5, r0
 8003e68:	460c      	mov	r4, r1
 8003e6a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f013 0f20 	tst.w	r3, #32
 8003e74:	d11a      	bne.n	8003eac <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	4632      	mov	r2, r6
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff fefb 	bl	8003c76 <I2C_IsErrorOccurred>
 8003e80:	b9b0      	cbnz	r0, 8003eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e82:	f7fd fe21 	bl	8001ac8 <HAL_GetTick>
 8003e86:	1b80      	subs	r0, r0, r6
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d801      	bhi.n	8003e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003e8c:	2c00      	cmp	r4, #0
 8003e8e:	d1ed      	bne.n	8003e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003e92:	f043 0320 	orr.w	r3, r3, #32
 8003e96:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	2320      	movs	r3, #32
 8003e9a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ea4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
}
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003eac:	2000      	movs	r0, #0
 8003eae:	e7fc      	b.n	8003eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	e7fa      	b.n	8003eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	460d      	mov	r5, r1
 8003eba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f013 0f04 	tst.w	r3, #4
 8003ec4:	d149      	bne.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff fed3 	bl	8003c76 <I2C_IsErrorOccurred>
 8003ed0:	4601      	mov	r1, r0
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d143      	bne.n	8003f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	f012 0f20 	tst.w	r2, #32
 8003ede:	d113      	bne.n	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fd fdf2 	bl	8001ac8 <HAL_GetTick>
 8003ee4:	1b80      	subs	r0, r0, r6
 8003ee6:	42a8      	cmp	r0, r5
 8003ee8:	d801      	bhi.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003eea:	2d00      	cmp	r5, #0
 8003eec:	d1e6      	bne.n	8003ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ef0:	f043 0320 	orr.w	r3, r3, #32
 8003ef4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003f02:	2101      	movs	r1, #1
}
 8003f04:	4608      	mov	r0, r1
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	f012 0f04 	tst.w	r2, #4
 8003f0e:	d002      	beq.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003f10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	d1f6      	bne.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	f012 0f10 	tst.w	r2, #16
 8003f1c:	d01a      	beq.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1e:	2210      	movs	r2, #16
 8003f20:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003f22:	2304      	movs	r3, #4
 8003f24:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003f2c:	6821      	ldr	r1, [r4, #0]
 8003f2e:	684b      	ldr	r3, [r1, #4]
 8003f30:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003f34:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003f38:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003f4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003f50:	2101      	movs	r1, #1
 8003f52:	e7d7      	b.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	6463      	str	r3, [r4, #68]	; 0x44
 8003f58:	e7e5      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	e7d2      	b.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8003f5e:	2101      	movs	r1, #1
 8003f60:	e7d0      	b.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
	...

08003f64 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d053      	beq.n	8004010 <HAL_I2C_Init+0xac>
{
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d043      	beq.n	8003ffc <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f74:	2324      	movs	r3, #36	; 0x24
 8003f76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	6813      	ldr	r3, [r2, #0]
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	6863      	ldr	r3, [r4, #4]
 8003f88:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003f8c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	6893      	ldr	r3, [r2, #8]
 8003f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f96:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f98:	68e3      	ldr	r3, [r4, #12]
 8003f9a:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f9c:	6822      	ldr	r2, [r4, #0]
 8003f9e:	68a3      	ldr	r3, [r4, #8]
 8003fa0:	bf0c      	ite	eq
 8003fa2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fa6:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8003faa:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fac:	68e3      	ldr	r3, [r4, #12]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d029      	beq.n	8004006 <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	6851      	ldr	r1, [r2, #4]
 8003fb6:	4b17      	ldr	r3, [pc, #92]	; (8004014 <HAL_I2C_Init+0xb0>)
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fbc:	6822      	ldr	r2, [r4, #0]
 8003fbe:	68d3      	ldr	r3, [r2, #12]
 8003fc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fc4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	6923      	ldr	r3, [r4, #16]
 8003fca:	6961      	ldr	r1, [r4, #20]
 8003fcc:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fce:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003fd4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	69e3      	ldr	r3, [r4, #28]
 8003fda:	6a21      	ldr	r1, [r4, #32]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fea:	2000      	movs	r0, #0
 8003fec:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ff4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003ffa:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003ffc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004000:	f7fd fb12 	bl	8001628 <HAL_I2C_MspInit>
 8004004:	e7b6      	b.n	8003f74 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	e7d0      	b.n	8003fb2 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8004010:	2001      	movs	r0, #1
}
 8004012:	4770      	bx	lr
 8004014:	02008000 	.word	0x02008000

08004018 <HAL_I2C_Master_Transmit>:
{
 8004018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	460f      	mov	r7, r1
 8004020:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004022:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004026:	b2c9      	uxtb	r1, r1
 8004028:	2920      	cmp	r1, #32
 800402a:	f040 80a8 	bne.w	800417e <HAL_I2C_Master_Transmit+0x166>
 800402e:	4604      	mov	r4, r0
 8004030:	4690      	mov	r8, r2
 8004032:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8004034:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004038:	2b01      	cmp	r3, #1
 800403a:	f000 80a4 	beq.w	8004186 <HAL_I2C_Master_Transmit+0x16e>
 800403e:	f04f 0a01 	mov.w	sl, #1
 8004042:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004046:	f7fd fd3f 	bl	8001ac8 <HAL_GetTick>
 800404a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800404c:	9000      	str	r0, [sp, #0]
 800404e:	2319      	movs	r3, #25
 8004050:	4652      	mov	r2, sl
 8004052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004056:	4620      	mov	r0, r4
 8004058:	f7ff fed6 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 800405c:	2800      	cmp	r0, #0
 800405e:	f040 8094 	bne.w	800418a <HAL_I2C_Master_Transmit+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004062:	2321      	movs	r3, #33	; 0x21
 8004064:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004068:	2310      	movs	r3, #16
 800406a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406e:	2300      	movs	r3, #0
 8004070:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004072:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004076:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800407a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800407c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2bff      	cmp	r3, #255	; 0xff
 8004082:	d947      	bls.n	8004114 <HAL_I2C_Master_Transmit+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004084:	22ff      	movs	r2, #255	; 0xff
 8004086:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <HAL_I2C_Master_Transmit+0x184>)
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004090:	4639      	mov	r1, r7
 8004092:	4620      	mov	r0, r4
 8004094:	f7ff fd9f 	bl	8003bd6 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004098:	f04f 0800 	mov.w	r8, #0
 800409c:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040a0:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 80040a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d04c      	beq.n	8004146 <HAL_I2C_Master_Transmit+0x12e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ac:	462a      	mov	r2, r5
 80040ae:	4631      	mov	r1, r6
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7ff fe7e 	bl	8003db2 <I2C_WaitOnTXISFlagUntilTimeout>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d169      	bne.n	800418e <HAL_I2C_Master_Transmit+0x176>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040be:	7812      	ldrb	r2, [r2, #0]
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80040c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c4:	3301      	adds	r3, #1
 80040c6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80040d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040da:	b292      	uxth	r2, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e1      	bne.n	80040a4 <HAL_I2C_Master_Transmit+0x8c>
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d0df      	beq.n	80040a4 <HAL_I2C_Master_Transmit+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040e4:	9500      	str	r5, [sp, #0]
 80040e6:	4633      	mov	r3, r6
 80040e8:	4642      	mov	r2, r8
 80040ea:	4649      	mov	r1, r9
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff fe8b 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d14d      	bne.n	8004192 <HAL_I2C_Master_Transmit+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2bff      	cmp	r3, #255	; 0xff
 80040fc:	d917      	bls.n	800412e <HAL_I2C_Master_Transmit+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fe:	22ff      	movs	r2, #255	; 0xff
 8004100:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004102:	f8cd 8000 	str.w	r8, [sp]
 8004106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800410a:	4639      	mov	r1, r7
 800410c:	4620      	mov	r0, r4
 800410e:	f7ff fd62 	bl	8003bd6 <I2C_TransferConfig>
 8004112:	e7c7      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8004114:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004116:	b292      	uxth	r2, r2
 8004118:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_I2C_Master_Transmit+0x184>)
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	4639      	mov	r1, r7
 8004126:	4620      	mov	r0, r4
 8004128:	f7ff fd55 	bl	8003bd6 <I2C_TransferConfig>
 800412c:	e7b4      	b.n	8004098 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 800412e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004130:	b292      	uxth	r2, r2
 8004132:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004134:	f8cd 8000 	str.w	r8, [sp]
 8004138:	4653      	mov	r3, sl
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	4639      	mov	r1, r7
 800413e:	4620      	mov	r0, r4
 8004140:	f7ff fd49 	bl	8003bd6 <I2C_TransferConfig>
 8004144:	e7ae      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004146:	462a      	mov	r2, r5
 8004148:	4631      	mov	r1, r6
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff fe8a 	bl	8003e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004150:	bb08      	cbnz	r0, 8004196 <HAL_I2C_Master_Transmit+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004158:	6821      	ldr	r1, [r4, #0]
 800415a:	684b      	ldr	r3, [r1, #4]
 800415c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004160:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004164:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004172:	2300      	movs	r3, #0
 8004174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004178:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800417c:	e000      	b.n	8004180 <HAL_I2C_Master_Transmit+0x168>
    return HAL_BUSY;
 800417e:	2002      	movs	r0, #2
}
 8004180:	b002      	add	sp, #8
 8004182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004186:	2002      	movs	r0, #2
 8004188:	e7fa      	b.n	8004180 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 800418a:	2001      	movs	r0, #1
 800418c:	e7f8      	b.n	8004180 <HAL_I2C_Master_Transmit+0x168>
        return HAL_ERROR;
 800418e:	2001      	movs	r0, #1
 8004190:	e7f6      	b.n	8004180 <HAL_I2C_Master_Transmit+0x168>
          return HAL_ERROR;
 8004192:	2001      	movs	r0, #1
 8004194:	e7f4      	b.n	8004180 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 8004196:	2001      	movs	r0, #1
 8004198:	e7f2      	b.n	8004180 <HAL_I2C_Master_Transmit+0x168>
 800419a:	bf00      	nop
 800419c:	80002000 	.word	0x80002000

080041a0 <HAL_I2C_Master_Receive>:
{
 80041a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	460f      	mov	r7, r1
 80041a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041aa:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80041ae:	b2c9      	uxtb	r1, r1
 80041b0:	2920      	cmp	r1, #32
 80041b2:	f040 80a8 	bne.w	8004306 <HAL_I2C_Master_Receive+0x166>
 80041b6:	4604      	mov	r4, r0
 80041b8:	4690      	mov	r8, r2
 80041ba:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80041bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f000 80a4 	beq.w	800430e <HAL_I2C_Master_Receive+0x16e>
 80041c6:	f04f 0a01 	mov.w	sl, #1
 80041ca:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80041ce:	f7fd fc7b 	bl	8001ac8 <HAL_GetTick>
 80041d2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041d4:	9000      	str	r0, [sp, #0]
 80041d6:	2319      	movs	r3, #25
 80041d8:	4652      	mov	r2, sl
 80041da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041de:	4620      	mov	r0, r4
 80041e0:	f7ff fe12 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	f040 8094 	bne.w	8004312 <HAL_I2C_Master_Receive+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041ea:	2322      	movs	r3, #34	; 0x22
 80041ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041f0:	2310      	movs	r3, #16
 80041f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80041fa:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80041fe:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004202:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004204:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	2bff      	cmp	r3, #255	; 0xff
 800420a:	d947      	bls.n	800429c <HAL_I2C_Master_Receive+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004210:	4b44      	ldr	r3, [pc, #272]	; (8004324 <HAL_I2C_Master_Receive+0x184>)
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004218:	4639      	mov	r1, r7
 800421a:	4620      	mov	r0, r4
 800421c:	f7ff fcdb 	bl	8003bd6 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004220:	f04f 0800 	mov.w	r8, #0
 8004224:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004228:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 800422c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d04c      	beq.n	80042ce <HAL_I2C_Master_Receive+0x12e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004234:	462a      	mov	r2, r5
 8004236:	4631      	mov	r1, r6
 8004238:	4620      	mov	r0, r4
 800423a:	f7ff fe3b 	bl	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800423e:	2800      	cmp	r0, #0
 8004240:	d169      	bne.n	8004316 <HAL_I2C_Master_Receive+0x176>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004248:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800424a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800424c:	3301      	adds	r3, #1
 800424e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004250:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004258:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800425a:	3a01      	subs	r2, #1
 800425c:	b292      	uxth	r2, r2
 800425e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004260:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004262:	b292      	uxth	r2, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e1      	bne.n	800422c <HAL_I2C_Master_Receive+0x8c>
 8004268:	2a00      	cmp	r2, #0
 800426a:	d0df      	beq.n	800422c <HAL_I2C_Master_Receive+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800426c:	9500      	str	r5, [sp, #0]
 800426e:	4633      	mov	r3, r6
 8004270:	4642      	mov	r2, r8
 8004272:	4649      	mov	r1, r9
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff fdc7 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 800427a:	2800      	cmp	r0, #0
 800427c:	d14d      	bne.n	800431a <HAL_I2C_Master_Receive+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800427e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2bff      	cmp	r3, #255	; 0xff
 8004284:	d917      	bls.n	80042b6 <HAL_I2C_Master_Receive+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004286:	22ff      	movs	r2, #255	; 0xff
 8004288:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800428a:	f8cd 8000 	str.w	r8, [sp]
 800428e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004292:	4639      	mov	r1, r7
 8004294:	4620      	mov	r0, r4
 8004296:	f7ff fc9e 	bl	8003bd6 <I2C_TransferConfig>
 800429a:	e7c7      	b.n	800422c <HAL_I2C_Master_Receive+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 800429c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800429e:	b292      	uxth	r2, r2
 80042a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_I2C_Master_Receive+0x184>)
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	4639      	mov	r1, r7
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff fc91 	bl	8003bd6 <I2C_TransferConfig>
 80042b4:	e7b4      	b.n	8004220 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 80042b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042b8:	b292      	uxth	r2, r2
 80042ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042bc:	f8cd 8000 	str.w	r8, [sp]
 80042c0:	4653      	mov	r3, sl
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	4639      	mov	r1, r7
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff fc85 	bl	8003bd6 <I2C_TransferConfig>
 80042cc:	e7ae      	b.n	800422c <HAL_I2C_Master_Receive+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ce:	462a      	mov	r2, r5
 80042d0:	4631      	mov	r1, r6
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7ff fdc6 	bl	8003e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042d8:	bb08      	cbnz	r0, 800431e <HAL_I2C_Master_Receive+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	2220      	movs	r2, #32
 80042de:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	684b      	ldr	r3, [r1, #4]
 80042e4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80042e8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80042ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004300:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004304:	e000      	b.n	8004308 <HAL_I2C_Master_Receive+0x168>
    return HAL_BUSY;
 8004306:	2002      	movs	r0, #2
}
 8004308:	b002      	add	sp, #8
 800430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800430e:	2002      	movs	r0, #2
 8004310:	e7fa      	b.n	8004308 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 8004312:	2001      	movs	r0, #1
 8004314:	e7f8      	b.n	8004308 <HAL_I2C_Master_Receive+0x168>
        return HAL_ERROR;
 8004316:	2001      	movs	r0, #1
 8004318:	e7f6      	b.n	8004308 <HAL_I2C_Master_Receive+0x168>
          return HAL_ERROR;
 800431a:	2001      	movs	r0, #1
 800431c:	e7f4      	b.n	8004308 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 800431e:	2001      	movs	r0, #1
 8004320:	e7f2      	b.n	8004308 <HAL_I2C_Master_Receive+0x168>
 8004322:	bf00      	nop
 8004324:	80002400 	.word	0x80002400

08004328 <HAL_I2C_EV_IRQHandler>:
{
 8004328:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800432a:	6803      	ldr	r3, [r0, #0]
 800432c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800432e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004330:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004332:	b103      	cbz	r3, 8004336 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004334:	4798      	blx	r3
}
 8004336:	bd08      	pop	{r3, pc}

08004338 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004338:	4770      	bx	lr

0800433a <HAL_I2C_SlaveRxCpltCallback>:
}
 800433a:	4770      	bx	lr

0800433c <I2C_ITSlaveSeqCplt>:
{
 800433c:	b510      	push	{r4, lr}
 800433e:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004340:	6803      	ldr	r3, [r0, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	2100      	movs	r1, #0
 8004346:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800434a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800434e:	d00e      	beq.n	800436e <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004356:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004358:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b29      	cmp	r3, #41	; 0x29
 8004360:	d00d      	beq.n	800437e <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004362:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d018      	beq.n	800439e <I2C_ITSlaveSeqCplt+0x62>
}
 800436c:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800436e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004372:	d0f1      	beq.n	8004358 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e7ec      	b.n	8004358 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800437e:	2328      	movs	r3, #40	; 0x28
 8004380:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004384:	2321      	movs	r3, #33	; 0x21
 8004386:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004388:	2101      	movs	r1, #1
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff fc40 	bl	8003c10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004390:	2300      	movs	r3, #0
 8004392:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004396:	4620      	mov	r0, r4
 8004398:	f7ff ffce 	bl	8004338 <HAL_I2C_SlaveTxCpltCallback>
 800439c:	e7e6      	b.n	800436c <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800439e:	2328      	movs	r3, #40	; 0x28
 80043a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043a4:	2322      	movs	r3, #34	; 0x22
 80043a6:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043a8:	2102      	movs	r1, #2
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff fc30 	bl	8003c10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80043b0:	2300      	movs	r3, #0
 80043b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff ffbf 	bl	800433a <HAL_I2C_SlaveRxCpltCallback>
}
 80043bc:	e7d6      	b.n	800436c <I2C_ITSlaveSeqCplt+0x30>

080043be <HAL_I2C_AddrCallback>:
}
 80043be:	4770      	bx	lr

080043c0 <I2C_ITAddrCplt>:
{
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80043c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043cc:	2b28      	cmp	r3, #40	; 0x28
 80043ce:	d006      	beq.n	80043de <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043d0:	6803      	ldr	r3, [r0, #0]
 80043d2:	2208      	movs	r2, #8
 80043d4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80043dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 80043de:	6803      	ldr	r3, [r0, #0]
 80043e0:	699e      	ldr	r6, [r3, #24]
 80043e2:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	0c12      	lsrs	r2, r2, #16
 80043ea:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80043ee:	6899      	ldr	r1, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80043f0:	68df      	ldr	r7, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043f2:	68c2      	ldr	r2, [r0, #12]
 80043f4:	2a02      	cmp	r2, #2
 80043f6:	d125      	bne.n	8004444 <I2C_ITAddrCplt+0x84>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80043f8:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80043fc:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
 8004400:	f015 0f06 	tst.w	r5, #6
 8004404:	d110      	bne.n	8004428 <I2C_ITAddrCplt+0x68>
        hi2c->AddrEventCount++;
 8004406:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004408:	3101      	adds	r1, #1
 800440a:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800440c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800440e:	2902      	cmp	r1, #2
 8004410:	d1e4      	bne.n	80043dc <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004412:	2100      	movs	r1, #0
 8004414:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004416:	2008      	movs	r0, #8
 8004418:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800441a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800441e:	4631      	mov	r1, r6
 8004420:	4620      	mov	r0, r4
 8004422:	f7ff ffcc 	bl	80043be <HAL_I2C_AddrCallback>
 8004426:	e7d9      	b.n	80043dc <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800442c:	f7ff fbf0 	bl	8003c10 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004430:	2300      	movs	r3, #0
 8004432:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004436:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800443a:	4631      	mov	r1, r6
 800443c:	4620      	mov	r0, r4
 800443e:	f7ff ffbe 	bl	80043be <HAL_I2C_AddrCallback>
 8004442:	e7cb      	b.n	80043dc <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004448:	f7ff fbe2 	bl	8003c10 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004452:	462a      	mov	r2, r5
 8004454:	4631      	mov	r1, r6
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff ffb1 	bl	80043be <HAL_I2C_AddrCallback>
 800445c:	e7be      	b.n	80043dc <I2C_ITAddrCplt+0x1c>

0800445e <HAL_I2C_ListenCpltCallback>:
}
 800445e:	4770      	bx	lr

08004460 <I2C_ITListenCplt>:
{
 8004460:	b510      	push	{r4, lr}
 8004462:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <I2C_ITListenCplt+0x64>)
 8004466:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004468:	2300      	movs	r3, #0
 800446a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800446c:	2220      	movs	r2, #32
 800446e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004476:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004478:	f011 0f04 	tst.w	r1, #4
 800447c:	d012      	beq.n	80044a4 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800447e:	6803      	ldr	r3, [r0, #0]
 8004480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004482:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004484:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004486:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004488:	3301      	adds	r3, #1
 800448a:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800448c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800448e:	b14b      	cbz	r3, 80044a4 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8004490:	3b01      	subs	r3, #1
 8004492:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004494:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004496:	3b01      	subs	r3, #1
 8004498:	b29b      	uxth	r3, r3
 800449a:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800449c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800449e:	f043 0304 	orr.w	r3, r3, #4
 80044a2:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80044a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80044a8:	4620      	mov	r0, r4
 80044aa:	f7ff fbb1 	bl	8003c10 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	2210      	movs	r2, #16
 80044b2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80044b4:	2300      	movs	r3, #0
 80044b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7ff ffcf 	bl	800445e <HAL_I2C_ListenCpltCallback>
}
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	ffff0000 	.word	0xffff0000

080044c8 <HAL_I2C_ErrorCallback>:
}
 80044c8:	4770      	bx	lr

080044ca <HAL_I2C_AbortCpltCallback>:
}
 80044ca:	4770      	bx	lr

080044cc <I2C_TreatErrorCallback>:
{
 80044cc:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b60      	cmp	r3, #96	; 0x60
 80044d6:	d006      	beq.n	80044e6 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80044d8:	2300      	movs	r3, #0
 80044da:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80044e0:	f7ff fff2 	bl	80044c8 <HAL_I2C_ErrorCallback>
}
 80044e4:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	2320      	movs	r3, #32
 80044e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80044f4:	f7ff ffe9 	bl	80044ca <HAL_I2C_AbortCpltCallback>
 80044f8:	e7f4      	b.n	80044e4 <I2C_TreatErrorCallback+0x18>
	...

080044fc <I2C_ITError>:
{
 80044fc:	b510      	push	{r4, lr}
 80044fe:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004500:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004504:	2000      	movs	r0, #0
 8004506:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800450a:	4a3b      	ldr	r2, [pc, #236]	; (80045f8 <I2C_ITError+0xfc>)
 800450c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800450e:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004510:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004512:	430a      	orrs	r2, r1
 8004514:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004516:	3b28      	subs	r3, #40	; 0x28
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d819      	bhi.n	8004552 <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800451e:	2103      	movs	r1, #3
 8004520:	4620      	mov	r0, r4
 8004522:	f7ff fb75 	bl	8003c10 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004526:	2328      	movs	r3, #40	; 0x28
 8004528:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <I2C_ITError+0x100>)
 800452e:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004530:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004532:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004534:	b11a      	cbz	r2, 800453e <I2C_ITError+0x42>
 8004536:	2b11      	cmp	r3, #17
 8004538:	d01b      	beq.n	8004572 <I2C_ITError+0x76>
 800453a:	2b21      	cmp	r3, #33	; 0x21
 800453c:	d019      	beq.n	8004572 <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800453e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004540:	b11a      	cbz	r2, 800454a <I2C_ITError+0x4e>
 8004542:	2b12      	cmp	r3, #18
 8004544:	d036      	beq.n	80045b4 <I2C_ITError+0xb8>
 8004546:	2b22      	cmp	r3, #34	; 0x22
 8004548:	d034      	beq.n	80045b4 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 800454a:	4620      	mov	r0, r4
 800454c:	f7ff ffbe 	bl	80044cc <I2C_TreatErrorCallback>
}
 8004550:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004552:	f248 0103 	movw	r1, #32771	; 0x8003
 8004556:	4620      	mov	r0, r4
 8004558:	f7ff fb5a 	bl	8003c10 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800455c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b60      	cmp	r3, #96	; 0x60
 8004564:	d002      	beq.n	800456c <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004566:	2320      	movs	r3, #32
 8004568:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	6363      	str	r3, [r4, #52]	; 0x34
 8004570:	e7de      	b.n	8004530 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800457a:	d003      	beq.n	8004584 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004582:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004584:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004586:	f7fd feb5 	bl	80022f4 <HAL_DMA_GetState>
 800458a:	2801      	cmp	r0, #1
 800458c:	d00e      	beq.n	80045ac <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800458e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <I2C_ITError+0x104>)
 8004592:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004594:	2300      	movs	r3, #0
 8004596:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800459a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800459c:	f7fd fda8 	bl	80020f0 <HAL_DMA_Abort_IT>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d0d5      	beq.n	8004550 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80045a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80045a8:	4798      	blx	r3
 80045aa:	e7d1      	b.n	8004550 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80045ac:	4620      	mov	r0, r4
 80045ae:	f7ff ff8d 	bl	80044cc <I2C_TreatErrorCallback>
 80045b2:	e7cd      	b.n	8004550 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80045bc:	d003      	beq.n	80045c6 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045c8:	f7fd fe94 	bl	80022f4 <HAL_DMA_GetState>
 80045cc:	2801      	cmp	r0, #1
 80045ce:	d00e      	beq.n	80045ee <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045d2:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <I2C_ITError+0x104>)
 80045d4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80045d6:	2300      	movs	r3, #0
 80045d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045de:	f7fd fd87 	bl	80020f0 <HAL_DMA_Abort_IT>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d0b4      	beq.n	8004550 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80045ea:	4798      	blx	r3
 80045ec:	e7b0      	b.n	8004550 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7ff ff6c 	bl	80044cc <I2C_TreatErrorCallback>
 80045f4:	e7ac      	b.n	8004550 <I2C_ITError+0x54>
 80045f6:	bf00      	nop
 80045f8:	ffff0000 	.word	0xffff0000
 80045fc:	08004765 	.word	0x08004765
 8004600:	0800492f 	.word	0x0800492f

08004604 <I2C_ITSlaveCplt>:
{
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	4604      	mov	r4, r0
 8004608:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800460a:	6802      	ldr	r2, [r0, #0]
 800460c:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800460e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004612:	2120      	movs	r1, #32
 8004614:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004616:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800461a:	2b21      	cmp	r3, #33	; 0x21
 800461c:	d058      	beq.n	80046d0 <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800461e:	2b22      	cmp	r3, #34	; 0x22
 8004620:	d05d      	beq.n	80046de <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004622:	6822      	ldr	r2, [r4, #0]
 8004624:	6853      	ldr	r3, [r2, #4]
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	6853      	ldr	r3, [r2, #4]
 8004630:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004634:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004638:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004642:	4620      	mov	r0, r4
 8004644:	f7ff fab6 	bl	8003bb4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004648:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800464c:	d04e      	beq.n	80046ec <I2C_ITSlaveCplt+0xe8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004656:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800465a:	b11b      	cbz	r3, 8004664 <I2C_ITSlaveCplt+0x60>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b29b      	uxth	r3, r3
 8004662:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004664:	f015 0f04 	tst.w	r5, #4
 8004668:	d010      	beq.n	800468c <I2C_ITSlaveCplt+0x88>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800466a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004674:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004678:	3301      	adds	r3, #1
 800467a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800467c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800467e:	b12b      	cbz	r3, 800468c <I2C_ITSlaveCplt+0x88>
      hi2c->XferSize--;
 8004680:	3b01      	subs	r3, #1
 8004682:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004684:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004686:	3b01      	subs	r3, #1
 8004688:	b29b      	uxth	r3, r3
 800468a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800468c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	b11b      	cbz	r3, 800469a <I2C_ITSlaveCplt+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004692:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004694:	f043 0304 	orr.w	r3, r3, #4
 8004698:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	2300      	movs	r3, #0
 800469c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80046a0:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d131      	bne.n	800470c <I2C_ITSlaveCplt+0x108>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ae:	d13b      	bne.n	8004728 <I2C_ITSlaveCplt+0x124>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b22      	cmp	r3, #34	; 0x22
 80046b8:	d046      	beq.n	8004748 <I2C_ITSlaveCplt+0x144>
    hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	2320      	movs	r3, #32
 80046bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff fe35 	bl	8004338 <HAL_I2C_SlaveTxCpltCallback>
}
 80046ce:	e03a      	b.n	8004746 <I2C_ITSlaveCplt+0x142>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80046d0:	f248 0101 	movw	r1, #32769	; 0x8001
 80046d4:	f7ff fa9c 	bl	8003c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046d8:	2321      	movs	r3, #33	; 0x21
 80046da:	6323      	str	r3, [r4, #48]	; 0x30
 80046dc:	e7a1      	b.n	8004622 <I2C_ITSlaveCplt+0x1e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80046de:	f248 0102 	movw	r1, #32770	; 0x8002
 80046e2:	f7ff fa95 	bl	8003c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046e6:	2322      	movs	r3, #34	; 0x22
 80046e8:	6323      	str	r3, [r4, #48]	; 0x30
 80046ea:	e79a      	b.n	8004622 <I2C_ITSlaveCplt+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80046ec:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80046f0:	d0b8      	beq.n	8004664 <I2C_ITSlaveCplt+0x60>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046fa:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 80046fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0b0      	beq.n	8004664 <I2C_ITSlaveCplt+0x60>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b29b      	uxth	r3, r3
 8004708:	8563      	strh	r3, [r4, #42]	; 0x2a
 800470a:	e7ab      	b.n	8004664 <I2C_ITSlaveCplt+0x60>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800470c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800470e:	4620      	mov	r0, r4
 8004710:	f7ff fef4 	bl	80044fc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004714:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b28      	cmp	r3, #40	; 0x28
 800471c:	d113      	bne.n	8004746 <I2C_ITSlaveCplt+0x142>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800471e:	4629      	mov	r1, r5
 8004720:	4620      	mov	r0, r4
 8004722:	f7ff fe9d 	bl	8004460 <I2C_ITListenCplt>
 8004726:	e00e      	b.n	8004746 <I2C_ITSlaveCplt+0x142>
    I2C_ITSlaveSeqCplt(hi2c);
 8004728:	4620      	mov	r0, r4
 800472a:	f7ff fe07 	bl	800433c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <I2C_ITSlaveCplt+0x15c>)
 8004730:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004732:	2320      	movs	r3, #32
 8004734:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	2300      	movs	r3, #0
 800473a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800473c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff fe8c 	bl	800445e <HAL_I2C_ListenCpltCallback>
}
 8004746:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004748:	2320      	movs	r3, #32
 800474a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800474e:	2300      	movs	r3, #0
 8004750:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004752:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004756:	4620      	mov	r0, r4
 8004758:	f7ff fdef 	bl	800433a <HAL_I2C_SlaveRxCpltCallback>
 800475c:	e7f3      	b.n	8004746 <I2C_ITSlaveCplt+0x142>
 800475e:	bf00      	nop
 8004760:	ffff0000 	.word	0xffff0000

08004764 <I2C_Slave_ISR_IT>:
{
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8004766:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8004768:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800476c:	2b01      	cmp	r3, #1
 800476e:	f000 8099 	beq.w	80048a4 <I2C_Slave_ISR_IT+0x140>
 8004772:	4604      	mov	r4, r0
 8004774:	460d      	mov	r5, r1
 8004776:	4616      	mov	r6, r2
 8004778:	2301      	movs	r3, #1
 800477a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800477e:	f011 0f20 	tst.w	r1, #32
 8004782:	d002      	beq.n	800478a <I2C_Slave_ISR_IT+0x26>
 8004784:	f012 0f20 	tst.w	r2, #32
 8004788:	d11f      	bne.n	80047ca <I2C_Slave_ISR_IT+0x66>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800478a:	f015 0f10 	tst.w	r5, #16
 800478e:	d03d      	beq.n	800480c <I2C_Slave_ISR_IT+0xa8>
 8004790:	f016 0f10 	tst.w	r6, #16
 8004794:	d03a      	beq.n	800480c <I2C_Slave_ISR_IT+0xa8>
    if (hi2c->XferCount == 0U)
 8004796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	bb43      	cbnz	r3, 80047ee <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800479c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80047a6:	d101      	bne.n	80047ac <I2C_Slave_ISR_IT+0x48>
 80047a8:	2b28      	cmp	r3, #40	; 0x28
 80047aa:	d011      	beq.n	80047d0 <I2C_Slave_ISR_IT+0x6c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047ac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80047b6:	d001      	beq.n	80047bc <I2C_Slave_ISR_IT+0x58>
 80047b8:	2b29      	cmp	r3, #41	; 0x29
 80047ba:	d00e      	beq.n	80047da <I2C_Slave_ISR_IT+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	2210      	movs	r2, #16
 80047c0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80047c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80047ca:	f7ff ff1b 	bl	8004604 <I2C_ITSlaveCplt>
 80047ce:	e7dc      	b.n	800478a <I2C_Slave_ISR_IT+0x26>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80047d0:	4629      	mov	r1, r5
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7ff fe44 	bl	8004460 <I2C_ITListenCplt>
 80047d8:	e7f3      	b.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	2210      	movs	r2, #16
 80047de:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff f9e7 	bl	8003bb4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7ff fda8 	bl	800433c <I2C_ITSlaveSeqCplt>
 80047ec:	e7e9      	b.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	2210      	movs	r2, #16
 80047f2:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047f6:	f043 0304 	orr.w	r3, r3, #4
 80047fa:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80047fc:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8004800:	d1df      	bne.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004802:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004804:	4620      	mov	r0, r4
 8004806:	f7ff fe79 	bl	80044fc <I2C_ITError>
 800480a:	e7da      	b.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800480c:	f015 0f04 	tst.w	r5, #4
 8004810:	d01e      	beq.n	8004850 <I2C_Slave_ISR_IT+0xec>
 8004812:	f016 0f04 	tst.w	r6, #4
 8004816:	d01b      	beq.n	8004850 <I2C_Slave_ISR_IT+0xec>
    if (hi2c->XferCount > 0U)
 8004818:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	b16b      	cbz	r3, 800483a <I2C_Slave_ISR_IT+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004824:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004828:	3301      	adds	r3, #1
 800482a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800482c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800482e:	3b01      	subs	r3, #1
 8004830:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004832:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004834:	3b01      	subs	r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800483a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8004842:	d0be      	beq.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1bc      	bne.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
      I2C_ITSlaveSeqCplt(hi2c);
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff fd77 	bl	800433c <I2C_ITSlaveSeqCplt>
 800484e:	e7b8      	b.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004850:	f015 0f08 	tst.w	r5, #8
 8004854:	d002      	beq.n	800485c <I2C_Slave_ISR_IT+0xf8>
 8004856:	f016 0f08 	tst.w	r6, #8
 800485a:	d117      	bne.n	800488c <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800485c:	f015 0f02 	tst.w	r5, #2
 8004860:	d0af      	beq.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
 8004862:	f016 0f02 	tst.w	r6, #2
 8004866:	d0ac      	beq.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount > 0U)
 8004868:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	b19b      	cbz	r3, 8004896 <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004878:	3301      	adds	r3, #1
 800487a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800487c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800487e:	3b01      	subs	r3, #1
 8004880:	b29b      	uxth	r3, r3
 8004882:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004884:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004886:	3b01      	subs	r3, #1
 8004888:	8523      	strh	r3, [r4, #40]	; 0x28
 800488a:	e79a      	b.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800488c:	4629      	mov	r1, r5
 800488e:	4620      	mov	r0, r4
 8004890:	f7ff fd96 	bl	80043c0 <I2C_ITAddrCplt>
 8004894:	e795      	b.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004896:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 800489a:	d192      	bne.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
        I2C_ITSlaveSeqCplt(hi2c);
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff fd4d 	bl	800433c <I2C_ITSlaveSeqCplt>
 80048a2:	e78e      	b.n	80047c2 <I2C_Slave_ISR_IT+0x5e>
  __HAL_LOCK(hi2c);
 80048a4:	2002      	movs	r0, #2
 80048a6:	e78f      	b.n	80047c8 <I2C_Slave_ISR_IT+0x64>

080048a8 <HAL_I2C_ER_IRQHandler>:
{
 80048a8:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048aa:	6802      	ldr	r2, [r0, #0]
 80048ac:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048ae:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048b4:	d010      	beq.n	80048d8 <HAL_I2C_ER_IRQHandler+0x30>
 80048b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80048ba:	d02e      	beq.n	800491a <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048bc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80048be:	f041 0101 	orr.w	r1, r1, #1
 80048c2:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048c8:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80048ce:	d109      	bne.n	80048e4 <HAL_I2C_ER_IRQHandler+0x3c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80048d0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80048d4:	d111      	bne.n	80048fa <HAL_I2C_ER_IRQHandler+0x52>
 80048d6:	e018      	b.n	800490a <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80048dc:	d020      	beq.n	8004920 <HAL_I2C_ER_IRQHandler+0x78>
 80048de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80048e2:	d012      	beq.n	800490a <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80048e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048e6:	f042 0208 	orr.w	r2, r2, #8
 80048ea:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048ec:	6802      	ldr	r2, [r0, #0]
 80048ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048f2:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80048f4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80048f8:	d007      	beq.n	800490a <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80048fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004908:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800490a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800490c:	f011 0f0b 	tst.w	r1, #11
 8004910:	d100      	bne.n	8004914 <HAL_I2C_ER_IRQHandler+0x6c>
}
 8004912:	bd08      	pop	{r3, pc}
    I2C_ITError(hi2c, tmperror);
 8004914:	f7ff fdf2 	bl	80044fc <I2C_ITError>
}
 8004918:	e7fb      	b.n	8004912 <HAL_I2C_ER_IRQHandler+0x6a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800491a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800491e:	d1f4      	bne.n	800490a <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004920:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004924:	d0f1      	beq.n	800490a <HAL_I2C_ER_IRQHandler+0x62>
 8004926:	f011 0f80 	tst.w	r1, #128	; 0x80
 800492a:	d0ee      	beq.n	800490a <HAL_I2C_ER_IRQHandler+0x62>
 800492c:	e7e5      	b.n	80048fa <HAL_I2C_ER_IRQHandler+0x52>

0800492e <I2C_DMAAbort>:
{
 800492e:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004930:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8004932:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004934:	b10b      	cbz	r3, 800493a <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004936:	2200      	movs	r2, #0
 8004938:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 800493a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800493c:	b10b      	cbz	r3, 8004942 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800493e:	2200      	movs	r2, #0
 8004940:	651a      	str	r2, [r3, #80]	; 0x50
  I2C_TreatErrorCallback(hi2c);
 8004942:	f7ff fdc3 	bl	80044cc <I2C_TreatErrorCallback>
}
 8004946:	bd08      	pop	{r3, pc}

08004948 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b20      	cmp	r3, #32
 8004950:	d124      	bne.n	800499c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004952:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004956:	2b01      	cmp	r3, #1
 8004958:	d022      	beq.n	80049a0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800495a:	2301      	movs	r3, #1
 800495c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004960:	2324      	movs	r3, #36	; 0x24
 8004962:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004966:	6802      	ldr	r2, [r0, #0]
 8004968:	6813      	ldr	r3, [r2, #0]
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004970:	6802      	ldr	r2, [r0, #0]
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004978:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800497a:	6802      	ldr	r2, [r0, #0]
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	4319      	orrs	r1, r3
 8004980:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004982:	6802      	ldr	r2, [r0, #0]
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498c:	2320      	movs	r3, #32
 800498e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004992:	2300      	movs	r3, #0
 8004994:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004998:	4618      	mov	r0, r3
 800499a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800499c:	2002      	movs	r0, #2
 800499e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80049a0:	2002      	movs	r0, #2
  }
}
 80049a2:	4770      	bx	lr

080049a4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d122      	bne.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d020      	beq.n	80049f8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80049b6:	2301      	movs	r3, #1
 80049b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049bc:	2324      	movs	r3, #36	; 0x24
 80049be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c2:	6802      	ldr	r2, [r0, #0]
 80049c4:	6813      	ldr	r3, [r2, #0]
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049cc:	6802      	ldr	r2, [r0, #0]
 80049ce:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049d4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049d8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049da:	6802      	ldr	r2, [r0, #0]
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	2320      	movs	r3, #32
 80049e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80049f0:	4618      	mov	r0, r3
 80049f2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2002      	movs	r0, #2
 80049f6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80049f8:	2002      	movs	r0, #2
  }
}
 80049fa:	4770      	bx	lr

080049fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049fc:	b530      	push	{r4, r5, lr}
 80049fe:	b083      	sub	sp, #12
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_PWREx_EnableOverDrive+0x74>)
 8004a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a14:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_PWREx_EnableOverDrive+0x78>)
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a1e:	f7fd f853 	bl	8001ac8 <HAL_GetTick>
 8004a22:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a24:	4d13      	ldr	r5, [pc, #76]	; (8004a74 <HAL_PWREx_EnableOverDrive+0x78>)
 8004a26:	686b      	ldr	r3, [r5, #4]
 8004a28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a2c:	d108      	bne.n	8004a40 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a2e:	f7fd f84b 	bl	8001ac8 <HAL_GetTick>
 8004a32:	1b00      	subs	r0, r0, r4
 8004a34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004a38:	d9f5      	bls.n	8004a26 <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 8004a3a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bd30      	pop	{r4, r5, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a40:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <HAL_PWREx_EnableOverDrive+0x78>)
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a48:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004a4a:	f7fd f83d 	bl	8001ac8 <HAL_GetTick>
 8004a4e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a50:	4d08      	ldr	r5, [pc, #32]	; (8004a74 <HAL_PWREx_EnableOverDrive+0x78>)
 8004a52:	686b      	ldr	r3, [r5, #4]
 8004a54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a58:	d107      	bne.n	8004a6a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a5a:	f7fd f835 	bl	8001ac8 <HAL_GetTick>
 8004a5e:	1b00      	subs	r0, r0, r4
 8004a60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004a64:	d9f5      	bls.n	8004a52 <HAL_PWREx_EnableOverDrive+0x56>
      return HAL_TIMEOUT;
 8004a66:	2003      	movs	r0, #3
 8004a68:	e7e8      	b.n	8004a3c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e7e6      	b.n	8004a3c <HAL_PWREx_EnableOverDrive+0x40>
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40007000 	.word	0x40007000

08004a78 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	f000 8202 	beq.w	8004e82 <HAL_RCC_OscConfig+0x40a>
{
 8004a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a86:	6803      	ldr	r3, [r0, #0]
 8004a88:	f013 0f01 	tst.w	r3, #1
 8004a8c:	d029      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a8e:	4ba8      	ldr	r3, [pc, #672]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d01a      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x58>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9a:	4ba5      	ldr	r3, [pc, #660]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d00f      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aac:	d040      	beq.n	8004b30 <HAL_RCC_OscConfig+0xb8>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d154      	bne.n	8004b5c <HAL_RCC_OscConfig+0xe4>
 8004ab2:	4b9f      	ldr	r3, [pc, #636]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e039      	b.n	8004b3a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac6:	4b9a      	ldr	r3, [pc, #616]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ace:	d0ea      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	4b97      	ldr	r3, [pc, #604]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x6a>
 8004ada:	6863      	ldr	r3, [r4, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 81d2 	beq.w	8004e86 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	f013 0f02 	tst.w	r3, #2
 8004ae8:	d074      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aea:	4b91      	ldr	r3, [pc, #580]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f013 0f0c 	tst.w	r3, #12
 8004af2:	d05e      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x13a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af4:	4b8e      	ldr	r3, [pc, #568]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d053      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b00:	68e3      	ldr	r3, [r4, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8089 	beq.w	8004c1a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b08:	4a89      	ldr	r2, [pc, #548]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fc ffd9 	bl	8001ac8 <HAL_GetTick>
 8004b16:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	4e85      	ldr	r6, [pc, #532]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004b1a:	6833      	ldr	r3, [r6, #0]
 8004b1c:	f013 0f02 	tst.w	r3, #2
 8004b20:	d172      	bne.n	8004c08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b22:	f7fc ffd1 	bl	8001ac8 <HAL_GetTick>
 8004b26:	1b40      	subs	r0, r0, r5
 8004b28:	2802      	cmp	r0, #2
 8004b2a:	d9f6      	bls.n	8004b1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 8004b2c:	2003      	movs	r0, #3
 8004b2e:	e1af      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	4a7f      	ldr	r2, [pc, #508]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b3a:	6863      	ldr	r3, [r4, #4]
 8004b3c:	b32b      	cbz	r3, 8004b8a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8004b3e:	f7fc ffc3 	bl	8001ac8 <HAL_GetTick>
 8004b42:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b44:	4e7a      	ldr	r6, [pc, #488]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004b46:	6833      	ldr	r3, [r6, #0]
 8004b48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b4c:	d1c9      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b4e:	f7fc ffbb 	bl	8001ac8 <HAL_GetTick>
 8004b52:	1b40      	subs	r0, r0, r5
 8004b54:	2864      	cmp	r0, #100	; 0x64
 8004b56:	d9f6      	bls.n	8004b46 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8004b58:	2003      	movs	r0, #3
 8004b5a:	e199      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b60:	d009      	beq.n	8004b76 <HAL_RCC_OscConfig+0xfe>
 8004b62:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e7e1      	b.n	8004b3a <HAL_RCC_OscConfig+0xc2>
 8004b76:	4b6e      	ldr	r3, [pc, #440]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	e7d7      	b.n	8004b3a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004b8a:	f7fc ff9d 	bl	8001ac8 <HAL_GetTick>
 8004b8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b90:	4e67      	ldr	r6, [pc, #412]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004b92:	6833      	ldr	r3, [r6, #0]
 8004b94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b98:	d0a3      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9a:	f7fc ff95 	bl	8001ac8 <HAL_GetTick>
 8004b9e:	1b40      	subs	r0, r0, r5
 8004ba0:	2864      	cmp	r0, #100	; 0x64
 8004ba2:	d9f6      	bls.n	8004b92 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8004ba4:	2003      	movs	r0, #3
 8004ba6:	e173      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ba8:	4b61      	ldr	r3, [pc, #388]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004bb0:	d1a6      	bne.n	8004b00 <HAL_RCC_OscConfig+0x88>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb2:	4b5f      	ldr	r3, [pc, #380]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f013 0f02 	tst.w	r3, #2
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x14c>
 8004bbc:	68e3      	ldr	r3, [r4, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	f040 8163 	bne.w	8004e8a <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	6921      	ldr	r1, [r4, #16]
 8004bca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004bce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004bd2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	f013 0f08 	tst.w	r3, #8
 8004bda:	d046      	beq.n	8004c6a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bdc:	6963      	ldr	r3, [r4, #20]
 8004bde:	b383      	cbz	r3, 8004c42 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004be0:	4a53      	ldr	r2, [pc, #332]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004be2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fc ff6d 	bl	8001ac8 <HAL_GetTick>
 8004bee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf0:	4e4f      	ldr	r6, [pc, #316]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004bf2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004bf4:	f013 0f02 	tst.w	r3, #2
 8004bf8:	d137      	bne.n	8004c6a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bfa:	f7fc ff65 	bl	8001ac8 <HAL_GetTick>
 8004bfe:	1b40      	subs	r0, r0, r5
 8004c00:	2802      	cmp	r0, #2
 8004c02:	d9f6      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8004c04:	2003      	movs	r0, #3
 8004c06:	e143      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c08:	4a49      	ldr	r2, [pc, #292]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	6921      	ldr	r1, [r4, #16]
 8004c0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e7dc      	b.n	8004bd4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8004c1a:	4a45      	ldr	r2, [pc, #276]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c24:	f7fc ff50 	bl	8001ac8 <HAL_GetTick>
 8004c28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2a:	4e41      	ldr	r6, [pc, #260]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004c2c:	6833      	ldr	r3, [r6, #0]
 8004c2e:	f013 0f02 	tst.w	r3, #2
 8004c32:	d0cf      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fc ff48 	bl	8001ac8 <HAL_GetTick>
 8004c38:	1b40      	subs	r0, r0, r5
 8004c3a:	2802      	cmp	r0, #2
 8004c3c:	d9f6      	bls.n	8004c2c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8004c3e:	2003      	movs	r0, #3
 8004c40:	e126      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c42:	4a3b      	ldr	r2, [pc, #236]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004c44:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fc ff3c 	bl	8001ac8 <HAL_GetTick>
 8004c50:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c52:	4e37      	ldr	r6, [pc, #220]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004c54:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004c56:	f013 0f02 	tst.w	r3, #2
 8004c5a:	d006      	beq.n	8004c6a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c5c:	f7fc ff34 	bl	8001ac8 <HAL_GetTick>
 8004c60:	1b40      	subs	r0, r0, r5
 8004c62:	2802      	cmp	r0, #2
 8004c64:	d9f6      	bls.n	8004c54 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8004c66:	2003      	movs	r0, #3
 8004c68:	e112      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	f013 0f04 	tst.w	r3, #4
 8004c70:	d07e      	beq.n	8004d70 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c72:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x21c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c90:	2501      	movs	r5, #1
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x21e>
  FlagStatus pwrclkchanged = RESET;
 8004c94:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_RCC_OscConfig+0x2bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c9e:	d00e      	beq.n	8004cbe <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca0:	68a3      	ldr	r3, [r4, #8]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d01f      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x26e>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d135      	bne.n	8004d16 <HAL_RCC_OscConfig+0x29e>
 8004caa:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	671a      	str	r2, [r3, #112]	; 0x70
 8004cb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	671a      	str	r2, [r3, #112]	; 0x70
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCC_OscConfig+0x278>
      PWR->CR1 |= PWR_CR1_DBP;
 8004cbe:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x2bc>)
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004cc8:	f7fc fefe 	bl	8001ac8 <HAL_GetTick>
 8004ccc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cce:	4f19      	ldr	r7, [pc, #100]	; (8004d34 <HAL_RCC_OscConfig+0x2bc>)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cd6:	d1e3      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd8:	f7fc fef6 	bl	8001ac8 <HAL_GetTick>
 8004cdc:	1b80      	subs	r0, r0, r6
 8004cde:	2864      	cmp	r0, #100	; 0x64
 8004ce0:	d9f6      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004ce2:	2003      	movs	r0, #3
 8004ce4:	e0d4      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce6:	4a12      	ldr	r2, [pc, #72]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004ce8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf0:	68a3      	ldr	r3, [r4, #8]
 8004cf2:	b35b      	cbz	r3, 8004d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fc fee8 	bl	8001ac8 <HAL_GetTick>
 8004cf8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	4f0d      	ldr	r7, [pc, #52]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d02:	f013 0f02 	tst.w	r3, #2
 8004d06:	d132      	bne.n	8004d6e <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fc fede 	bl	8001ac8 <HAL_GetTick>
 8004d0c:	1b80      	subs	r0, r0, r6
 8004d0e:	4540      	cmp	r0, r8
 8004d10:	d9f6      	bls.n	8004d00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004d12:	2003      	movs	r0, #3
 8004d14:	e0bc      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d00e      	beq.n	8004d38 <HAL_RCC_OscConfig+0x2c0>
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_OscConfig+0x2b8>)
 8004d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	671a      	str	r2, [r3, #112]	; 0x70
 8004d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	671a      	str	r2, [r3, #112]	; 0x70
 8004d2c:	e7e0      	b.n	8004cf0 <HAL_RCC_OscConfig+0x278>
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40007000 	.word	0x40007000
 8004d38:	4b5c      	ldr	r3, [pc, #368]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d3c:	f042 0204 	orr.w	r2, r2, #4
 8004d40:	671a      	str	r2, [r3, #112]	; 0x70
 8004d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	671a      	str	r2, [r3, #112]	; 0x70
 8004d4a:	e7d1      	b.n	8004cf0 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fc febc 	bl	8001ac8 <HAL_GetTick>
 8004d50:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d52:	4f56      	ldr	r7, [pc, #344]	; (8004eac <HAL_RCC_OscConfig+0x434>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d5a:	f013 0f02 	tst.w	r3, #2
 8004d5e:	d006      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fc feb2 	bl	8001ac8 <HAL_GetTick>
 8004d64:	1b80      	subs	r0, r0, r6
 8004d66:	4540      	cmp	r0, r8
 8004d68:	d9f6      	bls.n	8004d58 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8004d6a:	2003      	movs	r0, #3
 8004d6c:	e090      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d6e:	b9fd      	cbnz	r5, 8004db0 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d70:	69a3      	ldr	r3, [r4, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 808b 	beq.w	8004e8e <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d78:	4a4c      	ldr	r2, [pc, #304]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004d7a:	6892      	ldr	r2, [r2, #8]
 8004d7c:	f002 020c 	and.w	r2, r2, #12
 8004d80:	2a08      	cmp	r2, #8
 8004d82:	d058      	beq.n	8004e36 <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d019      	beq.n	8004dbc <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d88:	4a48      	ldr	r2, [pc, #288]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fc fe99 	bl	8001ac8 <HAL_GetTick>
 8004d96:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d98:	4d44      	ldr	r5, [pc, #272]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004da0:	d047      	beq.n	8004e32 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da2:	f7fc fe91 	bl	8001ac8 <HAL_GetTick>
 8004da6:	1b00      	subs	r0, r0, r4
 8004da8:	2802      	cmp	r0, #2
 8004daa:	d9f6      	bls.n	8004d9a <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 8004dac:	2003      	movs	r0, #3
 8004dae:	e06f      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db0:	4a3e      	ldr	r2, [pc, #248]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004db2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dba:	e7d9      	b.n	8004d70 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8004dbc:	4a3b      	ldr	r2, [pc, #236]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dc6:	f7fc fe7f 	bl	8001ac8 <HAL_GetTick>
 8004dca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dcc:	4e37      	ldr	r6, [pc, #220]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004dce:	6833      	ldr	r3, [r6, #0]
 8004dd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004dd4:	d006      	beq.n	8004de4 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd6:	f7fc fe77 	bl	8001ac8 <HAL_GetTick>
 8004dda:	1b40      	subs	r0, r0, r5
 8004ddc:	2802      	cmp	r0, #2
 8004dde:	d9f6      	bls.n	8004dce <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8004de0:	2003      	movs	r0, #3
 8004de2:	e055      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	1e5a      	subs	r2, r3, #1
 8004dea:	69e3      	ldr	r3, [r4, #28]
 8004dec:	6a21      	ldr	r1, [r4, #32]
 8004dee:	430b      	orrs	r3, r1
 8004df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004df4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004df6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004dfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004e06:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e08:	6813      	ldr	r3, [r2, #0]
 8004e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e0e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e10:	f7fc fe5a 	bl	8001ac8 <HAL_GetTick>
 8004e14:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4d25      	ldr	r5, [pc, #148]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fc fe52 	bl	8001ac8 <HAL_GetTick>
 8004e24:	1b00      	subs	r0, r0, r4
 8004e26:	2802      	cmp	r0, #2
 8004e28:	d9f6      	bls.n	8004e18 <HAL_RCC_OscConfig+0x3a0>
            return HAL_TIMEOUT;
 8004e2a:	2003      	movs	r0, #3
 8004e2c:	e030      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004e2e:	2000      	movs	r0, #0
 8004e30:	e02e      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
 8004e32:	2000      	movs	r0, #0
 8004e34:	e02c      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
      pll_config = RCC->PLLCFGR;
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <HAL_RCC_OscConfig+0x434>)
 8004e38:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d02b      	beq.n	8004e96 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e42:	69e1      	ldr	r1, [r4, #28]
 8004e44:	428b      	cmp	r3, r1
 8004e46:	d128      	bne.n	8004e9a <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e48:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4c:	6a21      	ldr	r1, [r4, #32]
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d125      	bne.n	8004e9e <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e52:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e58:	4013      	ands	r3, r2
 8004e5a:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8004e5e:	d120      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x42a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e60:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8004e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e6a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8004e6e:	d11a      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x42e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e72:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e76:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8004e7a:	bf14      	ite	ne
 8004e7c:	2001      	movne	r0, #1
 8004e7e:	2000      	moveq	r0, #0
 8004e80:	e006      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
    return HAL_ERROR;
 8004e82:	2001      	movs	r0, #1
}
 8004e84:	4770      	bx	lr
        return HAL_ERROR;
 8004e86:	2001      	movs	r0, #1
 8004e88:	e002      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
        return HAL_ERROR;
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
  return HAL_OK;
 8004e8e:	2000      	movs	r0, #0
}
 8004e90:	b002      	add	sp, #8
 8004e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8004e96:	2001      	movs	r0, #1
 8004e98:	e7fa      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	e7f8      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e7f6      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	e7f4      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	e7f2      	b.n	8004e90 <HAL_RCC_OscConfig+0x418>
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800

08004eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d03d      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0x8a>
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d13d      	bne.n	8004f3e <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ed0:	d012      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004eda:	2300      	movs	r3, #0
 8004edc:	481a      	ldr	r0, [pc, #104]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ede:	fba1 0100 	umull	r0, r1, r1, r0
 8004ee2:	f7fb f9e5 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ee6:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004eee:	3301      	adds	r3, #1
 8004ef0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004ef2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004ef6:	e023      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef8:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004f00:	015c      	lsls	r4, r3, #5
 8004f02:	2500      	movs	r5, #0
 8004f04:	1ae4      	subs	r4, r4, r3
 8004f06:	f165 0500 	sbc.w	r5, r5, #0
 8004f0a:	01ae      	lsls	r6, r5, #6
 8004f0c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8004f10:	01a7      	lsls	r7, r4, #6
 8004f12:	1b38      	subs	r0, r7, r4
 8004f14:	eb66 0105 	sbc.w	r1, r6, r5
 8004f18:	00cc      	lsls	r4, r1, #3
 8004f1a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8004f1e:	00c5      	lsls	r5, r0, #3
 8004f20:	18e8      	adds	r0, r5, r3
 8004f22:	f144 0100 	adc.w	r1, r4, #0
 8004f26:	028b      	lsls	r3, r1, #10
 8004f28:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004f2c:	0284      	lsls	r4, r0, #10
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4619      	mov	r1, r3
 8004f32:	2300      	movs	r3, #0
 8004f34:	f7fb f9bc 	bl	80002b0 <__aeabi_uldivmod>
 8004f38:	e7d5      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f3a:	4803      	ldr	r0, [pc, #12]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f3c:	e000      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x90>
      sysclockfreq = HSI_VALUE;
 8004f3e:	4803      	ldr	r0, [pc, #12]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800
 8004f48:	017d7840 	.word	0x017d7840
 8004f4c:	00f42400 	.word	0x00f42400

08004f50 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f000 80a2 	beq.w	800509a <HAL_RCC_ClockConfig+0x14a>
{
 8004f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <HAL_RCC_ClockConfig+0x15c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	428b      	cmp	r3, r1
 8004f68:	d20b      	bcs.n	8004f82 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4a50      	ldr	r2, [pc, #320]	; (80050ac <HAL_RCC_ClockConfig+0x15c>)
 8004f6c:	6813      	ldr	r3, [r2, #0]
 8004f6e:	f023 030f 	bic.w	r3, r3, #15
 8004f72:	430b      	orrs	r3, r1
 8004f74:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	428b      	cmp	r3, r1
 8004f7e:	f040 808e 	bne.w	800509e <HAL_RCC_ClockConfig+0x14e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	f013 0f02 	tst.w	r3, #2
 8004f88:	d017      	beq.n	8004fba <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8a:	f013 0f04 	tst.w	r3, #4
 8004f8e:	d004      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f90:	4a47      	ldr	r2, [pc, #284]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 8004f92:	6893      	ldr	r3, [r2, #8]
 8004f94:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f98:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f013 0f08 	tst.w	r3, #8
 8004fa0:	d004      	beq.n	8004fac <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa2:	4a43      	ldr	r2, [pc, #268]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 8004fa4:	6893      	ldr	r3, [r2, #8]
 8004fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004faa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4a40      	ldr	r2, [pc, #256]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 8004fae:	6893      	ldr	r3, [r2, #8]
 8004fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb4:	68a1      	ldr	r1, [r4, #8]
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	f013 0f01 	tst.w	r3, #1
 8004fc0:	d031      	beq.n	8005026 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc2:	6862      	ldr	r2, [r4, #4]
 8004fc4:	2a01      	cmp	r2, #1
 8004fc6:	d020      	beq.n	800500a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fc8:	2a02      	cmp	r2, #2
 8004fca:	d025      	beq.n	8005018 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fcc:	4b38      	ldr	r3, [pc, #224]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f013 0f02 	tst.w	r3, #2
 8004fd4:	d065      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd6:	4936      	ldr	r1, [pc, #216]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 8004fd8:	688b      	ldr	r3, [r1, #8]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004fe2:	f7fc fd71 	bl	8001ac8 <HAL_GetTick>
 8004fe6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe8:	4f31      	ldr	r7, [pc, #196]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004ffa:	d014      	beq.n	8005026 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7fc fd64 	bl	8001ac8 <HAL_GetTick>
 8005000:	1b80      	subs	r0, r0, r6
 8005002:	4540      	cmp	r0, r8
 8005004:	d9f3      	bls.n	8004fee <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8005006:	2003      	movs	r0, #3
 8005008:	e045      	b.n	8005096 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005012:	d1e0      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8005014:	2001      	movs	r0, #1
 8005016:	e03e      	b.n	8005096 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005020:	d1d9      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8005022:	2001      	movs	r0, #1
 8005024:	e037      	b.n	8005096 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005026:	4b21      	ldr	r3, [pc, #132]	; (80050ac <HAL_RCC_ClockConfig+0x15c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	42ab      	cmp	r3, r5
 8005030:	d90a      	bls.n	8005048 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_RCC_ClockConfig+0x15c>)
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	f023 030f 	bic.w	r3, r3, #15
 800503a:	432b      	orrs	r3, r5
 800503c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	42ab      	cmp	r3, r5
 8005046:	d12e      	bne.n	80050a6 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	f013 0f04 	tst.w	r3, #4
 800504e:	d006      	beq.n	800505e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005050:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 8005052:	6893      	ldr	r3, [r2, #8]
 8005054:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005058:	68e1      	ldr	r1, [r4, #12]
 800505a:	430b      	orrs	r3, r1
 800505c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f013 0f08 	tst.w	r3, #8
 8005064:	d007      	beq.n	8005076 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 8005068:	6893      	ldr	r3, [r2, #8]
 800506a:	6921      	ldr	r1, [r4, #16]
 800506c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005070:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005074:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005076:	f7ff ff1b 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_RCC_ClockConfig+0x160>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005082:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <HAL_RCC_ClockConfig+0x164>)
 8005084:	5cd3      	ldrb	r3, [r2, r3]
 8005086:	40d8      	lsrs	r0, r3
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_ClockConfig+0x168>)
 800508a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_ClockConfig+0x16c>)
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	f7fc fbe4 	bl	800185c <HAL_InitTick>
  return HAL_OK;
 8005094:	2000      	movs	r0, #0
}
 8005096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800509a:	2001      	movs	r0, #1
}
 800509c:	4770      	bx	lr
      return HAL_ERROR;
 800509e:	2001      	movs	r0, #1
 80050a0:	e7f9      	b.n	8005096 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80050a2:	2001      	movs	r0, #1
 80050a4:	e7f7      	b.n	8005096 <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
 80050a6:	2001      	movs	r0, #1
 80050a8:	e7f5      	b.n	8005096 <HAL_RCC_ClockConfig+0x146>
 80050aa:	bf00      	nop
 80050ac:	40023c00 	.word	0x40023c00
 80050b0:	40023800 	.word	0x40023800
 80050b4:	08013928 	.word	0x08013928
 80050b8:	20000000 	.word	0x20000000
 80050bc:	20000008 	.word	0x20000008

080050c0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80050c0:	4b01      	ldr	r3, [pc, #4]	; (80050c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000000 	.word	0x20000000

080050cc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050cc:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80050d4:	4a03      	ldr	r2, [pc, #12]	; (80050e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	4a03      	ldr	r2, [pc, #12]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80050da:	6810      	ldr	r0, [r2, #0]
}
 80050dc:	40d8      	lsrs	r0, r3
 80050de:	4770      	bx	lr
 80050e0:	40023800 	.word	0x40023800
 80050e4:	08013938 	.word	0x08013938
 80050e8:	20000000 	.word	0x20000000

080050ec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x14>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80050f4:	4a03      	ldr	r2, [pc, #12]	; (8005104 <HAL_RCC_GetPCLK2Freq+0x18>)
 80050f6:	5cd3      	ldrb	r3, [r2, r3]
 80050f8:	4a03      	ldr	r2, [pc, #12]	; (8005108 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80050fa:	6810      	ldr	r0, [r2, #0]
}
 80050fc:	40d8      	lsrs	r0, r3
 80050fe:	4770      	bx	lr
 8005100:	40023800 	.word	0x40023800
 8005104:	08013938 	.word	0x08013938
 8005108:	20000000 	.word	0x20000000

0800510c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800510c:	230f      	movs	r3, #15
 800510e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_GetClockConfig+0x34>)
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	f002 0203 	and.w	r2, r2, #3
 8005118:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005120:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005128:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005132:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005134:	4b03      	ldr	r3, [pc, #12]	; (8005144 <HAL_RCC_GetClockConfig+0x38>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	600b      	str	r3, [r1, #0]
}
 800513e:	4770      	bx	lr
 8005140:	40023800 	.word	0x40023800
 8005144:	40023c00 	.word	0x40023c00

08005148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800514c:	b083      	sub	sp, #12
 800514e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005150:	6806      	ldr	r6, [r0, #0]
 8005152:	f016 0601 	ands.w	r6, r6, #1
 8005156:	d00c      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005158:	4bb3      	ldr	r3, [pc, #716]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005160:	609a      	str	r2, [r3, #8]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005166:	430a      	orrs	r2, r1
 8005168:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800516a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800516c:	fab6 f686 	clz	r6, r6
 8005170:	0976      	lsrs	r6, r6, #5
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005172:	6825      	ldr	r5, [r4, #0]
 8005174:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8005178:	d010      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800517a:	4aab      	ldr	r2, [pc, #684]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800517c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005180:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005184:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005186:	430b      	orrs	r3, r1
 8005188:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800518c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    {
      plli2sused = 1;
 800518e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8005192:	bf08      	it	eq
 8005194:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005196:	fab5 f585 	clz	r5, r5
 800519a:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80051a2:	d010      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051a4:	4aa0      	ldr	r2, [pc, #640]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051a6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80051aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80051ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80051b0:	430b      	orrs	r3, r1
 80051b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051bc:	f000 8112 	beq.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf08      	it	eq
 80051c4:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051c6:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 80051c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80051cc:	bf18      	it	ne
 80051ce:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051d0:	f013 0f20 	tst.w	r3, #32
 80051d4:	f040 8108 	bne.w	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	f013 0f10 	tst.w	r3, #16
 80051de:	d00c      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051e0:	4b91      	ldr	r3, [pc, #580]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051e6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80051ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80051ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051f4:	430a      	orrs	r2, r1
 80051f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005200:	d008      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005202:	4a89      	ldr	r2, [pc, #548]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005204:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005208:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800520c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800520e:	430b      	orrs	r3, r1
 8005210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800521a:	d008      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800521c:	4a82      	ldr	r2, [pc, #520]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800521e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005222:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005226:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005228:	430b      	orrs	r3, r1
 800522a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005234:	d008      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005236:	4a7c      	ldr	r2, [pc, #496]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005238:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800523c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005240:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005242:	430b      	orrs	r3, r1
 8005244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800524e:	d008      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005250:	4a75      	ldr	r2, [pc, #468]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005252:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005256:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800525a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800525c:	430b      	orrs	r3, r1
 800525e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005268:	d008      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800526a:	4a6f      	ldr	r2, [pc, #444]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800526c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005270:	f023 0303 	bic.w	r3, r3, #3
 8005274:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005276:	430b      	orrs	r3, r1
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005282:	d008      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005284:	4a68      	ldr	r2, [pc, #416]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005286:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800528a:	f023 030c 	bic.w	r3, r3, #12
 800528e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005290:	430b      	orrs	r3, r1
 8005292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	f413 7f80 	tst.w	r3, #256	; 0x100
 800529c:	d008      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800529e:	4a62      	ldr	r2, [pc, #392]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80052a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80052aa:	430b      	orrs	r3, r1
 80052ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80052b6:	d008      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052b8:	4a5b      	ldr	r2, [pc, #364]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80052c4:	430b      	orrs	r3, r1
 80052c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80052d0:	d008      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052d2:	4a55      	ldr	r2, [pc, #340]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052dc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80052de:	430b      	orrs	r3, r1
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80052ea:	d008      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052ec:	4a4e      	ldr	r2, [pc, #312]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80052f8:	430b      	orrs	r3, r1
 80052fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005304:	d008      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005306:	4a48      	ldr	r2, [pc, #288]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005308:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800530c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005310:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005312:	430b      	orrs	r3, r1
 8005314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800531e:	d008      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005320:	4a41      	ldr	r2, [pc, #260]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005322:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005326:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800532a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800532c:	430b      	orrs	r3, r1
 800532e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005338:	d008      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800533a:	4a3b      	ldr	r2, [pc, #236]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800533c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005340:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005344:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005346:	430b      	orrs	r3, r1
 8005348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005352:	d00d      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005354:	4a34      	ldr	r2, [pc, #208]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005356:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800535a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800535e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005360:	430b      	orrs	r3, r1
 8005362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005366:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    {
      pllsaiused = 1;
 8005368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536c:	bf08      	it	eq
 800536e:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005370:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 8005372:	f013 0f08 	tst.w	r3, #8
 8005376:	bf18      	it	ne
 8005378:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800537a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800537e:	d008      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005380:	4a29      	ldr	r2, [pc, #164]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005382:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005386:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800538a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800538c:	430b      	orrs	r3, r1
 800538e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005398:	d009      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800539a:	4a23      	ldr	r2, [pc, #140]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800539c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80053a8:	430b      	orrs	r3, r1
 80053aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053ae:	2e01      	cmp	r6, #1
 80053b0:	d004      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80053b8:	f000 8102 	beq.w	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053bc:	4a1a      	ldr	r2, [pc, #104]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c6:	f7fc fb7f 	bl	8001ac8 <HAL_GetTick>
 80053ca:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053cc:	4f16      	ldr	r7, [pc, #88]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80053d4:	d076      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053d6:	f7fc fb77 	bl	8001ac8 <HAL_GetTick>
 80053da:	1b80      	subs	r0, r0, r6
 80053dc:	2864      	cmp	r0, #100	; 0x64
 80053de:	d9f6      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x286>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e0:	2003      	movs	r0, #3
 80053e2:	e0f0      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
      plli2sused = 1;
 80053e4:	2601      	movs	r6, #1
 80053e6:	e6ee      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80053ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80053fc:	4a0b      	ldr	r2, [pc, #44]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005404:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005406:	f7fc fb5f 	bl	8001ac8 <HAL_GetTick>
 800540a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800540c:	f8df 801c 	ldr.w	r8, [pc, #28]	; 800542c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8005410:	f8d8 3000 	ldr.w	r3, [r8]
 8005414:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005418:	d10a      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541a:	f7fc fb55 	bl	8001ac8 <HAL_GetTick>
 800541e:	1bc0      	subs	r0, r0, r7
 8005420:	2864      	cmp	r0, #100	; 0x64
 8005422:	d9f5      	bls.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        return HAL_TIMEOUT;
 8005424:	2003      	movs	r0, #3
 8005426:	e0ce      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005428:	40023800 	.word	0x40023800
 800542c:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005430:	4bab      	ldr	r3, [pc, #684]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005434:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005438:	d015      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800543a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800543c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005440:	429a      	cmp	r2, r3
 8005442:	d010      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005444:	4ba6      	ldr	r3, [pc, #664]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005448:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800544c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800544e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005452:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005454:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005456:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800545a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800545c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f013 0f01 	tst.w	r3, #1
 8005464:	d112      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005468:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800546c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005470:	d01f      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005472:	4a9b      	ldr	r2, [pc, #620]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005474:	6893      	ldr	r3, [r2, #8]
 8005476:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800547a:	6093      	str	r3, [r2, #8]
 800547c:	4a98      	ldr	r2, [pc, #608]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800547e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005486:	430b      	orrs	r3, r1
 8005488:	6713      	str	r3, [r2, #112]	; 0x70
 800548a:	e6a5      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800548c:	f7fc fb1c 	bl	8001ac8 <HAL_GetTick>
 8005490:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005492:	f8df 824c 	ldr.w	r8, [pc, #588]	; 80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800549e:	f013 0f02 	tst.w	r3, #2
 80054a2:	d1e0      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x31e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a4:	f7fc fb10 	bl	8001ac8 <HAL_GetTick>
 80054a8:	1bc0      	subs	r0, r0, r7
 80054aa:	4548      	cmp	r0, r9
 80054ac:	d9f5      	bls.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 80054ae:	2003      	movs	r0, #3
 80054b0:	e089      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b2:	488b      	ldr	r0, [pc, #556]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80054b4:	6882      	ldr	r2, [r0, #8]
 80054b6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80054ba:	498a      	ldr	r1, [pc, #552]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80054bc:	4019      	ands	r1, r3
 80054be:	430a      	orrs	r2, r1
 80054c0:	6082      	str	r2, [r0, #8]
 80054c2:	e7db      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x334>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	f013 0f01 	tst.w	r3, #1
 80054ca:	d013      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80054cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054ce:	b98b      	cbnz	r3, 80054f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054d0:	4a83      	ldr	r2, [pc, #524]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80054d2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054d6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054de:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80054e2:	430b      	orrs	r3, r1
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80054ea:	68a1      	ldr	r1, [r4, #8]
 80054ec:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80054f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80054fa:	d003      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80054fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80054fe:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005502:	d006      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8005504:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005508:	d01e      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x400>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800550a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800550c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005510:	d11a      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x400>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005512:	4a73      	ldr	r2, [pc, #460]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005514:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005518:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800551c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005520:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005524:	430b      	orrs	r3, r1
 8005526:	6861      	ldr	r1, [r4, #4]
 8005528:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800552c:	68e1      	ldr	r1, [r4, #12]
 800552e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005532:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005536:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800553a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800553c:	3b01      	subs	r3, #1
 800553e:	f021 011f 	bic.w	r1, r1, #31
 8005542:	430b      	orrs	r3, r1
 8005544:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800554e:	d011      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005550:	4a63      	ldr	r2, [pc, #396]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005552:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005556:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800555a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800555e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005562:	430b      	orrs	r3, r1
 8005564:	6861      	ldr	r1, [r4, #4]
 8005566:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800556a:	6921      	ldr	r1, [r4, #16]
 800556c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005570:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800557a:	d00d      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x450>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800557c:	6862      	ldr	r2, [r4, #4]
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005586:	68e2      	ldr	r2, [r4, #12]
 8005588:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800558c:	68a2      	ldr	r2, [r4, #8]
 800558e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005592:	4a53      	ldr	r2, [pc, #332]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005594:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005598:	4a51      	ldr	r2, [pc, #324]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a2:	f7fc fa91 	bl	8001ac8 <HAL_GetTick>
 80055a6:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055a8:	4f4d      	ldr	r7, [pc, #308]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80055b0:	d106      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055b2:	f7fc fa89 	bl	8001ac8 <HAL_GetTick>
 80055b6:	1b80      	subs	r0, r0, r6
 80055b8:	2864      	cmp	r0, #100	; 0x64
 80055ba:	d9f6      	bls.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055bc:	2003      	movs	r0, #3
 80055be:	e002      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055c0:	2d01      	cmp	r5, #1
 80055c2:	d003      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x484>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80055c4:	2000      	movs	r0, #0
}
 80055c6:	b003      	add	sp, #12
 80055c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 80055cc:	4a44      	ldr	r2, [pc, #272]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80055ce:	6813      	ldr	r3, [r2, #0]
 80055d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80055d6:	f7fc fa77 	bl	8001ac8 <HAL_GetTick>
 80055da:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055dc:	4e40      	ldr	r6, [pc, #256]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80055de:	6833      	ldr	r3, [r6, #0]
 80055e0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80055e4:	d006      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055e6:	f7fc fa6f 	bl	8001ac8 <HAL_GetTick>
 80055ea:	1b40      	subs	r0, r0, r5
 80055ec:	2864      	cmp	r0, #100	; 0x64
 80055ee:	d9f6      	bls.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 80055f0:	2003      	movs	r0, #3
 80055f2:	e7e8      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80055fa:	d001      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80055fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80055fe:	b122      	cbz	r2, 800560a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005600:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005604:	d01d      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005608:	b9db      	cbnz	r3, 8005642 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800560a:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800560c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005610:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005618:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800561c:	430b      	orrs	r3, r1
 800561e:	6961      	ldr	r1, [r4, #20]
 8005620:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005624:	69a1      	ldr	r1, [r4, #24]
 8005626:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800562a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800562e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005632:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005634:	3901      	subs	r1, #1
 8005636:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800563a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800563e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005648:	d003      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800564a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800564c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005650:	d031      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	f013 0f08 	tst.w	r3, #8
 8005658:	d019      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x546>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800565a:	4a21      	ldr	r2, [pc, #132]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800565c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005660:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005668:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800566c:	430b      	orrs	r3, r1
 800566e:	6961      	ldr	r1, [r4, #20]
 8005670:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005674:	69e1      	ldr	r1, [r4, #28]
 8005676:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800567a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800567e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005682:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005686:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005688:	430b      	orrs	r3, r1
 800568a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800568e:	4a14      	ldr	r2, [pc, #80]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005690:	6813      	ldr	r3, [r2, #0]
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005698:	f7fc fa16 	bl	8001ac8 <HAL_GetTick>
 800569c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800569e:	4d10      	ldr	r5, [pc, #64]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80056a6:	d119      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x594>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056a8:	f7fc fa0e 	bl	8001ac8 <HAL_GetTick>
 80056ac:	1b00      	subs	r0, r0, r4
 80056ae:	2864      	cmp	r0, #100	; 0x64
 80056b0:	d9f6      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x558>
        return HAL_TIMEOUT;
 80056b2:	2003      	movs	r0, #3
 80056b4:	e787      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80056b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056bc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056c0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80056c4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6961      	ldr	r1, [r4, #20]
 80056cc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80056d0:	6a21      	ldr	r1, [r4, #32]
 80056d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80056d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80056da:	e7ba      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  return HAL_OK;
 80056dc:	2000      	movs	r0, #0
 80056de:	e772      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	0ffffcff 	.word	0x0ffffcff

080056e8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d145      	bne.n	800577e <HAL_TIM_Base_Start_IT+0x96>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056f8:	6802      	ldr	r2, [r0, #0]
 80056fa:	68d3      	ldr	r3, [r2, #12]
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005702:	6802      	ldr	r2, [r0, #0]
 8005704:	4b20      	ldr	r3, [pc, #128]	; (8005788 <HAL_TIM_Base_Start_IT+0xa0>)
 8005706:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800570a:	bf18      	it	ne
 800570c:	429a      	cmpne	r2, r3
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	491d      	ldr	r1, [pc, #116]	; (800578c <HAL_TIM_Base_Start_IT+0xa4>)
 8005716:	428a      	cmp	r2, r1
 8005718:	bf08      	it	eq
 800571a:	f043 0301 	orreq.w	r3, r3, #1
 800571e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005722:	428a      	cmp	r2, r1
 8005724:	bf08      	it	eq
 8005726:	f043 0301 	orreq.w	r3, r3, #1
 800572a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800572e:	428a      	cmp	r2, r1
 8005730:	bf08      	it	eq
 8005732:	f043 0301 	orreq.w	r3, r3, #1
 8005736:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800573a:	428a      	cmp	r2, r1
 800573c:	bf08      	it	eq
 800573e:	f043 0301 	orreq.w	r3, r3, #1
 8005742:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8005746:	428a      	cmp	r2, r1
 8005748:	bf08      	it	eq
 800574a:	f043 0301 	orreq.w	r3, r3, #1
 800574e:	b913      	cbnz	r3, 8005756 <HAL_TIM_Base_Start_IT+0x6e>
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <HAL_TIM_Base_Start_IT+0xa8>)
 8005752:	429a      	cmp	r2, r3
 8005754:	d10d      	bne.n	8005772 <HAL_TIM_Base_Start_IT+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005756:	6891      	ldr	r1, [r2, #8]
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <HAL_TIM_Base_Start_IT+0xac>)
 800575a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575c:	2b06      	cmp	r3, #6
 800575e:	d010      	beq.n	8005782 <HAL_TIM_Base_Start_IT+0x9a>
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d00d      	beq.n	8005782 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800576e:	2000      	movs	r0, #0
 8005770:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800577a:	2000      	movs	r0, #0
 800577c:	4770      	bx	lr
    return HAL_ERROR;
 800577e:	2001      	movs	r0, #1
 8005780:	4770      	bx	lr
  return HAL_OK;
 8005782:	2000      	movs	r0, #0
}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40001800 	.word	0x40001800
 8005794:	00010007 	.word	0x00010007

08005798 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_IRQHandler>:
{
 80057a0:	b510      	push	{r4, lr}
 80057a2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057a4:	6803      	ldr	r3, [r0, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	f012 0f02 	tst.w	r2, #2
 80057ac:	d011      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	f012 0f02 	tst.w	r2, #2
 80057b4:	d00d      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b6:	f06f 0202 	mvn.w	r2, #2
 80057ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057bc:	2301      	movs	r3, #1
 80057be:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c0:	6803      	ldr	r3, [r0, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f013 0f03 	tst.w	r3, #3
 80057c8:	d079      	beq.n	80058be <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	f7ff ffe6 	bl	800579a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	2300      	movs	r3, #0
 80057d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	f012 0f04 	tst.w	r2, #4
 80057da:	d012      	beq.n	8005802 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	f012 0f04 	tst.w	r2, #4
 80057e2:	d00e      	beq.n	8005802 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e4:	f06f 0204 	mvn.w	r2, #4
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	2302      	movs	r3, #2
 80057ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80057f6:	d068      	beq.n	80058ca <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80057f8:	4620      	mov	r0, r4
 80057fa:	f7ff ffce 	bl	800579a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	2300      	movs	r3, #0
 8005800:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	f012 0f08 	tst.w	r2, #8
 800580a:	d012      	beq.n	8005832 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	f012 0f08 	tst.w	r2, #8
 8005812:	d00e      	beq.n	8005832 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005814:	f06f 0208 	mvn.w	r2, #8
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581a:	2304      	movs	r3, #4
 800581c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f013 0f03 	tst.w	r3, #3
 8005826:	d057      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff ffb6 	bl	800579a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	2300      	movs	r3, #0
 8005830:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	f012 0f10 	tst.w	r2, #16
 800583a:	d012      	beq.n	8005862 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	f012 0f10 	tst.w	r2, #16
 8005842:	d00e      	beq.n	8005862 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005844:	f06f 0210 	mvn.w	r2, #16
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800584a:	2308      	movs	r3, #8
 800584c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005856:	d046      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff ff9e 	bl	800579a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	2300      	movs	r3, #0
 8005860:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	f012 0f01 	tst.w	r2, #1
 800586a:	d003      	beq.n	8005874 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	f012 0f01 	tst.w	r2, #1
 8005872:	d13f      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	f012 0f80 	tst.w	r2, #128	; 0x80
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005884:	d13d      	bne.n	8005902 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800588e:	d003      	beq.n	8005898 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005896:	d13b      	bne.n	8005910 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058a8:	d139      	bne.n	800591e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	f012 0f20 	tst.w	r2, #32
 80058b2:	d003      	beq.n	80058bc <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	f012 0f20 	tst.w	r2, #32
 80058ba:	d137      	bne.n	800592c <HAL_TIM_IRQHandler+0x18c>
}
 80058bc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	f7ff ff6b 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff ff6a 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
 80058c8:	e781      	b.n	80057ce <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7ff ff64 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff ff63 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
 80058d6:	e792      	b.n	80057fe <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d8:	4620      	mov	r0, r4
 80058da:	f7ff ff5d 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058de:	4620      	mov	r0, r4
 80058e0:	f7ff ff5c 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
 80058e4:	e7a3      	b.n	800582e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	4620      	mov	r0, r4
 80058e8:	f7ff ff56 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff ff55 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
 80058f2:	e7b4      	b.n	800585e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058f4:	f06f 0201 	mvn.w	r2, #1
 80058f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fa:	4620      	mov	r0, r4
 80058fc:	f7fb faae 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
 8005900:	e7b8      	b.n	8005874 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005902:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005906:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005908:	4620      	mov	r0, r4
 800590a:	f000 f91a 	bl	8005b42 <HAL_TIMEx_BreakCallback>
 800590e:	e7ba      	b.n	8005886 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005910:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005914:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005916:	4620      	mov	r0, r4
 8005918:	f000 f914 	bl	8005b44 <HAL_TIMEx_Break2Callback>
 800591c:	e7bc      	b.n	8005898 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800591e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005922:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff ff3a 	bl	800579e <HAL_TIM_TriggerCallback>
 800592a:	e7be      	b.n	80058aa <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800592c:	f06f 0220 	mvn.w	r2, #32
 8005930:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f904 	bl	8005b40 <HAL_TIMEx_CommutCallback>
}
 8005938:	e7c0      	b.n	80058bc <HAL_TIM_IRQHandler+0x11c>
	...

0800593c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800593c:	b410      	push	{r4}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005940:	4a34      	ldr	r2, [pc, #208]	; (8005a14 <TIM_Base_SetConfig+0xd8>)
 8005942:	4290      	cmp	r0, r2
 8005944:	bf14      	ite	ne
 8005946:	2200      	movne	r2, #0
 8005948:	2201      	moveq	r2, #1
 800594a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800594e:	d044      	beq.n	80059da <TIM_Base_SetConfig+0x9e>
 8005950:	2a00      	cmp	r2, #0
 8005952:	d142      	bne.n	80059da <TIM_Base_SetConfig+0x9e>
 8005954:	4c30      	ldr	r4, [pc, #192]	; (8005a18 <TIM_Base_SetConfig+0xdc>)
 8005956:	42a0      	cmp	r0, r4
 8005958:	d00b      	beq.n	8005972 <TIM_Base_SetConfig+0x36>
 800595a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800595e:	42a0      	cmp	r0, r4
 8005960:	d007      	beq.n	8005972 <TIM_Base_SetConfig+0x36>
 8005962:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005966:	42a0      	cmp	r0, r4
 8005968:	d003      	beq.n	8005972 <TIM_Base_SetConfig+0x36>
 800596a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800596e:	42a0      	cmp	r0, r4
 8005970:	d10a      	bne.n	8005988 <TIM_Base_SetConfig+0x4c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005976:	684c      	ldr	r4, [r1, #4]
 8005978:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597a:	4c27      	ldr	r4, [pc, #156]	; (8005a18 <TIM_Base_SetConfig+0xdc>)
 800597c:	42a0      	cmp	r0, r4
 800597e:	d030      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 8005980:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005984:	42a0      	cmp	r0, r4
 8005986:	d02c      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 8005988:	4c24      	ldr	r4, [pc, #144]	; (8005a1c <TIM_Base_SetConfig+0xe0>)
 800598a:	42a0      	cmp	r0, r4
 800598c:	d029      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 800598e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8005992:	42a0      	cmp	r0, r4
 8005994:	d025      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 8005996:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800599a:	42a0      	cmp	r0, r4
 800599c:	d021      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 800599e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059a2:	42a0      	cmp	r0, r4
 80059a4:	d01d      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 80059a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059aa:	42a0      	cmp	r0, r4
 80059ac:	d019      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 80059ae:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 80059b2:	42a0      	cmp	r0, r4
 80059b4:	d015      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 80059b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059ba:	42a0      	cmp	r0, r4
 80059bc:	d011      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
 80059be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059c2:	42a0      	cmp	r0, r4
 80059c4:	d00d      	beq.n	80059e2 <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ca:	694a      	ldr	r2, [r1, #20]
 80059cc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80059ce:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d0:	688b      	ldr	r3, [r1, #8]
 80059d2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059d4:	680b      	ldr	r3, [r1, #0]
 80059d6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d8:	e016      	b.n	8005a08 <TIM_Base_SetConfig+0xcc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059de:	684c      	ldr	r4, [r1, #4]
 80059e0:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	68cc      	ldr	r4, [r1, #12]
 80059e8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ee:	694c      	ldr	r4, [r1, #20]
 80059f0:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80059f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f4:	688b      	ldr	r3, [r1, #8]
 80059f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059f8:	680b      	ldr	r3, [r1, #0]
 80059fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059fc:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <TIM_Base_SetConfig+0xe4>)
 80059fe:	4298      	cmp	r0, r3
 8005a00:	d000      	beq.n	8005a04 <TIM_Base_SetConfig+0xc8>
 8005a02:	b10a      	cbz	r2, 8005a08 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a04:	690b      	ldr	r3, [r1, #16]
 8005a06:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	6143      	str	r3, [r0, #20]
}
 8005a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40010400 	.word	0x40010400

08005a24 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005a24:	b360      	cbz	r0, 8005a80 <HAL_TIM_Base_Init+0x5c>
{
 8005a26:	b510      	push	{r4, lr}
 8005a28:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a2e:	b313      	cbz	r3, 8005a76 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	2302      	movs	r3, #2
 8005a32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a36:	4621      	mov	r1, r4
 8005a38:	f851 0b04 	ldr.w	r0, [r1], #4
 8005a3c:	f7ff ff7e 	bl	800593c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a4a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005a56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005a6a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005a6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a72:	2000      	movs	r0, #0
}
 8005a74:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005a7a:	f7fb fe2d 	bl	80016d8 <HAL_TIM_Base_MspInit>
 8005a7e:	e7d7      	b.n	8005a30 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
}
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d051      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8005a8c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a94:	2302      	movs	r3, #2
 8005a96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a9a:	6802      	ldr	r2, [r0, #0]
 8005a9c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aa0:	4d24      	ldr	r5, [pc, #144]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005aa2:	42aa      	cmp	r2, r5
 8005aa4:	d003      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8005aa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005aaa:	42aa      	cmp	r2, r5
 8005aac:	d103      	bne.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ab2:	684d      	ldr	r5, [r1, #4]
 8005ab4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aba:	680d      	ldr	r5, [r1, #0]
 8005abc:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005abe:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac0:	6802      	ldr	r2, [r0, #0]
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ac4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005ac8:	bf18      	it	ne
 8005aca:	429a      	cmpne	r2, r3
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	4d19      	ldr	r5, [pc, #100]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ad4:	42aa      	cmp	r2, r5
 8005ad6:	bf08      	it	eq
 8005ad8:	f043 0301 	orreq.w	r3, r3, #1
 8005adc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ae0:	42aa      	cmp	r2, r5
 8005ae2:	bf08      	it	eq
 8005ae4:	f043 0301 	orreq.w	r3, r3, #1
 8005ae8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005aec:	42aa      	cmp	r2, r5
 8005aee:	bf08      	it	eq
 8005af0:	f043 0301 	orreq.w	r3, r3, #1
 8005af4:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8005af8:	42aa      	cmp	r2, r5
 8005afa:	bf08      	it	eq
 8005afc:	f043 0301 	orreq.w	r3, r3, #1
 8005b00:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8005b04:	42aa      	cmp	r2, r5
 8005b06:	bf08      	it	eq
 8005b08:	f043 0301 	orreq.w	r3, r3, #1
 8005b0c:	b913      	cbnz	r3, 8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d104      	bne.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b14:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b18:	688b      	ldr	r3, [r1, #8]
 8005b1a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b1c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	2300      	movs	r3, #0
 8005b26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005b2a:	4618      	mov	r0, r3
}
 8005b2c:	bc30      	pop	{r4, r5}
 8005b2e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005b30:	2002      	movs	r0, #2
}
 8005b32:	4770      	bx	lr
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40001800 	.word	0x40001800

08005b40 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b40:	4770      	bx	lr

08005b42 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b44:	4770      	bx	lr

08005b46 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b46:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	e852 3f00 	ldrex	r3, [r2]
 8005b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	e842 3100 	strex	r1, r3, [r2]
 8005b54:	2900      	cmp	r1, #0
 8005b56:	d1f6      	bne.n	8005b46 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	f102 0308 	add.w	r3, r2, #8
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	3208      	adds	r2, #8
 8005b68:	e842 3100 	strex	r1, r3, [r2]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d1f3      	bne.n	8005b58 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d005      	beq.n	8005b82 <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b76:	2320      	movs	r3, #32
 8005b78:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b7e:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005b80:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	e852 3f00 	ldrex	r3, [r2]
 8005b88:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	e842 3100 	strex	r1, r3, [r2]
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d1f6      	bne.n	8005b82 <UART_EndRxTransfer+0x3c>
 8005b94:	e7ef      	b.n	8005b76 <UART_EndRxTransfer+0x30>

08005b96 <HAL_UART_ErrorCallback>:
}
 8005b96:	4770      	bx	lr

08005b98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b98:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ba2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ba6:	f7ff fff6 	bl	8005b96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005baa:	bd08      	pop	{r3, pc}

08005bac <HAL_UARTEx_RxEventCallback>:
}
 8005bac:	4770      	bx	lr
	...

08005bb0 <HAL_UART_IRQHandler>:
{
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bb4:	6802      	ldr	r2, [r0, #0]
 8005bb6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bb8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bba:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8005bbc:	f640 050f 	movw	r5, #2063	; 0x80f
 8005bc0:	422b      	tst	r3, r5
 8005bc2:	d10a      	bne.n	8005bda <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bc4:	f013 0f20 	tst.w	r3, #32
 8005bc8:	d00e      	beq.n	8005be8 <HAL_UART_IRQHandler+0x38>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bca:	f010 0f20 	tst.w	r0, #32
 8005bce:	d00b      	beq.n	8005be8 <HAL_UART_IRQHandler+0x38>
      if (huart->RxISR != NULL)
 8005bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd2:	b1db      	cbz	r3, 8005c0c <HAL_UART_IRQHandler+0x5c>
        huart->RxISR(huart);
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4798      	blx	r3
 8005bd8:	e018      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bda:	f011 0101 	ands.w	r1, r1, #1
 8005bde:	d116      	bne.n	8005c0e <HAL_UART_IRQHandler+0x5e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005be0:	4dae      	ldr	r5, [pc, #696]	; (8005e9c <HAL_UART_IRQHandler+0x2ec>)
 8005be2:	4228      	tst	r0, r5
 8005be4:	f040 814f 	bne.w	8005e86 <HAL_UART_IRQHandler+0x2d6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005bea:	2901      	cmp	r1, #1
 8005bec:	f000 80a1 	beq.w	8005d32 <HAL_UART_IRQHandler+0x182>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bf4:	d003      	beq.n	8005bfe <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bf6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005bfa:	f040 812c 	bne.w	8005e56 <HAL_UART_IRQHandler+0x2a6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c02:	d003      	beq.n	8005c0c <HAL_UART_IRQHandler+0x5c>
 8005c04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c08:	f040 812c 	bne.w	8005e64 <HAL_UART_IRQHandler+0x2b4>
}
 8005c0c:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c0e:	f013 0f01 	tst.w	r3, #1
 8005c12:	d009      	beq.n	8005c28 <HAL_UART_IRQHandler+0x78>
 8005c14:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005c18:	d006      	beq.n	8005c28 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c1a:	2501      	movs	r5, #1
 8005c1c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c1e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005c22:	432a      	orrs	r2, r5
 8005c24:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c28:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8005c2c:	400a      	ands	r2, r1
 8005c2e:	d15c      	bne.n	8005cea <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c30:	f013 0f04 	tst.w	r3, #4
 8005c34:	d001      	beq.n	8005c3a <HAL_UART_IRQHandler+0x8a>
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d162      	bne.n	8005d00 <HAL_UART_IRQHandler+0x150>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c3a:	f013 0f08 	tst.w	r3, #8
 8005c3e:	d00b      	beq.n	8005c58 <HAL_UART_IRQHandler+0xa8>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c40:	f010 0f20 	tst.w	r0, #32
 8005c44:	d100      	bne.n	8005c48 <HAL_UART_IRQHandler+0x98>
 8005c46:	b139      	cbz	r1, 8005c58 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	2108      	movs	r1, #8
 8005c4c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c4e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005c52:	430a      	orrs	r2, r1
 8005c54:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c58:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005c5c:	d00c      	beq.n	8005c78 <HAL_UART_IRQHandler+0xc8>
 8005c5e:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005c62:	d009      	beq.n	8005c78 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c64:	6822      	ldr	r2, [r4, #0]
 8005c66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c6a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c6c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005c70:	f042 0220 	orr.w	r2, r2, #32
 8005c74:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c78:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005c7c:	2a00      	cmp	r2, #0
 8005c7e:	d0c5      	beq.n	8005c0c <HAL_UART_IRQHandler+0x5c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c80:	f013 0f20 	tst.w	r3, #32
 8005c84:	d006      	beq.n	8005c94 <HAL_UART_IRQHandler+0xe4>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c86:	f010 0f20 	tst.w	r0, #32
 8005c8a:	d003      	beq.n	8005c94 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8005c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c8e:	b10b      	cbz	r3, 8005c94 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 8005c90:	4620      	mov	r0, r4
 8005c92:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005c94:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	6892      	ldr	r2, [r2, #8]
 8005c9c:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ca0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	d03d      	beq.n	8005d24 <HAL_UART_IRQHandler+0x174>
        UART_EndRxTransfer(huart);
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7ff ff4c 	bl	8005b46 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cb6:	d031      	beq.n	8005d1c <HAL_UART_IRQHandler+0x16c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	f102 0308 	add.w	r3, r2, #8
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	3208      	adds	r2, #8
 8005cc8:	e842 3100 	strex	r1, r3, [r2]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d1f3      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x108>
          if (huart->hdmarx != NULL)
 8005cd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005cd2:	b1fb      	cbz	r3, 8005d14 <HAL_UART_IRQHandler+0x164>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd4:	4a72      	ldr	r2, [pc, #456]	; (8005ea0 <HAL_UART_IRQHandler+0x2f0>)
 8005cd6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cd8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005cda:	f7fc fa09 	bl	80020f0 <HAL_DMA_Abort_IT>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d094      	beq.n	8005c0c <HAL_UART_IRQHandler+0x5c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005ce4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ce6:	4798      	blx	r3
 8005ce8:	e790      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cea:	6821      	ldr	r1, [r4, #0]
 8005cec:	2502      	movs	r5, #2
 8005cee:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cf0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005cf4:	f041 0104 	orr.w	r1, r1, #4
 8005cf8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	e797      	b.n	8005c30 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	2504      	movs	r5, #4
 8005d04:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d06:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005d0a:	f042 0202 	orr.w	r2, r2, #2
 8005d0e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8005d12:	e792      	b.n	8005c3a <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8005d14:	4620      	mov	r0, r4
 8005d16:	f7ff ff3e 	bl	8005b96 <HAL_UART_ErrorCallback>
 8005d1a:	e777      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
          HAL_UART_ErrorCallback(huart);
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff ff3a 	bl	8005b96 <HAL_UART_ErrorCallback>
 8005d22:	e773      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
        HAL_UART_ErrorCallback(huart);
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7ff ff36 	bl	8005b96 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005d30:	e76c      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d32:	f013 0f10 	tst.w	r3, #16
 8005d36:	f43f af5b 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x40>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d3a:	f010 0f10 	tst.w	r0, #16
 8005d3e:	f43f af57 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d42:	2310      	movs	r3, #16
 8005d44:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d4e:	d04c      	beq.n	8005dea <HAL_UART_IRQHandler+0x23a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d50:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f43f af57 	beq.w	8005c0c <HAL_UART_IRQHandler+0x5c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d5e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005d62:	4299      	cmp	r1, r3
 8005d64:	f67f af52 	bls.w	8005c0c <HAL_UART_IRQHandler+0x5c>
        huart->RxXferCount = nb_remaining_rx_data;
 8005d68:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d6c:	69d3      	ldr	r3, [r2, #28]
 8005d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d72:	d030      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x226>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	e852 3f00 	ldrex	r3, [r2]
 8005d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	e842 3100 	strex	r1, r3, [r2]
 8005d82:	2900      	cmp	r1, #0
 8005d84:	d1f6      	bne.n	8005d74 <HAL_UART_IRQHandler+0x1c4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	f102 0308 	add.w	r3, r2, #8
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	3208      	adds	r2, #8
 8005d96:	e842 3100 	strex	r1, r3, [r2]
 8005d9a:	2900      	cmp	r1, #0
 8005d9c:	d1f3      	bne.n	8005d86 <HAL_UART_IRQHandler+0x1d6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	f102 0308 	add.w	r3, r2, #8
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	3208      	adds	r2, #8
 8005dae:	e842 3100 	strex	r1, r3, [r2]
 8005db2:	2900      	cmp	r1, #0
 8005db4:	d1f3      	bne.n	8005d9e <HAL_UART_IRQHandler+0x1ee>
          huart->RxState = HAL_UART_STATE_READY;
 8005db6:	2320      	movs	r3, #32
 8005db8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	e852 3f00 	ldrex	r3, [r2]
 8005dc4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	e842 3100 	strex	r1, r3, [r2]
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d1f6      	bne.n	8005dbe <HAL_UART_IRQHandler+0x20e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005dd2:	f7fc f943 	bl	800205c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dd6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005dda:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005dde:	1ac9      	subs	r1, r1, r3
 8005de0:	b289      	uxth	r1, r1
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff fee2 	bl	8005bac <HAL_UARTEx_RxEventCallback>
 8005de8:	e710      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dea:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005dee:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005df2:	1ac9      	subs	r1, r1, r3
 8005df4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005df6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005dfa:	b29b      	uxth	r3, r3
          && (nb_rx_data > 0U))
 8005dfc:	2900      	cmp	r1, #0
 8005dfe:	f43f af05 	beq.w	8005c0c <HAL_UART_IRQHandler+0x5c>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f43f af02 	beq.w	8005c0c <HAL_UART_IRQHandler+0x5c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e08:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	e852 3f00 	ldrex	r3, [r2]
 8005e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	e842 3000 	strex	r0, r3, [r2]
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d1f6      	bne.n	8005e08 <HAL_UART_IRQHandler+0x258>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	f102 0308 	add.w	r3, r2, #8
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	3208      	adds	r2, #8
 8005e2a:	e842 3000 	strex	r0, r3, [r2]
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d1f3      	bne.n	8005e1a <HAL_UART_IRQHandler+0x26a>
        huart->RxState = HAL_UART_STATE_READY;
 8005e32:	2320      	movs	r3, #32
 8005e34:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	2300      	movs	r3, #0
 8005e38:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8005e3a:	6663      	str	r3, [r4, #100]	; 0x64
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	e852 3f00 	ldrex	r3, [r2]
 8005e42:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	e842 3000 	strex	r0, r3, [r2]
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d1f6      	bne.n	8005e3c <HAL_UART_IRQHandler+0x28c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f7ff feac 	bl	8005bac <HAL_UARTEx_RxEventCallback>
 8005e54:	e6da      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
    if (huart->TxISR != NULL)
 8005e56:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f43f aed7 	beq.w	8005c0c <HAL_UART_IRQHandler+0x5c>
      huart->TxISR(huart);
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4798      	blx	r3
 8005e62:	e6d3      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	e852 3f00 	ldrex	r3, [r2]
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	e842 3100 	strex	r1, r3, [r2]
 8005e72:	2900      	cmp	r1, #0
 8005e74:	d1f6      	bne.n	8005e64 <HAL_UART_IRQHandler+0x2b4>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e76:	2320      	movs	r3, #32
 8005e78:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f7fa ffea 	bl	8000e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e84:	e6c2      	b.n	8005c0c <HAL_UART_IRQHandler+0x5c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e86:	f013 0f01 	tst.w	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_IRQHandler+0x2e0>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	e6d4      	b.n	8005c3a <HAL_UART_IRQHandler+0x8a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e90:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005e94:	f47f aec1 	bne.w	8005c1a <HAL_UART_IRQHandler+0x6a>
 8005e98:	e6ca      	b.n	8005c30 <HAL_UART_IRQHandler+0x80>
 8005e9a:	bf00      	nop
 8005e9c:	04000120 	.word	0x04000120
 8005ea0:	08005b99 	.word	0x08005b99

08005ea4 <UART_SetConfig>:
{
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea8:	6801      	ldr	r1, [r0, #0]
 8005eaa:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eac:	68a3      	ldr	r3, [r4, #8]
 8005eae:	6922      	ldr	r2, [r4, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	6962      	ldr	r2, [r4, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	69e2      	ldr	r2, [r4, #28]
 8005eb8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eba:	4ab4      	ldr	r2, [pc, #720]	; (800618c <UART_SetConfig+0x2e8>)
 8005ebc:	4002      	ands	r2, r0
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	6853      	ldr	r3, [r2, #4]
 8005ec6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005eca:	68e1      	ldr	r1, [r4, #12]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ed2:	6821      	ldr	r1, [r4, #0]
 8005ed4:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005ed6:	6a20      	ldr	r0, [r4, #32]
 8005ed8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eda:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	4aaa      	ldr	r2, [pc, #680]	; (8006190 <UART_SetConfig+0x2ec>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d019      	beq.n	8005f1e <UART_SetConfig+0x7a>
 8005eea:	4aaa      	ldr	r2, [pc, #680]	; (8006194 <UART_SetConfig+0x2f0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d024      	beq.n	8005f3a <UART_SetConfig+0x96>
 8005ef0:	4aa9      	ldr	r2, [pc, #676]	; (8006198 <UART_SetConfig+0x2f4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d038      	beq.n	8005f68 <UART_SetConfig+0xc4>
 8005ef6:	4aa9      	ldr	r2, [pc, #676]	; (800619c <UART_SetConfig+0x2f8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d058      	beq.n	8005fae <UART_SetConfig+0x10a>
 8005efc:	4aa8      	ldr	r2, [pc, #672]	; (80061a0 <UART_SetConfig+0x2fc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d069      	beq.n	8005fd6 <UART_SetConfig+0x132>
 8005f02:	4aa8      	ldr	r2, [pc, #672]	; (80061a4 <UART_SetConfig+0x300>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	f000 808b 	beq.w	8006020 <UART_SetConfig+0x17c>
 8005f0a:	4aa7      	ldr	r2, [pc, #668]	; (80061a8 <UART_SetConfig+0x304>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	f000 809e 	beq.w	800604e <UART_SetConfig+0x1aa>
 8005f12:	4aa6      	ldr	r2, [pc, #664]	; (80061ac <UART_SetConfig+0x308>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	f000 80b1 	beq.w	800607c <UART_SetConfig+0x1d8>
        ret = HAL_ERROR;
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	e14f      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f1e:	4ba4      	ldr	r3, [pc, #656]	; (80061b0 <UART_SetConfig+0x30c>)
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	f200 8122 	bhi.w	8006172 <UART_SetConfig+0x2ce>
 8005f2e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005f32:	00bc      	.short	0x00bc
 8005f34:	014a0029 	.word	0x014a0029
 8005f38:	0034      	.short	0x0034
 8005f3a:	4b9d      	ldr	r3, [pc, #628]	; (80061b0 <UART_SetConfig+0x30c>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f003 030c 	and.w	r3, r3, #12
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	f200 8116 	bhi.w	8006176 <UART_SetConfig+0x2d2>
 8005f4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005f4e:	00cb      	.short	0x00cb
 8005f50:	01140114 	.word	0x01140114
 8005f54:	001b0114 	.word	0x001b0114
 8005f58:	01140114 	.word	0x01140114
 8005f5c:	013c0114 	.word	0x013c0114
 8005f60:	01140114 	.word	0x01140114
 8005f64:	00260114 	.word	0x00260114
 8005f68:	4b91      	ldr	r3, [pc, #580]	; (80061b0 <UART_SetConfig+0x30c>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	f000 8127 	beq.w	80061c6 <UART_SetConfig+0x322>
 8005f78:	d80d      	bhi.n	8005f96 <UART_SetConfig+0xf2>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 812f 	beq.w	80061de <UART_SetConfig+0x33a>
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d106      	bne.n	8005f92 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f84:	69e3      	ldr	r3, [r4, #28]
 8005f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f8a:	d038      	beq.n	8005ffe <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8c:	f7fe ff90 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
        break;
 8005f90:	e0d5      	b.n	800613e <UART_SetConfig+0x29a>
        ret = HAL_ERROR;
 8005f92:	2001      	movs	r0, #1
 8005f94:	e113      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f96:	2b30      	cmp	r3, #48	; 0x30
 8005f98:	d107      	bne.n	8005faa <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f9a:	69e3      	ldr	r3, [r4, #28]
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa0:	f000 80c8 	beq.w	8006134 <UART_SetConfig+0x290>
        pclk = (uint32_t) LSE_VALUE;
 8005fa4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005fa8:	e0cb      	b.n	8006142 <UART_SetConfig+0x29e>
        ret = HAL_ERROR;
 8005faa:	2001      	movs	r0, #1
 8005fac:	e107      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fae:	4b80      	ldr	r3, [pc, #512]	; (80061b0 <UART_SetConfig+0x30c>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	f000 8104 	beq.w	80061c6 <UART_SetConfig+0x322>
 8005fbe:	d806      	bhi.n	8005fce <UART_SetConfig+0x12a>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 810c 	beq.w	80061de <UART_SetConfig+0x33a>
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d0dc      	beq.n	8005f84 <UART_SetConfig+0xe0>
        ret = HAL_ERROR;
 8005fca:	2001      	movs	r0, #1
 8005fcc:	e0f7      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fce:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd0:	d0e3      	beq.n	8005f9a <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	e0f3      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <UART_SetConfig+0x30c>)
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	f000 80f5 	beq.w	80061d2 <UART_SetConfig+0x32e>
 8005fe8:	d80e      	bhi.n	8006008 <UART_SetConfig+0x164>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 80f7 	beq.w	80061de <UART_SetConfig+0x33a>
 8005ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff4:	d106      	bne.n	8006004 <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff6:	69e3      	ldr	r3, [r4, #28]
 8005ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffc:	d1c6      	bne.n	8005f8c <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffe:	f7fe ff57 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
        break;
 8006002:	e076      	b.n	80060f2 <UART_SetConfig+0x24e>
        ret = HAL_ERROR;
 8006004:	2001      	movs	r0, #1
 8006006:	e0da      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600c:	d106      	bne.n	800601c <UART_SetConfig+0x178>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600e:	69e0      	ldr	r0, [r4, #28]
 8006010:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006014:	d06f      	beq.n	80060f6 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 8006016:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800601a:	e092      	b.n	8006142 <UART_SetConfig+0x29e>
        ret = HAL_ERROR;
 800601c:	2001      	movs	r0, #1
 800601e:	e0ce      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006020:	4b63      	ldr	r3, [pc, #396]	; (80061b0 <UART_SetConfig+0x30c>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	f000 80d0 	beq.w	80061d2 <UART_SetConfig+0x32e>
 8006032:	d807      	bhi.n	8006044 <UART_SetConfig+0x1a0>
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80ef 	beq.w	8006218 <UART_SetConfig+0x374>
 800603a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603e:	d0da      	beq.n	8005ff6 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 8006040:	2001      	movs	r0, #1
 8006042:	e0bc      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006048:	d0e1      	beq.n	800600e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 800604a:	2001      	movs	r0, #1
 800604c:	e0b7      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800604e:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <UART_SetConfig+0x30c>)
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006054:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605c:	f000 80b9 	beq.w	80061d2 <UART_SetConfig+0x32e>
 8006060:	d807      	bhi.n	8006072 <UART_SetConfig+0x1ce>
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 80bb 	beq.w	80061de <UART_SetConfig+0x33a>
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606c:	d0c3      	beq.n	8005ff6 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 800606e:	2001      	movs	r0, #1
 8006070:	e0a5      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006076:	d0ca      	beq.n	800600e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8006078:	2001      	movs	r0, #1
 800607a:	e0a0      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800607c:	4b4c      	ldr	r3, [pc, #304]	; (80061b0 <UART_SetConfig+0x30c>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006082:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608a:	f000 80a2 	beq.w	80061d2 <UART_SetConfig+0x32e>
 800608e:	d807      	bhi.n	80060a0 <UART_SetConfig+0x1fc>
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 80a4 	beq.w	80061de <UART_SetConfig+0x33a>
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609a:	d0ac      	beq.n	8005ff6 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 800609c:	2001      	movs	r0, #1
 800609e:	e08e      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060a4:	d0b3      	beq.n	800600e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80060a6:	2001      	movs	r0, #1
 80060a8:	e089      	b.n	80061be <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060aa:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ac:	69e2      	ldr	r2, [r4, #28]
 80060ae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80060b2:	f040 8099 	bne.w	80061e8 <UART_SetConfig+0x344>
    switch (clocksource)
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d85f      	bhi.n	800617a <UART_SetConfig+0x2d6>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x21c>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	08006123 	.word	0x08006123
 80060c8:	08006129 	.word	0x08006129
 80060cc:	0800617b 	.word	0x0800617b
 80060d0:	08005fff 	.word	0x08005fff
 80060d4:	0800617b 	.word	0x0800617b
 80060d8:	0800617b 	.word	0x0800617b
 80060dc:	0800617b 	.word	0x0800617b
 80060e0:	080060e9 	.word	0x080060e9
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060e4:	2300      	movs	r3, #0
 80060e6:	e7e1      	b.n	80060ac <UART_SetConfig+0x208>
        pclk = (uint32_t) LSE_VALUE;
 80060e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80060ec:	e003      	b.n	80060f6 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ee:	f7fe ffed 	bl	80050cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d043      	beq.n	800617e <UART_SetConfig+0x2da>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060f6:	6862      	ldr	r2, [r4, #4]
 80060f8:	0853      	lsrs	r3, r2, #1
 80060fa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80060fe:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006102:	f1a3 0110 	sub.w	r1, r3, #16
 8006106:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800610a:	4291      	cmp	r1, r2
 800610c:	d839      	bhi.n	8006182 <UART_SetConfig+0x2de>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800610e:	f023 020f 	bic.w	r2, r3, #15
 8006112:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8006114:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006116:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800611a:	4313      	orrs	r3, r2
 800611c:	60cb      	str	r3, [r1, #12]
 800611e:	2000      	movs	r0, #0
 8006120:	e04d      	b.n	80061be <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006122:	f7fe ffe3 	bl	80050ec <HAL_RCC_GetPCLK2Freq>
        break;
 8006126:	e7e4      	b.n	80060f2 <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006128:	4822      	ldr	r0, [pc, #136]	; (80061b4 <UART_SetConfig+0x310>)
 800612a:	e7e4      	b.n	80060f6 <UART_SetConfig+0x252>
 800612c:	4821      	ldr	r0, [pc, #132]	; (80061b4 <UART_SetConfig+0x310>)
 800612e:	e7e2      	b.n	80060f6 <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 8006130:	4820      	ldr	r0, [pc, #128]	; (80061b4 <UART_SetConfig+0x310>)
 8006132:	e7e0      	b.n	80060f6 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 8006134:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006138:	e7dd      	b.n	80060f6 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 800613a:	f7fe ffc7 	bl	80050cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800613e:	2800      	cmp	r0, #0
 8006140:	d03a      	beq.n	80061b8 <UART_SetConfig+0x314>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006142:	6863      	ldr	r3, [r4, #4]
 8006144:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006148:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800614c:	f1a0 0210 	sub.w	r2, r0, #16
 8006150:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006154:	429a      	cmp	r2, r3
 8006156:	d831      	bhi.n	80061bc <UART_SetConfig+0x318>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	b280      	uxth	r0, r0
 800615c:	60d8      	str	r0, [r3, #12]
 800615e:	2000      	movs	r0, #0
 8006160:	e02d      	b.n	80061be <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006162:	f7fe ffc3 	bl	80050ec <HAL_RCC_GetPCLK2Freq>
        break;
 8006166:	e7ea      	b.n	800613e <UART_SetConfig+0x29a>
        pclk = (uint32_t) LSE_VALUE;
 8006168:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800616c:	e7e9      	b.n	8006142 <UART_SetConfig+0x29e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616e:	4811      	ldr	r0, [pc, #68]	; (80061b4 <UART_SetConfig+0x310>)
 8006170:	e7e7      	b.n	8006142 <UART_SetConfig+0x29e>
        ret = HAL_ERROR;
 8006172:	2001      	movs	r0, #1
 8006174:	e023      	b.n	80061be <UART_SetConfig+0x31a>
 8006176:	2001      	movs	r0, #1
 8006178:	e021      	b.n	80061be <UART_SetConfig+0x31a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800617a:	2001      	movs	r0, #1
 800617c:	e01f      	b.n	80061be <UART_SetConfig+0x31a>
 800617e:	2000      	movs	r0, #0
 8006180:	e01d      	b.n	80061be <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 8006182:	2001      	movs	r0, #1
 8006184:	e01b      	b.n	80061be <UART_SetConfig+0x31a>
 8006186:	2001      	movs	r0, #1
 8006188:	e019      	b.n	80061be <UART_SetConfig+0x31a>
 800618a:	bf00      	nop
 800618c:	efff69f3 	.word	0xefff69f3
 8006190:	40011000 	.word	0x40011000
 8006194:	40004400 	.word	0x40004400
 8006198:	40004800 	.word	0x40004800
 800619c:	40004c00 	.word	0x40004c00
 80061a0:	40005000 	.word	0x40005000
 80061a4:	40011400 	.word	0x40011400
 80061a8:	40007800 	.word	0x40007800
 80061ac:	40007c00 	.word	0x40007c00
 80061b0:	40023800 	.word	0x40023800
 80061b4:	00f42400 	.word	0x00f42400
 80061b8:	2000      	movs	r0, #0
 80061ba:	e000      	b.n	80061be <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80061c2:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80061c4:	bd10      	pop	{r4, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c6:	69e3      	ldr	r3, [r4, #28]
 80061c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061cc:	d0ae      	beq.n	800612c <UART_SetConfig+0x288>
        pclk = (uint32_t) HSI_VALUE;
 80061ce:	4815      	ldr	r0, [pc, #84]	; (8006224 <UART_SetConfig+0x380>)
 80061d0:	e7b7      	b.n	8006142 <UART_SetConfig+0x29e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d2:	69e3      	ldr	r3, [r4, #28]
 80061d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d8:	d0aa      	beq.n	8006130 <UART_SetConfig+0x28c>
 80061da:	4812      	ldr	r0, [pc, #72]	; (8006224 <UART_SetConfig+0x380>)
 80061dc:	e7b1      	b.n	8006142 <UART_SetConfig+0x29e>
 80061de:	69e3      	ldr	r3, [r4, #28]
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e4:	d083      	beq.n	80060ee <UART_SetConfig+0x24a>
 80061e6:	2300      	movs	r3, #0
    switch (clocksource)
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d8cc      	bhi.n	8006186 <UART_SetConfig+0x2e2>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x350>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	0800613b 	.word	0x0800613b
 80061f8:	08006163 	.word	0x08006163
 80061fc:	0800616f 	.word	0x0800616f
 8006200:	08006187 	.word	0x08006187
 8006204:	08005f8d 	.word	0x08005f8d
 8006208:	08006187 	.word	0x08006187
 800620c:	08006187 	.word	0x08006187
 8006210:	08006187 	.word	0x08006187
 8006214:	08006169 	.word	0x08006169
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006218:	69e3      	ldr	r3, [r4, #28]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d080      	beq.n	8006122 <UART_SetConfig+0x27e>
 8006220:	2301      	movs	r3, #1
 8006222:	e7e1      	b.n	80061e8 <UART_SetConfig+0x344>
 8006224:	00f42400 	.word	0x00f42400

08006228 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006228:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800622a:	f013 0f01 	tst.w	r3, #1
 800622e:	d006      	beq.n	800623e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006230:	6802      	ldr	r2, [r0, #0]
 8006232:	6853      	ldr	r3, [r2, #4]
 8006234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006238:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800623a:	430b      	orrs	r3, r1
 800623c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800623e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006240:	f013 0f02 	tst.w	r3, #2
 8006244:	d006      	beq.n	8006254 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006246:	6802      	ldr	r2, [r0, #0]
 8006248:	6853      	ldr	r3, [r2, #4]
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006250:	430b      	orrs	r3, r1
 8006252:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006254:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006256:	f013 0f04 	tst.w	r3, #4
 800625a:	d006      	beq.n	800626a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800625c:	6802      	ldr	r2, [r0, #0]
 800625e:	6853      	ldr	r3, [r2, #4]
 8006260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006264:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006266:	430b      	orrs	r3, r1
 8006268:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800626a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800626c:	f013 0f08 	tst.w	r3, #8
 8006270:	d006      	beq.n	8006280 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006272:	6802      	ldr	r2, [r0, #0]
 8006274:	6853      	ldr	r3, [r2, #4]
 8006276:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800627a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800627c:	430b      	orrs	r3, r1
 800627e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006280:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006282:	f013 0f10 	tst.w	r3, #16
 8006286:	d006      	beq.n	8006296 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006288:	6802      	ldr	r2, [r0, #0]
 800628a:	6893      	ldr	r3, [r2, #8]
 800628c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006290:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006292:	430b      	orrs	r3, r1
 8006294:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006296:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006298:	f013 0f20 	tst.w	r3, #32
 800629c:	d006      	beq.n	80062ac <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629e:	6802      	ldr	r2, [r0, #0]
 80062a0:	6893      	ldr	r3, [r2, #8]
 80062a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062b2:	d00a      	beq.n	80062ca <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b4:	6802      	ldr	r2, [r0, #0]
 80062b6:	6853      	ldr	r3, [r2, #4]
 80062b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80062bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80062be:	430b      	orrs	r3, r1
 80062c0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80062c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c8:	d00b      	beq.n	80062e2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062d0:	d006      	beq.n	80062e0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062d2:	6802      	ldr	r2, [r0, #0]
 80062d4:	6853      	ldr	r3, [r2, #4]
 80062d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80062dc:	430b      	orrs	r3, r1
 80062de:	6053      	str	r3, [r2, #4]
}
 80062e0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e2:	6802      	ldr	r2, [r0, #0]
 80062e4:	6853      	ldr	r3, [r2, #4]
 80062e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80062ea:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6053      	str	r3, [r2, #4]
 80062f0:	e7eb      	b.n	80062ca <UART_AdvFeatureConfig+0xa2>

080062f2 <UART_WaitOnFlagUntilTimeout>:
{
 80062f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062f6:	4680      	mov	r8, r0
 80062f8:	460e      	mov	r6, r1
 80062fa:	4615      	mov	r5, r2
 80062fc:	4699      	mov	r9, r3
 80062fe:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006300:	f8d8 2000 	ldr.w	r2, [r8]
 8006304:	69d4      	ldr	r4, [r2, #28]
 8006306:	ea36 0304 	bics.w	r3, r6, r4
 800630a:	bf0c      	ite	eq
 800630c:	2401      	moveq	r4, #1
 800630e:	2400      	movne	r4, #0
 8006310:	42ac      	cmp	r4, r5
 8006312:	d15a      	bne.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 8006314:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006318:	d0f4      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7fb fbd5 	bl	8001ac8 <HAL_GetTick>
 800631e:	eba0 0009 	sub.w	r0, r0, r9
 8006322:	42b8      	cmp	r0, r7
 8006324:	d830      	bhi.n	8006388 <UART_WaitOnFlagUntilTimeout+0x96>
 8006326:	b37f      	cbz	r7, 8006388 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006328:	f8d8 3000 	ldr.w	r3, [r8]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	f012 0f04 	tst.w	r2, #4
 8006332:	d0e5      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800633a:	d0e1      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006340:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006342:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	e852 3f00 	ldrex	r3, [r2]
 800634a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	e842 3100 	strex	r1, r3, [r2]
 8006352:	2900      	cmp	r1, #0
 8006354:	d1f5      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	f102 0308 	add.w	r3, r2, #8
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	3208      	adds	r2, #8
 8006368:	e842 3100 	strex	r1, r3, [r2]
 800636c:	2900      	cmp	r1, #0
 800636e:	d1f2      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8006370:	2320      	movs	r3, #32
 8006372:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006376:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637a:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
          __HAL_UNLOCK(huart);
 800637e:	2300      	movs	r3, #0
 8006380:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
          return HAL_TIMEOUT;
 8006384:	2003      	movs	r0, #3
 8006386:	e021      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006388:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	e852 3f00 	ldrex	r3, [r2]
 8006390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	e842 3100 	strex	r1, r3, [r2]
 8006398:	2900      	cmp	r1, #0
 800639a:	d1f5      	bne.n	8006388 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	f102 0308 	add.w	r3, r2, #8
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	3208      	adds	r2, #8
 80063ae:	e842 3100 	strex	r1, r3, [r2]
 80063b2:	2900      	cmp	r1, #0
 80063b4:	d1f2      	bne.n	800639c <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80063b6:	2320      	movs	r3, #32
 80063b8:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063bc:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80063c0:	2300      	movs	r3, #0
 80063c2:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
        return HAL_TIMEOUT;
 80063c6:	2003      	movs	r0, #3
 80063c8:	e000      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 80063ca:	2000      	movs	r0, #0
}
 80063cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080063d0 <HAL_UART_Transmit>:
{
 80063d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80063d8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d15d      	bne.n	800649a <HAL_UART_Transmit+0xca>
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d05c      	beq.n	80064a2 <HAL_UART_Transmit+0xd2>
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	d05a      	beq.n	80064a2 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 80063ec:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d058      	beq.n	80064a6 <HAL_UART_Transmit+0xd6>
 80063f4:	2301      	movs	r3, #1
 80063f6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006400:	2321      	movs	r3, #33	; 0x21
 8006402:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8006404:	f7fb fb60 	bl	8001ac8 <HAL_GetTick>
 8006408:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800640a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800640e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006412:	68a3      	ldr	r3, [r4, #8]
 8006414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006418:	d00d      	beq.n	8006436 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 800641a:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 800641e:	2300      	movs	r3, #0
 8006420:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8006424:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006428:	b29b      	uxth	r3, r3
 800642a:	b35b      	cbz	r3, 8006484 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642c:	f04f 0900 	mov.w	r9, #0
 8006430:	f04f 0880 	mov.w	r8, #128	; 0x80
 8006434:	e017      	b.n	8006466 <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	b913      	cbnz	r3, 8006440 <HAL_UART_Transmit+0x70>
      pdata16bits = (const uint16_t *) pData;
 800643a:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800643c:	2500      	movs	r5, #0
 800643e:	e7ee      	b.n	800641e <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 8006440:	f04f 0a00 	mov.w	sl, #0
 8006444:	e7eb      	b.n	800641e <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006446:	6822      	ldr	r2, [r4, #0]
 8006448:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800644c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006450:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006452:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8006456:	3a01      	subs	r2, #1
 8006458:	b292      	uxth	r2, r2
 800645a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800645e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006462:	b29b      	uxth	r3, r3
 8006464:	b173      	cbz	r3, 8006484 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006466:	9600      	str	r6, [sp, #0]
 8006468:	463b      	mov	r3, r7
 800646a:	464a      	mov	r2, r9
 800646c:	4641      	mov	r1, r8
 800646e:	4620      	mov	r0, r4
 8006470:	f7ff ff3f 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 8006474:	b9c8      	cbnz	r0, 80064aa <HAL_UART_Transmit+0xda>
      if (pdata8bits == NULL)
 8006476:	2d00      	cmp	r5, #0
 8006478:	d0e5      	beq.n	8006446 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006480:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006482:	e7e6      	b.n	8006452 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006484:	9600      	str	r6, [sp, #0]
 8006486:	463b      	mov	r3, r7
 8006488:	2200      	movs	r2, #0
 800648a:	2140      	movs	r1, #64	; 0x40
 800648c:	4620      	mov	r0, r4
 800648e:	f7ff ff30 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 8006492:	b960      	cbnz	r0, 80064ae <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8006494:	2320      	movs	r3, #32
 8006496:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8006498:	e000      	b.n	800649c <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 800649a:	2002      	movs	r0, #2
}
 800649c:	b002      	add	sp, #8
 800649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80064a2:	2001      	movs	r0, #1
 80064a4:	e7fa      	b.n	800649c <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80064a6:	2002      	movs	r0, #2
 80064a8:	e7f8      	b.n	800649c <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 80064aa:	2003      	movs	r0, #3
 80064ac:	e7f6      	b.n	800649c <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 80064ae:	2003      	movs	r0, #3
 80064b0:	e7f4      	b.n	800649c <HAL_UART_Transmit+0xcc>

080064b2 <UART_CheckIdleState>:
{
 80064b2:	b510      	push	{r4, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80064be:	f7fb fb03 	bl	8001ac8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f013 0f08 	tst.w	r3, #8
 80064ca:	d108      	bne.n	80064de <UART_CheckIdleState+0x2c>
  huart->gState = HAL_UART_STATE_READY;
 80064cc:	2320      	movs	r3, #32
 80064ce:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064d0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	2000      	movs	r0, #0
 80064d4:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80064d6:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 80064da:	b002      	add	sp, #8
 80064dc:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	4603      	mov	r3, r0
 80064e6:	2200      	movs	r2, #0
 80064e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff ff00 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d0ea      	beq.n	80064cc <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80064f6:	2003      	movs	r0, #3
 80064f8:	e7ef      	b.n	80064da <UART_CheckIdleState+0x28>

080064fa <HAL_UART_Init>:
  if (huart == NULL)
 80064fa:	b368      	cbz	r0, 8006558 <HAL_UART_Init+0x5e>
{
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006500:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006502:	b303      	cbz	r3, 8006546 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006504:	2324      	movs	r3, #36	; 0x24
 8006506:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006508:	6822      	ldr	r2, [r4, #0]
 800650a:	6813      	ldr	r3, [r2, #0]
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006512:	4620      	mov	r0, r4
 8006514:	f7ff fcc6 	bl	8005ea4 <UART_SetConfig>
 8006518:	2801      	cmp	r0, #1
 800651a:	d013      	beq.n	8006544 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800651e:	b9bb      	cbnz	r3, 8006550 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	6853      	ldr	r3, [r2, #4]
 8006524:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006528:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	6893      	ldr	r3, [r2, #8]
 800652e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006532:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006534:	6822      	ldr	r2, [r4, #0]
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	f043 0301 	orr.w	r3, r3, #1
 800653c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800653e:	4620      	mov	r0, r4
 8006540:	f7ff ffb7 	bl	80064b2 <UART_CheckIdleState>
}
 8006544:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006546:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800654a:	f7fb f8e5 	bl	8001718 <HAL_UART_MspInit>
 800654e:	e7d9      	b.n	8006504 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006550:	4620      	mov	r0, r4
 8006552:	f7ff fe69 	bl	8006228 <UART_AdvFeatureConfig>
 8006556:	e7e3      	b.n	8006520 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8006558:	2001      	movs	r0, #1
}
 800655a:	4770      	bx	lr

0800655c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800655c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655e:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006560:	4e3c      	ldr	r6, [pc, #240]	; (8006654 <MX_LWIP_Init+0xf8>)
 8006562:	21c0      	movs	r1, #192	; 0xc0
 8006564:	7031      	strb	r1, [r6, #0]
  IP_ADDRESS[1] = 168;
 8006566:	22a8      	movs	r2, #168	; 0xa8
 8006568:	7072      	strb	r2, [r6, #1]
  IP_ADDRESS[2] = 0;
 800656a:	2700      	movs	r7, #0
 800656c:	70b7      	strb	r7, [r6, #2]
  IP_ADDRESS[3] = 111;
 800656e:	236f      	movs	r3, #111	; 0x6f
 8006570:	70f3      	strb	r3, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 8006572:	4d39      	ldr	r5, [pc, #228]	; (8006658 <MX_LWIP_Init+0xfc>)
 8006574:	23ff      	movs	r3, #255	; 0xff
 8006576:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8006578:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[2] = 255;
 800657a:	70ab      	strb	r3, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 800657c:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 192;
 800657e:	4c37      	ldr	r4, [pc, #220]	; (800665c <MX_LWIP_Init+0x100>)
 8006580:	7021      	strb	r1, [r4, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006582:	7062      	strb	r2, [r4, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006584:	70a7      	strb	r7, [r4, #2]
  GATEWAY_ADDRESS[3] = 2;
 8006586:	2302      	movs	r3, #2
 8006588:	70e3      	strb	r3, [r4, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800658a:	4639      	mov	r1, r7
 800658c:	4638      	mov	r0, r7
 800658e:	f004 fd7f 	bl	800b090 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006592:	7833      	ldrb	r3, [r6, #0]
 8006594:	7872      	ldrb	r2, [r6, #1]
 8006596:	f896 c003 	ldrb.w	ip, [r6, #3]
 800659a:	78b0      	ldrb	r0, [r6, #2]
 800659c:	4930      	ldr	r1, [pc, #192]	; (8006660 <MX_LWIP_Init+0x104>)
 800659e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80065a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80065a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80065aa:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80065ac:	782b      	ldrb	r3, [r5, #0]
 80065ae:	7868      	ldrb	r0, [r5, #1]
 80065b0:	78ee      	ldrb	r6, [r5, #3]
 80065b2:	78ad      	ldrb	r5, [r5, #2]
 80065b4:	4a2b      	ldr	r2, [pc, #172]	; (8006664 <MX_LWIP_Init+0x108>)
 80065b6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80065ba:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80065be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80065c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80065c4:	7820      	ldrb	r0, [r4, #0]
 80065c6:	7865      	ldrb	r5, [r4, #1]
 80065c8:	78e6      	ldrb	r6, [r4, #3]
 80065ca:	78a4      	ldrb	r4, [r4, #2]
 80065cc:	4b26      	ldr	r3, [pc, #152]	; (8006668 <MX_LWIP_Init+0x10c>)
 80065ce:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 80065d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80065d6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80065da:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80065dc:	4c23      	ldr	r4, [pc, #140]	; (800666c <MX_LWIP_Init+0x110>)
 80065de:	4824      	ldr	r0, [pc, #144]	; (8006670 <MX_LWIP_Init+0x114>)
 80065e0:	9002      	str	r0, [sp, #8]
 80065e2:	4824      	ldr	r0, [pc, #144]	; (8006674 <MX_LWIP_Init+0x118>)
 80065e4:	9001      	str	r0, [sp, #4]
 80065e6:	9700      	str	r7, [sp, #0]
 80065e8:	4620      	mov	r0, r4
 80065ea:	f005 f98d 	bl	800b908 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80065ee:	4620      	mov	r0, r4
 80065f0:	f005 fa24 	bl	800ba3c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80065f4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80065f8:	f013 0f04 	tst.w	r3, #4
 80065fc:	d026      	beq.n	800664c <MX_LWIP_Init+0xf0>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80065fe:	4620      	mov	r0, r4
 8006600:	f005 fa22 	bl	800ba48 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006604:	4d19      	ldr	r5, [pc, #100]	; (800666c <MX_LWIP_Init+0x110>)
 8006606:	491c      	ldr	r1, [pc, #112]	; (8006678 <MX_LWIP_Init+0x11c>)
 8006608:	4628      	mov	r0, r5
 800660a:	f005 fa9d 	bl	800bb48 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800660e:	2200      	movs	r2, #0
 8006610:	2101      	movs	r1, #1
 8006612:	4608      	mov	r0, r1
 8006614:	f000 fc96 	bl	8006f44 <osSemaphoreNew>
 8006618:	4b18      	ldr	r3, [pc, #96]	; (800667c <MX_LWIP_Init+0x120>)
 800661a:	6018      	str	r0, [r3, #0]

  link_arg.netif = &gnetif;
 800661c:	4c18      	ldr	r4, [pc, #96]	; (8006680 <MX_LWIP_Init+0x124>)
 800661e:	6025      	str	r5, [r4, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006620:	6060      	str	r0, [r4, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006622:	4d18      	ldr	r5, [pc, #96]	; (8006684 <MX_LWIP_Init+0x128>)
 8006624:	2220      	movs	r2, #32
 8006626:	2100      	movs	r1, #0
 8006628:	4628      	mov	r0, r5
 800662a:	f00b ff90 	bl	801254e <memset>
  attributes.name = "LinkThr";
 800662e:	1f2a      	subs	r2, r5, #4
 8006630:	4b15      	ldr	r3, [pc, #84]	; (8006688 <MX_LWIP_Init+0x12c>)
 8006632:	f845 3c04 	str.w	r3, [r5, #-4]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663a:	6153      	str	r3, [r2, #20]
  attributes.priority = osPriorityBelowNormal;
 800663c:	2310      	movs	r3, #16
 800663e:	6193      	str	r3, [r2, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8006640:	4621      	mov	r1, r4
 8006642:	4812      	ldr	r0, [pc, #72]	; (800668c <MX_LWIP_Init+0x130>)
 8006644:	f000 fb46 	bl	8006cd4 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006648:	b005      	add	sp, #20
 800664a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 800664c:	4807      	ldr	r0, [pc, #28]	; (800666c <MX_LWIP_Init+0x110>)
 800664e:	f005 fa19 	bl	800ba84 <netif_set_down>
 8006652:	e7d7      	b.n	8006604 <MX_LWIP_Init+0xa8>
 8006654:	20013040 	.word	0x20013040
 8006658:	2001303c 	.word	0x2001303c
 800665c:	20012fdc 	.word	0x20012fdc
 8006660:	20013038 	.word	0x20013038
 8006664:	20013044 	.word	0x20013044
 8006668:	20013048 	.word	0x20013048
 800666c:	20013004 	.word	0x20013004
 8006670:	0800aff1 	.word	0x0800aff1
 8006674:	08006995 	.word	0x08006995
 8006678:	08006b69 	.word	0x08006b69
 800667c:	2000e19c 	.word	0x2000e19c
 8006680:	20012fd4 	.word	0x20012fd4
 8006684:	20012fe4 	.word	0x20012fe4
 8006688:	08013948 	.word	0x08013948
 800668c:	08006b15 	.word	0x08006b15

08006690 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b087      	sub	sp, #28
 8006696:	9005      	str	r0, [sp, #20]
        bufferoffset = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	e07c      	b.n	800679c <ethernetif_input+0x10c>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80066a2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80066a4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80066a8:	9d04      	ldr	r5, [sp, #16]
 80066aa:	4628      	mov	r0, r5
 80066ac:	f005 fbb0 	bl	800be10 <pbuf_alloc>
  if (p != NULL)
 80066b0:	4607      	mov	r7, r0
 80066b2:	9002      	str	r0, [sp, #8]
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d048      	beq.n	800674a <ethernetif_input+0xba>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80066b8:	46a2      	mov	sl, r4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80066ba:	4b3d      	ldr	r3, [pc, #244]	; (80067b0 <ethernetif_input+0x120>)
 80066bc:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80066c0:	f240 5bf4 	movw	fp, #1524	; 0x5f4
 80066c4:	e00c      	b.n	80066e0 <ethernetif_input+0x50>
 80066c6:	4629      	mov	r1, r5
 80066c8:	4625      	mov	r5, r4
      byteslefttocopy = q->len;
 80066ca:	461c      	mov	r4, r3
      payloadoffset = 0;
 80066cc:	2600      	movs	r6, #0
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4622      	mov	r2, r4
 80066d2:	4451      	add	r1, sl
 80066d4:	4430      	add	r0, r6
 80066d6:	f00b ff2c 	bl	8012532 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80066da:	683f      	ldr	r7, [r7, #0]
 80066dc:	2f00      	cmp	r7, #0
 80066de:	d034      	beq.n	800674a <ethernetif_input+0xba>
      byteslefttocopy = q->len;
 80066e0:	897b      	ldrh	r3, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80066e2:	195c      	adds	r4, r3, r5
 80066e4:	455c      	cmp	r4, fp
 80066e6:	d9ee      	bls.n	80066c6 <ethernetif_input+0x36>
      payloadoffset = 0;
 80066e8:	2600      	movs	r6, #0
 80066ea:	4651      	mov	r1, sl
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80066ec:	ebab 0905 	sub.w	r9, fp, r5
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	464a      	mov	r2, r9
 80066f4:	4429      	add	r1, r5
 80066f6:	4430      	add	r0, r6
 80066f8:	f00b ff1b 	bl	8012532 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80066fc:	f8d8 800c 	ldr.w	r8, [r8, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006700:	f8d8 1008 	ldr.w	r1, [r8, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006704:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006708:	444e      	add	r6, r9
        bufferoffset = 0;
 800670a:	9d01      	ldr	r5, [sp, #4]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800670c:	455c      	cmp	r4, fp
 800670e:	d8ed      	bhi.n	80066ec <ethernetif_input+0x5c>
 8006710:	468a      	mov	sl, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006712:	4625      	mov	r5, r4
        bufferoffset = 0;
 8006714:	9903      	ldr	r1, [sp, #12]
 8006716:	e7da      	b.n	80066ce <ethernetif_input+0x3e>
    {
      do
      {
        LOCK_TCPIP_CORE();
        p = low_level_input( netif );
        if   (p != NULL)
 8006718:	9802      	ldr	r0, [sp, #8]
 800671a:	2800      	cmp	r0, #0
 800671c:	d03b      	beq.n	8006796 <ethernetif_input+0x106>
        {
          if (netif->input( p, netif) != ERR_OK )
 800671e:	9905      	ldr	r1, [sp, #20]
 8006720:	690b      	ldr	r3, [r1, #16]
 8006722:	4798      	blx	r3
 8006724:	2800      	cmp	r0, #0
 8006726:	d132      	bne.n	800678e <ethernetif_input+0xfe>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8006728:	4822      	ldr	r0, [pc, #136]	; (80067b4 <ethernetif_input+0x124>)
 800672a:	f00b fda7 	bl	801227c <sys_mutex_unlock>
        LOCK_TCPIP_CORE();
 800672e:	4821      	ldr	r0, [pc, #132]	; (80067b4 <ethernetif_input+0x124>)
 8006730:	f00b fd9d 	bl	801226e <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006734:	481e      	ldr	r0, [pc, #120]	; (80067b0 <ethernetif_input+0x120>)
 8006736:	f7fc fdd1 	bl	80032dc <HAL_ETH_GetReceivedFrame_IT>
 800673a:	2800      	cmp	r0, #0
 800673c:	d12b      	bne.n	8006796 <ethernetif_input+0x106>
  len = heth.RxFrameInfos.length;
 800673e:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <ethernetif_input+0x120>)
 8006740:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  if (len > 0)
 8006742:	2900      	cmp	r1, #0
 8006744:	d1ad      	bne.n	80066a2 <ethernetif_input+0x12>
  struct pbuf *p = NULL;
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	9302      	str	r3, [sp, #8]
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800674a:	4a19      	ldr	r2, [pc, #100]	; (80067b0 <ethernetif_input+0x120>)
 800674c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800674e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006750:	b152      	cbz	r2, 8006768 <ethernetif_input+0xd8>
 8006752:	2100      	movs	r1, #0
 8006754:	4816      	ldr	r0, [pc, #88]	; (80067b0 <ethernetif_input+0x120>)
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800675c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800675e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006760:	3101      	adds	r1, #1
 8006762:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006764:	4291      	cmp	r1, r2
 8006766:	d3f6      	bcc.n	8006756 <ethernetif_input+0xc6>
    heth.RxFrameInfos.SegCount =0;
 8006768:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <ethernetif_input+0x120>)
 800676a:	2200      	movs	r2, #0
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f241 0214 	movw	r2, #4116	; 0x1014
 8006774:	589a      	ldr	r2, [r3, r2]
 8006776:	f012 0f80 	tst.w	r2, #128	; 0x80
 800677a:	d0cd      	beq.n	8006718 <ethernetif_input+0x88>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800677c:	f241 0214 	movw	r2, #4116	; 0x1014
 8006780:	2180      	movs	r1, #128	; 0x80
 8006782:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 8006784:	f241 0208 	movw	r2, #4104	; 0x1008
 8006788:	2100      	movs	r1, #0
 800678a:	5099      	str	r1, [r3, r2]
 800678c:	e7c4      	b.n	8006718 <ethernetif_input+0x88>
            pbuf_free(p);
 800678e:	9802      	ldr	r0, [sp, #8]
 8006790:	f005 face 	bl	800bd30 <pbuf_free>
 8006794:	e7c8      	b.n	8006728 <ethernetif_input+0x98>
        UNLOCK_TCPIP_CORE();
 8006796:	4807      	ldr	r0, [pc, #28]	; (80067b4 <ethernetif_input+0x124>)
 8006798:	f00b fd70 	bl	801227c <sys_mutex_unlock>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800679c:	4d06      	ldr	r5, [pc, #24]	; (80067b8 <ethernetif_input+0x128>)
 800679e:	f04f 34ff 	mov.w	r4, #4294967295
 80067a2:	4621      	mov	r1, r4
 80067a4:	6828      	ldr	r0, [r5, #0]
 80067a6:	f000 fc2f 	bl	8007008 <osSemaphoreAcquire>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d1f9      	bne.n	80067a2 <ethernetif_input+0x112>
 80067ae:	e7be      	b.n	800672e <ethernetif_input+0x9e>
 80067b0:	2001491c 	.word	0x2001491c
 80067b4:	20016174 	.word	0x20016174
 80067b8:	2000e1a0 	.word	0x2000e1a0

080067bc <low_level_output>:
{
 80067bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c0:	b083      	sub	sp, #12
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80067c2:	4b32      	ldr	r3, [pc, #200]	; (800688c <low_level_output+0xd0>)
 80067c4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	9300      	str	r3, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d03e      	beq.n	800684c <low_level_output+0x90>
 80067ce:	468b      	mov	fp, r1
  bufferoffset = 0;
 80067d0:	2600      	movs	r6, #0
  uint32_t framelength = 0;
 80067d2:	46b2      	mov	sl, r6
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80067d4:	f240 59f4 	movw	r9, #1524	; 0x5f4
        bufferoffset = 0;
 80067d8:	9601      	str	r6, [sp, #4]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	db3d      	blt.n	800685c <low_level_output+0xa0>
      byteslefttocopy = q->len;
 80067e0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80067e4:	199f      	adds	r7, r3, r6
 80067e6:	454f      	cmp	r7, r9
 80067e8:	d92a      	bls.n	8006840 <low_level_output+0x84>
      payloadoffset = 0;
 80067ea:	f04f 0800 	mov.w	r8, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80067ee:	eba9 0506 	sub.w	r5, r9, r6
 80067f2:	f8db 1004 	ldr.w	r1, [fp, #4]
 80067f6:	462a      	mov	r2, r5
 80067f8:	4441      	add	r1, r8
 80067fa:	9b00      	ldr	r3, [sp, #0]
 80067fc:	4433      	add	r3, r6
 80067fe:	4618      	mov	r0, r3
 8006800:	f00b fe97 	bl	8012532 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006804:	68e4      	ldr	r4, [r4, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	db2a      	blt.n	8006862 <low_level_output+0xa6>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	9300      	str	r3, [sp, #0]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006810:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006814:	44a8      	add	r8, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006816:	44aa      	add	sl, r5
        bufferoffset = 0;
 8006818:	9e01      	ldr	r6, [sp, #4]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800681a:	454f      	cmp	r7, r9
 800681c:	d8e7      	bhi.n	80067ee <low_level_output+0x32>
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800681e:	463e      	mov	r6, r7
        bufferoffset = 0;
 8006820:	2000      	movs	r0, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006822:	f8db 1004 	ldr.w	r1, [fp, #4]
 8006826:	463a      	mov	r2, r7
 8006828:	4441      	add	r1, r8
 800682a:	9b00      	ldr	r3, [sp, #0]
 800682c:	4418      	add	r0, r3
 800682e:	f00b fe80 	bl	8012532 <memcpy>
      framelength = framelength + byteslefttocopy;
 8006832:	44ba      	add	sl, r7
  for(q = p; q != NULL; q = q->next)
 8006834:	f8db b000 	ldr.w	fp, [fp]
 8006838:	f1bb 0f00 	cmp.w	fp, #0
 800683c:	d1cd      	bne.n	80067da <low_level_output+0x1e>
 800683e:	e007      	b.n	8006850 <low_level_output+0x94>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006840:	4630      	mov	r0, r6
 8006842:	463e      	mov	r6, r7
      byteslefttocopy = q->len;
 8006844:	461f      	mov	r7, r3
      payloadoffset = 0;
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	e7ea      	b.n	8006822 <low_level_output+0x66>
  uint32_t framelength = 0;
 800684c:	f04f 0a00 	mov.w	sl, #0
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006850:	4651      	mov	r1, sl
 8006852:	480e      	ldr	r0, [pc, #56]	; (800688c <low_level_output+0xd0>)
 8006854:	f7fc fcb0 	bl	80031b8 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8006858:	2000      	movs	r0, #0
 800685a:	e004      	b.n	8006866 <low_level_output+0xaa>
        errval = ERR_USE;
 800685c:	f06f 0007 	mvn.w	r0, #7
 8006860:	e001      	b.n	8006866 <low_level_output+0xaa>
          errval = ERR_USE;
 8006862:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <low_level_output+0xd0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f241 0214 	movw	r2, #4116	; 0x1014
 800686e:	589a      	ldr	r2, [r3, r2]
 8006870:	f012 0f20 	tst.w	r2, #32
 8006874:	d007      	beq.n	8006886 <low_level_output+0xca>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006876:	f241 0214 	movw	r2, #4116	; 0x1014
 800687a:	2120      	movs	r1, #32
 800687c:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800687e:	f241 0204 	movw	r2, #4100	; 0x1004
 8006882:	2100      	movs	r1, #0
 8006884:	5099      	str	r1, [r3, r2]
}
 8006886:	b003      	add	sp, #12
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	2001491c 	.word	0x2001491c

08006890 <HAL_ETH_MspInit>:
{
 8006890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006892:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006894:	2300      	movs	r3, #0
 8006896:	9307      	str	r3, [sp, #28]
 8006898:	9308      	str	r3, [sp, #32]
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	930a      	str	r3, [sp, #40]	; 0x28
 800689e:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80068a0:	6802      	ldr	r2, [r0, #0]
 80068a2:	4b34      	ldr	r3, [pc, #208]	; (8006974 <HAL_ETH_MspInit+0xe4>)
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <HAL_ETH_MspInit+0x1c>
}
 80068a8:	b00d      	add	sp, #52	; 0x34
 80068aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 80068ac:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80068b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
 80068b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ba:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80068be:	9201      	str	r2, [sp, #4]
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
 80068ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068cc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80068d0:	9202      	str	r2, [sp, #8]
 80068d2:	9a02      	ldr	r2, [sp, #8]
 80068d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
 80068dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068de:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80068e2:	9203      	str	r2, [sp, #12]
 80068e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80068e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
 80068ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80068f4:	9204      	str	r2, [sp, #16]
 80068f6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068fa:	f042 0204 	orr.w	r2, r2, #4
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006902:	f002 0204 	and.w	r2, r2, #4
 8006906:	9205      	str	r2, [sp, #20]
 8006908:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800690a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690c:	f042 0201 	orr.w	r2, r2, #1
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	9306      	str	r3, [sp, #24]
 800691a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800691c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8006920:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006922:	2702      	movs	r7, #2
 8006924:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006926:	2400      	movs	r4, #0
 8006928:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800692a:	2603      	movs	r6, #3
 800692c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800692e:	250b      	movs	r5, #11
 8006930:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006932:	a907      	add	r1, sp, #28
 8006934:	4810      	ldr	r0, [pc, #64]	; (8006978 <HAL_ETH_MspInit+0xe8>)
 8006936:	f7fd f827 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800693a:	2332      	movs	r3, #50	; 0x32
 800693c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006942:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006944:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006946:	a907      	add	r1, sp, #28
 8006948:	480c      	ldr	r0, [pc, #48]	; (800697c <HAL_ETH_MspInit+0xec>)
 800694a:	f7fd f81d 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800694e:	2386      	movs	r3, #134	; 0x86
 8006950:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006952:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006956:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006958:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800695a:	a907      	add	r1, sp, #28
 800695c:	4808      	ldr	r0, [pc, #32]	; (8006980 <HAL_ETH_MspInit+0xf0>)
 800695e:	f7fd f813 	bl	8003988 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006962:	4622      	mov	r2, r4
 8006964:	2105      	movs	r1, #5
 8006966:	203d      	movs	r0, #61	; 0x3d
 8006968:	f7fb f8da 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800696c:	203d      	movs	r0, #61	; 0x3d
 800696e:	f7fb f907 	bl	8001b80 <HAL_NVIC_EnableIRQ>
}
 8006972:	e799      	b.n	80068a8 <HAL_ETH_MspInit+0x18>
 8006974:	40028000 	.word	0x40028000
 8006978:	40021800 	.word	0x40021800
 800697c:	40020800 	.word	0x40020800
 8006980:	40020000 	.word	0x40020000

08006984 <HAL_ETH_RxCpltCallback>:
{
 8006984:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 8006986:	4b02      	ldr	r3, [pc, #8]	; (8006990 <HAL_ETH_RxCpltCallback+0xc>)
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f000 fb81 	bl	8007090 <osSemaphoreRelease>
}
 800698e:	bd08      	pop	{r3, pc}
 8006990:	2000e1a0 	.word	0x2000e1a0

08006994 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006994:	b530      	push	{r4, r5, lr}
 8006996:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006998:	4604      	mov	r4, r0
 800699a:	2800      	cmp	r0, #0
 800699c:	f000 8092 	beq.w	8006ac4 <ethernetif_init+0x130>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80069a0:	2373      	movs	r3, #115	; 0x73
 80069a2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80069a6:	2374      	movs	r3, #116	; 0x74
 80069a8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80069ac:	4b49      	ldr	r3, [pc, #292]	; (8006ad4 <ethernetif_init+0x140>)
 80069ae:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80069b0:	4b49      	ldr	r3, [pc, #292]	; (8006ad8 <ethernetif_init+0x144>)
 80069b2:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	9300      	str	r3, [sp, #0]
  heth.Instance = ETH;
 80069b8:	4848      	ldr	r0, [pc, #288]	; (8006adc <ethernetif_init+0x148>)
 80069ba:	4a49      	ldr	r2, [pc, #292]	; (8006ae0 <ethernetif_init+0x14c>)
 80069bc:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80069be:	2201      	movs	r2, #1
 80069c0:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80069c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069c6:	6081      	str	r1, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80069c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069cc:	60c1      	str	r1, [r0, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80069ce:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 80069d0:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[1] = 0x80;
 80069d4:	2180      	movs	r1, #128	; 0x80
 80069d6:	f88d 1005 	strb.w	r1, [sp, #5]
  MACAddr[2] = 0xE1;
 80069da:	21e1      	movs	r1, #225	; 0xe1
 80069dc:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x00;
 80069e0:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 80069e4:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 80069e8:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 80069ec:	a901      	add	r1, sp, #4
 80069ee:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80069f0:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80069f2:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80069f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80069f8:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80069fa:	f7fc fd7d 	bl	80034f8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80069fe:	b928      	cbnz	r0, 8006a0c <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006a00:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006a04:	f043 0304 	orr.w	r3, r3, #4
 8006a08:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006a0c:	4d33      	ldr	r5, [pc, #204]	; (8006adc <ethernetif_init+0x148>)
 8006a0e:	2304      	movs	r3, #4
 8006a10:	4a34      	ldr	r2, [pc, #208]	; (8006ae4 <ethernetif_init+0x150>)
 8006a12:	4935      	ldr	r1, [pc, #212]	; (8006ae8 <ethernetif_init+0x154>)
 8006a14:	4628      	mov	r0, r5
 8006a16:	f7fc fb58 	bl	80030ca <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	4a33      	ldr	r2, [pc, #204]	; (8006aec <ethernetif_init+0x158>)
 8006a1e:	4934      	ldr	r1, [pc, #208]	; (8006af0 <ethernetif_init+0x15c>)
 8006a20:	4628      	mov	r0, r5
 8006a22:	f7fc fb8f 	bl	8003144 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006a26:	2306      	movs	r3, #6
 8006a28:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006a2c:	696b      	ldr	r3, [r5, #20]
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006a34:	785a      	ldrb	r2, [r3, #1]
 8006a36:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006a3a:	789a      	ldrb	r2, [r3, #2]
 8006a3c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006a40:	78da      	ldrb	r2, [r3, #3]
 8006a42:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006a46:	791a      	ldrb	r2, [r3, #4]
 8006a48:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006a4c:	795b      	ldrb	r3, [r3, #5]
 8006a4e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = 1500;
 8006a52:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8006a56:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006a58:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006a5c:	f043 030a 	orr.w	r3, r3, #10
 8006a60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8006a64:	2200      	movs	r2, #0
 8006a66:	2101      	movs	r1, #1
 8006a68:	4608      	mov	r0, r1
 8006a6a:	f000 fa6b 	bl	8006f44 <osSemaphoreNew>
 8006a6e:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <ethernetif_init+0x160>)
 8006a70:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006a72:	2220      	movs	r2, #32
 8006a74:	2100      	movs	r1, #0
 8006a76:	a804      	add	r0, sp, #16
 8006a78:	f00b fd69 	bl	801254e <memset>
  attributes.name = "EthIf";
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <ethernetif_init+0x164>)
 8006a7e:	9303      	str	r3, [sp, #12]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006a80:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8006a84:	9308      	str	r3, [sp, #32]
  attributes.priority = osPriorityRealtime;
 8006a86:	2330      	movs	r3, #48	; 0x30
 8006a88:	9309      	str	r3, [sp, #36]	; 0x24
  osThreadNew(ethernetif_input, netif, &attributes);
 8006a8a:	aa03      	add	r2, sp, #12
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	481b      	ldr	r0, [pc, #108]	; (8006afc <ethernetif_init+0x168>)
 8006a90:	f000 f920 	bl	8006cd4 <osThreadNew>
  HAL_ETH_Start(&heth);
 8006a94:	4628      	mov	r0, r5
 8006a96:	f7fc fe57 	bl	8003748 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006a9a:	466a      	mov	r2, sp
 8006a9c:	211d      	movs	r1, #29
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7fc fcb6 	bl	8003410 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006aa4:	9a00      	ldr	r2, [sp, #0]
 8006aa6:	f042 020b 	orr.w	r2, r2, #11
 8006aaa:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006aac:	211d      	movs	r1, #29
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f7fc fce8 	bl	8003484 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006ab4:	466a      	mov	r2, sp
 8006ab6:	211d      	movs	r1, #29
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7fc fca9 	bl	8003410 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8006abe:	2000      	movs	r0, #0
 8006ac0:	b00d      	add	sp, #52	; 0x34
 8006ac2:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <ethernetif_init+0x16c>)
 8006ac6:	f240 2231 	movw	r2, #561	; 0x231
 8006aca:	490e      	ldr	r1, [pc, #56]	; (8006b04 <ethernetif_init+0x170>)
 8006acc:	480e      	ldr	r0, [pc, #56]	; (8006b08 <ethernetif_init+0x174>)
 8006ace:	f00b fda1 	bl	8012614 <iprintf>
 8006ad2:	e765      	b.n	80069a0 <ethernetif_init+0xc>
 8006ad4:	08011011 	.word	0x08011011
 8006ad8:	080067bd 	.word	0x080067bd
 8006adc:	2001491c 	.word	0x2001491c
 8006ae0:	40028000 	.word	0x40028000
 8006ae4:	20014964 	.word	0x20014964
 8006ae8:	2001304c 	.word	0x2001304c
 8006aec:	200130cc 	.word	0x200130cc
 8006af0:	2001489c 	.word	0x2001489c
 8006af4:	2000e1a0 	.word	0x2000e1a0
 8006af8:	080139a4 	.word	0x080139a4
 8006afc:	08006691 	.word	0x08006691
 8006b00:	08013950 	.word	0x08013950
 8006b04:	0801396c 	.word	0x0801396c
 8006b08:	0801397c 	.word	0x0801397c

08006b0c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006b0c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8006b0e:	f7fa ffdb 	bl	8001ac8 <HAL_GetTick>
}
 8006b12:	bd08      	pop	{r3, pc}

08006b14 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006b1e:	4e10      	ldr	r6, [pc, #64]	; (8006b60 <ethernetif_set_link+0x4c>)
 8006b20:	2501      	movs	r5, #1
 8006b22:	e004      	b.n	8006b2e <ethernetif_set_link+0x1a>

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006b24:	f004 ffce 	bl	800bac4 <netif_set_link_up>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006b28:	20c8      	movs	r0, #200	; 0xc8
 8006b2a:	f000 f92b 	bl	8006d84 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006b2e:	aa01      	add	r2, sp, #4
 8006b30:	4629      	mov	r1, r5
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7fc fc6c 	bl	8003410 <HAL_ETH_ReadPHYRegister>
    regvalue &= PHY_LINKED_STATUS;
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8006b46:	f012 0f04 	tst.w	r2, #4
 8006b4a:	d101      	bne.n	8006b50 <ethernetif_set_link+0x3c>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e9      	bne.n	8006b24 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006b50:	f012 0f04 	tst.w	r2, #4
 8006b54:	d0e8      	beq.n	8006b28 <ethernetif_set_link+0x14>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <ethernetif_set_link+0x14>
      netif_set_link_down(link_arg->netif);
 8006b5a:	f004 ffd7 	bl	800bb0c <netif_set_link_down>
 8006b5e:	e7e3      	b.n	8006b28 <ethernetif_set_link+0x14>
 8006b60:	2001491c 	.word	0x2001491c

08006b64 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006b64:	4770      	bx	lr
	...

08006b68 <ethernetif_update_config>:
{
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 8006b72:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 8006b74:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006b78:	f013 0f04 	tst.w	r3, #4
 8006b7c:	d04c      	beq.n	8006c18 <ethernetif_update_config+0xb0>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006b7e:	4b28      	ldr	r3, [pc, #160]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b393      	cbz	r3, 8006bea <ethernetif_update_config+0x82>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4825      	ldr	r0, [pc, #148]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006b8c:	f7fc fc7a 	bl	8003484 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8006b90:	f7fa ff9a 	bl	8001ac8 <HAL_GetTick>
 8006b94:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006b96:	4e22      	ldr	r6, [pc, #136]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006b98:	2501      	movs	r5, #1
 8006b9a:	466a      	mov	r2, sp
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7fc fc36 	bl	8003410 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8006ba4:	f7fa ff90 	bl	8001ac8 <HAL_GetTick>
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	1ac3      	subs	r3, r0, r3
 8006bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bb0:	d81b      	bhi.n	8006bea <ethernetif_update_config+0x82>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006bb2:	9b00      	ldr	r3, [sp, #0]
 8006bb4:	f013 0f20 	tst.w	r3, #32
 8006bb8:	d0ef      	beq.n	8006b9a <ethernetif_update_config+0x32>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006bba:	466a      	mov	r2, sp
 8006bbc:	2110      	movs	r1, #16
 8006bbe:	4818      	ldr	r0, [pc, #96]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006bc0:	f7fc fc26 	bl	8003410 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006bc4:	9b00      	ldr	r3, [sp, #0]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006bc6:	f013 0204 	ands.w	r2, r3, #4
 8006bca:	bf18      	it	ne
 8006bcc:	f44f 6200 	movne.w	r2, #2048	; 0x800
 8006bd0:	4913      	ldr	r1, [pc, #76]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006bd2:	60ca      	str	r2, [r1, #12]
      if(regvalue & PHY_SPEED_STATUS)
 8006bd4:	f013 0f02 	tst.w	r3, #2
 8006bd8:	d002      	beq.n	8006be0 <ethernetif_update_config+0x78>
        heth.Init.Speed = ETH_SPEED_10M;
 8006bda:	2200      	movs	r2, #0
 8006bdc:	608a      	str	r2, [r1, #8]
 8006bde:	e00e      	b.n	8006bfe <ethernetif_update_config+0x96>
        heth.Init.Speed = ETH_SPEED_100M;
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006be6:	609a      	str	r2, [r3, #8]
 8006be8:	e009      	b.n	8006bfe <ethernetif_update_config+0x96>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006bea:	480d      	ldr	r0, [pc, #52]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006bec:	68c2      	ldr	r2, [r0, #12]
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006bee:	6883      	ldr	r3, [r0, #8]
 8006bf0:	085b      	lsrs	r3, r3, #1
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006bf2:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8006bf6:	b292      	uxth	r2, r2
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f7fc fc43 	bl	8003484 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006bfe:	4d08      	ldr	r5, [pc, #32]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006c00:	2100      	movs	r1, #0
 8006c02:	4628      	mov	r0, r5
 8006c04:	f7fc fe28 	bl	8003858 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7fc fd9d 	bl	8003748 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff ffa8 	bl	8006b64 <ethernetif_notify_conn_changed>
}
 8006c14:	b002      	add	sp, #8
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_Stop(&heth);
 8006c18:	4801      	ldr	r0, [pc, #4]	; (8006c20 <ethernetif_update_config+0xb8>)
 8006c1a:	f7fc fdd9 	bl	80037d0 <HAL_ETH_Stop>
 8006c1e:	e7f6      	b.n	8006c0e <ethernetif_update_config+0xa6>
 8006c20:	2001491c 	.word	0x2001491c

08006c24 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c24:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c28:	b97b      	cbnz	r3, 8006c4a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2e:	b913      	cbnz	r3, 8006c36 <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c30:	f3ef 8311 	mrs	r3, BASEPRI
 8006c34:	b11b      	cbz	r3, 8006c3e <osKernelInitialize+0x1a>
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <osKernelInitialize+0x38>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d008      	beq.n	8006c50 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <osKernelInitialize+0x38>)
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	b940      	cbnz	r0, 8006c56 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c48:	4770      	bx	lr
    stat = osErrorISR;
 8006c4a:	f06f 0005 	mvn.w	r0, #5
 8006c4e:	4770      	bx	lr
 8006c50:	f06f 0005 	mvn.w	r0, #5
 8006c54:	4770      	bx	lr
    } else {
      stat = osError;
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006c5a:	4770      	bx	lr
 8006c5c:	2000e460 	.word	0x2000e460

08006c60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c60:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c62:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c66:	b9a3      	cbnz	r3, 8006c92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c68:	f3ef 8310 	mrs	r3, PRIMASK
 8006c6c:	b913      	cbnz	r3, 8006c74 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c72:	b11b      	cbz	r3, 8006c7c <osKernelStart+0x1c>
 8006c74:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <osKernelStart+0x44>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d00d      	beq.n	8006c98 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <osKernelStart+0x44>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10c      	bne.n	8006c9e <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <osKernelStart+0x44>)
 8006c86:	2202      	movs	r2, #2
 8006c88:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c8a:	f001 fc1d 	bl	80084c8 <vTaskStartScheduler>
      stat = osOK;
 8006c8e:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8006c90:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006c92:	f06f 0005 	mvn.w	r0, #5
 8006c96:	e7fb      	b.n	8006c90 <osKernelStart+0x30>
 8006c98:	f06f 0005 	mvn.w	r0, #5
 8006c9c:	e7f8      	b.n	8006c90 <osKernelStart+0x30>
      stat = osError;
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006ca2:	e7f5      	b.n	8006c90 <osKernelStart+0x30>
 8006ca4:	2000e460 	.word	0x2000e460

08006ca8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006ca8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006caa:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8006cae:	b963      	cbnz	r3, 8006cca <osKernelGetTickCount+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb4:	b913      	cbnz	r3, 8006cbc <osKernelGetTickCount+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cba:	b11b      	cbz	r3, 8006cc4 <osKernelGetTickCount+0x1c>
 8006cbc:	4b04      	ldr	r3, [pc, #16]	; (8006cd0 <osKernelGetTickCount+0x28>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d002      	beq.n	8006cca <osKernelGetTickCount+0x22>
    ticks = xTaskGetTickCountFromISR();
  } else {
    ticks = xTaskGetTickCount();
 8006cc4:	f001 fc5a 	bl	800857c <xTaskGetTickCount>
  }

  return (ticks);
 8006cc8:	e001      	b.n	8006cce <osKernelGetTickCount+0x26>
    ticks = xTaskGetTickCountFromISR();
 8006cca:	f001 fc5d 	bl	8008588 <xTaskGetTickCountFromISR>
}
 8006cce:	bd08      	pop	{r3, pc}
 8006cd0:	2000e460 	.word	0x2000e460

08006cd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cda:	2200      	movs	r2, #0
 8006cdc:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cde:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006ce2:	bb72      	cbnz	r2, 8006d42 <osThreadNew+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce8:	b913      	cbnz	r3, 8006cf0 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cea:	f3ef 8311 	mrs	r3, BASEPRI
 8006cee:	b11b      	cbz	r3, 8006cf8 <osThreadNew+0x24>
 8006cf0:	4b23      	ldr	r3, [pc, #140]	; (8006d80 <osThreadNew+0xac>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d024      	beq.n	8006d42 <osThreadNew+0x6e>
 8006cf8:	b318      	cbz	r0, 8006d42 <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006cfa:	2c00      	cmp	r4, #0
 8006cfc:	d02e      	beq.n	8006d5c <osThreadNew+0x88>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006cfe:	69a3      	ldr	r3, [r4, #24]
 8006d00:	b12b      	cbz	r3, 8006d0e <osThreadNew+0x3a>
        prio = (UBaseType_t)attr->priority;
 8006d02:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d04:	3b01      	subs	r3, #1
 8006d06:	2b37      	cmp	r3, #55	; 0x37
 8006d08:	d902      	bls.n	8006d10 <osThreadNew+0x3c>
        return (NULL);
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	e01a      	b.n	8006d44 <osThreadNew+0x70>
 8006d0e:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	f013 0f01 	tst.w	r3, #1
 8006d16:	d130      	bne.n	8006d7a <osThreadNew+0xa6>
      }

      if (attr->stack_size > 0U) {
 8006d18:	6963      	ldr	r3, [r4, #20]
 8006d1a:	b1ab      	cbz	r3, 8006d48 <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d1c:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8006d1e:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d22:	68a6      	ldr	r6, [r4, #8]
 8006d24:	b196      	cbz	r6, 8006d4c <osThreadNew+0x78>
 8006d26:	68e7      	ldr	r7, [r4, #12]
 8006d28:	2fbb      	cmp	r7, #187	; 0xbb
 8006d2a:	d90a      	bls.n	8006d42 <osThreadNew+0x6e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d2c:	6924      	ldr	r4, [r4, #16]
 8006d2e:	b143      	cbz	r3, 8006d42 <osThreadNew+0x6e>
 8006d30:	b13c      	cbz	r4, 8006d42 <osThreadNew+0x6e>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d32:	9602      	str	r6, [sp, #8]
 8006d34:	9401      	str	r4, [sp, #4]
 8006d36:	9500      	str	r5, [sp, #0]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4661      	mov	r1, ip
 8006d3c:	f001 fb52 	bl	80083e4 <xTaskCreateStatic>
 8006d40:	9005      	str	r0, [sp, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d42:	9805      	ldr	r0, [sp, #20]
}
 8006d44:	b007      	add	sp, #28
 8006d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	e7e8      	b.n	8006d1e <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d4c:	68e3      	ldr	r3, [r4, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f7      	bne.n	8006d42 <osThreadNew+0x6e>
      if (mem == 0) {
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f4      	bne.n	8006d42 <osThreadNew+0x6e>
 8006d58:	4664      	mov	r4, ip
 8006d5a:	e001      	b.n	8006d60 <osThreadNew+0x8c>
    prio  = (UBaseType_t)osPriorityNormal;
 8006d5c:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8006d5e:	2280      	movs	r2, #128	; 0x80
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d60:	ab05      	add	r3, sp, #20
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	9500      	str	r5, [sp, #0]
 8006d66:	460b      	mov	r3, r1
 8006d68:	b292      	uxth	r2, r2
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	f001 fb7a 	bl	8008464 <xTaskCreate>
 8006d70:	2801      	cmp	r0, #1
 8006d72:	d0e6      	beq.n	8006d42 <osThreadNew+0x6e>
          hTask = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	e7e3      	b.n	8006d42 <osThreadNew+0x6e>
        return (NULL);
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e7e2      	b.n	8006d44 <osThreadNew+0x70>
 8006d7e:	bf00      	nop
 8006d80:	2000e460 	.word	0x2000e460

08006d84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006d84:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d86:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d8a:	b983      	cbnz	r3, 8006dae <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d90:	b913      	cbnz	r3, 8006d98 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d92:	f3ef 8311 	mrs	r3, BASEPRI
 8006d96:	b11b      	cbz	r3, 8006da0 <osDelay+0x1c>
 8006d98:	4b08      	ldr	r3, [pc, #32]	; (8006dbc <osDelay+0x38>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d009      	beq.n	8006db4 <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006da0:	b908      	cbnz	r0, 8006da6 <osDelay+0x22>
    stat = osOK;
 8006da2:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006da4:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8006da6:	f001 fd15 	bl	80087d4 <vTaskDelay>
    stat = osOK;
 8006daa:	2000      	movs	r0, #0
 8006dac:	e7fa      	b.n	8006da4 <osDelay+0x20>
    stat = osErrorISR;
 8006dae:	f06f 0005 	mvn.w	r0, #5
 8006db2:	e7f7      	b.n	8006da4 <osDelay+0x20>
 8006db4:	f06f 0005 	mvn.w	r0, #5
 8006db8:	e7f4      	b.n	8006da4 <osDelay+0x20>
 8006dba:	bf00      	nop
 8006dbc:	2000e460 	.word	0x2000e460

08006dc0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006dc0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc2:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	d140      	bne.n	8006e4c <osMutexNew+0x8c>
 8006dca:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd0:	b913      	cbnz	r3, 8006dd8 <osMutexNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd6:	b11b      	cbz	r3, 8006de0 <osMutexNew+0x20>
 8006dd8:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <osMutexNew+0x9c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d038      	beq.n	8006e52 <osMutexNew+0x92>
    if (attr != NULL) {
 8006de0:	b37c      	cbz	r4, 8006e42 <osMutexNew+0x82>
      type = attr->attr_bits;
 8006de2:	6863      	ldr	r3, [r4, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006de4:	f013 0f08 	tst.w	r3, #8
 8006de8:	d135      	bne.n	8006e56 <osMutexNew+0x96>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006dea:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 8006dee:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006df0:	68a1      	ldr	r1, [r4, #8]
 8006df2:	b121      	cbz	r1, 8006dfe <osMutexNew+0x3e>
 8006df4:	68e2      	ldr	r2, [r4, #12]
 8006df6:	2a4f      	cmp	r2, #79	; 0x4f
 8006df8:	d80d      	bhi.n	8006e16 <osMutexNew+0x56>
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	e027      	b.n	8006e4e <osMutexNew+0x8e>
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8006dfe:	68e2      	ldr	r2, [r4, #12]
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	d1fa      	bne.n	8006dfa <osMutexNew+0x3a>
          if (rmtx != 0U) {
 8006e04:	b1eb      	cbz	r3, 8006e42 <osMutexNew+0x82>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006e06:	2004      	movs	r0, #4
 8006e08:	f000 fdae 	bl	8007968 <xQueueCreateMutex>
 8006e0c:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006e0e:	2d00      	cmp	r5, #0
 8006e10:	d0f3      	beq.n	8006dfa <osMutexNew+0x3a>
        if (attr != NULL) {
 8006e12:	b93c      	cbnz	r4, 8006e24 <osMutexNew+0x64>
 8006e14:	e007      	b.n	8006e26 <osMutexNew+0x66>
        if (rmtx != 0U) {
 8006e16:	b17b      	cbz	r3, 8006e38 <osMutexNew+0x78>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006e18:	2004      	movs	r0, #4
 8006e1a:	f000 fdb0 	bl	800797e <xQueueCreateMutexStatic>
 8006e1e:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	d0ea      	beq.n	8006dfa <osMutexNew+0x3a>
          name = attr->name;
 8006e24:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f001 f8df 	bl	8007fec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006e2e:	b175      	cbz	r5, 8006e4e <osMutexNew+0x8e>
 8006e30:	b16e      	cbz	r6, 8006e4e <osMutexNew+0x8e>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006e32:	f045 0501 	orr.w	r5, r5, #1
 8006e36:	e00a      	b.n	8006e4e <osMutexNew+0x8e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f000 fda0 	bl	800797e <xQueueCreateMutexStatic>
 8006e3e:	4605      	mov	r5, r0
 8006e40:	e7ee      	b.n	8006e20 <osMutexNew+0x60>
            hMutex = xSemaphoreCreateMutex ();
 8006e42:	2001      	movs	r0, #1
 8006e44:	f000 fd90 	bl	8007968 <xQueueCreateMutex>
 8006e48:	4605      	mov	r5, r0
 8006e4a:	e7e0      	b.n	8006e0e <osMutexNew+0x4e>
  hMutex = NULL;
 8006e4c:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006e4e:	4628      	mov	r0, r5
 8006e50:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8006e52:	2500      	movs	r5, #0
 8006e54:	e7fb      	b.n	8006e4e <osMutexNew+0x8e>
 8006e56:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8006e58:	e7f9      	b.n	8006e4e <osMutexNew+0x8e>
 8006e5a:	bf00      	nop
 8006e5c:	2000e460 	.word	0x2000e460

08006e60 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e60:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006e64:	bb52      	cbnz	r2, 8006ebc <osMutexAcquire+0x5c>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006e66:	b510      	push	{r4, lr}
 8006e68:	4603      	mov	r3, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f020 0001 	bic.w	r0, r0, #1
 8006e70:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e74:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006e78:	b912      	cbnz	r2, 8006e80 <osMutexAcquire+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e7e:	b11a      	cbz	r2, 8006e88 <osMutexAcquire+0x28>
 8006e80:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <osMutexAcquire+0x78>)
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	2a02      	cmp	r2, #2
 8006e86:	d01c      	beq.n	8006ec2 <osMutexAcquire+0x62>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006e88:	b1f0      	cbz	r0, 8006ec8 <osMutexAcquire+0x68>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8006e8a:	b15b      	cbz	r3, 8006ea4 <osMutexAcquire+0x44>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	f001 f80b 	bl	8007ea8 <xQueueTakeMutexRecursive>
 8006e92:	2801      	cmp	r0, #1
 8006e94:	d01b      	beq.n	8006ece <osMutexAcquire+0x6e>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	f06f 0001 	mvnne.w	r0, #1
 8006e9e:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006ea2:	bd10      	pop	{r4, pc}
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	f000 ff1f 	bl	8007ce8 <xQueueSemaphoreTake>
 8006eaa:	2801      	cmp	r0, #1
 8006eac:	d011      	beq.n	8006ed2 <osMutexAcquire+0x72>
          stat = osErrorResource;
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	bf14      	ite	ne
 8006eb2:	f06f 0001 	mvnne.w	r0, #1
 8006eb6:	f06f 0002 	mvneq.w	r0, #2
 8006eba:	e7f2      	b.n	8006ea2 <osMutexAcquire+0x42>
    stat = osErrorISR;
 8006ebc:	f06f 0005 	mvn.w	r0, #5
}
 8006ec0:	4770      	bx	lr
    stat = osErrorISR;
 8006ec2:	f06f 0005 	mvn.w	r0, #5
 8006ec6:	e7ec      	b.n	8006ea2 <osMutexAcquire+0x42>
    stat = osErrorParameter;
 8006ec8:	f06f 0003 	mvn.w	r0, #3
 8006ecc:	e7e9      	b.n	8006ea2 <osMutexAcquire+0x42>
  stat = osOK;
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e7e7      	b.n	8006ea2 <osMutexAcquire+0x42>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e7e5      	b.n	8006ea2 <osMutexAcquire+0x42>
 8006ed6:	bf00      	nop
 8006ed8:	2000e460 	.word	0x2000e460

08006edc <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006edc:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006ee0:	bb22      	cbnz	r2, 8006f2c <osMutexRelease+0x50>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006ee2:	b508      	push	{r3, lr}
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f020 0001 	bic.w	r0, r0, #1
 8006eea:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eee:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006ef2:	b912      	cbnz	r2, 8006efa <osMutexRelease+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ef4:	f3ef 8211 	mrs	r2, BASEPRI
 8006ef8:	b11a      	cbz	r2, 8006f02 <osMutexRelease+0x26>
 8006efa:	4a11      	ldr	r2, [pc, #68]	; (8006f40 <osMutexRelease+0x64>)
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	2a02      	cmp	r2, #2
 8006f00:	d017      	beq.n	8006f32 <osMutexRelease+0x56>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006f02:	b1c8      	cbz	r0, 8006f38 <osMutexRelease+0x5c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8006f04:	b13b      	cbz	r3, 8006f16 <osMutexRelease+0x3a>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006f06:	f000 fd49 	bl	800799c <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 8006f0a:	2801      	cmp	r0, #1
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2000      	moveq	r0, #0
 8006f10:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006f14:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006f16:	2300      	movs	r3, #0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	f000 fc48 	bl	80077b0 <xQueueGenericSend>
        stat = osErrorResource;
 8006f20:	2801      	cmp	r0, #1
 8006f22:	bf0c      	ite	eq
 8006f24:	2000      	moveq	r0, #0
 8006f26:	f06f 0002 	mvnne.w	r0, #2
 8006f2a:	e7f3      	b.n	8006f14 <osMutexRelease+0x38>
    stat = osErrorISR;
 8006f2c:	f06f 0005 	mvn.w	r0, #5
}
 8006f30:	4770      	bx	lr
    stat = osErrorISR;
 8006f32:	f06f 0005 	mvn.w	r0, #5
 8006f36:	e7ed      	b.n	8006f14 <osMutexRelease+0x38>
    stat = osErrorParameter;
 8006f38:	f06f 0003 	mvn.w	r0, #3
 8006f3c:	e7ea      	b.n	8006f14 <osMutexRelease+0x38>
 8006f3e:	bf00      	nop
 8006f40:	2000e460 	.word	0x2000e460

08006f44 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f48:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006f4c:	bbcb      	cbnz	r3, 8006fc2 <osSemaphoreNew+0x7e>
 8006f4e:	460e      	mov	r6, r1
 8006f50:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f52:	f3ef 8310 	mrs	r3, PRIMASK
 8006f56:	b913      	cbnz	r3, 8006f5e <osSemaphoreNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f58:	f3ef 8311 	mrs	r3, BASEPRI
 8006f5c:	b11b      	cbz	r3, 8006f66 <osSemaphoreNew+0x22>
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <osSemaphoreNew+0xc0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d031      	beq.n	8006fca <osSemaphoreNew+0x86>
 8006f66:	b390      	cbz	r0, 8006fce <osSemaphoreNew+0x8a>
 8006f68:	42b0      	cmp	r0, r6
 8006f6a:	d330      	bcc.n	8006fce <osSemaphoreNew+0x8a>
    mem = -1;

    if (attr != NULL) {
 8006f6c:	b38c      	cbz	r4, 8006fd2 <osSemaphoreNew+0x8e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f6e:	68a5      	ldr	r5, [r4, #8]
 8006f70:	b125      	cbz	r5, 8006f7c <osSemaphoreNew+0x38>
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	2b4f      	cmp	r3, #79	; 0x4f
 8006f76:	d83b      	bhi.n	8006ff0 <osSemaphoreNew+0xac>
  hSemaphore = NULL;
 8006f78:	2500      	movs	r5, #0
 8006f7a:	e023      	b.n	8006fc4 <osSemaphoreNew+0x80>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f7c:	68e3      	ldr	r3, [r4, #12]
 8006f7e:	bb0b      	cbnz	r3, 8006fc4 <osSemaphoreNew+0x80>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8006f80:	2801      	cmp	r0, #1
 8006f82:	d128      	bne.n	8006fd6 <osSemaphoreNew+0x92>
        if (mem == 1) {
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006f84:	2203      	movs	r2, #3
 8006f86:	2100      	movs	r1, #0
 8006f88:	2001      	movs	r0, #1
 8006f8a:	f000 fb9a 	bl	80076c2 <xQueueGenericCreate>
 8006f8e:	4605      	mov	r5, r0
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006f90:	b32d      	cbz	r5, 8006fde <osSemaphoreNew+0x9a>
 8006f92:	b326      	cbz	r6, 8006fde <osSemaphoreNew+0x9a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f94:	2300      	movs	r3, #0
 8006f96:	461a      	mov	r2, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 fc08 	bl	80077b0 <xQueueGenericSend>
 8006fa0:	2801      	cmp	r0, #1
 8006fa2:	d01e      	beq.n	8006fe2 <osSemaphoreNew+0x9e>
            vSemaphoreDelete (hSemaphore);
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f001 f84d 	bl	8008044 <vQueueDelete>
            hSemaphore = NULL;
 8006faa:	2500      	movs	r5, #0
 8006fac:	e00a      	b.n	8006fc4 <osSemaphoreNew+0x80>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006fae:	2303      	movs	r3, #3
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	2001      	movs	r0, #1
 8006fba:	f000 fb27 	bl	800760c <xQueueGenericCreateStatic>
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	e7e6      	b.n	8006f90 <osSemaphoreNew+0x4c>
  hSemaphore = NULL;
 8006fc2:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8006fca:	2500      	movs	r5, #0
 8006fcc:	e7fa      	b.n	8006fc4 <osSemaphoreNew+0x80>
 8006fce:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8006fd0:	e7f8      	b.n	8006fc4 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8006fd2:	2801      	cmp	r0, #1
 8006fd4:	d0d6      	beq.n	8006f84 <osSemaphoreNew+0x40>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	f000 fbc6 	bl	8007768 <xQueueCreateCountingSemaphore>
 8006fdc:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <osSemaphoreNew+0x80>
        if (attr != NULL) {
 8006fe2:	b104      	cbz	r4, 8006fe6 <osSemaphoreNew+0xa2>
          name = attr->name;
 8006fe4:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 ffff 	bl	8007fec <vQueueAddToRegistry>
 8006fee:	e7e9      	b.n	8006fc4 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8006ff0:	2801      	cmp	r0, #1
 8006ff2:	d0dc      	beq.n	8006fae <osSemaphoreNew+0x6a>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	f000 fb8d 	bl	8007716 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d1f0      	bne.n	8006fe4 <osSemaphoreNew+0xa0>
 8007002:	e7df      	b.n	8006fc4 <osSemaphoreNew+0x80>
 8007004:	2000e460 	.word	0x2000e460

08007008 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007008:	b398      	cbz	r0, 8007072 <osSemaphoreAcquire+0x6a>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800700a:	b530      	push	{r4, r5, lr}
 800700c:	b083      	sub	sp, #12
 800700e:	460c      	mov	r4, r1
 8007010:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007012:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007016:	b9b3      	cbnz	r3, 8007046 <osSemaphoreAcquire+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007018:	f3ef 8310 	mrs	r3, PRIMASK
 800701c:	b913      	cbnz	r3, 8007024 <osSemaphoreAcquire+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800701e:	f3ef 8311 	mrs	r3, BASEPRI
 8007022:	b11b      	cbz	r3, 800702c <osSemaphoreAcquire+0x24>
 8007024:	4b18      	ldr	r3, [pc, #96]	; (8007088 <osSemaphoreAcquire+0x80>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d00c      	beq.n	8007046 <osSemaphoreAcquire+0x3e>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 fe5a 	bl	8007ce8 <xQueueSemaphoreTake>
 8007034:	2801      	cmp	r0, #1
 8007036:	d025      	beq.n	8007084 <osSemaphoreAcquire+0x7c>
      if (timeout != 0U) {
        stat = osErrorTimeout;
      } else {
        stat = osErrorResource;
 8007038:	2c00      	cmp	r4, #0
 800703a:	bf14      	ite	ne
 800703c:	f06f 0001 	mvnne.w	r0, #1
 8007040:	f06f 0002 	mvneq.w	r0, #2
 8007044:	e013      	b.n	800706e <osSemaphoreAcquire+0x66>
    if (timeout != 0U) {
 8007046:	b9bc      	cbnz	r4, 8007078 <osSemaphoreAcquire+0x70>
      yield = pdFALSE;
 8007048:	2100      	movs	r1, #0
 800704a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800704c:	aa01      	add	r2, sp, #4
 800704e:	4628      	mov	r0, r5
 8007050:	f000 ff4e 	bl	8007ef0 <xQueueReceiveFromISR>
 8007054:	2801      	cmp	r0, #1
 8007056:	d112      	bne.n	800707e <osSemaphoreAcquire+0x76>
        portYIELD_FROM_ISR (yield);
 8007058:	9801      	ldr	r0, [sp, #4]
 800705a:	b140      	cbz	r0, 800706e <osSemaphoreAcquire+0x66>
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <osSemaphoreAcquire+0x84>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800706c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800706e:	b003      	add	sp, #12
 8007070:	bd30      	pop	{r4, r5, pc}
    stat = osErrorParameter;
 8007072:	f06f 0003 	mvn.w	r0, #3
}
 8007076:	4770      	bx	lr
      stat = osErrorParameter;
 8007078:	f06f 0003 	mvn.w	r0, #3
 800707c:	e7f7      	b.n	800706e <osSemaphoreAcquire+0x66>
        stat = osErrorResource;
 800707e:	f06f 0002 	mvn.w	r0, #2
 8007082:	e7f4      	b.n	800706e <osSemaphoreAcquire+0x66>
  stat = osOK;
 8007084:	2000      	movs	r0, #0
 8007086:	e7f2      	b.n	800706e <osSemaphoreAcquire+0x66>
 8007088:	2000e460 	.word	0x2000e460
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007090:	b388      	cbz	r0, 80070f6 <osSemaphoreRelease+0x66>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007092:	b510      	push	{r4, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007098:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800709c:	b9b3      	cbnz	r3, 80070cc <osSemaphoreRelease+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709e:	f3ef 8310 	mrs	r3, PRIMASK
 80070a2:	b913      	cbnz	r3, 80070aa <osSemaphoreRelease+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070a4:	f3ef 8311 	mrs	r3, BASEPRI
 80070a8:	b11b      	cbz	r3, 80070b2 <osSemaphoreRelease+0x22>
 80070aa:	4b16      	ldr	r3, [pc, #88]	; (8007104 <osSemaphoreRelease+0x74>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d00c      	beq.n	80070cc <osSemaphoreRelease+0x3c>
    } else {
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070b2:	2300      	movs	r3, #0
 80070b4:	461a      	mov	r2, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fb79 	bl	80077b0 <xQueueGenericSend>
      stat = osErrorResource;
 80070be:	2801      	cmp	r0, #1
 80070c0:	bf0c      	ite	eq
 80070c2:	2000      	moveq	r0, #0
 80070c4:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
 80070c8:	b002      	add	sp, #8
 80070ca:	bd10      	pop	{r4, pc}
    yield = pdFALSE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80070d0:	a901      	add	r1, sp, #4
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fcf1 	bl	8007aba <xQueueGiveFromISR>
 80070d8:	2801      	cmp	r0, #1
 80070da:	d10f      	bne.n	80070fc <osSemaphoreRelease+0x6c>
      portYIELD_FROM_ISR (yield);
 80070dc:	9801      	ldr	r0, [sp, #4]
 80070de:	2800      	cmp	r0, #0
 80070e0:	d0f2      	beq.n	80070c8 <osSemaphoreRelease+0x38>
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <osSemaphoreRelease+0x78>)
 80070e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80070f2:	2000      	movs	r0, #0
 80070f4:	e7e8      	b.n	80070c8 <osSemaphoreRelease+0x38>
    stat = osErrorParameter;
 80070f6:	f06f 0003 	mvn.w	r0, #3
}
 80070fa:	4770      	bx	lr
      stat = osErrorResource;
 80070fc:	f06f 0002 	mvn.w	r0, #2
 8007100:	e7e2      	b.n	80070c8 <osSemaphoreRelease+0x38>
 8007102:	bf00      	nop
 8007104:	2000e460 	.word	0x2000e460
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <osSemaphoreDelete>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800710c:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007110:	b9a3      	cbnz	r3, 800713c <osSemaphoreDelete+0x30>
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007112:	b510      	push	{r4, lr}
 8007114:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007116:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800711a:	b913      	cbnz	r3, 8007122 <osSemaphoreDelete+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800711c:	f3ef 8311 	mrs	r3, BASEPRI
 8007120:	b11b      	cbz	r3, 800712a <osSemaphoreDelete+0x1e>
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <osSemaphoreDelete+0x44>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d00b      	beq.n	8007142 <osSemaphoreDelete+0x36>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 800712a:	b16c      	cbz	r4, 8007148 <osSemaphoreDelete+0x3c>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800712c:	4620      	mov	r0, r4
 800712e:	f000 ff73 	bl	8008018 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 8007132:	4620      	mov	r0, r4
 8007134:	f000 ff86 	bl	8008044 <vQueueDelete>
    stat = osOK;
 8007138:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 800713a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800713c:	f06f 0005 	mvn.w	r0, #5
}
 8007140:	4770      	bx	lr
    stat = osErrorISR;
 8007142:	f06f 0005 	mvn.w	r0, #5
 8007146:	e7f8      	b.n	800713a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8007148:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800714c:	e7f5      	b.n	800713a <osSemaphoreDelete+0x2e>
 800714e:	bf00      	nop
 8007150:	2000e460 	.word	0x2000e460

08007154 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007158:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800715c:	2b00      	cmp	r3, #0
 800715e:	d139      	bne.n	80071d4 <osMessageQueueNew+0x80>
 8007160:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007162:	f3ef 8310 	mrs	r3, PRIMASK
 8007166:	b913      	cbnz	r3, 800716e <osMessageQueueNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007168:	f3ef 8311 	mrs	r3, BASEPRI
 800716c:	b11b      	cbz	r3, 8007176 <osMessageQueueNew+0x22>
 800716e:	4b23      	ldr	r3, [pc, #140]	; (80071fc <osMessageQueueNew+0xa8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d032      	beq.n	80071dc <osMessageQueueNew+0x88>
 8007176:	2800      	cmp	r0, #0
 8007178:	d032      	beq.n	80071e0 <osMessageQueueNew+0x8c>
 800717a:	b389      	cbz	r1, 80071e0 <osMessageQueueNew+0x8c>
    mem = -1;

    if (attr != NULL) {
 800717c:	2c00      	cmp	r4, #0
 800717e:	d035      	beq.n	80071ec <osMessageQueueNew+0x98>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007180:	68a5      	ldr	r5, [r4, #8]
 8007182:	b15d      	cbz	r5, 800719c <osMessageQueueNew+0x48>
 8007184:	68e3      	ldr	r3, [r4, #12]
 8007186:	2b4f      	cmp	r3, #79	; 0x4f
 8007188:	d92c      	bls.n	80071e4 <osMessageQueueNew+0x90>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800718a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800718c:	b362      	cbz	r2, 80071e8 <osMessageQueueNew+0x94>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800718e:	fb01 f300 	mul.w	r3, r1, r0
 8007192:	6966      	ldr	r6, [r4, #20]
 8007194:	429e      	cmp	r6, r3
 8007196:	d214      	bcs.n	80071c2 <osMessageQueueNew+0x6e>
  hQueue = NULL;
 8007198:	2500      	movs	r5, #0
 800719a:	e01c      	b.n	80071d6 <osMessageQueueNew+0x82>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800719c:	68e3      	ldr	r3, [r4, #12]
 800719e:	b9d3      	cbnz	r3, 80071d6 <osMessageQueueNew+0x82>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071a0:	6922      	ldr	r2, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071a2:	b9c2      	cbnz	r2, 80071d6 <osMessageQueueNew+0x82>

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80071a4:	6963      	ldr	r3, [r4, #20]
 80071a6:	b953      	cbnz	r3, 80071be <osMessageQueueNew+0x6a>
        hQueue = xQueueCreate (msg_count, msg_size);
 80071a8:	2200      	movs	r2, #0
 80071aa:	f000 fa8a 	bl	80076c2 <xQueueGenericCreate>
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80071ae:	4605      	mov	r5, r0
 80071b0:	b188      	cbz	r0, 80071d6 <osMessageQueueNew+0x82>
      if (attr != NULL) {
        name = attr->name;
 80071b2:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80071b4:	4621      	mov	r1, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 ff18 	bl	8007fec <vQueueAddToRegistry>
 80071bc:	e00b      	b.n	80071d6 <osMessageQueueNew+0x82>
  hQueue = NULL;
 80071be:	4615      	mov	r5, r2
 80071c0:	e009      	b.n	80071d6 <osMessageQueueNew+0x82>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80071c2:	2300      	movs	r3, #0
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	462b      	mov	r3, r5
 80071c8:	f000 fa20 	bl	800760c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80071cc:	4605      	mov	r5, r0
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1ef      	bne.n	80071b2 <osMessageQueueNew+0x5e>
 80071d2:	e000      	b.n	80071d6 <osMessageQueueNew+0x82>
  hQueue = NULL;
 80071d4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80071d6:	4628      	mov	r0, r5
 80071d8:	b002      	add	sp, #8
 80071da:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 80071dc:	2500      	movs	r5, #0
 80071de:	e7fa      	b.n	80071d6 <osMessageQueueNew+0x82>
 80071e0:	2500      	movs	r5, #0
 80071e2:	e7f8      	b.n	80071d6 <osMessageQueueNew+0x82>
 80071e4:	2500      	movs	r5, #0
 80071e6:	e7f6      	b.n	80071d6 <osMessageQueueNew+0x82>
 80071e8:	4615      	mov	r5, r2
  return ((osMessageQueueId_t)hQueue);
 80071ea:	e7f4      	b.n	80071d6 <osMessageQueueNew+0x82>
        hQueue = xQueueCreate (msg_count, msg_size);
 80071ec:	2200      	movs	r2, #0
 80071ee:	f000 fa68 	bl	80076c2 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80071f2:	4605      	mov	r5, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0ee      	beq.n	80071d6 <osMessageQueueNew+0x82>
 80071f8:	e7dc      	b.n	80071b4 <osMessageQueueNew+0x60>
 80071fa:	bf00      	nop
 80071fc:	2000e460 	.word	0x2000e460

08007200 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007200:	b510      	push	{r4, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007206:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800720a:	b9c3      	cbnz	r3, 800723e <osMessageQueuePut+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800720c:	f3ef 8310 	mrs	r3, PRIMASK
 8007210:	b913      	cbnz	r3, 8007218 <osMessageQueuePut+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007212:	f3ef 8311 	mrs	r3, BASEPRI
 8007216:	b11b      	cbz	r3, 8007220 <osMessageQueuePut+0x20>
 8007218:	4b1c      	ldr	r3, [pc, #112]	; (800728c <osMessageQueuePut+0x8c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d00e      	beq.n	800723e <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007220:	b378      	cbz	r0, 8007282 <osMessageQueuePut+0x82>
 8007222:	b371      	cbz	r1, 8007282 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007224:	2300      	movs	r3, #0
 8007226:	4622      	mov	r2, r4
 8007228:	f000 fac2 	bl	80077b0 <xQueueGenericSend>
 800722c:	2801      	cmp	r0, #1
 800722e:	d02b      	beq.n	8007288 <osMessageQueuePut+0x88>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8007230:	2c00      	cmp	r4, #0
 8007232:	bf14      	ite	ne
 8007234:	f06f 0001 	mvnne.w	r0, #1
 8007238:	f06f 0002 	mvneq.w	r0, #2
 800723c:	e019      	b.n	8007272 <osMessageQueuePut+0x72>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800723e:	3c00      	subs	r4, #0
 8007240:	bf18      	it	ne
 8007242:	2401      	movne	r4, #1
 8007244:	2900      	cmp	r1, #0
 8007246:	bf08      	it	eq
 8007248:	2401      	moveq	r4, #1
 800724a:	b9a4      	cbnz	r4, 8007276 <osMessageQueuePut+0x76>
 800724c:	b198      	cbz	r0, 8007276 <osMessageQueuePut+0x76>
      yield = pdFALSE;
 800724e:	2300      	movs	r3, #0
 8007250:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007252:	aa01      	add	r2, sp, #4
 8007254:	f000 fbc4 	bl	80079e0 <xQueueGenericSendFromISR>
 8007258:	2801      	cmp	r0, #1
 800725a:	d10f      	bne.n	800727c <osMessageQueuePut+0x7c>
        portYIELD_FROM_ISR (yield);
 800725c:	9801      	ldr	r0, [sp, #4]
 800725e:	b140      	cbz	r0, 8007272 <osMessageQueuePut+0x72>
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <osMessageQueuePut+0x90>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007270:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007272:	b002      	add	sp, #8
 8007274:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8007276:	f06f 0003 	mvn.w	r0, #3
 800727a:	e7fa      	b.n	8007272 <osMessageQueuePut+0x72>
        stat = osErrorResource;
 800727c:	f06f 0002 	mvn.w	r0, #2
 8007280:	e7f7      	b.n	8007272 <osMessageQueuePut+0x72>
      stat = osErrorParameter;
 8007282:	f06f 0003 	mvn.w	r0, #3
 8007286:	e7f4      	b.n	8007272 <osMessageQueuePut+0x72>
  stat = osOK;
 8007288:	2000      	movs	r0, #0
 800728a:	e7f2      	b.n	8007272 <osMessageQueuePut+0x72>
 800728c:	2000e460 	.word	0x2000e460
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007294:	b510      	push	{r4, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800729e:	b9bb      	cbnz	r3, 80072d0 <osMessageQueueGet+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a0:	f3ef 8310 	mrs	r3, PRIMASK
 80072a4:	b913      	cbnz	r3, 80072ac <osMessageQueueGet+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072a6:	f3ef 8311 	mrs	r3, BASEPRI
 80072aa:	b11b      	cbz	r3, 80072b4 <osMessageQueueGet+0x20>
 80072ac:	4b1c      	ldr	r3, [pc, #112]	; (8007320 <osMessageQueueGet+0x8c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d00d      	beq.n	80072d0 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80072b4:	b370      	cbz	r0, 8007314 <osMessageQueueGet+0x80>
 80072b6:	b369      	cbz	r1, 8007314 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072b8:	4622      	mov	r2, r4
 80072ba:	f000 fc5d 	bl	8007b78 <xQueueReceive>
 80072be:	2801      	cmp	r0, #1
 80072c0:	d02b      	beq.n	800731a <osMessageQueueGet+0x86>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 80072c2:	2c00      	cmp	r4, #0
 80072c4:	bf14      	ite	ne
 80072c6:	f06f 0001 	mvnne.w	r0, #1
 80072ca:	f06f 0002 	mvneq.w	r0, #2
 80072ce:	e019      	b.n	8007304 <osMessageQueueGet+0x70>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072d0:	3c00      	subs	r4, #0
 80072d2:	bf18      	it	ne
 80072d4:	2401      	movne	r4, #1
 80072d6:	2900      	cmp	r1, #0
 80072d8:	bf08      	it	eq
 80072da:	2401      	moveq	r4, #1
 80072dc:	b9a4      	cbnz	r4, 8007308 <osMessageQueueGet+0x74>
 80072de:	b198      	cbz	r0, 8007308 <osMessageQueueGet+0x74>
      yield = pdFALSE;
 80072e0:	2300      	movs	r3, #0
 80072e2:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80072e4:	aa01      	add	r2, sp, #4
 80072e6:	f000 fe03 	bl	8007ef0 <xQueueReceiveFromISR>
 80072ea:	2801      	cmp	r0, #1
 80072ec:	d10f      	bne.n	800730e <osMessageQueueGet+0x7a>
        portYIELD_FROM_ISR (yield);
 80072ee:	9801      	ldr	r0, [sp, #4]
 80072f0:	b140      	cbz	r0, 8007304 <osMessageQueueGet+0x70>
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <osMessageQueueGet+0x90>)
 80072f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007302:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007304:	b002      	add	sp, #8
 8007306:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8007308:	f06f 0003 	mvn.w	r0, #3
 800730c:	e7fa      	b.n	8007304 <osMessageQueueGet+0x70>
        stat = osErrorResource;
 800730e:	f06f 0002 	mvn.w	r0, #2
 8007312:	e7f7      	b.n	8007304 <osMessageQueueGet+0x70>
      stat = osErrorParameter;
 8007314:	f06f 0003 	mvn.w	r0, #3
 8007318:	e7f4      	b.n	8007304 <osMessageQueueGet+0x70>
  stat = osOK;
 800731a:	2000      	movs	r0, #0
 800731c:	e7f2      	b.n	8007304 <osMessageQueueGet+0x70>
 800731e:	bf00      	nop
 8007320:	2000e460 	.word	0x2000e460
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8007328:	b1b0      	cbz	r0, 8007358 <osMessageQueueGetCount+0x30>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800732a:	b508      	push	{r3, lr}
 800732c:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800732e:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8007332:	b96a      	cbnz	r2, 8007350 <osMessageQueueGetCount+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007334:	f3ef 8210 	mrs	r2, PRIMASK
 8007338:	b912      	cbnz	r2, 8007340 <osMessageQueueGetCount+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800733a:	f3ef 8211 	mrs	r2, BASEPRI
 800733e:	b11a      	cbz	r2, 8007348 <osMessageQueueGetCount+0x20>
 8007340:	4a06      	ldr	r2, [pc, #24]	; (800735c <osMessageQueueGetCount+0x34>)
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	2a02      	cmp	r2, #2
 8007346:	d003      	beq.n	8007350 <osMessageQueueGetCount+0x28>
    count = uxQueueMessagesWaitingFromISR (hQueue);
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fe2b 	bl	8007fa4 <uxQueueMessagesWaiting>
 800734e:	e002      	b.n	8007356 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fe3c 	bl	8007fce <uxQueueMessagesWaitingFromISR>
  }

  return ((uint32_t)count);
}
 8007356:	bd08      	pop	{r3, pc}
    count = 0U;
 8007358:	2000      	movs	r0, #0
}
 800735a:	4770      	bx	lr
 800735c:	2000e460 	.word	0x2000e460

08007360 <osMessageQueueDelete>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007360:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007364:	b9a3      	cbnz	r3, 8007390 <osMessageQueueDelete+0x30>
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007366:	b510      	push	{r4, lr}
 8007368:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800736a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800736e:	b913      	cbnz	r3, 8007376 <osMessageQueueDelete+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007370:	f3ef 8311 	mrs	r3, BASEPRI
 8007374:	b11b      	cbz	r3, 800737e <osMessageQueueDelete+0x1e>
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <osMessageQueueDelete+0x44>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d00b      	beq.n	8007396 <osMessageQueueDelete+0x36>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 800737e:	b16c      	cbz	r4, 800739c <osMessageQueueDelete+0x3c>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fe49 	bl	8008018 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vQueueDelete (hQueue);
 8007386:	4620      	mov	r0, r4
 8007388:	f000 fe5c 	bl	8008044 <vQueueDelete>
    stat = osOK;
 800738c:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 800738e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8007390:	f06f 0005 	mvn.w	r0, #5
}
 8007394:	4770      	bx	lr
    stat = osErrorISR;
 8007396:	f06f 0005 	mvn.w	r0, #5
 800739a:	e7f8      	b.n	800738e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800739c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80073a0:	e7f5      	b.n	800738e <osMessageQueueDelete+0x2e>
 80073a2:	bf00      	nop
 80073a4:	2000e460 	.word	0x2000e460

080073a8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073a8:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <vApplicationGetIdleTaskMemory+0x10>)
 80073aa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073ac:	4b03      	ldr	r3, [pc, #12]	; (80073bc <vApplicationGetIdleTaskMemory+0x14>)
 80073ae:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	6013      	str	r3, [r2, #0]
}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	2000e3a4 	.word	0x2000e3a4
 80073bc:	2000e1a4 	.word	0x2000e1a4

080073c0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <vApplicationGetTimerTaskMemory+0x10>)
 80073c2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073c4:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <vApplicationGetTimerTaskMemory+0x14>)
 80073c6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073cc:	6013      	str	r3, [r2, #0]
}
 80073ce:	4770      	bx	lr
 80073d0:	2000e864 	.word	0x2000e864
 80073d4:	2000e464 	.word	0x2000e464

080073d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d8:	f100 0308 	add.w	r3, r0, #8
 80073dc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073ec:	4770      	bx	lr

080073ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073f2:	4770      	bx	lr

080073f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80073f4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073f6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073fc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073fe:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007400:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007402:	6803      	ldr	r3, [r0, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	6003      	str	r3, [r0, #0]
}
 8007408:	4770      	bx	lr

0800740a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800740a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800740c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800740e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007412:	d011      	beq.n	8007438 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007414:	f100 0308 	add.w	r3, r0, #8
 8007418:	461c      	mov	r4, r3
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	42aa      	cmp	r2, r5
 8007420:	d9fa      	bls.n	8007418 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007422:	6863      	ldr	r3, [r4, #4]
 8007424:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007426:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007428:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800742a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800742c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800742e:	6803      	ldr	r3, [r0, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	6003      	str	r3, [r0, #0]
}
 8007434:	bc30      	pop	{r4, r5}
 8007436:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8007438:	6904      	ldr	r4, [r0, #16]
 800743a:	e7f2      	b.n	8007422 <vListInsert+0x18>

0800743c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800743c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800743e:	6841      	ldr	r1, [r0, #4]
 8007440:	6882      	ldr	r2, [r0, #8]
 8007442:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007444:	6841      	ldr	r1, [r0, #4]
 8007446:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	4282      	cmp	r2, r0
 800744c:	d006      	beq.n	800745c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800744e:	2200      	movs	r2, #0
 8007450:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	3a01      	subs	r2, #1
 8007456:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007458:	6818      	ldr	r0, [r3, #0]
}
 800745a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800745c:	6882      	ldr	r2, [r0, #8]
 800745e:	605a      	str	r2, [r3, #4]
 8007460:	e7f5      	b.n	800744e <uxListRemove+0x12>

08007462 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007462:	b510      	push	{r4, lr}
 8007464:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007466:	f001 fead 	bl	80091c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800746a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800746c:	f001 fed0 	bl	8009210 <vPortExitCritical>

	return xReturn;
}
 8007470:	fab4 f084 	clz	r0, r4
 8007474:	0940      	lsrs	r0, r0, #5
 8007476:	bd10      	pop	{r4, pc}

08007478 <prvCopyDataToQueue>:
{
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800747e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007480:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007482:	b95a      	cbnz	r2, 800749c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007484:	6803      	ldr	r3, [r0, #0]
 8007486:	b11b      	cbz	r3, 8007490 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007488:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800748a:	3601      	adds	r6, #1
 800748c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800748e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007490:	6880      	ldr	r0, [r0, #8]
 8007492:	f001 fb59 	bl	8008b48 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	60a3      	str	r3, [r4, #8]
 800749a:	e7f6      	b.n	800748a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800749c:	b96d      	cbnz	r5, 80074ba <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800749e:	6840      	ldr	r0, [r0, #4]
 80074a0:	f00b f847 	bl	8012532 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80074a8:	4413      	add	r3, r2
 80074aa:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074ac:	68a2      	ldr	r2, [r4, #8]
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d319      	bcc.n	80074e6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80074b6:	4628      	mov	r0, r5
 80074b8:	e7e7      	b.n	800748a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074ba:	68c0      	ldr	r0, [r0, #12]
 80074bc:	f00b f839 	bl	8012532 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80074c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80074c2:	4251      	negs	r1, r2
 80074c4:	68e3      	ldr	r3, [r4, #12]
 80074c6:	1a9b      	subs	r3, r3, r2
 80074c8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d202      	bcs.n	80074d6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80074d0:	68a3      	ldr	r3, [r4, #8]
 80074d2:	440b      	add	r3, r1
 80074d4:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074d6:	b10e      	cbz	r6, 80074dc <prvCopyDataToQueue+0x64>
 80074d8:	2d02      	cmp	r5, #2
 80074da:	d001      	beq.n	80074e0 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 80074dc:	2000      	movs	r0, #0
 80074de:	e7d4      	b.n	800748a <prvCopyDataToQueue+0x12>
				--uxMessagesWaiting;
 80074e0:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80074e2:	2000      	movs	r0, #0
 80074e4:	e7d1      	b.n	800748a <prvCopyDataToQueue+0x12>
 80074e6:	4628      	mov	r0, r5
 80074e8:	e7cf      	b.n	800748a <prvCopyDataToQueue+0x12>

080074ea <prvCopyDataFromQueue>:
{
 80074ea:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80074ee:	b16a      	cbz	r2, 800750c <prvCopyDataFromQueue+0x22>
{
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074f4:	68d9      	ldr	r1, [r3, #12]
 80074f6:	4411      	add	r1, r2
 80074f8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074fa:	689c      	ldr	r4, [r3, #8]
 80074fc:	42a1      	cmp	r1, r4
 80074fe:	d301      	bcc.n	8007504 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007504:	68d9      	ldr	r1, [r3, #12]
 8007506:	f00b f814 	bl	8012532 <memcpy>
}
 800750a:	bd10      	pop	{r4, pc}
 800750c:	4770      	bx	lr

0800750e <prvUnlockQueue>:
{
 800750e:	b570      	push	{r4, r5, r6, lr}
 8007510:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007512:	f001 fe57 	bl	80091c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007516:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800751a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800751c:	2c00      	cmp	r4, #0
 800751e:	dd0f      	ble.n	8007540 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007520:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8007524:	e004      	b.n	8007530 <prvUnlockQueue+0x22>
						vTaskMissedYield();
 8007526:	f001 faa9 	bl	8008a7c <vTaskMissedYield>
			--cTxLock;
 800752a:	3c01      	subs	r4, #1
 800752c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800752e:	b13c      	cbz	r4, 8007540 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007530:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007532:	b12b      	cbz	r3, 8007540 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007534:	4630      	mov	r0, r6
 8007536:	f001 fa07 	bl	8008948 <xTaskRemoveFromEventList>
 800753a:	2800      	cmp	r0, #0
 800753c:	d0f5      	beq.n	800752a <prvUnlockQueue+0x1c>
 800753e:	e7f2      	b.n	8007526 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007546:	f001 fe63 	bl	8009210 <vPortExitCritical>
	taskENTER_CRITICAL();
 800754a:	f001 fe3b 	bl	80091c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800754e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007552:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007554:	2c00      	cmp	r4, #0
 8007556:	dd0f      	ble.n	8007578 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007558:	f105 0610 	add.w	r6, r5, #16
 800755c:	e004      	b.n	8007568 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800755e:	f001 fa8d 	bl	8008a7c <vTaskMissedYield>
				--cRxLock;
 8007562:	3c01      	subs	r4, #1
 8007564:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007566:	b13c      	cbz	r4, 8007578 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007568:	692b      	ldr	r3, [r5, #16]
 800756a:	b12b      	cbz	r3, 8007578 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800756c:	4630      	mov	r0, r6
 800756e:	f001 f9eb 	bl	8008948 <xTaskRemoveFromEventList>
 8007572:	2800      	cmp	r0, #0
 8007574:	d0f5      	beq.n	8007562 <prvUnlockQueue+0x54>
 8007576:	e7f2      	b.n	800755e <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8007578:	23ff      	movs	r3, #255	; 0xff
 800757a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800757e:	f001 fe47 	bl	8009210 <vPortExitCritical>
}
 8007582:	bd70      	pop	{r4, r5, r6, pc}

08007584 <xQueueGenericReset>:
{
 8007584:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8007586:	b1e0      	cbz	r0, 80075c2 <xQueueGenericReset+0x3e>
 8007588:	460d      	mov	r5, r1
 800758a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800758c:	f001 fe1a 	bl	80091c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007594:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007596:	fb03 f301 	mul.w	r3, r3, r1
 800759a:	18d0      	adds	r0, r2, r3
 800759c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800759e:	2000      	movs	r0, #0
 80075a0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075a2:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075a4:	1a5b      	subs	r3, r3, r1
 80075a6:	4413      	add	r3, r2
 80075a8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075aa:	23ff      	movs	r3, #255	; 0xff
 80075ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80075b4:	b9fd      	cbnz	r5, 80075f6 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	b973      	cbnz	r3, 80075d8 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80075ba:	f001 fe29 	bl	8009210 <vPortExitCritical>
}
 80075be:	2001      	movs	r0, #1
 80075c0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	b672      	cpsid	i
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	b662      	cpsie	i
	configASSERT( pxQueue );
 80075d6:	e7fe      	b.n	80075d6 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075d8:	f104 0010 	add.w	r0, r4, #16
 80075dc:	f001 f9b4 	bl	8008948 <xTaskRemoveFromEventList>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d0ea      	beq.n	80075ba <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <xQueueGenericReset+0x84>)
 80075e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	e7e1      	b.n	80075ba <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075f6:	f104 0010 	add.w	r0, r4, #16
 80075fa:	f7ff feed 	bl	80073d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007602:	f7ff fee9 	bl	80073d8 <vListInitialise>
 8007606:	e7d8      	b.n	80075ba <xQueueGenericReset+0x36>
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800760c:	b950      	cbnz	r0, 8007624 <xQueueGenericCreateStatic+0x18>
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	b672      	cpsid	i
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	b662      	cpsie	i
 8007622:	e7fe      	b.n	8007622 <xQueueGenericCreateStatic+0x16>
	{
 8007624:	b510      	push	{r4, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	461c      	mov	r4, r3
 800762a:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 800762c:	b164      	cbz	r4, 8007648 <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800762e:	b1b2      	cbz	r2, 800765e <xQueueGenericCreateStatic+0x52>
 8007630:	b9a9      	cbnz	r1, 800765e <xQueueGenericCreateStatic+0x52>
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	b672      	cpsid	i
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	b662      	cpsie	i
 8007646:	e7fe      	b.n	8007646 <xQueueGenericCreateStatic+0x3a>
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	b672      	cpsid	i
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 800765c:	e7fe      	b.n	800765c <xQueueGenericCreateStatic+0x50>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800765e:	b95a      	cbnz	r2, 8007678 <xQueueGenericCreateStatic+0x6c>
 8007660:	b151      	cbz	r1, 8007678 <xQueueGenericCreateStatic+0x6c>
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	b672      	cpsid	i
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	b662      	cpsie	i
 8007676:	e7fe      	b.n	8007676 <xQueueGenericCreateStatic+0x6a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007678:	2050      	movs	r0, #80	; 0x50
 800767a:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800767c:	9801      	ldr	r0, [sp, #4]
 800767e:	2850      	cmp	r0, #80	; 0x50
 8007680:	d00a      	beq.n	8007698 <xQueueGenericCreateStatic+0x8c>
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	b672      	cpsid	i
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	b662      	cpsie	i
 8007696:	e7fe      	b.n	8007696 <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007698:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800769a:	2001      	movs	r0, #1
 800769c:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076a0:	2900      	cmp	r1, #0
 80076a2:	bf08      	it	eq
 80076a4:	4622      	moveq	r2, r4
 80076a6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80076a8:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076aa:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076ac:	4601      	mov	r1, r0
 80076ae:	4620      	mov	r0, r4
 80076b0:	f7ff ff68 	bl	8007584 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80076b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80076b8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80076bc:	4620      	mov	r0, r4
 80076be:	b002      	add	sp, #8
 80076c0:	bd10      	pop	{r4, pc}

080076c2 <xQueueGenericCreate>:
	{
 80076c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076c4:	b950      	cbnz	r0, 80076dc <xQueueGenericCreate+0x1a>
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	b672      	cpsid	i
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	b662      	cpsie	i
 80076da:	e7fe      	b.n	80076da <xQueueGenericCreate+0x18>
 80076dc:	460d      	mov	r5, r1
 80076de:	4616      	mov	r6, r2
 80076e0:	4607      	mov	r7, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076e6:	3050      	adds	r0, #80	; 0x50
 80076e8:	f001 fed8 	bl	800949c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80076ec:	4604      	mov	r4, r0
 80076ee:	b180      	cbz	r0, 8007712 <xQueueGenericCreate+0x50>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80076f6:	b115      	cbz	r5, 80076fe <xQueueGenericCreate+0x3c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076f8:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076fc:	e000      	b.n	8007700 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076fe:	4603      	mov	r3, r0
 8007700:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007702:	63e7      	str	r7, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007704:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007706:	2101      	movs	r1, #1
 8007708:	4620      	mov	r0, r4
 800770a:	f7ff ff3b 	bl	8007584 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800770e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	}
 8007712:	4620      	mov	r0, r4
 8007714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007716 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007716:	b530      	push	{r4, r5, lr}
 8007718:	b083      	sub	sp, #12
		configASSERT( uxMaxCount != 0 );
 800771a:	b950      	cbnz	r0, 8007732 <xQueueCreateCountingSemaphoreStatic+0x1c>
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	b672      	cpsid	i
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	b662      	cpsie	i
 8007730:	e7fe      	b.n	8007730 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8007732:	460c      	mov	r4, r1
 8007734:	4613      	mov	r3, r2
		configASSERT( uxInitialCount <= uxMaxCount );
 8007736:	4288      	cmp	r0, r1
 8007738:	d20a      	bcs.n	8007750 <xQueueCreateCountingSemaphoreStatic+0x3a>
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	b672      	cpsid	i
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	b662      	cpsie	i
 800774e:	e7fe      	b.n	800774e <xQueueCreateCountingSemaphoreStatic+0x38>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007750:	2202      	movs	r2, #2
 8007752:	9200      	str	r2, [sp, #0]
 8007754:	2200      	movs	r2, #0
 8007756:	4611      	mov	r1, r2
 8007758:	f7ff ff58 	bl	800760c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800775c:	4603      	mov	r3, r0
 800775e:	b100      	cbz	r0, 8007762 <xQueueCreateCountingSemaphoreStatic+0x4c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007760:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007762:	4618      	mov	r0, r3
 8007764:	b003      	add	sp, #12
 8007766:	bd30      	pop	{r4, r5, pc}

08007768 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8007768:	b950      	cbnz	r0, 8007780 <xQueueCreateCountingSemaphore+0x18>
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	b672      	cpsid	i
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	b662      	cpsie	i
 800777e:	e7fe      	b.n	800777e <xQueueCreateCountingSemaphore+0x16>
	{
 8007780:	b510      	push	{r4, lr}
 8007782:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8007784:	4288      	cmp	r0, r1
 8007786:	d20a      	bcs.n	800779e <xQueueCreateCountingSemaphore+0x36>
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	b672      	cpsid	i
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	b662      	cpsie	i
 800779c:	e7fe      	b.n	800779c <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800779e:	2202      	movs	r2, #2
 80077a0:	2100      	movs	r1, #0
 80077a2:	f7ff ff8e 	bl	80076c2 <xQueueGenericCreate>
		if( xHandle != NULL )
 80077a6:	4603      	mov	r3, r0
 80077a8:	b100      	cbz	r0, 80077ac <xQueueCreateCountingSemaphore+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077aa:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd10      	pop	{r4, pc}

080077b0 <xQueueGenericSend>:
{
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80077b8:	b198      	cbz	r0, 80077e2 <xQueueGenericSend+0x32>
 80077ba:	460e      	mov	r6, r1
 80077bc:	461d      	mov	r5, r3
 80077be:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077c0:	b1d1      	cbz	r1, 80077f8 <xQueueGenericSend+0x48>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077c2:	2d02      	cmp	r5, #2
 80077c4:	d126      	bne.n	8007814 <xQueueGenericSend+0x64>
 80077c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d023      	beq.n	8007814 <xQueueGenericSend+0x64>
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	b672      	cpsid	i
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	b662      	cpsie	i
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericSend+0x30>
 80077e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e6:	b672      	cpsid	i
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	b662      	cpsie	i
	configASSERT( pxQueue );
 80077f6:	e7fe      	b.n	80077f6 <xQueueGenericSend+0x46>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0e1      	beq.n	80077c2 <xQueueGenericSend+0x12>
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	b672      	cpsid	i
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	b662      	cpsie	i
 8007812:	e7fe      	b.n	8007812 <xQueueGenericSend+0x62>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007814:	f001 f93e 	bl	8008a94 <xTaskGetSchedulerState>
 8007818:	b960      	cbnz	r0, 8007834 <xQueueGenericSend+0x84>
 800781a:	9b01      	ldr	r3, [sp, #4]
 800781c:	b183      	cbz	r3, 8007840 <xQueueGenericSend+0x90>
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	b672      	cpsid	i
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	b662      	cpsie	i
 8007832:	e7fe      	b.n	8007832 <xQueueGenericSend+0x82>
 8007834:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8007836:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800783a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800794c <xQueueGenericSend+0x19c>
 800783e:	e03a      	b.n	80078b6 <xQueueGenericSend+0x106>
 8007840:	2700      	movs	r7, #0
 8007842:	e7f8      	b.n	8007836 <xQueueGenericSend+0x86>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007844:	462a      	mov	r2, r5
 8007846:	4631      	mov	r1, r6
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff fe15 	bl	8007478 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800784e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007850:	b972      	cbnz	r2, 8007870 <xQueueGenericSend+0xc0>
					else if( xYieldRequired != pdFALSE )
 8007852:	b138      	cbz	r0, 8007864 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8007854:	4b3d      	ldr	r3, [pc, #244]	; (800794c <xQueueGenericSend+0x19c>)
 8007856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007864:	f001 fcd4 	bl	8009210 <vPortExitCritical>
				return pdPASS;
 8007868:	2001      	movs	r0, #1
}
 800786a:	b004      	add	sp, #16
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007870:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007874:	f001 f868 	bl	8008948 <xTaskRemoveFromEventList>
 8007878:	2800      	cmp	r0, #0
 800787a:	d0f3      	beq.n	8007864 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800787c:	4b33      	ldr	r3, [pc, #204]	; (800794c <xQueueGenericSend+0x19c>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	e7ea      	b.n	8007864 <xQueueGenericSend+0xb4>
					taskEXIT_CRITICAL();
 800788e:	f001 fcbf 	bl	8009210 <vPortExitCritical>
					return errQUEUE_FULL;
 8007892:	2000      	movs	r0, #0
 8007894:	e7e9      	b.n	800786a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007896:	a802      	add	r0, sp, #8
 8007898:	f001 f89e 	bl	80089d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800789c:	e018      	b.n	80078d0 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 800789e:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80078a2:	e021      	b.n	80078e8 <xQueueGenericSend+0x138>
 80078a4:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80078a8:	e024      	b.n	80078f4 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff fe2f 	bl	800750e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078b0:	f000 ff0c 	bl	80086cc <xTaskResumeAll>
 80078b4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80078b6:	f001 fc85 	bl	80091c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80078bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078be:	429a      	cmp	r2, r3
 80078c0:	d3c0      	bcc.n	8007844 <xQueueGenericSend+0x94>
 80078c2:	2d02      	cmp	r5, #2
 80078c4:	d0be      	beq.n	8007844 <xQueueGenericSend+0x94>
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0e0      	beq.n	800788e <xQueueGenericSend+0xde>
				else if( xEntryTimeSet == pdFALSE )
 80078cc:	2f00      	cmp	r7, #0
 80078ce:	d0e2      	beq.n	8007896 <xQueueGenericSend+0xe6>
		taskEXIT_CRITICAL();
 80078d0:	f001 fc9e 	bl	8009210 <vPortExitCritical>
		vTaskSuspendAll();
 80078d4:	f000 fe4a 	bl	800856c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078d8:	f001 fc74 	bl	80091c4 <vPortEnterCritical>
 80078dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d0da      	beq.n	800789e <xQueueGenericSend+0xee>
 80078e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80078ec:	b25b      	sxtb	r3, r3
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d0d7      	beq.n	80078a4 <xQueueGenericSend+0xf4>
 80078f4:	f001 fc8c 	bl	8009210 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078f8:	a901      	add	r1, sp, #4
 80078fa:	a802      	add	r0, sp, #8
 80078fc:	f001 f878 	bl	80089f0 <xTaskCheckForTimeOut>
 8007900:	b9e8      	cbnz	r0, 800793e <xQueueGenericSend+0x18e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007902:	f001 fc5f 	bl	80091c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007906:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 800790a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800790c:	f001 fc80 	bl	8009210 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007910:	45ba      	cmp	sl, r7
 8007912:	d1ca      	bne.n	80078aa <xQueueGenericSend+0xfa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007914:	9901      	ldr	r1, [sp, #4]
 8007916:	f104 0010 	add.w	r0, r4, #16
 800791a:	f000 ffdb 	bl	80088d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff fdf5 	bl	800750e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007924:	f000 fed2 	bl	80086cc <xTaskResumeAll>
 8007928:	2800      	cmp	r0, #0
 800792a:	d1c3      	bne.n	80078b4 <xQueueGenericSend+0x104>
					portYIELD_WITHIN_API();
 800792c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007930:	f8c9 3000 	str.w	r3, [r9]
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	e7ba      	b.n	80078b4 <xQueueGenericSend+0x104>
			prvUnlockQueue( pxQueue );
 800793e:	4620      	mov	r0, r4
 8007940:	f7ff fde5 	bl	800750e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007944:	f000 fec2 	bl	80086cc <xTaskResumeAll>
			return errQUEUE_FULL;
 8007948:	2000      	movs	r0, #0
 800794a:	e78e      	b.n	800786a <xQueueGenericSend+0xba>
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8007950:	b148      	cbz	r0, 8007966 <prvInitialiseMutex+0x16>
	{
 8007952:	b510      	push	{r4, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007954:	2100      	movs	r1, #0
 8007956:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007958:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800795a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800795c:	460b      	mov	r3, r1
 800795e:	460a      	mov	r2, r1
 8007960:	f7ff ff26 	bl	80077b0 <xQueueGenericSend>
	}
 8007964:	bd10      	pop	{r4, pc}
 8007966:	4770      	bx	lr

08007968 <xQueueCreateMutex>:
	{
 8007968:	b510      	push	{r4, lr}
 800796a:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800796c:	2100      	movs	r1, #0
 800796e:	2001      	movs	r0, #1
 8007970:	f7ff fea7 	bl	80076c2 <xQueueGenericCreate>
 8007974:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007976:	f7ff ffeb 	bl	8007950 <prvInitialiseMutex>
	}
 800797a:	4620      	mov	r0, r4
 800797c:	bd10      	pop	{r4, pc}

0800797e <xQueueCreateMutexStatic>:
	{
 800797e:	b510      	push	{r4, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007984:	9000      	str	r0, [sp, #0]
 8007986:	2200      	movs	r2, #0
 8007988:	4611      	mov	r1, r2
 800798a:	2001      	movs	r0, #1
 800798c:	f7ff fe3e 	bl	800760c <xQueueGenericCreateStatic>
 8007990:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007992:	f7ff ffdd 	bl	8007950 <prvInitialiseMutex>
	}
 8007996:	4620      	mov	r0, r4
 8007998:	b002      	add	sp, #8
 800799a:	bd10      	pop	{r4, pc}

0800799c <xQueueGiveMutexRecursive>:
	{
 800799c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800799e:	b138      	cbz	r0, 80079b0 <xQueueGiveMutexRecursive+0x14>
 80079a0:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80079a2:	6885      	ldr	r5, [r0, #8]
 80079a4:	f001 f870 	bl	8008a88 <xTaskGetCurrentTaskHandle>
 80079a8:	4285      	cmp	r5, r0
 80079aa:	d00c      	beq.n	80079c6 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 80079ac:	2000      	movs	r0, #0
	}
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	b672      	cpsid	i
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	b662      	cpsie	i
		configASSERT( pxMutex );
 80079c4:	e7fe      	b.n	80079c4 <xQueueGiveMutexRecursive+0x28>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80079cc:	b10b      	cbz	r3, 80079d2 <xQueueGiveMutexRecursive+0x36>
			xReturn = pdPASS;
 80079ce:	2001      	movs	r0, #1
		return xReturn;
 80079d0:	e7ed      	b.n	80079ae <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80079d2:	461a      	mov	r2, r3
 80079d4:	4619      	mov	r1, r3
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7ff feea 	bl	80077b0 <xQueueGenericSend>
			xReturn = pdPASS;
 80079dc:	2001      	movs	r0, #1
 80079de:	e7e6      	b.n	80079ae <xQueueGiveMutexRecursive+0x12>

080079e0 <xQueueGenericSendFromISR>:
{
 80079e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80079e4:	b1a0      	cbz	r0, 8007a10 <xQueueGenericSendFromISR+0x30>
 80079e6:	4689      	mov	r9, r1
 80079e8:	4690      	mov	r8, r2
 80079ea:	461f      	mov	r7, r3
 80079ec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ee:	b1d1      	cbz	r1, 8007a26 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079f0:	2f02      	cmp	r7, #2
 80079f2:	d126      	bne.n	8007a42 <xQueueGenericSendFromISR+0x62>
 80079f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d023      	beq.n	8007a42 <xQueueGenericSendFromISR+0x62>
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	b672      	cpsid	i
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	b662      	cpsie	i
 8007a0e:	e7fe      	b.n	8007a0e <xQueueGenericSendFromISR+0x2e>
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	b672      	cpsid	i
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	b662      	cpsie	i
	configASSERT( pxQueue );
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0e1      	beq.n	80079f0 <xQueueGenericSendFromISR+0x10>
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	b672      	cpsid	i
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	b662      	cpsie	i
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a42:	f001 fccd 	bl	80093e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a46:	f3ef 8611 	mrs	r6, BASEPRI
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	b672      	cpsid	i
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d306      	bcc.n	8007a74 <xQueueGenericSendFromISR+0x94>
 8007a66:	2f02      	cmp	r7, #2
 8007a68:	d004      	beq.n	8007a74 <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8007a6a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a6c:	f386 8811 	msr	BASEPRI, r6
}
 8007a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a74:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007a78:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a7a:	463a      	mov	r2, r7
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff fcfa 	bl	8007478 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007a84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007a88:	d005      	beq.n	8007a96 <xQueueGenericSendFromISR+0xb6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a8a:	1c6b      	adds	r3, r5, #1
 8007a8c:	b25b      	sxtb	r3, r3
 8007a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007a92:	2001      	movs	r0, #1
 8007a94:	e7ea      	b.n	8007a6c <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a98:	b90b      	cbnz	r3, 8007a9e <xQueueGenericSendFromISR+0xbe>
			xReturn = pdPASS;
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	e7e6      	b.n	8007a6c <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007aa2:	f000 ff51 	bl	8008948 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8007aa6:	f1b8 0f00 	cmp.w	r8, #0
 8007aaa:	d004      	beq.n	8007ab6 <xQueueGenericSendFromISR+0xd6>
 8007aac:	b118      	cbz	r0, 8007ab6 <xQueueGenericSendFromISR+0xd6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aae:	2001      	movs	r0, #1
 8007ab0:	f8c8 0000 	str.w	r0, [r8]
 8007ab4:	e7da      	b.n	8007a6c <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	e7d8      	b.n	8007a6c <xQueueGenericSendFromISR+0x8c>

08007aba <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8007aba:	b178      	cbz	r0, 8007adc <xQueueGiveFromISR+0x22>
{
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	460e      	mov	r6, r1
 8007ac0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ac2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007ac4:	b1ab      	cbz	r3, 8007af2 <xQueueGiveFromISR+0x38>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	b672      	cpsid	i
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	b662      	cpsie	i
 8007ada:	e7fe      	b.n	8007ada <xQueueGiveFromISR+0x20>
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	b672      	cpsid	i
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	b662      	cpsie	i
	configASSERT( pxQueue );
 8007af0:	e7fe      	b.n	8007af0 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007af2:	6803      	ldr	r3, [r0, #0]
 8007af4:	b1fb      	cbz	r3, 8007b36 <xQueueGiveFromISR+0x7c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007af6:	f001 fc73 	bl	80093e0 <vPortValidateInterruptPriority>
	__asm volatile
 8007afa:	f3ef 8511 	mrs	r5, BASEPRI
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	b672      	cpsid	i
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d928      	bls.n	8007b6c <xQueueGiveFromISR+0xb2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b1e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b20:	3201      	adds	r2, #1
 8007b22:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d013      	beq.n	8007b52 <xQueueGiveFromISR+0x98>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007b32:	2001      	movs	r0, #1
 8007b34:	e01b      	b.n	8007b6e <xQueueGiveFromISR+0xb4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b36:	6883      	ldr	r3, [r0, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0dc      	beq.n	8007af6 <xQueueGiveFromISR+0x3c>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	b672      	cpsid	i
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	b662      	cpsie	i
 8007b50:	e7fe      	b.n	8007b50 <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b54:	b90b      	cbnz	r3, 8007b5a <xQueueGiveFromISR+0xa0>
			xReturn = pdPASS;
 8007b56:	2001      	movs	r0, #1
 8007b58:	e009      	b.n	8007b6e <xQueueGiveFromISR+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b5e:	f000 fef3 	bl	8008948 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8007b62:	b13e      	cbz	r6, 8007b74 <xQueueGiveFromISR+0xba>
 8007b64:	b130      	cbz	r0, 8007b74 <xQueueGiveFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b66:	2001      	movs	r0, #1
 8007b68:	6030      	str	r0, [r6, #0]
 8007b6a:	e000      	b.n	8007b6e <xQueueGiveFromISR+0xb4>
			xReturn = errQUEUE_FULL;
 8007b6c:	2000      	movs	r0, #0
	__asm volatile
 8007b6e:	f385 8811 	msr	BASEPRI, r5
}
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8007b74:	2001      	movs	r0, #1
 8007b76:	e7fa      	b.n	8007b6e <xQueueGiveFromISR+0xb4>

08007b78 <xQueueReceive>:
{
 8007b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007b80:	b190      	cbz	r0, 8007ba8 <xQueueReceive+0x30>
 8007b82:	460e      	mov	r6, r1
 8007b84:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b86:	b1d1      	cbz	r1, 8007bbe <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b88:	f000 ff84 	bl	8008a94 <xTaskGetSchedulerState>
 8007b8c:	bb28      	cbnz	r0, 8007bda <xQueueReceive+0x62>
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	b34b      	cbz	r3, 8007be6 <xQueueReceive+0x6e>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	b672      	cpsid	i
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	b662      	cpsie	i
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueReceive+0x2e>
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	b672      	cpsid	i
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8007bbc:	e7fe      	b.n	8007bbc <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0e1      	beq.n	8007b88 <xQueueReceive+0x10>
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	b672      	cpsid	i
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	b662      	cpsie	i
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueReceive+0x60>
 8007bda:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8007bdc:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8007be0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007ce4 <xQueueReceive+0x16c>
 8007be4:	e03d      	b.n	8007c62 <xQueueReceive+0xea>
 8007be6:	2700      	movs	r7, #0
 8007be8:	e7f8      	b.n	8007bdc <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bea:	4631      	mov	r1, r6
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7ff fc7c 	bl	80074ea <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bf2:	3d01      	subs	r5, #1
 8007bf4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	b92b      	cbnz	r3, 8007c06 <xQueueReceive+0x8e>
				taskEXIT_CRITICAL();
 8007bfa:	f001 fb09 	bl	8009210 <vPortExitCritical>
				return pdPASS;
 8007bfe:	2001      	movs	r0, #1
}
 8007c00:	b005      	add	sp, #20
 8007c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c06:	f104 0010 	add.w	r0, r4, #16
 8007c0a:	f000 fe9d 	bl	8008948 <xTaskRemoveFromEventList>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d0f3      	beq.n	8007bfa <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 8007c12:	4b34      	ldr	r3, [pc, #208]	; (8007ce4 <xQueueReceive+0x16c>)
 8007c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	e7ea      	b.n	8007bfa <xQueueReceive+0x82>
					taskEXIT_CRITICAL();
 8007c24:	f001 faf4 	bl	8009210 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e7e9      	b.n	8007c00 <xQueueReceive+0x88>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c2c:	a802      	add	r0, sp, #8
 8007c2e:	f000 fed3 	bl	80089d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c32:	e020      	b.n	8007c76 <xQueueReceive+0xfe>
		prvLockQueue( pxQueue );
 8007c34:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007c38:	e029      	b.n	8007c8e <xQueueReceive+0x116>
 8007c3a:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8007c3e:	e02c      	b.n	8007c9a <xQueueReceive+0x122>
				prvUnlockQueue( pxQueue );
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7ff fc64 	bl	800750e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c46:	f000 fd41 	bl	80086cc <xTaskResumeAll>
 8007c4a:	e009      	b.n	8007c60 <xQueueReceive+0xe8>
			prvUnlockQueue( pxQueue );
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff fc5e 	bl	800750e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c52:	f000 fd3b 	bl	80086cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7ff fc03 	bl	8007462 <prvIsQueueEmpty>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d13e      	bne.n	8007cde <xQueueReceive+0x166>
 8007c60:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8007c62:	f001 faaf 	bl	80091c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c66:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c68:	2d00      	cmp	r5, #0
 8007c6a:	d1be      	bne.n	8007bea <xQueueReceive+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c6c:	9b01      	ldr	r3, [sp, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0d8      	beq.n	8007c24 <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d0da      	beq.n	8007c2c <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
 8007c76:	f001 facb 	bl	8009210 <vPortExitCritical>
		vTaskSuspendAll();
 8007c7a:	f000 fc77 	bl	800856c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c7e:	f001 faa1 	bl	80091c4 <vPortEnterCritical>
 8007c82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c86:	b25b      	sxtb	r3, r3
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d0d2      	beq.n	8007c34 <xQueueReceive+0xbc>
 8007c8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007c92:	b25b      	sxtb	r3, r3
 8007c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c98:	d0cf      	beq.n	8007c3a <xQueueReceive+0xc2>
 8007c9a:	f001 fab9 	bl	8009210 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c9e:	a901      	add	r1, sp, #4
 8007ca0:	a802      	add	r0, sp, #8
 8007ca2:	f000 fea5 	bl	80089f0 <xTaskCheckForTimeOut>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d1d0      	bne.n	8007c4c <xQueueReceive+0xd4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff fbd9 	bl	8007462 <prvIsQueueEmpty>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d0c5      	beq.n	8007c40 <xQueueReceive+0xc8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cb4:	9901      	ldr	r1, [sp, #4]
 8007cb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007cba:	f000 fe0b 	bl	80088d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7ff fc25 	bl	800750e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cc4:	f000 fd02 	bl	80086cc <xTaskResumeAll>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d1c9      	bne.n	8007c60 <xQueueReceive+0xe8>
					portYIELD_WITHIN_API();
 8007ccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cd0:	f8c9 3000 	str.w	r3, [r9]
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	e7c0      	b.n	8007c60 <xQueueReceive+0xe8>
				return errQUEUE_EMPTY;
 8007cde:	2000      	movs	r0, #0
 8007ce0:	e78e      	b.n	8007c00 <xQueueReceive+0x88>
 8007ce2:	bf00      	nop
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <xQueueSemaphoreTake>:
{
 8007ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007cf0:	b168      	cbz	r0, 8007d0e <xQueueSemaphoreTake+0x26>
 8007cf2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007cf4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007cf6:	b1ab      	cbz	r3, 8007d24 <xQueueSemaphoreTake+0x3c>
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	b672      	cpsid	i
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	b662      	cpsie	i
 8007d0c:	e7fe      	b.n	8007d0c <xQueueSemaphoreTake+0x24>
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	b672      	cpsid	i
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8007d22:	e7fe      	b.n	8007d22 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d24:	f000 feb6 	bl	8008a94 <xTaskGetSchedulerState>
 8007d28:	b960      	cbnz	r0, 8007d44 <xQueueSemaphoreTake+0x5c>
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	b183      	cbz	r3, 8007d50 <xQueueSemaphoreTake+0x68>
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	b672      	cpsid	i
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	b662      	cpsie	i
 8007d42:	e7fe      	b.n	8007d42 <xQueueSemaphoreTake+0x5a>
 8007d44:	2500      	movs	r5, #0
 8007d46:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007d48:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8007d4a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8007ea4 <xQueueSemaphoreTake+0x1bc>
 8007d4e:	e055      	b.n	8007dfc <xQueueSemaphoreTake+0x114>
 8007d50:	2500      	movs	r5, #0
 8007d52:	462e      	mov	r6, r5
 8007d54:	e7f8      	b.n	8007d48 <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d56:	3b01      	subs	r3, #1
 8007d58:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	b143      	cbz	r3, 8007d70 <xQueueSemaphoreTake+0x88>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	b953      	cbnz	r3, 8007d78 <xQueueSemaphoreTake+0x90>
				taskEXIT_CRITICAL();
 8007d62:	f001 fa55 	bl	8009210 <vPortExitCritical>
				return pdPASS;
 8007d66:	2501      	movs	r5, #1
}
 8007d68:	4628      	mov	r0, r5
 8007d6a:	b004      	add	sp, #16
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d70:	f000 ff8a 	bl	8008c88 <pvTaskIncrementMutexHeldCount>
 8007d74:	60a0      	str	r0, [r4, #8]
 8007d76:	e7f2      	b.n	8007d5e <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d78:	f104 0010 	add.w	r0, r4, #16
 8007d7c:	f000 fde4 	bl	8008948 <xTaskRemoveFromEventList>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d0ee      	beq.n	8007d62 <xQueueSemaphoreTake+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8007d84:	4b47      	ldr	r3, [pc, #284]	; (8007ea4 <xQueueSemaphoreTake+0x1bc>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	e7e5      	b.n	8007d62 <xQueueSemaphoreTake+0x7a>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007d96:	b155      	cbz	r5, 8007dae <xQueueSemaphoreTake+0xc6>
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	e7fe      	b.n	8007dac <xQueueSemaphoreTake+0xc4>
					taskEXIT_CRITICAL();
 8007dae:	f001 fa2f 	bl	8009210 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007db2:	e7d9      	b.n	8007d68 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007db4:	a802      	add	r0, sp, #8
 8007db6:	f000 fe0f 	bl	80089d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dba:	e029      	b.n	8007e10 <xQueueSemaphoreTake+0x128>
		prvLockQueue( pxQueue );
 8007dbc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8007dc0:	e032      	b.n	8007e28 <xQueueSemaphoreTake+0x140>
 8007dc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dc6:	e035      	b.n	8007e34 <xQueueSemaphoreTake+0x14c>
						taskENTER_CRITICAL();
 8007dc8:	f001 f9fc 	bl	80091c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dcc:	68a0      	ldr	r0, [r4, #8]
 8007dce:	f000 fe71 	bl	8008ab4 <xTaskPriorityInherit>
 8007dd2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007dd4:	f001 fa1c 	bl	8009210 <vPortExitCritical>
 8007dd8:	e03c      	b.n	8007e54 <xQueueSemaphoreTake+0x16c>
				prvUnlockQueue( pxQueue );
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff fb97 	bl	800750e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de0:	f000 fc74 	bl	80086cc <xTaskResumeAll>
 8007de4:	e009      	b.n	8007dfa <xQueueSemaphoreTake+0x112>
			prvUnlockQueue( pxQueue );
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7ff fb91 	bl	800750e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dec:	f000 fc6e 	bl	80086cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007df0:	4620      	mov	r0, r4
 8007df2:	f7ff fb36 	bl	8007462 <prvIsQueueEmpty>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d141      	bne.n	8007e7e <xQueueSemaphoreTake+0x196>
 8007dfa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007dfc:	f001 f9e2 	bl	80091c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1a7      	bne.n	8007d56 <xQueueSemaphoreTake+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0c4      	beq.n	8007d96 <xQueueSemaphoreTake+0xae>
				else if( xEntryTimeSet == pdFALSE )
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	d0d1      	beq.n	8007db4 <xQueueSemaphoreTake+0xcc>
		taskEXIT_CRITICAL();
 8007e10:	f001 f9fe 	bl	8009210 <vPortExitCritical>
		vTaskSuspendAll();
 8007e14:	f000 fbaa 	bl	800856c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e18:	f001 f9d4 	bl	80091c4 <vPortEnterCritical>
 8007e1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e26:	d0c9      	beq.n	8007dbc <xQueueSemaphoreTake+0xd4>
 8007e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d0c6      	beq.n	8007dc2 <xQueueSemaphoreTake+0xda>
 8007e34:	f001 f9ec 	bl	8009210 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e38:	a901      	add	r1, sp, #4
 8007e3a:	a802      	add	r0, sp, #8
 8007e3c:	f000 fdd8 	bl	80089f0 <xTaskCheckForTimeOut>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1d0      	bne.n	8007de6 <xQueueSemaphoreTake+0xfe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff fb0c 	bl	8007462 <prvIsQueueEmpty>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d0c5      	beq.n	8007dda <xQueueSemaphoreTake+0xf2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0b9      	beq.n	8007dc8 <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e54:	9901      	ldr	r1, [sp, #4]
 8007e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e5a:	f000 fd3b 	bl	80088d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7ff fb55 	bl	800750e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e64:	f000 fc32 	bl	80086cc <xTaskResumeAll>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1c6      	bne.n	8007dfa <xQueueSemaphoreTake+0x112>
					portYIELD_WITHIN_API();
 8007e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e70:	f8c8 3000 	str.w	r3, [r8]
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	e7bd      	b.n	8007dfa <xQueueSemaphoreTake+0x112>
					if( xInheritanceOccurred != pdFALSE )
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	f43f af72 	beq.w	8007d68 <xQueueSemaphoreTake+0x80>
						taskENTER_CRITICAL();
 8007e84:	f001 f99e 	bl	80091c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e8a:	b119      	cbz	r1, 8007e94 <xQueueSemaphoreTake+0x1ac>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007e8e:	6819      	ldr	r1, [r3, #0]
 8007e90:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e94:	68a0      	ldr	r0, [r4, #8]
 8007e96:	f000 fea1 	bl	8008bdc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007e9a:	f001 f9b9 	bl	8009210 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	e762      	b.n	8007d68 <xQueueSemaphoreTake+0x80>
 8007ea2:	bf00      	nop
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8007ea8:	b188      	cbz	r0, 8007ece <xQueueTakeMutexRecursive+0x26>
	{
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	460d      	mov	r5, r1
 8007eae:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007eb0:	6886      	ldr	r6, [r0, #8]
 8007eb2:	f000 fde9 	bl	8008a88 <xTaskGetCurrentTaskHandle>
 8007eb6:	4286      	cmp	r6, r0
 8007eb8:	d014      	beq.n	8007ee4 <xQueueTakeMutexRecursive+0x3c>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f7ff ff13 	bl	8007ce8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	b190      	cbz	r0, 8007eec <xQueueTakeMutexRecursive+0x44>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8007ecc:	e00e      	b.n	8007eec <xQueueTakeMutexRecursive+0x44>
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	b672      	cpsid	i
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	b662      	cpsie	i
		configASSERT( pxMutex );
 8007ee2:	e7fe      	b.n	8007ee2 <xQueueTakeMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ee4:	68e3      	ldr	r3, [r4, #12]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8007eea:	2201      	movs	r2, #1
	}
 8007eec:	4610      	mov	r0, r2
 8007eee:	bd70      	pop	{r4, r5, r6, pc}

08007ef0 <xQueueReceiveFromISR>:
{
 8007ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007ef4:	b1d8      	cbz	r0, 8007f2e <xQueueReceiveFromISR+0x3e>
 8007ef6:	4689      	mov	r9, r1
 8007ef8:	4617      	mov	r7, r2
 8007efa:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007efc:	b311      	cbz	r1, 8007f44 <xQueueReceiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007efe:	f001 fa6f 	bl	80093e0 <vPortValidateInterruptPriority>
	__asm volatile
 8007f02:	f3ef 8611 	mrs	r6, BASEPRI
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	b672      	cpsid	i
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f1a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f1e:	f1b8 0f00 	cmp.w	r8, #0
 8007f22:	d11d      	bne.n	8007f60 <xQueueReceiveFromISR+0x70>
			xReturn = pdFAIL;
 8007f24:	2000      	movs	r0, #0
	__asm volatile
 8007f26:	f386 8811 	msr	BASEPRI, r6
}
 8007f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	b672      	cpsid	i
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	b662      	cpsie	i
	configASSERT( pxQueue );
 8007f42:	e7fe      	b.n	8007f42 <xQueueReceiveFromISR+0x52>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0d9      	beq.n	8007efe <xQueueReceiveFromISR+0xe>
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	b672      	cpsid	i
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	b662      	cpsie	i
 8007f5e:	e7fe      	b.n	8007f5e <xQueueReceiveFromISR+0x6e>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f60:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007f64:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f66:	4649      	mov	r1, r9
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f7ff fabe 	bl	80074ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f6e:	f108 33ff 	add.w	r3, r8, #4294967295
 8007f72:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007f74:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007f78:	d005      	beq.n	8007f86 <xQueueReceiveFromISR+0x96>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f7a:	1c6b      	adds	r3, r5, #1
 8007f7c:	b25b      	sxtb	r3, r3
 8007f7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8007f82:	2001      	movs	r0, #1
 8007f84:	e7cf      	b.n	8007f26 <xQueueReceiveFromISR+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	b90b      	cbnz	r3, 8007f8e <xQueueReceiveFromISR+0x9e>
			xReturn = pdPASS;
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	e7cb      	b.n	8007f26 <xQueueReceiveFromISR+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f8e:	f104 0010 	add.w	r0, r4, #16
 8007f92:	f000 fcd9 	bl	8008948 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8007f96:	b11f      	cbz	r7, 8007fa0 <xQueueReceiveFromISR+0xb0>
 8007f98:	b110      	cbz	r0, 8007fa0 <xQueueReceiveFromISR+0xb0>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	6038      	str	r0, [r7, #0]
 8007f9e:	e7c2      	b.n	8007f26 <xQueueReceiveFromISR+0x36>
			xReturn = pdPASS;
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	e7c0      	b.n	8007f26 <xQueueReceiveFromISR+0x36>

08007fa4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8007fa4:	b140      	cbz	r0, 8007fb8 <uxQueueMessagesWaiting+0x14>
{
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007faa:	f001 f90b 	bl	80091c4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007fae:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8007fb0:	f001 f92e 	bl	8009210 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	bd10      	pop	{r4, pc}
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	b672      	cpsid	i
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	b662      	cpsie	i
	configASSERT( xQueue );
 8007fcc:	e7fe      	b.n	8007fcc <uxQueueMessagesWaiting+0x28>

08007fce <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8007fce:	b108      	cbz	r0, 8007fd4 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007fd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007fd2:	4770      	bx	lr
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	b672      	cpsid	i
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	b662      	cpsie	i
	configASSERT( pxQueue );
 8007fe8:	e7fe      	b.n	8007fe8 <uxQueueMessagesWaitingFromISR+0x1a>
	...

08007fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fec:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fee:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ff0:	4c08      	ldr	r4, [pc, #32]	; (8008014 <vQueueAddToRegistry+0x28>)
 8007ff2:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8007ff6:	b12a      	cbz	r2, 8008004 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d1f9      	bne.n	8007ff2 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008002:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008004:	4a03      	ldr	r2, [pc, #12]	; (8008014 <vQueueAddToRegistry+0x28>)
 8008006:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800800a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800800e:	6058      	str	r0, [r3, #4]
				break;
 8008010:	e7f5      	b.n	8007ffe <vQueueAddToRegistry+0x12>
 8008012:	bf00      	nop
 8008014:	20016134 	.word	0x20016134

08008018 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008018:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800801a:	4908      	ldr	r1, [pc, #32]	; (800803c <vQueueUnregisterQueue+0x24>)
 800801c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008020:	4282      	cmp	r2, r0
 8008022:	d003      	beq.n	800802c <vQueueUnregisterQueue+0x14>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008024:	3301      	adds	r3, #1
 8008026:	2b08      	cmp	r3, #8
 8008028:	d1f8      	bne.n	800801c <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800802a:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800802c:	4a04      	ldr	r2, [pc, #16]	; (8008040 <vQueueUnregisterQueue+0x28>)
 800802e:	2100      	movs	r1, #0
 8008030:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008034:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008038:	6059      	str	r1, [r3, #4]
				break;
 800803a:	4770      	bx	lr
 800803c:	20016138 	.word	0x20016138
 8008040:	20016134 	.word	0x20016134

08008044 <vQueueDelete>:
	configASSERT( pxQueue );
 8008044:	b138      	cbz	r0, 8008056 <vQueueDelete+0x12>
{
 8008046:	b510      	push	{r4, lr}
 8008048:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800804a:	f7ff ffe5 	bl	8008018 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800804e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008052:	b15b      	cbz	r3, 800806c <vQueueDelete+0x28>
}
 8008054:	bd10      	pop	{r4, pc}
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	b672      	cpsid	i
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	b662      	cpsie	i
	configASSERT( pxQueue );
 800806a:	e7fe      	b.n	800806a <vQueueDelete+0x26>
			vPortFree( pxQueue );
 800806c:	4620      	mov	r0, r4
 800806e:	f001 faaf 	bl	80095d0 <vPortFree>
}
 8008072:	e7ef      	b.n	8008054 <vQueueDelete+0x10>

08008074 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4604      	mov	r4, r0
 8008078:	460d      	mov	r5, r1
 800807a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800807c:	f001 f8a2 	bl	80091c4 <vPortEnterCritical>
 8008080:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008084:	b25b      	sxtb	r3, r3
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d00d      	beq.n	80080a8 <vQueueWaitForMessageRestricted+0x34>
 800808c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008090:	b25b      	sxtb	r3, r3
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d00b      	beq.n	80080b0 <vQueueWaitForMessageRestricted+0x3c>
 8008098:	f001 f8ba 	bl	8009210 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800809c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800809e:	b15b      	cbz	r3, 80080b8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7ff fa34 	bl	800750e <prvUnlockQueue>
	}
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80080a8:	2300      	movs	r3, #0
 80080aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80080ae:	e7ed      	b.n	800808c <vQueueWaitForMessageRestricted+0x18>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080b6:	e7ef      	b.n	8008098 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080b8:	4632      	mov	r2, r6
 80080ba:	4629      	mov	r1, r5
 80080bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080c0:	f000 fc22 	bl	8008908 <vTaskPlaceOnEventListRestricted>
 80080c4:	e7ec      	b.n	80080a0 <vQueueWaitForMessageRestricted+0x2c>
	...

080080c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080c8:	4b08      	ldr	r3, [pc, #32]	; (80080ec <prvResetNextTaskUnblockTime+0x24>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	b923      	cbnz	r3, 80080da <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <prvResetNextTaskUnblockTime+0x28>)
 80080d2:	f04f 32ff 	mov.w	r2, #4294967295
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080da:	4b04      	ldr	r3, [pc, #16]	; (80080ec <prvResetNextTaskUnblockTime+0x24>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <prvResetNextTaskUnblockTime+0x28>)
 80080e6:	601a      	str	r2, [r3, #0]
	}
}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	2000e924 	.word	0x2000e924
 80080f0:	2000edcc 	.word	0x2000edcc

080080f4 <prvInitialiseNewTask>:
{
 80080f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f8:	4607      	mov	r7, r0
 80080fa:	468a      	mov	sl, r1
 80080fc:	4698      	mov	r8, r3
 80080fe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008102:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008104:	0096      	lsls	r6, r2, #2
 8008106:	4632      	mov	r2, r6
 8008108:	21a5      	movs	r1, #165	; 0xa5
 800810a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800810c:	f00a fa1f 	bl	801254e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008110:	3e04      	subs	r6, #4
 8008112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008114:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008116:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800811a:	f1ba 0f00 	cmp.w	sl, #0
 800811e:	d042      	beq.n	80081a6 <prvInitialiseNewTask+0xb2>
 8008120:	f10a 32ff 	add.w	r2, sl, #4294967295
 8008124:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8008128:	f10a 030f 	add.w	r3, sl, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800812c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008130:	f805 1f01 	strb.w	r1, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008134:	b109      	cbz	r1, 800813a <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008136:	429a      	cmp	r2, r3
 8008138:	d1f8      	bne.n	800812c <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800813a:	2300      	movs	r3, #0
 800813c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008140:	9d08      	ldr	r5, [sp, #32]
 8008142:	2d37      	cmp	r5, #55	; 0x37
 8008144:	bf28      	it	cs
 8008146:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008148:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800814a:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800814c:	f04f 0a00 	mov.w	sl, #0
 8008150:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008154:	1d20      	adds	r0, r4, #4
 8008156:	f7ff f94a 	bl	80073ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800815a:	f104 0018 	add.w	r0, r4, #24
 800815e:	f7ff f946 	bl	80073ee <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008162:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008164:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
 8008168:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800816a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800816c:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008170:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008174:	2260      	movs	r2, #96	; 0x60
 8008176:	4651      	mov	r1, sl
 8008178:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800817c:	f00a f9e7 	bl	801254e <memset>
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <prvInitialiseNewTask+0xbc>)
 8008182:	65a3      	str	r3, [r4, #88]	; 0x58
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <prvInitialiseNewTask+0xc0>)
 8008186:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008188:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <prvInitialiseNewTask+0xc4>)
 800818a:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800818c:	4642      	mov	r2, r8
 800818e:	4639      	mov	r1, r7
 8008190:	4630      	mov	r0, r6
 8008192:	f000 ffed 	bl	8009170 <pxPortInitialiseStack>
 8008196:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	d001      	beq.n	80081a2 <prvInitialiseNewTask+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800819e:	f8c9 4000 	str.w	r4, [r9]
}
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80081ac:	e7c8      	b.n	8008140 <prvInitialiseNewTask+0x4c>
 80081ae:	bf00      	nop
 80081b0:	08016230 	.word	0x08016230
 80081b4:	08016250 	.word	0x08016250
 80081b8:	08016210 	.word	0x08016210

080081bc <prvAddNewTaskToReadyList>:
{
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80081c0:	f001 f800 	bl	80091c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80081c4:	4a2f      	ldr	r2, [pc, #188]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	3301      	adds	r3, #1
 80081ca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081cc:	4b2e      	ldr	r3, [pc, #184]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	b15b      	cbz	r3, 80081ea <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80081d2:	4b2e      	ldr	r3, [pc, #184]	; (800828c <prvAddNewTaskToReadyList+0xd0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	b96b      	cbnz	r3, 80081f4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d807      	bhi.n	80081f4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80081e4:	4b28      	ldr	r3, [pc, #160]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 80081e6:	601c      	str	r4, [r3, #0]
 80081e8:	e004      	b.n	80081f4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80081ea:	4b27      	ldr	r3, [pc, #156]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 80081ec:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d027      	beq.n	8008244 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80081f4:	4a26      	ldr	r2, [pc, #152]	; (8008290 <prvAddNewTaskToReadyList+0xd4>)
 80081f6:	6813      	ldr	r3, [r2, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081fc:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80081fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008200:	4b24      	ldr	r3, [pc, #144]	; (8008294 <prvAddNewTaskToReadyList+0xd8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4298      	cmp	r0, r3
 8008206:	d901      	bls.n	800820c <prvAddNewTaskToReadyList+0x50>
 8008208:	4b22      	ldr	r3, [pc, #136]	; (8008294 <prvAddNewTaskToReadyList+0xd8>)
 800820a:	6018      	str	r0, [r3, #0]
 800820c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008210:	1d21      	adds	r1, r4, #4
 8008212:	4b21      	ldr	r3, [pc, #132]	; (8008298 <prvAddNewTaskToReadyList+0xdc>)
 8008214:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008218:	f7ff f8ec 	bl	80073f4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800821c:	f000 fff8 	bl	8009210 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008220:	4b1a      	ldr	r3, [pc, #104]	; (800828c <prvAddNewTaskToReadyList+0xd0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	b16b      	cbz	r3, 8008242 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008226:	4b18      	ldr	r3, [pc, #96]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800822e:	429a      	cmp	r2, r3
 8008230:	d207      	bcs.n	8008242 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8008232:	4b1a      	ldr	r3, [pc, #104]	; (800829c <prvAddNewTaskToReadyList+0xe0>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
}
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	4d14      	ldr	r5, [pc, #80]	; (8008298 <prvAddNewTaskToReadyList+0xdc>)
 8008246:	f505 668c 	add.w	r6, r5, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800824a:	4628      	mov	r0, r5
 800824c:	f7ff f8c4 	bl	80073d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008250:	3514      	adds	r5, #20
 8008252:	42b5      	cmp	r5, r6
 8008254:	d1f9      	bne.n	800824a <prvAddNewTaskToReadyList+0x8e>
	vListInitialise( &xDelayedTaskList1 );
 8008256:	4e12      	ldr	r6, [pc, #72]	; (80082a0 <prvAddNewTaskToReadyList+0xe4>)
 8008258:	4630      	mov	r0, r6
 800825a:	f7ff f8bd 	bl	80073d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800825e:	4d11      	ldr	r5, [pc, #68]	; (80082a4 <prvAddNewTaskToReadyList+0xe8>)
 8008260:	4628      	mov	r0, r5
 8008262:	f7ff f8b9 	bl	80073d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008266:	4810      	ldr	r0, [pc, #64]	; (80082a8 <prvAddNewTaskToReadyList+0xec>)
 8008268:	f7ff f8b6 	bl	80073d8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800826c:	480f      	ldr	r0, [pc, #60]	; (80082ac <prvAddNewTaskToReadyList+0xf0>)
 800826e:	f7ff f8b3 	bl	80073d8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008272:	480f      	ldr	r0, [pc, #60]	; (80082b0 <prvAddNewTaskToReadyList+0xf4>)
 8008274:	f7ff f8b0 	bl	80073d8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008278:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <prvAddNewTaskToReadyList+0xf8>)
 800827a:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800827c:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <prvAddNewTaskToReadyList+0xfc>)
 800827e:	601d      	str	r5, [r3, #0]
}
 8008280:	e7b8      	b.n	80081f4 <prvAddNewTaskToReadyList+0x38>
 8008282:	bf00      	nop
 8008284:	2000ed8c 	.word	0x2000ed8c
 8008288:	2000e920 	.word	0x2000e920
 800828c:	2000ede8 	.word	0x2000ede8
 8008290:	2000ed9c 	.word	0x2000ed9c
 8008294:	2000eda0 	.word	0x2000eda0
 8008298:	2000e92c 	.word	0x2000e92c
 800829c:	e000ed04 	.word	0xe000ed04
 80082a0:	2000eda4 	.word	0x2000eda4
 80082a4:	2000edb8 	.word	0x2000edb8
 80082a8:	2000edd4 	.word	0x2000edd4
 80082ac:	2000ee00 	.word	0x2000ee00
 80082b0:	2000edec 	.word	0x2000edec
 80082b4:	2000e924 	.word	0x2000e924
 80082b8:	2000e928 	.word	0x2000e928

080082bc <prvDeleteTCB>:
	{
 80082bc:	b510      	push	{r4, lr}
 80082be:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082c0:	3054      	adds	r0, #84	; 0x54
 80082c2:	f00a fa0d 	bl	80126e0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082c6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80082ca:	b173      	cbz	r3, 80082ea <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d013      	beq.n	80082f8 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d010      	beq.n	80082f6 <prvDeleteTCB+0x3a>
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
 80082e8:	e7fe      	b.n	80082e8 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 80082ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80082ec:	f001 f970 	bl	80095d0 <vPortFree>
				vPortFree( pxTCB );
 80082f0:	4620      	mov	r0, r4
 80082f2:	f001 f96d 	bl	80095d0 <vPortFree>
	}
 80082f6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80082f8:	4620      	mov	r0, r4
 80082fa:	f001 f969 	bl	80095d0 <vPortFree>
 80082fe:	e7fa      	b.n	80082f6 <prvDeleteTCB+0x3a>

08008300 <prvIdleTask>:
{
 8008300:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008302:	4c14      	ldr	r4, [pc, #80]	; (8008354 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008304:	4f14      	ldr	r7, [pc, #80]	; (8008358 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8008306:	4e15      	ldr	r6, [pc, #84]	; (800835c <prvIdleTask+0x5c>)
				taskYIELD();
 8008308:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8008364 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	b1a3      	cbz	r3, 800833a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8008310:	f000 ff58 	bl	80091c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008318:	1d28      	adds	r0, r5, #4
 800831a:	f7ff f88f 	bl	800743c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800831e:	6833      	ldr	r3, [r6, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	3b01      	subs	r3, #1
 8008328:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800832a:	f000 ff71 	bl	8009210 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800832e:	4628      	mov	r0, r5
 8008330:	f7ff ffc4 	bl	80082bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1ea      	bne.n	8008310 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <prvIdleTask+0x60>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d9e4      	bls.n	800830c <prvIdleTask+0xc>
				taskYIELD();
 8008342:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008346:	f8c8 3000 	str.w	r3, [r8]
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	e7db      	b.n	800830c <prvIdleTask+0xc>
 8008354:	2000ed90 	.word	0x2000ed90
 8008358:	2000ee00 	.word	0x2000ee00
 800835c:	2000ed8c 	.word	0x2000ed8c
 8008360:	2000e92c 	.word	0x2000e92c
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4604      	mov	r4, r0
 800836c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800836e:	4b17      	ldr	r3, [pc, #92]	; (80083cc <prvAddCurrentTaskToDelayedList+0x64>)
 8008370:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008372:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	3004      	adds	r0, #4
 8008378:	f7ff f860 	bl	800743c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800837c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008380:	d100      	bne.n	8008384 <prvAddCurrentTaskToDelayedList+0x1c>
 8008382:	b96d      	cbnz	r5, 80083a0 <prvAddCurrentTaskToDelayedList+0x38>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008384:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800838c:	42a6      	cmp	r6, r4
 800838e:	d90e      	bls.n	80083ae <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008390:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8008396:	6819      	ldr	r1, [r3, #0]
 8008398:	3104      	adds	r1, #4
 800839a:	f7ff f836 	bl	800740a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800839e:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a0:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	3104      	adds	r1, #4
 80083a6:	480c      	ldr	r0, [pc, #48]	; (80083d8 <prvAddCurrentTaskToDelayedList+0x70>)
 80083a8:	f7ff f824 	bl	80073f4 <vListInsertEnd>
 80083ac:	e7f7      	b.n	800839e <prvAddCurrentTaskToDelayedList+0x36>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ae:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <prvAddCurrentTaskToDelayedList+0x74>)
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	3104      	adds	r1, #4
 80083b8:	f7ff f827 	bl	800740a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083bc:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <prvAddCurrentTaskToDelayedList+0x78>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d9ec      	bls.n	800839e <prvAddCurrentTaskToDelayedList+0x36>
					xNextTaskUnblockTime = xTimeToWake;
 80083c4:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <prvAddCurrentTaskToDelayedList+0x78>)
 80083c6:	601c      	str	r4, [r3, #0]
}
 80083c8:	e7e9      	b.n	800839e <prvAddCurrentTaskToDelayedList+0x36>
 80083ca:	bf00      	nop
 80083cc:	2000ee14 	.word	0x2000ee14
 80083d0:	2000e920 	.word	0x2000e920
 80083d4:	2000e928 	.word	0x2000e928
 80083d8:	2000edec 	.word	0x2000edec
 80083dc:	2000e924 	.word	0x2000e924
 80083e0:	2000edcc 	.word	0x2000edcc

080083e4 <xTaskCreateStatic>:
	{
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80083ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80083ec:	b185      	cbz	r5, 8008410 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80083ee:	b1d4      	cbz	r4, 8008426 <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 80083f0:	26bc      	movs	r6, #188	; 0xbc
 80083f2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083f4:	9e04      	ldr	r6, [sp, #16]
 80083f6:	2ebc      	cmp	r6, #188	; 0xbc
 80083f8:	d020      	beq.n	800843c <xTaskCreateStatic+0x58>
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	b672      	cpsid	i
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	b662      	cpsie	i
 800840e:	e7fe      	b.n	800840e <xTaskCreateStatic+0x2a>
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	b672      	cpsid	i
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8008424:	e7fe      	b.n	8008424 <xTaskCreateStatic+0x40>
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 800843a:	e7fe      	b.n	800843a <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800843c:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800843e:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008440:	2502      	movs	r5, #2
 8008442:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008446:	2500      	movs	r5, #0
 8008448:	9503      	str	r5, [sp, #12]
 800844a:	9402      	str	r4, [sp, #8]
 800844c:	ad05      	add	r5, sp, #20
 800844e:	9501      	str	r5, [sp, #4]
 8008450:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008452:	9500      	str	r5, [sp, #0]
 8008454:	f7ff fe4e 	bl	80080f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008458:	4620      	mov	r0, r4
 800845a:	f7ff feaf 	bl	80081bc <prvAddNewTaskToReadyList>
	}
 800845e:	9805      	ldr	r0, [sp, #20]
 8008460:	b006      	add	sp, #24
 8008462:	bd70      	pop	{r4, r5, r6, pc}

08008464 <xTaskCreate>:
	{
 8008464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008468:	b085      	sub	sp, #20
 800846a:	4607      	mov	r7, r0
 800846c:	4688      	mov	r8, r1
 800846e:	4614      	mov	r4, r2
 8008470:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008472:	0090      	lsls	r0, r2, #2
 8008474:	f001 f812 	bl	800949c <pvPortMalloc>
			if( pxStack != NULL )
 8008478:	b308      	cbz	r0, 80084be <xTaskCreate+0x5a>
 800847a:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800847c:	20bc      	movs	r0, #188	; 0xbc
 800847e:	f001 f80d 	bl	800949c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008482:	4605      	mov	r5, r0
 8008484:	b1a8      	cbz	r0, 80084b2 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8008486:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800848a:	2300      	movs	r3, #0
 800848c:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	9002      	str	r0, [sp, #8]
 8008494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4633      	mov	r3, r6
 800849e:	4622      	mov	r2, r4
 80084a0:	4641      	mov	r1, r8
 80084a2:	4638      	mov	r0, r7
 80084a4:	f7ff fe26 	bl	80080f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7ff fe87 	bl	80081bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084ae:	2001      	movs	r0, #1
 80084b0:	e007      	b.n	80084c2 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80084b2:	4648      	mov	r0, r9
 80084b4:	f001 f88c 	bl	80095d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	e001      	b.n	80084c2 <xTaskCreate+0x5e>
 80084be:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80084c2:	b005      	add	sp, #20
 80084c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080084c8 <vTaskStartScheduler>:
{
 80084c8:	b510      	push	{r4, lr}
 80084ca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084cc:	2400      	movs	r4, #0
 80084ce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084d0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084d2:	aa07      	add	r2, sp, #28
 80084d4:	a906      	add	r1, sp, #24
 80084d6:	a805      	add	r0, sp, #20
 80084d8:	f7fe ff66 	bl	80073a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084dc:	9b05      	ldr	r3, [sp, #20]
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	9b06      	ldr	r3, [sp, #24]
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	9400      	str	r4, [sp, #0]
 80084e6:	4623      	mov	r3, r4
 80084e8:	9a07      	ldr	r2, [sp, #28]
 80084ea:	4919      	ldr	r1, [pc, #100]	; (8008550 <vTaskStartScheduler+0x88>)
 80084ec:	4819      	ldr	r0, [pc, #100]	; (8008554 <vTaskStartScheduler+0x8c>)
 80084ee:	f7ff ff79 	bl	80083e4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80084f2:	b358      	cbz	r0, 800854c <vTaskStartScheduler+0x84>
			xReturn = xTimerCreateTimerTask();
 80084f4:	f000 fc32 	bl	8008d5c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80084f8:	2801      	cmp	r0, #1
 80084fa:	d00d      	beq.n	8008518 <vTaskStartScheduler+0x50>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008500:	d124      	bne.n	800854c <vTaskStartScheduler+0x84>
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	e7fe      	b.n	8008516 <vTaskStartScheduler+0x4e>
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	b672      	cpsid	i
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <vTaskStartScheduler+0x90>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3354      	adds	r3, #84	; 0x54
 8008532:	4a0a      	ldr	r2, [pc, #40]	; (800855c <vTaskStartScheduler+0x94>)
 8008534:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <vTaskStartScheduler+0x98>)
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800853e:	4b09      	ldr	r3, [pc, #36]	; (8008564 <vTaskStartScheduler+0x9c>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008544:	4b08      	ldr	r3, [pc, #32]	; (8008568 <vTaskStartScheduler+0xa0>)
 8008546:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8008548:	f000 fee0 	bl	800930c <xPortStartScheduler>
}
 800854c:	b008      	add	sp, #32
 800854e:	bd10      	pop	{r4, pc}
 8008550:	080139ac 	.word	0x080139ac
 8008554:	08008301 	.word	0x08008301
 8008558:	2000e920 	.word	0x2000e920
 800855c:	20000018 	.word	0x20000018
 8008560:	2000edcc 	.word	0x2000edcc
 8008564:	2000ede8 	.word	0x2000ede8
 8008568:	2000ee14 	.word	0x2000ee14

0800856c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800856c:	4a02      	ldr	r2, [pc, #8]	; (8008578 <vTaskSuspendAll+0xc>)
 800856e:	6813      	ldr	r3, [r2, #0]
 8008570:	3301      	adds	r3, #1
 8008572:	6013      	str	r3, [r2, #0]
}
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	2000ed98 	.word	0x2000ed98

0800857c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800857c:	4b01      	ldr	r3, [pc, #4]	; (8008584 <xTaskGetTickCount+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
}
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	2000ee14 	.word	0x2000ee14

08008588 <xTaskGetTickCountFromISR>:
{
 8008588:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800858a:	f000 ff29 	bl	80093e0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800858e:	4b01      	ldr	r3, [pc, #4]	; (8008594 <xTaskGetTickCountFromISR+0xc>)
 8008590:	6818      	ldr	r0, [r3, #0]
}
 8008592:	bd08      	pop	{r3, pc}
 8008594:	2000ee14 	.word	0x2000ee14

08008598 <xTaskIncrementTick>:
{
 8008598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859c:	4b40      	ldr	r3, [pc, #256]	; (80086a0 <xTaskIncrementTick+0x108>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d16f      	bne.n	8008684 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085a4:	4b3f      	ldr	r3, [pc, #252]	; (80086a4 <xTaskIncrementTick+0x10c>)
 80085a6:	681d      	ldr	r5, [r3, #0]
 80085a8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80085aa:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ac:	b9d5      	cbnz	r5, 80085e4 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
 80085ae:	4b3e      	ldr	r3, [pc, #248]	; (80086a8 <xTaskIncrementTick+0x110>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	b153      	cbz	r3, 80085cc <xTaskIncrementTick+0x34>
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	b672      	cpsid	i
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	b662      	cpsie	i
 80085ca:	e7fe      	b.n	80085ca <xTaskIncrementTick+0x32>
 80085cc:	4a36      	ldr	r2, [pc, #216]	; (80086a8 <xTaskIncrementTick+0x110>)
 80085ce:	6811      	ldr	r1, [r2, #0]
 80085d0:	4b36      	ldr	r3, [pc, #216]	; (80086ac <xTaskIncrementTick+0x114>)
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	6010      	str	r0, [r2, #0]
 80085d6:	6019      	str	r1, [r3, #0]
 80085d8:	4a35      	ldr	r2, [pc, #212]	; (80086b0 <xTaskIncrementTick+0x118>)
 80085da:	6813      	ldr	r3, [r2, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	f7ff fd72 	bl	80080c8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085e4:	4b33      	ldr	r3, [pc, #204]	; (80086b4 <xTaskIncrementTick+0x11c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	42ab      	cmp	r3, r5
 80085ea:	d83e      	bhi.n	800866a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ec:	4b2e      	ldr	r3, [pc, #184]	; (80086a8 <xTaskIncrementTick+0x110>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	b133      	cbz	r3, 8008602 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 80085f4:	2400      	movs	r4, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80086a8 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 80085fa:	4f2f      	ldr	r7, [pc, #188]	; (80086b8 <xTaskIncrementTick+0x120>)
 80085fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80086c0 <xTaskIncrementTick+0x128>
 8008600:	e01b      	b.n	800863a <xTaskIncrementTick+0xa2>
BaseType_t xSwitchRequired = pdFALSE;
 8008602:	2400      	movs	r4, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008604:	4b2b      	ldr	r3, [pc, #172]	; (80086b4 <xTaskIncrementTick+0x11c>)
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	601a      	str	r2, [r3, #0]
					break;
 800860c:	e02e      	b.n	800866c <xTaskIncrementTick+0xd4>
						xNextTaskUnblockTime = xItemValue;
 800860e:	4a29      	ldr	r2, [pc, #164]	; (80086b4 <xTaskIncrementTick+0x11c>)
 8008610:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008612:	e02b      	b.n	800866c <xTaskIncrementTick+0xd4>
					prvAddTaskToReadyList( pxTCB );
 8008614:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008618:	4649      	mov	r1, r9
 800861a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800861e:	f7fe fee9 	bl	80073f4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008622:	4b26      	ldr	r3, [pc, #152]	; (80086bc <xTaskIncrementTick+0x124>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800862a:	429a      	cmp	r2, r3
 800862c:	bf28      	it	cs
 800862e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008630:	f8d8 3000 	ldr.w	r3, [r8]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0e4      	beq.n	8008604 <xTaskIncrementTick+0x6c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863a:	f8d8 3000 	ldr.w	r3, [r8]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008642:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008644:	429d      	cmp	r5, r3
 8008646:	d3e2      	bcc.n	800860e <xTaskIncrementTick+0x76>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008648:	f106 0904 	add.w	r9, r6, #4
 800864c:	4648      	mov	r0, r9
 800864e:	f7fe fef5 	bl	800743c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008652:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008654:	b11b      	cbz	r3, 800865e <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008656:	f106 0018 	add.w	r0, r6, #24
 800865a:	f7fe feef 	bl	800743c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800865e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	4298      	cmp	r0, r3
 8008664:	d9d6      	bls.n	8008614 <xTaskIncrementTick+0x7c>
 8008666:	6038      	str	r0, [r7, #0]
 8008668:	e7d4      	b.n	8008614 <xTaskIncrementTick+0x7c>
BaseType_t xSwitchRequired = pdFALSE;
 800866a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <xTaskIncrementTick+0x124>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <xTaskIncrementTick+0x128>)
 800867a:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 800867c:	2b02      	cmp	r3, #2
 800867e:	bf28      	it	cs
 8008680:	2401      	movcs	r4, #1
 8008682:	e004      	b.n	800868e <xTaskIncrementTick+0xf6>
		++uxPendedTicks;
 8008684:	4a0f      	ldr	r2, [pc, #60]	; (80086c4 <xTaskIncrementTick+0x12c>)
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	3301      	adds	r3, #1
 800868a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800868c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800868e:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <xTaskIncrementTick+0x130>)
 8008690:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008692:	2b00      	cmp	r3, #0
}
 8008694:	bf0c      	ite	eq
 8008696:	4620      	moveq	r0, r4
 8008698:	2001      	movne	r0, #1
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869e:	bf00      	nop
 80086a0:	2000ed98 	.word	0x2000ed98
 80086a4:	2000ee14 	.word	0x2000ee14
 80086a8:	2000e924 	.word	0x2000e924
 80086ac:	2000e928 	.word	0x2000e928
 80086b0:	2000edd0 	.word	0x2000edd0
 80086b4:	2000edcc 	.word	0x2000edcc
 80086b8:	2000eda0 	.word	0x2000eda0
 80086bc:	2000e920 	.word	0x2000e920
 80086c0:	2000e92c 	.word	0x2000e92c
 80086c4:	2000ed94 	.word	0x2000ed94
 80086c8:	2000ee18 	.word	0x2000ee18

080086cc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80086cc:	4b38      	ldr	r3, [pc, #224]	; (80087b0 <xTaskResumeAll+0xe4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	b953      	cbnz	r3, 80086e8 <xTaskResumeAll+0x1c>
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	b672      	cpsid	i
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	b662      	cpsie	i
 80086e6:	e7fe      	b.n	80086e6 <xTaskResumeAll+0x1a>
{
 80086e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 80086ec:	f000 fd6a 	bl	80091c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80086f0:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <xTaskResumeAll+0xe4>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	3a01      	subs	r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d147      	bne.n	800878e <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086fe:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <xTaskResumeAll+0xe8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d049      	beq.n	800879a <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008706:	4b2c      	ldr	r3, [pc, #176]	; (80087b8 <xTaskResumeAll+0xec>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d049      	beq.n	80087a2 <xTaskResumeAll+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870e:	4e2a      	ldr	r6, [pc, #168]	; (80087b8 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8008710:	4d2a      	ldr	r5, [pc, #168]	; (80087bc <xTaskResumeAll+0xf0>)
 8008712:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80087d0 <xTaskResumeAll+0x104>
 8008716:	e002      	b.n	800871e <xTaskResumeAll+0x52>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d03f      	beq.n	800879e <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871e:	68f3      	ldr	r3, [r6, #12]
 8008720:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008722:	f104 0018 	add.w	r0, r4, #24
 8008726:	f7fe fe89 	bl	800743c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800872a:	1d27      	adds	r7, r4, #4
 800872c:	4638      	mov	r0, r7
 800872e:	f7fe fe85 	bl	800743c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008732:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	4298      	cmp	r0, r3
 8008738:	d900      	bls.n	800873c <xTaskResumeAll+0x70>
 800873a:	6028      	str	r0, [r5, #0]
 800873c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008740:	4639      	mov	r1, r7
 8008742:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8008746:	f7fe fe55 	bl	80073f4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800874a:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <xTaskResumeAll+0xf4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	429a      	cmp	r2, r3
 8008754:	d3e0      	bcc.n	8008718 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8008756:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <xTaskResumeAll+0xf8>)
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	e7dc      	b.n	8008718 <xTaskResumeAll+0x4c>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800875e:	3c01      	subs	r4, #1
 8008760:	d005      	beq.n	800876e <xTaskResumeAll+0xa2>
							if( xTaskIncrementTick() != pdFALSE )
 8008762:	f7ff ff19 	bl	8008598 <xTaskIncrementTick>
 8008766:	2800      	cmp	r0, #0
 8008768:	d0f9      	beq.n	800875e <xTaskResumeAll+0x92>
								xYieldPending = pdTRUE;
 800876a:	6035      	str	r5, [r6, #0]
 800876c:	e7f7      	b.n	800875e <xTaskResumeAll+0x92>
						uxPendedTicks = 0;
 800876e:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <xTaskResumeAll+0xfc>)
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8008774:	4b13      	ldr	r3, [pc, #76]	; (80087c4 <xTaskResumeAll+0xf8>)
 8008776:	681c      	ldr	r4, [r3, #0]
 8008778:	b154      	cbz	r4, 8008790 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <xTaskResumeAll+0x100>)
 800877c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800878a:	2401      	movs	r4, #1
 800878c:	e000      	b.n	8008790 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 800878e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008790:	f000 fd3e 	bl	8009210 <vPortExitCritical>
}
 8008794:	4620      	mov	r0, r4
 8008796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800879a:	2400      	movs	r4, #0
 800879c:	e7f8      	b.n	8008790 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 800879e:	f7ff fc93 	bl	80080c8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <xTaskResumeAll+0xfc>)
 80087a4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80087a6:	2c00      	cmp	r4, #0
 80087a8:	d0e4      	beq.n	8008774 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80087aa:	4e06      	ldr	r6, [pc, #24]	; (80087c4 <xTaskResumeAll+0xf8>)
 80087ac:	2501      	movs	r5, #1
 80087ae:	e7d8      	b.n	8008762 <xTaskResumeAll+0x96>
 80087b0:	2000ed98 	.word	0x2000ed98
 80087b4:	2000ed8c 	.word	0x2000ed8c
 80087b8:	2000edd4 	.word	0x2000edd4
 80087bc:	2000eda0 	.word	0x2000eda0
 80087c0:	2000e920 	.word	0x2000e920
 80087c4:	2000ee18 	.word	0x2000ee18
 80087c8:	2000ed94 	.word	0x2000ed94
 80087cc:	e000ed04 	.word	0xe000ed04
 80087d0:	2000e92c 	.word	0x2000e92c

080087d4 <vTaskDelay>:
	{
 80087d4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087d6:	b1b8      	cbz	r0, 8008808 <vTaskDelay+0x34>
 80087d8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80087da:	4b10      	ldr	r3, [pc, #64]	; (800881c <vTaskDelay+0x48>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	b153      	cbz	r3, 80087f6 <vTaskDelay+0x22>
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	b672      	cpsid	i
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	b662      	cpsie	i
 80087f4:	e7fe      	b.n	80087f4 <vTaskDelay+0x20>
			vTaskSuspendAll();
 80087f6:	f7ff feb9 	bl	800856c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087fa:	2100      	movs	r1, #0
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff fdb3 	bl	8008368 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008802:	f7ff ff63 	bl	80086cc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008806:	b938      	cbnz	r0, 8008818 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <vTaskDelay+0x4c>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
	}
 8008818:	bd10      	pop	{r4, pc}
 800881a:	bf00      	nop
 800881c:	2000ed98 	.word	0x2000ed98
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <vTaskSwitchContext+0x98>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	b11b      	cbz	r3, 8008832 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800882a:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <vTaskSwitchContext+0x9c>)
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8008832:	4b23      	ldr	r3, [pc, #140]	; (80088c0 <vTaskSwitchContext+0x9c>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b22      	ldr	r3, [pc, #136]	; (80088c4 <vTaskSwitchContext+0xa0>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008840:	0092      	lsls	r2, r2, #2
 8008842:	4921      	ldr	r1, [pc, #132]	; (80088c8 <vTaskSwitchContext+0xa4>)
 8008844:	588a      	ldr	r2, [r1, r2]
 8008846:	b9a2      	cbnz	r2, 8008872 <vTaskSwitchContext+0x4e>
 8008848:	b143      	cbz	r3, 800885c <vTaskSwitchContext+0x38>
 800884a:	460a      	mov	r2, r1
 800884c:	3b01      	subs	r3, #1
 800884e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008852:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8008856:	b961      	cbnz	r1, 8008872 <vTaskSwitchContext+0x4e>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1f7      	bne.n	800884c <vTaskSwitchContext+0x28>
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	b672      	cpsid	i
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	b662      	cpsie	i
 8008870:	e7fe      	b.n	8008870 <vTaskSwitchContext+0x4c>
 8008872:	4a15      	ldr	r2, [pc, #84]	; (80088c8 <vTaskSwitchContext+0xa4>)
 8008874:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008878:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800887c:	6848      	ldr	r0, [r1, #4]
 800887e:	6840      	ldr	r0, [r0, #4]
 8008880:	6048      	str	r0, [r1, #4]
 8008882:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008886:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800888a:	3208      	adds	r2, #8
 800888c:	4290      	cmp	r0, r2
 800888e:	d00f      	beq.n	80088b0 <vTaskSwitchContext+0x8c>
 8008890:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008894:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <vTaskSwitchContext+0xa4>)
 8008896:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800889a:	6852      	ldr	r2, [r2, #4]
 800889c:	68d1      	ldr	r1, [r2, #12]
 800889e:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <vTaskSwitchContext+0xa8>)
 80088a0:	6011      	str	r1, [r2, #0]
 80088a2:	4908      	ldr	r1, [pc, #32]	; (80088c4 <vTaskSwitchContext+0xa0>)
 80088a4:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	3354      	adds	r3, #84	; 0x54
 80088aa:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <vTaskSwitchContext+0xac>)
 80088ac:	6013      	str	r3, [r2, #0]
}
 80088ae:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b0:	6840      	ldr	r0, [r0, #4]
 80088b2:	4a05      	ldr	r2, [pc, #20]	; (80088c8 <vTaskSwitchContext+0xa4>)
 80088b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80088b8:	6050      	str	r0, [r2, #4]
 80088ba:	e7e9      	b.n	8008890 <vTaskSwitchContext+0x6c>
 80088bc:	2000ed98 	.word	0x2000ed98
 80088c0:	2000ee18 	.word	0x2000ee18
 80088c4:	2000eda0 	.word	0x2000eda0
 80088c8:	2000e92c 	.word	0x2000e92c
 80088cc:	2000e920 	.word	0x2000e920
 80088d0:	20000018 	.word	0x20000018

080088d4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80088d4:	b158      	cbz	r0, 80088ee <vTaskPlaceOnEventList+0x1a>
{
 80088d6:	b510      	push	{r4, lr}
 80088d8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088da:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <vTaskPlaceOnEventList+0x30>)
 80088dc:	6819      	ldr	r1, [r3, #0]
 80088de:	3118      	adds	r1, #24
 80088e0:	f7fe fd93 	bl	800740a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088e4:	2101      	movs	r1, #1
 80088e6:	4620      	mov	r0, r4
 80088e8:	f7ff fd3e 	bl	8008368 <prvAddCurrentTaskToDelayedList>
}
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	b672      	cpsid	i
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	b662      	cpsie	i
	configASSERT( pxEventList );
 8008902:	e7fe      	b.n	8008902 <vTaskPlaceOnEventList+0x2e>
 8008904:	2000e920 	.word	0x2000e920

08008908 <vTaskPlaceOnEventListRestricted>:
	{
 8008908:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800890a:	b178      	cbz	r0, 800892c <vTaskPlaceOnEventListRestricted+0x24>
 800890c:	460d      	mov	r5, r1
 800890e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008910:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008912:	6819      	ldr	r1, [r3, #0]
 8008914:	3118      	adds	r1, #24
 8008916:	f7fe fd6d 	bl	80073f4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800891a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800891c:	4621      	mov	r1, r4
 800891e:	bf0c      	ite	eq
 8008920:	4628      	moveq	r0, r5
 8008922:	f04f 30ff 	movne.w	r0, #4294967295
 8008926:	f7ff fd1f 	bl	8008368 <prvAddCurrentTaskToDelayedList>
	}
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	b672      	cpsid	i
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	b662      	cpsie	i
		configASSERT( pxEventList );
 8008940:	e7fe      	b.n	8008940 <vTaskPlaceOnEventListRestricted+0x38>
 8008942:	bf00      	nop
 8008944:	2000e920 	.word	0x2000e920

08008948 <xTaskRemoveFromEventList>:
{
 8008948:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894a:	68c3      	ldr	r3, [r0, #12]
 800894c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800894e:	b324      	cbz	r4, 800899a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008950:	f104 0518 	add.w	r5, r4, #24
 8008954:	4628      	mov	r0, r5
 8008956:	f7fe fd71 	bl	800743c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800895a:	4b19      	ldr	r3, [pc, #100]	; (80089c0 <xTaskRemoveFromEventList+0x78>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	bb3b      	cbnz	r3, 80089b0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008960:	1d25      	adds	r5, r4, #4
 8008962:	4628      	mov	r0, r5
 8008964:	f7fe fd6a 	bl	800743c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008968:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <xTaskRemoveFromEventList+0x7c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4298      	cmp	r0, r3
 8008970:	d901      	bls.n	8008976 <xTaskRemoveFromEventList+0x2e>
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <xTaskRemoveFromEventList+0x7c>)
 8008974:	6018      	str	r0, [r3, #0]
 8008976:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800897a:	4629      	mov	r1, r5
 800897c:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <xTaskRemoveFromEventList+0x80>)
 800897e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008982:	f7fe fd37 	bl	80073f4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008986:	4b11      	ldr	r3, [pc, #68]	; (80089cc <xTaskRemoveFromEventList+0x84>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	429a      	cmp	r2, r3
 8008990:	d913      	bls.n	80089ba <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8008992:	2001      	movs	r0, #1
 8008994:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <xTaskRemoveFromEventList+0x88>)
 8008996:	6018      	str	r0, [r3, #0]
 8008998:	e010      	b.n	80089bc <xTaskRemoveFromEventList+0x74>
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	b672      	cpsid	i
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 80089ae:	e7fe      	b.n	80089ae <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089b0:	4629      	mov	r1, r5
 80089b2:	4808      	ldr	r0, [pc, #32]	; (80089d4 <xTaskRemoveFromEventList+0x8c>)
 80089b4:	f7fe fd1e 	bl	80073f4 <vListInsertEnd>
 80089b8:	e7e5      	b.n	8008986 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80089ba:	2000      	movs	r0, #0
}
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	bf00      	nop
 80089c0:	2000ed98 	.word	0x2000ed98
 80089c4:	2000eda0 	.word	0x2000eda0
 80089c8:	2000e92c 	.word	0x2000e92c
 80089cc:	2000e920 	.word	0x2000e920
 80089d0:	2000ee18 	.word	0x2000ee18
 80089d4:	2000edd4 	.word	0x2000edd4

080089d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089d8:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <vTaskInternalSetTimeOutState+0x10>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089de:	4b03      	ldr	r3, [pc, #12]	; (80089ec <vTaskInternalSetTimeOutState+0x14>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6043      	str	r3, [r0, #4]
}
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	2000edd0 	.word	0x2000edd0
 80089ec:	2000ee14 	.word	0x2000ee14

080089f0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80089f0:	b1d0      	cbz	r0, 8008a28 <xTaskCheckForTimeOut+0x38>
{
 80089f2:	b570      	push	{r4, r5, r6, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80089f8:	b309      	cbz	r1, 8008a3e <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 80089fa:	f000 fbe3 	bl	80091c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80089fe:	4b1d      	ldr	r3, [pc, #116]	; (8008a74 <xTaskCheckForTimeOut+0x84>)
 8008a00:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a08:	d02c      	beq.n	8008a64 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a0a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a0c:	481a      	ldr	r0, [pc, #104]	; (8008a78 <xTaskCheckForTimeOut+0x88>)
 8008a0e:	6800      	ldr	r0, [r0, #0]
 8008a10:	682e      	ldr	r6, [r5, #0]
 8008a12:	4286      	cmp	r6, r0
 8008a14:	d001      	beq.n	8008a1a <xTaskCheckForTimeOut+0x2a>
 8008a16:	428a      	cmp	r2, r1
 8008a18:	d929      	bls.n	8008a6e <xTaskCheckForTimeOut+0x7e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a1a:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a1c:	4283      	cmp	r3, r0
 8008a1e:	d819      	bhi.n	8008a54 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008a24:	2401      	movs	r4, #1
 8008a26:	e01e      	b.n	8008a66 <xTaskCheckForTimeOut+0x76>
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8008a3c:	e7fe      	b.n	8008a3c <xTaskCheckForTimeOut+0x4c>
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	b672      	cpsid	i
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8008a52:	e7fe      	b.n	8008a52 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait -= xElapsedTime;
 8008a54:	1a5b      	subs	r3, r3, r1
 8008a56:	4413      	add	r3, r2
 8008a58:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f7ff ffbc 	bl	80089d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a60:	2400      	movs	r4, #0
 8008a62:	e000      	b.n	8008a66 <xTaskCheckForTimeOut+0x76>
				xReturn = pdFALSE;
 8008a64:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008a66:	f000 fbd3 	bl	8009210 <vPortExitCritical>
}
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8008a6e:	2401      	movs	r4, #1
 8008a70:	e7f9      	b.n	8008a66 <xTaskCheckForTimeOut+0x76>
 8008a72:	bf00      	nop
 8008a74:	2000ee14 	.word	0x2000ee14
 8008a78:	2000edd0 	.word	0x2000edd0

08008a7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008a7c:	4b01      	ldr	r3, [pc, #4]	; (8008a84 <vTaskMissedYield+0x8>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	4770      	bx	lr
 8008a84:	2000ee18 	.word	0x2000ee18

08008a88 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008a88:	4b01      	ldr	r3, [pc, #4]	; (8008a90 <xTaskGetCurrentTaskHandle+0x8>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
	}
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	2000e920 	.word	0x2000e920

08008a94 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008a94:	4b05      	ldr	r3, [pc, #20]	; (8008aac <xTaskGetSchedulerState+0x18>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	b133      	cbz	r3, 8008aa8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <xTaskGetSchedulerState+0x1c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bf0c      	ite	eq
 8008aa2:	2002      	moveq	r0, #2
 8008aa4:	2000      	movne	r0, #0
 8008aa6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008aa8:	2001      	movs	r0, #1
	}
 8008aaa:	4770      	bx	lr
 8008aac:	2000ede8 	.word	0x2000ede8
 8008ab0:	2000ed98 	.word	0x2000ed98

08008ab4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d03f      	beq.n	8008b38 <xTaskPriorityInherit+0x84>
	{
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008abc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008abe:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <xTaskPriorityInherit+0x88>)
 8008ac0:	6812      	ldr	r2, [r2, #0]
 8008ac2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d22e      	bcs.n	8008b26 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ac8:	6982      	ldr	r2, [r0, #24]
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	db05      	blt.n	8008ada <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ace:	4a1b      	ldr	r2, [pc, #108]	; (8008b3c <xTaskPriorityInherit+0x88>)
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ad4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008ad8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008ade:	4a18      	ldr	r2, [pc, #96]	; (8008b40 <xTaskPriorityInherit+0x8c>)
 8008ae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ae4:	6962      	ldr	r2, [r4, #20]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d005      	beq.n	8008af6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aea:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <xTaskPriorityInherit+0x88>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8008af2:	2001      	movs	r0, #1
 8008af4:	e01f      	b.n	8008b36 <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008af6:	1d25      	adds	r5, r4, #4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7fe fc9f 	bl	800743c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <xTaskPriorityInherit+0x88>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008b04:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b06:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <xTaskPriorityInherit+0x90>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4298      	cmp	r0, r3
 8008b0c:	d901      	bls.n	8008b12 <xTaskPriorityInherit+0x5e>
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <xTaskPriorityInherit+0x90>)
 8008b10:	6018      	str	r0, [r3, #0]
 8008b12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008b16:	4629      	mov	r1, r5
 8008b18:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <xTaskPriorityInherit+0x8c>)
 8008b1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b1e:	f7fe fc69 	bl	80073f4 <vListInsertEnd>
				xReturn = pdTRUE;
 8008b22:	2001      	movs	r0, #1
 8008b24:	e007      	b.n	8008b36 <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <xTaskPriorityInherit+0x88>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	4298      	cmp	r0, r3
 8008b30:	bf2c      	ite	cs
 8008b32:	2000      	movcs	r0, #0
 8008b34:	2001      	movcc	r0, #1
	}
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008b38:	2000      	movs	r0, #0
	}
 8008b3a:	4770      	bx	lr
 8008b3c:	2000e920 	.word	0x2000e920
 8008b40:	2000e92c 	.word	0x2000e92c
 8008b44:	2000eda0 	.word	0x2000eda0

08008b48 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d03f      	beq.n	8008bcc <xTaskPriorityDisinherit+0x84>
	{
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008b50:	4b1f      	ldr	r3, [pc, #124]	; (8008bd0 <xTaskPriorityDisinherit+0x88>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4283      	cmp	r3, r0
 8008b56:	d00a      	beq.n	8008b6e <xTaskPriorityDisinherit+0x26>
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	b672      	cpsid	i
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	b662      	cpsie	i
 8008b6c:	e7fe      	b.n	8008b6c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008b70:	b953      	cbnz	r3, 8008b88 <xTaskPriorityDisinherit+0x40>
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	b672      	cpsid	i
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	b662      	cpsie	i
 8008b86:	e7fe      	b.n	8008b86 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b8c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008b8e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b90:	4291      	cmp	r1, r2
 8008b92:	d000      	beq.n	8008b96 <xTaskPriorityDisinherit+0x4e>
 8008b94:	b10b      	cbz	r3, 8008b9a <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8008b96:	2000      	movs	r0, #0
	}
 8008b98:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b9a:	1d05      	adds	r5, r0, #4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f7fe fc4d 	bl	800743c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ba2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008ba4:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba6:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8008baa:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <xTaskPriorityDisinherit+0x8c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4298      	cmp	r0, r3
 8008bb2:	d901      	bls.n	8008bb8 <xTaskPriorityDisinherit+0x70>
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <xTaskPriorityDisinherit+0x8c>)
 8008bb6:	6018      	str	r0, [r3, #0]
 8008bb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <xTaskPriorityDisinherit+0x90>)
 8008bc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008bc4:	f7fe fc16 	bl	80073f4 <vListInsertEnd>
					xReturn = pdTRUE;
 8008bc8:	2001      	movs	r0, #1
 8008bca:	e7e5      	b.n	8008b98 <xTaskPriorityDisinherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8008bcc:	2000      	movs	r0, #0
	}
 8008bce:	4770      	bx	lr
 8008bd0:	2000e920 	.word	0x2000e920
 8008bd4:	2000eda0 	.word	0x2000eda0
 8008bd8:	2000e92c 	.word	0x2000e92c

08008bdc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d04b      	beq.n	8008c78 <vTaskPriorityDisinheritAfterTimeout+0x9c>
	{
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	460b      	mov	r3, r1
 8008be4:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008be6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008be8:	b951      	cbnz	r1, 8008c00 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	b672      	cpsid	i
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	b662      	cpsie	i
 8008bfe:	e7fe      	b.n	8008bfe <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c00:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008c02:	4293      	cmp	r3, r2
 8008c04:	bf38      	it	cc
 8008c06:	4613      	movcc	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c0a:	2901      	cmp	r1, #1
 8008c0c:	d101      	bne.n	8008c12 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d100      	bne.n	8008c14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	}
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8008c14:	4919      	ldr	r1, [pc, #100]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008c16:	6809      	ldr	r1, [r1, #0]
 8008c18:	4281      	cmp	r1, r0
 8008c1a:	d022      	beq.n	8008c62 <vTaskPriorityDisinheritAfterTimeout+0x86>
					pxTCB->uxPriority = uxPriorityToUse;
 8008c1c:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c1e:	6981      	ldr	r1, [r0, #24]
 8008c20:	2900      	cmp	r1, #0
 8008c22:	db02      	blt.n	8008c2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c24:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008c28:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008c2e:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8008c30:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008c34:	6963      	ldr	r3, [r4, #20]
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d1eb      	bne.n	8008c12 <vTaskPriorityDisinheritAfterTimeout+0x36>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c3a:	1d25      	adds	r5, r4, #4
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f7fe fbfd 	bl	800743c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008c42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4298      	cmp	r0, r3
 8008c4a:	d901      	bls.n	8008c50 <vTaskPriorityDisinheritAfterTimeout+0x74>
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8008c4e:	6018      	str	r0, [r3, #0]
 8008c50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008c54:	4629      	mov	r1, r5
 8008c56:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8008c58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c5c:	f7fe fbca 	bl	80073f4 <vListInsertEnd>
	}
 8008c60:	e7d7      	b.n	8008c12 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	b672      	cpsid	i
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8008c76:	e7fe      	b.n	8008c76 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	2000e920 	.word	0x2000e920
 8008c80:	2000e92c 	.word	0x2000e92c
 8008c84:	2000eda0 	.word	0x2000eda0

08008c88 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <pvTaskIncrementMutexHeldCount+0x18>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	b123      	cbz	r3, 8008c98 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c8e:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <pvTaskIncrementMutexHeldCount+0x18>)
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008c94:	3301      	adds	r3, #1
 8008c96:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8008c98:	4b01      	ldr	r3, [pc, #4]	; (8008ca0 <pvTaskIncrementMutexHeldCount+0x18>)
 8008c9a:	6818      	ldr	r0, [r3, #0]
	}
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	2000e920 	.word	0x2000e920

08008ca4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ca4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ca6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ca8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008caa:	4291      	cmp	r1, r2
 8008cac:	d80c      	bhi.n	8008cc8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cae:	1ad2      	subs	r2, r2, r3
 8008cb0:	6983      	ldr	r3, [r0, #24]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d301      	bcc.n	8008cba <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008cb6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8008cb8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cba:	1d01      	adds	r1, r0, #4
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <prvInsertTimerInActiveList+0x40>)
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	f7fe fba3 	bl	800740a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	e7f7      	b.n	8008cb8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d203      	bcs.n	8008cd4 <prvInsertTimerInActiveList+0x30>
 8008ccc:	4299      	cmp	r1, r3
 8008cce:	d301      	bcc.n	8008cd4 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 8008cd0:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008cd2:	e7f1      	b.n	8008cb8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cd4:	1d01      	adds	r1, r0, #4
 8008cd6:	4b04      	ldr	r3, [pc, #16]	; (8008ce8 <prvInsertTimerInActiveList+0x44>)
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	f7fe fb96 	bl	800740a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e7ea      	b.n	8008cb8 <prvInsertTimerInActiveList+0x14>
 8008ce2:	bf00      	nop
 8008ce4:	2000ee20 	.word	0x2000ee20
 8008ce8:	2000ee1c 	.word	0x2000ee1c

08008cec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cec:	b530      	push	{r4, r5, lr}
 8008cee:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cf0:	f000 fa68 	bl	80091c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cf4:	4b11      	ldr	r3, [pc, #68]	; (8008d3c <prvCheckForValidListAndQueue+0x50>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	b11b      	cbz	r3, 8008d02 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cfa:	f000 fa89 	bl	8009210 <vPortExitCritical>
}
 8008cfe:	b003      	add	sp, #12
 8008d00:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8008d02:	4d0f      	ldr	r5, [pc, #60]	; (8008d40 <prvCheckForValidListAndQueue+0x54>)
 8008d04:	4628      	mov	r0, r5
 8008d06:	f7fe fb67 	bl	80073d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d0a:	4c0e      	ldr	r4, [pc, #56]	; (8008d44 <prvCheckForValidListAndQueue+0x58>)
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7fe fb63 	bl	80073d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d12:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <prvCheckForValidListAndQueue+0x5c>)
 8008d14:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d16:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <prvCheckForValidListAndQueue+0x60>)
 8008d18:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <prvCheckForValidListAndQueue+0x64>)
 8008d20:	4a0c      	ldr	r2, [pc, #48]	; (8008d54 <prvCheckForValidListAndQueue+0x68>)
 8008d22:	2110      	movs	r1, #16
 8008d24:	200a      	movs	r0, #10
 8008d26:	f7fe fc71 	bl	800760c <xQueueGenericCreateStatic>
 8008d2a:	4b04      	ldr	r3, [pc, #16]	; (8008d3c <prvCheckForValidListAndQueue+0x50>)
 8008d2c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d0e3      	beq.n	8008cfa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d32:	4909      	ldr	r1, [pc, #36]	; (8008d58 <prvCheckForValidListAndQueue+0x6c>)
 8008d34:	f7ff f95a 	bl	8007fec <vQueueAddToRegistry>
 8008d38:	e7df      	b.n	8008cfa <prvCheckForValidListAndQueue+0xe>
 8008d3a:	bf00      	nop
 8008d3c:	2000ef40 	.word	0x2000ef40
 8008d40:	2000eec4 	.word	0x2000eec4
 8008d44:	2000eed8 	.word	0x2000eed8
 8008d48:	2000ee1c 	.word	0x2000ee1c
 8008d4c:	2000ee20 	.word	0x2000ee20
 8008d50:	2000eef0 	.word	0x2000eef0
 8008d54:	2000ee24 	.word	0x2000ee24
 8008d58:	080139b4 	.word	0x080139b4

08008d5c <xTimerCreateTimerTask>:
{
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008d60:	f7ff ffc4 	bl	8008cec <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008d64:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <xTimerCreateTimerTask+0x58>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	b1cb      	cbz	r3, 8008d9e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d6a:	2400      	movs	r4, #0
 8008d6c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d6e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d70:	aa07      	add	r2, sp, #28
 8008d72:	a906      	add	r1, sp, #24
 8008d74:	a805      	add	r0, sp, #20
 8008d76:	f7fe fb23 	bl	80073c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d7a:	9b05      	ldr	r3, [sp, #20]
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	9b06      	ldr	r3, [sp, #24]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	2302      	movs	r3, #2
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	4623      	mov	r3, r4
 8008d88:	9a07      	ldr	r2, [sp, #28]
 8008d8a:	490b      	ldr	r1, [pc, #44]	; (8008db8 <xTimerCreateTimerTask+0x5c>)
 8008d8c:	480b      	ldr	r0, [pc, #44]	; (8008dbc <xTimerCreateTimerTask+0x60>)
 8008d8e:	f7ff fb29 	bl	80083e4 <xTaskCreateStatic>
 8008d92:	4a0b      	ldr	r2, [pc, #44]	; (8008dc0 <xTimerCreateTimerTask+0x64>)
 8008d94:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
 8008d96:	b110      	cbz	r0, 8008d9e <xTimerCreateTimerTask+0x42>
}
 8008d98:	2001      	movs	r0, #1
 8008d9a:	b008      	add	sp, #32
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	b672      	cpsid	i
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	b662      	cpsie	i
	configASSERT( xReturn );
 8008db2:	e7fe      	b.n	8008db2 <xTimerCreateTimerTask+0x56>
 8008db4:	2000ef40 	.word	0x2000ef40
 8008db8:	080139bc 	.word	0x080139bc
 8008dbc:	08008edd 	.word	0x08008edd
 8008dc0:	2000ef44 	.word	0x2000ef44

08008dc4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008dc4:	b1d8      	cbz	r0, 8008dfe <xTimerGenericCommand+0x3a>
{
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	4614      	mov	r4, r2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8008dd0:	4814      	ldr	r0, [pc, #80]	; (8008e24 <xTimerGenericCommand+0x60>)
 8008dd2:	6800      	ldr	r0, [r0, #0]
 8008dd4:	b318      	cbz	r0, 8008e1e <xTimerGenericCommand+0x5a>
		xMessage.xMessageID = xCommandID;
 8008dd6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008dd8:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008dda:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ddc:	2905      	cmp	r1, #5
 8008dde:	dc19      	bgt.n	8008e14 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008de0:	f7ff fe58 	bl	8008a94 <xTaskGetSchedulerState>
 8008de4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	bf0c      	ite	eq
 8008dec:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008dee:	461a      	movne	r2, r3
 8008df0:	4669      	mov	r1, sp
 8008df2:	480c      	ldr	r0, [pc, #48]	; (8008e24 <xTimerGenericCommand+0x60>)
 8008df4:	6800      	ldr	r0, [r0, #0]
 8008df6:	f7fe fcdb 	bl	80077b0 <xQueueGenericSend>
}
 8008dfa:	b004      	add	sp, #16
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	b672      	cpsid	i
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	b662      	cpsie	i
	configASSERT( xTimer );
 8008e12:	e7fe      	b.n	8008e12 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e14:	2300      	movs	r3, #0
 8008e16:	4669      	mov	r1, sp
 8008e18:	f7fe fde2 	bl	80079e0 <xQueueGenericSendFromISR>
 8008e1c:	e7ed      	b.n	8008dfa <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
 8008e1e:	2000      	movs	r0, #0
	return xReturn;
 8008e20:	e7eb      	b.n	8008dfa <xTimerGenericCommand+0x36>
 8008e22:	bf00      	nop
 8008e24:	2000ef40 	.word	0x2000ef40

08008e28 <prvSampleTimeNow>:
{
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8008e30:	f7ff fba4 	bl	800857c <xTaskGetTickCount>
 8008e34:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8008e36:	4b26      	ldr	r3, [pc, #152]	; (8008ed0 <prvSampleTimeNow+0xa8>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4283      	cmp	r3, r0
 8008e3c:	d807      	bhi.n	8008e4e <prvSampleTimeNow+0x26>
		*pxTimerListsWereSwitched = pdFALSE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008e42:	4b23      	ldr	r3, [pc, #140]	; (8008ed0 <prvSampleTimeNow+0xa8>)
 8008e44:	601c      	str	r4, [r3, #0]
}
 8008e46:	4620      	mov	r0, r4
 8008e48:	b002      	add	sp, #8
 8008e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e4e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008ed8 <prvSampleTimeNow+0xb0>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e52:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e56:	f8d8 3000 	ldr.w	r3, [r8]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	b382      	cbz	r2, 8008ec0 <prvSampleTimeNow+0x98>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e64:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e66:	1d2f      	adds	r7, r5, #4
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f7fe fae7 	bl	800743c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e6e:	6a2b      	ldr	r3, [r5, #32]
 8008e70:	4628      	mov	r0, r5
 8008e72:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e74:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8008e78:	f013 0f04 	tst.w	r3, #4
 8008e7c:	d0eb      	beq.n	8008e56 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e7e:	69ab      	ldr	r3, [r5, #24]
 8008e80:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8008e82:	459a      	cmp	sl, r3
 8008e84:	d207      	bcs.n	8008e96 <prvSampleTimeNow+0x6e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e86:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e88:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f8d8 0000 	ldr.w	r0, [r8]
 8008e90:	f7fe fabb 	bl	800740a <vListInsert>
 8008e94:	e7df      	b.n	8008e56 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e96:	f8cd 9000 	str.w	r9, [sp]
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f7ff ff8f 	bl	8008dc4 <xTimerGenericCommand>
				configASSERT( xResult );
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d1d5      	bne.n	8008e56 <prvSampleTimeNow+0x2e>
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	b672      	cpsid	i
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	b662      	cpsie	i
 8008ebe:	e7fe      	b.n	8008ebe <prvSampleTimeNow+0x96>
	pxCurrentTimerList = pxOverflowTimerList;
 8008ec0:	4a04      	ldr	r2, [pc, #16]	; (8008ed4 <prvSampleTimeNow+0xac>)
 8008ec2:	6810      	ldr	r0, [r2, #0]
 8008ec4:	4904      	ldr	r1, [pc, #16]	; (8008ed8 <prvSampleTimeNow+0xb0>)
 8008ec6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8008ec8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	e7b8      	b.n	8008e42 <prvSampleTimeNow+0x1a>
 8008ed0:	2000eeec 	.word	0x2000eeec
 8008ed4:	2000ee20 	.word	0x2000ee20
 8008ed8:	2000ee1c 	.word	0x2000ee1c

08008edc <prvTimerTask>:
{
 8008edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ee0:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ee2:	4e7e      	ldr	r6, [pc, #504]	; (80090dc <prvTimerTask+0x200>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ee4:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80090e8 <prvTimerTask+0x20c>
					portYIELD_WITHIN_API();
 8008ee8:	4f7d      	ldr	r7, [pc, #500]	; (80090e0 <prvTimerTask+0x204>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eea:	6833      	ldr	r3, [r6, #0]
 8008eec:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	f000 80e5 	beq.w	80090be <prvTimerTask+0x1e2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8008ef8:	f7ff fb38 	bl	800856c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008efc:	a804      	add	r0, sp, #16
 8008efe:	f7ff ff93 	bl	8008e28 <prvSampleTimeNow>
 8008f02:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008f04:	9a04      	ldr	r2, [sp, #16]
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	f040 80e3 	bne.w	80090d2 <prvTimerTask+0x1f6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d211      	bcs.n	8008f34 <prvTimerTask+0x58>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f10:	1b61      	subs	r1, r4, r5
 8008f12:	4b74      	ldr	r3, [pc, #464]	; (80090e4 <prvTimerTask+0x208>)
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f7ff f8ad 	bl	8008074 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f1a:	f7ff fbd7 	bl	80086cc <xTaskResumeAll>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f040 80d9 	bne.w	80090d6 <prvTimerTask+0x1fa>
					portYIELD_WITHIN_API();
 8008f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	e0d0      	b.n	80090d6 <prvTimerTask+0x1fa>
				( void ) xTaskResumeAll();
 8008f34:	f7ff fbca 	bl	80086cc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f38:	6833      	ldr	r3, [r6, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f40:	f109 0004 	add.w	r0, r9, #4
 8008f44:	f7fe fa7a 	bl	800743c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f48:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8008f4c:	f013 0f04 	tst.w	r3, #4
 8008f50:	d108      	bne.n	8008f64 <prvTimerTask+0x88>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f52:	f023 0301 	bic.w	r3, r3, #1
 8008f56:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f5a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8008f5e:	4648      	mov	r0, r9
 8008f60:	4798      	blx	r3
}
 8008f62:	e0b8      	b.n	80090d6 <prvTimerTask+0x1fa>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f64:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8008f68:	4623      	mov	r3, r4
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4421      	add	r1, r4
 8008f6e:	4648      	mov	r0, r9
 8008f70:	f7ff fe98 	bl	8008ca4 <prvInsertTimerInActiveList>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d0f0      	beq.n	8008f5a <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f78:	2100      	movs	r1, #0
 8008f7a:	9100      	str	r1, [sp, #0]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4648      	mov	r0, r9
 8008f82:	f7ff ff1f 	bl	8008dc4 <xTimerGenericCommand>
			configASSERT( xResult );
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d1e7      	bne.n	8008f5a <prvTimerTask+0x7e>
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	b672      	cpsid	i
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	b662      	cpsie	i
 8008f9e:	e7fe      	b.n	8008f9e <prvTimerTask+0xc2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	fab2 f282 	clz	r2, r2
 8008faa:	0952      	lsrs	r2, r2, #5
 8008fac:	e7b0      	b.n	8008f10 <prvTimerTask+0x34>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fae:	9907      	ldr	r1, [sp, #28]
 8008fb0:	9806      	ldr	r0, [sp, #24]
 8008fb2:	9b05      	ldr	r3, [sp, #20]
 8008fb4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fb6:	9b04      	ldr	r3, [sp, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da09      	bge.n	8008fd0 <prvTimerTask+0xf4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	a904      	add	r1, sp, #16
 8008fc0:	6828      	ldr	r0, [r5, #0]
 8008fc2:	f7fe fdd9 	bl	8007b78 <xQueueReceive>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d08f      	beq.n	8008eea <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fca:	9b04      	ldr	r3, [sp, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dbee      	blt.n	8008fae <prvTimerTask+0xd2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fd0:	f8dd 9018 	ldr.w	r9, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fd4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008fd8:	b11b      	cbz	r3, 8008fe2 <prvTimerTask+0x106>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fda:	f109 0004 	add.w	r0, r9, #4
 8008fde:	f7fe fa2d 	bl	800743c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fe2:	a803      	add	r0, sp, #12
 8008fe4:	f7ff ff20 	bl	8008e28 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008fe8:	9b04      	ldr	r3, [sp, #16]
 8008fea:	2b09      	cmp	r3, #9
 8008fec:	d8e6      	bhi.n	8008fbc <prvTimerTask+0xe0>
 8008fee:	e8df f003 	tbb	[pc, r3]
 8008ff2:	0505      	.short	0x0505
 8008ff4:	583c3505 	.word	0x583c3505
 8008ff8:	3c350505 	.word	0x3c350505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ffc:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8009000:	f043 0301 	orr.w	r3, r3, #1
 8009004:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009008:	9b05      	ldr	r3, [sp, #20]
 800900a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800900e:	4602      	mov	r2, r0
 8009010:	4419      	add	r1, r3
 8009012:	4648      	mov	r0, r9
 8009014:	f7ff fe46 	bl	8008ca4 <prvInsertTimerInActiveList>
 8009018:	2800      	cmp	r0, #0
 800901a:	d0cf      	beq.n	8008fbc <prvTimerTask+0xe0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800901c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009020:	4648      	mov	r0, r9
 8009022:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009024:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8009028:	f013 0f04 	tst.w	r3, #4
 800902c:	d0c6      	beq.n	8008fbc <prvTimerTask+0xe0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800902e:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8009032:	9400      	str	r4, [sp, #0]
 8009034:	4623      	mov	r3, r4
 8009036:	9905      	ldr	r1, [sp, #20]
 8009038:	440a      	add	r2, r1
 800903a:	4621      	mov	r1, r4
 800903c:	4648      	mov	r0, r9
 800903e:	f7ff fec1 	bl	8008dc4 <xTimerGenericCommand>
							configASSERT( xResult );
 8009042:	2800      	cmp	r0, #0
 8009044:	d1ba      	bne.n	8008fbc <prvTimerTask+0xe0>
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	b672      	cpsid	i
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	b662      	cpsie	i
 800905a:	e7fe      	b.n	800905a <prvTimerTask+0x17e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800905c:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8009060:	f023 0301 	bic.w	r3, r3, #1
 8009064:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
					break;
 8009068:	e7a8      	b.n	8008fbc <prvTimerTask+0xe0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800906a:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800906e:	f043 0301 	orr.w	r3, r3, #1
 8009072:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009076:	9905      	ldr	r1, [sp, #20]
 8009078:	f8c9 1018 	str.w	r1, [r9, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800907c:	b131      	cbz	r1, 800908c <prvTimerTask+0x1b0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800907e:	4603      	mov	r3, r0
 8009080:	4602      	mov	r2, r0
 8009082:	4401      	add	r1, r0
 8009084:	4648      	mov	r0, r9
 8009086:	f7ff fe0d 	bl	8008ca4 <prvInsertTimerInActiveList>
					break;
 800908a:	e797      	b.n	8008fbc <prvTimerTask+0xe0>
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	b672      	cpsid	i
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090a0:	e7fe      	b.n	80090a0 <prvTimerTask+0x1c4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090a2:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 80090a6:	f013 0f02 	tst.w	r3, #2
 80090aa:	d004      	beq.n	80090b6 <prvTimerTask+0x1da>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
 80090b4:	e782      	b.n	8008fbc <prvTimerTask+0xe0>
							vPortFree( pxTimer );
 80090b6:	4648      	mov	r0, r9
 80090b8:	f000 fa8a 	bl	80095d0 <vPortFree>
 80090bc:	e77e      	b.n	8008fbc <prvTimerTask+0xe0>
	vTaskSuspendAll();
 80090be:	f7ff fa55 	bl	800856c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090c2:	a804      	add	r0, sp, #16
 80090c4:	f7ff feb0 	bl	8008e28 <prvSampleTimeNow>
 80090c8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80090ca:	9b04      	ldr	r3, [sp, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f43f af67 	beq.w	8008fa0 <prvTimerTask+0xc4>
			( void ) xTaskResumeAll();
 80090d2:	f7ff fafb 	bl	80086cc <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090d6:	4d03      	ldr	r5, [pc, #12]	; (80090e4 <prvTimerTask+0x208>)
 80090d8:	2400      	movs	r4, #0
}
 80090da:	e76f      	b.n	8008fbc <prvTimerTask+0xe0>
 80090dc:	2000ee1c 	.word	0x2000ee1c
 80090e0:	e000ed04 	.word	0xe000ed04
 80090e4:	2000ef40 	.word	0x2000ef40
 80090e8:	2000ee20 	.word	0x2000ee20

080090ec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090f2:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <prvTaskExitError+0x44>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d00a      	beq.n	8009112 <prvTaskExitError+0x26>
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	b672      	cpsid	i
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	b662      	cpsie	i
 8009110:	e7fe      	b.n	8009110 <prvTaskExitError+0x24>
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	b672      	cpsid	i
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0fc      	beq.n	8009126 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800912c:	b002      	add	sp, #8
 800912e:	4770      	bx	lr
 8009130:	2000000c 	.word	0x2000000c

08009134 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009134:	4808      	ldr	r0, [pc, #32]	; (8009158 <prvPortStartFirstTask+0x24>)
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	6800      	ldr	r0, [r0, #0]
 800913a:	f380 8808 	msr	MSP, r0
 800913e:	f04f 0000 	mov.w	r0, #0
 8009142:	f380 8814 	msr	CONTROL, r0
 8009146:	b662      	cpsie	i
 8009148:	b661      	cpsie	f
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	df00      	svc	0
 8009154:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009156:	0000      	.short	0x0000
 8009158:	e000ed08 	.word	0xe000ed08

0800915c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800915c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800916c <vPortEnableVFP+0x10>
 8009160:	6801      	ldr	r1, [r0, #0]
 8009162:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009166:	6001      	str	r1, [r0, #0]
 8009168:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800916a:	0000      	.short	0x0000
 800916c:	e000ed88 	.word	0xe000ed88

08009170 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009174:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009178:	f021 0101 	bic.w	r1, r1, #1
 800917c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <pxPortInitialiseStack+0x28>)
 8009182:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009186:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800918a:	f06f 0302 	mvn.w	r3, #2
 800918e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009192:	3844      	subs	r0, #68	; 0x44
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	080090ed 	.word	0x080090ed
 800919c:	00000000 	.word	0x00000000

080091a0 <SVC_Handler>:
	__asm volatile (
 80091a0:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <pxCurrentTCBConst2>)
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	f380 8809 	msr	PSP, r0
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8811 	msr	BASEPRI, r0
 80091ba:	4770      	bx	lr
 80091bc:	f3af 8000 	nop.w

080091c0 <pxCurrentTCBConst2>:
 80091c0:	2000e920 	.word	0x2000e920

080091c4 <vPortEnterCritical>:
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	b672      	cpsid	i
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	b662      	cpsie	i
	uxCriticalNesting++;
 80091d8:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <vPortEnterCritical+0x44>)
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	3301      	adds	r3, #1
 80091de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d000      	beq.n	80091e6 <vPortEnterCritical+0x22>
}
 80091e4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <vPortEnterCritical+0x48>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091ee:	d0f9      	beq.n	80091e4 <vPortEnterCritical+0x20>
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	b672      	cpsid	i
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	b662      	cpsie	i
 8009204:	e7fe      	b.n	8009204 <vPortEnterCritical+0x40>
 8009206:	bf00      	nop
 8009208:	2000000c 	.word	0x2000000c
 800920c:	e000ed04 	.word	0xe000ed04

08009210 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009210:	4b0a      	ldr	r3, [pc, #40]	; (800923c <vPortExitCritical+0x2c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	b953      	cbnz	r3, 800922c <vPortExitCritical+0x1c>
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	b672      	cpsid	i
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	b662      	cpsie	i
 800922a:	e7fe      	b.n	800922a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800922c:	3b01      	subs	r3, #1
 800922e:	4a03      	ldr	r2, [pc, #12]	; (800923c <vPortExitCritical+0x2c>)
 8009230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009232:	b90b      	cbnz	r3, 8009238 <vPortExitCritical+0x28>
	__asm volatile
 8009234:	f383 8811 	msr	BASEPRI, r3
}
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	2000000c 	.word	0x2000000c

08009240 <PendSV_Handler>:
	__asm volatile
 8009240:	f3ef 8009 	mrs	r0, PSP
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <pxCurrentTCBConst>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	f01e 0f10 	tst.w	lr, #16
 8009250:	bf08      	it	eq
 8009252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	6010      	str	r0, [r2, #0]
 800925c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009264:	b672      	cpsid	i
 8009266:	f380 8811 	msr	BASEPRI, r0
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	b662      	cpsie	i
 8009274:	f7ff fad6 	bl	8008824 <vTaskSwitchContext>
 8009278:	f04f 0000 	mov.w	r0, #0
 800927c:	f380 8811 	msr	BASEPRI, r0
 8009280:	bc09      	pop	{r0, r3}
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	6808      	ldr	r0, [r1, #0]
 8009286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	f01e 0f10 	tst.w	lr, #16
 800928e:	bf08      	it	eq
 8009290:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009294:	f380 8809 	msr	PSP, r0
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop

080092a0 <pxCurrentTCBConst>:
 80092a0:	2000e920 	.word	0x2000e920

080092a4 <SysTick_Handler>:
{
 80092a4:	b508      	push	{r3, lr}
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	b672      	cpsid	i
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80092ba:	f7ff f96d 	bl	8008598 <xTaskIncrementTick>
 80092be:	b118      	cbz	r0, 80092c8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092c0:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <SysTick_Handler+0x2c>)
 80092c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80092c8:	2300      	movs	r3, #0
 80092ca:	f383 8811 	msr	BASEPRI, r3
}
 80092ce:	bd08      	pop	{r3, pc}
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092d4:	4a08      	ldr	r2, [pc, #32]	; (80092f8 <vPortSetupTimerInterrupt+0x24>)
 80092d6:	2300      	movs	r3, #0
 80092d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092da:	4908      	ldr	r1, [pc, #32]	; (80092fc <vPortSetupTimerInterrupt+0x28>)
 80092dc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092de:	4b08      	ldr	r3, [pc, #32]	; (8009300 <vPortSetupTimerInterrupt+0x2c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4908      	ldr	r1, [pc, #32]	; (8009304 <vPortSetupTimerInterrupt+0x30>)
 80092e4:	fba1 1303 	umull	r1, r3, r1, r3
 80092e8:	099b      	lsrs	r3, r3, #6
 80092ea:	3b01      	subs	r3, #1
 80092ec:	4906      	ldr	r1, [pc, #24]	; (8009308 <vPortSetupTimerInterrupt+0x34>)
 80092ee:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092f0:	2307      	movs	r3, #7
 80092f2:	6013      	str	r3, [r2, #0]
}
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	e000e010 	.word	0xe000e010
 80092fc:	e000e018 	.word	0xe000e018
 8009300:	20000000 	.word	0x20000000
 8009304:	10624dd3 	.word	0x10624dd3
 8009308:	e000e014 	.word	0xe000e014

0800930c <xPortStartScheduler>:
{
 800930c:	b510      	push	{r4, lr}
 800930e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009310:	4b2d      	ldr	r3, [pc, #180]	; (80093c8 <xPortStartScheduler+0xbc>)
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009318:	22ff      	movs	r2, #255	; 0xff
 800931a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009324:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009328:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800932c:	4a27      	ldr	r2, [pc, #156]	; (80093cc <xPortStartScheduler+0xc0>)
 800932e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009330:	4b27      	ldr	r3, [pc, #156]	; (80093d0 <xPortStartScheduler+0xc4>)
 8009332:	2207      	movs	r2, #7
 8009334:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009336:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800933a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800933e:	d011      	beq.n	8009364 <xPortStartScheduler+0x58>
 8009340:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009342:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800934e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009352:	4613      	mov	r3, r2
 8009354:	3a01      	subs	r2, #1
 8009356:	f011 0f80 	tst.w	r1, #128	; 0x80
 800935a:	d1f2      	bne.n	8009342 <xPortStartScheduler+0x36>
 800935c:	4a1c      	ldr	r2, [pc, #112]	; (80093d0 <xPortStartScheduler+0xc4>)
 800935e:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009360:	2b03      	cmp	r3, #3
 8009362:	d00a      	beq.n	800937a <xPortStartScheduler+0x6e>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	b672      	cpsid	i
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	b662      	cpsie	i
 8009378:	e7fe      	b.n	8009378 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800937a:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <xPortStartScheduler+0xc4>)
 800937c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009380:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009382:	9b01      	ldr	r3, [sp, #4]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	4a10      	ldr	r2, [pc, #64]	; (80093c8 <xPortStartScheduler+0xbc>)
 8009388:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800938a:	4b12      	ldr	r3, [pc, #72]	; (80093d4 <xPortStartScheduler+0xc8>)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009392:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800939a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800939c:	f7ff ff9a 	bl	80092d4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80093a0:	2400      	movs	r4, #0
 80093a2:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <xPortStartScheduler+0xcc>)
 80093a4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80093a6:	f7ff fed9 	bl	800915c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093aa:	4a0c      	ldr	r2, [pc, #48]	; (80093dc <xPortStartScheduler+0xd0>)
 80093ac:	6813      	ldr	r3, [r2, #0]
 80093ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093b2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80093b4:	f7ff febe 	bl	8009134 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80093b8:	f7ff fa34 	bl	8008824 <vTaskSwitchContext>
	prvTaskExitError();
 80093bc:	f7ff fe96 	bl	80090ec <prvTaskExitError>
}
 80093c0:	4620      	mov	r0, r4
 80093c2:	b002      	add	sp, #8
 80093c4:	bd10      	pop	{r4, pc}
 80093c6:	bf00      	nop
 80093c8:	e000e400 	.word	0xe000e400
 80093cc:	2000ef48 	.word	0x2000ef48
 80093d0:	2000ef4c 	.word	0x2000ef4c
 80093d4:	e000ed20 	.word	0xe000ed20
 80093d8:	2000000c 	.word	0x2000000c
 80093dc:	e000ef34 	.word	0xe000ef34

080093e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093e4:	2b0f      	cmp	r3, #15
 80093e6:	d911      	bls.n	800940c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093e8:	4a12      	ldr	r2, [pc, #72]	; (8009434 <vPortValidateInterruptPriority+0x54>)
 80093ea:	5c9b      	ldrb	r3, [r3, r2]
 80093ec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093ee:	4a12      	ldr	r2, [pc, #72]	; (8009438 <vPortValidateInterruptPriority+0x58>)
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d90a      	bls.n	800940c <vPortValidateInterruptPriority+0x2c>
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	b672      	cpsid	i
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	b662      	cpsie	i
 800940a:	e7fe      	b.n	800940a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800940c:	4b0b      	ldr	r3, [pc, #44]	; (800943c <vPortValidateInterruptPriority+0x5c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009414:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <vPortValidateInterruptPriority+0x60>)
 8009416:	6812      	ldr	r2, [r2, #0]
 8009418:	4293      	cmp	r3, r2
 800941a:	d90a      	bls.n	8009432 <vPortValidateInterruptPriority+0x52>
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	b672      	cpsid	i
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	b662      	cpsie	i
 8009430:	e7fe      	b.n	8009430 <vPortValidateInterruptPriority+0x50>
	}
 8009432:	4770      	bx	lr
 8009434:	e000e3f0 	.word	0xe000e3f0
 8009438:	2000ef48 	.word	0x2000ef48
 800943c:	e000ed0c 	.word	0xe000ed0c
 8009440:	2000ef4c 	.word	0x2000ef4c

08009444 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009444:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <prvInsertBlockIntoFreeList+0x50>)
 8009448:	461a      	mov	r2, r3
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4283      	cmp	r3, r0
 800944e:	d3fb      	bcc.n	8009448 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009450:	6851      	ldr	r1, [r2, #4]
 8009452:	1854      	adds	r4, r2, r1
 8009454:	42a0      	cmp	r0, r4
 8009456:	d00a      	beq.n	800946e <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009458:	6841      	ldr	r1, [r0, #4]
 800945a:	1844      	adds	r4, r0, r1
 800945c:	42a3      	cmp	r3, r4
 800945e:	d00b      	beq.n	8009478 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009460:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009462:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009464:	bf18      	it	ne
 8009466:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800946c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800946e:	6840      	ldr	r0, [r0, #4]
 8009470:	4401      	add	r1, r0
 8009472:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8009474:	4610      	mov	r0, r2
 8009476:	e7ef      	b.n	8009458 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009478:	4c07      	ldr	r4, [pc, #28]	; (8009498 <prvInsertBlockIntoFreeList+0x54>)
 800947a:	6824      	ldr	r4, [r4, #0]
 800947c:	42a3      	cmp	r3, r4
 800947e:	d006      	beq.n	800948e <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	4419      	add	r1, r3
 8009484:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009486:	6813      	ldr	r3, [r2, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	e7e9      	b.n	8009462 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800948e:	6004      	str	r4, [r0, #0]
 8009490:	e7e7      	b.n	8009462 <prvInsertBlockIntoFreeList+0x1e>
 8009492:	bf00      	nop
 8009494:	20012b60 	.word	0x20012b60
 8009498:	2000ef50 	.word	0x2000ef50

0800949c <pvPortMalloc>:
{
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80094a0:	f7ff f864 	bl	800856c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80094a4:	4b44      	ldr	r3, [pc, #272]	; (80095b8 <pvPortMalloc+0x11c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	b1b3      	cbz	r3, 80094d8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094aa:	4b44      	ldr	r3, [pc, #272]	; (80095bc <pvPortMalloc+0x120>)
 80094ac:	681e      	ldr	r6, [r3, #0]
 80094ae:	4226      	tst	r6, r4
 80094b0:	d17d      	bne.n	80095ae <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	d07b      	beq.n	80095ae <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 80094b6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094ba:	f014 0f07 	tst.w	r4, #7
 80094be:	d002      	beq.n	80094c6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094c0:	f023 0307 	bic.w	r3, r3, #7
 80094c4:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d071      	beq.n	80095ae <pvPortMalloc+0x112>
 80094ca:	4a3d      	ldr	r2, [pc, #244]	; (80095c0 <pvPortMalloc+0x124>)
 80094cc:	6815      	ldr	r5, [r2, #0]
 80094ce:	429d      	cmp	r5, r3
 80094d0:	d36d      	bcc.n	80095ae <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 80094d2:	4a3c      	ldr	r2, [pc, #240]	; (80095c4 <pvPortMalloc+0x128>)
 80094d4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094d6:	e027      	b.n	8009528 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 80094d8:	4a3b      	ldr	r2, [pc, #236]	; (80095c8 <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094da:	f012 0f07 	tst.w	r2, #7
 80094de:	d01e      	beq.n	800951e <pvPortMalloc+0x82>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094e0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094e2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094e6:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 80094ea:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094ec:	460a      	mov	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094ee:	4835      	ldr	r0, [pc, #212]	; (80095c4 <pvPortMalloc+0x128>)
 80094f0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094f2:	2100      	movs	r1, #0
 80094f4:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094f6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80094f8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094fa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80094fe:	482e      	ldr	r0, [pc, #184]	; (80095b8 <pvPortMalloc+0x11c>)
 8009500:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009502:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009504:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009506:	1a99      	subs	r1, r3, r2
 8009508:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800950a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800950c:	4b2f      	ldr	r3, [pc, #188]	; (80095cc <pvPortMalloc+0x130>)
 800950e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009510:	4b2b      	ldr	r3, [pc, #172]	; (80095c0 <pvPortMalloc+0x124>)
 8009512:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009514:	4b29      	ldr	r3, [pc, #164]	; (80095bc <pvPortMalloc+0x120>)
 8009516:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800951a:	601a      	str	r2, [r3, #0]
}
 800951c:	e7c5      	b.n	80094aa <pvPortMalloc+0xe>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800951e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009522:	e7e4      	b.n	80094ee <pvPortMalloc+0x52>
 8009524:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8009526:	460c      	mov	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009528:	6861      	ldr	r1, [r4, #4]
 800952a:	4299      	cmp	r1, r3
 800952c:	d202      	bcs.n	8009534 <pvPortMalloc+0x98>
 800952e:	6821      	ldr	r1, [r4, #0]
 8009530:	2900      	cmp	r1, #0
 8009532:	d1f7      	bne.n	8009524 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8009534:	4920      	ldr	r1, [pc, #128]	; (80095b8 <pvPortMalloc+0x11c>)
 8009536:	6809      	ldr	r1, [r1, #0]
 8009538:	42a1      	cmp	r1, r4
 800953a:	d038      	beq.n	80095ae <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800953c:	6817      	ldr	r7, [r2, #0]
 800953e:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009540:	6821      	ldr	r1, [r4, #0]
 8009542:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009544:	6862      	ldr	r2, [r4, #4]
 8009546:	1ad2      	subs	r2, r2, r3
 8009548:	2a10      	cmp	r2, #16
 800954a:	d912      	bls.n	8009572 <pvPortMalloc+0xd6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800954c:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800954e:	f010 0f07 	tst.w	r0, #7
 8009552:	d00a      	beq.n	800956a <pvPortMalloc+0xce>
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	b672      	cpsid	i
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	b662      	cpsie	i
 8009568:	e7fe      	b.n	8009568 <pvPortMalloc+0xcc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800956a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800956c:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800956e:	f7ff ff69 	bl	8009444 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009572:	6862      	ldr	r2, [r4, #4]
 8009574:	1aad      	subs	r5, r5, r2
 8009576:	4912      	ldr	r1, [pc, #72]	; (80095c0 <pvPortMalloc+0x124>)
 8009578:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800957a:	4914      	ldr	r1, [pc, #80]	; (80095cc <pvPortMalloc+0x130>)
 800957c:	6809      	ldr	r1, [r1, #0]
 800957e:	428d      	cmp	r5, r1
 8009580:	d201      	bcs.n	8009586 <pvPortMalloc+0xea>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009582:	4912      	ldr	r1, [pc, #72]	; (80095cc <pvPortMalloc+0x130>)
 8009584:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009586:	4316      	orrs	r6, r2
 8009588:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800958e:	f7ff f89d 	bl	80086cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009592:	f017 0f07 	tst.w	r7, #7
 8009596:	d00d      	beq.n	80095b4 <pvPortMalloc+0x118>
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	b672      	cpsid	i
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	b662      	cpsie	i
 80095ac:	e7fe      	b.n	80095ac <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 80095ae:	f7ff f88d 	bl	80086cc <xTaskResumeAll>
 80095b2:	2700      	movs	r7, #0
}
 80095b4:	4638      	mov	r0, r7
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	2000ef50 	.word	0x2000ef50
 80095bc:	20012b54 	.word	0x20012b54
 80095c0:	20012b58 	.word	0x20012b58
 80095c4:	20012b60 	.word	0x20012b60
 80095c8:	2000ef54 	.word	0x2000ef54
 80095cc:	20012b5c 	.word	0x20012b5c

080095d0 <vPortFree>:
	if( pv != NULL )
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d033      	beq.n	800963c <vPortFree+0x6c>
{
 80095d4:	b510      	push	{r4, lr}
 80095d6:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80095dc:	4a18      	ldr	r2, [pc, #96]	; (8009640 <vPortFree+0x70>)
 80095de:	6812      	ldr	r2, [r2, #0]
 80095e0:	4213      	tst	r3, r2
 80095e2:	d10a      	bne.n	80095fa <vPortFree+0x2a>
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	b672      	cpsid	i
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	b662      	cpsie	i
 80095f8:	e7fe      	b.n	80095f8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095fa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80095fe:	b151      	cbz	r1, 8009616 <vPortFree+0x46>
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	b672      	cpsid	i
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	b662      	cpsie	i
 8009614:	e7fe      	b.n	8009614 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009616:	ea23 0302 	bic.w	r3, r3, r2
 800961a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800961e:	f7fe ffa5 	bl	800856c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009622:	4a08      	ldr	r2, [pc, #32]	; (8009644 <vPortFree+0x74>)
 8009624:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009628:	6811      	ldr	r1, [r2, #0]
 800962a:	440b      	add	r3, r1
 800962c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800962e:	f1a4 0008 	sub.w	r0, r4, #8
 8009632:	f7ff ff07 	bl	8009444 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8009636:	f7ff f849 	bl	80086cc <xTaskResumeAll>
}
 800963a:	bd10      	pop	{r4, pc}
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	20012b54 	.word	0x20012b54
 8009644:	20012b58 	.word	0x20012b58

08009648 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009648:	b510      	push	{r4, lr}
 800964a:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800964c:	680a      	ldr	r2, [r1, #0]
 800964e:	320c      	adds	r2, #12
 8009650:	f001 fd0e 	bl	800b070 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009654:	b100      	cbz	r0, 8009658 <netconn_apimsg+0x10>
    return apimsg->err;
  }
  return err;
}
 8009656:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8009658:	f994 0004 	ldrsb.w	r0, [r4, #4]
 800965c:	e7fb      	b.n	8009656 <netconn_apimsg+0xe>
	...

08009660 <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009660:	b510      	push	{r4, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009662:	b160      	cbz	r0, 800967e <netconn_tcp_recvd_msg+0x1e>
 8009664:	460c      	mov	r4, r1
 8009666:	4611      	mov	r1, r2
 8009668:	7803      	ldrb	r3, [r0, #0]
 800966a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800966e:	2b10      	cmp	r3, #16
 8009670:	d105      	bne.n	800967e <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009672:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8009674:	6094      	str	r4, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009676:	4807      	ldr	r0, [pc, #28]	; (8009694 <netconn_tcp_recvd_msg+0x34>)
 8009678:	f7ff ffe6 	bl	8009648 <netconn_apimsg>
}
 800967c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <netconn_tcp_recvd_msg+0x38>)
 8009680:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009684:	4905      	ldr	r1, [pc, #20]	; (800969c <netconn_tcp_recvd_msg+0x3c>)
 8009686:	4806      	ldr	r0, [pc, #24]	; (80096a0 <netconn_tcp_recvd_msg+0x40>)
 8009688:	f008 ffc4 	bl	8012614 <iprintf>
 800968c:	f06f 000f 	mvn.w	r0, #15
 8009690:	e7f4      	b.n	800967c <netconn_tcp_recvd_msg+0x1c>
 8009692:	bf00      	nop
 8009694:	0800ac01 	.word	0x0800ac01
 8009698:	080139c4 	.word	0x080139c4
 800969c:	080139f8 	.word	0x080139f8
 80096a0:	0801397c 	.word	0x0801397c

080096a4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80096a4:	b500      	push	{lr}
 80096a6:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80096a8:	b160      	cbz	r0, 80096c4 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80096aa:	9000      	str	r0, [sp, #0]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80096ac:	f88d 1008 	strb.w	r1, [sp, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80096b0:	2329      	movs	r3, #41	; 0x29
 80096b2:	f88d 3009 	strb.w	r3, [sp, #9]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80096b6:	4669      	mov	r1, sp
 80096b8:	4807      	ldr	r0, [pc, #28]	; (80096d8 <netconn_close_shutdown+0x34>)
 80096ba:	f7ff ffc5 	bl	8009648 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 80096be:	b009      	add	sp, #36	; 0x24
 80096c0:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <netconn_close_shutdown+0x38>)
 80096c6:	f240 4247 	movw	r2, #1095	; 0x447
 80096ca:	4905      	ldr	r1, [pc, #20]	; (80096e0 <netconn_close_shutdown+0x3c>)
 80096cc:	4805      	ldr	r0, [pc, #20]	; (80096e4 <netconn_close_shutdown+0x40>)
 80096ce:	f008 ffa1 	bl	8012614 <iprintf>
 80096d2:	f06f 000f 	mvn.w	r0, #15
 80096d6:	e7f2      	b.n	80096be <netconn_close_shutdown+0x1a>
 80096d8:	0800ad11 	.word	0x0800ad11
 80096dc:	080139c4 	.word	0x080139c4
 80096e0:	08013a1c 	.word	0x08013a1c
 80096e4:	0801397c 	.word	0x0801397c

080096e8 <netconn_new_with_proto_and_callback>:
{
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	460c      	mov	r4, r1
  conn = netconn_alloc(t, callback);
 80096ee:	4611      	mov	r1, r2
 80096f0:	f001 f80c 	bl	800a70c <netconn_alloc>
  if (conn != NULL) {
 80096f4:	4605      	mov	r5, r0
 80096f6:	b138      	cbz	r0, 8009708 <netconn_new_with_proto_and_callback+0x20>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80096f8:	f88d 4008 	strb.w	r4, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 80096fc:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80096fe:	4669      	mov	r1, sp
 8009700:	4820      	ldr	r0, [pc, #128]	; (8009784 <netconn_new_with_proto_and_callback+0x9c>)
 8009702:	f7ff ffa1 	bl	8009648 <netconn_apimsg>
    if (err != ERR_OK) {
 8009706:	b910      	cbnz	r0, 800970e <netconn_new_with_proto_and_callback+0x26>
}
 8009708:	4628      	mov	r0, r5
 800970a:	b008      	add	sp, #32
 800970c:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800970e:	686b      	ldr	r3, [r5, #4]
 8009710:	b12b      	cbz	r3, 800971e <netconn_new_with_proto_and_callback+0x36>
 8009712:	4b1d      	ldr	r3, [pc, #116]	; (8009788 <netconn_new_with_proto_and_callback+0xa0>)
 8009714:	22a3      	movs	r2, #163	; 0xa3
 8009716:	491d      	ldr	r1, [pc, #116]	; (800978c <netconn_new_with_proto_and_callback+0xa4>)
 8009718:	481d      	ldr	r0, [pc, #116]	; (8009790 <netconn_new_with_proto_and_callback+0xa8>)
 800971a:	f008 ff7b 	bl	8012614 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800971e:	f105 0410 	add.w	r4, r5, #16
 8009722:	4620      	mov	r0, r4
 8009724:	f008 fd40 	bl	80121a8 <sys_mbox_valid>
 8009728:	b1b0      	cbz	r0, 8009758 <netconn_new_with_proto_and_callback+0x70>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800972a:	f105 0014 	add.w	r0, r5, #20
 800972e:	f008 fd3b 	bl	80121a8 <sys_mbox_valid>
 8009732:	b9c0      	cbnz	r0, 8009766 <netconn_new_with_proto_and_callback+0x7e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009734:	f105 060c 	add.w	r6, r5, #12
 8009738:	4630      	mov	r0, r6
 800973a:	f008 fd7b 	bl	8012234 <sys_sem_valid>
 800973e:	b1c8      	cbz	r0, 8009774 <netconn_new_with_proto_and_callback+0x8c>
      sys_sem_free(&conn->op_completed);
 8009740:	4630      	mov	r0, r6
 8009742:	f008 fd72 	bl	801222a <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8009746:	4620      	mov	r0, r4
 8009748:	f008 fce9 	bl	801211e <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800974c:	4629      	mov	r1, r5
 800974e:	2007      	movs	r0, #7
 8009750:	f002 f82e 	bl	800b7b0 <memp_free>
      return NULL;
 8009754:	2500      	movs	r5, #0
 8009756:	e7d7      	b.n	8009708 <netconn_new_with_proto_and_callback+0x20>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009758:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <netconn_new_with_proto_and_callback+0xa0>)
 800975a:	22a4      	movs	r2, #164	; 0xa4
 800975c:	490d      	ldr	r1, [pc, #52]	; (8009794 <netconn_new_with_proto_and_callback+0xac>)
 800975e:	480c      	ldr	r0, [pc, #48]	; (8009790 <netconn_new_with_proto_and_callback+0xa8>)
 8009760:	f008 ff58 	bl	8012614 <iprintf>
 8009764:	e7e1      	b.n	800972a <netconn_new_with_proto_and_callback+0x42>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009766:	4b08      	ldr	r3, [pc, #32]	; (8009788 <netconn_new_with_proto_and_callback+0xa0>)
 8009768:	22a6      	movs	r2, #166	; 0xa6
 800976a:	490b      	ldr	r1, [pc, #44]	; (8009798 <netconn_new_with_proto_and_callback+0xb0>)
 800976c:	4808      	ldr	r0, [pc, #32]	; (8009790 <netconn_new_with_proto_and_callback+0xa8>)
 800976e:	f008 ff51 	bl	8012614 <iprintf>
 8009772:	e7df      	b.n	8009734 <netconn_new_with_proto_and_callback+0x4c>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <netconn_new_with_proto_and_callback+0xa0>)
 8009776:	22a9      	movs	r2, #169	; 0xa9
 8009778:	4908      	ldr	r1, [pc, #32]	; (800979c <netconn_new_with_proto_and_callback+0xb4>)
 800977a:	4805      	ldr	r0, [pc, #20]	; (8009790 <netconn_new_with_proto_and_callback+0xa8>)
 800977c:	f008 ff4a 	bl	8012614 <iprintf>
 8009780:	e7de      	b.n	8009740 <netconn_new_with_proto_and_callback+0x58>
 8009782:	bf00      	nop
 8009784:	0800a69d 	.word	0x0800a69d
 8009788:	080139c4 	.word	0x080139c4
 800978c:	08013a38 	.word	0x08013a38
 8009790:	0801397c 	.word	0x0801397c
 8009794:	08013a5c 	.word	0x08013a5c
 8009798:	08013a74 	.word	0x08013a74
 800979c:	08013a98 	.word	0x08013a98

080097a0 <netconn_prepare_delete>:
  if (conn == NULL) {
 80097a0:	b160      	cbz	r0, 80097bc <netconn_prepare_delete+0x1c>
{
 80097a2:	b500      	push	{lr}
 80097a4:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_REF(msg).conn = conn;
 80097a6:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80097a8:	2329      	movs	r3, #41	; 0x29
 80097aa:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80097ae:	4669      	mov	r1, sp
 80097b0:	4803      	ldr	r0, [pc, #12]	; (80097c0 <netconn_prepare_delete+0x20>)
 80097b2:	f7ff ff49 	bl	8009648 <netconn_apimsg>
}
 80097b6:	b009      	add	sp, #36	; 0x24
 80097b8:	f85d fb04 	ldr.w	pc, [sp], #4
    return ERR_OK;
 80097bc:	2000      	movs	r0, #0
}
 80097be:	4770      	bx	lr
 80097c0:	0800a9d1 	.word	0x0800a9d1

080097c4 <netconn_delete>:
{
 80097c4:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 80097c6:	b150      	cbz	r0, 80097de <netconn_delete+0x1a>
 80097c8:	4605      	mov	r5, r0
    err = netconn_prepare_delete(conn);
 80097ca:	f7ff ffe9 	bl	80097a0 <netconn_prepare_delete>
  if (err == ERR_OK) {
 80097ce:	4604      	mov	r4, r0
 80097d0:	b108      	cbz	r0, 80097d6 <netconn_delete+0x12>
}
 80097d2:	4620      	mov	r0, r4
 80097d4:	bd38      	pop	{r3, r4, r5, pc}
    netconn_free(conn);
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 ffdc 	bl	800a794 <netconn_free>
 80097dc:	e7f9      	b.n	80097d2 <netconn_delete+0xe>
    return ERR_OK;
 80097de:	2400      	movs	r4, #0
 80097e0:	e7f7      	b.n	80097d2 <netconn_delete+0xe>
	...

080097e4 <netconn_bind>:
{
 80097e4:	b500      	push	{lr}
 80097e6:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80097e8:	b178      	cbz	r0, 800980a <netconn_bind+0x26>
 80097ea:	4603      	mov	r3, r0
    addr = IP4_ADDR_ANY;
 80097ec:	480c      	ldr	r0, [pc, #48]	; (8009820 <netconn_bind+0x3c>)
 80097ee:	2900      	cmp	r1, #0
 80097f0:	bf08      	it	eq
 80097f2:	4601      	moveq	r1, r0
  API_MSG_VAR_REF(msg).conn = conn;
 80097f4:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80097f6:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80097f8:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80097fc:	4669      	mov	r1, sp
 80097fe:	4809      	ldr	r0, [pc, #36]	; (8009824 <netconn_bind+0x40>)
 8009800:	f7ff ff22 	bl	8009648 <netconn_apimsg>
}
 8009804:	b009      	add	sp, #36	; 0x24
 8009806:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800980a:	4b07      	ldr	r3, [pc, #28]	; (8009828 <netconn_bind+0x44>)
 800980c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009810:	4906      	ldr	r1, [pc, #24]	; (800982c <netconn_bind+0x48>)
 8009812:	4807      	ldr	r0, [pc, #28]	; (8009830 <netconn_bind+0x4c>)
 8009814:	f008 fefe 	bl	8012614 <iprintf>
 8009818:	f06f 000f 	mvn.w	r0, #15
 800981c:	e7f2      	b.n	8009804 <netconn_bind+0x20>
 800981e:	bf00      	nop
 8009820:	08016000 	.word	0x08016000
 8009824:	0800aaf1 	.word	0x0800aaf1
 8009828:	080139c4 	.word	0x080139c4
 800982c:	08013ab4 	.word	0x08013ab4
 8009830:	0801397c 	.word	0x0801397c

08009834 <netconn_listen_with_backlog>:
{
 8009834:	b500      	push	{lr}
 8009836:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009838:	b138      	cbz	r0, 800984a <netconn_listen_with_backlog+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 800983a:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800983c:	4669      	mov	r1, sp
 800983e:	4808      	ldr	r0, [pc, #32]	; (8009860 <netconn_listen_with_backlog+0x2c>)
 8009840:	f7ff ff02 	bl	8009648 <netconn_apimsg>
}
 8009844:	b009      	add	sp, #36	; 0x24
 8009846:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800984a:	4b06      	ldr	r3, [pc, #24]	; (8009864 <netconn_listen_with_backlog+0x30>)
 800984c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009850:	4905      	ldr	r1, [pc, #20]	; (8009868 <netconn_listen_with_backlog+0x34>)
 8009852:	4806      	ldr	r0, [pc, #24]	; (800986c <netconn_listen_with_backlog+0x38>)
 8009854:	f008 fede 	bl	8012614 <iprintf>
 8009858:	f06f 000f 	mvn.w	r0, #15
 800985c:	e7f2      	b.n	8009844 <netconn_listen_with_backlog+0x10>
 800985e:	bf00      	nop
 8009860:	0800ab2d 	.word	0x0800ab2d
 8009864:	080139c4 	.word	0x080139c4
 8009868:	08013ad0 	.word	0x08013ad0
 800986c:	0801397c 	.word	0x0801397c

08009870 <netconn_write_vectors_partly>:
{
 8009870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009874:	b08a      	sub	sp, #40	; 0x28
 8009876:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009878:	9401      	str	r4, [sp, #4]
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800987a:	b318      	cbz	r0, 80098c4 <netconn_write_vectors_partly+0x54>
 800987c:	4686      	mov	lr, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800987e:	7800      	ldrb	r0, [r0, #0]
 8009880:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8009884:	2810      	cmp	r0, #16
 8009886:	d127      	bne.n	80098d8 <netconn_write_vectors_partly+0x68>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009888:	f89e 801c 	ldrb.w	r8, [lr, #28]
 800988c:	f008 0802 	and.w	r8, r8, #2
 8009890:	f003 0004 	and.w	r0, r3, #4
 8009894:	ea48 0500 	orr.w	r5, r8, r0
  if (dontblock && !bytes_written) {
 8009898:	9801      	ldr	r0, [sp, #4]
 800989a:	b908      	cbnz	r0, 80098a0 <netconn_write_vectors_partly+0x30>
 800989c:	2d00      	cmp	r5, #0
 800989e:	d16a      	bne.n	8009976 <netconn_write_vectors_partly+0x106>
  for (i = 0; i < vectorcnt; i++) {
 80098a0:	4694      	mov	ip, r2
 80098a2:	b31a      	cbz	r2, 80098ec <netconn_write_vectors_partly+0x7c>
    size += vectors[i].len;
 80098a4:	460f      	mov	r7, r1
 80098a6:	f857 4f04 	ldr.w	r4, [r7, #4]!
  for (i = 0; i < vectorcnt; i++) {
 80098aa:	2000      	movs	r0, #0
 80098ac:	3001      	adds	r0, #1
 80098ae:	4560      	cmp	r0, ip
 80098b0:	d01e      	beq.n	80098f0 <netconn_write_vectors_partly+0x80>
    if (size < vectors[i].len) {
 80098b2:	f857 6030 	ldr.w	r6, [r7, r0, lsl #3]
 80098b6:	19a4      	adds	r4, r4, r6
 80098b8:	d3f8      	bcc.n	80098ac <netconn_write_vectors_partly+0x3c>
      return ERR_VAL;
 80098ba:	f06f 0005 	mvn.w	r0, #5
}
 80098be:	b00a      	add	sp, #40	; 0x28
 80098c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80098c4:	4b31      	ldr	r3, [pc, #196]	; (800998c <netconn_write_vectors_partly+0x11c>)
 80098c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80098ca:	4931      	ldr	r1, [pc, #196]	; (8009990 <netconn_write_vectors_partly+0x120>)
 80098cc:	4831      	ldr	r0, [pc, #196]	; (8009994 <netconn_write_vectors_partly+0x124>)
 80098ce:	f008 fea1 	bl	8012614 <iprintf>
 80098d2:	f06f 000f 	mvn.w	r0, #15
 80098d6:	e7f2      	b.n	80098be <netconn_write_vectors_partly+0x4e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80098d8:	4b2c      	ldr	r3, [pc, #176]	; (800998c <netconn_write_vectors_partly+0x11c>)
 80098da:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80098de:	492e      	ldr	r1, [pc, #184]	; (8009998 <netconn_write_vectors_partly+0x128>)
 80098e0:	482c      	ldr	r0, [pc, #176]	; (8009994 <netconn_write_vectors_partly+0x124>)
 80098e2:	f008 fe97 	bl	8012614 <iprintf>
 80098e6:	f06f 0005 	mvn.w	r0, #5
 80098ea:	e7e8      	b.n	80098be <netconn_write_vectors_partly+0x4e>
    return ERR_OK;
 80098ec:	2000      	movs	r0, #0
 80098ee:	e7e6      	b.n	80098be <netconn_write_vectors_partly+0x4e>
  if (size == 0) {
 80098f0:	2c00      	cmp	r4, #0
 80098f2:	d043      	beq.n	800997c <netconn_write_vectors_partly+0x10c>
  } else if (size > SSIZE_MAX) {
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	da20      	bge.n	800993a <netconn_write_vectors_partly+0xca>
    if (!bytes_written) {
 80098f8:	9801      	ldr	r0, [sp, #4]
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d040      	beq.n	8009980 <netconn_write_vectors_partly+0x110>
  API_MSG_VAR_REF(msg).conn = conn;
 80098fe:	f8cd e008 	str.w	lr, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009902:	9104      	str	r1, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009904:	f8ad 2014 	strh.w	r2, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009908:	2200      	movs	r2, #0
 800990a:	9206      	str	r2, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800990c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009910:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009914:	9307      	str	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009916:	9208      	str	r2, [sp, #32]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009918:	a902      	add	r1, sp, #8
 800991a:	4820      	ldr	r0, [pc, #128]	; (800999c <netconn_write_vectors_partly+0x12c>)
 800991c:	f7ff fe94 	bl	8009648 <netconn_apimsg>
  if (err == ERR_OK) {
 8009920:	2800      	cmp	r0, #0
 8009922:	d1cc      	bne.n	80098be <netconn_write_vectors_partly+0x4e>
    size = (size_t)limited;
 8009924:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009928:	9b08      	ldr	r3, [sp, #32]
 800992a:	9a01      	ldr	r2, [sp, #4]
 800992c:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 800992e:	bb55      	cbnz	r5, 8009986 <netconn_write_vectors_partly+0x116>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	42a3      	cmp	r3, r4
 8009934:	d116      	bne.n	8009964 <netconn_write_vectors_partly+0xf4>
  return err;
 8009936:	2000      	movs	r0, #0
 8009938:	e7c1      	b.n	80098be <netconn_write_vectors_partly+0x4e>
  API_MSG_VAR_REF(msg).conn = conn;
 800993a:	f8cd e008 	str.w	lr, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800993e:	9104      	str	r1, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009940:	f8ad 2014 	strh.w	r2, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009944:	2200      	movs	r2, #0
 8009946:	9206      	str	r2, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009948:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800994c:	9407      	str	r4, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800994e:	9208      	str	r2, [sp, #32]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009950:	a902      	add	r1, sp, #8
 8009952:	4812      	ldr	r0, [pc, #72]	; (800999c <netconn_write_vectors_partly+0x12c>)
 8009954:	f7ff fe78 	bl	8009648 <netconn_apimsg>
  if (err == ERR_OK) {
 8009958:	2800      	cmp	r0, #0
 800995a:	d1b0      	bne.n	80098be <netconn_write_vectors_partly+0x4e>
    if (bytes_written != NULL) {
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0e5      	beq.n	800992e <netconn_write_vectors_partly+0xbe>
 8009962:	e7e1      	b.n	8009928 <netconn_write_vectors_partly+0xb8>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009964:	4b09      	ldr	r3, [pc, #36]	; (800998c <netconn_write_vectors_partly+0x11c>)
 8009966:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800996a:	490d      	ldr	r1, [pc, #52]	; (80099a0 <netconn_write_vectors_partly+0x130>)
 800996c:	4809      	ldr	r0, [pc, #36]	; (8009994 <netconn_write_vectors_partly+0x124>)
 800996e:	f008 fe51 	bl	8012614 <iprintf>
  return err;
 8009972:	2000      	movs	r0, #0
 8009974:	e7a3      	b.n	80098be <netconn_write_vectors_partly+0x4e>
    return ERR_VAL;
 8009976:	f06f 0005 	mvn.w	r0, #5
 800997a:	e7a0      	b.n	80098be <netconn_write_vectors_partly+0x4e>
    return ERR_OK;
 800997c:	2000      	movs	r0, #0
 800997e:	e79e      	b.n	80098be <netconn_write_vectors_partly+0x4e>
      return ERR_VAL;
 8009980:	f06f 0005 	mvn.w	r0, #5
 8009984:	e79b      	b.n	80098be <netconn_write_vectors_partly+0x4e>
  return err;
 8009986:	2000      	movs	r0, #0
 8009988:	e799      	b.n	80098be <netconn_write_vectors_partly+0x4e>
 800998a:	bf00      	nop
 800998c:	080139c4 	.word	0x080139c4
 8009990:	08013af0 	.word	0x08013af0
 8009994:	0801397c 	.word	0x0801397c
 8009998:	08013b0c 	.word	0x08013b0c
 800999c:	0800ac39 	.word	0x0800ac39
 80099a0:	08013b30 	.word	0x08013b30

080099a4 <netconn_write_partly>:
{
 80099a4:	b500      	push	{lr}
 80099a6:	b085      	sub	sp, #20
  vector.ptr = dataptr;
 80099a8:	9102      	str	r1, [sp, #8]
  vector.len = size;
 80099aa:	9203      	str	r2, [sp, #12]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80099ac:	9a06      	ldr	r2, [sp, #24]
 80099ae:	9200      	str	r2, [sp, #0]
 80099b0:	2201      	movs	r2, #1
 80099b2:	a902      	add	r1, sp, #8
 80099b4:	f7ff ff5c 	bl	8009870 <netconn_write_vectors_partly>
}
 80099b8:	b005      	add	sp, #20
 80099ba:	f85d fb04 	ldr.w	pc, [sp], #4

080099be <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80099be:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80099c0:	2103      	movs	r1, #3
 80099c2:	f7ff fe6f 	bl	80096a4 <netconn_close_shutdown>
}
 80099c6:	bd08      	pop	{r3, pc}

080099c8 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80099c8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80099ca:	b150      	cbz	r0, 80099e2 <netconn_err+0x1a>
 80099cc:	4604      	mov	r4, r0
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80099ce:	f008 fc71 	bl	80122b4 <sys_arch_protect>
  err = conn->pending_err;
 80099d2:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80099da:	f008 fc77 	bl	80122cc <sys_arch_unprotect>
  return err;
}
 80099de:	4628      	mov	r0, r5
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80099e2:	2500      	movs	r5, #0
 80099e4:	e7fb      	b.n	80099de <netconn_err+0x16>
	...

080099e8 <netconn_accept>:
{
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80099ec:	b169      	cbz	r1, 8009a0a <netconn_accept+0x22>
 80099ee:	4604      	mov	r4, r0
 80099f0:	460e      	mov	r6, r1
  *new_conn = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80099f6:	b190      	cbz	r0, 8009a1e <netconn_accept+0x36>
  err = netconn_err(conn);
 80099f8:	f7ff ffe6 	bl	80099c8 <netconn_err>
 80099fc:	4605      	mov	r5, r0
 80099fe:	f88d 0007 	strb.w	r0, [sp, #7]
  if (err != ERR_OK) {
 8009a02:	b1b0      	cbz	r0, 8009a32 <netconn_accept+0x4a>
}
 8009a04:	4628      	mov	r0, r5
 8009a06:	b003      	add	sp, #12
 8009a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009a0a:	4b26      	ldr	r3, [pc, #152]	; (8009aa4 <netconn_accept+0xbc>)
 8009a0c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009a10:	4925      	ldr	r1, [pc, #148]	; (8009aa8 <netconn_accept+0xc0>)
 8009a12:	4826      	ldr	r0, [pc, #152]	; (8009aac <netconn_accept+0xc4>)
 8009a14:	f008 fdfe 	bl	8012614 <iprintf>
 8009a18:	f06f 050f 	mvn.w	r5, #15
 8009a1c:	e7f2      	b.n	8009a04 <netconn_accept+0x1c>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009a1e:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <netconn_accept+0xbc>)
 8009a20:	f240 12e3 	movw	r2, #483	; 0x1e3
 8009a24:	4922      	ldr	r1, [pc, #136]	; (8009ab0 <netconn_accept+0xc8>)
 8009a26:	4821      	ldr	r0, [pc, #132]	; (8009aac <netconn_accept+0xc4>)
 8009a28:	f008 fdf4 	bl	8012614 <iprintf>
 8009a2c:	f06f 050f 	mvn.w	r5, #15
 8009a30:	e7e8      	b.n	8009a04 <netconn_accept+0x1c>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009a32:	f104 0714 	add.w	r7, r4, #20
 8009a36:	4638      	mov	r0, r7
 8009a38:	f008 fbb6 	bl	80121a8 <sys_mbox_valid>
 8009a3c:	b340      	cbz	r0, 8009a90 <netconn_accept+0xa8>
 8009a3e:	7f23      	ldrb	r3, [r4, #28]
 8009a40:	f013 0f01 	tst.w	r3, #1
 8009a44:	d127      	bne.n	8009a96 <netconn_accept+0xae>
  if (netconn_is_nonblocking(conn)) {
 8009a46:	f013 0f02 	tst.w	r3, #2
 8009a4a:	d009      	beq.n	8009a60 <netconn_accept+0x78>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009a4c:	4669      	mov	r1, sp
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f008 fb9f 	bl	8012192 <sys_arch_mbox_tryfetch>
 8009a54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a58:	d107      	bne.n	8009a6a <netconn_accept+0x82>
      return ERR_WOULDBLOCK;
 8009a5a:	f06f 0506 	mvn.w	r5, #6
 8009a5e:	e7d1      	b.n	8009a04 <netconn_accept+0x1c>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009a60:	2200      	movs	r2, #0
 8009a62:	4669      	mov	r1, sp
 8009a64:	4638      	mov	r0, r7
 8009a66:	f008 fb73 	bl	8012150 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a6c:	b11b      	cbz	r3, 8009a76 <netconn_accept+0x8e>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2101      	movs	r1, #1
 8009a72:	4620      	mov	r0, r4
 8009a74:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009a76:	f10d 0107 	add.w	r1, sp, #7
 8009a7a:	9800      	ldr	r0, [sp, #0]
 8009a7c:	f000 fde0 	bl	800a640 <lwip_netconn_is_err_msg>
 8009a80:	b918      	cbnz	r0, 8009a8a <netconn_accept+0xa2>
  if (accept_ptr == NULL) {
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	b153      	cbz	r3, 8009a9c <netconn_accept+0xb4>
  *new_conn = newconn;
 8009a86:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8009a88:	e7bc      	b.n	8009a04 <netconn_accept+0x1c>
    return err;
 8009a8a:	f99d 5007 	ldrsb.w	r5, [sp, #7]
 8009a8e:	e7b9      	b.n	8009a04 <netconn_accept+0x1c>
    return ERR_CLSD;
 8009a90:	f06f 050e 	mvn.w	r5, #14
 8009a94:	e7b6      	b.n	8009a04 <netconn_accept+0x1c>
 8009a96:	f06f 050e 	mvn.w	r5, #14
 8009a9a:	e7b3      	b.n	8009a04 <netconn_accept+0x1c>
    return ERR_CLSD;
 8009a9c:	f06f 050e 	mvn.w	r5, #14
 8009aa0:	e7b0      	b.n	8009a04 <netconn_accept+0x1c>
 8009aa2:	bf00      	nop
 8009aa4:	080139c4 	.word	0x080139c4
 8009aa8:	08013b54 	.word	0x08013b54
 8009aac:	0801397c 	.word	0x0801397c
 8009ab0:	08013b74 	.word	0x08013b74

08009ab4 <netconn_recv_data>:
{
 8009ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab6:	b083      	sub	sp, #12
  void *buf = NULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d034      	beq.n	8009b2a <netconn_recv_data+0x76>
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	4617      	mov	r7, r2
 8009ac4:	460e      	mov	r6, r1
  *new_buf = NULL;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d037      	beq.n	8009b3e <netconn_recv_data+0x8a>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009ace:	f100 0510 	add.w	r5, r0, #16
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f008 fb68 	bl	80121a8 <sys_mbox_valid>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d03a      	beq.n	8009b52 <netconn_recv_data+0x9e>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009adc:	7f23      	ldrb	r3, [r4, #28]
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	f007 0204 	and.w	r2, r7, #4
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	d103      	bne.n	8009af2 <netconn_recv_data+0x3e>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009aea:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d045      	beq.n	8009b7e <netconn_recv_data+0xca>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009af2:	a901      	add	r1, sp, #4
 8009af4:	4628      	mov	r0, r5
 8009af6:	f008 fb4c 	bl	8012192 <sys_arch_mbox_tryfetch>
 8009afa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009afe:	d030      	beq.n	8009b62 <netconn_recv_data+0xae>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009b00:	7823      	ldrb	r3, [r4, #0]
 8009b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b06:	2b10      	cmp	r3, #16
 8009b08:	d03f      	beq.n	8009b8a <netconn_recv_data+0xd6>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d04c      	beq.n	8009baa <netconn_recv_data+0xf6>
    len = netbuf_len((struct netbuf *)buf);
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b18:	b113      	cbz	r3, 8009b20 <netconn_recv_data+0x6c>
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4798      	blx	r3
  *new_buf = buf;
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8009b24:	2000      	movs	r0, #0
}
 8009b26:	b003      	add	sp, #12
 8009b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <netconn_recv_data+0x108>)
 8009b2c:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009b30:	4923      	ldr	r1, [pc, #140]	; (8009bc0 <netconn_recv_data+0x10c>)
 8009b32:	4824      	ldr	r0, [pc, #144]	; (8009bc4 <netconn_recv_data+0x110>)
 8009b34:	f008 fd6e 	bl	8012614 <iprintf>
 8009b38:	f06f 000f 	mvn.w	r0, #15
 8009b3c:	e7f3      	b.n	8009b26 <netconn_recv_data+0x72>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009b3e:	4b1f      	ldr	r3, [pc, #124]	; (8009bbc <netconn_recv_data+0x108>)
 8009b40:	f240 224a 	movw	r2, #586	; 0x24a
 8009b44:	4920      	ldr	r1, [pc, #128]	; (8009bc8 <netconn_recv_data+0x114>)
 8009b46:	481f      	ldr	r0, [pc, #124]	; (8009bc4 <netconn_recv_data+0x110>)
 8009b48:	f008 fd64 	bl	8012614 <iprintf>
 8009b4c:	f06f 000f 	mvn.w	r0, #15
 8009b50:	e7e9      	b.n	8009b26 <netconn_recv_data+0x72>
    err_t err = netconn_err(conn);
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7ff ff38 	bl	80099c8 <netconn_err>
    return ERR_CONN;
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	bf08      	it	eq
 8009b5c:	f06f 000a 	mvneq.w	r0, #10
 8009b60:	e7e1      	b.n	8009b26 <netconn_recv_data+0x72>
      err = netconn_err(conn);
 8009b62:	4620      	mov	r0, r4
 8009b64:	f7ff ff30 	bl	80099c8 <netconn_err>
      if (err != ERR_OK) {
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d1dc      	bne.n	8009b26 <netconn_recv_data+0x72>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009b6c:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8009b6e:	f013 0f01 	tst.w	r3, #1
 8009b72:	bf14      	ite	ne
 8009b74:	f06f 000a 	mvnne.w	r0, #10
 8009b78:	f06f 0006 	mvneq.w	r0, #6
 8009b7c:	e7d3      	b.n	8009b26 <netconn_recv_data+0x72>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009b7e:	2200      	movs	r2, #0
 8009b80:	a901      	add	r1, sp, #4
 8009b82:	4628      	mov	r0, r5
 8009b84:	f008 fae4 	bl	8012150 <sys_arch_mbox_fetch>
 8009b88:	e7ba      	b.n	8009b00 <netconn_recv_data+0x4c>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009b8a:	f10d 0103 	add.w	r1, sp, #3
 8009b8e:	9801      	ldr	r0, [sp, #4]
 8009b90:	f000 fd56 	bl	800a640 <lwip_netconn_is_err_msg>
 8009b94:	b130      	cbz	r0, 8009ba4 <netconn_recv_data+0xf0>
      if (err == ERR_CLSD) {
 8009b96:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8009b9a:	f110 0f0f 	cmn.w	r0, #15
 8009b9e:	bf08      	it	eq
 8009ba0:	2000      	moveq	r0, #0
 8009ba2:	e7c0      	b.n	8009b26 <netconn_recv_data+0x72>
    len = ((struct pbuf *)buf)->tot_len;
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	891a      	ldrh	r2, [r3, #8]
 8009ba8:	e7b5      	b.n	8009b16 <netconn_recv_data+0x62>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009baa:	4b04      	ldr	r3, [pc, #16]	; (8009bbc <netconn_recv_data+0x108>)
 8009bac:	f240 2291 	movw	r2, #657	; 0x291
 8009bb0:	4906      	ldr	r1, [pc, #24]	; (8009bcc <netconn_recv_data+0x118>)
 8009bb2:	4804      	ldr	r0, [pc, #16]	; (8009bc4 <netconn_recv_data+0x110>)
 8009bb4:	f008 fd2e 	bl	8012614 <iprintf>
 8009bb8:	e7aa      	b.n	8009b10 <netconn_recv_data+0x5c>
 8009bba:	bf00      	nop
 8009bbc:	080139c4 	.word	0x080139c4
 8009bc0:	08013b94 	.word	0x08013b94
 8009bc4:	0801397c 	.word	0x0801397c
 8009bc8:	08013bb4 	.word	0x08013bb4
 8009bcc:	08013bd0 	.word	0x08013bd0

08009bd0 <netconn_recv_data_tcp>:
{
 8009bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd2:	b089      	sub	sp, #36	; 0x24
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009bda:	3010      	adds	r0, #16
 8009bdc:	f008 fae4 	bl	80121a8 <sys_mbox_valid>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d03e      	beq.n	8009c62 <netconn_recv_data_tcp+0x92>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009be4:	7f23      	ldrb	r3, [r4, #28]
 8009be6:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8009bea:	2a00      	cmp	r2, #0
 8009bec:	db1b      	blt.n	8009c26 <netconn_recv_data_tcp+0x56>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009bee:	4632      	mov	r2, r6
 8009bf0:	4639      	mov	r1, r7
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7ff ff5e 	bl	8009ab4 <netconn_recv_data>
  if (err != ERR_OK) {
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	bb30      	cbnz	r0, 8009c4a <netconn_recv_data_tcp+0x7a>
  buf = *new_buf;
 8009bfc:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009bfe:	f016 0f08 	tst.w	r6, #8
 8009c02:	d105      	bne.n	8009c10 <netconn_recv_data_tcp+0x40>
    u16_t len = buf ? buf->tot_len : 1;
 8009c04:	b327      	cbz	r7, 8009c50 <netconn_recv_data_tcp+0x80>
 8009c06:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009c08:	466a      	mov	r2, sp
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff fd28 	bl	8009660 <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8009c10:	b9df      	cbnz	r7, 8009c4a <netconn_recv_data_tcp+0x7a>
    if (apiflags & NETCONN_NOFIN) {
 8009c12:	f016 0f10 	tst.w	r6, #16
 8009c16:	d009      	beq.n	8009c2c <netconn_recv_data_tcp+0x5c>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009c18:	7f23      	ldrb	r3, [r4, #28]
 8009c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c1e:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8009c20:	f06f 0506 	mvn.w	r5, #6
 8009c24:	e011      	b.n	8009c4a <netconn_recv_data_tcp+0x7a>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c2a:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c2e:	b11b      	cbz	r3, 8009c38 <netconn_recv_data_tcp+0x68>
 8009c30:	2200      	movs	r2, #0
 8009c32:	2101      	movs	r1, #1
 8009c34:	4620      	mov	r0, r4
 8009c36:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009c38:	6863      	ldr	r3, [r4, #4]
 8009c3a:	b95b      	cbnz	r3, 8009c54 <netconn_recv_data_tcp+0x84>
        err = netconn_err(conn);
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7ff fec3 	bl	80099c8 <netconn_err>
        return ERR_RST;
 8009c42:	1e05      	subs	r5, r0, #0
 8009c44:	bf08      	it	eq
 8009c46:	f06f 050d 	mvneq.w	r5, #13
}
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	b009      	add	sp, #36	; 0x24
 8009c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8009c50:	2101      	movs	r1, #1
 8009c52:	e7d9      	b.n	8009c08 <netconn_recv_data_tcp+0x38>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009c54:	2101      	movs	r1, #1
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff fd24 	bl	80096a4 <netconn_close_shutdown>
      return ERR_CLSD;
 8009c5c:	f06f 050e 	mvn.w	r5, #14
 8009c60:	e7f3      	b.n	8009c4a <netconn_recv_data_tcp+0x7a>
    return ERR_CONN;
 8009c62:	f06f 050a 	mvn.w	r5, #10
 8009c66:	e7f0      	b.n	8009c4a <netconn_recv_data_tcp+0x7a>

08009c68 <netconn_recv>:
{
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009c6c:	b311      	cbz	r1, 8009cb4 <netconn_recv+0x4c>
 8009c6e:	4604      	mov	r4, r0
 8009c70:	460d      	mov	r5, r1
  *new_buf = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009c76:	b338      	cbz	r0, 8009cc8 <netconn_recv+0x60>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009c78:	7803      	ldrb	r3, [r0, #0]
 8009c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d13c      	bne.n	8009cfc <netconn_recv+0x94>
    struct pbuf *p = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009c86:	2006      	movs	r0, #6
 8009c88:	f001 fd78 	bl	800b77c <memp_malloc>
    if (buf == NULL) {
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d031      	beq.n	8009cf6 <netconn_recv+0x8e>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8009c92:	2200      	movs	r2, #0
 8009c94:	a901      	add	r1, sp, #4
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7ff ff9a 	bl	8009bd0 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	b9e8      	cbnz	r0, 8009cdc <netconn_recv+0x74>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	b303      	cbz	r3, 8009ce6 <netconn_recv+0x7e>
    buf->p = p;
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8009ca8:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 8009cae:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8009cb0:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8009cb2:	e027      	b.n	8009d04 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009cb4:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <netconn_recv+0xa4>)
 8009cb6:	f240 3263 	movw	r2, #867	; 0x363
 8009cba:	4915      	ldr	r1, [pc, #84]	; (8009d10 <netconn_recv+0xa8>)
 8009cbc:	4815      	ldr	r0, [pc, #84]	; (8009d14 <netconn_recv+0xac>)
 8009cbe:	f008 fca9 	bl	8012614 <iprintf>
 8009cc2:	f06f 040f 	mvn.w	r4, #15
 8009cc6:	e01d      	b.n	8009d04 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009cc8:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <netconn_recv+0xa4>)
 8009cca:	f240 3265 	movw	r2, #869	; 0x365
 8009cce:	4912      	ldr	r1, [pc, #72]	; (8009d18 <netconn_recv+0xb0>)
 8009cd0:	4810      	ldr	r0, [pc, #64]	; (8009d14 <netconn_recv+0xac>)
 8009cd2:	f008 fc9f 	bl	8012614 <iprintf>
 8009cd6:	f06f 040f 	mvn.w	r4, #15
 8009cda:	e013      	b.n	8009d04 <netconn_recv+0x9c>
      memp_free(MEMP_NETBUF, buf);
 8009cdc:	4631      	mov	r1, r6
 8009cde:	2006      	movs	r0, #6
 8009ce0:	f001 fd66 	bl	800b7b0 <memp_free>
      return err;
 8009ce4:	e00e      	b.n	8009d04 <netconn_recv+0x9c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <netconn_recv+0xa4>)
 8009ce8:	f240 3279 	movw	r2, #889	; 0x379
 8009cec:	490b      	ldr	r1, [pc, #44]	; (8009d1c <netconn_recv+0xb4>)
 8009cee:	4809      	ldr	r0, [pc, #36]	; (8009d14 <netconn_recv+0xac>)
 8009cf0:	f008 fc90 	bl	8012614 <iprintf>
 8009cf4:	e7d6      	b.n	8009ca4 <netconn_recv+0x3c>
      return ERR_MEM;
 8009cf6:	f04f 34ff 	mov.w	r4, #4294967295
 8009cfa:	e003      	b.n	8009d04 <netconn_recv+0x9c>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f7ff fed9 	bl	8009ab4 <netconn_recv_data>
 8009d02:	4604      	mov	r4, r0
}
 8009d04:	4620      	mov	r0, r4
 8009d06:	b002      	add	sp, #8
 8009d08:	bd70      	pop	{r4, r5, r6, pc}
 8009d0a:	bf00      	nop
 8009d0c:	080139c4 	.word	0x080139c4
 8009d10:	08013b94 	.word	0x08013b94
 8009d14:	0801397c 	.word	0x0801397c
 8009d18:	08013bb4 	.word	0x08013bb4
 8009d1c:	08013d14 	.word	0x08013d14

08009d20 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d24:	4604      	mov	r4, r0
 8009d26:	4615      	mov	r5, r2
 8009d28:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009d2a:	460e      	mov	r6, r1
 8009d2c:	b369      	cbz	r1, 8009d8a <recv_udp+0x6a>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009d2e:	2c00      	cmp	r4, #0
 8009d30:	d032      	beq.n	8009d98 <recv_udp+0x78>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	42b3      	cmp	r3, r6
 8009d36:	d005      	beq.n	8009d44 <recv_udp+0x24>
 8009d38:	4b24      	ldr	r3, [pc, #144]	; (8009dcc <recv_udp+0xac>)
 8009d3a:	22ee      	movs	r2, #238	; 0xee
 8009d3c:	4924      	ldr	r1, [pc, #144]	; (8009dd0 <recv_udp+0xb0>)
 8009d3e:	4825      	ldr	r0, [pc, #148]	; (8009dd4 <recv_udp+0xb4>)
 8009d40:	f008 fc68 	bl	8012614 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d44:	f104 0710 	add.w	r7, r4, #16
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f008 fa2d 	bl	80121a8 <sys_mbox_valid>
 8009d4e:	b368      	cbz	r0, 8009dac <recv_udp+0x8c>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009d50:	2006      	movs	r0, #6
 8009d52:	f001 fd13 	bl	800b77c <memp_malloc>
  if (buf == NULL) {
 8009d56:	4606      	mov	r6, r0
 8009d58:	b368      	cbz	r0, 8009db6 <recv_udp+0x96>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8009d5a:	6005      	str	r5, [r0, #0]
    buf->ptr = p;
 8009d5c:	6045      	str	r5, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8009d5e:	f1b8 0f00 	cmp.w	r8, #0
 8009d62:	d02c      	beq.n	8009dbe <recv_udp+0x9e>
 8009d64:	f8d8 3000 	ldr.w	r3, [r8]
 8009d68:	60b3      	str	r3, [r6, #8]
    buf->port = port;
 8009d6a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009d6e:	81b3      	strh	r3, [r6, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009d70:	892d      	ldrh	r5, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009d72:	4631      	mov	r1, r6
 8009d74:	4638      	mov	r0, r7
 8009d76:	f008 f9db 	bl	8012130 <sys_mbox_trypost>
 8009d7a:	bb10      	cbnz	r0, 8009dc2 <recv_udp+0xa2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d7e:	b1c3      	cbz	r3, 8009db2 <recv_udp+0x92>
 8009d80:	462a      	mov	r2, r5
 8009d82:	2100      	movs	r1, #0
 8009d84:	4620      	mov	r0, r4
 8009d86:	4798      	blx	r3
 8009d88:	e013      	b.n	8009db2 <recv_udp+0x92>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009d8a:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <recv_udp+0xac>)
 8009d8c:	22e5      	movs	r2, #229	; 0xe5
 8009d8e:	4912      	ldr	r1, [pc, #72]	; (8009dd8 <recv_udp+0xb8>)
 8009d90:	4810      	ldr	r0, [pc, #64]	; (8009dd4 <recv_udp+0xb4>)
 8009d92:	f008 fc3f 	bl	8012614 <iprintf>
 8009d96:	e7ca      	b.n	8009d2e <recv_udp+0xe>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <recv_udp+0xac>)
 8009d9a:	22e6      	movs	r2, #230	; 0xe6
 8009d9c:	490f      	ldr	r1, [pc, #60]	; (8009ddc <recv_udp+0xbc>)
 8009d9e:	480d      	ldr	r0, [pc, #52]	; (8009dd4 <recv_udp+0xb4>)
 8009da0:	f008 fc38 	bl	8012614 <iprintf>
    pbuf_free(p);
 8009da4:	4628      	mov	r0, r5
 8009da6:	f001 ffc3 	bl	800bd30 <pbuf_free>
    return;
 8009daa:	e002      	b.n	8009db2 <recv_udp+0x92>
    pbuf_free(p);
 8009dac:	4628      	mov	r0, r5
 8009dae:	f001 ffbf 	bl	800bd30 <pbuf_free>
  }
}
 8009db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8009db6:	4628      	mov	r0, r5
 8009db8:	f001 ffba 	bl	800bd30 <pbuf_free>
    return;
 8009dbc:	e7f9      	b.n	8009db2 <recv_udp+0x92>
    ip_addr_set(&buf->addr, addr);
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e7d2      	b.n	8009d68 <recv_udp+0x48>
    netbuf_delete(buf);
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f001 f80a 	bl	800addc <netbuf_delete>
    return;
 8009dc8:	e7f3      	b.n	8009db2 <recv_udp+0x92>
 8009dca:	bf00      	nop
 8009dcc:	08013bdc 	.word	0x08013bdc
 8009dd0:	08013c54 	.word	0x08013c54
 8009dd4:	0801397c 	.word	0x0801397c
 8009dd8:	08013c10 	.word	0x08013c10
 8009ddc:	08013c34 	.word	0x08013c34

08009de0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009de0:	b510      	push	{r4, lr}
 8009de2:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009de4:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8009de6:	4620      	mov	r0, r4
 8009de8:	f002 fc96 	bl	800c718 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009dec:	4908      	ldr	r1, [pc, #32]	; (8009e10 <setup_tcp+0x30>)
 8009dee:	4620      	mov	r0, r4
 8009df0:	f002 fc96 	bl	800c720 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009df4:	4907      	ldr	r1, [pc, #28]	; (8009e14 <setup_tcp+0x34>)
 8009df6:	4620      	mov	r0, r4
 8009df8:	f002 fcac 	bl	800c754 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	4906      	ldr	r1, [pc, #24]	; (8009e18 <setup_tcp+0x38>)
 8009e00:	4620      	mov	r0, r4
 8009e02:	f002 fce1 	bl	800c7c8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009e06:	4905      	ldr	r1, [pc, #20]	; (8009e1c <setup_tcp+0x3c>)
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f002 fcbd 	bl	800c788 <tcp_err>
}
 8009e0e:	bd10      	pop	{r4, pc}
 8009e10:	0800a561 	.word	0x0800a561
 8009e14:	0800a4ed 	.word	0x0800a4ed
 8009e18:	0800a469 	.word	0x0800a469
 8009e1c:	08009e21 	.word	0x08009e21

08009e20 <err_tcp>:
{
 8009e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e24:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009e26:	4604      	mov	r4, r0
 8009e28:	b358      	cbz	r0, 8009e82 <err_tcp+0x62>
  SYS_ARCH_PROTECT(lev);
 8009e2a:	f008 fa43 	bl	80122b4 <sys_arch_protect>
  conn->pcb.tcp = NULL;
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6062      	str	r2, [r4, #4]
  conn->pending_err = err;
 8009e32:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009e34:	7f23      	ldrb	r3, [r4, #28]
 8009e36:	f043 0301 	orr.w	r3, r3, #1
 8009e3a:	7723      	strb	r3, [r4, #28]
  old_state = conn->state;
 8009e3c:	7866      	ldrb	r6, [r4, #1]
  conn->state = NETCONN_NONE;
 8009e3e:	7062      	strb	r2, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8009e40:	f008 fa44 	bl	80122cc <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e46:	b17b      	cbz	r3, 8009e68 <err_tcp+0x48>
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2104      	movs	r1, #4
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e52:	b14b      	cbz	r3, 8009e68 <err_tcp+0x48>
 8009e54:	2200      	movs	r2, #0
 8009e56:	4611      	mov	r1, r2
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e5e:	b11b      	cbz	r3, 8009e68 <err_tcp+0x48>
 8009e60:	2200      	movs	r2, #0
 8009e62:	2102      	movs	r1, #2
 8009e64:	4620      	mov	r0, r4
 8009e66:	4798      	blx	r3
  switch (err) {
 8009e68:	f115 0f0e 	cmn.w	r5, #14
 8009e6c:	d01a      	beq.n	8009ea4 <err_tcp+0x84>
 8009e6e:	f115 0f0d 	cmn.w	r5, #13
 8009e72:	d01a      	beq.n	8009eaa <err_tcp+0x8a>
 8009e74:	f115 0f0f 	cmn.w	r5, #15
 8009e78:	d046      	beq.n	8009f08 <err_tcp+0xe8>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009e7a:	b955      	cbnz	r5, 8009e92 <err_tcp+0x72>
      return NULL;
 8009e7c:	f04f 0800 	mov.w	r8, #0
 8009e80:	e015      	b.n	8009eae <err_tcp+0x8e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009e82:	4b37      	ldr	r3, [pc, #220]	; (8009f60 <err_tcp+0x140>)
 8009e84:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009e88:	4936      	ldr	r1, [pc, #216]	; (8009f64 <err_tcp+0x144>)
 8009e8a:	4837      	ldr	r0, [pc, #220]	; (8009f68 <err_tcp+0x148>)
 8009e8c:	f008 fbc2 	bl	8012614 <iprintf>
 8009e90:	e7cb      	b.n	8009e2a <err_tcp+0xa>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009e92:	4b33      	ldr	r3, [pc, #204]	; (8009f60 <err_tcp+0x140>)
 8009e94:	227d      	movs	r2, #125	; 0x7d
 8009e96:	4935      	ldr	r1, [pc, #212]	; (8009f6c <err_tcp+0x14c>)
 8009e98:	4833      	ldr	r0, [pc, #204]	; (8009f68 <err_tcp+0x148>)
 8009e9a:	f008 fbbb 	bl	8012614 <iprintf>
      return NULL;
 8009e9e:	f04f 0800 	mov.w	r8, #0
 8009ea2:	e004      	b.n	8009eae <err_tcp+0x8e>
  switch (err) {
 8009ea4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009f7c <err_tcp+0x15c>
 8009ea8:	e001      	b.n	8009eae <err_tcp+0x8e>
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009f80 <err_tcp+0x160>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009eae:	f104 0710 	add.w	r7, r4, #16
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	f008 f978 	bl	80121a8 <sys_mbox_valid>
 8009eb8:	bb48      	cbnz	r0, 8009f0e <err_tcp+0xee>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009eba:	f104 0714 	add.w	r7, r4, #20
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f008 f972 	bl	80121a8 <sys_mbox_valid>
 8009ec4:	bb40      	cbnz	r0, 8009f18 <err_tcp+0xf8>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009ec6:	1ef3      	subs	r3, r6, #3
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d901      	bls.n	8009ed2 <err_tcp+0xb2>
 8009ece:	2e01      	cmp	r6, #1
 8009ed0:	d13b      	bne.n	8009f4a <err_tcp+0x12a>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009ed2:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009ed4:	f023 0204 	bic.w	r2, r3, #4
 8009ed8:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8009eda:	f013 0f04 	tst.w	r3, #4
 8009ede:	d111      	bne.n	8009f04 <err_tcp+0xe4>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009ee0:	6a23      	ldr	r3, [r4, #32]
 8009ee2:	b1f3      	cbz	r3, 8009f22 <err_tcp+0x102>
      if (old_state == NETCONN_CLOSE) {
 8009ee4:	2e04      	cmp	r6, #4
 8009ee6:	d024      	beq.n	8009f32 <err_tcp+0x112>
        conn->current_msg->err = err;
 8009ee8:	6a23      	ldr	r3, [r4, #32]
 8009eea:	711d      	strb	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009eec:	6a23      	ldr	r3, [r4, #32]
 8009eee:	681d      	ldr	r5, [r3, #0]
 8009ef0:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f008 f99e 	bl	8012234 <sys_sem_valid>
 8009ef8:	b1f8      	cbz	r0, 8009f3a <err_tcp+0x11a>
      conn->current_msg = NULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	6223      	str	r3, [r4, #32]
      sys_sem_signal(op_completed_sem);
 8009efe:	4628      	mov	r0, r5
 8009f00:	f008 f98e 	bl	8012220 <sys_sem_signal>
}
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009f08:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009f84 <err_tcp+0x164>
 8009f0c:	e7cf      	b.n	8009eae <err_tcp+0x8e>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009f0e:	4641      	mov	r1, r8
 8009f10:	4638      	mov	r0, r7
 8009f12:	f008 f90d 	bl	8012130 <sys_mbox_trypost>
 8009f16:	e7d0      	b.n	8009eba <err_tcp+0x9a>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009f18:	4641      	mov	r1, r8
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f008 f908 	bl	8012130 <sys_mbox_trypost>
 8009f20:	e7d1      	b.n	8009ec6 <err_tcp+0xa6>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f22:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <err_tcp+0x140>)
 8009f24:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009f28:	4911      	ldr	r1, [pc, #68]	; (8009f70 <err_tcp+0x150>)
 8009f2a:	480f      	ldr	r0, [pc, #60]	; (8009f68 <err_tcp+0x148>)
 8009f2c:	f008 fb72 	bl	8012614 <iprintf>
 8009f30:	e7d8      	b.n	8009ee4 <err_tcp+0xc4>
        conn->current_msg->err = ERR_OK;
 8009f32:	6a23      	ldr	r3, [r4, #32]
 8009f34:	2200      	movs	r2, #0
 8009f36:	711a      	strb	r2, [r3, #4]
 8009f38:	e7d8      	b.n	8009eec <err_tcp+0xcc>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009f3a:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <err_tcp+0x140>)
 8009f3c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009f40:	490c      	ldr	r1, [pc, #48]	; (8009f74 <err_tcp+0x154>)
 8009f42:	4809      	ldr	r0, [pc, #36]	; (8009f68 <err_tcp+0x148>)
 8009f44:	f008 fb66 	bl	8012614 <iprintf>
 8009f48:	e7d7      	b.n	8009efa <err_tcp+0xda>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009f4a:	6a23      	ldr	r3, [r4, #32]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0d9      	beq.n	8009f04 <err_tcp+0xe4>
 8009f50:	4b03      	ldr	r3, [pc, #12]	; (8009f60 <err_tcp+0x140>)
 8009f52:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009f56:	4908      	ldr	r1, [pc, #32]	; (8009f78 <err_tcp+0x158>)
 8009f58:	4803      	ldr	r0, [pc, #12]	; (8009f68 <err_tcp+0x148>)
 8009f5a:	f008 fb5b 	bl	8012614 <iprintf>
}
 8009f5e:	e7d1      	b.n	8009f04 <err_tcp+0xe4>
 8009f60:	08013bdc 	.word	0x08013bdc
 8009f64:	08013c74 	.word	0x08013c74
 8009f68:	0801397c 	.word	0x0801397c
 8009f6c:	08013c84 	.word	0x08013c84
 8009f70:	08013c94 	.word	0x08013c94
 8009f74:	08013cb0 	.word	0x08013cb0
 8009f78:	08013ccc 	.word	0x08013ccc
 8009f7c:	08013ffe 	.word	0x08013ffe
 8009f80:	08013ffc 	.word	0x08013ffc
 8009f84:	08013ffd 	.word	0x08013ffd

08009f88 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	b083      	sub	sp, #12
 8009f8e:	9101      	str	r1, [sp, #4]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009f90:	4604      	mov	r4, r0
 8009f92:	b1e8      	cbz	r0, 8009fd0 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009f94:	7863      	ldrb	r3, [r4, #1]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d122      	bne.n	8009fe0 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f9a:	6a23      	ldr	r3, [r4, #32]
 8009f9c:	b343      	cbz	r3, 8009ff0 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	b373      	cbz	r3, 800a000 <lwip_netconn_do_writemore+0x78>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009fa2:	6a23      	ldr	r3, [r4, #32]
 8009fa4:	699a      	ldr	r2, [r3, #24]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d231      	bcs.n	800a010 <lwip_netconn_do_writemore+0x88>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009fac:	6a23      	ldr	r3, [r4, #32]
 8009fae:	899b      	ldrh	r3, [r3, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d035      	beq.n	800a020 <lwip_netconn_do_writemore+0x98>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009fb4:	6a23      	ldr	r3, [r4, #32]
 8009fb6:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009fba:	f894 a01c 	ldrb.w	sl, [r4, #28]
 8009fbe:	f00a 0a02 	and.w	sl, sl, #2
 8009fc2:	f008 0304 	and.w	r3, r8, #4
 8009fc6:	ea4a 0a03 	orr.w	sl, sl, r3
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009fca:	f8df b220 	ldr.w	fp, [pc, #544]	; 800a1ec <lwip_netconn_do_writemore+0x264>
 8009fce:	e064      	b.n	800a09a <lwip_netconn_do_writemore+0x112>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009fd0:	4b86      	ldr	r3, [pc, #536]	; (800a1ec <lwip_netconn_do_writemore+0x264>)
 8009fd2:	f240 6273 	movw	r2, #1651	; 0x673
 8009fd6:	4986      	ldr	r1, [pc, #536]	; (800a1f0 <lwip_netconn_do_writemore+0x268>)
 8009fd8:	4886      	ldr	r0, [pc, #536]	; (800a1f4 <lwip_netconn_do_writemore+0x26c>)
 8009fda:	f008 fb1b 	bl	8012614 <iprintf>
 8009fde:	e7d9      	b.n	8009f94 <lwip_netconn_do_writemore+0xc>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009fe0:	4b82      	ldr	r3, [pc, #520]	; (800a1ec <lwip_netconn_do_writemore+0x264>)
 8009fe2:	f240 6274 	movw	r2, #1652	; 0x674
 8009fe6:	4984      	ldr	r1, [pc, #528]	; (800a1f8 <lwip_netconn_do_writemore+0x270>)
 8009fe8:	4882      	ldr	r0, [pc, #520]	; (800a1f4 <lwip_netconn_do_writemore+0x26c>)
 8009fea:	f008 fb13 	bl	8012614 <iprintf>
 8009fee:	e7d4      	b.n	8009f9a <lwip_netconn_do_writemore+0x12>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009ff0:	4b7e      	ldr	r3, [pc, #504]	; (800a1ec <lwip_netconn_do_writemore+0x264>)
 8009ff2:	f240 6275 	movw	r2, #1653	; 0x675
 8009ff6:	4981      	ldr	r1, [pc, #516]	; (800a1fc <lwip_netconn_do_writemore+0x274>)
 8009ff8:	487e      	ldr	r0, [pc, #504]	; (800a1f4 <lwip_netconn_do_writemore+0x26c>)
 8009ffa:	f008 fb0b 	bl	8012614 <iprintf>
 8009ffe:	e7ce      	b.n	8009f9e <lwip_netconn_do_writemore+0x16>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a000:	4b7a      	ldr	r3, [pc, #488]	; (800a1ec <lwip_netconn_do_writemore+0x264>)
 800a002:	f240 6276 	movw	r2, #1654	; 0x676
 800a006:	497e      	ldr	r1, [pc, #504]	; (800a200 <lwip_netconn_do_writemore+0x278>)
 800a008:	487a      	ldr	r0, [pc, #488]	; (800a1f4 <lwip_netconn_do_writemore+0x26c>)
 800a00a:	f008 fb03 	bl	8012614 <iprintf>
 800a00e:	e7c8      	b.n	8009fa2 <lwip_netconn_do_writemore+0x1a>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a010:	4b76      	ldr	r3, [pc, #472]	; (800a1ec <lwip_netconn_do_writemore+0x264>)
 800a012:	f240 6277 	movw	r2, #1655	; 0x677
 800a016:	497b      	ldr	r1, [pc, #492]	; (800a204 <lwip_netconn_do_writemore+0x27c>)
 800a018:	4876      	ldr	r0, [pc, #472]	; (800a1f4 <lwip_netconn_do_writemore+0x26c>)
 800a01a:	f008 fafb 	bl	8012614 <iprintf>
 800a01e:	e7c5      	b.n	8009fac <lwip_netconn_do_writemore+0x24>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a020:	4b72      	ldr	r3, [pc, #456]	; (800a1ec <lwip_netconn_do_writemore+0x264>)
 800a022:	f240 6279 	movw	r2, #1657	; 0x679
 800a026:	4978      	ldr	r1, [pc, #480]	; (800a208 <lwip_netconn_do_writemore+0x280>)
 800a028:	4872      	ldr	r0, [pc, #456]	; (800a1f4 <lwip_netconn_do_writemore+0x26c>)
 800a02a:	f008 faf3 	bl	8012614 <iprintf>
 800a02e:	e7c1      	b.n	8009fb4 <lwip_netconn_do_writemore+0x2c>
        len = (u16_t)diff;
 800a030:	b2ae      	uxth	r6, r5
 800a032:	e040      	b.n	800a0b6 <lwip_netconn_do_writemore+0x12e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a034:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a038:	4691      	mov	r9, r2
 800a03a:	4413      	add	r3, r2
 800a03c:	4298      	cmp	r0, r3
 800a03e:	d368      	bcc.n	800a112 <lwip_netconn_do_writemore+0x18a>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a040:	b2ad      	uxth	r5, r5
 800a042:	4295      	cmp	r5, r2
 800a044:	d070      	beq.n	800a128 <lwip_netconn_do_writemore+0x1a0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
      } else {
        write_more = 0;
 800a046:	2500      	movs	r5, #0
 800a048:	e00f      	b.n	800a06a <lwip_netconn_do_writemore+0xe2>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a04a:	46b1      	mov	r9, r6
 800a04c:	4433      	add	r3, r6
 800a04e:	4298      	cmp	r0, r3
 800a050:	d360      	bcc.n	800a114 <lwip_netconn_do_writemore+0x18c>
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a056:	429e      	cmp	r6, r3
 800a058:	d164      	bne.n	800a124 <lwip_netconn_do_writemore+0x19c>
 800a05a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a05e:	d361      	bcc.n	800a124 <lwip_netconn_do_writemore+0x19c>
 800a060:	f64f 72ff 	movw	r2, #65535	; 0xffff
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a064:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 800a068:	2501      	movs	r5, #1
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a06a:	4643      	mov	r3, r8
 800a06c:	4639      	mov	r1, r7
 800a06e:	6860      	ldr	r0, [r4, #4]
 800a070:	f005 f8b8 	bl	800f1e4 <tcp_write>
      if (err == ERR_OK) {
 800a074:	4606      	mov	r6, r0
 800a076:	2800      	cmp	r0, #0
 800a078:	d16a      	bne.n	800a150 <lwip_netconn_do_writemore+0x1c8>
        conn->current_msg->msg.w.offset += len;
 800a07a:	6a22      	ldr	r2, [r4, #32]
 800a07c:	6993      	ldr	r3, [r2, #24]
 800a07e:	444b      	add	r3, r9
 800a080:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a082:	6a22      	ldr	r2, [r4, #32]
 800a084:	6913      	ldr	r3, [r2, #16]
 800a086:	444b      	add	r3, r9
 800a088:	6113      	str	r3, [r2, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a08a:	6a23      	ldr	r3, [r4, #32]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	6919      	ldr	r1, [r3, #16]
 800a090:	6852      	ldr	r2, [r2, #4]
 800a092:	4291      	cmp	r1, r2
 800a094:	d04e      	beq.n	800a134 <lwip_netconn_do_writemore+0x1ac>
            conn->current_msg->msg.w.vector++;
            conn->current_msg->msg.w.vector_off = 0;
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a096:	2d00      	cmp	r5, #0
 800a098:	d06f      	beq.n	800a17a <lwip_netconn_do_writemore+0x1f2>
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a09a:	6a21      	ldr	r1, [r4, #32]
 800a09c:	688a      	ldr	r2, [r1, #8]
 800a09e:	690b      	ldr	r3, [r1, #16]
 800a0a0:	6817      	ldr	r7, [r2, #0]
 800a0a2:	441f      	add	r7, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a0a4:	6850      	ldr	r0, [r2, #4]
 800a0a6:	1ac5      	subs	r5, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 800a0a8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a0ac:	d3c0      	bcc.n	800a030 <lwip_netconn_do_writemore+0xa8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a0ae:	f048 0802 	orr.w	r8, r8, #2
        len = 0xffff;
 800a0b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 800a0b6:	6862      	ldr	r2, [r4, #4]
 800a0b8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
      if (available < len) {
 800a0bc:	4296      	cmp	r6, r2
 800a0be:	d9c4      	bls.n	800a04a <lwip_netconn_do_writemore+0xc2>
        if (dontblock) {
 800a0c0:	f1ba 0f00 	cmp.w	sl, #0
 800a0c4:	d0b6      	beq.n	800a034 <lwip_netconn_do_writemore+0xac>
          if (!len) {
 800a0c6:	2a00      	cmp	r2, #0
 800a0c8:	d1b6      	bne.n	800a038 <lwip_netconn_do_writemore+0xb0>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a0ca:	698b      	ldr	r3, [r1, #24]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bf0c      	ite	eq
 800a0d0:	f06f 0606 	mvneq.w	r6, #6
 800a0d4:	2600      	movne	r6, #0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a0d6:	6a23      	ldr	r3, [r4, #32]
 800a0d8:	699a      	ldr	r2, [r3, #24]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d360      	bcc.n	800a1a2 <lwip_netconn_do_writemore+0x21a>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a0e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0e2:	b11b      	cbz	r3, 800a0ec <lwip_netconn_do_writemore+0x164>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2103      	movs	r1, #3
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a0ec:	2e00      	cmp	r6, #0
 800a0ee:	d133      	bne.n	800a158 <lwip_netconn_do_writemore+0x1d0>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a0f0:	6a23      	ldr	r3, [r4, #32]
 800a0f2:	699d      	ldr	r5, [r3, #24]
 800a0f4:	695f      	ldr	r7, [r3, #20]
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a0f6:	6860      	ldr	r0, [r4, #4]
 800a0f8:	f005 fe8c 	bl	800fe14 <tcp_output>
      if (out_err == ERR_RTE) {
 800a0fc:	f110 0f04 	cmn.w	r0, #4
 800a100:	d06b      	beq.n	800a1da <lwip_netconn_do_writemore+0x252>
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
    }
  }
  if (write_finished) {
 800a102:	f1ba 0f00 	cmp.w	sl, #0
 800a106:	d12a      	bne.n	800a15e <lwip_netconn_do_writemore+0x1d6>
 800a108:	42bd      	cmp	r5, r7
 800a10a:	d028      	beq.n	800a15e <lwip_netconn_do_writemore+0x1d6>
      sys_sem_signal(op_completed_sem);
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a10c:	f04f 36ff 	mov.w	r6, #4294967295
 800a110:	e02f      	b.n	800a172 <lwip_netconn_do_writemore+0x1ea>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a112:	4616      	mov	r6, r2
 800a114:	465b      	mov	r3, fp
 800a116:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a11a:	493c      	ldr	r1, [pc, #240]	; (800a20c <lwip_netconn_do_writemore+0x284>)
 800a11c:	4835      	ldr	r0, [pc, #212]	; (800a1f4 <lwip_netconn_do_writemore+0x26c>)
 800a11e:	f008 fa79 	bl	8012614 <iprintf>
 800a122:	e796      	b.n	800a052 <lwip_netconn_do_writemore+0xca>
 800a124:	4632      	mov	r2, r6
 800a126:	e78b      	b.n	800a040 <lwip_netconn_do_writemore+0xb8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a128:	6a23      	ldr	r3, [r4, #32]
 800a12a:	899b      	ldrh	r3, [r3, #12]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d899      	bhi.n	800a064 <lwip_netconn_do_writemore+0xdc>
        write_more = 0;
 800a130:	2500      	movs	r5, #0
 800a132:	e79a      	b.n	800a06a <lwip_netconn_do_writemore+0xe2>
          conn->current_msg->msg.w.vector_cnt--;
 800a134:	899a      	ldrh	r2, [r3, #12]
 800a136:	3a01      	subs	r2, #1
 800a138:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a13a:	6a23      	ldr	r3, [r4, #32]
 800a13c:	899a      	ldrh	r2, [r3, #12]
 800a13e:	2a00      	cmp	r2, #0
 800a140:	d0a9      	beq.n	800a096 <lwip_netconn_do_writemore+0x10e>
            conn->current_msg->msg.w.vector++;
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	3208      	adds	r2, #8
 800a146:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a148:	6a23      	ldr	r3, [r4, #32]
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]
 800a14e:	e7a2      	b.n	800a096 <lwip_netconn_do_writemore+0x10e>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b01      	cmp	r3, #1
 800a156:	d910      	bls.n	800a17a <lwip_netconn_do_writemore+0x1f2>
    } else if (err == ERR_MEM) {
 800a158:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a15c:	d02c      	beq.n	800a1b8 <lwip_netconn_do_writemore+0x230>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a15e:	6a23      	ldr	r3, [r4, #32]
 800a160:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 800a162:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800a164:	2300      	movs	r3, #0
 800a166:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a168:	7063      	strb	r3, [r4, #1]
    if (delayed)
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d138      	bne.n	800a1e2 <lwip_netconn_do_writemore+0x25a>
  }
#endif
  return ERR_OK;
 800a170:	2600      	movs	r6, #0
}
 800a172:	4630      	mov	r0, r6
 800a174:	b003      	add	sp, #12
 800a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a17a:	f1ba 0f00 	cmp.w	sl, #0
 800a17e:	d10b      	bne.n	800a198 <lwip_netconn_do_writemore+0x210>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800a186:	f240 3299 	movw	r2, #921	; 0x399
 800a18a:	4291      	cmp	r1, r2
 800a18c:	d9a8      	bls.n	800a0e0 <lwip_netconn_do_writemore+0x158>
 800a18e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a192:	2b07      	cmp	r3, #7
 800a194:	d9aa      	bls.n	800a0ec <lwip_netconn_do_writemore+0x164>
 800a196:	e7a3      	b.n	800a0e0 <lwip_netconn_do_writemore+0x158>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a198:	6a23      	ldr	r3, [r4, #32]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d2ee      	bcs.n	800a180 <lwip_netconn_do_writemore+0x1f8>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a4:	b11b      	cbz	r3, 800a1ae <lwip_netconn_do_writemore+0x226>
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2103      	movs	r1, #3
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a1ae:	7f23      	ldrb	r3, [r4, #28]
 800a1b0:	f043 0310 	orr.w	r3, r3, #16
 800a1b4:	7723      	strb	r3, [r4, #28]
 800a1b6:	e799      	b.n	800a0ec <lwip_netconn_do_writemore+0x164>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a1b8:	6860      	ldr	r0, [r4, #4]
 800a1ba:	f005 fe2b 	bl	800fe14 <tcp_output>
      if (out_err == ERR_RTE) {
 800a1be:	f110 0f04 	cmn.w	r0, #4
 800a1c2:	d00c      	beq.n	800a1de <lwip_netconn_do_writemore+0x256>
      } else if (dontblock) {
 800a1c4:	f1ba 0f00 	cmp.w	sl, #0
 800a1c8:	d0d3      	beq.n	800a172 <lwip_netconn_do_writemore+0x1ea>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a1ca:	6a23      	ldr	r3, [r4, #32]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bf0c      	ite	eq
 800a1d2:	f06f 0606 	mvneq.w	r6, #6
 800a1d6:	2600      	movne	r6, #0
 800a1d8:	e7c1      	b.n	800a15e <lwip_netconn_do_writemore+0x1d6>
        err = out_err;
 800a1da:	4606      	mov	r6, r0
 800a1dc:	e7bf      	b.n	800a15e <lwip_netconn_do_writemore+0x1d6>
        err = out_err;
 800a1de:	4606      	mov	r6, r0
 800a1e0:	e7bd      	b.n	800a15e <lwip_netconn_do_writemore+0x1d6>
      sys_sem_signal(op_completed_sem);
 800a1e2:	300c      	adds	r0, #12
 800a1e4:	f008 f81c 	bl	8012220 <sys_sem_signal>
  return ERR_OK;
 800a1e8:	2600      	movs	r6, #0
 800a1ea:	e7c2      	b.n	800a172 <lwip_netconn_do_writemore+0x1ea>
 800a1ec:	08013bdc 	.word	0x08013bdc
 800a1f0:	08013c74 	.word	0x08013c74
 800a1f4:	0801397c 	.word	0x0801397c
 800a1f8:	08013ce8 	.word	0x08013ce8
 800a1fc:	08013c94 	.word	0x08013c94
 800a200:	08013d08 	.word	0x08013d08
 800a204:	08013d20 	.word	0x08013d20
 800a208:	08013d60 	.word	0x08013d60
 800a20c:	08013d88 	.word	0x08013d88

0800a210 <lwip_netconn_do_close_internal>:
{
 800a210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a214:	460f      	mov	r7, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a216:	4604      	mov	r4, r0
 800a218:	2800      	cmp	r0, #0
 800a21a:	d036      	beq.n	800a28a <lwip_netconn_do_close_internal+0x7a>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a21c:	7823      	ldrb	r3, [r4, #0]
 800a21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a222:	2b10      	cmp	r3, #16
 800a224:	d139      	bne.n	800a29a <lwip_netconn_do_close_internal+0x8a>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a226:	7863      	ldrb	r3, [r4, #1]
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d13e      	bne.n	800a2aa <lwip_netconn_do_close_internal+0x9a>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a22c:	6863      	ldr	r3, [r4, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d043      	beq.n	800a2ba <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a232:	6a23      	ldr	r3, [r4, #32]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d048      	beq.n	800a2ca <lwip_netconn_do_close_internal+0xba>
  tpcb = conn->pcb.tcp;
 800a238:	6866      	ldr	r6, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 800a23a:	6a23      	ldr	r3, [r4, #32]
 800a23c:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a23e:	f003 0801 	and.w	r8, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800a242:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800a246:	2b03      	cmp	r3, #3
 800a248:	d012      	beq.n	800a270 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_rx &&
 800a24a:	f1b8 0f00 	cmp.w	r8, #0
 800a24e:	d006      	beq.n	800a25e <lwip_netconn_do_close_internal+0x4e>
             ((tpcb->state == FIN_WAIT_1) ||
 800a250:	7d32      	ldrb	r2, [r6, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a252:	1f53      	subs	r3, r2, #5
 800a254:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 800a256:	2b01      	cmp	r3, #1
 800a258:	d90a      	bls.n	800a270 <lwip_netconn_do_close_internal+0x60>
 800a25a:	2a08      	cmp	r2, #8
 800a25c:	d008      	beq.n	800a270 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a25e:	f1b9 0f00 	cmp.w	r9, #0
 800a262:	f000 80d2 	beq.w	800a40a <lwip_netconn_do_close_internal+0x1fa>
 800a266:	8b73      	ldrh	r3, [r6, #26]
 800a268:	f013 0f10 	tst.w	r3, #16
 800a26c:	f000 80cd 	beq.w	800a40a <lwip_netconn_do_close_internal+0x1fa>
    tcp_arg(tpcb, NULL);
 800a270:	2100      	movs	r1, #0
 800a272:	4630      	mov	r0, r6
 800a274:	f002 fa50 	bl	800c718 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800a278:	f896 a014 	ldrb.w	sl, [r6, #20]
 800a27c:	f1ba 0f01 	cmp.w	sl, #1
 800a280:	f000 80b7 	beq.w	800a3f2 <lwip_netconn_do_close_internal+0x1e2>
 800a284:	f04f 0a01 	mov.w	sl, #1
 800a288:	e0c4      	b.n	800a414 <lwip_netconn_do_close_internal+0x204>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a28a:	4b6c      	ldr	r3, [pc, #432]	; (800a43c <lwip_netconn_do_close_internal+0x22c>)
 800a28c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a290:	496b      	ldr	r1, [pc, #428]	; (800a440 <lwip_netconn_do_close_internal+0x230>)
 800a292:	486c      	ldr	r0, [pc, #432]	; (800a444 <lwip_netconn_do_close_internal+0x234>)
 800a294:	f008 f9be 	bl	8012614 <iprintf>
 800a298:	e7c0      	b.n	800a21c <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a29a:	4b68      	ldr	r3, [pc, #416]	; (800a43c <lwip_netconn_do_close_internal+0x22c>)
 800a29c:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a2a0:	4969      	ldr	r1, [pc, #420]	; (800a448 <lwip_netconn_do_close_internal+0x238>)
 800a2a2:	4868      	ldr	r0, [pc, #416]	; (800a444 <lwip_netconn_do_close_internal+0x234>)
 800a2a4:	f008 f9b6 	bl	8012614 <iprintf>
 800a2a8:	e7bd      	b.n	800a226 <lwip_netconn_do_close_internal+0x16>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a2aa:	4b64      	ldr	r3, [pc, #400]	; (800a43c <lwip_netconn_do_close_internal+0x22c>)
 800a2ac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a2b0:	4966      	ldr	r1, [pc, #408]	; (800a44c <lwip_netconn_do_close_internal+0x23c>)
 800a2b2:	4864      	ldr	r0, [pc, #400]	; (800a444 <lwip_netconn_do_close_internal+0x234>)
 800a2b4:	f008 f9ae 	bl	8012614 <iprintf>
 800a2b8:	e7b8      	b.n	800a22c <lwip_netconn_do_close_internal+0x1c>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a2ba:	4b60      	ldr	r3, [pc, #384]	; (800a43c <lwip_netconn_do_close_internal+0x22c>)
 800a2bc:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a2c0:	4963      	ldr	r1, [pc, #396]	; (800a450 <lwip_netconn_do_close_internal+0x240>)
 800a2c2:	4860      	ldr	r0, [pc, #384]	; (800a444 <lwip_netconn_do_close_internal+0x234>)
 800a2c4:	f008 f9a6 	bl	8012614 <iprintf>
 800a2c8:	e7b3      	b.n	800a232 <lwip_netconn_do_close_internal+0x22>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a2ca:	4b5c      	ldr	r3, [pc, #368]	; (800a43c <lwip_netconn_do_close_internal+0x22c>)
 800a2cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a2d0:	4960      	ldr	r1, [pc, #384]	; (800a454 <lwip_netconn_do_close_internal+0x244>)
 800a2d2:	485c      	ldr	r0, [pc, #368]	; (800a444 <lwip_netconn_do_close_internal+0x234>)
 800a2d4:	f008 f99e 	bl	8012614 <iprintf>
 800a2d8:	e7ae      	b.n	800a238 <lwip_netconn_do_close_internal+0x28>
      tcp_recv(tpcb, NULL);
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f002 fa1f 	bl	800c720 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f002 fa69 	bl	800c7bc <tcp_accept>
 800a2ea:	e097      	b.n	800a41c <lwip_netconn_do_close_internal+0x20c>
      tcp_sent(tpcb, NULL);
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f002 fa30 	bl	800c754 <tcp_sent>
 800a2f4:	e096      	b.n	800a424 <lwip_netconn_do_close_internal+0x214>
      tcp_poll(tpcb, NULL, 0);
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f002 fa64 	bl	800c7c8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a300:	2100      	movs	r1, #0
 800a302:	4630      	mov	r0, r6
 800a304:	f002 fa40 	bl	800c788 <tcp_err>
      err = tcp_close(tpcb);
 800a308:	4630      	mov	r0, r6
 800a30a:	f002 fdf5 	bl	800cef8 <tcp_close>
 800a30e:	4605      	mov	r5, r0
    if (err == ERR_MEM) {
 800a310:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a314:	d022      	beq.n	800a35c <lwip_netconn_do_close_internal+0x14c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a316:	6a23      	ldr	r3, [r4, #32]
 800a318:	681e      	ldr	r6, [r3, #0]
 800a31a:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 800a31c:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a322:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800a324:	b9a5      	cbnz	r5, 800a350 <lwip_netconn_do_close_internal+0x140>
      if (shut_close) {
 800a326:	f1ba 0f00 	cmp.w	sl, #0
 800a32a:	d143      	bne.n	800a3b4 <lwip_netconn_do_close_internal+0x1a4>
      if (shut_rx) {
 800a32c:	f1b8 0f00 	cmp.w	r8, #0
 800a330:	d005      	beq.n	800a33e <lwip_netconn_do_close_internal+0x12e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a334:	b163      	cbz	r3, 800a350 <lwip_netconn_do_close_internal+0x140>
 800a336:	2200      	movs	r2, #0
 800a338:	4611      	mov	r1, r2
 800a33a:	4620      	mov	r0, r4
 800a33c:	4798      	blx	r3
      if (shut_tx) {
 800a33e:	f1b9 0f00 	cmp.w	r9, #0
 800a342:	d005      	beq.n	800a350 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a346:	b11b      	cbz	r3, 800a350 <lwip_netconn_do_close_internal+0x140>
 800a348:	2200      	movs	r2, #0
 800a34a:	2102      	movs	r1, #2
 800a34c:	4620      	mov	r0, r4
 800a34e:	4798      	blx	r3
    if (delayed)
 800a350:	2f00      	cmp	r7, #0
 800a352:	d138      	bne.n	800a3c6 <lwip_netconn_do_close_internal+0x1b6>
    return ERR_OK;
 800a354:	2500      	movs	r5, #0
}
 800a356:	4628      	mov	r0, r5
 800a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a35c:	6a23      	ldr	r3, [r4, #32]
 800a35e:	7a5a      	ldrb	r2, [r3, #9]
 800a360:	b19a      	cbz	r2, 800a38a <lwip_netconn_do_close_internal+0x17a>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a362:	7d33      	ldrb	r3, [r6, #20]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d033      	beq.n	800a3d0 <lwip_netconn_do_close_internal+0x1c0>
    if (shut_tx) {
 800a368:	f1b9 0f00 	cmp.w	r9, #0
 800a36c:	d138      	bne.n	800a3e0 <lwip_netconn_do_close_internal+0x1d0>
    tcp_poll(tpcb, poll_tcp, 1);
 800a36e:	2201      	movs	r2, #1
 800a370:	4939      	ldr	r1, [pc, #228]	; (800a458 <lwip_netconn_do_close_internal+0x248>)
 800a372:	4630      	mov	r0, r6
 800a374:	f002 fa28 	bl	800c7c8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a378:	4938      	ldr	r1, [pc, #224]	; (800a45c <lwip_netconn_do_close_internal+0x24c>)
 800a37a:	4630      	mov	r0, r6
 800a37c:	f002 fa04 	bl	800c788 <tcp_err>
    tcp_arg(tpcb, conn);
 800a380:	4621      	mov	r1, r4
 800a382:	4630      	mov	r0, r6
 800a384:	f002 f9c8 	bl	800c718 <tcp_arg>
  return err;
 800a388:	e7e5      	b.n	800a356 <lwip_netconn_do_close_internal+0x146>
        if (shut_close) {
 800a38a:	f1ba 0f00 	cmp.w	sl, #0
 800a38e:	d107      	bne.n	800a3a0 <lwip_netconn_do_close_internal+0x190>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a390:	681e      	ldr	r6, [r3, #0]
 800a392:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 800a394:	22ff      	movs	r2, #255	; 0xff
 800a396:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a39c:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800a39e:	e7d7      	b.n	800a350 <lwip_netconn_do_close_internal+0x140>
          tcp_abort(tpcb);
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f002 fb9b 	bl	800cadc <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a3a6:	6a22      	ldr	r2, [r4, #32]
 800a3a8:	6816      	ldr	r6, [r2, #0]
 800a3aa:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 800a3b0:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a3b2:	7063      	strb	r3, [r4, #1]
        conn->pcb.tcp = NULL;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a3b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ba:	b1b3      	cbz	r3, 800a3ea <lwip_netconn_do_close_internal+0x1da>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2104      	movs	r1, #4
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4798      	blx	r3
 800a3c4:	e7b2      	b.n	800a32c <lwip_netconn_do_close_internal+0x11c>
      sys_sem_signal(op_completed_sem);
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f007 ff2a 	bl	8012220 <sys_sem_signal>
    return ERR_OK;
 800a3cc:	2500      	movs	r5, #0
 800a3ce:	e7c2      	b.n	800a356 <lwip_netconn_do_close_internal+0x146>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a3d0:	4b1a      	ldr	r3, [pc, #104]	; (800a43c <lwip_netconn_do_close_internal+0x22c>)
 800a3d2:	f240 4241 	movw	r2, #1089	; 0x441
 800a3d6:	4922      	ldr	r1, [pc, #136]	; (800a460 <lwip_netconn_do_close_internal+0x250>)
 800a3d8:	481a      	ldr	r0, [pc, #104]	; (800a444 <lwip_netconn_do_close_internal+0x234>)
 800a3da:	f008 f91b 	bl	8012614 <iprintf>
 800a3de:	e7c3      	b.n	800a368 <lwip_netconn_do_close_internal+0x158>
      tcp_sent(tpcb, sent_tcp);
 800a3e0:	4920      	ldr	r1, [pc, #128]	; (800a464 <lwip_netconn_do_close_internal+0x254>)
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f002 f9b6 	bl	800c754 <tcp_sent>
 800a3e8:	e7c1      	b.n	800a36e <lwip_netconn_do_close_internal+0x15e>
      if (shut_rx) {
 800a3ea:	f1b8 0f00 	cmp.w	r8, #0
 800a3ee:	d1af      	bne.n	800a350 <lwip_netconn_do_close_internal+0x140>
 800a3f0:	e7a5      	b.n	800a33e <lwip_netconn_do_close_internal+0x12e>
    tcp_accept(tpcb, NULL);
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f002 f9e1 	bl	800c7bc <tcp_accept>
  if (shut_close) {
 800a3fa:	e785      	b.n	800a308 <lwip_netconn_do_close_internal+0xf8>
    tcp_accept(tpcb, NULL);
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4630      	mov	r0, r6
 800a400:	f002 f9dc 	bl	800c7bc <tcp_accept>
 800a404:	f04f 0a00 	mov.w	sl, #0
 800a408:	e010      	b.n	800a42c <lwip_netconn_do_close_internal+0x21c>
  if (tpcb->state == LISTEN) {
 800a40a:	7d33      	ldrb	r3, [r6, #20]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d0f5      	beq.n	800a3fc <lwip_netconn_do_close_internal+0x1ec>
 800a410:	f04f 0a00 	mov.w	sl, #0
    if (shut_rx) {
 800a414:	f1b8 0f00 	cmp.w	r8, #0
 800a418:	f47f af5f 	bne.w	800a2da <lwip_netconn_do_close_internal+0xca>
    if (shut_tx) {
 800a41c:	f1b9 0f00 	cmp.w	r9, #0
 800a420:	f47f af64 	bne.w	800a2ec <lwip_netconn_do_close_internal+0xdc>
    if (shut_close) {
 800a424:	f1ba 0f00 	cmp.w	sl, #0
 800a428:	f47f af65 	bne.w	800a2f6 <lwip_netconn_do_close_internal+0xe6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a42c:	464a      	mov	r2, r9
 800a42e:	4641      	mov	r1, r8
 800a430:	4630      	mov	r0, r6
 800a432:	f002 fe33 	bl	800d09c <tcp_shutdown>
 800a436:	4605      	mov	r5, r0
 800a438:	e76a      	b.n	800a310 <lwip_netconn_do_close_internal+0x100>
 800a43a:	bf00      	nop
 800a43c:	08013bdc 	.word	0x08013bdc
 800a440:	08013ae0 	.word	0x08013ae0
 800a444:	0801397c 	.word	0x0801397c
 800a448:	08013db4 	.word	0x08013db4
 800a44c:	08013dd4 	.word	0x08013dd4
 800a450:	08013df8 	.word	0x08013df8
 800a454:	08013c94 	.word	0x08013c94
 800a458:	0800a469 	.word	0x0800a469
 800a45c:	08009e21 	.word	0x08009e21
 800a460:	08013e0c 	.word	0x08013e0c
 800a464:	0800a4ed 	.word	0x0800a4ed

0800a468 <poll_tcp>:
{
 800a468:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a46a:	4604      	mov	r4, r0
 800a46c:	b1f8      	cbz	r0, 800a4ae <poll_tcp+0x46>
  if (conn->state == NETCONN_WRITE) {
 800a46e:	7863      	ldrb	r3, [r4, #1]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d024      	beq.n	800a4be <poll_tcp+0x56>
  } else if (conn->state == NETCONN_CLOSE) {
 800a474:	2b04      	cmp	r3, #4
 800a476:	d027      	beq.n	800a4c8 <poll_tcp+0x60>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a478:	7f23      	ldrb	r3, [r4, #28]
 800a47a:	f013 0f10 	tst.w	r3, #16
 800a47e:	d014      	beq.n	800a4aa <poll_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a480:	6862      	ldr	r2, [r4, #4]
 800a482:	b192      	cbz	r2, 800a4aa <poll_tcp+0x42>
 800a484:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 800a488:	f240 3199 	movw	r1, #921	; 0x399
 800a48c:	4288      	cmp	r0, r1
 800a48e:	d90c      	bls.n	800a4aa <poll_tcp+0x42>
 800a490:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800a494:	2a07      	cmp	r2, #7
 800a496:	d808      	bhi.n	800a4aa <poll_tcp+0x42>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a498:	f023 0310 	bic.w	r3, r3, #16
 800a49c:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a0:	b11b      	cbz	r3, 800a4aa <poll_tcp+0x42>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4798      	blx	r3
}
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <poll_tcp+0x78>)
 800a4b0:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a4b4:	490b      	ldr	r1, [pc, #44]	; (800a4e4 <poll_tcp+0x7c>)
 800a4b6:	480c      	ldr	r0, [pc, #48]	; (800a4e8 <poll_tcp+0x80>)
 800a4b8:	f008 f8ac 	bl	8012614 <iprintf>
 800a4bc:	e7d7      	b.n	800a46e <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f7ff fd61 	bl	8009f88 <lwip_netconn_do_writemore>
 800a4c6:	e7d7      	b.n	800a478 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a4c8:	6a23      	ldr	r3, [r4, #32]
 800a4ca:	b11b      	cbz	r3, 800a4d4 <poll_tcp+0x6c>
 800a4cc:	7a5a      	ldrb	r2, [r3, #9]
 800a4ce:	b10a      	cbz	r2, 800a4d4 <poll_tcp+0x6c>
      conn->current_msg->msg.sd.polls_left--;
 800a4d0:	3a01      	subs	r2, #1
 800a4d2:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7ff fe9a 	bl	800a210 <lwip_netconn_do_close_internal>
 800a4dc:	e7cc      	b.n	800a478 <poll_tcp+0x10>
 800a4de:	bf00      	nop
 800a4e0:	08013bdc 	.word	0x08013bdc
 800a4e4:	08013c74 	.word	0x08013c74
 800a4e8:	0801397c 	.word	0x0801397c

0800a4ec <sent_tcp>:
{
 800a4ec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a4ee:	b1e8      	cbz	r0, 800a52c <sent_tcp+0x40>
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	4604      	mov	r4, r0
    if (conn->state == NETCONN_WRITE) {
 800a4f4:	7843      	ldrb	r3, [r0, #1]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d021      	beq.n	800a53e <sent_tcp+0x52>
    } else if (conn->state == NETCONN_CLOSE) {
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	d024      	beq.n	800a548 <sent_tcp+0x5c>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a4fe:	6863      	ldr	r3, [r4, #4]
 800a500:	b1db      	cbz	r3, 800a53a <sent_tcp+0x4e>
 800a502:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800a506:	f240 3299 	movw	r2, #921	; 0x399
 800a50a:	4291      	cmp	r1, r2
 800a50c:	d915      	bls.n	800a53a <sent_tcp+0x4e>
 800a50e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a512:	2b07      	cmp	r3, #7
 800a514:	d811      	bhi.n	800a53a <sent_tcp+0x4e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a516:	7f23      	ldrb	r3, [r4, #28]
 800a518:	f023 0310 	bic.w	r3, r3, #16
 800a51c:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a51e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a520:	b15b      	cbz	r3, 800a53a <sent_tcp+0x4e>
 800a522:	462a      	mov	r2, r5
 800a524:	2102      	movs	r1, #2
 800a526:	4620      	mov	r0, r4
 800a528:	4798      	blx	r3
  return ERR_OK;
 800a52a:	e006      	b.n	800a53a <sent_tcp+0x4e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a52c:	4b09      	ldr	r3, [pc, #36]	; (800a554 <sent_tcp+0x68>)
 800a52e:	f240 1293 	movw	r2, #403	; 0x193
 800a532:	4909      	ldr	r1, [pc, #36]	; (800a558 <sent_tcp+0x6c>)
 800a534:	4809      	ldr	r0, [pc, #36]	; (800a55c <sent_tcp+0x70>)
 800a536:	f008 f86d 	bl	8012614 <iprintf>
}
 800a53a:	2000      	movs	r0, #0
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a53e:	2101      	movs	r1, #1
 800a540:	4620      	mov	r0, r4
 800a542:	f7ff fd21 	bl	8009f88 <lwip_netconn_do_writemore>
 800a546:	e7da      	b.n	800a4fe <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a548:	2101      	movs	r1, #1
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7ff fe60 	bl	800a210 <lwip_netconn_do_close_internal>
 800a550:	e7d5      	b.n	800a4fe <sent_tcp+0x12>
 800a552:	bf00      	nop
 800a554:	08013bdc 	.word	0x08013bdc
 800a558:	08013c74 	.word	0x08013c74
 800a55c:	0801397c 	.word	0x0801397c

0800a560 <recv_tcp>:
{
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	4604      	mov	r4, r0
 800a564:	4615      	mov	r5, r2
 800a566:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a568:	460f      	mov	r7, r1
 800a56a:	b321      	cbz	r1, 800a5b6 <recv_tcp+0x56>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a56c:	b35c      	cbz	r4, 800a5c6 <recv_tcp+0x66>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a56e:	2e00      	cmp	r6, #0
 800a570:	d150      	bne.n	800a614 <recv_tcp+0xb4>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a572:	6863      	ldr	r3, [r4, #4]
 800a574:	42bb      	cmp	r3, r7
 800a576:	d006      	beq.n	800a586 <recv_tcp+0x26>
 800a578:	4b2a      	ldr	r3, [pc, #168]	; (800a624 <recv_tcp+0xc4>)
 800a57a:	f240 1235 	movw	r2, #309	; 0x135
 800a57e:	492a      	ldr	r1, [pc, #168]	; (800a628 <recv_tcp+0xc8>)
 800a580:	482a      	ldr	r0, [pc, #168]	; (800a62c <recv_tcp+0xcc>)
 800a582:	f008 f847 	bl	8012614 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a586:	f104 0610 	add.w	r6, r4, #16
 800a58a:	4630      	mov	r0, r6
 800a58c:	f007 fe0c 	bl	80121a8 <sys_mbox_valid>
 800a590:	b370      	cbz	r0, 800a5f0 <recv_tcp+0x90>
  if (p != NULL) {
 800a592:	2d00      	cmp	r5, #0
 800a594:	d036      	beq.n	800a604 <recv_tcp+0xa4>
    len = p->tot_len;
 800a596:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a598:	4629      	mov	r1, r5
 800a59a:	4630      	mov	r0, r6
 800a59c:	f007 fdc8 	bl	8012130 <sys_mbox_trypost>
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d133      	bne.n	800a60e <recv_tcp+0xae>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a5a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a8:	b11b      	cbz	r3, 800a5b2 <recv_tcp+0x52>
 800a5aa:	463a      	mov	r2, r7
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4798      	blx	r3
}
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a5b6:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <recv_tcp+0xc4>)
 800a5b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a5bc:	491c      	ldr	r1, [pc, #112]	; (800a630 <recv_tcp+0xd0>)
 800a5be:	481b      	ldr	r0, [pc, #108]	; (800a62c <recv_tcp+0xcc>)
 800a5c0:	f008 f828 	bl	8012614 <iprintf>
 800a5c4:	e7d2      	b.n	800a56c <recv_tcp+0xc>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a5c6:	4b17      	ldr	r3, [pc, #92]	; (800a624 <recv_tcp+0xc4>)
 800a5c8:	f240 122d 	movw	r2, #301	; 0x12d
 800a5cc:	4919      	ldr	r1, [pc, #100]	; (800a634 <recv_tcp+0xd4>)
 800a5ce:	4817      	ldr	r0, [pc, #92]	; (800a62c <recv_tcp+0xcc>)
 800a5d0:	f008 f820 	bl	8012614 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a5d4:	b14e      	cbz	r6, 800a5ea <recv_tcp+0x8a>
 800a5d6:	4b13      	ldr	r3, [pc, #76]	; (800a624 <recv_tcp+0xc4>)
 800a5d8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a5dc:	4916      	ldr	r1, [pc, #88]	; (800a638 <recv_tcp+0xd8>)
 800a5de:	4813      	ldr	r0, [pc, #76]	; (800a62c <recv_tcp+0xcc>)
 800a5e0:	f008 f818 	bl	8012614 <iprintf>
    return ERR_VAL;
 800a5e4:	f06f 0505 	mvn.w	r5, #5
 800a5e8:	e7e3      	b.n	800a5b2 <recv_tcp+0x52>
 800a5ea:	f06f 0505 	mvn.w	r5, #5
 800a5ee:	e7e0      	b.n	800a5b2 <recv_tcp+0x52>
    if (p != NULL) {
 800a5f0:	b15d      	cbz	r5, 800a60a <recv_tcp+0xaa>
      tcp_recved(pcb, p->tot_len);
 800a5f2:	8929      	ldrh	r1, [r5, #8]
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f002 f819 	bl	800c62c <tcp_recved>
      pbuf_free(p);
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f001 fb98 	bl	800bd30 <pbuf_free>
    return ERR_OK;
 800a600:	2500      	movs	r5, #0
 800a602:	e7d6      	b.n	800a5b2 <recv_tcp+0x52>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a604:	4d0d      	ldr	r5, [pc, #52]	; (800a63c <recv_tcp+0xdc>)
    len = 0;
 800a606:	2700      	movs	r7, #0
 800a608:	e7c6      	b.n	800a598 <recv_tcp+0x38>
    return ERR_OK;
 800a60a:	2500      	movs	r5, #0
 800a60c:	e7d1      	b.n	800a5b2 <recv_tcp+0x52>
    return ERR_MEM;
 800a60e:	f04f 35ff 	mov.w	r5, #4294967295
 800a612:	e7ce      	b.n	800a5b2 <recv_tcp+0x52>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a614:	4b03      	ldr	r3, [pc, #12]	; (800a624 <recv_tcp+0xc4>)
 800a616:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a61a:	4907      	ldr	r1, [pc, #28]	; (800a638 <recv_tcp+0xd8>)
 800a61c:	4803      	ldr	r0, [pc, #12]	; (800a62c <recv_tcp+0xcc>)
 800a61e:	f007 fff9 	bl	8012614 <iprintf>
  if (conn == NULL) {
 800a622:	e7a6      	b.n	800a572 <recv_tcp+0x12>
 800a624:	08013bdc 	.word	0x08013bdc
 800a628:	08013e74 	.word	0x08013e74
 800a62c:	0801397c 	.word	0x0801397c
 800a630:	08013e30 	.word	0x08013e30
 800a634:	08013e54 	.word	0x08013e54
 800a638:	08013e94 	.word	0x08013e94
 800a63c:	08013ffd 	.word	0x08013ffd

0800a640 <lwip_netconn_is_err_msg>:
{
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 800a644:	460d      	mov	r5, r1
 800a646:	b151      	cbz	r1, 800a65e <lwip_netconn_is_err_msg+0x1e>
  if (msg == &netconn_aborted) {
 800a648:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <lwip_netconn_is_err_msg+0x44>)
 800a64a:	429c      	cmp	r4, r3
 800a64c:	d00e      	beq.n	800a66c <lwip_netconn_is_err_msg+0x2c>
  } else if (msg == &netconn_reset) {
 800a64e:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <lwip_netconn_is_err_msg+0x48>)
 800a650:	429c      	cmp	r4, r3
 800a652:	d00f      	beq.n	800a674 <lwip_netconn_is_err_msg+0x34>
  } else if (msg == &netconn_closed) {
 800a654:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <lwip_netconn_is_err_msg+0x4c>)
 800a656:	429c      	cmp	r4, r3
 800a658:	d010      	beq.n	800a67c <lwip_netconn_is_err_msg+0x3c>
  return 0;
 800a65a:	2000      	movs	r0, #0
}
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <lwip_netconn_is_err_msg+0x50>)
 800a660:	2285      	movs	r2, #133	; 0x85
 800a662:	490c      	ldr	r1, [pc, #48]	; (800a694 <lwip_netconn_is_err_msg+0x54>)
 800a664:	480c      	ldr	r0, [pc, #48]	; (800a698 <lwip_netconn_is_err_msg+0x58>)
 800a666:	f007 ffd5 	bl	8012614 <iprintf>
 800a66a:	e7ed      	b.n	800a648 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_ABRT;
 800a66c:	23f3      	movs	r3, #243	; 0xf3
 800a66e:	702b      	strb	r3, [r5, #0]
    return 1;
 800a670:	2001      	movs	r0, #1
 800a672:	e7f3      	b.n	800a65c <lwip_netconn_is_err_msg+0x1c>
    *err = ERR_RST;
 800a674:	23f2      	movs	r3, #242	; 0xf2
 800a676:	702b      	strb	r3, [r5, #0]
    return 1;
 800a678:	2001      	movs	r0, #1
 800a67a:	e7ef      	b.n	800a65c <lwip_netconn_is_err_msg+0x1c>
    *err = ERR_CLSD;
 800a67c:	23f1      	movs	r3, #241	; 0xf1
 800a67e:	702b      	strb	r3, [r5, #0]
    return 1;
 800a680:	2001      	movs	r0, #1
 800a682:	e7eb      	b.n	800a65c <lwip_netconn_is_err_msg+0x1c>
 800a684:	08013ffc 	.word	0x08013ffc
 800a688:	08013ffe 	.word	0x08013ffe
 800a68c:	08013ffd 	.word	0x08013ffd
 800a690:	08013bdc 	.word	0x08013bdc
 800a694:	08013eac 	.word	0x08013eac
 800a698:	0801397c 	.word	0x0801397c

0800a69c <lwip_netconn_do_newconn>:
{
 800a69c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a6a2:	6805      	ldr	r5, [r0, #0]
 800a6a4:	686b      	ldr	r3, [r5, #4]
 800a6a6:	b103      	cbz	r3, 800a6aa <lwip_netconn_do_newconn+0xe>
}
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	4604      	mov	r4, r0
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a6ac:	782b      	ldrb	r3, [r5, #0]
 800a6ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6b2:	2b10      	cmp	r3, #16
 800a6b4:	d01a      	beq.n	800a6ec <lwip_netconn_do_newconn+0x50>
 800a6b6:	2b20      	cmp	r3, #32
 800a6b8:	d123      	bne.n	800a702 <lwip_netconn_do_newconn+0x66>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	f006 f916 	bl	80108ec <udp_new_ip_type>
 800a6c0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	b15a      	cbz	r2, 800a6e0 <lwip_netconn_do_newconn+0x44>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	2b22      	cmp	r3, #34	; 0x22
 800a6cc:	d00b      	beq.n	800a6e6 <lwip_netconn_do_newconn+0x4a>
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	490d      	ldr	r1, [pc, #52]	; (800a708 <lwip_netconn_do_newconn+0x6c>)
 800a6d2:	6850      	ldr	r0, [r2, #4]
 800a6d4:	f006 f8c0 	bl	8010858 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1e3      	bne.n	800a6a8 <lwip_netconn_do_newconn+0xc>
    msg->err = ERR_MEM;
 800a6e0:	23ff      	movs	r3, #255	; 0xff
 800a6e2:	7123      	strb	r3, [r4, #4]
}
 800a6e4:	e7e0      	b.n	800a6a8 <lwip_netconn_do_newconn+0xc>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	7413      	strb	r3, [r2, #16]
 800a6ea:	e7f0      	b.n	800a6ce <lwip_netconn_do_newconn+0x32>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f002 fb39 	bl	800cd64 <tcp_new_ip_type>
 800a6f2:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	6843      	ldr	r3, [r0, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0f1      	beq.n	800a6e0 <lwip_netconn_do_newconn+0x44>
        setup_tcp(msg->conn);
 800a6fc:	f7ff fb70 	bl	8009de0 <setup_tcp>
 800a700:	e7ea      	b.n	800a6d8 <lwip_netconn_do_newconn+0x3c>
      msg->err = ERR_VAL;
 800a702:	23fa      	movs	r3, #250	; 0xfa
 800a704:	7103      	strb	r3, [r0, #4]
      return;
 800a706:	e7cf      	b.n	800a6a8 <lwip_netconn_do_newconn+0xc>
 800a708:	08009d21 	.word	0x08009d21

0800a70c <netconn_alloc>:
{
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	4605      	mov	r5, r0
 800a710:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a712:	2007      	movs	r0, #7
 800a714:	f001 f832 	bl	800b77c <memp_malloc>
  if (conn == NULL) {
 800a718:	4604      	mov	r4, r0
 800a71a:	b378      	cbz	r0, 800a77c <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 800a720:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 800a722:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800a724:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800a728:	2d10      	cmp	r5, #16
 800a72a:	d001      	beq.n	800a730 <netconn_alloc+0x24>
 800a72c:	2d20      	cmp	r5, #32
 800a72e:	d119      	bne.n	800a764 <netconn_alloc+0x58>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a730:	f104 0510 	add.w	r5, r4, #16
 800a734:	2106      	movs	r1, #6
 800a736:	4628      	mov	r0, r5
 800a738:	f007 fce4 	bl	8012104 <sys_mbox_new>
 800a73c:	b9c8      	cbnz	r0, 800a772 <netconn_alloc+0x66>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a73e:	2100      	movs	r1, #0
 800a740:	f104 000c 	add.w	r0, r4, #12
 800a744:	f007 fd38 	bl	80121b8 <sys_sem_new>
 800a748:	b9d0      	cbnz	r0, 800a780 <netconn_alloc+0x74>
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a74a:	f104 0014 	add.w	r0, r4, #20
 800a74e:	f007 fd30 	bl	80121b2 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 800a752:	2300      	movs	r3, #0
 800a754:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 800a756:	f04f 32ff 	mov.w	r2, #4294967295
 800a75a:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 800a75c:	6266      	str	r6, [r4, #36]	; 0x24
  conn->current_msg  = NULL;
 800a75e:	6223      	str	r3, [r4, #32]
  conn->flags = init_flags;
 800a760:	7723      	strb	r3, [r4, #28]
  return conn;
 800a762:	e00b      	b.n	800a77c <netconn_alloc+0x70>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a764:	4b08      	ldr	r3, [pc, #32]	; (800a788 <netconn_alloc+0x7c>)
 800a766:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a76a:	4908      	ldr	r1, [pc, #32]	; (800a78c <netconn_alloc+0x80>)
 800a76c:	4808      	ldr	r0, [pc, #32]	; (800a790 <netconn_alloc+0x84>)
 800a76e:	f007 ff51 	bl	8012614 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800a772:	4621      	mov	r1, r4
 800a774:	2007      	movs	r0, #7
 800a776:	f001 f81b 	bl	800b7b0 <memp_free>
  return NULL;
 800a77a:	2400      	movs	r4, #0
}
 800a77c:	4620      	mov	r0, r4
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
    sys_mbox_free(&conn->recvmbox);
 800a780:	4628      	mov	r0, r5
 800a782:	f007 fccc 	bl	801211e <sys_mbox_free>
    goto free_and_return;
 800a786:	e7f4      	b.n	800a772 <netconn_alloc+0x66>
 800a788:	08013bdc 	.word	0x08013bdc
 800a78c:	08013eb8 	.word	0x08013eb8
 800a790:	0801397c 	.word	0x0801397c

0800a794 <netconn_free>:
{
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a798:	6843      	ldr	r3, [r0, #4]
 800a79a:	b133      	cbz	r3, 800a7aa <netconn_free+0x16>
 800a79c:	4b16      	ldr	r3, [pc, #88]	; (800a7f8 <netconn_free+0x64>)
 800a79e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a7a2:	4916      	ldr	r1, [pc, #88]	; (800a7fc <netconn_free+0x68>)
 800a7a4:	4816      	ldr	r0, [pc, #88]	; (800a800 <netconn_free+0x6c>)
 800a7a6:	f007 ff35 	bl	8012614 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a7aa:	f104 0010 	add.w	r0, r4, #16
 800a7ae:	f007 fcfb 	bl	80121a8 <sys_mbox_valid>
 800a7b2:	b988      	cbnz	r0, 800a7d8 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a7b4:	f104 0014 	add.w	r0, r4, #20
 800a7b8:	f007 fcf6 	bl	80121a8 <sys_mbox_valid>
 800a7bc:	b9a0      	cbnz	r0, 800a7e8 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 800a7be:	f104 050c 	add.w	r5, r4, #12
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f007 fd31 	bl	801222a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f007 fd38 	bl	801223e <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	2007      	movs	r0, #7
 800a7d2:	f000 ffed 	bl	800b7b0 <memp_free>
}
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a7d8:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <netconn_free+0x64>)
 800a7da:	f240 3223 	movw	r2, #803	; 0x323
 800a7de:	4909      	ldr	r1, [pc, #36]	; (800a804 <netconn_free+0x70>)
 800a7e0:	4807      	ldr	r0, [pc, #28]	; (800a800 <netconn_free+0x6c>)
 800a7e2:	f007 ff17 	bl	8012614 <iprintf>
 800a7e6:	e7e5      	b.n	800a7b4 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a7e8:	4b03      	ldr	r3, [pc, #12]	; (800a7f8 <netconn_free+0x64>)
 800a7ea:	f240 3226 	movw	r2, #806	; 0x326
 800a7ee:	4906      	ldr	r1, [pc, #24]	; (800a808 <netconn_free+0x74>)
 800a7f0:	4803      	ldr	r0, [pc, #12]	; (800a800 <netconn_free+0x6c>)
 800a7f2:	f007 ff0f 	bl	8012614 <iprintf>
 800a7f6:	e7e2      	b.n	800a7be <netconn_free+0x2a>
 800a7f8:	08013bdc 	.word	0x08013bdc
 800a7fc:	08013ee0 	.word	0x08013ee0
 800a800:	0801397c 	.word	0x0801397c
 800a804:	08013f10 	.word	0x08013f10
 800a808:	08013f4c 	.word	0x08013f4c

0800a80c <netconn_drain>:
{
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a812:	f100 0510 	add.w	r5, r0, #16
 800a816:	4628      	mov	r0, r5
 800a818:	f007 fcc6 	bl	80121a8 <sys_mbox_valid>
 800a81c:	b950      	cbnz	r0, 800a834 <netconn_drain+0x28>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a81e:	3414      	adds	r4, #20
 800a820:	4620      	mov	r0, r4
 800a822:	f007 fcc1 	bl	80121a8 <sys_mbox_valid>
 800a826:	2800      	cmp	r0, #0
 800a828:	d044      	beq.n	800a8b4 <netconn_drain+0xa8>
            newconn->pcb.tcp = NULL;
 800a82a:	2600      	movs	r6, #0
 800a82c:	e023      	b.n	800a876 <netconn_drain+0x6a>
          netbuf_delete((struct netbuf *)mem);
 800a82e:	9801      	ldr	r0, [sp, #4]
 800a830:	f000 fad4 	bl	800addc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a834:	a901      	add	r1, sp, #4
 800a836:	4628      	mov	r0, r5
 800a838:	f007 fcab 	bl	8012192 <sys_arch_mbox_tryfetch>
 800a83c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a840:	d00f      	beq.n	800a862 <netconn_drain+0x56>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a842:	7823      	ldrb	r3, [r4, #0]
 800a844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a848:	2b10      	cmp	r3, #16
 800a84a:	d1f0      	bne.n	800a82e <netconn_drain+0x22>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a84c:	f10d 0103 	add.w	r1, sp, #3
 800a850:	9801      	ldr	r0, [sp, #4]
 800a852:	f7ff fef5 	bl	800a640 <lwip_netconn_is_err_msg>
 800a856:	2800      	cmp	r0, #0
 800a858:	d1ec      	bne.n	800a834 <netconn_drain+0x28>
            pbuf_free((struct pbuf *)mem);
 800a85a:	9801      	ldr	r0, [sp, #4]
 800a85c:	f001 fa68 	bl	800bd30 <pbuf_free>
 800a860:	e7e8      	b.n	800a834 <netconn_drain+0x28>
    sys_mbox_free(&conn->recvmbox);
 800a862:	4628      	mov	r0, r5
 800a864:	f007 fc5b 	bl	801211e <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a868:	4628      	mov	r0, r5
 800a86a:	f007 fca2 	bl	80121b2 <sys_mbox_set_invalid>
 800a86e:	e7d6      	b.n	800a81e <netconn_drain+0x12>
          netconn_free(newconn);
 800a870:	4628      	mov	r0, r5
 800a872:	f7ff ff8f 	bl	800a794 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a876:	a901      	add	r1, sp, #4
 800a878:	4620      	mov	r0, r4
 800a87a:	f007 fc8a 	bl	8012192 <sys_arch_mbox_tryfetch>
 800a87e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a882:	d011      	beq.n	800a8a8 <netconn_drain+0x9c>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a884:	f10d 0103 	add.w	r1, sp, #3
 800a888:	9801      	ldr	r0, [sp, #4]
 800a88a:	f7ff fed9 	bl	800a640 <lwip_netconn_is_err_msg>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d1f1      	bne.n	800a876 <netconn_drain+0x6a>
          struct netconn *newconn = (struct netconn *)mem;
 800a892:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 800a894:	4628      	mov	r0, r5
 800a896:	f7ff ffb9 	bl	800a80c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a89a:	6868      	ldr	r0, [r5, #4]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d0e7      	beq.n	800a870 <netconn_drain+0x64>
            tcp_abort(newconn->pcb.tcp);
 800a8a0:	f002 f91c 	bl	800cadc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a8a4:	606e      	str	r6, [r5, #4]
 800a8a6:	e7e3      	b.n	800a870 <netconn_drain+0x64>
    sys_mbox_free(&conn->acceptmbox);
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f007 fc38 	bl	801211e <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f007 fc7f 	bl	80121b2 <sys_mbox_set_invalid>
}
 800a8b4:	b002      	add	sp, #8
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}

0800a8b8 <accept_function>:
{
 800a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d06e      	beq.n	800a99c <accept_function+0xe4>
 800a8be:	460d      	mov	r5, r1
 800a8c0:	4616      	mov	r6, r2
 800a8c2:	4604      	mov	r4, r0
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a8c4:	f100 0714 	add.w	r7, r0, #20
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f007 fc6d 	bl	80121a8 <sys_mbox_valid>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d067      	beq.n	800a9a2 <accept_function+0xea>
  if (newpcb == NULL) {
 800a8d2:	b1bd      	cbz	r5, 800a904 <accept_function+0x4c>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a8d4:	bb36      	cbnz	r6, 800a924 <accept_function+0x6c>
  newconn = netconn_alloc(conn->type, conn->callback);
 800a8d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8d8:	7820      	ldrb	r0, [r4, #0]
 800a8da:	f7ff ff17 	bl	800a70c <netconn_alloc>
  if (newconn == NULL) {
 800a8de:	4606      	mov	r6, r0
 800a8e0:	b340      	cbz	r0, 800a934 <accept_function+0x7c>
  newconn->pcb.tcp = newpcb;
 800a8e2:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 800a8e4:	f7ff fa7c 	bl	8009de0 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	f007 fc20 	bl	8012130 <sys_mbox_trypost>
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	bb68      	cbnz	r0, 800a950 <accept_function+0x98>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f6:	b11b      	cbz	r3, 800a900 <accept_function+0x48>
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	4798      	blx	r3
}
 800a900:	4628      	mov	r0, r5
 800a902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a904:	492e      	ldr	r1, [pc, #184]	; (800a9c0 <accept_function+0x108>)
 800a906:	4638      	mov	r0, r7
 800a908:	f007 fc12 	bl	8012130 <sys_mbox_trypost>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d14b      	bne.n	800a9a8 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a912:	2b00      	cmp	r3, #0
 800a914:	d04b      	beq.n	800a9ae <accept_function+0xf6>
 800a916:	2200      	movs	r2, #0
 800a918:	4611      	mov	r1, r2
 800a91a:	4620      	mov	r0, r4
 800a91c:	4798      	blx	r3
    return ERR_VAL;
 800a91e:	f06f 0505 	mvn.w	r5, #5
 800a922:	e7ed      	b.n	800a900 <accept_function+0x48>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a924:	4b27      	ldr	r3, [pc, #156]	; (800a9c4 <accept_function+0x10c>)
 800a926:	f240 222a 	movw	r2, #554	; 0x22a
 800a92a:	4927      	ldr	r1, [pc, #156]	; (800a9c8 <accept_function+0x110>)
 800a92c:	4827      	ldr	r0, [pc, #156]	; (800a9cc <accept_function+0x114>)
 800a92e:	f007 fe71 	bl	8012614 <iprintf>
 800a932:	e7d0      	b.n	800a8d6 <accept_function+0x1e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a934:	4922      	ldr	r1, [pc, #136]	; (800a9c0 <accept_function+0x108>)
 800a936:	4638      	mov	r0, r7
 800a938:	f007 fbfa 	bl	8012130 <sys_mbox_trypost>
 800a93c:	bbd0      	cbnz	r0, 800a9b4 <accept_function+0xfc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a940:	b3db      	cbz	r3, 800a9ba <accept_function+0x102>
 800a942:	2200      	movs	r2, #0
 800a944:	4611      	mov	r1, r2
 800a946:	4620      	mov	r0, r4
 800a948:	4798      	blx	r3
    return ERR_MEM;
 800a94a:	f04f 35ff 	mov.w	r5, #4294967295
 800a94e:	e7d7      	b.n	800a900 <accept_function+0x48>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a950:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 800a952:	2100      	movs	r1, #0
 800a954:	4620      	mov	r0, r4
 800a956:	f001 fedf 	bl	800c718 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a95a:	2100      	movs	r1, #0
 800a95c:	4620      	mov	r0, r4
 800a95e:	f001 fedf 	bl	800c720 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a962:	2100      	movs	r1, #0
 800a964:	4620      	mov	r0, r4
 800a966:	f001 fef5 	bl	800c754 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a96a:	2200      	movs	r2, #0
 800a96c:	4611      	mov	r1, r2
 800a96e:	4620      	mov	r0, r4
 800a970:	f001 ff2a 	bl	800c7c8 <tcp_poll>
    tcp_err(pcb, NULL);
 800a974:	2100      	movs	r1, #0
 800a976:	4620      	mov	r0, r4
 800a978:	f001 ff06 	bl	800c788 <tcp_err>
    newconn->pcb.tcp = NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800a980:	f106 0410 	add.w	r4, r6, #16
 800a984:	4620      	mov	r0, r4
 800a986:	f007 fbca 	bl	801211e <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a98a:	4620      	mov	r0, r4
 800a98c:	f007 fc11 	bl	80121b2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a990:	4630      	mov	r0, r6
 800a992:	f7ff feff 	bl	800a794 <netconn_free>
    return ERR_MEM;
 800a996:	f04f 35ff 	mov.w	r5, #4294967295
 800a99a:	e7b1      	b.n	800a900 <accept_function+0x48>
    return ERR_VAL;
 800a99c:	f06f 0505 	mvn.w	r5, #5
 800a9a0:	e7ae      	b.n	800a900 <accept_function+0x48>
    return ERR_VAL;
 800a9a2:	f06f 0505 	mvn.w	r5, #5
 800a9a6:	e7ab      	b.n	800a900 <accept_function+0x48>
    return ERR_VAL;
 800a9a8:	f06f 0505 	mvn.w	r5, #5
 800a9ac:	e7a8      	b.n	800a900 <accept_function+0x48>
 800a9ae:	f06f 0505 	mvn.w	r5, #5
 800a9b2:	e7a5      	b.n	800a900 <accept_function+0x48>
    return ERR_MEM;
 800a9b4:	f04f 35ff 	mov.w	r5, #4294967295
 800a9b8:	e7a2      	b.n	800a900 <accept_function+0x48>
 800a9ba:	f04f 35ff 	mov.w	r5, #4294967295
 800a9be:	e79f      	b.n	800a900 <accept_function+0x48>
 800a9c0:	08013ffc 	.word	0x08013ffc
 800a9c4:	08013bdc 	.word	0x08013bdc
 800a9c8:	08013f88 	.word	0x08013f88
 800a9cc:	0801397c 	.word	0x0801397c

0800a9d0 <lwip_netconn_do_delconn>:
{
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800a9d4:	6803      	ldr	r3, [r0, #0]
 800a9d6:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a9d8:	b155      	cbz	r5, 800a9f0 <lwip_netconn_do_delconn+0x20>
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9e0:	2b10      	cmp	r3, #16
 800a9e2:	d12a      	bne.n	800aa3a <lwip_netconn_do_delconn+0x6a>
       (state != NETCONN_LISTEN) &&
 800a9e4:	1eab      	subs	r3, r5, #2
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d833      	bhi.n	800aa54 <lwip_netconn_do_delconn+0x84>
       (state != NETCONN_CONNECT)) ||
 800a9ec:	2d03      	cmp	r5, #3
 800a9ee:	d02c      	beq.n	800aa4a <lwip_netconn_do_delconn+0x7a>
    msg->err = ERR_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 800a9f4:	6820      	ldr	r0, [r4, #0]
 800a9f6:	f7ff ff09 	bl	800a80c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800a9fa:	6822      	ldr	r2, [r4, #0]
 800a9fc:	6851      	ldr	r1, [r2, #4]
 800a9fe:	b179      	cbz	r1, 800aa20 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa00:	7813      	ldrb	r3, [r2, #0]
 800aa02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa06:	2b10      	cmp	r3, #16
 800aa08:	d02b      	beq.n	800aa62 <lwip_netconn_do_delconn+0x92>
 800aa0a:	2b20      	cmp	r3, #32
 800aa0c:	d105      	bne.n	800aa1a <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61cb      	str	r3, [r1, #28]
          udp_remove(msg->conn->pcb.udp);
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	6858      	ldr	r0, [r3, #4]
 800aa16:	f005 ff33 	bl	8010880 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa24:	b1c3      	cbz	r3, 800aa58 <lwip_netconn_do_delconn+0x88>
 800aa26:	2200      	movs	r2, #0
 800aa28:	4611      	mov	r1, r2
 800aa2a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa30:	b193      	cbz	r3, 800aa58 <lwip_netconn_do_delconn+0x88>
 800aa32:	2200      	movs	r2, #0
 800aa34:	2102      	movs	r1, #2
 800aa36:	4798      	blx	r3
 800aa38:	e00e      	b.n	800aa58 <lwip_netconn_do_delconn+0x88>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800aa3a:	4b27      	ldr	r3, [pc, #156]	; (800aad8 <lwip_netconn_do_delconn+0x108>)
 800aa3c:	f240 425e 	movw	r2, #1118	; 0x45e
 800aa40:	4926      	ldr	r1, [pc, #152]	; (800aadc <lwip_netconn_do_delconn+0x10c>)
 800aa42:	4827      	ldr	r0, [pc, #156]	; (800aae0 <lwip_netconn_do_delconn+0x110>)
 800aa44:	f007 fde6 	bl	8012614 <iprintf>
 800aa48:	e7cc      	b.n	800a9e4 <lwip_netconn_do_delconn+0x14>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	7f1b      	ldrb	r3, [r3, #28]
 800aa4e:	f013 0f04 	tst.w	r3, #4
 800aa52:	d1cd      	bne.n	800a9f0 <lwip_netconn_do_delconn+0x20>
    msg->err = ERR_INPROGRESS;
 800aa54:	23fb      	movs	r3, #251	; 0xfb
 800aa56:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aa58:	6820      	ldr	r0, [r4, #0]
 800aa5a:	300c      	adds	r0, #12
 800aa5c:	f007 fbea 	bl	8012234 <sys_sem_valid>
}
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa62:	6a13      	ldr	r3, [r2, #32]
 800aa64:	b133      	cbz	r3, 800aa74 <lwip_netconn_do_delconn+0xa4>
 800aa66:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <lwip_netconn_do_delconn+0x108>)
 800aa68:	f240 4294 	movw	r2, #1172	; 0x494
 800aa6c:	491d      	ldr	r1, [pc, #116]	; (800aae4 <lwip_netconn_do_delconn+0x114>)
 800aa6e:	481c      	ldr	r0, [pc, #112]	; (800aae0 <lwip_netconn_do_delconn+0x110>)
 800aa70:	f007 fdd0 	bl	8012614 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	2204      	movs	r2, #4
 800aa78:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	621c      	str	r4, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa82:	2100      	movs	r1, #0
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	f7ff fbc3 	bl	800a210 <lwip_netconn_do_close_internal>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d0e8      	beq.n	800aa60 <lwip_netconn_do_delconn+0x90>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	785b      	ldrb	r3, [r3, #1]
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	d117      	bne.n	800aac6 <lwip_netconn_do_delconn+0xf6>
            UNLOCK_TCPIP_CORE();
 800aa96:	4d14      	ldr	r5, [pc, #80]	; (800aae8 <lwip_netconn_do_delconn+0x118>)
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f007 fbef 	bl	801227c <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aa9e:	6820      	ldr	r0, [r4, #0]
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	300c      	adds	r0, #12
 800aaa4:	f007 fb9d 	bl	80121e2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f007 fbe0 	bl	801226e <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0d4      	beq.n	800aa60 <lwip_netconn_do_delconn+0x90>
 800aab6:	4b08      	ldr	r3, [pc, #32]	; (800aad8 <lwip_netconn_do_delconn+0x108>)
 800aab8:	f240 429e 	movw	r2, #1182	; 0x49e
 800aabc:	490b      	ldr	r1, [pc, #44]	; (800aaec <lwip_netconn_do_delconn+0x11c>)
 800aabe:	4808      	ldr	r0, [pc, #32]	; (800aae0 <lwip_netconn_do_delconn+0x110>)
 800aac0:	f007 fda8 	bl	8012614 <iprintf>
 800aac4:	e7cc      	b.n	800aa60 <lwip_netconn_do_delconn+0x90>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aac6:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <lwip_netconn_do_delconn+0x108>)
 800aac8:	f240 429a 	movw	r2, #1178	; 0x49a
 800aacc:	4907      	ldr	r1, [pc, #28]	; (800aaec <lwip_netconn_do_delconn+0x11c>)
 800aace:	4804      	ldr	r0, [pc, #16]	; (800aae0 <lwip_netconn_do_delconn+0x110>)
 800aad0:	f007 fda0 	bl	8012614 <iprintf>
 800aad4:	e7df      	b.n	800aa96 <lwip_netconn_do_delconn+0xc6>
 800aad6:	bf00      	nop
 800aad8:	08013bdc 	.word	0x08013bdc
 800aadc:	08013fb0 	.word	0x08013fb0
 800aae0:	0801397c 	.word	0x0801397c
 800aae4:	08013fc4 	.word	0x08013fc4
 800aae8:	20016174 	.word	0x20016174
 800aaec:	08013fe0 	.word	0x08013fe0

0800aaf0 <lwip_netconn_do_bind>:
{
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800aaf4:	6803      	ldr	r3, [r0, #0]
 800aaf6:	6858      	ldr	r0, [r3, #4]
 800aaf8:	b180      	cbz	r0, 800ab1c <lwip_netconn_do_bind+0x2c>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab00:	2b10      	cmp	r3, #16
 800ab02:	d006      	beq.n	800ab12 <lwip_netconn_do_bind+0x22>
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d10c      	bne.n	800ab22 <lwip_netconn_do_bind+0x32>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab08:	89a2      	ldrh	r2, [r4, #12]
 800ab0a:	68a1      	ldr	r1, [r4, #8]
 800ab0c:	f005 fe20 	bl	8010750 <udp_bind>
        break;
 800ab10:	e009      	b.n	800ab26 <lwip_netconn_do_bind+0x36>
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab12:	89a2      	ldrh	r2, [r4, #12]
 800ab14:	68a1      	ldr	r1, [r4, #8]
 800ab16:	f001 fc89 	bl	800c42c <tcp_bind>
        break;
 800ab1a:	e004      	b.n	800ab26 <lwip_netconn_do_bind+0x36>
    err = ERR_VAL;
 800ab1c:	f06f 0005 	mvn.w	r0, #5
 800ab20:	e001      	b.n	800ab26 <lwip_netconn_do_bind+0x36>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab22:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800ab26:	7120      	strb	r0, [r4, #4]
}
 800ab28:	bd10      	pop	{r4, pc}
	...

0800ab2c <lwip_netconn_do_listen>:
{
 800ab2c:	b530      	push	{r4, r5, lr}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800ab32:	6803      	ldr	r3, [r0, #0]
 800ab34:	6858      	ldr	r0, [r3, #4]
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d05b      	beq.n	800abf2 <lwip_netconn_do_listen+0xc6>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ab40:	2a10      	cmp	r2, #16
 800ab42:	d007      	beq.n	800ab54 <lwip_netconn_do_listen+0x28>
      err = ERR_ARG;
 800ab44:	23f0      	movs	r3, #240	; 0xf0
 800ab46:	f88d 3007 	strb.w	r3, [sp, #7]
  msg->err = err;
 800ab4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab4e:	7123      	strb	r3, [r4, #4]
}
 800ab50:	b003      	add	sp, #12
 800ab52:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 800ab54:	785b      	ldrb	r3, [r3, #1]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d144      	bne.n	800abe4 <lwip_netconn_do_listen+0xb8>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ab5a:	7d03      	ldrb	r3, [r0, #20]
 800ab5c:	b11b      	cbz	r3, 800ab66 <lwip_netconn_do_listen+0x3a>
          err = ERR_VAL;
 800ab5e:	23fa      	movs	r3, #250	; 0xfa
 800ab60:	f88d 3007 	strb.w	r3, [sp, #7]
 800ab64:	e7f1      	b.n	800ab4a <lwip_netconn_do_listen+0x1e>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ab66:	f10d 0207 	add.w	r2, sp, #7
 800ab6a:	21ff      	movs	r1, #255	; 0xff
 800ab6c:	f001 fcbc 	bl	800c4e8 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800ab70:	4605      	mov	r5, r0
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d0e9      	beq.n	800ab4a <lwip_netconn_do_listen+0x1e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ab76:	6820      	ldr	r0, [r4, #0]
 800ab78:	3010      	adds	r0, #16
 800ab7a:	f007 fb15 	bl	80121a8 <sys_mbox_valid>
 800ab7e:	b9c8      	cbnz	r0, 800abb4 <lwip_netconn_do_listen+0x88>
            err = ERR_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ab86:	6820      	ldr	r0, [r4, #0]
 800ab88:	3014      	adds	r0, #20
 800ab8a:	f007 fb0d 	bl	80121a8 <sys_mbox_valid>
 800ab8e:	b1d0      	cbz	r0, 800abc6 <lwip_netconn_do_listen+0x9a>
            if (err == ERR_OK) {
 800ab90:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800ab94:	b9fb      	cbnz	r3, 800abd6 <lwip_netconn_do_listen+0xaa>
              msg->conn->state = NETCONN_LISTEN;
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	605d      	str	r5, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800aba0:	6821      	ldr	r1, [r4, #0]
 800aba2:	6848      	ldr	r0, [r1, #4]
 800aba4:	f001 fdb8 	bl	800c718 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	4914      	ldr	r1, [pc, #80]	; (800abfc <lwip_netconn_do_listen+0xd0>)
 800abac:	6858      	ldr	r0, [r3, #4]
 800abae:	f001 fe05 	bl	800c7bc <tcp_accept>
 800abb2:	e7ca      	b.n	800ab4a <lwip_netconn_do_listen+0x1e>
              sys_mbox_free(&msg->conn->recvmbox);
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	3010      	adds	r0, #16
 800abb8:	f007 fab1 	bl	801211e <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	3010      	adds	r0, #16
 800abc0:	f007 faf7 	bl	80121b2 <sys_mbox_set_invalid>
 800abc4:	e7dc      	b.n	800ab80 <lwip_netconn_do_listen+0x54>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800abc6:	6820      	ldr	r0, [r4, #0]
 800abc8:	2106      	movs	r1, #6
 800abca:	3014      	adds	r0, #20
 800abcc:	f007 fa9a 	bl	8012104 <sys_mbox_new>
 800abd0:	f88d 0007 	strb.w	r0, [sp, #7]
 800abd4:	e7dc      	b.n	800ab90 <lwip_netconn_do_listen+0x64>
              tcp_close(lpcb);
 800abd6:	4628      	mov	r0, r5
 800abd8:	f002 f98e 	bl	800cef8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	2200      	movs	r2, #0
 800abe0:	605a      	str	r2, [r3, #4]
 800abe2:	e7b2      	b.n	800ab4a <lwip_netconn_do_listen+0x1e>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800abe4:	2b02      	cmp	r3, #2
        err = ERR_OK;
 800abe6:	bf0c      	ite	eq
 800abe8:	2300      	moveq	r3, #0
        err = ERR_CONN;
 800abea:	23f5      	movne	r3, #245	; 0xf5
 800abec:	f88d 3007 	strb.w	r3, [sp, #7]
 800abf0:	e7ab      	b.n	800ab4a <lwip_netconn_do_listen+0x1e>
    err = ERR_CONN;
 800abf2:	23f5      	movs	r3, #245	; 0xf5
 800abf4:	f88d 3007 	strb.w	r3, [sp, #7]
 800abf8:	e7a7      	b.n	800ab4a <lwip_netconn_do_listen+0x1e>
 800abfa:	bf00      	nop
 800abfc:	0800a8b9 	.word	0x0800a8b9

0800ac00 <lwip_netconn_do_recv>:
{
 800ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ac06:	6803      	ldr	r3, [r0, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	b12a      	cbz	r2, 800ac18 <lwip_netconn_do_recv+0x18>
 800ac0c:	4606      	mov	r6, r0
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac14:	2b10      	cmp	r3, #16
 800ac16:	d000      	beq.n	800ac1a <lwip_netconn_do_recv+0x1a>
}
 800ac18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 800ac1a:	6884      	ldr	r4, [r0, #8]
 800ac1c:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ac20:	4625      	mov	r5, r4
 800ac22:	42bc      	cmp	r4, r7
 800ac24:	bf28      	it	cs
 800ac26:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ac28:	6833      	ldr	r3, [r6, #0]
 800ac2a:	b2a9      	uxth	r1, r5
 800ac2c:	6858      	ldr	r0, [r3, #4]
 800ac2e:	f001 fcfd 	bl	800c62c <tcp_recved>
      } while (remaining != 0);
 800ac32:	1b64      	subs	r4, r4, r5
 800ac34:	d1f4      	bne.n	800ac20 <lwip_netconn_do_recv+0x20>
 800ac36:	e7ef      	b.n	800ac18 <lwip_netconn_do_recv+0x18>

0800ac38 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800ac3c:	6800      	ldr	r0, [r0, #0]
 800ac3e:	f7fe fec3 	bl	80099c8 <netconn_err>
  if (err == ERR_OK) {
 800ac42:	4603      	mov	r3, r0
 800ac44:	b938      	cbnz	r0, 800ac56 <lwip_netconn_do_write+0x1e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ac46:	6822      	ldr	r2, [r4, #0]
 800ac48:	7813      	ldrb	r3, [r2, #0]
 800ac4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac4e:	2b10      	cmp	r3, #16
 800ac50:	d003      	beq.n	800ac5a <lwip_netconn_do_write+0x22>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ac52:	f06f 0305 	mvn.w	r3, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ac56:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac58:	bd38      	pop	{r3, r4, r5, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800ac5a:	7853      	ldrb	r3, [r2, #1]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d144      	bne.n	800acea <lwip_netconn_do_write+0xb2>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ac60:	6853      	ldr	r3, [r2, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d044      	beq.n	800acf0 <lwip_netconn_do_write+0xb8>
        msg->conn->state = NETCONN_WRITE;
 800ac66:	2301      	movs	r3, #1
 800ac68:	7053      	strb	r3, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	b133      	cbz	r3, 800ac7e <lwip_netconn_do_write+0x46>
 800ac70:	4b21      	ldr	r3, [pc, #132]	; (800acf8 <lwip_netconn_do_write+0xc0>)
 800ac72:	f240 7223 	movw	r2, #1827	; 0x723
 800ac76:	4921      	ldr	r1, [pc, #132]	; (800acfc <lwip_netconn_do_write+0xc4>)
 800ac78:	4821      	ldr	r0, [pc, #132]	; (800ad00 <lwip_netconn_do_write+0xc8>)
 800ac7a:	f007 fccb 	bl	8012614 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ac7e:	6963      	ldr	r3, [r4, #20]
 800ac80:	b31b      	cbz	r3, 800acca <lwip_netconn_do_write+0x92>
        msg->conn->current_msg = msg;
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	621c      	str	r4, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ac86:	2100      	movs	r1, #0
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	f7ff f97d 	bl	8009f88 <lwip_netconn_do_writemore>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d0e2      	beq.n	800ac58 <lwip_netconn_do_write+0x20>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d11f      	bne.n	800acda <lwip_netconn_do_write+0xa2>
          UNLOCK_TCPIP_CORE();
 800ac9a:	4d1a      	ldr	r5, [pc, #104]	; (800ad04 <lwip_netconn_do_write+0xcc>)
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f007 faed 	bl	801227c <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aca2:	6820      	ldr	r0, [r4, #0]
 800aca4:	2100      	movs	r1, #0
 800aca6:	300c      	adds	r0, #12
 800aca8:	f007 fa9b 	bl	80121e2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800acac:	4628      	mov	r0, r5
 800acae:	f007 fade 	bl	801226e <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	785b      	ldrb	r3, [r3, #1]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d1ce      	bne.n	800ac58 <lwip_netconn_do_write+0x20>
 800acba:	4b0f      	ldr	r3, [pc, #60]	; (800acf8 <lwip_netconn_do_write+0xc0>)
 800acbc:	f240 722c 	movw	r2, #1836	; 0x72c
 800acc0:	4911      	ldr	r1, [pc, #68]	; (800ad08 <lwip_netconn_do_write+0xd0>)
 800acc2:	480f      	ldr	r0, [pc, #60]	; (800ad00 <lwip_netconn_do_write+0xc8>)
 800acc4:	f007 fca6 	bl	8012614 <iprintf>
 800acc8:	e7c6      	b.n	800ac58 <lwip_netconn_do_write+0x20>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <lwip_netconn_do_write+0xc0>)
 800accc:	f240 7224 	movw	r2, #1828	; 0x724
 800acd0:	490e      	ldr	r1, [pc, #56]	; (800ad0c <lwip_netconn_do_write+0xd4>)
 800acd2:	480b      	ldr	r0, [pc, #44]	; (800ad00 <lwip_netconn_do_write+0xc8>)
 800acd4:	f007 fc9e 	bl	8012614 <iprintf>
 800acd8:	e7d3      	b.n	800ac82 <lwip_netconn_do_write+0x4a>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800acda:	4b07      	ldr	r3, [pc, #28]	; (800acf8 <lwip_netconn_do_write+0xc0>)
 800acdc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ace0:	4909      	ldr	r1, [pc, #36]	; (800ad08 <lwip_netconn_do_write+0xd0>)
 800ace2:	4807      	ldr	r0, [pc, #28]	; (800ad00 <lwip_netconn_do_write+0xc8>)
 800ace4:	f007 fc96 	bl	8012614 <iprintf>
 800ace8:	e7d7      	b.n	800ac9a <lwip_netconn_do_write+0x62>
        err = ERR_INPROGRESS;
 800acea:	f06f 0304 	mvn.w	r3, #4
 800acee:	e7b2      	b.n	800ac56 <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 800acf0:	f06f 030a 	mvn.w	r3, #10
 800acf4:	e7af      	b.n	800ac56 <lwip_netconn_do_write+0x1e>
 800acf6:	bf00      	nop
 800acf8:	08013bdc 	.word	0x08013bdc
 800acfc:	08013fc4 	.word	0x08013fc4
 800ad00:	0801397c 	.word	0x0801397c
 800ad04:	20016174 	.word	0x20016174
 800ad08:	08013fe0 	.word	0x08013fe0
 800ad0c:	08013fe8 	.word	0x08013fe8

0800ad10 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ad14:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ad16:	6843      	ldr	r3, [r0, #4]
 800ad18:	b123      	cbz	r3, 800ad24 <lwip_netconn_do_close+0x14>
 800ad1a:	7803      	ldrb	r3, [r0, #0]
 800ad1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d002      	beq.n	800ad2a <lwip_netconn_do_close+0x1a>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ad24:	23f5      	movs	r3, #245	; 0xf5
 800ad26:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ad28:	bd38      	pop	{r3, r4, r5, pc}
  enum netconn_state state = msg->conn->state;
 800ad2a:	7843      	ldrb	r3, [r0, #1]
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ad2c:	7a22      	ldrb	r2, [r4, #8]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d101      	bne.n	800ad36 <lwip_netconn_do_close+0x26>
 800ad32:	2a03      	cmp	r2, #3
 800ad34:	d1f6      	bne.n	800ad24 <lwip_netconn_do_close+0x14>
    if (state == NETCONN_CONNECT) {
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d004      	beq.n	800ad44 <lwip_netconn_do_close+0x34>
    } else if (state == NETCONN_WRITE) {
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d105      	bne.n	800ad4a <lwip_netconn_do_close+0x3a>
      msg->err = ERR_INPROGRESS;
 800ad3e:	23fb      	movs	r3, #251	; 0xfb
 800ad40:	7123      	strb	r3, [r4, #4]
 800ad42:	e7f1      	b.n	800ad28 <lwip_netconn_do_close+0x18>
      msg->err = ERR_CONN;
 800ad44:	23f5      	movs	r3, #245	; 0xf5
 800ad46:	7123      	strb	r3, [r4, #4]
 800ad48:	e7ee      	b.n	800ad28 <lwip_netconn_do_close+0x18>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ad4a:	f012 0f01 	tst.w	r2, #1
 800ad4e:	d130      	bne.n	800adb2 <lwip_netconn_do_close+0xa2>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	b133      	cbz	r3, 800ad64 <lwip_netconn_do_close+0x54>
 800ad56:	4b1c      	ldr	r3, [pc, #112]	; (800adc8 <lwip_netconn_do_close+0xb8>)
 800ad58:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ad5c:	491b      	ldr	r1, [pc, #108]	; (800adcc <lwip_netconn_do_close+0xbc>)
 800ad5e:	481c      	ldr	r0, [pc, #112]	; (800add0 <lwip_netconn_do_close+0xc0>)
 800ad60:	f007 fc58 	bl	8012614 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	2204      	movs	r2, #4
 800ad68:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	621c      	str	r4, [r3, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ad6e:	2100      	movs	r1, #0
 800ad70:	6820      	ldr	r0, [r4, #0]
 800ad72:	f7ff fa4d 	bl	800a210 <lwip_netconn_do_close_internal>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d0d6      	beq.n	800ad28 <lwip_netconn_do_close+0x18>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	785b      	ldrb	r3, [r3, #1]
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d11a      	bne.n	800adb8 <lwip_netconn_do_close+0xa8>
        UNLOCK_TCPIP_CORE();
 800ad82:	4d14      	ldr	r5, [pc, #80]	; (800add4 <lwip_netconn_do_close+0xc4>)
 800ad84:	4628      	mov	r0, r5
 800ad86:	f007 fa79 	bl	801227c <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	300c      	adds	r0, #12
 800ad90:	f007 fa27 	bl	80121e2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ad94:	4628      	mov	r0, r5
 800ad96:	f007 fa6a 	bl	801226e <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	785b      	ldrb	r3, [r3, #1]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0c2      	beq.n	800ad28 <lwip_netconn_do_close+0x18>
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <lwip_netconn_do_close+0xb8>)
 800ada4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ada8:	490b      	ldr	r1, [pc, #44]	; (800add8 <lwip_netconn_do_close+0xc8>)
 800adaa:	4809      	ldr	r0, [pc, #36]	; (800add0 <lwip_netconn_do_close+0xc0>)
 800adac:	f007 fc32 	bl	8012614 <iprintf>
 800adb0:	e7ba      	b.n	800ad28 <lwip_netconn_do_close+0x18>
        netconn_drain(msg->conn);
 800adb2:	f7ff fd2b 	bl	800a80c <netconn_drain>
 800adb6:	e7cb      	b.n	800ad50 <lwip_netconn_do_close+0x40>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800adb8:	4b03      	ldr	r3, [pc, #12]	; (800adc8 <lwip_netconn_do_close+0xb8>)
 800adba:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800adbe:	4906      	ldr	r1, [pc, #24]	; (800add8 <lwip_netconn_do_close+0xc8>)
 800adc0:	4803      	ldr	r0, [pc, #12]	; (800add0 <lwip_netconn_do_close+0xc0>)
 800adc2:	f007 fc27 	bl	8012614 <iprintf>
 800adc6:	e7dc      	b.n	800ad82 <lwip_netconn_do_close+0x72>
 800adc8:	08013bdc 	.word	0x08013bdc
 800adcc:	08013fc4 	.word	0x08013fc4
 800add0:	0801397c 	.word	0x0801397c
 800add4:	20016174 	.word	0x20016174
 800add8:	08013fe0 	.word	0x08013fe0

0800addc <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 800addc:	b168      	cbz	r0, 800adfa <netbuf_delete+0x1e>
{
 800adde:	b510      	push	{r4, lr}
 800ade0:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	b120      	cbz	r0, 800adf0 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800ade6:	f000 ffa3 	bl	800bd30 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	6063      	str	r3, [r4, #4]
 800adee:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800adf0:	4621      	mov	r1, r4
 800adf2:	2006      	movs	r0, #6
 800adf4:	f000 fcdc 	bl	800b7b0 <memp_free>
  }
}
 800adf8:	bd10      	pop	{r4, pc}
 800adfa:	4770      	bx	lr

0800adfc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800adfc:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800adfe:	b158      	cbz	r0, 800ae18 <netbuf_data+0x1c>
 800ae00:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ae02:	b191      	cbz	r1, 800ae2a <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ae04:	b1d2      	cbz	r2, 800ae3c <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 800ae06:	6840      	ldr	r0, [r0, #4]
 800ae08:	b308      	cbz	r0, 800ae4e <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 800ae0a:	6840      	ldr	r0, [r0, #4]
 800ae0c:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	895b      	ldrh	r3, [r3, #10]
 800ae12:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 800ae14:	2000      	movs	r0, #0
}
 800ae16:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ae18:	4b0e      	ldr	r3, [pc, #56]	; (800ae54 <netbuf_data+0x58>)
 800ae1a:	22c6      	movs	r2, #198	; 0xc6
 800ae1c:	490e      	ldr	r1, [pc, #56]	; (800ae58 <netbuf_data+0x5c>)
 800ae1e:	480f      	ldr	r0, [pc, #60]	; (800ae5c <netbuf_data+0x60>)
 800ae20:	f007 fbf8 	bl	8012614 <iprintf>
 800ae24:	f06f 000f 	mvn.w	r0, #15
 800ae28:	e7f5      	b.n	800ae16 <netbuf_data+0x1a>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ae2a:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <netbuf_data+0x58>)
 800ae2c:	22c7      	movs	r2, #199	; 0xc7
 800ae2e:	490c      	ldr	r1, [pc, #48]	; (800ae60 <netbuf_data+0x64>)
 800ae30:	480a      	ldr	r0, [pc, #40]	; (800ae5c <netbuf_data+0x60>)
 800ae32:	f007 fbef 	bl	8012614 <iprintf>
 800ae36:	f06f 000f 	mvn.w	r0, #15
 800ae3a:	e7ec      	b.n	800ae16 <netbuf_data+0x1a>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <netbuf_data+0x58>)
 800ae3e:	22c8      	movs	r2, #200	; 0xc8
 800ae40:	4908      	ldr	r1, [pc, #32]	; (800ae64 <netbuf_data+0x68>)
 800ae42:	4806      	ldr	r0, [pc, #24]	; (800ae5c <netbuf_data+0x60>)
 800ae44:	f007 fbe6 	bl	8012614 <iprintf>
 800ae48:	f06f 000f 	mvn.w	r0, #15
 800ae4c:	e7e3      	b.n	800ae16 <netbuf_data+0x1a>
    return ERR_BUF;
 800ae4e:	f06f 0001 	mvn.w	r0, #1
 800ae52:	e7e0      	b.n	800ae16 <netbuf_data+0x1a>
 800ae54:	08014000 	.word	0x08014000
 800ae58:	08014074 	.word	0x08014074
 800ae5c:	0801397c 	.word	0x0801397c
 800ae60:	08014090 	.word	0x08014090
 800ae64:	080140b0 	.word	0x080140b0

0800ae68 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ae68:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ae6a:	b140      	cbz	r0, 800ae7e <netbuf_next+0x16>
  if (buf->ptr->next == NULL) {
 800ae6c:	6843      	ldr	r3, [r0, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	b173      	cbz	r3, 800ae90 <netbuf_next+0x28>
    return -1;
  }
  buf->ptr = buf->ptr->next;
 800ae72:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 800ae74:	6818      	ldr	r0, [r3, #0]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ae76:	fab0 f080 	clz	r0, r0
 800ae7a:	0940      	lsrs	r0, r0, #5
    return 1;
  }
  return 0;
}
 800ae7c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ae7e:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <netbuf_next+0x30>)
 800ae80:	22e0      	movs	r2, #224	; 0xe0
 800ae82:	4906      	ldr	r1, [pc, #24]	; (800ae9c <netbuf_next+0x34>)
 800ae84:	4806      	ldr	r0, [pc, #24]	; (800aea0 <netbuf_next+0x38>)
 800ae86:	f007 fbc5 	bl	8012614 <iprintf>
 800ae8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8e:	e7f5      	b.n	800ae7c <netbuf_next+0x14>
    return -1;
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e7f2      	b.n	800ae7c <netbuf_next+0x14>
 800ae96:	bf00      	nop
 800ae98:	08014000 	.word	0x08014000
 800ae9c:	080140cc 	.word	0x080140cc
 800aea0:	0801397c 	.word	0x0801397c

0800aea4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800aea4:	b500      	push	{lr}
 800aea6:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800aea8:	4831      	ldr	r0, [pc, #196]	; (800af70 <tcpip_thread+0xcc>)
 800aeaa:	f007 f9e0 	bl	801226e <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800aeae:	4b31      	ldr	r3, [pc, #196]	; (800af74 <tcpip_thread+0xd0>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	b113      	cbz	r3, 800aeba <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 800aeb4:	4a30      	ldr	r2, [pc, #192]	; (800af78 <tcpip_thread+0xd4>)
 800aeb6:	6810      	ldr	r0, [r2, #0]
 800aeb8:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800aeba:	4e30      	ldr	r6, [pc, #192]	; (800af7c <tcpip_thread+0xd8>)
  UNLOCK_TCPIP_CORE();
 800aebc:	4d2c      	ldr	r5, [pc, #176]	; (800af70 <tcpip_thread+0xcc>)
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
 800aebe:	e01e      	b.n	800aefe <tcpip_thread+0x5a>
    UNLOCK_TCPIP_CORE();
 800aec0:	4628      	mov	r0, r5
 800aec2:	f007 f9db 	bl	801227c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800aec6:	2200      	movs	r2, #0
 800aec8:	a901      	add	r1, sp, #4
 800aeca:	4630      	mov	r0, r6
 800aecc:	f007 f940 	bl	8012150 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800aed0:	4628      	mov	r0, r5
 800aed2:	f007 f9cc 	bl	801226e <sys_mutex_lock>

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
    if (msg == NULL) {
 800aed6:	9c01      	ldr	r4, [sp, #4]
 800aed8:	b34c      	cbz	r4, 800af2e <tcpip_thread+0x8a>
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
  switch (msg->type) {
 800aeda:	7823      	ldrb	r3, [r4, #0]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d03b      	beq.n	800af58 <tcpip_thread+0xb4>
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d041      	beq.n	800af68 <tcpip_thread+0xc4>
 800aee4:	b353      	cbz	r3, 800af3c <tcpip_thread+0x98>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aee6:	4b26      	ldr	r3, [pc, #152]	; (800af80 <tcpip_thread+0xdc>)
 800aee8:	22cf      	movs	r2, #207	; 0xcf
 800aeea:	4926      	ldr	r1, [pc, #152]	; (800af84 <tcpip_thread+0xe0>)
 800aeec:	4826      	ldr	r0, [pc, #152]	; (800af88 <tcpip_thread+0xe4>)
 800aeee:	f007 fb91 	bl	8012614 <iprintf>
      break;
 800aef2:	e004      	b.n	800aefe <tcpip_thread+0x5a>
    sys_check_timeouts();
 800aef4:	f005 fae8 	bl	80104c8 <sys_check_timeouts>
    goto again;
 800aef8:	e001      	b.n	800aefe <tcpip_thread+0x5a>
    sys_check_timeouts();
 800aefa:	f005 fae5 	bl	80104c8 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 800aefe:	f005 fb07 	bl	8010510 <sys_timeouts_sleeptime>
 800af02:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800af04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af08:	d0da      	beq.n	800aec0 <tcpip_thread+0x1c>
  } else if (sleeptime == 0) {
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d0f2      	beq.n	800aef4 <tcpip_thread+0x50>
  UNLOCK_TCPIP_CORE();
 800af0e:	4628      	mov	r0, r5
 800af10:	f007 f9b4 	bl	801227c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800af14:	4622      	mov	r2, r4
 800af16:	a901      	add	r1, sp, #4
 800af18:	4630      	mov	r0, r6
 800af1a:	f007 f919 	bl	8012150 <sys_arch_mbox_fetch>
 800af1e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800af20:	4628      	mov	r0, r5
 800af22:	f007 f9a4 	bl	801226e <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800af26:	f1b4 3fff 	cmp.w	r4, #4294967295
 800af2a:	d0e6      	beq.n	800aefa <tcpip_thread+0x56>
 800af2c:	e7d3      	b.n	800aed6 <tcpip_thread+0x32>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800af2e:	4b14      	ldr	r3, [pc, #80]	; (800af80 <tcpip_thread+0xdc>)
 800af30:	2291      	movs	r2, #145	; 0x91
 800af32:	4914      	ldr	r1, [pc, #80]	; (800af84 <tcpip_thread+0xe0>)
 800af34:	4814      	ldr	r0, [pc, #80]	; (800af88 <tcpip_thread+0xe4>)
 800af36:	f007 fb6d 	bl	8012614 <iprintf>
      continue;
 800af3a:	e7e0      	b.n	800aefe <tcpip_thread+0x5a>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800af3c:	68e3      	ldr	r3, [r4, #12]
 800af3e:	68a1      	ldr	r1, [r4, #8]
 800af40:	6860      	ldr	r0, [r4, #4]
 800af42:	4798      	blx	r3
 800af44:	b920      	cbnz	r0, 800af50 <tcpip_thread+0xac>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800af46:	4621      	mov	r1, r4
 800af48:	2009      	movs	r0, #9
 800af4a:	f000 fc31 	bl	800b7b0 <memp_free>
      break;
 800af4e:	e7d6      	b.n	800aefe <tcpip_thread+0x5a>
        pbuf_free(msg->msg.inp.p);
 800af50:	6860      	ldr	r0, [r4, #4]
 800af52:	f000 feed 	bl	800bd30 <pbuf_free>
 800af56:	e7f6      	b.n	800af46 <tcpip_thread+0xa2>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	68a0      	ldr	r0, [r4, #8]
 800af5c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800af5e:	4621      	mov	r1, r4
 800af60:	2008      	movs	r0, #8
 800af62:	f000 fc25 	bl	800b7b0 <memp_free>
      break;
 800af66:	e7ca      	b.n	800aefe <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800af68:	6863      	ldr	r3, [r4, #4]
 800af6a:	68a0      	ldr	r0, [r4, #8]
 800af6c:	4798      	blx	r3
      break;
 800af6e:	e7c6      	b.n	800aefe <tcpip_thread+0x5a>
 800af70:	20016174 	.word	0x20016174
 800af74:	20012b68 	.word	0x20012b68
 800af78:	20012b6c 	.word	0x20012b6c
 800af7c:	20012b70 	.word	0x20012b70
 800af80:	080140e8 	.word	0x080140e8
 800af84:	08014118 	.word	0x08014118
 800af88:	0801397c 	.word	0x0801397c

0800af8c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	4607      	mov	r7, r0
 800af90:	460e      	mov	r6, r1
 800af92:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800af94:	4812      	ldr	r0, [pc, #72]	; (800afe0 <tcpip_inpkt+0x54>)
 800af96:	f007 f907 	bl	80121a8 <sys_mbox_valid>
 800af9a:	b178      	cbz	r0, 800afbc <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800af9c:	2009      	movs	r0, #9
 800af9e:	f000 fbed 	bl	800b77c <memp_malloc>
  if (msg == NULL) {
 800afa2:	4604      	mov	r4, r0
 800afa4:	b1c0      	cbz	r0, 800afd8 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800afa6:	2300      	movs	r3, #0
 800afa8:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 800afaa:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800afac:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 800afae:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800afb0:	4601      	mov	r1, r0
 800afb2:	480b      	ldr	r0, [pc, #44]	; (800afe0 <tcpip_inpkt+0x54>)
 800afb4:	f007 f8bc 	bl	8012130 <sys_mbox_trypost>
 800afb8:	b938      	cbnz	r0, 800afca <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800afbc:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <tcpip_inpkt+0x58>)
 800afbe:	22fc      	movs	r2, #252	; 0xfc
 800afc0:	4909      	ldr	r1, [pc, #36]	; (800afe8 <tcpip_inpkt+0x5c>)
 800afc2:	480a      	ldr	r0, [pc, #40]	; (800afec <tcpip_inpkt+0x60>)
 800afc4:	f007 fb26 	bl	8012614 <iprintf>
 800afc8:	e7e8      	b.n	800af9c <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800afca:	4621      	mov	r1, r4
 800afcc:	2009      	movs	r0, #9
 800afce:	f000 fbef 	bl	800b7b0 <memp_free>
    return ERR_MEM;
 800afd2:	f04f 30ff 	mov.w	r0, #4294967295
 800afd6:	e7f0      	b.n	800afba <tcpip_inpkt+0x2e>
    return ERR_MEM;
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	e7ed      	b.n	800afba <tcpip_inpkt+0x2e>
 800afde:	bf00      	nop
 800afe0:	20012b70 	.word	0x20012b70
 800afe4:	080140e8 	.word	0x080140e8
 800afe8:	08014138 	.word	0x08014138
 800afec:	0801397c 	.word	0x0801397c

0800aff0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800aff0:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800aff2:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800aff6:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800affa:	bf14      	ite	ne
 800affc:	4a02      	ldrne	r2, [pc, #8]	; (800b008 <tcpip_input+0x18>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800affe:	4a03      	ldreq	r2, [pc, #12]	; (800b00c <tcpip_input+0x1c>)
 800b000:	f7ff ffc4 	bl	800af8c <tcpip_inpkt>
}
 800b004:	bd08      	pop	{r3, pc}
 800b006:	bf00      	nop
 800b008:	08011fed 	.word	0x08011fed
 800b00c:	08011421 	.word	0x08011421

0800b010 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	4606      	mov	r6, r0
 800b014:	460d      	mov	r5, r1
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b016:	4812      	ldr	r0, [pc, #72]	; (800b060 <tcpip_try_callback+0x50>)
 800b018:	f007 f8c6 	bl	80121a8 <sys_mbox_valid>
 800b01c:	b170      	cbz	r0, 800b03c <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b01e:	2008      	movs	r0, #8
 800b020:	f000 fbac 	bl	800b77c <memp_malloc>
  if (msg == NULL) {
 800b024:	4604      	mov	r4, r0
 800b026:	b1c0      	cbz	r0, 800b05a <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b028:	2301      	movs	r3, #1
 800b02a:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 800b02c:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 800b02e:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b030:	4601      	mov	r1, r0
 800b032:	480b      	ldr	r0, [pc, #44]	; (800b060 <tcpip_try_callback+0x50>)
 800b034:	f007 f87c 	bl	8012130 <sys_mbox_trypost>
 800b038:	b940      	cbnz	r0, 800b04c <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b03c:	4b09      	ldr	r3, [pc, #36]	; (800b064 <tcpip_try_callback+0x54>)
 800b03e:	f240 125d 	movw	r2, #349	; 0x15d
 800b042:	4909      	ldr	r1, [pc, #36]	; (800b068 <tcpip_try_callback+0x58>)
 800b044:	4809      	ldr	r0, [pc, #36]	; (800b06c <tcpip_try_callback+0x5c>)
 800b046:	f007 fae5 	bl	8012614 <iprintf>
 800b04a:	e7e8      	b.n	800b01e <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b04c:	4621      	mov	r1, r4
 800b04e:	2008      	movs	r0, #8
 800b050:	f000 fbae 	bl	800b7b0 <memp_free>
    return ERR_MEM;
 800b054:	f04f 30ff 	mov.w	r0, #4294967295
 800b058:	e7ef      	b.n	800b03a <tcpip_try_callback+0x2a>
    return ERR_MEM;
 800b05a:	f04f 30ff 	mov.w	r0, #4294967295
 800b05e:	e7ec      	b.n	800b03a <tcpip_try_callback+0x2a>
 800b060:	20012b70 	.word	0x20012b70
 800b064:	080140e8 	.word	0x080140e8
 800b068:	08014138 	.word	0x08014138
 800b06c:	0801397c 	.word	0x0801397c

0800b070 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4604      	mov	r4, r0
 800b074:	460d      	mov	r5, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b076:	4e05      	ldr	r6, [pc, #20]	; (800b08c <tcpip_send_msg_wait_sem+0x1c>)
 800b078:	4630      	mov	r0, r6
 800b07a:	f007 f8f8 	bl	801226e <sys_mutex_lock>
  fn(apimsg);
 800b07e:	4628      	mov	r0, r5
 800b080:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800b082:	4630      	mov	r0, r6
 800b084:	f007 f8fa 	bl	801227c <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b088:	2000      	movs	r0, #0
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	20016174 	.word	0x20016174

0800b090 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b090:	b530      	push	{r4, r5, lr}
 800b092:	b083      	sub	sp, #12
 800b094:	4605      	mov	r5, r0
 800b096:	460c      	mov	r4, r1
  lwip_init();
 800b098:	f000 f84d 	bl	800b136 <lwip_init>

  tcpip_init_done = initfunc;
 800b09c:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <tcpip_init+0x5c>)
 800b09e:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 800b0a0:	4b13      	ldr	r3, [pc, #76]	; (800b0f0 <tcpip_init+0x60>)
 800b0a2:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b0a4:	2106      	movs	r1, #6
 800b0a6:	4813      	ldr	r0, [pc, #76]	; (800b0f4 <tcpip_init+0x64>)
 800b0a8:	f007 f82c 	bl	8012104 <sys_mbox_new>
 800b0ac:	b970      	cbnz	r0, 800b0cc <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b0ae:	4812      	ldr	r0, [pc, #72]	; (800b0f8 <tcpip_init+0x68>)
 800b0b0:	f007 f8d2 	bl	8012258 <sys_mutex_new>
 800b0b4:	b990      	cbnz	r0, 800b0dc <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b0b6:	2318      	movs	r3, #24
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0be:	2200      	movs	r2, #0
 800b0c0:	490e      	ldr	r1, [pc, #56]	; (800b0fc <tcpip_init+0x6c>)
 800b0c2:	480f      	ldr	r0, [pc, #60]	; (800b100 <tcpip_init+0x70>)
 800b0c4:	f007 f8df 	bl	8012286 <sys_thread_new>
}
 800b0c8:	b003      	add	sp, #12
 800b0ca:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b0cc:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <tcpip_init+0x74>)
 800b0ce:	f240 2261 	movw	r2, #609	; 0x261
 800b0d2:	490d      	ldr	r1, [pc, #52]	; (800b108 <tcpip_init+0x78>)
 800b0d4:	480d      	ldr	r0, [pc, #52]	; (800b10c <tcpip_init+0x7c>)
 800b0d6:	f007 fa9d 	bl	8012614 <iprintf>
 800b0da:	e7e8      	b.n	800b0ae <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <tcpip_init+0x74>)
 800b0de:	f240 2265 	movw	r2, #613	; 0x265
 800b0e2:	490b      	ldr	r1, [pc, #44]	; (800b110 <tcpip_init+0x80>)
 800b0e4:	4809      	ldr	r0, [pc, #36]	; (800b10c <tcpip_init+0x7c>)
 800b0e6:	f007 fa95 	bl	8012614 <iprintf>
 800b0ea:	e7e4      	b.n	800b0b6 <tcpip_init+0x26>
 800b0ec:	20012b68 	.word	0x20012b68
 800b0f0:	20012b6c 	.word	0x20012b6c
 800b0f4:	20012b70 	.word	0x20012b70
 800b0f8:	20016174 	.word	0x20016174
 800b0fc:	0800aea5 	.word	0x0800aea5
 800b100:	08014190 	.word	0x08014190
 800b104:	080140e8 	.word	0x080140e8
 800b108:	08014148 	.word	0x08014148
 800b10c:	0801397c 	.word	0x0801397c
 800b110:	0801416c 	.word	0x0801416c

0800b114 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800b114:	0a03      	lsrs	r3, r0, #8
 800b116:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 800b11a:	b280      	uxth	r0, r0
 800b11c:	4770      	bx	lr

0800b11e <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 800b11e:	0e03      	lsrs	r3, r0, #24
 800b120:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800b124:	0202      	lsls	r2, r0, #8
 800b126:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800b12a:	4313      	orrs	r3, r2
 800b12c:	0a00      	lsrs	r0, r0, #8
 800b12e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 800b132:	4318      	orrs	r0, r3
 800b134:	4770      	bx	lr

0800b136 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b136:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b138:	f007 f884 	bl	8012244 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b13c:	f000 f80c 	bl	800b158 <mem_init>
  memp_init();
 800b140:	f000 fb0e 	bl	800b760 <memp_init>
  pbuf_init();
  netif_init();
 800b144:	f000 fbae 	bl	800b8a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b148:	f005 fa06 	bl	8010558 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b14c:	f001 f94a 	bl	800c3e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b150:	f005 f9a4 	bl	801049c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b154:	bd08      	pop	{r3, pc}
	...

0800b158 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b158:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b15a:	4b10      	ldr	r3, [pc, #64]	; (800b19c <mem_init+0x44>)
 800b15c:	f023 0303 	bic.w	r3, r3, #3
 800b160:	4a0f      	ldr	r2, [pc, #60]	; (800b1a0 <mem_init+0x48>)
 800b162:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800b164:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800b168:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 800b16a:	2200      	movs	r2, #0
 800b16c:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b16e:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 800b170:	185a      	adds	r2, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b172:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <mem_init+0x4c>)
 800b174:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 800b176:	2001      	movs	r0, #1
 800b178:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b17a:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b17c:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b17e:	4a0a      	ldr	r2, [pc, #40]	; (800b1a8 <mem_init+0x50>)
 800b180:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b182:	480a      	ldr	r0, [pc, #40]	; (800b1ac <mem_init+0x54>)
 800b184:	f007 f868 	bl	8012258 <sys_mutex_new>
 800b188:	b900      	cbnz	r0, 800b18c <mem_init+0x34>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b18a:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b18c:	4b08      	ldr	r3, [pc, #32]	; (800b1b0 <mem_init+0x58>)
 800b18e:	f240 221f 	movw	r2, #543	; 0x21f
 800b192:	4908      	ldr	r1, [pc, #32]	; (800b1b4 <mem_init+0x5c>)
 800b194:	4808      	ldr	r0, [pc, #32]	; (800b1b8 <mem_init+0x60>)
 800b196:	f007 fa3d 	bl	8012614 <iprintf>
}
 800b19a:	e7f6      	b.n	800b18a <mem_init+0x32>
 800b19c:	20016193 	.word	0x20016193
 800b1a0:	20012b7c 	.word	0x20012b7c
 800b1a4:	20012b80 	.word	0x20012b80
 800b1a8:	20012b74 	.word	0x20012b74
 800b1ac:	20012b78 	.word	0x20012b78
 800b1b0:	080141a0 	.word	0x080141a0
 800b1b4:	080141d0 	.word	0x080141d0
 800b1b8:	0801397c 	.word	0x0801397c

0800b1bc <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	f000 80dd 	beq.w	800b37c <mem_free+0x1c0>
{
 800b1c2:	b538      	push	{r3, r4, r5, lr}
 800b1c4:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b1c6:	f010 0f03 	tst.w	r0, #3
 800b1ca:	d117      	bne.n	800b1fc <mem_free+0x40>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b1cc:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b1d0:	4b6b      	ldr	r3, [pc, #428]	; (800b380 <mem_free+0x1c4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	42ab      	cmp	r3, r5
 800b1d6:	d805      	bhi.n	800b1e4 <mem_free+0x28>
 800b1d8:	f100 030c 	add.w	r3, r0, #12
 800b1dc:	4a69      	ldr	r2, [pc, #420]	; (800b384 <mem_free+0x1c8>)
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d217      	bcs.n	800b214 <mem_free+0x58>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b1e4:	4b68      	ldr	r3, [pc, #416]	; (800b388 <mem_free+0x1cc>)
 800b1e6:	f240 227f 	movw	r2, #639	; 0x27f
 800b1ea:	4968      	ldr	r1, [pc, #416]	; (800b38c <mem_free+0x1d0>)
 800b1ec:	4868      	ldr	r0, [pc, #416]	; (800b390 <mem_free+0x1d4>)
 800b1ee:	f007 fa11 	bl	8012614 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b1f2:	f007 f85f 	bl	80122b4 <sys_arch_protect>
 800b1f6:	f007 f869 	bl	80122cc <sys_arch_unprotect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b1fc:	4b62      	ldr	r3, [pc, #392]	; (800b388 <mem_free+0x1cc>)
 800b1fe:	f240 2273 	movw	r2, #627	; 0x273
 800b202:	4964      	ldr	r1, [pc, #400]	; (800b394 <mem_free+0x1d8>)
 800b204:	4862      	ldr	r0, [pc, #392]	; (800b390 <mem_free+0x1d4>)
 800b206:	f007 fa05 	bl	8012614 <iprintf>
    MEM_STATS_INC_LOCKED(illegal);
 800b20a:	f007 f853 	bl	80122b4 <sys_arch_protect>
 800b20e:	f007 f85d 	bl	80122cc <sys_arch_unprotect>
    return;
 800b212:	e7f2      	b.n	800b1fa <mem_free+0x3e>
  LWIP_MEM_FREE_PROTECT();
 800b214:	4860      	ldr	r0, [pc, #384]	; (800b398 <mem_free+0x1dc>)
 800b216:	f007 f82a 	bl	801226e <sys_mutex_lock>
  if (!mem->used) {
 800b21a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d05c      	beq.n	800b2dc <mem_free+0x120>
  nmem = ptr_to_mem(mem->next);
 800b222:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  pmem = ptr_to_mem(mem->prev);
 800b226:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b22a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b22e:	f200 8096 	bhi.w	800b35e <mem_free+0x1a2>
 800b232:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800b236:	f200 8092 	bhi.w	800b35e <mem_free+0x1a2>
  return (mem_size_t)((u8_t *)mem - ram);
 800b23a:	4951      	ldr	r1, [pc, #324]	; (800b380 <mem_free+0x1c4>)
 800b23c:	6809      	ldr	r1, [r1, #0]
 800b23e:	1a68      	subs	r0, r5, r1
 800b240:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b242:	4282      	cmp	r2, r0
 800b244:	d003      	beq.n	800b24e <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b246:	5a8a      	ldrh	r2, [r1, r2]
 800b248:	4282      	cmp	r2, r0
 800b24a:	f040 8088 	bne.w	800b35e <mem_free+0x1a2>
  return (struct mem *)(void *)&ram[ptr];
 800b24e:	440b      	add	r3, r1
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b250:	4a4c      	ldr	r2, [pc, #304]	; (800b384 <mem_free+0x1c8>)
 800b252:	6812      	ldr	r2, [r2, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b254:	429a      	cmp	r2, r3
 800b256:	d002      	beq.n	800b25e <mem_free+0xa2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b258:	885b      	ldrh	r3, [r3, #2]
 800b25a:	4283      	cmp	r3, r0
 800b25c:	d17f      	bne.n	800b35e <mem_free+0x1a2>
  mem->used = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800b264:	4b4d      	ldr	r3, [pc, #308]	; (800b39c <mem_free+0x1e0>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	42ab      	cmp	r3, r5
 800b26a:	d846      	bhi.n	800b2fa <mem_free+0x13e>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b26c:	428d      	cmp	r5, r1
 800b26e:	d347      	bcc.n	800b300 <mem_free+0x144>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b270:	4295      	cmp	r5, r2
 800b272:	d250      	bcs.n	800b316 <mem_free+0x15a>
  return (struct mem *)(void *)&ram[ptr];
 800b274:	4b42      	ldr	r3, [pc, #264]	; (800b380 <mem_free+0x1c4>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800b27c:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b27e:	4295      	cmp	r5, r2
 800b280:	d013      	beq.n	800b2aa <mem_free+0xee>
 800b282:	7910      	ldrb	r0, [r2, #4]
 800b284:	b988      	cbnz	r0, 800b2aa <mem_free+0xee>
 800b286:	483f      	ldr	r0, [pc, #252]	; (800b384 <mem_free+0x1c8>)
 800b288:	6800      	ldr	r0, [r0, #0]
 800b28a:	4290      	cmp	r0, r2
 800b28c:	d00d      	beq.n	800b2aa <mem_free+0xee>
    if (lfree == nmem) {
 800b28e:	4843      	ldr	r0, [pc, #268]	; (800b39c <mem_free+0x1e0>)
 800b290:	6800      	ldr	r0, [r0, #0]
 800b292:	4290      	cmp	r0, r2
 800b294:	d05d      	beq.n	800b352 <mem_free+0x196>
    mem->next = nmem->next;
 800b296:	5a5a      	ldrh	r2, [r3, r1]
 800b298:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b29c:	5a5a      	ldrh	r2, [r3, r1]
 800b29e:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800b2a2:	d002      	beq.n	800b2aa <mem_free+0xee>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b2a4:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800b2a6:	1ae9      	subs	r1, r5, r3
 800b2a8:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800b2aa:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800b2ae:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 800b2b0:	4295      	cmp	r5, r2
 800b2b2:	d00f      	beq.n	800b2d4 <mem_free+0x118>
 800b2b4:	7910      	ldrb	r0, [r2, #4]
 800b2b6:	b968      	cbnz	r0, 800b2d4 <mem_free+0x118>
    if (lfree == mem) {
 800b2b8:	4838      	ldr	r0, [pc, #224]	; (800b39c <mem_free+0x1e0>)
 800b2ba:	6800      	ldr	r0, [r0, #0]
 800b2bc:	4285      	cmp	r5, r0
 800b2be:	d04b      	beq.n	800b358 <mem_free+0x19c>
    pmem->next = mem->next;
 800b2c0:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800b2c4:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b2c6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800b2ca:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800b2ce:	d001      	beq.n	800b2d4 <mem_free+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b2d0:	4413      	add	r3, r2
 800b2d2:	8059      	strh	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800b2d4:	4830      	ldr	r0, [pc, #192]	; (800b398 <mem_free+0x1dc>)
 800b2d6:	f006 ffd1 	bl	801227c <sys_mutex_unlock>
 800b2da:	e78e      	b.n	800b1fa <mem_free+0x3e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b2dc:	4b2a      	ldr	r3, [pc, #168]	; (800b388 <mem_free+0x1cc>)
 800b2de:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b2e2:	492f      	ldr	r1, [pc, #188]	; (800b3a0 <mem_free+0x1e4>)
 800b2e4:	482a      	ldr	r0, [pc, #168]	; (800b390 <mem_free+0x1d4>)
 800b2e6:	f007 f995 	bl	8012614 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b2ea:	482b      	ldr	r0, [pc, #172]	; (800b398 <mem_free+0x1dc>)
 800b2ec:	f006 ffc6 	bl	801227c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800b2f0:	f006 ffe0 	bl	80122b4 <sys_arch_protect>
 800b2f4:	f006 ffea 	bl	80122cc <sys_arch_unprotect>
    return;
 800b2f8:	e77f      	b.n	800b1fa <mem_free+0x3e>
    lfree = mem;
 800b2fa:	4b28      	ldr	r3, [pc, #160]	; (800b39c <mem_free+0x1e0>)
 800b2fc:	601d      	str	r5, [r3, #0]
 800b2fe:	e7b5      	b.n	800b26c <mem_free+0xb0>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b300:	4b21      	ldr	r3, [pc, #132]	; (800b388 <mem_free+0x1cc>)
 800b302:	f240 12df 	movw	r2, #479	; 0x1df
 800b306:	4927      	ldr	r1, [pc, #156]	; (800b3a4 <mem_free+0x1e8>)
 800b308:	4821      	ldr	r0, [pc, #132]	; (800b390 <mem_free+0x1d4>)
 800b30a:	f007 f983 	bl	8012614 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b30e:	4b1d      	ldr	r3, [pc, #116]	; (800b384 <mem_free+0x1c8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	429d      	cmp	r5, r3
 800b314:	d306      	bcc.n	800b324 <mem_free+0x168>
 800b316:	4b1c      	ldr	r3, [pc, #112]	; (800b388 <mem_free+0x1cc>)
 800b318:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b31c:	4922      	ldr	r1, [pc, #136]	; (800b3a8 <mem_free+0x1ec>)
 800b31e:	481c      	ldr	r0, [pc, #112]	; (800b390 <mem_free+0x1d4>)
 800b320:	f007 f978 	bl	8012614 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b324:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800b328:	b133      	cbz	r3, 800b338 <mem_free+0x17c>
 800b32a:	4b17      	ldr	r3, [pc, #92]	; (800b388 <mem_free+0x1cc>)
 800b32c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b330:	491e      	ldr	r1, [pc, #120]	; (800b3ac <mem_free+0x1f0>)
 800b332:	4817      	ldr	r0, [pc, #92]	; (800b390 <mem_free+0x1d4>)
 800b334:	f007 f96e 	bl	8012614 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b338:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800b33c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b340:	d998      	bls.n	800b274 <mem_free+0xb8>
 800b342:	4b11      	ldr	r3, [pc, #68]	; (800b388 <mem_free+0x1cc>)
 800b344:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b348:	4919      	ldr	r1, [pc, #100]	; (800b3b0 <mem_free+0x1f4>)
 800b34a:	4811      	ldr	r0, [pc, #68]	; (800b390 <mem_free+0x1d4>)
 800b34c:	f007 f962 	bl	8012614 <iprintf>
 800b350:	e790      	b.n	800b274 <mem_free+0xb8>
      lfree = mem;
 800b352:	4a12      	ldr	r2, [pc, #72]	; (800b39c <mem_free+0x1e0>)
 800b354:	6015      	str	r5, [r2, #0]
 800b356:	e79e      	b.n	800b296 <mem_free+0xda>
      lfree = pmem;
 800b358:	4810      	ldr	r0, [pc, #64]	; (800b39c <mem_free+0x1e0>)
 800b35a:	6002      	str	r2, [r0, #0]
 800b35c:	e7b0      	b.n	800b2c0 <mem_free+0x104>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b35e:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <mem_free+0x1cc>)
 800b360:	f240 2295 	movw	r2, #661	; 0x295
 800b364:	4913      	ldr	r1, [pc, #76]	; (800b3b4 <mem_free+0x1f8>)
 800b366:	480a      	ldr	r0, [pc, #40]	; (800b390 <mem_free+0x1d4>)
 800b368:	f007 f954 	bl	8012614 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b36c:	480a      	ldr	r0, [pc, #40]	; (800b398 <mem_free+0x1dc>)
 800b36e:	f006 ff85 	bl	801227c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800b372:	f006 ff9f 	bl	80122b4 <sys_arch_protect>
 800b376:	f006 ffa9 	bl	80122cc <sys_arch_unprotect>
    return;
 800b37a:	e73e      	b.n	800b1fa <mem_free+0x3e>
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	20012b7c 	.word	0x20012b7c
 800b384:	20012b80 	.word	0x20012b80
 800b388:	080141a0 	.word	0x080141a0
 800b38c:	08014210 	.word	0x08014210
 800b390:	0801397c 	.word	0x0801397c
 800b394:	080141ec 	.word	0x080141ec
 800b398:	20012b78 	.word	0x20012b78
 800b39c:	20012b74 	.word	0x20012b74
 800b3a0:	0801422c 	.word	0x0801422c
 800b3a4:	08014254 	.word	0x08014254
 800b3a8:	0801426c 	.word	0x0801426c
 800b3ac:	08014288 	.word	0x08014288
 800b3b0:	080142a4 	.word	0x080142a4
 800b3b4:	080142d0 	.word	0x080142d0

0800b3b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b3bc:	1ccb      	adds	r3, r1, #3
 800b3be:	f023 0303 	bic.w	r3, r3, #3
 800b3c2:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 800b3c4:	461d      	mov	r5, r3
 800b3c6:	2b0c      	cmp	r3, #12
 800b3c8:	bf38      	it	cc
 800b3ca:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b3cc:	428d      	cmp	r5, r1
 800b3ce:	f0c0 809f 	bcc.w	800b510 <mem_trim+0x158>
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b3d8:	f200 809a 	bhi.w	800b510 <mem_trim+0x158>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b3dc:	4b4e      	ldr	r3, [pc, #312]	; (800b518 <mem_trim+0x160>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4283      	cmp	r3, r0
 800b3e2:	d803      	bhi.n	800b3ec <mem_trim+0x34>
 800b3e4:	4a4d      	ldr	r2, [pc, #308]	; (800b51c <mem_trim+0x164>)
 800b3e6:	6812      	ldr	r2, [r2, #0]
 800b3e8:	4282      	cmp	r2, r0
 800b3ea:	d815      	bhi.n	800b418 <mem_trim+0x60>
 800b3ec:	4b4c      	ldr	r3, [pc, #304]	; (800b520 <mem_trim+0x168>)
 800b3ee:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b3f2:	494c      	ldr	r1, [pc, #304]	; (800b524 <mem_trim+0x16c>)
 800b3f4:	484c      	ldr	r0, [pc, #304]	; (800b528 <mem_trim+0x170>)
 800b3f6:	f007 f90d 	bl	8012614 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b3fa:	4b47      	ldr	r3, [pc, #284]	; (800b518 <mem_trim+0x160>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	42a3      	cmp	r3, r4
 800b400:	d803      	bhi.n	800b40a <mem_trim+0x52>
 800b402:	4a46      	ldr	r2, [pc, #280]	; (800b51c <mem_trim+0x164>)
 800b404:	6812      	ldr	r2, [r2, #0]
 800b406:	42a2      	cmp	r2, r4
 800b408:	d806      	bhi.n	800b418 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b40a:	f006 ff53 	bl	80122b4 <sys_arch_protect>
 800b40e:	f006 ff5d 	bl	80122cc <sys_arch_unprotect>
    return rmem;
 800b412:	4620      	mov	r0, r4
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800b414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b418:	f1a4 0708 	sub.w	r7, r4, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800b41c:	1afb      	subs	r3, r7, r3
 800b41e:	b29f      	uxth	r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b420:	f834 6c08 	ldrh.w	r6, [r4, #-8]
 800b424:	3e08      	subs	r6, #8
 800b426:	1bf6      	subs	r6, r6, r7
 800b428:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b42a:	42b5      	cmp	r5, r6
 800b42c:	d82f      	bhi.n	800b48e <mem_trim+0xd6>
  if (newsize == size) {
 800b42e:	42b5      	cmp	r5, r6
 800b430:	d070      	beq.n	800b514 <mem_trim+0x15c>
  LWIP_MEM_FREE_PROTECT();
 800b432:	483e      	ldr	r0, [pc, #248]	; (800b52c <mem_trim+0x174>)
 800b434:	f006 ff1b 	bl	801226e <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 800b438:	f834 8c08 	ldrh.w	r8, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800b43c:	4b36      	ldr	r3, [pc, #216]	; (800b518 <mem_trim+0x160>)
 800b43e:	f8d3 a000 	ldr.w	sl, [r3]
 800b442:	eb0a 0908 	add.w	r9, sl, r8
  if (mem2->used == 0) {
 800b446:	f899 3004 	ldrb.w	r3, [r9, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d136      	bne.n	800b4bc <mem_trim+0x104>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b44e:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 800b452:	d025      	beq.n	800b4a0 <mem_trim+0xe8>
    next = mem2->next;
 800b454:	f83a 1008 	ldrh.w	r1, [sl, r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b458:	3508      	adds	r5, #8
 800b45a:	443d      	add	r5, r7
 800b45c:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800b45e:	4b34      	ldr	r3, [pc, #208]	; (800b530 <mem_trim+0x178>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	454b      	cmp	r3, r9
 800b464:	d024      	beq.n	800b4b0 <mem_trim+0xf8>
  return (struct mem *)(void *)&ram[ptr];
 800b466:	4b2c      	ldr	r3, [pc, #176]	; (800b518 <mem_trim+0x160>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	195a      	adds	r2, r3, r5
    mem2->used = 0;
 800b46c:	2000      	movs	r0, #0
 800b46e:	7110      	strb	r0, [r2, #4]
    mem2->next = next;
 800b470:	5359      	strh	r1, [r3, r5]
    mem2->prev = ptr;
 800b472:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 800b474:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b478:	5b5a      	ldrh	r2, [r3, r5]
 800b47a:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800b47e:	d001      	beq.n	800b484 <mem_trim+0xcc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b480:	4413      	add	r3, r2
 800b482:	805d      	strh	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800b484:	4829      	ldr	r0, [pc, #164]	; (800b52c <mem_trim+0x174>)
 800b486:	f006 fef9 	bl	801227c <sys_mutex_unlock>
  return rmem;
 800b48a:	4620      	mov	r0, r4
 800b48c:	e7c2      	b.n	800b414 <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b48e:	4b24      	ldr	r3, [pc, #144]	; (800b520 <mem_trim+0x168>)
 800b490:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b494:	4927      	ldr	r1, [pc, #156]	; (800b534 <mem_trim+0x17c>)
 800b496:	4824      	ldr	r0, [pc, #144]	; (800b528 <mem_trim+0x170>)
 800b498:	f007 f8bc 	bl	8012614 <iprintf>
    return NULL;
 800b49c:	2000      	movs	r0, #0
 800b49e:	e7b9      	b.n	800b414 <mem_trim+0x5c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b4a0:	4b1f      	ldr	r3, [pc, #124]	; (800b520 <mem_trim+0x168>)
 800b4a2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b4a6:	4924      	ldr	r1, [pc, #144]	; (800b538 <mem_trim+0x180>)
 800b4a8:	481f      	ldr	r0, [pc, #124]	; (800b528 <mem_trim+0x170>)
 800b4aa:	f007 f8b3 	bl	8012614 <iprintf>
 800b4ae:	e7d1      	b.n	800b454 <mem_trim+0x9c>
  return (struct mem *)(void *)&ram[ptr];
 800b4b0:	4b19      	ldr	r3, [pc, #100]	; (800b518 <mem_trim+0x160>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	442b      	add	r3, r5
      lfree = ptr_to_mem(ptr2);
 800b4b6:	4a1e      	ldr	r2, [pc, #120]	; (800b530 <mem_trim+0x178>)
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	e7d4      	b.n	800b466 <mem_trim+0xae>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b4bc:	f105 0314 	add.w	r3, r5, #20
 800b4c0:	42b3      	cmp	r3, r6
 800b4c2:	d8df      	bhi.n	800b484 <mem_trim+0xcc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b4c4:	3508      	adds	r5, #8
 800b4c6:	443d      	add	r5, r7
 800b4c8:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b4ca:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 800b4ce:	d017      	beq.n	800b500 <mem_trim+0x148>
  return (struct mem *)(void *)&ram[ptr];
 800b4d0:	4b11      	ldr	r3, [pc, #68]	; (800b518 <mem_trim+0x160>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 800b4d6:	4916      	ldr	r1, [pc, #88]	; (800b530 <mem_trim+0x178>)
 800b4d8:	6809      	ldr	r1, [r1, #0]
 800b4da:	4291      	cmp	r1, r2
 800b4dc:	d901      	bls.n	800b4e2 <mem_trim+0x12a>
      lfree = mem2;
 800b4de:	4914      	ldr	r1, [pc, #80]	; (800b530 <mem_trim+0x178>)
 800b4e0:	600a      	str	r2, [r1, #0]
    mem2->used = 0;
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800b4e6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800b4ea:	5359      	strh	r1, [r3, r5]
    mem2->prev = ptr;
 800b4ec:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 800b4ee:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b4f2:	5b5a      	ldrh	r2, [r3, r5]
 800b4f4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800b4f8:	d0c4      	beq.n	800b484 <mem_trim+0xcc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b4fa:	4413      	add	r3, r2
 800b4fc:	805d      	strh	r5, [r3, #2]
 800b4fe:	e7c1      	b.n	800b484 <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b500:	4b07      	ldr	r3, [pc, #28]	; (800b520 <mem_trim+0x168>)
 800b502:	f240 3216 	movw	r2, #790	; 0x316
 800b506:	490c      	ldr	r1, [pc, #48]	; (800b538 <mem_trim+0x180>)
 800b508:	4807      	ldr	r0, [pc, #28]	; (800b528 <mem_trim+0x170>)
 800b50a:	f007 f883 	bl	8012614 <iprintf>
 800b50e:	e7df      	b.n	800b4d0 <mem_trim+0x118>
    return NULL;
 800b510:	2000      	movs	r0, #0
 800b512:	e77f      	b.n	800b414 <mem_trim+0x5c>
    return rmem;
 800b514:	4620      	mov	r0, r4
 800b516:	e77d      	b.n	800b414 <mem_trim+0x5c>
 800b518:	20012b7c 	.word	0x20012b7c
 800b51c:	20012b80 	.word	0x20012b80
 800b520:	080141a0 	.word	0x080141a0
 800b524:	08014304 	.word	0x08014304
 800b528:	0801397c 	.word	0x0801397c
 800b52c:	20012b78 	.word	0x20012b78
 800b530:	20012b74 	.word	0x20012b74
 800b534:	0801431c 	.word	0x0801431c
 800b538:	0801433c 	.word	0x0801433c

0800b53c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f000 809c 	beq.w	800b67a <mem_malloc+0x13e>
{
 800b542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b544:	1cc3      	adds	r3, r0, #3
 800b546:	f023 0303 	bic.w	r3, r3, #3
 800b54a:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 800b54c:	461e      	mov	r6, r3
 800b54e:	2b0c      	cmp	r3, #12
 800b550:	bf38      	it	cc
 800b552:	260c      	movcc	r6, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b554:	4286      	cmp	r6, r0
 800b556:	f0c0 8092 	bcc.w	800b67e <mem_malloc+0x142>
 800b55a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b55e:	f200 808e 	bhi.w	800b67e <mem_malloc+0x142>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b562:	4849      	ldr	r0, [pc, #292]	; (800b688 <mem_malloc+0x14c>)
 800b564:	f006 fe83 	bl	801226e <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800b568:	4b48      	ldr	r3, [pc, #288]	; (800b68c <mem_malloc+0x150>)
 800b56a:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b56c:	4b48      	ldr	r3, [pc, #288]	; (800b690 <mem_malloc+0x154>)
  return (mem_size_t)((u8_t *)mem - ram);
 800b56e:	681c      	ldr	r4, [r3, #0]
 800b570:	1a64      	subs	r4, r4, r1
 800b572:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b574:	4623      	mov	r3, r4
 800b576:	4637      	mov	r7, r6
 800b578:	f5c6 5020 	rsb	r0, r6, #10240	; 0x2800
 800b57c:	42a0      	cmp	r0, r4
 800b57e:	d977      	bls.n	800b670 <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b580:	f06f 0c07 	mvn.w	ip, #7
 800b584:	e039      	b.n	800b5fa <mem_malloc+0xbe>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b586:	4b43      	ldr	r3, [pc, #268]	; (800b694 <mem_malloc+0x158>)
 800b588:	f240 3287 	movw	r2, #903	; 0x387
 800b58c:	4942      	ldr	r1, [pc, #264]	; (800b698 <mem_malloc+0x15c>)
 800b58e:	4843      	ldr	r0, [pc, #268]	; (800b69c <mem_malloc+0x160>)
 800b590:	f007 f840 	bl	8012614 <iprintf>
 800b594:	e046      	b.n	800b624 <mem_malloc+0xe8>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b596:	2301      	movs	r3, #1
 800b598:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b59a:	4b3d      	ldr	r3, [pc, #244]	; (800b690 <mem_malloc+0x154>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	42ab      	cmp	r3, r5
 800b5a0:	d057      	beq.n	800b652 <mem_malloc+0x116>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b5a2:	4839      	ldr	r0, [pc, #228]	; (800b688 <mem_malloc+0x14c>)
 800b5a4:	f006 fe6a 	bl	801227c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b5a8:	3608      	adds	r6, #8
 800b5aa:	442e      	add	r6, r5
 800b5ac:	4b3c      	ldr	r3, [pc, #240]	; (800b6a0 <mem_malloc+0x164>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	42b3      	cmp	r3, r6
 800b5b2:	d305      	bcc.n	800b5c0 <mem_malloc+0x84>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b5b4:	f015 0f03 	tst.w	r5, #3
 800b5b8:	d10a      	bne.n	800b5d0 <mem_malloc+0x94>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b5ba:	f105 0008 	add.w	r0, r5, #8
 800b5be:	e05b      	b.n	800b678 <mem_malloc+0x13c>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b5c0:	4b34      	ldr	r3, [pc, #208]	; (800b694 <mem_malloc+0x158>)
 800b5c2:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b5c6:	4937      	ldr	r1, [pc, #220]	; (800b6a4 <mem_malloc+0x168>)
 800b5c8:	4834      	ldr	r0, [pc, #208]	; (800b69c <mem_malloc+0x160>)
 800b5ca:	f007 f823 	bl	8012614 <iprintf>
 800b5ce:	e7f1      	b.n	800b5b4 <mem_malloc+0x78>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b5d0:	4e30      	ldr	r6, [pc, #192]	; (800b694 <mem_malloc+0x158>)
 800b5d2:	4c32      	ldr	r4, [pc, #200]	; (800b69c <mem_malloc+0x160>)
 800b5d4:	4633      	mov	r3, r6
 800b5d6:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b5da:	4933      	ldr	r1, [pc, #204]	; (800b6a8 <mem_malloc+0x16c>)
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f007 f819 	bl	8012614 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b5e2:	4633      	mov	r3, r6
 800b5e4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b5e8:	4930      	ldr	r1, [pc, #192]	; (800b6ac <mem_malloc+0x170>)
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f007 f812 	bl	8012614 <iprintf>
 800b5f0:	e7e3      	b.n	800b5ba <mem_malloc+0x7e>
         ptr = ptr_to_mem(ptr)->next) {
 800b5f2:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b5f4:	4623      	mov	r3, r4
 800b5f6:	42a0      	cmp	r0, r4
 800b5f8:	d93a      	bls.n	800b670 <mem_malloc+0x134>
  return (struct mem *)(void *)&ram[ptr];
 800b5fa:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 800b5fc:	792a      	ldrb	r2, [r5, #4]
 800b5fe:	2a00      	cmp	r2, #0
 800b600:	d1f7      	bne.n	800b5f2 <mem_malloc+0xb6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b602:	5aca      	ldrh	r2, [r1, r3]
 800b604:	ebac 0303 	sub.w	r3, ip, r3
 800b608:	4413      	add	r3, r2
      if ((!mem->used) &&
 800b60a:	42bb      	cmp	r3, r7
 800b60c:	d3f1      	bcc.n	800b5f2 <mem_malloc+0xb6>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b60e:	f106 0214 	add.w	r2, r6, #20
 800b612:	4293      	cmp	r3, r2
 800b614:	d3bf      	bcc.n	800b596 <mem_malloc+0x5a>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b616:	f106 0708 	add.w	r7, r6, #8
 800b61a:	4427      	add	r7, r4
 800b61c:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b61e:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 800b622:	d0b0      	beq.n	800b586 <mem_malloc+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 800b624:	4b19      	ldr	r3, [pc, #100]	; (800b68c <mem_malloc+0x150>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 800b62a:	2100      	movs	r1, #0
 800b62c:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800b62e:	8829      	ldrh	r1, [r5, #0]
 800b630:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 800b632:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 800b634:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 800b636:	2201      	movs	r2, #1
 800b638:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b63a:	5bda      	ldrh	r2, [r3, r7]
 800b63c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800b640:	d0ab      	beq.n	800b59a <mem_malloc+0x5e>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b642:	4413      	add	r3, r2
 800b644:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 800b646:	4b12      	ldr	r3, [pc, #72]	; (800b690 <mem_malloc+0x154>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	42ab      	cmp	r3, r5
 800b64c:	d1a9      	bne.n	800b5a2 <mem_malloc+0x66>
          while (cur->used && cur != ram_end) {
 800b64e:	792b      	ldrb	r3, [r5, #4]
 800b650:	b1bb      	cbz	r3, 800b682 <mem_malloc+0x146>
 800b652:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <mem_malloc+0x164>)
 800b654:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 800b656:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <mem_malloc+0x150>)
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 800b65c:	4299      	cmp	r1, r3
 800b65e:	d004      	beq.n	800b66a <mem_malloc+0x12e>
  return (struct mem *)(void *)&ram[ptr];
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 800b664:	791a      	ldrb	r2, [r3, #4]
 800b666:	2a00      	cmp	r2, #0
 800b668:	d1f8      	bne.n	800b65c <mem_malloc+0x120>
          lfree = cur;
 800b66a:	4a09      	ldr	r2, [pc, #36]	; (800b690 <mem_malloc+0x154>)
 800b66c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b66e:	e798      	b.n	800b5a2 <mem_malloc+0x66>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b670:	4805      	ldr	r0, [pc, #20]	; (800b688 <mem_malloc+0x14c>)
 800b672:	f006 fe03 	bl	801227c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b676:	2000      	movs	r0, #0
}
 800b678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 800b67a:	2000      	movs	r0, #0
}
 800b67c:	4770      	bx	lr
    return NULL;
 800b67e:	2000      	movs	r0, #0
 800b680:	e7fa      	b.n	800b678 <mem_malloc+0x13c>
  return (struct mem *)(void *)&ram[ptr];
 800b682:	462b      	mov	r3, r5
 800b684:	e7f1      	b.n	800b66a <mem_malloc+0x12e>
 800b686:	bf00      	nop
 800b688:	20012b78 	.word	0x20012b78
 800b68c:	20012b7c 	.word	0x20012b7c
 800b690:	20012b74 	.word	0x20012b74
 800b694:	080141a0 	.word	0x080141a0
 800b698:	0801433c 	.word	0x0801433c
 800b69c:	0801397c 	.word	0x0801397c
 800b6a0:	20012b80 	.word	0x20012b80
 800b6a4:	08014350 	.word	0x08014350
 800b6a8:	08014380 	.word	0x08014380
 800b6ac:	080143b0 	.word	0x080143b0

0800b6b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b6b4:	f006 fdfe 	bl	80122b4 <sys_arch_protect>
 800b6b8:	4605      	mov	r5, r0

  memp = *desc->tab;
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b6be:	b18c      	cbz	r4, 800b6e4 <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b6c0:	6822      	ldr	r2, [r4, #0]
 800b6c2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b6c4:	f014 0f03 	tst.w	r4, #3
 800b6c8:	d104      	bne.n	800b6d4 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f006 fdfe 	bl	80122cc <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b6d4:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <do_memp_malloc_pool+0x3c>)
 800b6d6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b6da:	4905      	ldr	r1, [pc, #20]	; (800b6f0 <do_memp_malloc_pool+0x40>)
 800b6dc:	4805      	ldr	r0, [pc, #20]	; (800b6f4 <do_memp_malloc_pool+0x44>)
 800b6de:	f006 ff99 	bl	8012614 <iprintf>
 800b6e2:	e7f2      	b.n	800b6ca <do_memp_malloc_pool+0x1a>
    SYS_ARCH_UNPROTECT(old_level);
 800b6e4:	f006 fdf2 	bl	80122cc <sys_arch_unprotect>
  return NULL;
 800b6e8:	e7f2      	b.n	800b6d0 <do_memp_malloc_pool+0x20>
 800b6ea:	bf00      	nop
 800b6ec:	080143d4 	.word	0x080143d4
 800b6f0:	08014404 	.word	0x08014404
 800b6f4:	0801397c 	.word	0x0801397c

0800b6f8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b6fe:	f011 0f03 	tst.w	r1, #3
 800b702:	d109      	bne.n	800b718 <do_memp_free_pool+0x20>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800b704:	f006 fdd6 	bl	80122b4 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b708:	68ab      	ldr	r3, [r5, #8]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 800b70e:	68ab      	ldr	r3, [r5, #8]
 800b710:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b712:	f006 fddb 	bl	80122cc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b716:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800b718:	4b03      	ldr	r3, [pc, #12]	; (800b728 <do_memp_free_pool+0x30>)
 800b71a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b71e:	4903      	ldr	r1, [pc, #12]	; (800b72c <do_memp_free_pool+0x34>)
 800b720:	4803      	ldr	r0, [pc, #12]	; (800b730 <do_memp_free_pool+0x38>)
 800b722:	f006 ff77 	bl	8012614 <iprintf>
 800b726:	e7ed      	b.n	800b704 <do_memp_free_pool+0xc>
 800b728:	080143d4 	.word	0x080143d4
 800b72c:	08014428 	.word	0x08014428
 800b730:	0801397c 	.word	0x0801397c

0800b734 <memp_init_pool>:
  *desc->tab = NULL;
 800b734:	6883      	ldr	r3, [r0, #8]
 800b736:	2200      	movs	r2, #0
 800b738:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b73a:	6843      	ldr	r3, [r0, #4]
 800b73c:	3303      	adds	r3, #3
 800b73e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800b742:	8842      	ldrh	r2, [r0, #2]
 800b744:	b15a      	cbz	r2, 800b75e <memp_init_pool+0x2a>
 800b746:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 800b748:	6881      	ldr	r1, [r0, #8]
 800b74a:	6809      	ldr	r1, [r1, #0]
 800b74c:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 800b74e:	6881      	ldr	r1, [r0, #8]
 800b750:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b752:	8801      	ldrh	r1, [r0, #0]
 800b754:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800b756:	3201      	adds	r2, #1
 800b758:	8841      	ldrh	r1, [r0, #2]
 800b75a:	4291      	cmp	r1, r2
 800b75c:	dcf4      	bgt.n	800b748 <memp_init_pool+0x14>
}
 800b75e:	4770      	bx	lr

0800b760 <memp_init>:
{
 800b760:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b762:	4c05      	ldr	r4, [pc, #20]	; (800b778 <memp_init+0x18>)
 800b764:	f104 0534 	add.w	r5, r4, #52	; 0x34
    memp_init_pool(memp_pools[i]);
 800b768:	f854 0b04 	ldr.w	r0, [r4], #4
 800b76c:	f7ff ffe2 	bl	800b734 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b770:	42ac      	cmp	r4, r5
 800b772:	d1f9      	bne.n	800b768 <memp_init+0x8>
}
 800b774:	bd38      	pop	{r3, r4, r5, pc}
 800b776:	bf00      	nop
 800b778:	08014520 	.word	0x08014520

0800b77c <memp_malloc>:
{
 800b77c:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b77e:	280c      	cmp	r0, #12
 800b780:	d805      	bhi.n	800b78e <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b782:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <memp_malloc+0x24>)
 800b784:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b788:	f7ff ff92 	bl	800b6b0 <do_memp_malloc_pool>
}
 800b78c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b78e:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <memp_malloc+0x28>)
 800b790:	f240 1257 	movw	r2, #343	; 0x157
 800b794:	4904      	ldr	r1, [pc, #16]	; (800b7a8 <memp_malloc+0x2c>)
 800b796:	4805      	ldr	r0, [pc, #20]	; (800b7ac <memp_malloc+0x30>)
 800b798:	f006 ff3c 	bl	8012614 <iprintf>
 800b79c:	2000      	movs	r0, #0
 800b79e:	e7f5      	b.n	800b78c <memp_malloc+0x10>
 800b7a0:	08014520 	.word	0x08014520
 800b7a4:	080143d4 	.word	0x080143d4
 800b7a8:	08014448 	.word	0x08014448
 800b7ac:	0801397c 	.word	0x0801397c

0800b7b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b7b0:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b7b2:	280c      	cmp	r0, #12
 800b7b4:	d806      	bhi.n	800b7c4 <memp_free+0x14>

  if (mem == NULL) {
 800b7b6:	b121      	cbz	r1, 800b7c2 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b7b8:	4b06      	ldr	r3, [pc, #24]	; (800b7d4 <memp_free+0x24>)
 800b7ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b7be:	f7ff ff9b 	bl	800b6f8 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b7c2:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b7c4:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <memp_free+0x28>)
 800b7c6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b7ca:	4904      	ldr	r1, [pc, #16]	; (800b7dc <memp_free+0x2c>)
 800b7cc:	4804      	ldr	r0, [pc, #16]	; (800b7e0 <memp_free+0x30>)
 800b7ce:	f006 ff21 	bl	8012614 <iprintf>
 800b7d2:	e7f6      	b.n	800b7c2 <memp_free+0x12>
 800b7d4:	08014520 	.word	0x08014520
 800b7d8:	080143d4 	.word	0x080143d4
 800b7dc:	08014468 	.word	0x08014468
 800b7e0:	0801397c 	.word	0x0801397c

0800b7e4 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800b7e4:	f06f 000b 	mvn.w	r0, #11
 800b7e8:	4770      	bx	lr
	...

0800b7ec <netif_issue_reports>:
{
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	b170      	cbz	r0, 800b812 <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b7f4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b7f8:	f003 0205 	and.w	r2, r3, #5
 800b7fc:	2a05      	cmp	r2, #5
 800b7fe:	d107      	bne.n	800b810 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b800:	f014 0f01 	tst.w	r4, #1
 800b804:	d004      	beq.n	800b810 <netif_issue_reports+0x24>
 800b806:	686a      	ldr	r2, [r5, #4]
 800b808:	b112      	cbz	r2, 800b810 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b80a:	f013 0f08 	tst.w	r3, #8
 800b80e:	d108      	bne.n	800b822 <netif_issue_reports+0x36>
}
 800b810:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b812:	4b06      	ldr	r3, [pc, #24]	; (800b82c <netif_issue_reports+0x40>)
 800b814:	f240 326d 	movw	r2, #877	; 0x36d
 800b818:	4905      	ldr	r1, [pc, #20]	; (800b830 <netif_issue_reports+0x44>)
 800b81a:	4806      	ldr	r0, [pc, #24]	; (800b834 <netif_issue_reports+0x48>)
 800b81c:	f006 fefa 	bl	8012614 <iprintf>
 800b820:	e7e8      	b.n	800b7f4 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 800b822:	1d29      	adds	r1, r5, #4
 800b824:	4628      	mov	r0, r5
 800b826:	f005 fa7d 	bl	8010d24 <etharp_request>
 800b82a:	e7f1      	b.n	800b810 <netif_issue_reports+0x24>
 800b82c:	08014554 	.word	0x08014554
 800b830:	08014588 	.word	0x08014588
 800b834:	0801397c 	.word	0x0801397c

0800b838 <netif_do_set_ipaddr>:
{
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	4605      	mov	r5, r0
 800b83e:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b840:	460e      	mov	r6, r1
 800b842:	b139      	cbz	r1, 800b854 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b844:	b174      	cbz	r4, 800b864 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b846:	686b      	ldr	r3, [r5, #4]
 800b848:	6832      	ldr	r2, [r6, #0]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d112      	bne.n	800b874 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 800b84e:	2000      	movs	r0, #0
}
 800b850:	b002      	add	sp, #8
 800b852:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b854:	4b10      	ldr	r3, [pc, #64]	; (800b898 <netif_do_set_ipaddr+0x60>)
 800b856:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b85a:	4910      	ldr	r1, [pc, #64]	; (800b89c <netif_do_set_ipaddr+0x64>)
 800b85c:	4810      	ldr	r0, [pc, #64]	; (800b8a0 <netif_do_set_ipaddr+0x68>)
 800b85e:	f006 fed9 	bl	8012614 <iprintf>
 800b862:	e7ef      	b.n	800b844 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b864:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <netif_do_set_ipaddr+0x60>)
 800b866:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b86a:	490c      	ldr	r1, [pc, #48]	; (800b89c <netif_do_set_ipaddr+0x64>)
 800b86c:	480c      	ldr	r0, [pc, #48]	; (800b8a0 <netif_do_set_ipaddr+0x68>)
 800b86e:	f006 fed1 	bl	8012614 <iprintf>
 800b872:	e7e8      	b.n	800b846 <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b874:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b876:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b878:	a901      	add	r1, sp, #4
 800b87a:	4620      	mov	r0, r4
 800b87c:	f001 f96e 	bl	800cb5c <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b880:	a901      	add	r1, sp, #4
 800b882:	4620      	mov	r0, r4
 800b884:	f005 f836 	bl	80108f4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b888:	6833      	ldr	r3, [r6, #0]
 800b88a:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b88c:	2101      	movs	r1, #1
 800b88e:	4628      	mov	r0, r5
 800b890:	f7ff ffac 	bl	800b7ec <netif_issue_reports>
    return 1; /* address changed */
 800b894:	2001      	movs	r0, #1
 800b896:	e7db      	b.n	800b850 <netif_do_set_ipaddr+0x18>
 800b898:	08014554 	.word	0x08014554
 800b89c:	08013b64 	.word	0x08013b64
 800b8a0:	0801397c 	.word	0x0801397c

0800b8a4 <netif_init>:
}
 800b8a4:	4770      	bx	lr
	...

0800b8a8 <netif_set_addr>:
{
 800b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800b8ae:	4d15      	ldr	r5, [pc, #84]	; (800b904 <netif_set_addr+0x5c>)
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	bf18      	it	ne
 800b8b4:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 800b8b6:	4f13      	ldr	r7, [pc, #76]	; (800b904 <netif_set_addr+0x5c>)
 800b8b8:	2a00      	cmp	r2, #0
 800b8ba:	bf18      	it	ne
 800b8bc:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 800b8be:	4e11      	ldr	r6, [pc, #68]	; (800b904 <netif_set_addr+0x5c>)
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bf18      	it	ne
 800b8c4:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 800b8c6:	b10d      	cbz	r5, 800b8cc <netif_set_addr+0x24>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b993      	cbnz	r3, 800b8f2 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b8cc:	aa01      	add	r2, sp, #4
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f7ff ffb1 	bl	800b838 <netif_do_set_ipaddr>
 800b8d6:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	68a2      	ldr	r2, [r4, #8]
 800b8dc:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b8de:	bf18      	it	ne
 800b8e0:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b8e2:	6833      	ldr	r3, [r6, #0]
 800b8e4:	68e2      	ldr	r2, [r4, #12]
 800b8e6:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b8e8:	bf18      	it	ne
 800b8ea:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800b8ec:	b119      	cbz	r1, 800b8f6 <netif_set_addr+0x4e>
}
 800b8ee:	b003      	add	sp, #12
 800b8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	e7f0      	b.n	800b8d8 <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b8f6:	aa01      	add	r2, sp, #4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff ff9c 	bl	800b838 <netif_do_set_ipaddr>
}
 800b900:	e7f5      	b.n	800b8ee <netif_set_addr+0x46>
 800b902:	bf00      	nop
 800b904:	08016000 	.word	0x08016000

0800b908 <netif_add>:
{
 800b908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b90e:	4606      	mov	r6, r0
 800b910:	2800      	cmp	r0, #0
 800b912:	d02c      	beq.n	800b96e <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b914:	2c00      	cmp	r4, #0
 800b916:	d033      	beq.n	800b980 <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b918:	2000      	movs	r0, #0
 800b91a:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b91c:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b91e:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 800b920:	4d3c      	ldr	r5, [pc, #240]	; (800ba14 <netif_add+0x10c>)
 800b922:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 800b924:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 800b926:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 800b92a:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 800b92c:	9808      	ldr	r0, [sp, #32]
 800b92e:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 800b930:	4839      	ldr	r0, [pc, #228]	; (800ba18 <netif_add+0x110>)
 800b932:	7800      	ldrb	r0, [r0, #0]
 800b934:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 800b938:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b93a:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b93c:	4837      	ldr	r0, [pc, #220]	; (800ba1c <netif_add+0x114>)
 800b93e:	2b00      	cmp	r3, #0
 800b940:	bf08      	it	eq
 800b942:	4603      	moveq	r3, r0
 800b944:	2a00      	cmp	r2, #0
 800b946:	bf08      	it	eq
 800b948:	4602      	moveq	r2, r0
 800b94a:	2900      	cmp	r1, #0
 800b94c:	bf08      	it	eq
 800b94e:	4601      	moveq	r1, r0
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff ffa9 	bl	800b8a8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800b956:	4630      	mov	r0, r6
 800b958:	47a0      	blx	r4
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d148      	bne.n	800b9f0 <netif_add+0xe8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b95e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ba34 <netif_add+0x12c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b962:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800ba28 <netif_add+0x120>
 800b966:	4f2e      	ldr	r7, [pc, #184]	; (800ba20 <netif_add+0x118>)
 800b968:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800ba38 <netif_add+0x130>
 800b96c:	e035      	b.n	800b9da <netif_add+0xd2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b96e:	4b2c      	ldr	r3, [pc, #176]	; (800ba20 <netif_add+0x118>)
 800b970:	f240 1227 	movw	r2, #295	; 0x127
 800b974:	492b      	ldr	r1, [pc, #172]	; (800ba24 <netif_add+0x11c>)
 800b976:	482c      	ldr	r0, [pc, #176]	; (800ba28 <netif_add+0x120>)
 800b978:	f006 fe4c 	bl	8012614 <iprintf>
 800b97c:	4630      	mov	r0, r6
 800b97e:	e046      	b.n	800ba0e <netif_add+0x106>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b980:	4b27      	ldr	r3, [pc, #156]	; (800ba20 <netif_add+0x118>)
 800b982:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b986:	4929      	ldr	r1, [pc, #164]	; (800ba2c <netif_add+0x124>)
 800b988:	4827      	ldr	r0, [pc, #156]	; (800ba28 <netif_add+0x120>)
 800b98a:	f006 fe43 	bl	8012614 <iprintf>
 800b98e:	2000      	movs	r0, #0
 800b990:	e03d      	b.n	800ba0e <netif_add+0x106>
        netif->num = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 800b998:	e023      	b.n	800b9e2 <netif_add+0xda>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b99a:	463b      	mov	r3, r7
 800b99c:	f240 128b 	movw	r2, #395	; 0x18b
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	f006 fe36 	bl	8012614 <iprintf>
 800b9a8:	e010      	b.n	800b9cc <netif_add+0xc4>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	f240 128d 	movw	r2, #397	; 0x18d
 800b9b0:	491f      	ldr	r1, [pc, #124]	; (800ba30 <netif_add+0x128>)
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f006 fe2e 	bl	8012614 <iprintf>
        if (netif2->num == netif->num) {
 800b9b8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800b9bc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d007      	beq.n	800b9d4 <netif_add+0xcc>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b9c4:	6824      	ldr	r4, [r4, #0]
 800b9c6:	b1ac      	cbz	r4, 800b9f4 <netif_add+0xec>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b9c8:	42a6      	cmp	r6, r4
 800b9ca:	d0e6      	beq.n	800b99a <netif_add+0x92>
        num_netifs++;
 800b9cc:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b9ce:	2dff      	cmp	r5, #255	; 0xff
 800b9d0:	ddf2      	ble.n	800b9b8 <netif_add+0xb0>
 800b9d2:	e7ea      	b.n	800b9aa <netif_add+0xa2>
          netif->num++;
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 800b9da:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800b9de:	2bff      	cmp	r3, #255	; 0xff
 800b9e0:	d0d7      	beq.n	800b992 <netif_add+0x8a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b9e2:	f8da 4000 	ldr.w	r4, [sl]
 800b9e6:	b12c      	cbz	r4, 800b9f4 <netif_add+0xec>
      num_netifs = 0;
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	e7ed      	b.n	800b9c8 <netif_add+0xc0>
    netif_num = 0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	e007      	b.n	800ba00 <netif_add+0xf8>
    return NULL;
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e00c      	b.n	800ba0e <netif_add+0x106>
  if (netif->num == 254) {
 800b9f4:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800b9f8:	2bfe      	cmp	r3, #254	; 0xfe
 800b9fa:	d0f7      	beq.n	800b9ec <netif_add+0xe4>
    netif_num = (u8_t)(netif->num + 1);
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	4a05      	ldr	r2, [pc, #20]	; (800ba18 <netif_add+0x110>)
 800ba02:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 800ba04:	4b0b      	ldr	r3, [pc, #44]	; (800ba34 <netif_add+0x12c>)
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 800ba0a:	601e      	str	r6, [r3, #0]
  return netif;
 800ba0c:	4630      	mov	r0, r6
}
 800ba0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba12:	bf00      	nop
 800ba14:	0800b7e5 	.word	0x0800b7e5
 800ba18:	20012bb8 	.word	0x20012bb8
 800ba1c:	08016000 	.word	0x08016000
 800ba20:	08014554 	.word	0x08014554
 800ba24:	080145ac 	.word	0x080145ac
 800ba28:	0801397c 	.word	0x0801397c
 800ba2c:	080145c8 	.word	0x080145c8
 800ba30:	08014600 	.word	0x08014600
 800ba34:	2001b5fc 	.word	0x2001b5fc
 800ba38:	080145ec 	.word	0x080145ec

0800ba3c <netif_set_default>:
  netif_default = netif;
 800ba3c:	4b01      	ldr	r3, [pc, #4]	; (800ba44 <netif_set_default+0x8>)
 800ba3e:	6018      	str	r0, [r3, #0]
}
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	2001b600 	.word	0x2001b600

0800ba48 <netif_set_up>:
{
 800ba48:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ba4a:	b128      	cbz	r0, 800ba58 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ba4c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800ba50:	f013 0f01 	tst.w	r3, #1
 800ba54:	d008      	beq.n	800ba68 <netif_set_up+0x20>
}
 800ba56:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ba58:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <netif_set_up+0x30>)
 800ba5a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ba5e:	4907      	ldr	r1, [pc, #28]	; (800ba7c <netif_set_up+0x34>)
 800ba60:	4807      	ldr	r0, [pc, #28]	; (800ba80 <netif_set_up+0x38>)
 800ba62:	f006 fdd7 	bl	8012614 <iprintf>
 800ba66:	e7f6      	b.n	800ba56 <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ba68:	f043 0301 	orr.w	r3, r3, #1
 800ba6c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba70:	2103      	movs	r1, #3
 800ba72:	f7ff febb 	bl	800b7ec <netif_issue_reports>
 800ba76:	e7ee      	b.n	800ba56 <netif_set_up+0xe>
 800ba78:	08014554 	.word	0x08014554
 800ba7c:	08014630 	.word	0x08014630
 800ba80:	0801397c 	.word	0x0801397c

0800ba84 <netif_set_down>:
{
 800ba84:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ba86:	b160      	cbz	r0, 800baa2 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 800ba88:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800ba8c:	f013 0f01 	tst.w	r3, #1
 800ba90:	d006      	beq.n	800baa0 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ba92:	f023 0101 	bic.w	r1, r3, #1
 800ba96:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ba9a:	f013 0f08 	tst.w	r3, #8
 800ba9e:	d108      	bne.n	800bab2 <netif_set_down+0x2e>
}
 800baa0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <netif_set_down+0x34>)
 800baa4:	f240 329b 	movw	r2, #923	; 0x39b
 800baa8:	4904      	ldr	r1, [pc, #16]	; (800babc <netif_set_down+0x38>)
 800baaa:	4805      	ldr	r0, [pc, #20]	; (800bac0 <netif_set_down+0x3c>)
 800baac:	f006 fdb2 	bl	8012614 <iprintf>
 800bab0:	e7f6      	b.n	800baa0 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 800bab2:	f005 f873 	bl	8010b9c <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 800bab6:	e7f3      	b.n	800baa0 <netif_set_down+0x1c>
 800bab8:	08014554 	.word	0x08014554
 800babc:	0801464c 	.word	0x0801464c
 800bac0:	0801397c 	.word	0x0801397c

0800bac4 <netif_set_link_up>:
{
 800bac4:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bac6:	b130      	cbz	r0, 800bad6 <netif_set_link_up+0x12>
 800bac8:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800baca:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800bace:	f013 0f04 	tst.w	r3, #4
 800bad2:	d008      	beq.n	800bae6 <netif_set_link_up+0x22>
}
 800bad4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bad6:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <netif_set_link_up+0x3c>)
 800bad8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800badc:	4909      	ldr	r1, [pc, #36]	; (800bb04 <netif_set_link_up+0x40>)
 800bade:	480a      	ldr	r0, [pc, #40]	; (800bb08 <netif_set_link_up+0x44>)
 800bae0:	f006 fd98 	bl	8012614 <iprintf>
 800bae4:	e7f6      	b.n	800bad4 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bae6:	f043 0304 	orr.w	r3, r3, #4
 800baea:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800baee:	2103      	movs	r1, #3
 800baf0:	f7ff fe7c 	bl	800b7ec <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800baf4:	69e3      	ldr	r3, [r4, #28]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d0ec      	beq.n	800bad4 <netif_set_link_up+0x10>
 800bafa:	4620      	mov	r0, r4
 800bafc:	4798      	blx	r3
 800bafe:	e7e9      	b.n	800bad4 <netif_set_link_up+0x10>
 800bb00:	08014554 	.word	0x08014554
 800bb04:	0801466c 	.word	0x0801466c
 800bb08:	0801397c 	.word	0x0801397c

0800bb0c <netif_set_link_down>:
{
 800bb0c:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bb0e:	b160      	cbz	r0, 800bb2a <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bb10:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800bb14:	f013 0f04 	tst.w	r3, #4
 800bb18:	d006      	beq.n	800bb28 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bb1a:	f023 0304 	bic.w	r3, r3, #4
 800bb1e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bb22:	69c3      	ldr	r3, [r0, #28]
 800bb24:	b103      	cbz	r3, 800bb28 <netif_set_link_down+0x1c>
 800bb26:	4798      	blx	r3
}
 800bb28:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bb2a:	4b04      	ldr	r3, [pc, #16]	; (800bb3c <netif_set_link_down+0x30>)
 800bb2c:	f240 4206 	movw	r2, #1030	; 0x406
 800bb30:	4903      	ldr	r1, [pc, #12]	; (800bb40 <netif_set_link_down+0x34>)
 800bb32:	4804      	ldr	r0, [pc, #16]	; (800bb44 <netif_set_link_down+0x38>)
 800bb34:	f006 fd6e 	bl	8012614 <iprintf>
 800bb38:	e7f6      	b.n	800bb28 <netif_set_link_down+0x1c>
 800bb3a:	bf00      	nop
 800bb3c:	08014554 	.word	0x08014554
 800bb40:	08014690 	.word	0x08014690
 800bb44:	0801397c 	.word	0x0801397c

0800bb48 <netif_set_link_callback>:
  if (netif) {
 800bb48:	b100      	cbz	r0, 800bb4c <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800bb4a:	61c1      	str	r1, [r0, #28]
}
 800bb4c:	4770      	bx	lr
	...

0800bb50 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bb50:	4602      	mov	r2, r0
 800bb52:	b160      	cbz	r0, 800bb6e <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 800bb54:	4b07      	ldr	r3, [pc, #28]	; (800bb74 <netif_get_by_index+0x24>)
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	b150      	cbz	r0, 800bb70 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 800bb5a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800bb5e:	3301      	adds	r3, #1
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d004      	beq.n	800bb70 <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 800bb66:	6800      	ldr	r0, [r0, #0]
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d1f6      	bne.n	800bb5a <netif_get_by_index+0xa>
 800bb6c:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 800bb6e:	2000      	movs	r0, #0
}
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	2001b5fc 	.word	0x2001b5fc

0800bb78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bb78:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bb7a:	b1c0      	cbz	r0, 800bbae <pbuf_add_header_impl+0x36>
 800bb7c:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bb7e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bb82:	d225      	bcs.n	800bbd0 <pbuf_add_header_impl+0x58>
    return 1;
  }
  if (header_size_increment == 0) {
 800bb84:	b331      	cbz	r1, 800bbd4 <pbuf_add_header_impl+0x5c>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bb86:	b28c      	uxth	r4, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bb88:	8900      	ldrh	r0, [r0, #8]
 800bb8a:	4420      	add	r0, r4
 800bb8c:	b280      	uxth	r0, r0
 800bb8e:	42a0      	cmp	r0, r4
 800bb90:	d322      	bcc.n	800bbd8 <pbuf_add_header_impl+0x60>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bb92:	f993 500c 	ldrsb.w	r5, [r3, #12]
 800bb96:	2d00      	cmp	r5, #0
 800bb98:	db12      	blt.n	800bbc0 <pbuf_add_header_impl+0x48>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bb9a:	b1fa      	cbz	r2, 800bbdc <pbuf_add_header_impl+0x64>
      payload = (u8_t *)p->payload - header_size_increment;
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bba0:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bba2:	895a      	ldrh	r2, [r3, #10]
 800bba4:	4414      	add	r4, r2
 800bba6:	815c      	strh	r4, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bba8:	8118      	strh	r0, [r3, #8]


  return 0;
 800bbaa:	2000      	movs	r0, #0
 800bbac:	e013      	b.n	800bbd6 <pbuf_add_header_impl+0x5e>
  LWIP_ASSERT("p != NULL", p != NULL);
 800bbae:	4b0c      	ldr	r3, [pc, #48]	; (800bbe0 <pbuf_add_header_impl+0x68>)
 800bbb0:	f240 12df 	movw	r2, #479	; 0x1df
 800bbb4:	490b      	ldr	r1, [pc, #44]	; (800bbe4 <pbuf_add_header_impl+0x6c>)
 800bbb6:	480c      	ldr	r0, [pc, #48]	; (800bbe8 <pbuf_add_header_impl+0x70>)
 800bbb8:	f006 fd2c 	bl	8012614 <iprintf>
    return 1;
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	e00a      	b.n	800bbd6 <pbuf_add_header_impl+0x5e>
    payload = (u8_t *)p->payload - header_size_increment;
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bbc4:	f103 0210 	add.w	r2, r3, #16
 800bbc8:	4291      	cmp	r1, r2
 800bbca:	d2e9      	bcs.n	800bba0 <pbuf_add_header_impl+0x28>
      return 1;
 800bbcc:	2001      	movs	r0, #1
 800bbce:	e002      	b.n	800bbd6 <pbuf_add_header_impl+0x5e>
    return 1;
 800bbd0:	2001      	movs	r0, #1
 800bbd2:	e000      	b.n	800bbd6 <pbuf_add_header_impl+0x5e>
    return 0;
 800bbd4:	2000      	movs	r0, #0
}
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 800bbd8:	2001      	movs	r0, #1
 800bbda:	e7fc      	b.n	800bbd6 <pbuf_add_header_impl+0x5e>
      return 1;
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e7fa      	b.n	800bbd6 <pbuf_add_header_impl+0x5e>
 800bbe0:	080146b4 	.word	0x080146b4
 800bbe4:	08013d14 	.word	0x08013d14
 800bbe8:	0801397c 	.word	0x0801397c

0800bbec <pbuf_free_ooseq_callback>:
{
 800bbec:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bbee:	f006 fb61 	bl	80122b4 <sys_arch_protect>
 800bbf2:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <pbuf_free_ooseq_callback+0x28>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	f006 fb68 	bl	80122cc <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bbfc:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <pbuf_free_ooseq_callback+0x2c>)
 800bbfe:	6818      	ldr	r0, [r3, #0]
 800bc00:	b138      	cbz	r0, 800bc12 <pbuf_free_ooseq_callback+0x26>
    if (pcb->ooseq != NULL) {
 800bc02:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800bc04:	b91b      	cbnz	r3, 800bc0e <pbuf_free_ooseq_callback+0x22>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc06:	68c0      	ldr	r0, [r0, #12]
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d1fa      	bne.n	800bc02 <pbuf_free_ooseq_callback+0x16>
 800bc0c:	e001      	b.n	800bc12 <pbuf_free_ooseq_callback+0x26>
      tcp_free_ooseq(pcb);
 800bc0e:	f000 fe3b 	bl	800c888 <tcp_free_ooseq>
}
 800bc12:	bd08      	pop	{r3, pc}
 800bc14:	2001b604 	.word	0x2001b604
 800bc18:	2001b60c 	.word	0x2001b60c

0800bc1c <pbuf_alloc_reference>:
{
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460d      	mov	r5, r1
 800bc22:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bc24:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d110      	bne.n	800bc50 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bc2e:	200b      	movs	r0, #11
 800bc30:	f7ff fda4 	bl	800b77c <memp_malloc>
  if (p == NULL) {
 800bc34:	4603      	mov	r3, r0
 800bc36:	b148      	cbz	r0, 800bc4c <pbuf_alloc_reference+0x30>
  p->next = NULL;
 800bc38:	2200      	movs	r2, #0
 800bc3a:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 800bc3c:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800bc3e:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800bc40:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800bc42:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800bc44:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800bc46:	2101      	movs	r1, #1
 800bc48:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc4a:	73c2      	strb	r2, [r0, #15]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bc50:	4b03      	ldr	r3, [pc, #12]	; (800bc60 <pbuf_alloc_reference+0x44>)
 800bc52:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bc56:	4903      	ldr	r1, [pc, #12]	; (800bc64 <pbuf_alloc_reference+0x48>)
 800bc58:	4803      	ldr	r0, [pc, #12]	; (800bc68 <pbuf_alloc_reference+0x4c>)
 800bc5a:	f006 fcdb 	bl	8012614 <iprintf>
 800bc5e:	e7e6      	b.n	800bc2e <pbuf_alloc_reference+0x12>
 800bc60:	080146b4 	.word	0x080146b4
 800bc64:	080146e4 	.word	0x080146e4
 800bc68:	0801397c 	.word	0x0801397c

0800bc6c <pbuf_alloced_custom>:
{
 800bc6c:	b470      	push	{r4, r5, r6}
 800bc6e:	9c03      	ldr	r4, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bc70:	3003      	adds	r0, #3
 800bc72:	f020 0003 	bic.w	r0, r0, #3
 800bc76:	180e      	adds	r6, r1, r0
 800bc78:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800bc7c:	42ae      	cmp	r6, r5
 800bc7e:	d80f      	bhi.n	800bca0 <pbuf_alloced_custom+0x34>
  if (payload_mem != NULL) {
 800bc80:	b104      	cbz	r4, 800bc84 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bc82:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bc84:	4618      	mov	r0, r3
  p->next = NULL;
 800bc86:	2500      	movs	r5, #0
 800bc88:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 800bc8a:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 800bc8c:	8119      	strh	r1, [r3, #8]
  p->len = len;
 800bc8e:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc92:	2202      	movs	r2, #2
 800bc94:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc96:	2201      	movs	r2, #1
 800bc98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc9a:	73dd      	strb	r5, [r3, #15]
}
 800bc9c:	bc70      	pop	{r4, r5, r6}
 800bc9e:	4770      	bx	lr
    return NULL;
 800bca0:	2000      	movs	r0, #0
 800bca2:	e7fb      	b.n	800bc9c <pbuf_alloced_custom+0x30>

0800bca4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bca4:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bca6:	2200      	movs	r2, #0
 800bca8:	f7ff ff66 	bl	800bb78 <pbuf_add_header_impl>
}
 800bcac:	bd08      	pop	{r3, pc}
	...

0800bcb0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bcb0:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bcb2:	b190      	cbz	r0, 800bcda <pbuf_remove_header+0x2a>
 800bcb4:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bcb6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bcba:	d220      	bcs.n	800bcfe <pbuf_remove_header+0x4e>
    return 1;
  }
  if (header_size_decrement == 0) {
 800bcbc:	b309      	cbz	r1, 800bd02 <pbuf_remove_header+0x52>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bcbe:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bcc0:	895a      	ldrh	r2, [r3, #10]
 800bcc2:	4282      	cmp	r2, r0
 800bcc4:	d312      	bcc.n	800bcec <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bcc6:	685c      	ldr	r4, [r3, #4]
 800bcc8:	4421      	add	r1, r4
 800bcca:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bccc:	1a12      	subs	r2, r2, r0
 800bcce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bcd0:	891a      	ldrh	r2, [r3, #8]
 800bcd2:	1a10      	subs	r0, r2, r0
 800bcd4:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bcd6:	2000      	movs	r0, #0
}
 800bcd8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800bcda:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <pbuf_remove_header+0x58>)
 800bcdc:	f240 224b 	movw	r2, #587	; 0x24b
 800bce0:	490a      	ldr	r1, [pc, #40]	; (800bd0c <pbuf_remove_header+0x5c>)
 800bce2:	480b      	ldr	r0, [pc, #44]	; (800bd10 <pbuf_remove_header+0x60>)
 800bce4:	f006 fc96 	bl	8012614 <iprintf>
    return 1;
 800bce8:	2001      	movs	r0, #1
 800bcea:	e7f5      	b.n	800bcd8 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <pbuf_remove_header+0x58>)
 800bcee:	f240 2255 	movw	r2, #597	; 0x255
 800bcf2:	4908      	ldr	r1, [pc, #32]	; (800bd14 <pbuf_remove_header+0x64>)
 800bcf4:	4806      	ldr	r0, [pc, #24]	; (800bd10 <pbuf_remove_header+0x60>)
 800bcf6:	f006 fc8d 	bl	8012614 <iprintf>
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	e7ec      	b.n	800bcd8 <pbuf_remove_header+0x28>
    return 1;
 800bcfe:	2001      	movs	r0, #1
 800bd00:	e7ea      	b.n	800bcd8 <pbuf_remove_header+0x28>
    return 0;
 800bd02:	2000      	movs	r0, #0
 800bd04:	e7e8      	b.n	800bcd8 <pbuf_remove_header+0x28>
 800bd06:	bf00      	nop
 800bd08:	080146b4 	.word	0x080146b4
 800bd0c:	08013d14 	.word	0x08013d14
 800bd10:	0801397c 	.word	0x0801397c
 800bd14:	080146f8 	.word	0x080146f8

0800bd18 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bd18:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 800bd1a:	2900      	cmp	r1, #0
 800bd1c:	db03      	blt.n	800bd26 <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f7ff ff2a 	bl	800bb78 <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 800bd24:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bd26:	4249      	negs	r1, r1
 800bd28:	f7ff ffc2 	bl	800bcb0 <pbuf_remove_header>
 800bd2c:	e7fa      	b.n	800bd24 <pbuf_header_force+0xc>
	...

0800bd30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bd34:	b140      	cbz	r0, 800bd48 <pbuf_free+0x18>
 800bd36:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bd38:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bd3a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800bdf8 <pbuf_free+0xc8>
 800bd3e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800be0c <pbuf_free+0xdc>
 800bd42:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800be00 <pbuf_free+0xd0>
 800bd46:	e01a      	b.n	800bd7e <pbuf_free+0x4e>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bd48:	4b2b      	ldr	r3, [pc, #172]	; (800bdf8 <pbuf_free+0xc8>)
 800bd4a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bd4e:	492b      	ldr	r1, [pc, #172]	; (800bdfc <pbuf_free+0xcc>)
 800bd50:	482b      	ldr	r0, [pc, #172]	; (800be00 <pbuf_free+0xd0>)
 800bd52:	f006 fc5f 	bl	8012614 <iprintf>
    return 0;
 800bd56:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800bd58:	4630      	mov	r0, r6
 800bd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bd5e:	464b      	mov	r3, r9
 800bd60:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bd64:	4651      	mov	r1, sl
 800bd66:	4640      	mov	r0, r8
 800bd68:	f006 fc54 	bl	8012614 <iprintf>
 800bd6c:	e00d      	b.n	800bd8a <pbuf_free+0x5a>
        pc->custom_free_function(p);
 800bd6e:	6923      	ldr	r3, [r4, #16]
 800bd70:	4620      	mov	r0, r4
 800bd72:	4798      	blx	r3
      count++;
 800bd74:	3601      	adds	r6, #1
 800bd76:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800bd78:	2d00      	cmp	r5, #0
 800bd7a:	d0ed      	beq.n	800bd58 <pbuf_free+0x28>
      p = q;
 800bd7c:	462c      	mov	r4, r5
    SYS_ARCH_PROTECT(old_level);
 800bd7e:	f006 fa99 	bl	80122b4 <sys_arch_protect>
 800bd82:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bd84:	7ba3      	ldrb	r3, [r4, #14]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0e9      	beq.n	800bd5e <pbuf_free+0x2e>
    ref = --(p->ref);
 800bd8a:	7ba5      	ldrb	r5, [r4, #14]
 800bd8c:	3d01      	subs	r5, #1
 800bd8e:	b2ed      	uxtb	r5, r5
 800bd90:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800bd92:	4638      	mov	r0, r7
 800bd94:	f006 fa9a 	bl	80122cc <sys_arch_unprotect>
    if (ref == 0) {
 800bd98:	2d00      	cmp	r5, #0
 800bd9a:	d1dd      	bne.n	800bd58 <pbuf_free+0x28>
      q = p->next;
 800bd9c:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bd9e:	7b63      	ldrb	r3, [r4, #13]
 800bda0:	f013 0f02 	tst.w	r3, #2
 800bda4:	d00a      	beq.n	800bdbc <pbuf_free+0x8c>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1e0      	bne.n	800bd6e <pbuf_free+0x3e>
 800bdac:	464b      	mov	r3, r9
 800bdae:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bdb2:	4914      	ldr	r1, [pc, #80]	; (800be04 <pbuf_free+0xd4>)
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	f006 fc2d 	bl	8012614 <iprintf>
 800bdba:	e7d8      	b.n	800bd6e <pbuf_free+0x3e>
      alloc_src = pbuf_get_allocsrc(p);
 800bdbc:	7b23      	ldrb	r3, [r4, #12]
 800bdbe:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d006      	beq.n	800bdd4 <pbuf_free+0xa4>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d009      	beq.n	800bdde <pbuf_free+0xae>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bdca:	b96b      	cbnz	r3, 800bde8 <pbuf_free+0xb8>
          mem_free(p);
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f7ff f9f5 	bl	800b1bc <mem_free>
 800bdd2:	e7cf      	b.n	800bd74 <pbuf_free+0x44>
          memp_free(MEMP_PBUF_POOL, p);
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	200c      	movs	r0, #12
 800bdd8:	f7ff fcea 	bl	800b7b0 <memp_free>
 800bddc:	e7ca      	b.n	800bd74 <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 800bdde:	4621      	mov	r1, r4
 800bde0:	200b      	movs	r0, #11
 800bde2:	f7ff fce5 	bl	800b7b0 <memp_free>
 800bde6:	e7c5      	b.n	800bd74 <pbuf_free+0x44>
          LWIP_ASSERT("invalid pbuf type", 0);
 800bde8:	464b      	mov	r3, r9
 800bdea:	f240 320f 	movw	r2, #783	; 0x30f
 800bdee:	4906      	ldr	r1, [pc, #24]	; (800be08 <pbuf_free+0xd8>)
 800bdf0:	4640      	mov	r0, r8
 800bdf2:	f006 fc0f 	bl	8012614 <iprintf>
 800bdf6:	e7bd      	b.n	800bd74 <pbuf_free+0x44>
 800bdf8:	080146b4 	.word	0x080146b4
 800bdfc:	08013d14 	.word	0x08013d14
 800be00:	0801397c 	.word	0x0801397c
 800be04:	08014730 	.word	0x08014730
 800be08:	08014754 	.word	0x08014754
 800be0c:	08014718 	.word	0x08014718

0800be10 <pbuf_alloc>:
{
 800be10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 800be16:	b285      	uxth	r5, r0
  switch (type) {
 800be18:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 800be1c:	d03d      	beq.n	800be9a <pbuf_alloc+0x8a>
 800be1e:	4604      	mov	r4, r0
 800be20:	d80e      	bhi.n	800be40 <pbuf_alloc+0x30>
 800be22:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800be26:	b29b      	uxth	r3, r3
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d02f      	beq.n	800be8c <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800be2c:	4b47      	ldr	r3, [pc, #284]	; (800bf4c <pbuf_alloc+0x13c>)
 800be2e:	f240 1227 	movw	r2, #295	; 0x127
 800be32:	4947      	ldr	r1, [pc, #284]	; (800bf50 <pbuf_alloc+0x140>)
 800be34:	4847      	ldr	r0, [pc, #284]	; (800bf54 <pbuf_alloc+0x144>)
 800be36:	f006 fbed 	bl	8012614 <iprintf>
      return NULL;
 800be3a:	f04f 0800 	mov.w	r8, #0
 800be3e:	e029      	b.n	800be94 <pbuf_alloc+0x84>
  switch (type) {
 800be40:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800be44:	d1f2      	bne.n	800be2c <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800be46:	1ceb      	adds	r3, r5, #3
 800be48:	f023 0303 	bic.w	r3, r3, #3
 800be4c:	1cca      	adds	r2, r1, #3
 800be4e:	f022 0503 	bic.w	r5, r2, #3
 800be52:	442b      	add	r3, r5
 800be54:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800be56:	f103 0010 	add.w	r0, r3, #16
 800be5a:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be5c:	42ab      	cmp	r3, r5
 800be5e:	d36e      	bcc.n	800bf3e <pbuf_alloc+0x12e>
 800be60:	4285      	cmp	r5, r0
 800be62:	d86f      	bhi.n	800bf44 <pbuf_alloc+0x134>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800be64:	f7ff fb6a 	bl	800b53c <mem_malloc>
      if (p == NULL) {
 800be68:	4680      	mov	r8, r0
 800be6a:	b198      	cbz	r0, 800be94 <pbuf_alloc+0x84>
  p->next = NULL;
 800be6c:	2200      	movs	r2, #0
 800be6e:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800be70:	1903      	adds	r3, r0, r4
 800be72:	3313      	adds	r3, #19
 800be74:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 800be78:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 800be7a:	8106      	strh	r6, [r0, #8]
  p->len = len;
 800be7c:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 800be7e:	2380      	movs	r3, #128	; 0x80
 800be80:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800be82:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800be84:	2301      	movs	r3, #1
 800be86:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800be88:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800be8a:	e003      	b.n	800be94 <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 800be8c:	2000      	movs	r0, #0
 800be8e:	f7ff fec5 	bl	800bc1c <pbuf_alloc_reference>
 800be92:	4680      	mov	r8, r0
}
 800be94:	4640      	mov	r0, r8
 800be96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 800be9a:	2400      	movs	r4, #0
 800be9c:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800be9e:	f04f 0a0c 	mov.w	sl, #12
  p->next = NULL;
 800bea2:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 800bea4:	f04f 0b82 	mov.w	fp, #130	; 0x82
 800bea8:	e025      	b.n	800bef6 <pbuf_alloc+0xe6>
  SYS_ARCH_PROTECT(old_level);
 800beaa:	f006 fa03 	bl	80122b4 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800beae:	4b2a      	ldr	r3, [pc, #168]	; (800bf58 <pbuf_alloc+0x148>)
 800beb0:	781d      	ldrb	r5, [r3, #0]
 800beb2:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800beb4:	2201      	movs	r2, #1
 800beb6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800beb8:	f006 fa08 	bl	80122cc <sys_arch_unprotect>
  if (!queued) {
 800bebc:	b13d      	cbz	r5, 800bece <pbuf_alloc+0xbe>
          if (p) {
 800bebe:	f1b8 0f00 	cmp.w	r8, #0
 800bec2:	d0e7      	beq.n	800be94 <pbuf_alloc+0x84>
            pbuf_free(p);
 800bec4:	4640      	mov	r0, r8
 800bec6:	f7ff ff33 	bl	800bd30 <pbuf_free>
          return NULL;
 800beca:	46a0      	mov	r8, r4
 800becc:	e7e2      	b.n	800be94 <pbuf_alloc+0x84>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bece:	2100      	movs	r1, #0
 800bed0:	4822      	ldr	r0, [pc, #136]	; (800bf5c <pbuf_alloc+0x14c>)
 800bed2:	f7ff f89d 	bl	800b010 <tcpip_try_callback>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d0f1      	beq.n	800bebe <pbuf_alloc+0xae>
 800beda:	f006 f9eb 	bl	80122b4 <sys_arch_protect>
 800bede:	4b1e      	ldr	r3, [pc, #120]	; (800bf58 <pbuf_alloc+0x148>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	f006 f9f2 	bl	80122cc <sys_arch_unprotect>
 800bee8:	e7e9      	b.n	800bebe <pbuf_alloc+0xae>
          p = q;
 800beea:	4680      	mov	r8, r0
        rem_len = (u16_t)(rem_len - qlen);
 800beec:	1a76      	subs	r6, r6, r1
 800beee:	b2b6      	uxth	r6, r6
        offset = 0;
 800bef0:	463d      	mov	r5, r7
      } while (rem_len > 0);
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	d0ce      	beq.n	800be94 <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bef6:	46a1      	mov	r9, r4
 800bef8:	4650      	mov	r0, sl
 800befa:	f7ff fc3f 	bl	800b77c <memp_malloc>
        if (q == NULL) {
 800befe:	4604      	mov	r4, r0
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d0d2      	beq.n	800beaa <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bf04:	1ce9      	adds	r1, r5, #3
 800bf06:	f021 0103 	bic.w	r1, r1, #3
 800bf0a:	f5c1 7101 	rsb	r1, r1, #516	; 0x204
 800bf0e:	b289      	uxth	r1, r1
 800bf10:	42b1      	cmp	r1, r6
 800bf12:	bf28      	it	cs
 800bf14:	4631      	movcs	r1, r6
  p->next = NULL;
 800bf16:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bf18:	4405      	add	r5, r0
 800bf1a:	3513      	adds	r5, #19
 800bf1c:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 800bf20:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 800bf22:	8106      	strh	r6, [r0, #8]
  p->len = len;
 800bf24:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800bf26:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 800bf2a:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bf30:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 800bf32:	f1b8 0f00 	cmp.w	r8, #0
 800bf36:	d0d8      	beq.n	800beea <pbuf_alloc+0xda>
          last->next = q;
 800bf38:	f8c9 0000 	str.w	r0, [r9]
 800bf3c:	e7d6      	b.n	800beec <pbuf_alloc+0xdc>
        return NULL;
 800bf3e:	f04f 0800 	mov.w	r8, #0
 800bf42:	e7a7      	b.n	800be94 <pbuf_alloc+0x84>
 800bf44:	f04f 0800 	mov.w	r8, #0
 800bf48:	e7a4      	b.n	800be94 <pbuf_alloc+0x84>
 800bf4a:	bf00      	nop
 800bf4c:	080146b4 	.word	0x080146b4
 800bf50:	08014768 	.word	0x08014768
 800bf54:	0801397c 	.word	0x0801397c
 800bf58:	2001b604 	.word	0x2001b604
 800bf5c:	0800bbed 	.word	0x0800bbed

0800bf60 <pbuf_realloc>:
{
 800bf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf64:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf66:	4604      	mov	r4, r0
 800bf68:	b168      	cbz	r0, 800bf86 <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 800bf6a:	8927      	ldrh	r7, [r4, #8]
 800bf6c:	42b7      	cmp	r7, r6
 800bf6e:	d935      	bls.n	800bfdc <pbuf_realloc+0x7c>
  while (rem_len > q->len) {
 800bf70:	8963      	ldrh	r3, [r4, #10]
 800bf72:	429e      	cmp	r6, r3
 800bf74:	d923      	bls.n	800bfbe <pbuf_realloc+0x5e>
  rem_len = new_len;
 800bf76:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf78:	f8df a090 	ldr.w	sl, [pc, #144]	; 800c00c <pbuf_realloc+0xac>
 800bf7c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800c01c <pbuf_realloc+0xbc>
 800bf80:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800c014 <pbuf_realloc+0xb4>
 800bf84:	e00a      	b.n	800bf9c <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf86:	4b21      	ldr	r3, [pc, #132]	; (800c00c <pbuf_realloc+0xac>)
 800bf88:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bf8c:	4920      	ldr	r1, [pc, #128]	; (800c010 <pbuf_realloc+0xb0>)
 800bf8e:	4821      	ldr	r0, [pc, #132]	; (800c014 <pbuf_realloc+0xb4>)
 800bf90:	f006 fb40 	bl	8012614 <iprintf>
 800bf94:	e7e9      	b.n	800bf6a <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 800bf96:	8963      	ldrh	r3, [r4, #10]
 800bf98:	42ab      	cmp	r3, r5
 800bf9a:	d211      	bcs.n	800bfc0 <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 800bf9c:	1aed      	subs	r5, r5, r3
 800bf9e:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bfa0:	1bf3      	subs	r3, r6, r7
 800bfa2:	8922      	ldrh	r2, [r4, #8]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800bfa8:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bfaa:	2c00      	cmp	r4, #0
 800bfac:	d1f3      	bne.n	800bf96 <pbuf_realloc+0x36>
 800bfae:	4653      	mov	r3, sl
 800bfb0:	f240 12af 	movw	r2, #431	; 0x1af
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	f006 fb2c 	bl	8012614 <iprintf>
 800bfbc:	e7eb      	b.n	800bf96 <pbuf_realloc+0x36>
  rem_len = new_len;
 800bfbe:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bfc0:	7b22      	ldrb	r2, [r4, #12]
 800bfc2:	f012 0f0f 	tst.w	r2, #15
 800bfc6:	d101      	bne.n	800bfcc <pbuf_realloc+0x6c>
 800bfc8:	42ab      	cmp	r3, r5
 800bfca:	d109      	bne.n	800bfe0 <pbuf_realloc+0x80>
  q->len = rem_len;
 800bfcc:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800bfce:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	b108      	cbz	r0, 800bfd8 <pbuf_realloc+0x78>
    pbuf_free(q->next);
 800bfd4:	f7ff feac 	bl	800bd30 <pbuf_free>
  q->next = NULL;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	6023      	str	r3, [r4, #0]
}
 800bfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bfe0:	7b63      	ldrb	r3, [r4, #13]
 800bfe2:	f013 0f02 	tst.w	r3, #2
 800bfe6:	d1f1      	bne.n	800bfcc <pbuf_realloc+0x6c>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bfe8:	6863      	ldr	r3, [r4, #4]
 800bfea:	1b1b      	subs	r3, r3, r4
 800bfec:	18e9      	adds	r1, r5, r3
 800bfee:	b289      	uxth	r1, r1
 800bff0:	4620      	mov	r0, r4
 800bff2:	f7ff f9e1 	bl	800b3b8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bff6:	4604      	mov	r4, r0
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d1e7      	bne.n	800bfcc <pbuf_realloc+0x6c>
 800bffc:	4b03      	ldr	r3, [pc, #12]	; (800c00c <pbuf_realloc+0xac>)
 800bffe:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c002:	4905      	ldr	r1, [pc, #20]	; (800c018 <pbuf_realloc+0xb8>)
 800c004:	4803      	ldr	r0, [pc, #12]	; (800c014 <pbuf_realloc+0xb4>)
 800c006:	f006 fb05 	bl	8012614 <iprintf>
 800c00a:	e7df      	b.n	800bfcc <pbuf_realloc+0x6c>
 800c00c:	080146b4 	.word	0x080146b4
 800c010:	08014784 	.word	0x08014784
 800c014:	0801397c 	.word	0x0801397c
 800c018:	080147b4 	.word	0x080147b4
 800c01c:	0801479c 	.word	0x0801479c

0800c020 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800c020:	4603      	mov	r3, r0
 800c022:	b130      	cbz	r0, 800c032 <pbuf_clen+0x12>
  len = 0;
 800c024:	2000      	movs	r0, #0
    ++len;
 800c026:	3001      	adds	r0, #1
 800c028:	b280      	uxth	r0, r0
    p = p->next;
 800c02a:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1fa      	bne.n	800c026 <pbuf_clen+0x6>
 800c030:	4770      	bx	lr
  len = 0;
 800c032:	2000      	movs	r0, #0
  }
  return len;
}
 800c034:	4770      	bx	lr
	...

0800c038 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800c038:	b198      	cbz	r0, 800c062 <pbuf_ref+0x2a>
{
 800c03a:	b510      	push	{r4, lr}
 800c03c:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c03e:	f006 f939 	bl	80122b4 <sys_arch_protect>
 800c042:	7ba3      	ldrb	r3, [r4, #14]
 800c044:	3301      	adds	r3, #1
 800c046:	73a3      	strb	r3, [r4, #14]
 800c048:	f006 f940 	bl	80122cc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c04c:	7ba3      	ldrb	r3, [r4, #14]
 800c04e:	b103      	cbz	r3, 800c052 <pbuf_ref+0x1a>
  }
}
 800c050:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c052:	4b04      	ldr	r3, [pc, #16]	; (800c064 <pbuf_ref+0x2c>)
 800c054:	f240 3242 	movw	r2, #834	; 0x342
 800c058:	4903      	ldr	r1, [pc, #12]	; (800c068 <pbuf_ref+0x30>)
 800c05a:	4804      	ldr	r0, [pc, #16]	; (800c06c <pbuf_ref+0x34>)
 800c05c:	f006 fada 	bl	8012614 <iprintf>
}
 800c060:	e7f6      	b.n	800c050 <pbuf_ref+0x18>
 800c062:	4770      	bx	lr
 800c064:	080146b4 	.word	0x080146b4
 800c068:	080147d0 	.word	0x080147d0
 800c06c:	0801397c 	.word	0x0801397c

0800c070 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c070:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c072:	b130      	cbz	r0, 800c082 <pbuf_cat+0x12>
 800c074:	460d      	mov	r5, r1
 800c076:	4602      	mov	r2, r0
 800c078:	b119      	cbz	r1, 800c082 <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c07a:	6804      	ldr	r4, [r0, #0]
 800c07c:	b954      	cbnz	r4, 800c094 <pbuf_cat+0x24>
 800c07e:	4604      	mov	r4, r0
 800c080:	e010      	b.n	800c0a4 <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c082:	4b15      	ldr	r3, [pc, #84]	; (800c0d8 <pbuf_cat+0x68>)
 800c084:	f240 3259 	movw	r2, #857	; 0x359
 800c088:	4914      	ldr	r1, [pc, #80]	; (800c0dc <pbuf_cat+0x6c>)
 800c08a:	4815      	ldr	r0, [pc, #84]	; (800c0e0 <pbuf_cat+0x70>)
 800c08c:	f006 fac2 	bl	8012614 <iprintf>
 800c090:	e021      	b.n	800c0d6 <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 800c092:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c094:	8913      	ldrh	r3, [r2, #8]
 800c096:	8928      	ldrh	r0, [r5, #8]
 800c098:	4403      	add	r3, r0
 800c09a:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	4622      	mov	r2, r4
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1f6      	bne.n	800c092 <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c0a4:	8922      	ldrh	r2, [r4, #8]
 800c0a6:	8963      	ldrh	r3, [r4, #10]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d00f      	beq.n	800c0cc <pbuf_cat+0x5c>
 800c0ac:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <pbuf_cat+0x68>)
 800c0ae:	f240 3262 	movw	r2, #866	; 0x362
 800c0b2:	490c      	ldr	r1, [pc, #48]	; (800c0e4 <pbuf_cat+0x74>)
 800c0b4:	480a      	ldr	r0, [pc, #40]	; (800c0e0 <pbuf_cat+0x70>)
 800c0b6:	f006 faad 	bl	8012614 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	b133      	cbz	r3, 800c0cc <pbuf_cat+0x5c>
 800c0be:	4b06      	ldr	r3, [pc, #24]	; (800c0d8 <pbuf_cat+0x68>)
 800c0c0:	f240 3263 	movw	r2, #867	; 0x363
 800c0c4:	4908      	ldr	r1, [pc, #32]	; (800c0e8 <pbuf_cat+0x78>)
 800c0c6:	4806      	ldr	r0, [pc, #24]	; (800c0e0 <pbuf_cat+0x70>)
 800c0c8:	f006 faa4 	bl	8012614 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c0cc:	8923      	ldrh	r3, [r4, #8]
 800c0ce:	892a      	ldrh	r2, [r5, #8]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c0d4:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}
 800c0d8:	080146b4 	.word	0x080146b4
 800c0dc:	080147e4 	.word	0x080147e4
 800c0e0:	0801397c 	.word	0x0801397c
 800c0e4:	0801481c 	.word	0x0801481c
 800c0e8:	0801484c 	.word	0x0801484c

0800c0ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c0f0:	b178      	cbz	r0, 800c112 <pbuf_copy+0x26>
 800c0f2:	460d      	mov	r5, r1
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	b161      	cbz	r1, 800c112 <pbuf_copy+0x26>
 800c0f8:	8902      	ldrh	r2, [r0, #8]
 800c0fa:	890b      	ldrh	r3, [r1, #8]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d308      	bcc.n	800c112 <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 800c100:	2700      	movs	r7, #0
 800c102:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c104:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c224 <pbuf_copy+0x138>
 800c108:	f8df b130 	ldr.w	fp, [pc, #304]	; 800c23c <pbuf_copy+0x150>
 800c10c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800c22c <pbuf_copy+0x140>
 800c110:	e050      	b.n	800c1b4 <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c112:	4b44      	ldr	r3, [pc, #272]	; (800c224 <pbuf_copy+0x138>)
 800c114:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c118:	4943      	ldr	r1, [pc, #268]	; (800c228 <pbuf_copy+0x13c>)
 800c11a:	4844      	ldr	r0, [pc, #272]	; (800c22c <pbuf_copy+0x140>)
 800c11c:	f006 fa7a 	bl	8012614 <iprintf>
 800c120:	f06f 000f 	mvn.w	r0, #15
 800c124:	e038      	b.n	800c198 <pbuf_copy+0xac>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c126:	4653      	mov	r3, sl
 800c128:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c12c:	4659      	mov	r1, fp
 800c12e:	4648      	mov	r0, r9
 800c130:	f006 fa70 	bl	8012614 <iprintf>
 800c134:	e052      	b.n	800c1dc <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c136:	4653      	mov	r3, sl
 800c138:	f240 32da 	movw	r2, #986	; 0x3da
 800c13c:	493c      	ldr	r1, [pc, #240]	; (800c230 <pbuf_copy+0x144>)
 800c13e:	4648      	mov	r0, r9
 800c140:	f006 fa68 	bl	8012614 <iprintf>
 800c144:	e04d      	b.n	800c1e2 <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800c146:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c148:	b906      	cbnz	r6, 800c14c <pbuf_copy+0x60>
 800c14a:	b915      	cbnz	r5, 800c152 <pbuf_copy+0x66>
      offset_to = 0;
 800c14c:	f04f 0800 	mov.w	r8, #0
 800c150:	e04e      	b.n	800c1f0 <pbuf_copy+0x104>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c152:	4b34      	ldr	r3, [pc, #208]	; (800c224 <pbuf_copy+0x138>)
 800c154:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c158:	4936      	ldr	r1, [pc, #216]	; (800c234 <pbuf_copy+0x148>)
 800c15a:	4834      	ldr	r0, [pc, #208]	; (800c22c <pbuf_copy+0x140>)
 800c15c:	f006 fa5a 	bl	8012614 <iprintf>
 800c160:	f06f 000f 	mvn.w	r0, #15
 800c164:	e018      	b.n	800c198 <pbuf_copy+0xac>
 800c166:	2700      	movs	r7, #0
 800c168:	e01b      	b.n	800c1a2 <pbuf_copy+0xb6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c16a:	682b      	ldr	r3, [r5, #0]
 800c16c:	b1eb      	cbz	r3, 800c1aa <pbuf_copy+0xbe>
 800c16e:	4b2d      	ldr	r3, [pc, #180]	; (800c224 <pbuf_copy+0x138>)
 800c170:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c174:	4930      	ldr	r1, [pc, #192]	; (800c238 <pbuf_copy+0x14c>)
 800c176:	482d      	ldr	r0, [pc, #180]	; (800c22c <pbuf_copy+0x140>)
 800c178:	f006 fa4c 	bl	8012614 <iprintf>
 800c17c:	f06f 0005 	mvn.w	r0, #5
 800c180:	e00a      	b.n	800c198 <pbuf_copy+0xac>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c182:	4b28      	ldr	r3, [pc, #160]	; (800c224 <pbuf_copy+0x138>)
 800c184:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c188:	492b      	ldr	r1, [pc, #172]	; (800c238 <pbuf_copy+0x14c>)
 800c18a:	4828      	ldr	r0, [pc, #160]	; (800c22c <pbuf_copy+0x140>)
 800c18c:	f006 fa42 	bl	8012614 <iprintf>
 800c190:	f06f 0005 	mvn.w	r0, #5
 800c194:	e000      	b.n	800c198 <pbuf_copy+0xac>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c196:	2000      	movs	r0, #0
}
 800c198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 800c19c:	8973      	ldrh	r3, [r6, #10]
 800c19e:	4598      	cmp	r8, r3
 800c1a0:	d038      	beq.n	800c214 <pbuf_copy+0x128>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c1a2:	896a      	ldrh	r2, [r5, #10]
 800c1a4:	892b      	ldrh	r3, [r5, #8]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d0df      	beq.n	800c16a <pbuf_copy+0x7e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c1aa:	b11e      	cbz	r6, 800c1b4 <pbuf_copy+0xc8>
 800c1ac:	8932      	ldrh	r2, [r6, #8]
 800c1ae:	8973      	ldrh	r3, [r6, #10]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d026      	beq.n	800c202 <pbuf_copy+0x116>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c1b4:	8974      	ldrh	r4, [r6, #10]
 800c1b6:	eba4 0408 	sub.w	r4, r4, r8
 800c1ba:	896b      	ldrh	r3, [r5, #10]
 800c1bc:	1bdb      	subs	r3, r3, r7
 800c1be:	429c      	cmp	r4, r3
 800c1c0:	bf28      	it	cs
 800c1c2:	461c      	movcs	r4, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c1c4:	6870      	ldr	r0, [r6, #4]
 800c1c6:	6869      	ldr	r1, [r5, #4]
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	4439      	add	r1, r7
 800c1cc:	4440      	add	r0, r8
 800c1ce:	f006 f9b0 	bl	8012532 <memcpy>
    offset_to += len;
 800c1d2:	44a0      	add	r8, r4
    offset_from += len;
 800c1d4:	4427      	add	r7, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c1d6:	8973      	ldrh	r3, [r6, #10]
 800c1d8:	4543      	cmp	r3, r8
 800c1da:	d3a4      	bcc.n	800c126 <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c1dc:	896b      	ldrh	r3, [r5, #10]
 800c1de:	42bb      	cmp	r3, r7
 800c1e0:	d3a9      	bcc.n	800c136 <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 800c1e2:	896b      	ldrh	r3, [r5, #10]
 800c1e4:	42bb      	cmp	r3, r7
 800c1e6:	d8d9      	bhi.n	800c19c <pbuf_copy+0xb0>
      p_from = p_from->next;
 800c1e8:	682d      	ldr	r5, [r5, #0]
    if (offset_to == p_to->len) {
 800c1ea:	8973      	ldrh	r3, [r6, #10]
 800c1ec:	4543      	cmp	r3, r8
 800c1ee:	d0aa      	beq.n	800c146 <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c1f0:	2d00      	cmp	r5, #0
 800c1f2:	d1b8      	bne.n	800c166 <pbuf_copy+0x7a>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c1f4:	2e00      	cmp	r6, #0
 800c1f6:	d0ce      	beq.n	800c196 <pbuf_copy+0xaa>
 800c1f8:	8972      	ldrh	r2, [r6, #10]
 800c1fa:	8933      	ldrh	r3, [r6, #8]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d107      	bne.n	800c210 <pbuf_copy+0x124>
 800c200:	2700      	movs	r7, #0
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c202:	6833      	ldr	r3, [r6, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1bc      	bne.n	800c182 <pbuf_copy+0x96>
  } while (p_from);
 800c208:	2d00      	cmp	r5, #0
 800c20a:	d1d3      	bne.n	800c1b4 <pbuf_copy+0xc8>
  return ERR_OK;
 800c20c:	2000      	movs	r0, #0
 800c20e:	e7c3      	b.n	800c198 <pbuf_copy+0xac>
 800c210:	2000      	movs	r0, #0
 800c212:	e7c1      	b.n	800c198 <pbuf_copy+0xac>
      p_to = p_to->next;
 800c214:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c216:	b90e      	cbnz	r6, 800c21c <pbuf_copy+0x130>
 800c218:	2d00      	cmp	r5, #0
 800c21a:	d19a      	bne.n	800c152 <pbuf_copy+0x66>
      offset_to = 0;
 800c21c:	f04f 0800 	mov.w	r8, #0
 800c220:	e7bf      	b.n	800c1a2 <pbuf_copy+0xb6>
 800c222:	bf00      	nop
 800c224:	080146b4 	.word	0x080146b4
 800c228:	0801485c 	.word	0x0801485c
 800c22c:	0801397c 	.word	0x0801397c
 800c230:	080148a4 	.word	0x080148a4
 800c234:	080148c0 	.word	0x080148c0
 800c238:	080148d0 	.word	0x080148d0
 800c23c:	0801488c 	.word	0x0801488c

0800c240 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c244:	b140      	cbz	r0, 800c258 <pbuf_copy_partial+0x18>
 800c246:	4688      	mov	r8, r1
 800c248:	4692      	mov	sl, r2
 800c24a:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c24c:	b189      	cbz	r1, 800c272 <pbuf_copy_partial+0x32>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c24e:	b172      	cbz	r2, 800c26e <pbuf_copy_partial+0x2e>
  u16_t copied_total = 0;
 800c250:	2700      	movs	r7, #0
  u16_t left = 0;
 800c252:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 800c254:	46b9      	mov	r9, r7
 800c256:	e031      	b.n	800c2bc <pbuf_copy_partial+0x7c>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c258:	4b1c      	ldr	r3, [pc, #112]	; (800c2cc <pbuf_copy_partial+0x8c>)
 800c25a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c25e:	491c      	ldr	r1, [pc, #112]	; (800c2d0 <pbuf_copy_partial+0x90>)
 800c260:	481c      	ldr	r0, [pc, #112]	; (800c2d4 <pbuf_copy_partial+0x94>)
 800c262:	f006 f9d7 	bl	8012614 <iprintf>
 800c266:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 800c268:	4638      	mov	r0, r7
 800c26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u16_t copied_total = 0;
 800c26e:	4617      	mov	r7, r2
 800c270:	e7fa      	b.n	800c268 <pbuf_copy_partial+0x28>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c272:	4b16      	ldr	r3, [pc, #88]	; (800c2cc <pbuf_copy_partial+0x8c>)
 800c274:	f240 420b 	movw	r2, #1035	; 0x40b
 800c278:	4917      	ldr	r1, [pc, #92]	; (800c2d8 <pbuf_copy_partial+0x98>)
 800c27a:	4816      	ldr	r0, [pc, #88]	; (800c2d4 <pbuf_copy_partial+0x94>)
 800c27c:	f006 f9ca 	bl	8012614 <iprintf>
 800c280:	2700      	movs	r7, #0
 800c282:	e7f1      	b.n	800c268 <pbuf_copy_partial+0x28>
      buf_copy_len = (u16_t)(p->len - offset);
 800c284:	896c      	ldrh	r4, [r5, #10]
 800c286:	1ae4      	subs	r4, r4, r3
 800c288:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 800c28a:	4554      	cmp	r4, sl
 800c28c:	bf28      	it	cs
 800c28e:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c290:	6869      	ldr	r1, [r5, #4]
 800c292:	4622      	mov	r2, r4
 800c294:	4419      	add	r1, r3
 800c296:	eb08 0006 	add.w	r0, r8, r6
 800c29a:	f006 f94a 	bl	8012532 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c29e:	4427      	add	r7, r4
 800c2a0:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 800c2a2:	4426      	add	r6, r4
 800c2a4:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800c2a6:	ebaa 0404 	sub.w	r4, sl, r4
 800c2aa:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 800c2ae:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c2b0:	682d      	ldr	r5, [r5, #0]
 800c2b2:	f1ba 0f00 	cmp.w	sl, #0
 800c2b6:	d0d7      	beq.n	800c268 <pbuf_copy_partial+0x28>
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	d0d5      	beq.n	800c268 <pbuf_copy_partial+0x28>
    if ((offset != 0) && (offset >= p->len)) {
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d0e1      	beq.n	800c284 <pbuf_copy_partial+0x44>
 800c2c0:	8969      	ldrh	r1, [r5, #10]
 800c2c2:	4299      	cmp	r1, r3
 800c2c4:	d8de      	bhi.n	800c284 <pbuf_copy_partial+0x44>
      offset = (u16_t)(offset - p->len);
 800c2c6:	1a5b      	subs	r3, r3, r1
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	e7f1      	b.n	800c2b0 <pbuf_copy_partial+0x70>
 800c2cc:	080146b4 	.word	0x080146b4
 800c2d0:	080148fc 	.word	0x080148fc
 800c2d4:	0801397c 	.word	0x0801397c
 800c2d8:	0801491c 	.word	0x0801491c

0800c2dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c2e0:	460a      	mov	r2, r1
 800c2e2:	8921      	ldrh	r1, [r4, #8]
 800c2e4:	f7ff fd94 	bl	800be10 <pbuf_alloc>
  if (q == NULL) {
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	b118      	cbz	r0, 800c2f4 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	f7ff fefd 	bl	800c0ec <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c2f2:	b908      	cbnz	r0, 800c2f8 <pbuf_clone+0x1c>
  return q;
}
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c2f8:	4b03      	ldr	r3, [pc, #12]	; (800c308 <pbuf_clone+0x2c>)
 800c2fa:	f240 5224 	movw	r2, #1316	; 0x524
 800c2fe:	4903      	ldr	r1, [pc, #12]	; (800c30c <pbuf_clone+0x30>)
 800c300:	4803      	ldr	r0, [pc, #12]	; (800c310 <pbuf_clone+0x34>)
 800c302:	f006 f987 	bl	8012614 <iprintf>
 800c306:	e7f5      	b.n	800c2f4 <pbuf_clone+0x18>
 800c308:	080146b4 	.word	0x080146b4
 800c30c:	08014940 	.word	0x08014940
 800c310:	0801397c 	.word	0x0801397c

0800c314 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c314:	b470      	push	{r4, r5, r6}
  u8_t i;
  u16_t n = 0;
 800c316:	4b13      	ldr	r3, [pc, #76]	; (800c364 <tcp_new_port+0x50>)
 800c318:	8818      	ldrh	r0, [r3, #0]
{
 800c31a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c31e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800c322:	e002      	b.n	800c32a <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c324:	3c01      	subs	r4, #1
 800c326:	b2a4      	uxth	r4, r4
 800c328:	b1c4      	cbz	r4, 800c35c <tcp_new_port+0x48>
  tcp_port++;
 800c32a:	3001      	adds	r0, #1
 800c32c:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c32e:	42b0      	cmp	r0, r6
 800c330:	bf08      	it	eq
 800c332:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c336:	490c      	ldr	r1, [pc, #48]	; (800c368 <tcp_new_port+0x54>)
 800c338:	f101 0510 	add.w	r5, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c33c:	f851 3b04 	ldr.w	r3, [r1], #4
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	b12b      	cbz	r3, 800c350 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 800c344:	8ada      	ldrh	r2, [r3, #22]
 800c346:	4282      	cmp	r2, r0
 800c348:	d0ec      	beq.n	800c324 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1f9      	bne.n	800c344 <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c350:	42a9      	cmp	r1, r5
 800c352:	d1f3      	bne.n	800c33c <tcp_new_port+0x28>
 800c354:	4b03      	ldr	r3, [pc, #12]	; (800c364 <tcp_new_port+0x50>)
 800c356:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800c358:	bc70      	pop	{r4, r5, r6}
 800c35a:	4770      	bx	lr
 800c35c:	4b01      	ldr	r3, [pc, #4]	; (800c364 <tcp_new_port+0x50>)
 800c35e:	8018      	strh	r0, [r3, #0]
          return 0;
 800c360:	4620      	mov	r0, r4
 800c362:	e7f9      	b.n	800c358 <tcp_new_port+0x44>
 800c364:	20000014 	.word	0x20000014
 800c368:	08014fe0 	.word	0x08014fe0

0800c36c <tcp_close_shutdown_fin>:
{
 800c36c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c36e:	4604      	mov	r4, r0
 800c370:	b140      	cbz	r0, 800c384 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 800c372:	7d23      	ldrb	r3, [r4, #20]
 800c374:	2b04      	cmp	r3, #4
 800c376:	d018      	beq.n	800c3aa <tcp_close_shutdown_fin+0x3e>
 800c378:	2b07      	cmp	r3, #7
 800c37a:	d01d      	beq.n	800c3b8 <tcp_close_shutdown_fin+0x4c>
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d009      	beq.n	800c394 <tcp_close_shutdown_fin+0x28>
 800c380:	2000      	movs	r0, #0
}
 800c382:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c384:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <tcp_close_shutdown_fin+0x6c>)
 800c386:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c38a:	4914      	ldr	r1, [pc, #80]	; (800c3dc <tcp_close_shutdown_fin+0x70>)
 800c38c:	4814      	ldr	r0, [pc, #80]	; (800c3e0 <tcp_close_shutdown_fin+0x74>)
 800c38e:	f006 f941 	bl	8012614 <iprintf>
 800c392:	e7ee      	b.n	800c372 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 800c394:	4620      	mov	r0, r4
 800c396:	f003 fbb9 	bl	800fb0c <tcp_send_fin>
      if (err == ERR_OK) {
 800c39a:	b9a0      	cbnz	r0, 800c3c6 <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 800c39c:	2305      	movs	r3, #5
 800c39e:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f003 fd37 	bl	800fe14 <tcp_output>
  return err;
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	e7eb      	b.n	800c382 <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f003 fbae 	bl	800fb0c <tcp_send_fin>
      if (err == ERR_OK) {
 800c3b0:	b948      	cbnz	r0, 800c3c6 <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 800c3b2:	2305      	movs	r3, #5
 800c3b4:	7523      	strb	r3, [r4, #20]
 800c3b6:	e7f3      	b.n	800c3a0 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f003 fba7 	bl	800fb0c <tcp_send_fin>
      if (err == ERR_OK) {
 800c3be:	b910      	cbnz	r0, 800c3c6 <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 800c3c0:	2309      	movs	r3, #9
 800c3c2:	7523      	strb	r3, [r4, #20]
 800c3c4:	e7ec      	b.n	800c3a0 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800c3c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c3ca:	d1da      	bne.n	800c382 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c3cc:	8b63      	ldrh	r3, [r4, #26]
 800c3ce:	f043 0308 	orr.w	r3, r3, #8
 800c3d2:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e7d4      	b.n	800c382 <tcp_close_shutdown_fin+0x16>
 800c3d8:	08014954 	.word	0x08014954
 800c3dc:	08014984 	.word	0x08014984
 800c3e0:	0801397c 	.word	0x0801397c

0800c3e4 <tcp_init>:
{
 800c3e4:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c3e6:	f006 f92d 	bl	8012644 <rand>
 800c3ea:	4b02      	ldr	r3, [pc, #8]	; (800c3f4 <tcp_init+0x10>)
 800c3ec:	4303      	orrs	r3, r0
 800c3ee:	4a02      	ldr	r2, [pc, #8]	; (800c3f8 <tcp_init+0x14>)
 800c3f0:	8013      	strh	r3, [r2, #0]
}
 800c3f2:	bd08      	pop	{r3, pc}
 800c3f4:	ffffc000 	.word	0xffffc000
 800c3f8:	20000014 	.word	0x20000014

0800c3fc <tcp_free>:
{
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c400:	7d03      	ldrb	r3, [r0, #20]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d004      	beq.n	800c410 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 800c406:	4621      	mov	r1, r4
 800c408:	2001      	movs	r0, #1
 800c40a:	f7ff f9d1 	bl	800b7b0 <memp_free>
}
 800c40e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c410:	4b03      	ldr	r3, [pc, #12]	; (800c420 <tcp_free+0x24>)
 800c412:	22d4      	movs	r2, #212	; 0xd4
 800c414:	4903      	ldr	r1, [pc, #12]	; (800c424 <tcp_free+0x28>)
 800c416:	4804      	ldr	r0, [pc, #16]	; (800c428 <tcp_free+0x2c>)
 800c418:	f006 f8fc 	bl	8012614 <iprintf>
 800c41c:	e7f3      	b.n	800c406 <tcp_free+0xa>
 800c41e:	bf00      	nop
 800c420:	08014954 	.word	0x08014954
 800c424:	08014990 	.word	0x08014990
 800c428:	0801397c 	.word	0x0801397c

0800c42c <tcp_bind>:
{
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800c42e:	4c27      	ldr	r4, [pc, #156]	; (800c4cc <tcp_bind+0xa0>)
 800c430:	2900      	cmp	r1, #0
 800c432:	bf18      	it	ne
 800c434:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c436:	b168      	cbz	r0, 800c454 <tcp_bind+0x28>
 800c438:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c43a:	7d03      	ldrb	r3, [r0, #20]
 800c43c:	b9a3      	cbnz	r3, 800c468 <tcp_bind+0x3c>
  if (port == 0) {
 800c43e:	b1ea      	cbz	r2, 800c47c <tcp_bind+0x50>
 800c440:	4e23      	ldr	r6, [pc, #140]	; (800c4d0 <tcp_bind+0xa4>)
 800c442:	f106 0710 	add.w	r7, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c446:	f856 3b04 	ldr.w	r3, [r6], #4
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	bb53      	cbnz	r3, 800c4a4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800c44e:	42be      	cmp	r6, r7
 800c450:	d1f9      	bne.n	800c446 <tcp_bind+0x1a>
 800c452:	e017      	b.n	800c484 <tcp_bind+0x58>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c454:	4b1f      	ldr	r3, [pc, #124]	; (800c4d4 <tcp_bind+0xa8>)
 800c456:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c45a:	491f      	ldr	r1, [pc, #124]	; (800c4d8 <tcp_bind+0xac>)
 800c45c:	481f      	ldr	r0, [pc, #124]	; (800c4dc <tcp_bind+0xb0>)
 800c45e:	f006 f8d9 	bl	8012614 <iprintf>
 800c462:	f06f 000f 	mvn.w	r0, #15
 800c466:	e019      	b.n	800c49c <tcp_bind+0x70>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c468:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <tcp_bind+0xa8>)
 800c46a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c46e:	491c      	ldr	r1, [pc, #112]	; (800c4e0 <tcp_bind+0xb4>)
 800c470:	481a      	ldr	r0, [pc, #104]	; (800c4dc <tcp_bind+0xb0>)
 800c472:	f006 f8cf 	bl	8012614 <iprintf>
 800c476:	f06f 0005 	mvn.w	r0, #5
 800c47a:	e00f      	b.n	800c49c <tcp_bind+0x70>
    port = tcp_new_port();
 800c47c:	f7ff ff4a 	bl	800c314 <tcp_new_port>
    if (port == 0) {
 800c480:	4602      	mov	r2, r0
 800c482:	b1e8      	cbz	r0, 800c4c0 <tcp_bind+0x94>
  if (!ip_addr_isany(ipaddr)
 800c484:	b114      	cbz	r4, 800c48c <tcp_bind+0x60>
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	b103      	cbz	r3, 800c48c <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c48a:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 800c48c:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c48e:	4b15      	ldr	r3, [pc, #84]	; (800c4e4 <tcp_bind+0xb8>)
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	60ea      	str	r2, [r5, #12]
 800c494:	601d      	str	r5, [r3, #0]
 800c496:	f003 ffc7 	bl	8010428 <tcp_timer_needed>
  return ERR_OK;
 800c49a:	2000      	movs	r0, #0
}
 800c49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0d4      	beq.n	800c44e <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 800c4a4:	8ad8      	ldrh	r0, [r3, #22]
 800c4a6:	4290      	cmp	r0, r2
 800c4a8:	d1f9      	bne.n	800c49e <tcp_bind+0x72>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c4aa:	6819      	ldr	r1, [r3, #0]
 800c4ac:	b15c      	cbz	r4, 800c4c6 <tcp_bind+0x9a>
 800c4ae:	b151      	cbz	r1, 800c4c6 <tcp_bind+0x9a>
                 ip_addr_isany(ipaddr) ||
 800c4b0:	6820      	ldr	r0, [r4, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c4b2:	4281      	cmp	r1, r0
 800c4b4:	d001      	beq.n	800c4ba <tcp_bind+0x8e>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d1f1      	bne.n	800c49e <tcp_bind+0x72>
              return ERR_USE;
 800c4ba:	f06f 0007 	mvn.w	r0, #7
 800c4be:	e7ed      	b.n	800c49c <tcp_bind+0x70>
      return ERR_BUF;
 800c4c0:	f06f 0001 	mvn.w	r0, #1
 800c4c4:	e7ea      	b.n	800c49c <tcp_bind+0x70>
              return ERR_USE;
 800c4c6:	f06f 0007 	mvn.w	r0, #7
 800c4ca:	e7e7      	b.n	800c49c <tcp_bind+0x70>
 800c4cc:	08016000 	.word	0x08016000
 800c4d0:	08014fe0 	.word	0x08014fe0
 800c4d4:	08014954 	.word	0x08014954
 800c4d8:	080149a4 	.word	0x080149a4
 800c4dc:	0801397c 	.word	0x0801397c
 800c4e0:	080149bc 	.word	0x080149bc
 800c4e4:	2001b618 	.word	0x2001b618

0800c4e8 <tcp_listen_with_backlog_and_err>:
{
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	b330      	cbz	r0, 800c53e <tcp_listen_with_backlog_and_err+0x56>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c4f0:	7d03      	ldrb	r3, [r0, #20]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d12e      	bne.n	800c554 <tcp_listen_with_backlog_and_err+0x6c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c4f6:	2002      	movs	r0, #2
 800c4f8:	f7ff f940 	bl	800b77c <memp_malloc>
  if (lpcb == NULL) {
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d04b      	beq.n	800c59a <tcp_listen_with_backlog_and_err+0xb2>
  lpcb->callback_arg = pcb->callback_arg;
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800c506:	8ae3      	ldrh	r3, [r4, #22]
 800c508:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 800c50a:	2301      	movs	r3, #1
 800c50c:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 800c50e:	7d63      	ldrb	r3, [r4, #21]
 800c510:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800c512:	7a63      	ldrb	r3, [r4, #9]
 800c514:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c516:	2300      	movs	r3, #0
 800c518:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800c51a:	7ae3      	ldrb	r3, [r4, #11]
 800c51c:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 800c51e:	7aa3      	ldrb	r3, [r4, #10]
 800c520:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c522:	6823      	ldr	r3, [r4, #0]
 800c524:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 800c526:	8ae3      	ldrh	r3, [r4, #22]
 800c528:	b33b      	cbz	r3, 800c57a <tcp_listen_with_backlog_and_err+0x92>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c52a:	4b1d      	ldr	r3, [pc, #116]	; (800c5a0 <tcp_listen_with_backlog_and_err+0xb8>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	42a3      	cmp	r3, r4
 800c530:	d01b      	beq.n	800c56a <tcp_listen_with_backlog_and_err+0x82>
 800c532:	b303      	cbz	r3, 800c576 <tcp_listen_with_backlog_and_err+0x8e>
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	42a2      	cmp	r2, r4
 800c538:	d01b      	beq.n	800c572 <tcp_listen_with_backlog_and_err+0x8a>
 800c53a:	4613      	mov	r3, r2
 800c53c:	e7f9      	b.n	800c532 <tcp_listen_with_backlog_and_err+0x4a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c53e:	4b19      	ldr	r3, [pc, #100]	; (800c5a4 <tcp_listen_with_backlog_and_err+0xbc>)
 800c540:	f240 3259 	movw	r2, #857	; 0x359
 800c544:	4918      	ldr	r1, [pc, #96]	; (800c5a8 <tcp_listen_with_backlog_and_err+0xc0>)
 800c546:	4819      	ldr	r0, [pc, #100]	; (800c5ac <tcp_listen_with_backlog_and_err+0xc4>)
 800c548:	f006 f864 	bl	8012614 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800c54c:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c54e:	f06f 030f 	mvn.w	r3, #15
 800c552:	e01e      	b.n	800c592 <tcp_listen_with_backlog_and_err+0xaa>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c554:	4b13      	ldr	r3, [pc, #76]	; (800c5a4 <tcp_listen_with_backlog_and_err+0xbc>)
 800c556:	f240 325a 	movw	r2, #858	; 0x35a
 800c55a:	4915      	ldr	r1, [pc, #84]	; (800c5b0 <tcp_listen_with_backlog_and_err+0xc8>)
 800c55c:	4813      	ldr	r0, [pc, #76]	; (800c5ac <tcp_listen_with_backlog_and_err+0xc4>)
 800c55e:	f006 f859 	bl	8012614 <iprintf>
 800c562:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 800c566:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c568:	e013      	b.n	800c592 <tcp_listen_with_backlog_and_err+0xaa>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c56a:	68e2      	ldr	r2, [r4, #12]
 800c56c:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <tcp_listen_with_backlog_and_err+0xb8>)
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	e001      	b.n	800c576 <tcp_listen_with_backlog_and_err+0x8e>
 800c572:	68e2      	ldr	r2, [r4, #12]
 800c574:	60da      	str	r2, [r3, #12]
 800c576:	2300      	movs	r3, #0
 800c578:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 800c57a:	4620      	mov	r0, r4
 800c57c:	f7ff ff3e 	bl	800c3fc <tcp_free>
  lpcb->accept = tcp_accept_null;
 800c580:	4b0c      	ldr	r3, [pc, #48]	; (800c5b4 <tcp_listen_with_backlog_and_err+0xcc>)
 800c582:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c584:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <tcp_listen_with_backlog_and_err+0xd0>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	60ea      	str	r2, [r5, #12]
 800c58a:	601d      	str	r5, [r3, #0]
 800c58c:	f003 ff4c 	bl	8010428 <tcp_timer_needed>
  res = ERR_OK;
 800c590:	2300      	movs	r3, #0
  if (err != NULL) {
 800c592:	b106      	cbz	r6, 800c596 <tcp_listen_with_backlog_and_err+0xae>
    *err = res;
 800c594:	7033      	strb	r3, [r6, #0]
}
 800c596:	4628      	mov	r0, r5
 800c598:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295
 800c59e:	e7f8      	b.n	800c592 <tcp_listen_with_backlog_and_err+0xaa>
 800c5a0:	2001b618 	.word	0x2001b618
 800c5a4:	08014954 	.word	0x08014954
 800c5a8:	080149e4 	.word	0x080149e4
 800c5ac:	0801397c 	.word	0x0801397c
 800c5b0:	08014a14 	.word	0x08014a14
 800c5b4:	0800cae9 	.word	0x0800cae9
 800c5b8:	2001b614 	.word	0x2001b614

0800c5bc <tcp_update_rcv_ann_wnd>:
{
 800c5bc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c5be:	4604      	mov	r4, r0
 800c5c0:	b178      	cbz	r0, 800c5e2 <tcp_update_rcv_ann_wnd+0x26>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c5c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c5c4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c5c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c5c8:	1948      	adds	r0, r1, r5
 800c5ca:	1a80      	subs	r0, r0, r2
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c5cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5d2:	bf94      	ite	ls
 800c5d4:	1ac3      	subls	r3, r0, r3
 800c5d6:	f5a0 6380 	subhi.w	r3, r0, #1024	; 0x400
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	db09      	blt.n	800c5f2 <tcp_update_rcv_ann_wnd+0x36>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c5de:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 800c5e0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c5e2:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <tcp_update_rcv_ann_wnd+0x60>)
 800c5e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c5e8:	490d      	ldr	r1, [pc, #52]	; (800c620 <tcp_update_rcv_ann_wnd+0x64>)
 800c5ea:	480e      	ldr	r0, [pc, #56]	; (800c624 <tcp_update_rcv_ann_wnd+0x68>)
 800c5ec:	f006 f812 	bl	8012614 <iprintf>
 800c5f0:	e7e7      	b.n	800c5c2 <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c5f2:	1aab      	subs	r3, r5, r2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	dd02      	ble.n	800c5fe <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	8560      	strh	r0, [r4, #42]	; 0x2a
 800c5fc:	e7f0      	b.n	800c5e0 <tcp_update_rcv_ann_wnd+0x24>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c5fe:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c600:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800c604:	d202      	bcs.n	800c60c <tcp_update_rcv_ann_wnd+0x50>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c606:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 800c608:	2000      	movs	r0, #0
 800c60a:	e7e9      	b.n	800c5e0 <tcp_update_rcv_ann_wnd+0x24>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c60c:	4b03      	ldr	r3, [pc, #12]	; (800c61c <tcp_update_rcv_ann_wnd+0x60>)
 800c60e:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c612:	4905      	ldr	r1, [pc, #20]	; (800c628 <tcp_update_rcv_ann_wnd+0x6c>)
 800c614:	4803      	ldr	r0, [pc, #12]	; (800c624 <tcp_update_rcv_ann_wnd+0x68>)
 800c616:	f005 fffd 	bl	8012614 <iprintf>
 800c61a:	e7f4      	b.n	800c606 <tcp_update_rcv_ann_wnd+0x4a>
 800c61c:	08014954 	.word	0x08014954
 800c620:	08014a4c 	.word	0x08014a4c
 800c624:	0801397c 	.word	0x0801397c
 800c628:	08014a70 	.word	0x08014a70

0800c62c <tcp_recved>:
{
 800c62c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c62e:	b1b0      	cbz	r0, 800c65e <tcp_recved+0x32>
 800c630:	460c      	mov	r4, r1
 800c632:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c634:	7d03      	ldrb	r3, [r0, #20]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d019      	beq.n	800c66e <tcp_recved+0x42>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c63a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800c63c:	1919      	adds	r1, r3, r4
 800c63e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c640:	428b      	cmp	r3, r1
 800c642:	d802      	bhi.n	800c64a <tcp_recved+0x1e>
 800c644:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c648:	d901      	bls.n	800c64e <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c64a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c64e:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c650:	4628      	mov	r0, r5
 800c652:	f7ff ffb3 	bl	800c5bc <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c656:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c65a:	d210      	bcs.n	800c67e <tcp_recved+0x52>
}
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c65e:	4b0c      	ldr	r3, [pc, #48]	; (800c690 <tcp_recved+0x64>)
 800c660:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c664:	490b      	ldr	r1, [pc, #44]	; (800c694 <tcp_recved+0x68>)
 800c666:	480c      	ldr	r0, [pc, #48]	; (800c698 <tcp_recved+0x6c>)
 800c668:	f005 ffd4 	bl	8012614 <iprintf>
 800c66c:	e7f6      	b.n	800c65c <tcp_recved+0x30>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c66e:	4b08      	ldr	r3, [pc, #32]	; (800c690 <tcp_recved+0x64>)
 800c670:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c674:	4909      	ldr	r1, [pc, #36]	; (800c69c <tcp_recved+0x70>)
 800c676:	4808      	ldr	r0, [pc, #32]	; (800c698 <tcp_recved+0x6c>)
 800c678:	f005 ffcc 	bl	8012614 <iprintf>
 800c67c:	e7dd      	b.n	800c63a <tcp_recved+0xe>
    tcp_ack_now(pcb);
 800c67e:	8b6b      	ldrh	r3, [r5, #26]
 800c680:	f043 0302 	orr.w	r3, r3, #2
 800c684:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800c686:	4628      	mov	r0, r5
 800c688:	f003 fbc4 	bl	800fe14 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 800c68c:	e7e6      	b.n	800c65c <tcp_recved+0x30>
 800c68e:	bf00      	nop
 800c690:	08014954 	.word	0x08014954
 800c694:	08014a8c 	.word	0x08014a8c
 800c698:	0801397c 	.word	0x0801397c
 800c69c:	08014aa4 	.word	0x08014aa4

0800c6a0 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 800c6a0:	b150      	cbz	r0, 800c6b8 <tcp_seg_free+0x18>
{
 800c6a2:	b510      	push	{r4, lr}
 800c6a4:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800c6a6:	6840      	ldr	r0, [r0, #4]
 800c6a8:	b108      	cbz	r0, 800c6ae <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800c6aa:	f7ff fb41 	bl	800bd30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	2003      	movs	r0, #3
 800c6b2:	f7ff f87d 	bl	800b7b0 <memp_free>
  }
}
 800c6b6:	bd10      	pop	{r4, pc}
 800c6b8:	4770      	bx	lr

0800c6ba <tcp_segs_free>:
{
 800c6ba:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800c6bc:	4604      	mov	r4, r0
 800c6be:	b128      	cbz	r0, 800c6cc <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 800c6c4:	f7ff ffec 	bl	800c6a0 <tcp_seg_free>
  while (seg != NULL) {
 800c6c8:	2c00      	cmp	r4, #0
 800c6ca:	d1f9      	bne.n	800c6c0 <tcp_segs_free+0x6>
}
 800c6cc:	bd10      	pop	{r4, pc}
	...

0800c6d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c6d0:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c6d2:	4605      	mov	r5, r0
 800c6d4:	b188      	cbz	r0, 800c6fa <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c6d6:	2003      	movs	r0, #3
 800c6d8:	f7ff f850 	bl	800b77c <memp_malloc>
  if (cseg == NULL) {
 800c6dc:	4604      	mov	r4, r0
 800c6de:	b150      	cbz	r0, 800c6f6 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c6e0:	6828      	ldr	r0, [r5, #0]
 800c6e2:	6869      	ldr	r1, [r5, #4]
 800c6e4:	68aa      	ldr	r2, [r5, #8]
 800c6e6:	68eb      	ldr	r3, [r5, #12]
 800c6e8:	6020      	str	r0, [r4, #0]
 800c6ea:	6061      	str	r1, [r4, #4]
 800c6ec:	60a2      	str	r2, [r4, #8]
 800c6ee:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800c6f0:	6860      	ldr	r0, [r4, #4]
 800c6f2:	f7ff fca1 	bl	800c038 <pbuf_ref>
  return cseg;
}
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c6fa:	4b04      	ldr	r3, [pc, #16]	; (800c70c <tcp_seg_copy+0x3c>)
 800c6fc:	f240 6282 	movw	r2, #1666	; 0x682
 800c700:	4903      	ldr	r1, [pc, #12]	; (800c710 <tcp_seg_copy+0x40>)
 800c702:	4804      	ldr	r0, [pc, #16]	; (800c714 <tcp_seg_copy+0x44>)
 800c704:	f005 ff86 	bl	8012614 <iprintf>
 800c708:	e7e5      	b.n	800c6d6 <tcp_seg_copy+0x6>
 800c70a:	bf00      	nop
 800c70c:	08014954 	.word	0x08014954
 800c710:	08014acc 	.word	0x08014acc
 800c714:	0801397c 	.word	0x0801397c

0800c718 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c718:	b100      	cbz	r0, 800c71c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800c71a:	6101      	str	r1, [r0, #16]
  }
}
 800c71c:	4770      	bx	lr
	...

0800c720 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c720:	b180      	cbz	r0, 800c744 <tcp_recv+0x24>
{
 800c722:	b538      	push	{r3, r4, r5, lr}
 800c724:	460c      	mov	r4, r1
 800c726:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c728:	7d03      	ldrb	r3, [r0, #20]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d002      	beq.n	800c734 <tcp_recv+0x14>
    pcb->recv = recv;
 800c72e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 800c732:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c734:	4b04      	ldr	r3, [pc, #16]	; (800c748 <tcp_recv+0x28>)
 800c736:	f240 72df 	movw	r2, #2015	; 0x7df
 800c73a:	4904      	ldr	r1, [pc, #16]	; (800c74c <tcp_recv+0x2c>)
 800c73c:	4804      	ldr	r0, [pc, #16]	; (800c750 <tcp_recv+0x30>)
 800c73e:	f005 ff69 	bl	8012614 <iprintf>
 800c742:	e7f4      	b.n	800c72e <tcp_recv+0xe>
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	08014954 	.word	0x08014954
 800c74c:	08014ae8 	.word	0x08014ae8
 800c750:	0801397c 	.word	0x0801397c

0800c754 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c754:	b180      	cbz	r0, 800c778 <tcp_sent+0x24>
{
 800c756:	b538      	push	{r3, r4, r5, lr}
 800c758:	460c      	mov	r4, r1
 800c75a:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c75c:	7d03      	ldrb	r3, [r0, #20]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d002      	beq.n	800c768 <tcp_sent+0x14>
    pcb->sent = sent;
 800c762:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 800c766:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c768:	4b04      	ldr	r3, [pc, #16]	; (800c77c <tcp_sent+0x28>)
 800c76a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800c76e:	4904      	ldr	r1, [pc, #16]	; (800c780 <tcp_sent+0x2c>)
 800c770:	4804      	ldr	r0, [pc, #16]	; (800c784 <tcp_sent+0x30>)
 800c772:	f005 ff4f 	bl	8012614 <iprintf>
 800c776:	e7f4      	b.n	800c762 <tcp_sent+0xe>
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	08014954 	.word	0x08014954
 800c780:	08014b10 	.word	0x08014b10
 800c784:	0801397c 	.word	0x0801397c

0800c788 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c788:	b180      	cbz	r0, 800c7ac <tcp_err+0x24>
{
 800c78a:	b538      	push	{r3, r4, r5, lr}
 800c78c:	460c      	mov	r4, r1
 800c78e:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c790:	7d03      	ldrb	r3, [r0, #20]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d002      	beq.n	800c79c <tcp_err+0x14>
    pcb->errf = err;
 800c796:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c79c:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <tcp_err+0x28>)
 800c79e:	f640 020d 	movw	r2, #2061	; 0x80d
 800c7a2:	4904      	ldr	r1, [pc, #16]	; (800c7b4 <tcp_err+0x2c>)
 800c7a4:	4804      	ldr	r0, [pc, #16]	; (800c7b8 <tcp_err+0x30>)
 800c7a6:	f005 ff35 	bl	8012614 <iprintf>
 800c7aa:	e7f4      	b.n	800c796 <tcp_err+0xe>
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	08014954 	.word	0x08014954
 800c7b4:	08014b38 	.word	0x08014b38
 800c7b8:	0801397c 	.word	0x0801397c

0800c7bc <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c7bc:	b118      	cbz	r0, 800c7c6 <tcp_accept+0xa>
 800c7be:	7d02      	ldrb	r2, [r0, #20]
 800c7c0:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800c7c2:	bf08      	it	eq
 800c7c4:	6181      	streq	r1, [r0, #24]
  }
}
 800c7c6:	4770      	bx	lr

0800c7c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800c7c8:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800c7ca:	b148      	cbz	r0, 800c7e0 <tcp_poll+0x18>
 800c7cc:	460d      	mov	r5, r1
 800c7ce:	4614      	mov	r4, r2
 800c7d0:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c7d2:	7d03      	ldrb	r3, [r0, #20]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d00b      	beq.n	800c7f0 <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800c7d8:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800c7dc:	7774      	strb	r4, [r6, #29]
}
 800c7de:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800c7e0:	4b07      	ldr	r3, [pc, #28]	; (800c800 <tcp_poll+0x38>)
 800c7e2:	f640 023d 	movw	r2, #2109	; 0x83d
 800c7e6:	4907      	ldr	r1, [pc, #28]	; (800c804 <tcp_poll+0x3c>)
 800c7e8:	4807      	ldr	r0, [pc, #28]	; (800c808 <tcp_poll+0x40>)
 800c7ea:	f005 ff13 	bl	8012614 <iprintf>
 800c7ee:	e7f6      	b.n	800c7de <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c7f0:	4b03      	ldr	r3, [pc, #12]	; (800c800 <tcp_poll+0x38>)
 800c7f2:	f640 023e 	movw	r2, #2110	; 0x83e
 800c7f6:	4905      	ldr	r1, [pc, #20]	; (800c80c <tcp_poll+0x44>)
 800c7f8:	4803      	ldr	r0, [pc, #12]	; (800c808 <tcp_poll+0x40>)
 800c7fa:	f005 ff0b 	bl	8012614 <iprintf>
 800c7fe:	e7eb      	b.n	800c7d8 <tcp_poll+0x10>
 800c800:	08014954 	.word	0x08014954
 800c804:	08014b60 	.word	0x08014b60
 800c808:	0801397c 	.word	0x0801397c
 800c80c:	08014b78 	.word	0x08014b78

0800c810 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c810:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c812:	b130      	cbz	r0, 800c822 <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c814:	4b07      	ldr	r3, [pc, #28]	; (800c834 <tcp_next_iss+0x24>)
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	4a07      	ldr	r2, [pc, #28]	; (800c838 <tcp_next_iss+0x28>)
 800c81a:	6812      	ldr	r2, [r2, #0]
 800c81c:	4410      	add	r0, r2
 800c81e:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c820:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c822:	4b06      	ldr	r3, [pc, #24]	; (800c83c <tcp_next_iss+0x2c>)
 800c824:	f640 02af 	movw	r2, #2223	; 0x8af
 800c828:	4905      	ldr	r1, [pc, #20]	; (800c840 <tcp_next_iss+0x30>)
 800c82a:	4806      	ldr	r0, [pc, #24]	; (800c844 <tcp_next_iss+0x34>)
 800c82c:	f005 fef2 	bl	8012614 <iprintf>
 800c830:	e7f0      	b.n	800c814 <tcp_next_iss+0x4>
 800c832:	bf00      	nop
 800c834:	20000010 	.word	0x20000010
 800c838:	2001b610 	.word	0x2001b610
 800c83c:	08014954 	.word	0x08014954
 800c840:	08014b98 	.word	0x08014b98
 800c844:	0801397c 	.word	0x0801397c

0800c848 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4605      	mov	r5, r0
 800c84c:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c84e:	b15a      	cbz	r2, 800c868 <tcp_eff_send_mss_netif+0x20>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c850:	b144      	cbz	r4, 800c864 <tcp_eff_send_mss_netif+0x1c>
      return sendmss;
    }
    mtu = outif->mtu;
 800c852:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c854:	b133      	cbz	r3, 800c864 <tcp_eff_send_mss_netif+0x1c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c856:	2b28      	cmp	r3, #40	; 0x28
 800c858:	d90e      	bls.n	800c878 <tcp_eff_send_mss_netif+0x30>
 800c85a:	3b28      	subs	r3, #40	; 0x28
 800c85c:	b29b      	uxth	r3, r3
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c85e:	429d      	cmp	r5, r3
 800c860:	bf28      	it	cs
 800c862:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 800c864:	4628      	mov	r0, r5
 800c866:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c868:	4b04      	ldr	r3, [pc, #16]	; (800c87c <tcp_eff_send_mss_netif+0x34>)
 800c86a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c86e:	4904      	ldr	r1, [pc, #16]	; (800c880 <tcp_eff_send_mss_netif+0x38>)
 800c870:	4804      	ldr	r0, [pc, #16]	; (800c884 <tcp_eff_send_mss_netif+0x3c>)
 800c872:	f005 fecf 	bl	8012614 <iprintf>
 800c876:	e7eb      	b.n	800c850 <tcp_eff_send_mss_netif+0x8>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	e7f0      	b.n	800c85e <tcp_eff_send_mss_netif+0x16>
 800c87c:	08014954 	.word	0x08014954
 800c880:	08014bb4 	.word	0x08014bb4
 800c884:	0801397c 	.word	0x0801397c

0800c888 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c888:	b510      	push	{r4, lr}
 800c88a:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 800c88c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800c88e:	b118      	cbz	r0, 800c898 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 800c890:	f7ff ff13 	bl	800c6ba <tcp_segs_free>
    pcb->ooseq = NULL;
 800c894:	2300      	movs	r3, #0
 800c896:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c898:	bd10      	pop	{r4, pc}
	...

0800c89c <tcp_pcb_purge>:
{
 800c89c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c89e:	b130      	cbz	r0, 800c8ae <tcp_pcb_purge+0x12>
 800c8a0:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800c8a2:	7d03      	ldrb	r3, [r0, #20]
      pcb->state != TIME_WAIT &&
 800c8a4:	2b0a      	cmp	r3, #10
 800c8a6:	d001      	beq.n	800c8ac <tcp_pcb_purge+0x10>
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d808      	bhi.n	800c8be <tcp_pcb_purge+0x22>
}
 800c8ac:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c8ae:	4b11      	ldr	r3, [pc, #68]	; (800c8f4 <tcp_pcb_purge+0x58>)
 800c8b0:	f640 0251 	movw	r2, #2129	; 0x851
 800c8b4:	4910      	ldr	r1, [pc, #64]	; (800c8f8 <tcp_pcb_purge+0x5c>)
 800c8b6:	4811      	ldr	r0, [pc, #68]	; (800c8fc <tcp_pcb_purge+0x60>)
 800c8b8:	f005 feac 	bl	8012614 <iprintf>
 800c8bc:	e7f6      	b.n	800c8ac <tcp_pcb_purge+0x10>
    if (pcb->refused_data != NULL) {
 800c8be:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c8c0:	b118      	cbz	r0, 800c8ca <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800c8c2:	f7ff fa35 	bl	800bd30 <pbuf_free>
      pcb->refused_data = NULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800c8ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c8cc:	b113      	cbz	r3, 800c8d4 <tcp_pcb_purge+0x38>
      tcp_free_ooseq(pcb);
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f7ff ffda 	bl	800c888 <tcp_free_ooseq>
    pcb->rtime = -1;
 800c8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8d8:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800c8da:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c8dc:	f7ff feed 	bl	800c6ba <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c8e0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c8e2:	f7ff feea 	bl	800c6ba <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	66e3      	str	r3, [r4, #108]	; 0x6c
 800c8ea:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 800c8ec:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800c8f0:	e7dc      	b.n	800c8ac <tcp_pcb_purge+0x10>
 800c8f2:	bf00      	nop
 800c8f4:	08014954 	.word	0x08014954
 800c8f8:	08014bdc 	.word	0x08014bdc
 800c8fc:	0801397c 	.word	0x0801397c

0800c900 <tcp_pcb_remove>:
{
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c904:	460c      	mov	r4, r1
 800c906:	b149      	cbz	r1, 800c91c <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c908:	b185      	cbz	r5, 800c92c <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 800c90a:	682b      	ldr	r3, [r5, #0]
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	d015      	beq.n	800c93c <tcp_pcb_remove+0x3c>
 800c910:	b1cb      	cbz	r3, 800c946 <tcp_pcb_remove+0x46>
 800c912:	68da      	ldr	r2, [r3, #12]
 800c914:	42a2      	cmp	r2, r4
 800c916:	d014      	beq.n	800c942 <tcp_pcb_remove+0x42>
 800c918:	4613      	mov	r3, r2
 800c91a:	e7f9      	b.n	800c910 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c91c:	4b25      	ldr	r3, [pc, #148]	; (800c9b4 <tcp_pcb_remove+0xb4>)
 800c91e:	f640 0283 	movw	r2, #2179	; 0x883
 800c922:	4925      	ldr	r1, [pc, #148]	; (800c9b8 <tcp_pcb_remove+0xb8>)
 800c924:	4825      	ldr	r0, [pc, #148]	; (800c9bc <tcp_pcb_remove+0xbc>)
 800c926:	f005 fe75 	bl	8012614 <iprintf>
 800c92a:	e7ed      	b.n	800c908 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c92c:	4b21      	ldr	r3, [pc, #132]	; (800c9b4 <tcp_pcb_remove+0xb4>)
 800c92e:	f640 0284 	movw	r2, #2180	; 0x884
 800c932:	4923      	ldr	r1, [pc, #140]	; (800c9c0 <tcp_pcb_remove+0xc0>)
 800c934:	4821      	ldr	r0, [pc, #132]	; (800c9bc <tcp_pcb_remove+0xbc>)
 800c936:	f005 fe6d 	bl	8012614 <iprintf>
 800c93a:	e7e6      	b.n	800c90a <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 800c93c:	68e3      	ldr	r3, [r4, #12]
 800c93e:	602b      	str	r3, [r5, #0]
 800c940:	e001      	b.n	800c946 <tcp_pcb_remove+0x46>
 800c942:	68e2      	ldr	r2, [r4, #12]
 800c944:	60da      	str	r2, [r3, #12]
 800c946:	2300      	movs	r3, #0
 800c948:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7ff ffa6 	bl	800c89c <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800c950:	7d23      	ldrb	r3, [r4, #20]
 800c952:	2b0a      	cmp	r3, #10
 800c954:	d02a      	beq.n	800c9ac <tcp_pcb_remove+0xac>
 800c956:	2b01      	cmp	r3, #1
 800c958:	d028      	beq.n	800c9ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c95a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800c95c:	f013 0f01 	tst.w	r3, #1
 800c960:	d11e      	bne.n	800c9a0 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c962:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c964:	b133      	cbz	r3, 800c974 <tcp_pcb_remove+0x74>
 800c966:	4b13      	ldr	r3, [pc, #76]	; (800c9b4 <tcp_pcb_remove+0xb4>)
 800c968:	f640 0293 	movw	r2, #2195	; 0x893
 800c96c:	4915      	ldr	r1, [pc, #84]	; (800c9c4 <tcp_pcb_remove+0xc4>)
 800c96e:	4813      	ldr	r0, [pc, #76]	; (800c9bc <tcp_pcb_remove+0xbc>)
 800c970:	f005 fe50 	bl	8012614 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c974:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c976:	b133      	cbz	r3, 800c986 <tcp_pcb_remove+0x86>
 800c978:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <tcp_pcb_remove+0xb4>)
 800c97a:	f640 0294 	movw	r2, #2196	; 0x894
 800c97e:	4912      	ldr	r1, [pc, #72]	; (800c9c8 <tcp_pcb_remove+0xc8>)
 800c980:	480e      	ldr	r0, [pc, #56]	; (800c9bc <tcp_pcb_remove+0xbc>)
 800c982:	f005 fe47 	bl	8012614 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c986:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c988:	b133      	cbz	r3, 800c998 <tcp_pcb_remove+0x98>
 800c98a:	4b0a      	ldr	r3, [pc, #40]	; (800c9b4 <tcp_pcb_remove+0xb4>)
 800c98c:	f640 0296 	movw	r2, #2198	; 0x896
 800c990:	490e      	ldr	r1, [pc, #56]	; (800c9cc <tcp_pcb_remove+0xcc>)
 800c992:	480a      	ldr	r0, [pc, #40]	; (800c9bc <tcp_pcb_remove+0xbc>)
 800c994:	f005 fe3e 	bl	8012614 <iprintf>
  pcb->state = CLOSED;
 800c998:	2300      	movs	r3, #0
 800c99a:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800c99c:	82e3      	strh	r3, [r4, #22]
}
 800c99e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 800c9a0:	f043 0302 	orr.w	r3, r3, #2
 800c9a4:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f003 fa34 	bl	800fe14 <tcp_output>
  if (pcb->state != LISTEN) {
 800c9ac:	7d23      	ldrb	r3, [r4, #20]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d0f2      	beq.n	800c998 <tcp_pcb_remove+0x98>
 800c9b2:	e7d6      	b.n	800c962 <tcp_pcb_remove+0x62>
 800c9b4:	08014954 	.word	0x08014954
 800c9b8:	08014bf8 	.word	0x08014bf8
 800c9bc:	0801397c 	.word	0x0801397c
 800c9c0:	08014c14 	.word	0x08014c14
 800c9c4:	08014c34 	.word	0x08014c34
 800c9c8:	08014c4c 	.word	0x08014c4c
 800c9cc:	08014c68 	.word	0x08014c68

0800c9d0 <tcp_abandon>:
{
 800c9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d4:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c9d6:	b1f8      	cbz	r0, 800ca18 <tcp_abandon+0x48>
 800c9d8:	460d      	mov	r5, r1
 800c9da:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c9dc:	7d03      	ldrb	r3, [r0, #20]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d022      	beq.n	800ca28 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 800c9e2:	7d23      	ldrb	r3, [r4, #20]
 800c9e4:	2b0a      	cmp	r3, #10
 800c9e6:	d027      	beq.n	800ca38 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 800c9e8:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800c9ec:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 800c9f0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800c9f4:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d147      	bne.n	800ca8a <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 800c9fa:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 800c9fe:	f1ba 0f00 	cmp.w	sl, #0
 800ca02:	d04c      	beq.n	800ca9e <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca04:	4b2d      	ldr	r3, [pc, #180]	; (800cabc <tcp_abandon+0xec>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	42a3      	cmp	r3, r4
 800ca0a:	d01d      	beq.n	800ca48 <tcp_abandon+0x78>
 800ca0c:	b313      	cbz	r3, 800ca54 <tcp_abandon+0x84>
 800ca0e:	68da      	ldr	r2, [r3, #12]
 800ca10:	42a2      	cmp	r2, r4
 800ca12:	d01d      	beq.n	800ca50 <tcp_abandon+0x80>
 800ca14:	4613      	mov	r3, r2
 800ca16:	e7f9      	b.n	800ca0c <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ca18:	4b29      	ldr	r3, [pc, #164]	; (800cac0 <tcp_abandon+0xf0>)
 800ca1a:	f240 223d 	movw	r2, #573	; 0x23d
 800ca1e:	4929      	ldr	r1, [pc, #164]	; (800cac4 <tcp_abandon+0xf4>)
 800ca20:	4829      	ldr	r0, [pc, #164]	; (800cac8 <tcp_abandon+0xf8>)
 800ca22:	f005 fdf7 	bl	8012614 <iprintf>
 800ca26:	e02d      	b.n	800ca84 <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ca28:	4b25      	ldr	r3, [pc, #148]	; (800cac0 <tcp_abandon+0xf0>)
 800ca2a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ca2e:	4927      	ldr	r1, [pc, #156]	; (800cacc <tcp_abandon+0xfc>)
 800ca30:	4825      	ldr	r0, [pc, #148]	; (800cac8 <tcp_abandon+0xf8>)
 800ca32:	f005 fdef 	bl	8012614 <iprintf>
 800ca36:	e7d4      	b.n	800c9e2 <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4825      	ldr	r0, [pc, #148]	; (800cad0 <tcp_abandon+0x100>)
 800ca3c:	f7ff ff60 	bl	800c900 <tcp_pcb_remove>
    tcp_free(pcb);
 800ca40:	4620      	mov	r0, r4
 800ca42:	f7ff fcdb 	bl	800c3fc <tcp_free>
 800ca46:	e01d      	b.n	800ca84 <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca48:	68e2      	ldr	r2, [r4, #12]
 800ca4a:	4b1c      	ldr	r3, [pc, #112]	; (800cabc <tcp_abandon+0xec>)
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	e001      	b.n	800ca54 <tcp_abandon+0x84>
 800ca50:	68e2      	ldr	r2, [r4, #12]
 800ca52:	60da      	str	r2, [r3, #12]
 800ca54:	2500      	movs	r5, #0
 800ca56:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800ca58:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800ca5a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ca5c:	b108      	cbz	r0, 800ca62 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 800ca5e:	f7ff fe2c 	bl	800c6ba <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800ca62:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ca64:	b108      	cbz	r0, 800ca6a <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 800ca66:	f7ff fe28 	bl	800c6ba <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800ca6a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ca6c:	b108      	cbz	r0, 800ca72 <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 800ca6e:	f7ff fe24 	bl	800c6ba <tcp_segs_free>
    if (send_rst) {
 800ca72:	b9b5      	cbnz	r5, 800caa2 <tcp_abandon+0xd2>
    tcp_free(pcb);
 800ca74:	4620      	mov	r0, r4
 800ca76:	f7ff fcc1 	bl	800c3fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ca7a:	b11e      	cbz	r6, 800ca84 <tcp_abandon+0xb4>
 800ca7c:	f06f 010c 	mvn.w	r1, #12
 800ca80:	4638      	mov	r0, r7
 800ca82:	47b0      	blx	r6
}
 800ca84:	b004      	add	sp, #16
 800ca86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 800ca8a:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca8e:	4621      	mov	r1, r4
 800ca90:	4810      	ldr	r0, [pc, #64]	; (800cad4 <tcp_abandon+0x104>)
 800ca92:	f7ff ff35 	bl	800c900 <tcp_pcb_remove>
 800ca96:	4b10      	ldr	r3, [pc, #64]	; (800cad8 <tcp_abandon+0x108>)
 800ca98:	2201      	movs	r2, #1
 800ca9a:	701a      	strb	r2, [r3, #0]
 800ca9c:	e7dd      	b.n	800ca5a <tcp_abandon+0x8a>
    int send_rst = 0;
 800ca9e:	2500      	movs	r5, #0
 800caa0:	e7db      	b.n	800ca5a <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800caa2:	8b23      	ldrh	r3, [r4, #24]
 800caa4:	9302      	str	r3, [sp, #8]
 800caa6:	f8cd a004 	str.w	sl, [sp, #4]
 800caaa:	1d23      	adds	r3, r4, #4
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	4623      	mov	r3, r4
 800cab0:	464a      	mov	r2, r9
 800cab2:	4641      	mov	r1, r8
 800cab4:	4620      	mov	r0, r4
 800cab6:	f003 f92d 	bl	800fd14 <tcp_rst>
 800caba:	e7db      	b.n	800ca74 <tcp_abandon+0xa4>
 800cabc:	2001b618 	.word	0x2001b618
 800cac0:	08014954 	.word	0x08014954
 800cac4:	08014c80 	.word	0x08014c80
 800cac8:	0801397c 	.word	0x0801397c
 800cacc:	08014c9c 	.word	0x08014c9c
 800cad0:	2001b61c 	.word	0x2001b61c
 800cad4:	2001b60c 	.word	0x2001b60c
 800cad8:	2001b608 	.word	0x2001b608

0800cadc <tcp_abort>:
{
 800cadc:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800cade:	2101      	movs	r1, #1
 800cae0:	f7ff ff76 	bl	800c9d0 <tcp_abandon>
}
 800cae4:	bd08      	pop	{r3, pc}
	...

0800cae8 <tcp_accept_null>:
{
 800cae8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800caea:	460c      	mov	r4, r1
 800caec:	b129      	cbz	r1, 800cafa <tcp_accept_null+0x12>
  tcp_abort(pcb);
 800caee:	4620      	mov	r0, r4
 800caf0:	f7ff fff4 	bl	800cadc <tcp_abort>
}
 800caf4:	f06f 000c 	mvn.w	r0, #12
 800caf8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800cafa:	4b04      	ldr	r3, [pc, #16]	; (800cb0c <tcp_accept_null+0x24>)
 800cafc:	f240 320f 	movw	r2, #783	; 0x30f
 800cb00:	4903      	ldr	r1, [pc, #12]	; (800cb10 <tcp_accept_null+0x28>)
 800cb02:	4804      	ldr	r0, [pc, #16]	; (800cb14 <tcp_accept_null+0x2c>)
 800cb04:	f005 fd86 	bl	8012614 <iprintf>
 800cb08:	e7f1      	b.n	800caee <tcp_accept_null+0x6>
 800cb0a:	bf00      	nop
 800cb0c:	08014954 	.word	0x08014954
 800cb10:	08014cd0 	.word	0x08014cd0
 800cb14:	0801397c 	.word	0x0801397c

0800cb18 <tcp_netif_ip_addr_changed_pcblist>:
{
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	b108      	cbz	r0, 800cb24 <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 800cb20:	b97c      	cbnz	r4, 800cb42 <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 800cb22:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cb24:	4b0a      	ldr	r3, [pc, #40]	; (800cb50 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800cb26:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cb2a:	490a      	ldr	r1, [pc, #40]	; (800cb54 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800cb2c:	480a      	ldr	r0, [pc, #40]	; (800cb58 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800cb2e:	f005 fd71 	bl	8012614 <iprintf>
 800cb32:	e7f5      	b.n	800cb20 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 800cb34:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 800cb36:	4620      	mov	r0, r4
 800cb38:	f7ff ffd0 	bl	800cadc <tcp_abort>
      pcb = next;
 800cb3c:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800cb3e:	2c00      	cmp	r4, #0
 800cb40:	d0ef      	beq.n	800cb22 <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cb42:	6822      	ldr	r2, [r4, #0]
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d0f4      	beq.n	800cb34 <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 800cb4a:	68e4      	ldr	r4, [r4, #12]
 800cb4c:	e7f7      	b.n	800cb3e <tcp_netif_ip_addr_changed_pcblist+0x26>
 800cb4e:	bf00      	nop
 800cb50:	08014954 	.word	0x08014954
 800cb54:	08014cf0 	.word	0x08014cf0
 800cb58:	0801397c 	.word	0x0801397c

0800cb5c <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800cb5c:	b308      	cbz	r0, 800cba2 <tcp_netif_ip_addr_changed+0x46>
{
 800cb5e:	b538      	push	{r3, r4, r5, lr}
 800cb60:	460d      	mov	r5, r1
 800cb62:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 800cb64:	6803      	ldr	r3, [r0, #0]
 800cb66:	b903      	cbnz	r3, 800cb6a <tcp_netif_ip_addr_changed+0xe>
}
 800cb68:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cb6a:	4b0e      	ldr	r3, [pc, #56]	; (800cba4 <tcp_netif_ip_addr_changed+0x48>)
 800cb6c:	6819      	ldr	r1, [r3, #0]
 800cb6e:	f7ff ffd3 	bl	800cb18 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cb72:	4b0d      	ldr	r3, [pc, #52]	; (800cba8 <tcp_netif_ip_addr_changed+0x4c>)
 800cb74:	6819      	ldr	r1, [r3, #0]
 800cb76:	4620      	mov	r0, r4
 800cb78:	f7ff ffce 	bl	800cb18 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800cb7c:	2d00      	cmp	r5, #0
 800cb7e:	d0f3      	beq.n	800cb68 <tcp_netif_ip_addr_changed+0xc>
 800cb80:	682b      	ldr	r3, [r5, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0f0      	beq.n	800cb68 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <tcp_netif_ip_addr_changed+0x50>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	b91b      	cbnz	r3, 800cb94 <tcp_netif_ip_addr_changed+0x38>
 800cb8c:	e7ec      	b.n	800cb68 <tcp_netif_ip_addr_changed+0xc>
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0e9      	beq.n	800cb68 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cb94:	6819      	ldr	r1, [r3, #0]
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	4291      	cmp	r1, r2
 800cb9a:	d1f8      	bne.n	800cb8e <tcp_netif_ip_addr_changed+0x32>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cb9c:	682a      	ldr	r2, [r5, #0]
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	e7f5      	b.n	800cb8e <tcp_netif_ip_addr_changed+0x32>
 800cba2:	4770      	bx	lr
 800cba4:	2001b60c 	.word	0x2001b60c
 800cba8:	2001b618 	.word	0x2001b618
 800cbac:	2001b614 	.word	0x2001b614

0800cbb0 <tcp_kill_state>:
{
 800cbb0:	b538      	push	{r3, r4, r5, lr}
 800cbb2:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cbb4:	f1a0 0308 	sub.w	r3, r0, #8
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d807      	bhi.n	800cbce <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbbe:	4b10      	ldr	r3, [pc, #64]	; (800cc00 <tcp_kill_state+0x50>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	b1e3      	cbz	r3, 800cbfe <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cbc4:	4a0f      	ldr	r2, [pc, #60]	; (800cc04 <tcp_kill_state+0x54>)
 800cbc6:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 800cbc8:	2100      	movs	r1, #0
  inactive = NULL;
 800cbca:	4608      	mov	r0, r1
 800cbcc:	e009      	b.n	800cbe2 <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cbce:	4b0e      	ldr	r3, [pc, #56]	; (800cc08 <tcp_kill_state+0x58>)
 800cbd0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cbd4:	490d      	ldr	r1, [pc, #52]	; (800cc0c <tcp_kill_state+0x5c>)
 800cbd6:	480e      	ldr	r0, [pc, #56]	; (800cc10 <tcp_kill_state+0x60>)
 800cbd8:	f005 fd1c 	bl	8012614 <iprintf>
 800cbdc:	e7ef      	b.n	800cbbe <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	b14b      	cbz	r3, 800cbf6 <tcp_kill_state+0x46>
    if (pcb->state == state) {
 800cbe2:	7d1a      	ldrb	r2, [r3, #20]
 800cbe4:	42a2      	cmp	r2, r4
 800cbe6:	d1fa      	bne.n	800cbde <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cbe8:	6a1a      	ldr	r2, [r3, #32]
 800cbea:	1aaa      	subs	r2, r5, r2
 800cbec:	428a      	cmp	r2, r1
 800cbee:	d3f6      	bcc.n	800cbde <tcp_kill_state+0x2e>
        inactivity = tcp_ticks - pcb->tmr;
 800cbf0:	4611      	mov	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	e7f3      	b.n	800cbde <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 800cbf6:	b110      	cbz	r0, 800cbfe <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	f7ff fee9 	bl	800c9d0 <tcp_abandon>
}
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	2001b60c 	.word	0x2001b60c
 800cc04:	2001b610 	.word	0x2001b610
 800cc08:	08014954 	.word	0x08014954
 800cc0c:	08014d24 	.word	0x08014d24
 800cc10:	0801397c 	.word	0x0801397c

0800cc14 <tcp_alloc>:
{
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cc18:	2001      	movs	r0, #1
 800cc1a:	f7fe fdaf 	bl	800b77c <memp_malloc>
  if (pcb == NULL) {
 800cc1e:	4604      	mov	r4, r0
 800cc20:	b360      	cbz	r0, 800cc7c <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cc22:	229c      	movs	r2, #156	; 0x9c
 800cc24:	2100      	movs	r1, #0
 800cc26:	4620      	mov	r0, r4
 800cc28:	f005 fc91 	bl	801254e <memset>
    pcb->prio = prio;
 800cc2c:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cc2e:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 800cc32:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cc36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc3a:	8562      	strh	r2, [r4, #42]	; 0x2a
 800cc3c:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cc3e:	22ff      	movs	r2, #255	; 0xff
 800cc40:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800cc42:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cc46:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cc48:	2206      	movs	r2, #6
 800cc4a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cc4e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800cc50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc54:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800cc56:	2201      	movs	r2, #1
 800cc58:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cc5c:	4a3b      	ldr	r2, [pc, #236]	; (800cd4c <tcp_alloc+0x138>)
 800cc5e:	6812      	ldr	r2, [r2, #0]
 800cc60:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cc62:	4a3b      	ldr	r2, [pc, #236]	; (800cd50 <tcp_alloc+0x13c>)
 800cc64:	7812      	ldrb	r2, [r2, #0]
 800cc66:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 800cc68:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 800cc6c:	4b39      	ldr	r3, [pc, #228]	; (800cd54 <tcp_alloc+0x140>)
 800cc6e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cc72:	4b39      	ldr	r3, [pc, #228]	; (800cd58 <tcp_alloc+0x144>)
 800cc74:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800cc78:	4620      	mov	r0, r4
 800cc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cc7c:	4b37      	ldr	r3, [pc, #220]	; (800cd5c <tcp_alloc+0x148>)
 800cc7e:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 800cc80:	b96d      	cbnz	r5, 800cc9e <tcp_alloc+0x8a>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc82:	4b37      	ldr	r3, [pc, #220]	; (800cd60 <tcp_alloc+0x14c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	b1f3      	cbz	r3, 800ccc6 <tcp_alloc+0xb2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc88:	4a30      	ldr	r2, [pc, #192]	; (800cd4c <tcp_alloc+0x138>)
 800cc8a:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	e00f      	b.n	800ccb0 <tcp_alloc+0x9c>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cc90:	f023 0308 	bic.w	r3, r3, #8
 800cc94:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800cc96:	f7ff fb69 	bl	800c36c <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800cc9a:	2d00      	cmp	r5, #0
 800cc9c:	d0f1      	beq.n	800cc82 <tcp_alloc+0x6e>
    struct tcp_pcb *next = pcb->next;
 800cc9e:	4628      	mov	r0, r5
 800cca0:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800cca2:	8b43      	ldrh	r3, [r0, #26]
 800cca4:	f013 0f08 	tst.w	r3, #8
 800cca8:	d0f7      	beq.n	800cc9a <tcp_alloc+0x86>
 800ccaa:	e7f1      	b.n	800cc90 <tcp_alloc+0x7c>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	b133      	cbz	r3, 800ccbe <tcp_alloc+0xaa>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccb0:	6a1a      	ldr	r2, [r3, #32]
 800ccb2:	1a82      	subs	r2, r0, r2
 800ccb4:	428a      	cmp	r2, r1
 800ccb6:	d3f9      	bcc.n	800ccac <tcp_alloc+0x98>
      inactivity = tcp_ticks - pcb->tmr;
 800ccb8:	4611      	mov	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccba:	461c      	mov	r4, r3
 800ccbc:	e7f6      	b.n	800ccac <tcp_alloc+0x98>
  if (inactive != NULL) {
 800ccbe:	b114      	cbz	r4, 800ccc6 <tcp_alloc+0xb2>
    tcp_abort(inactive);
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f7ff ff0b 	bl	800cadc <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	f7fe fd58 	bl	800b77c <memp_malloc>
    if (pcb == NULL) {
 800cccc:	4604      	mov	r4, r0
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d1a7      	bne.n	800cc22 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800ccd2:	2009      	movs	r0, #9
 800ccd4:	f7ff ff6c 	bl	800cbb0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ccd8:	2001      	movs	r0, #1
 800ccda:	f7fe fd4f 	bl	800b77c <memp_malloc>
      if (pcb == NULL) {
 800ccde:	4604      	mov	r4, r0
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d19e      	bne.n	800cc22 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800cce4:	2008      	movs	r0, #8
 800cce6:	f7ff ff63 	bl	800cbb0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ccea:	2001      	movs	r0, #1
 800ccec:	f7fe fd46 	bl	800b77c <memp_malloc>
        if (pcb == NULL) {
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d195      	bne.n	800cc22 <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ccf6:	f016 0f80 	tst.w	r6, #128	; 0x80
 800ccfa:	d102      	bne.n	800cd02 <tcp_alloc+0xee>
  if (mprio == 0) {
 800ccfc:	b1f6      	cbz	r6, 800cd3c <tcp_alloc+0x128>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ccfe:	4633      	mov	r3, r6
 800cd00:	e000      	b.n	800cd04 <tcp_alloc+0xf0>
 800cd02:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 800cd04:	3b01      	subs	r3, #1
 800cd06:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd08:	4b14      	ldr	r3, [pc, #80]	; (800cd5c <tcp_alloc+0x148>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	b1b3      	cbz	r3, 800cd3c <tcp_alloc+0x128>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cd0e:	490f      	ldr	r1, [pc, #60]	; (800cd4c <tcp_alloc+0x138>)
 800cd10:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 800cd12:	2000      	movs	r0, #0
 800cd14:	e005      	b.n	800cd22 <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 800cd16:	6a1a      	ldr	r2, [r3, #32]
 800cd18:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 800cd1a:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800cd1c:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	b143      	cbz	r3, 800cd34 <tcp_alloc+0x120>
    if ((pcb->prio < mprio) ||
 800cd22:	7d59      	ldrb	r1, [r3, #21]
 800cd24:	4291      	cmp	r1, r2
 800cd26:	d3f6      	bcc.n	800cd16 <tcp_alloc+0x102>
 800cd28:	d1f9      	bne.n	800cd1e <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cd2a:	6a1f      	ldr	r7, [r3, #32]
 800cd2c:	1bef      	subs	r7, r5, r7
 800cd2e:	4287      	cmp	r7, r0
 800cd30:	d3f5      	bcc.n	800cd1e <tcp_alloc+0x10a>
 800cd32:	e7f0      	b.n	800cd16 <tcp_alloc+0x102>
  if (inactive != NULL) {
 800cd34:	b114      	cbz	r4, 800cd3c <tcp_alloc+0x128>
    tcp_abort(inactive);
 800cd36:	4620      	mov	r0, r4
 800cd38:	f7ff fed0 	bl	800cadc <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	f7fe fd1d 	bl	800b77c <memp_malloc>
  if (pcb != NULL) {
 800cd42:	4604      	mov	r4, r0
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d097      	beq.n	800cc78 <tcp_alloc+0x64>
 800cd48:	e76b      	b.n	800cc22 <tcp_alloc+0xe>
 800cd4a:	bf00      	nop
 800cd4c:	2001b610 	.word	0x2001b610
 800cd50:	20012bba 	.word	0x20012bba
 800cd54:	0800cf39 	.word	0x0800cf39
 800cd58:	006ddd00 	.word	0x006ddd00
 800cd5c:	2001b60c 	.word	0x2001b60c
 800cd60:	2001b61c 	.word	0x2001b61c

0800cd64 <tcp_new_ip_type>:
{
 800cd64:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800cd66:	2040      	movs	r0, #64	; 0x40
 800cd68:	f7ff ff54 	bl	800cc14 <tcp_alloc>
}
 800cd6c:	bd08      	pop	{r3, pc}
	...

0800cd70 <tcp_close_shutdown>:
{
 800cd70:	b530      	push	{r4, r5, lr}
 800cd72:	b085      	sub	sp, #20
 800cd74:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cd76:	4604      	mov	r4, r0
 800cd78:	b188      	cbz	r0, 800cd9e <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cd7a:	b125      	cbz	r5, 800cd86 <tcp_close_shutdown+0x16>
 800cd7c:	7d23      	ldrb	r3, [r4, #20]
 800cd7e:	2b04      	cmp	r3, #4
 800cd80:	d015      	beq.n	800cdae <tcp_close_shutdown+0x3e>
 800cd82:	2b07      	cmp	r3, #7
 800cd84:	d013      	beq.n	800cdae <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 800cd86:	7d23      	ldrb	r3, [r4, #20]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d06e      	beq.n	800ce6a <tcp_close_shutdown+0xfa>
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	f000 8091 	beq.w	800ceb4 <tcp_close_shutdown+0x144>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d04f      	beq.n	800ce36 <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 800cd96:	4620      	mov	r0, r4
 800cd98:	f7ff fae8 	bl	800c36c <tcp_close_shutdown_fin>
 800cd9c:	e063      	b.n	800ce66 <tcp_close_shutdown+0xf6>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cd9e:	4b4b      	ldr	r3, [pc, #300]	; (800cecc <tcp_close_shutdown+0x15c>)
 800cda0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cda4:	494a      	ldr	r1, [pc, #296]	; (800ced0 <tcp_close_shutdown+0x160>)
 800cda6:	484b      	ldr	r0, [pc, #300]	; (800ced4 <tcp_close_shutdown+0x164>)
 800cda8:	f005 fc34 	bl	8012614 <iprintf>
 800cdac:	e7e5      	b.n	800cd7a <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cdae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cdb0:	b1e3      	cbz	r3, 800cdec <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cdb2:	8b63      	ldrh	r3, [r4, #26]
 800cdb4:	f013 0f10 	tst.w	r3, #16
 800cdb8:	d01d      	beq.n	800cdf6 <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cdba:	8b23      	ldrh	r3, [r4, #24]
 800cdbc:	9302      	str	r3, [sp, #8]
 800cdbe:	8ae3      	ldrh	r3, [r4, #22]
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	1d23      	adds	r3, r4, #4
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	4623      	mov	r3, r4
 800cdc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cdca:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f002 ffa1 	bl	800fd14 <tcp_rst>
      tcp_pcb_purge(pcb);
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7ff fd62 	bl	800c89c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cdd8:	4b3f      	ldr	r3, [pc, #252]	; (800ced8 <tcp_close_shutdown+0x168>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	d012      	beq.n	800ce06 <tcp_close_shutdown+0x96>
 800cde0:	b1bb      	cbz	r3, 800ce12 <tcp_close_shutdown+0xa2>
 800cde2:	68da      	ldr	r2, [r3, #12]
 800cde4:	42a2      	cmp	r2, r4
 800cde6:	d012      	beq.n	800ce0e <tcp_close_shutdown+0x9e>
 800cde8:	4613      	mov	r3, r2
 800cdea:	e7f9      	b.n	800cde0 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cdec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cdee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdf2:	d0c8      	beq.n	800cd86 <tcp_close_shutdown+0x16>
 800cdf4:	e7dd      	b.n	800cdb2 <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cdf6:	4b35      	ldr	r3, [pc, #212]	; (800cecc <tcp_close_shutdown+0x15c>)
 800cdf8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cdfc:	4937      	ldr	r1, [pc, #220]	; (800cedc <tcp_close_shutdown+0x16c>)
 800cdfe:	4835      	ldr	r0, [pc, #212]	; (800ced4 <tcp_close_shutdown+0x164>)
 800ce00:	f005 fc08 	bl	8012614 <iprintf>
 800ce04:	e7d9      	b.n	800cdba <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 800ce06:	68e2      	ldr	r2, [r4, #12]
 800ce08:	4b33      	ldr	r3, [pc, #204]	; (800ced8 <tcp_close_shutdown+0x168>)
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	e001      	b.n	800ce12 <tcp_close_shutdown+0xa2>
 800ce0e:	68e2      	ldr	r2, [r4, #12]
 800ce10:	60da      	str	r2, [r3, #12]
 800ce12:	2300      	movs	r3, #0
 800ce14:	60e3      	str	r3, [r4, #12]
 800ce16:	4b32      	ldr	r3, [pc, #200]	; (800cee0 <tcp_close_shutdown+0x170>)
 800ce18:	2201      	movs	r2, #1
 800ce1a:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800ce1c:	4b31      	ldr	r3, [pc, #196]	; (800cee4 <tcp_close_shutdown+0x174>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	42a3      	cmp	r3, r4
 800ce22:	d004      	beq.n	800ce2e <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 800ce24:	4620      	mov	r0, r4
 800ce26:	f7ff fae9 	bl	800c3fc <tcp_free>
      return ERR_OK;
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e01b      	b.n	800ce66 <tcp_close_shutdown+0xf6>
        tcp_trigger_input_pcb_close();
 800ce2e:	f002 f809 	bl	800ee44 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800ce32:	2000      	movs	r0, #0
 800ce34:	e017      	b.n	800ce66 <tcp_close_shutdown+0xf6>
      if (pcb->local_port != 0) {
 800ce36:	8ae3      	ldrh	r3, [r4, #22]
 800ce38:	b18b      	cbz	r3, 800ce5e <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce3a:	4b2b      	ldr	r3, [pc, #172]	; (800cee8 <tcp_close_shutdown+0x178>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	42a3      	cmp	r3, r4
 800ce40:	d005      	beq.n	800ce4e <tcp_close_shutdown+0xde>
 800ce42:	b153      	cbz	r3, 800ce5a <tcp_close_shutdown+0xea>
 800ce44:	68da      	ldr	r2, [r3, #12]
 800ce46:	42a2      	cmp	r2, r4
 800ce48:	d005      	beq.n	800ce56 <tcp_close_shutdown+0xe6>
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	e7f9      	b.n	800ce42 <tcp_close_shutdown+0xd2>
 800ce4e:	68e2      	ldr	r2, [r4, #12]
 800ce50:	4b25      	ldr	r3, [pc, #148]	; (800cee8 <tcp_close_shutdown+0x178>)
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e001      	b.n	800ce5a <tcp_close_shutdown+0xea>
 800ce56:	68e2      	ldr	r2, [r4, #12]
 800ce58:	60da      	str	r2, [r3, #12]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f7ff facc 	bl	800c3fc <tcp_free>
  return ERR_OK;
 800ce64:	2000      	movs	r0, #0
}
 800ce66:	b005      	add	sp, #20
 800ce68:	bd30      	pop	{r4, r5, pc}
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce6a:	4d20      	ldr	r5, [pc, #128]	; (800ceec <tcp_close_shutdown+0x17c>)
 800ce6c:	1d29      	adds	r1, r5, #4
 800ce6e:	3510      	adds	r5, #16
      pcb->listener = NULL;
 800ce70:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ce72:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce76:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce78:	b133      	cbz	r3, 800ce88 <tcp_close_shutdown+0x118>
    if (pcb->listener == lpcb) {
 800ce7a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ce7c:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800ce7e:	bf08      	it	eq
 800ce80:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1f8      	bne.n	800ce7a <tcp_close_shutdown+0x10a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce88:	428d      	cmp	r5, r1
 800ce8a:	d1f2      	bne.n	800ce72 <tcp_close_shutdown+0x102>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ce8c:	4621      	mov	r1, r4
 800ce8e:	4818      	ldr	r0, [pc, #96]	; (800cef0 <tcp_close_shutdown+0x180>)
 800ce90:	f7ff fd36 	bl	800c900 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ce94:	7d23      	ldrb	r3, [r4, #20]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d005      	beq.n	800cea6 <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	2002      	movs	r0, #2
 800ce9e:	f7fe fc87 	bl	800b7b0 <memp_free>
  return ERR_OK;
 800cea2:	2000      	movs	r0, #0
}
 800cea4:	e7df      	b.n	800ce66 <tcp_close_shutdown+0xf6>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cea6:	4b09      	ldr	r3, [pc, #36]	; (800cecc <tcp_close_shutdown+0x15c>)
 800cea8:	22df      	movs	r2, #223	; 0xdf
 800ceaa:	4912      	ldr	r1, [pc, #72]	; (800cef4 <tcp_close_shutdown+0x184>)
 800ceac:	4809      	ldr	r0, [pc, #36]	; (800ced4 <tcp_close_shutdown+0x164>)
 800ceae:	f005 fbb1 	bl	8012614 <iprintf>
 800ceb2:	e7f2      	b.n	800ce9a <tcp_close_shutdown+0x12a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	4808      	ldr	r0, [pc, #32]	; (800ced8 <tcp_close_shutdown+0x168>)
 800ceb8:	f7ff fd22 	bl	800c900 <tcp_pcb_remove>
 800cebc:	4b08      	ldr	r3, [pc, #32]	; (800cee0 <tcp_close_shutdown+0x170>)
 800cebe:	2201      	movs	r2, #1
 800cec0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cec2:	4620      	mov	r0, r4
 800cec4:	f7ff fa9a 	bl	800c3fc <tcp_free>
  return ERR_OK;
 800cec8:	2000      	movs	r0, #0
      break;
 800ceca:	e7cc      	b.n	800ce66 <tcp_close_shutdown+0xf6>
 800cecc:	08014954 	.word	0x08014954
 800ced0:	08014d34 	.word	0x08014d34
 800ced4:	0801397c 	.word	0x0801397c
 800ced8:	2001b60c 	.word	0x2001b60c
 800cedc:	08014d54 	.word	0x08014d54
 800cee0:	2001b608 	.word	0x2001b608
 800cee4:	2001b620 	.word	0x2001b620
 800cee8:	2001b618 	.word	0x2001b618
 800ceec:	08014fe0 	.word	0x08014fe0
 800cef0:	2001b614 	.word	0x2001b614
 800cef4:	08014d70 	.word	0x08014d70

0800cef8 <tcp_close>:
{
 800cef8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cefa:	b160      	cbz	r0, 800cf16 <tcp_close+0x1e>
 800cefc:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 800cefe:	7d02      	ldrb	r2, [r0, #20]
 800cf00:	2a01      	cmp	r2, #1
 800cf02:	d003      	beq.n	800cf0c <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cf04:	8b42      	ldrh	r2, [r0, #26]
 800cf06:	f042 0210 	orr.w	r2, r2, #16
 800cf0a:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff ff2e 	bl	800cd70 <tcp_close_shutdown>
}
 800cf14:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <tcp_close+0x34>)
 800cf18:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cf1c:	4904      	ldr	r1, [pc, #16]	; (800cf30 <tcp_close+0x38>)
 800cf1e:	4805      	ldr	r0, [pc, #20]	; (800cf34 <tcp_close+0x3c>)
 800cf20:	f005 fb78 	bl	8012614 <iprintf>
 800cf24:	f06f 000f 	mvn.w	r0, #15
 800cf28:	e7f4      	b.n	800cf14 <tcp_close+0x1c>
 800cf2a:	bf00      	nop
 800cf2c:	08014954 	.word	0x08014954
 800cf30:	08014d8c 	.word	0x08014d8c
 800cf34:	0801397c 	.word	0x0801397c

0800cf38 <tcp_recv_null>:
{
 800cf38:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf3a:	b151      	cbz	r1, 800cf52 <tcp_recv_null+0x1a>
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	4608      	mov	r0, r1
  if (p != NULL) {
 800cf40:	b18a      	cbz	r2, 800cf66 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800cf42:	8911      	ldrh	r1, [r2, #8]
 800cf44:	f7ff fb72 	bl	800c62c <tcp_recved>
    pbuf_free(p);
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7fe fef1 	bl	800bd30 <pbuf_free>
  return ERR_OK;
 800cf4e:	2000      	movs	r0, #0
}
 800cf50:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf52:	4b08      	ldr	r3, [pc, #32]	; (800cf74 <tcp_recv_null+0x3c>)
 800cf54:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf58:	4907      	ldr	r1, [pc, #28]	; (800cf78 <tcp_recv_null+0x40>)
 800cf5a:	4808      	ldr	r0, [pc, #32]	; (800cf7c <tcp_recv_null+0x44>)
 800cf5c:	f005 fb5a 	bl	8012614 <iprintf>
 800cf60:	f06f 000f 	mvn.w	r0, #15
 800cf64:	e7f4      	b.n	800cf50 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 800cf66:	b10b      	cbz	r3, 800cf6c <tcp_recv_null+0x34>
  return ERR_OK;
 800cf68:	2000      	movs	r0, #0
 800cf6a:	e7f1      	b.n	800cf50 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 800cf6c:	f7ff ffc4 	bl	800cef8 <tcp_close>
 800cf70:	e7ee      	b.n	800cf50 <tcp_recv_null+0x18>
 800cf72:	bf00      	nop
 800cf74:	08014954 	.word	0x08014954
 800cf78:	08014da4 	.word	0x08014da4
 800cf7c:	0801397c 	.word	0x0801397c

0800cf80 <tcp_process_refused_data>:
{
 800cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf82:	b318      	cbz	r0, 800cfcc <tcp_process_refused_data+0x4c>
 800cf84:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800cf86:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800cf88:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf8e:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800cf92:	b32d      	cbz	r5, 800cfe0 <tcp_process_refused_data+0x60>
 800cf94:	4632      	mov	r2, r6
 800cf96:	4601      	mov	r1, r0
 800cf98:	6900      	ldr	r0, [r0, #16]
 800cf9a:	47a8      	blx	r5
 800cf9c:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800cf9e:	bb3d      	cbnz	r5, 800cff0 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cfa0:	f017 0f20 	tst.w	r7, #32
 800cfa4:	d02a      	beq.n	800cffc <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cfa6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cfa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfac:	d001      	beq.n	800cfb2 <tcp_process_refused_data+0x32>
          pcb->rcv_wnd++;
 800cfae:	3301      	adds	r3, #1
 800cfb0:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800cfb2:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800cfb6:	b30e      	cbz	r6, 800cffc <tcp_process_refused_data+0x7c>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	461a      	mov	r2, r3
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	6920      	ldr	r0, [r4, #16]
 800cfc0:	47b0      	blx	r6
          return ERR_ABRT;
 800cfc2:	f110 0f0d 	cmn.w	r0, #13
 800cfc6:	bf08      	it	eq
 800cfc8:	4605      	moveq	r5, r0
 800cfca:	e017      	b.n	800cffc <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfcc:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <tcp_process_refused_data+0x80>)
 800cfce:	f240 6209 	movw	r2, #1545	; 0x609
 800cfd2:	490c      	ldr	r1, [pc, #48]	; (800d004 <tcp_process_refused_data+0x84>)
 800cfd4:	480c      	ldr	r0, [pc, #48]	; (800d008 <tcp_process_refused_data+0x88>)
 800cfd6:	f005 fb1d 	bl	8012614 <iprintf>
 800cfda:	f06f 050f 	mvn.w	r5, #15
 800cfde:	e00d      	b.n	800cffc <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	4632      	mov	r2, r6
 800cfe4:	4601      	mov	r1, r0
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff ffa6 	bl	800cf38 <tcp_recv_null>
 800cfec:	4605      	mov	r5, r0
 800cfee:	e7d6      	b.n	800cf9e <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 800cff0:	f115 0f0d 	cmn.w	r5, #13
 800cff4:	d002      	beq.n	800cffc <tcp_process_refused_data+0x7c>
      pcb->refused_data = refused_data;
 800cff6:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 800cff8:	f06f 0504 	mvn.w	r5, #4
}
 800cffc:	4628      	mov	r0, r5
 800cffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d000:	08014954 	.word	0x08014954
 800d004:	08014dc0 	.word	0x08014dc0
 800d008:	0801397c 	.word	0x0801397c

0800d00c <tcp_fasttmr>:
{
 800d00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800d010:	4a1f      	ldr	r2, [pc, #124]	; (800d090 <tcp_fasttmr+0x84>)
 800d012:	7813      	ldrb	r3, [r2, #0]
 800d014:	3301      	adds	r3, #1
 800d016:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800d018:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d098 <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 800d01c:	4e1d      	ldr	r6, [pc, #116]	; (800d094 <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 800d01e:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800d022:	2c00      	cmp	r4, #0
 800d024:	d032      	beq.n	800d08c <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d026:	4d1a      	ldr	r5, [pc, #104]	; (800d090 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 800d028:	2700      	movs	r7, #0
 800d02a:	e013      	b.n	800d054 <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 800d02c:	f043 0302 	orr.w	r3, r3, #2
 800d030:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800d032:	4620      	mov	r0, r4
 800d034:	f002 feee 	bl	800fe14 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d038:	8b63      	ldrh	r3, [r4, #26]
 800d03a:	f023 0303 	bic.w	r3, r3, #3
 800d03e:	8363      	strh	r3, [r4, #26]
 800d040:	e011      	b.n	800d066 <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d042:	f023 0308 	bic.w	r3, r3, #8
 800d046:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800d048:	4620      	mov	r0, r4
 800d04a:	f7ff f98f 	bl	800c36c <tcp_close_shutdown_fin>
 800d04e:	e00e      	b.n	800d06e <tcp_fasttmr+0x62>
      pcb = pcb->next;
 800d050:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800d052:	b1dc      	cbz	r4, 800d08c <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d054:	782b      	ldrb	r3, [r5, #0]
 800d056:	7fa2      	ldrb	r2, [r4, #30]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d0f9      	beq.n	800d050 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 800d05c:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800d05e:	8b63      	ldrh	r3, [r4, #26]
 800d060:	f013 0f01 	tst.w	r3, #1
 800d064:	d1e2      	bne.n	800d02c <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 800d066:	8b63      	ldrh	r3, [r4, #26]
 800d068:	f013 0f08 	tst.w	r3, #8
 800d06c:	d1e9      	bne.n	800d042 <tcp_fasttmr+0x36>
      next = pcb->next;
 800d06e:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800d072:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d074:	b143      	cbz	r3, 800d088 <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 800d076:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800d078:	4620      	mov	r0, r4
 800d07a:	f7ff ff81 	bl	800cf80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d07e:	7833      	ldrb	r3, [r6, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1cc      	bne.n	800d01e <tcp_fasttmr+0x12>
      pcb = next;
 800d084:	464c      	mov	r4, r9
 800d086:	e7e4      	b.n	800d052 <tcp_fasttmr+0x46>
 800d088:	464c      	mov	r4, r9
 800d08a:	e7e2      	b.n	800d052 <tcp_fasttmr+0x46>
}
 800d08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d090:	20012bba 	.word	0x20012bba
 800d094:	2001b608 	.word	0x2001b608
 800d098:	2001b60c 	.word	0x2001b60c

0800d09c <tcp_shutdown>:
{
 800d09c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d09e:	b188      	cbz	r0, 800d0c4 <tcp_shutdown+0x28>
 800d0a0:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 800d0a2:	7d03      	ldrb	r3, [r0, #20]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d02a      	beq.n	800d0fe <tcp_shutdown+0x62>
  if (shut_rx) {
 800d0a8:	b1d1      	cbz	r1, 800d0e0 <tcp_shutdown+0x44>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d0aa:	8b43      	ldrh	r3, [r0, #26]
 800d0ac:	f043 0310 	orr.w	r3, r3, #16
 800d0b0:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800d0b2:	b98a      	cbnz	r2, 800d0d8 <tcp_shutdown+0x3c>
    if (pcb->refused_data != NULL) {
 800d0b4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800d0b6:	b118      	cbz	r0, 800d0c0 <tcp_shutdown+0x24>
      pbuf_free(pcb->refused_data);
 800d0b8:	f7fe fe3a 	bl	800bd30 <pbuf_free>
      pcb->refused_data = NULL;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	67a3      	str	r3, [r4, #120]	; 0x78
  return ERR_OK;
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	e01b      	b.n	800d0fc <tcp_shutdown+0x60>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0c4:	4b12      	ldr	r3, [pc, #72]	; (800d110 <tcp_shutdown+0x74>)
 800d0c6:	f240 2207 	movw	r2, #519	; 0x207
 800d0ca:	4912      	ldr	r1, [pc, #72]	; (800d114 <tcp_shutdown+0x78>)
 800d0cc:	4812      	ldr	r0, [pc, #72]	; (800d118 <tcp_shutdown+0x7c>)
 800d0ce:	f005 faa1 	bl	8012614 <iprintf>
 800d0d2:	f06f 000f 	mvn.w	r0, #15
 800d0d6:	e011      	b.n	800d0fc <tcp_shutdown+0x60>
      return tcp_close_shutdown(pcb, 1);
 800d0d8:	2101      	movs	r1, #1
 800d0da:	f7ff fe49 	bl	800cd70 <tcp_close_shutdown>
 800d0de:	e00d      	b.n	800d0fc <tcp_shutdown+0x60>
  if (shut_tx) {
 800d0e0:	b182      	cbz	r2, 800d104 <tcp_shutdown+0x68>
    switch (pcb->state) {
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	d804      	bhi.n	800d0f0 <tcp_shutdown+0x54>
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	d804      	bhi.n	800d0f4 <tcp_shutdown+0x58>
 800d0ea:	f06f 000a 	mvn.w	r0, #10
 800d0ee:	e005      	b.n	800d0fc <tcp_shutdown+0x60>
 800d0f0:	2b07      	cmp	r3, #7
 800d0f2:	d109      	bne.n	800d108 <tcp_shutdown+0x6c>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7ff fe3a 	bl	800cd70 <tcp_close_shutdown>
}
 800d0fc:	bd10      	pop	{r4, pc}
    return ERR_CONN;
 800d0fe:	f06f 000a 	mvn.w	r0, #10
 800d102:	e7fb      	b.n	800d0fc <tcp_shutdown+0x60>
  return ERR_OK;
 800d104:	2000      	movs	r0, #0
 800d106:	e7f9      	b.n	800d0fc <tcp_shutdown+0x60>
    switch (pcb->state) {
 800d108:	f06f 000a 	mvn.w	r0, #10
 800d10c:	e7f6      	b.n	800d0fc <tcp_shutdown+0x60>
 800d10e:	bf00      	nop
 800d110:	08014954 	.word	0x08014954
 800d114:	08014de8 	.word	0x08014de8
 800d118:	0801397c 	.word	0x0801397c

0800d11c <tcp_slowtmr>:
{
 800d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d120:	b085      	sub	sp, #20
  ++tcp_ticks;
 800d122:	4ab7      	ldr	r2, [pc, #732]	; (800d400 <tcp_slowtmr+0x2e4>)
 800d124:	6813      	ldr	r3, [r2, #0]
 800d126:	3301      	adds	r3, #1
 800d128:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d12a:	4ab6      	ldr	r2, [pc, #728]	; (800d404 <tcp_slowtmr+0x2e8>)
 800d12c:	7813      	ldrb	r3, [r2, #0]
 800d12e:	3301      	adds	r3, #1
 800d130:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800d132:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 800d430 <tcp_slowtmr+0x314>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d136:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 800d434 <tcp_slowtmr+0x318>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d13a:	4eb3      	ldr	r6, [pc, #716]	; (800d408 <tcp_slowtmr+0x2ec>)
  pcb = tcp_active_pcbs;
 800d13c:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 800d140:	2c00      	cmp	r4, #0
 800d142:	f000 81f0 	beq.w	800d526 <tcp_slowtmr+0x40a>
  prev = NULL;
 800d146:	2500      	movs	r5, #0
 800d148:	e1a6      	b.n	800d498 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d14a:	4633      	mov	r3, r6
 800d14c:	f240 42be 	movw	r2, #1214	; 0x4be
 800d150:	49ae      	ldr	r1, [pc, #696]	; (800d40c <tcp_slowtmr+0x2f0>)
 800d152:	48af      	ldr	r0, [pc, #700]	; (800d410 <tcp_slowtmr+0x2f4>)
 800d154:	f005 fa5e 	bl	8012614 <iprintf>
 800d158:	e1a2      	b.n	800d4a0 <tcp_slowtmr+0x384>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d15a:	4633      	mov	r3, r6
 800d15c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d160:	49ac      	ldr	r1, [pc, #688]	; (800d414 <tcp_slowtmr+0x2f8>)
 800d162:	48ab      	ldr	r0, [pc, #684]	; (800d410 <tcp_slowtmr+0x2f4>)
 800d164:	f005 fa56 	bl	8012614 <iprintf>
 800d168:	e19e      	b.n	800d4a8 <tcp_slowtmr+0x38c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d16a:	4633      	mov	r3, r6
 800d16c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d170:	49a9      	ldr	r1, [pc, #676]	; (800d418 <tcp_slowtmr+0x2fc>)
 800d172:	48a7      	ldr	r0, [pc, #668]	; (800d410 <tcp_slowtmr+0x2f4>)
 800d174:	f005 fa4e 	bl	8012614 <iprintf>
 800d178:	e19a      	b.n	800d4b0 <tcp_slowtmr+0x394>
      continue;
 800d17a:	4625      	mov	r5, r4
      pcb = pcb->next;
 800d17c:	68e4      	ldr	r4, [r4, #12]
      continue;
 800d17e:	e189      	b.n	800d494 <tcp_slowtmr+0x378>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d180:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d184:	2b05      	cmp	r3, #5
 800d186:	f240 81a3 	bls.w	800d4d0 <tcp_slowtmr+0x3b4>
    pcb_reset = 0;
 800d18a:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 800d18e:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 800d190:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d192:	b15b      	cbz	r3, 800d1ac <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d194:	4b9a      	ldr	r3, [pc, #616]	; (800d400 <tcp_slowtmr+0x2e4>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	6a23      	ldr	r3, [r4, #32]
 800d19a:	1ad2      	subs	r2, r2, r3
 800d19c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800d1a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800d1a4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d1a8:	f080 80ff 	bcs.w	800d3aa <tcp_slowtmr+0x28e>
    if (pcb->state == SYN_RCVD) {
 800d1ac:	7d23      	ldrb	r3, [r4, #20]
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	f000 80ff 	beq.w	800d3b2 <tcp_slowtmr+0x296>
    if (pcb->state == LAST_ACK) {
 800d1b4:	2b09      	cmp	r3, #9
 800d1b6:	f040 8103 	bne.w	800d3c0 <tcp_slowtmr+0x2a4>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1ba:	4b91      	ldr	r3, [pc, #580]	; (800d400 <tcp_slowtmr+0x2e4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6a22      	ldr	r2, [r4, #32]
 800d1c0:	1a9b      	subs	r3, r3, r2
 800d1c2:	2bf0      	cmp	r3, #240	; 0xf0
 800d1c4:	f240 80fc 	bls.w	800d3c0 <tcp_slowtmr+0x2a4>
      tcp_err_fn err_fn = pcb->errf;
 800d1c8:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f7ff fb65 	bl	800c89c <tcp_pcb_purge>
      if (prev != NULL) {
 800d1d2:	2d00      	cmp	r5, #0
 800d1d4:	f000 8138 	beq.w	800d448 <tcp_slowtmr+0x32c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d1d8:	f8da 3000 	ldr.w	r3, [sl]
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	f000 812b 	beq.w	800d438 <tcp_slowtmr+0x31c>
        prev->next = pcb->next;
 800d1e2:	68e3      	ldr	r3, [r4, #12]
 800d1e4:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 800d1e6:	f1b8 0f00 	cmp.w	r8, #0
 800d1ea:	f040 813c 	bne.w	800d466 <tcp_slowtmr+0x34a>
      err_arg = pcb->callback_arg;
 800d1ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 800d1f2:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f7ff f900 	bl	800c3fc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d1fc:	4b87      	ldr	r3, [pc, #540]	; (800d41c <tcp_slowtmr+0x300>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d202:	2f00      	cmp	r7, #0
 800d204:	f000 8142 	beq.w	800d48c <tcp_slowtmr+0x370>
 800d208:	f06f 010c 	mvn.w	r1, #12
 800d20c:	4648      	mov	r0, r9
 800d20e:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 800d210:	4b82      	ldr	r3, [pc, #520]	; (800d41c <tcp_slowtmr+0x300>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d191      	bne.n	800d13c <tcp_slowtmr+0x20>
      pcb = pcb->next;
 800d218:	4644      	mov	r4, r8
 800d21a:	e13b      	b.n	800d494 <tcp_slowtmr+0x378>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d21c:	4633      	mov	r3, r6
 800d21e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d222:	497f      	ldr	r1, [pc, #508]	; (800d420 <tcp_slowtmr+0x304>)
 800d224:	487a      	ldr	r0, [pc, #488]	; (800d410 <tcp_slowtmr+0x2f4>)
 800d226:	f005 f9f5 	bl	8012614 <iprintf>
 800d22a:	e163      	b.n	800d4f4 <tcp_slowtmr+0x3d8>
            if (pcb->snd_wnd == 0) {
 800d22c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800d230:	b929      	cbnz	r1, 800d23e <tcp_slowtmr+0x122>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d232:	4620      	mov	r0, r4
 800d234:	f003 f81e 	bl	8010274 <tcp_zero_window_probe>
 800d238:	b128      	cbz	r0, 800d246 <tcp_slowtmr+0x12a>
    pcb_remove = 0;
 800d23a:	2700      	movs	r7, #0
 800d23c:	e060      	b.n	800d300 <tcp_slowtmr+0x1e4>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d23e:	4620      	mov	r0, r4
 800d240:	f002 fae0 	bl	800f804 <tcp_split_unsent_seg>
 800d244:	b158      	cbz	r0, 800d25e <tcp_slowtmr+0x142>
              pcb->persist_cnt = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d24c:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800d250:	2b06      	cmp	r3, #6
 800d252:	d876      	bhi.n	800d342 <tcp_slowtmr+0x226>
                pcb->persist_backoff++;
 800d254:	3301      	adds	r3, #1
 800d256:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 800d25a:	2700      	movs	r7, #0
 800d25c:	e050      	b.n	800d300 <tcp_slowtmr+0x1e4>
                if (tcp_output(pcb) == ERR_OK) {
 800d25e:	4620      	mov	r0, r4
 800d260:	f002 fdd8 	bl	800fe14 <tcp_output>
 800d264:	2800      	cmp	r0, #0
 800d266:	d1ee      	bne.n	800d246 <tcp_slowtmr+0x12a>
    pcb_remove = 0;
 800d268:	2700      	movs	r7, #0
 800d26a:	e049      	b.n	800d300 <tcp_slowtmr+0x1e4>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d26c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800d26e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d272:	4293      	cmp	r3, r2
 800d274:	d801      	bhi.n	800d27a <tcp_slowtmr+0x15e>
          ++pcb->rtime;
 800d276:	3301      	adds	r3, #1
 800d278:	8623      	strh	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800d27a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800d27e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800d282:	429a      	cmp	r2, r3
 800d284:	db3c      	blt.n	800d300 <tcp_slowtmr+0x1e4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d286:	4620      	mov	r0, r4
 800d288:	f002 fc72 	bl	800fb70 <tcp_rexmit_rto_prepare>
 800d28c:	b118      	cbz	r0, 800d296 <tcp_slowtmr+0x17a>
 800d28e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d290:	bbb3      	cbnz	r3, 800d300 <tcp_slowtmr+0x1e4>
 800d292:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d294:	b3a3      	cbz	r3, 800d300 <tcp_slowtmr+0x1e4>
            if (pcb->state != SYN_SENT) {
 800d296:	7d23      	ldrb	r3, [r4, #20]
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d014      	beq.n	800d2c6 <tcp_slowtmr+0x1aa>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d29c:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800d2a0:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800d2a4:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d2a8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d2ac:	2a0c      	cmp	r2, #12
 800d2ae:	bf28      	it	cs
 800d2b0:	220c      	movcs	r2, #12
 800d2b2:	495c      	ldr	r1, [pc, #368]	; (800d424 <tcp_slowtmr+0x308>)
 800d2b4:	5c8a      	ldrb	r2, [r1, r2]
 800d2b6:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d2b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	bfa8      	it	ge
 800d2c0:	4613      	movge	r3, r2
 800d2c2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d2ca:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800d2ce:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	bf28      	it	cs
 800d2d6:	461a      	movcs	r2, r3
 800d2d8:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d2da:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800d2dc:	0043      	lsls	r3, r0, #1
 800d2de:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d2e0:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800d2e4:	bf98      	it	ls
 800d2e6:	460b      	movls	r3, r1
 800d2e8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 800d2ec:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f002 ff58 	bl	80101ac <tcp_rexmit_rto_commit>
 800d2fc:	e000      	b.n	800d300 <tcp_slowtmr+0x1e4>
      ++pcb_remove;
 800d2fe:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 800d300:	7d23      	ldrb	r3, [r4, #20]
 800d302:	2b06      	cmp	r3, #6
 800d304:	d01f      	beq.n	800d346 <tcp_slowtmr+0x22a>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d306:	f894 8009 	ldrb.w	r8, [r4, #9]
 800d30a:	f018 0808 	ands.w	r8, r8, #8
 800d30e:	f43f af3f 	beq.w	800d190 <tcp_slowtmr+0x74>
 800d312:	2b04      	cmp	r3, #4
 800d314:	d001      	beq.n	800d31a <tcp_slowtmr+0x1fe>
 800d316:	2b07      	cmp	r3, #7
 800d318:	d141      	bne.n	800d39e <tcp_slowtmr+0x282>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d31a:	4b39      	ldr	r3, [pc, #228]	; (800d400 <tcp_slowtmr+0x2e4>)
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	6a23      	ldr	r3, [r4, #32]
 800d320:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d322:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800d326:	4b40      	ldr	r3, [pc, #256]	; (800d428 <tcp_slowtmr+0x30c>)
 800d328:	440b      	add	r3, r1
 800d32a:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d32e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800d332:	d91b      	bls.n	800d36c <tcp_slowtmr+0x250>
        ++pcb_remove;
 800d334:	3701      	adds	r7, #1
 800d336:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 800d338:	f04f 0801 	mov.w	r8, #1
 800d33c:	e728      	b.n	800d190 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 800d33e:	2701      	movs	r7, #1
 800d340:	e7de      	b.n	800d300 <tcp_slowtmr+0x1e4>
    pcb_remove = 0;
 800d342:	2700      	movs	r7, #0
 800d344:	e7dc      	b.n	800d300 <tcp_slowtmr+0x1e4>
      if (pcb->flags & TF_RXCLOSED) {
 800d346:	8b63      	ldrh	r3, [r4, #26]
 800d348:	f013 0f10 	tst.w	r3, #16
 800d34c:	d007      	beq.n	800d35e <tcp_slowtmr+0x242>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d34e:	4b2c      	ldr	r3, [pc, #176]	; (800d400 <tcp_slowtmr+0x2e4>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6a22      	ldr	r2, [r4, #32]
 800d354:	1a9b      	subs	r3, r3, r2
 800d356:	2b28      	cmp	r3, #40	; 0x28
 800d358:	d901      	bls.n	800d35e <tcp_slowtmr+0x242>
          ++pcb_remove;
 800d35a:	3701      	adds	r7, #1
 800d35c:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 800d35e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 8126 	beq.w	800d5b2 <tcp_slowtmr+0x496>
    pcb_reset = 0;
 800d366:	f04f 0800 	mov.w	r8, #0
 800d36a:	e713      	b.n	800d194 <tcp_slowtmr+0x78>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d36c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800d370:	482e      	ldr	r0, [pc, #184]	; (800d42c <tcp_slowtmr+0x310>)
 800d372:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d376:	fbab 1303 	umull	r1, r3, fp, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d37a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800d37e:	d802      	bhi.n	800d386 <tcp_slowtmr+0x26a>
    pcb_reset = 0;
 800d380:	f04f 0800 	mov.w	r8, #0
 800d384:	e704      	b.n	800d190 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 800d386:	4620      	mov	r0, r4
 800d388:	f002 ff46 	bl	8010218 <tcp_keepalive>
        if (err == ERR_OK) {
 800d38c:	b950      	cbnz	r0, 800d3a4 <tcp_slowtmr+0x288>
          pcb->keep_cnt_sent++;
 800d38e:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800d392:	3301      	adds	r3, #1
 800d394:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800d398:	f04f 0800 	mov.w	r8, #0
 800d39c:	e6f8      	b.n	800d190 <tcp_slowtmr+0x74>
 800d39e:	f04f 0800 	mov.w	r8, #0
 800d3a2:	e6f5      	b.n	800d190 <tcp_slowtmr+0x74>
 800d3a4:	f04f 0800 	mov.w	r8, #0
 800d3a8:	e6f2      	b.n	800d190 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f7ff fa6c 	bl	800c888 <tcp_free_ooseq>
 800d3b0:	e6fc      	b.n	800d1ac <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3b2:	4b13      	ldr	r3, [pc, #76]	; (800d400 <tcp_slowtmr+0x2e4>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6a22      	ldr	r2, [r4, #32]
 800d3b8:	1a9b      	subs	r3, r3, r2
 800d3ba:	2b28      	cmp	r3, #40	; 0x28
 800d3bc:	f63f af04 	bhi.w	800d1c8 <tcp_slowtmr+0xac>
    if (pcb_remove) {
 800d3c0:	2f00      	cmp	r7, #0
 800d3c2:	f47f af01 	bne.w	800d1c8 <tcp_slowtmr+0xac>
      pcb = pcb->next;
 800d3c6:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800d3c8:	7f23      	ldrb	r3, [r4, #28]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d3d0:	7f62      	ldrb	r2, [r4, #29]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d85c      	bhi.n	800d490 <tcp_slowtmr+0x374>
        prev->polltmr = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800d3da:	4a10      	ldr	r2, [pc, #64]	; (800d41c <tcp_slowtmr+0x300>)
 800d3dc:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 800d3de:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d04c      	beq.n	800d480 <tcp_slowtmr+0x364>
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	6920      	ldr	r0, [r4, #16]
 800d3ea:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800d3ec:	4b0b      	ldr	r3, [pc, #44]	; (800d41c <tcp_slowtmr+0x300>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f47f aea3 	bne.w	800d13c <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d042      	beq.n	800d480 <tcp_slowtmr+0x364>
 800d3fa:	4625      	mov	r5, r4
      pcb = pcb->next;
 800d3fc:	463c      	mov	r4, r7
 800d3fe:	e049      	b.n	800d494 <tcp_slowtmr+0x378>
 800d400:	2001b610 	.word	0x2001b610
 800d404:	20012bba 	.word	0x20012bba
 800d408:	08014954 	.word	0x08014954
 800d40c:	08014e04 	.word	0x08014e04
 800d410:	0801397c 	.word	0x0801397c
 800d414:	08014e30 	.word	0x08014e30
 800d418:	08014e5c 	.word	0x08014e5c
 800d41c:	2001b608 	.word	0x2001b608
 800d420:	08014ec0 	.word	0x08014ec0
 800d424:	08014fd0 	.word	0x08014fd0
 800d428:	000a4cb8 	.word	0x000a4cb8
 800d42c:	000124f8 	.word	0x000124f8
 800d430:	2001b60c 	.word	0x2001b60c
 800d434:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d438:	4633      	mov	r3, r6
 800d43a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d43e:	4960      	ldr	r1, [pc, #384]	; (800d5c0 <tcp_slowtmr+0x4a4>)
 800d440:	4860      	ldr	r0, [pc, #384]	; (800d5c4 <tcp_slowtmr+0x4a8>)
 800d442:	f005 f8e7 	bl	8012614 <iprintf>
 800d446:	e6cc      	b.n	800d1e2 <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d448:	f8da 3000 	ldr.w	r3, [sl]
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	d006      	beq.n	800d45e <tcp_slowtmr+0x342>
 800d450:	4633      	mov	r3, r6
 800d452:	f240 5271 	movw	r2, #1393	; 0x571
 800d456:	495c      	ldr	r1, [pc, #368]	; (800d5c8 <tcp_slowtmr+0x4ac>)
 800d458:	485a      	ldr	r0, [pc, #360]	; (800d5c4 <tcp_slowtmr+0x4a8>)
 800d45a:	f005 f8db 	bl	8012614 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d45e:	68e3      	ldr	r3, [r4, #12]
 800d460:	f8ca 3000 	str.w	r3, [sl]
 800d464:	e6bf      	b.n	800d1e6 <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d466:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d468:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d46a:	8b23      	ldrh	r3, [r4, #24]
 800d46c:	9302      	str	r3, [sp, #8]
 800d46e:	8ae3      	ldrh	r3, [r4, #22]
 800d470:	9301      	str	r3, [sp, #4]
 800d472:	1d23      	adds	r3, r4, #4
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	4623      	mov	r3, r4
 800d478:	4620      	mov	r0, r4
 800d47a:	f002 fc4b 	bl	800fd14 <tcp_rst>
 800d47e:	e6b6      	b.n	800d1ee <tcp_slowtmr+0xd2>
          tcp_output(prev);
 800d480:	4620      	mov	r0, r4
 800d482:	f002 fcc7 	bl	800fe14 <tcp_output>
 800d486:	4625      	mov	r5, r4
      pcb = pcb->next;
 800d488:	463c      	mov	r4, r7
 800d48a:	e003      	b.n	800d494 <tcp_slowtmr+0x378>
      pcb = pcb->next;
 800d48c:	4644      	mov	r4, r8
 800d48e:	e001      	b.n	800d494 <tcp_slowtmr+0x378>
 800d490:	4625      	mov	r5, r4
      pcb = pcb->next;
 800d492:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800d494:	2c00      	cmp	r4, #0
 800d496:	d046      	beq.n	800d526 <tcp_slowtmr+0x40a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d498:	7d23      	ldrb	r3, [r4, #20]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f43f ae55 	beq.w	800d14a <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d4a0:	7d23      	ldrb	r3, [r4, #20]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	f43f ae59 	beq.w	800d15a <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d4a8:	7d23      	ldrb	r3, [r4, #20]
 800d4aa:	2b0a      	cmp	r3, #10
 800d4ac:	f43f ae5d 	beq.w	800d16a <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d4b0:	4b46      	ldr	r3, [pc, #280]	; (800d5cc <tcp_slowtmr+0x4b0>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	7fa2      	ldrb	r2, [r4, #30]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	f43f ae5f 	beq.w	800d17a <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 800d4bc:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d4be:	7d23      	ldrb	r3, [r4, #20]
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	f43f ae5d 	beq.w	800d180 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d4c6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d4ca:	2b0b      	cmp	r3, #11
 800d4cc:	f63f af17 	bhi.w	800d2fe <tcp_slowtmr+0x1e2>
      if (pcb->persist_backoff > 0) {
 800d4d0:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 800d4d4:	2f00      	cmp	r7, #0
 800d4d6:	f43f aec9 	beq.w	800d26c <tcp_slowtmr+0x150>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d4da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d4dc:	b133      	cbz	r3, 800d4ec <tcp_slowtmr+0x3d0>
 800d4de:	4633      	mov	r3, r6
 800d4e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d4e4:	493a      	ldr	r1, [pc, #232]	; (800d5d0 <tcp_slowtmr+0x4b4>)
 800d4e6:	4837      	ldr	r0, [pc, #220]	; (800d5c4 <tcp_slowtmr+0x4a8>)
 800d4e8:	f005 f894 	bl	8012614 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d4ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f43f ae94 	beq.w	800d21c <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d4f4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800d4f8:	2b0b      	cmp	r3, #11
 800d4fa:	f63f af20 	bhi.w	800d33e <tcp_slowtmr+0x222>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d4fe:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 800d502:	4b34      	ldr	r3, [pc, #208]	; (800d5d4 <tcp_slowtmr+0x4b8>)
 800d504:	4413      	add	r3, r2
 800d506:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800d50a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800d50e:	4293      	cmp	r3, r2
 800d510:	f4bf ae8c 	bcs.w	800d22c <tcp_slowtmr+0x110>
            pcb->persist_cnt++;
 800d514:	3301      	adds	r3, #1
 800d516:	b2db      	uxtb	r3, r3
 800d518:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d51c:	4293      	cmp	r3, r2
 800d51e:	f4bf ae85 	bcs.w	800d22c <tcp_slowtmr+0x110>
    pcb_remove = 0;
 800d522:	2700      	movs	r7, #0
 800d524:	e6ec      	b.n	800d300 <tcp_slowtmr+0x1e4>
  pcb = tcp_tw_pcbs;
 800d526:	4b2c      	ldr	r3, [pc, #176]	; (800d5d8 <tcp_slowtmr+0x4bc>)
 800d528:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800d52a:	2c00      	cmp	r4, #0
 800d52c:	d044      	beq.n	800d5b8 <tcp_slowtmr+0x49c>
  prev = NULL;
 800d52e:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d530:	4f2a      	ldr	r7, [pc, #168]	; (800d5dc <tcp_slowtmr+0x4c0>)
 800d532:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800d5ec <tcp_slowtmr+0x4d0>
 800d536:	4e23      	ldr	r6, [pc, #140]	; (800d5c4 <tcp_slowtmr+0x4a8>)
 800d538:	e00f      	b.n	800d55a <tcp_slowtmr+0x43e>
 800d53a:	463b      	mov	r3, r7
 800d53c:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d540:	4641      	mov	r1, r8
 800d542:	4630      	mov	r0, r6
 800d544:	f005 f866 	bl	8012614 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d548:	4b25      	ldr	r3, [pc, #148]	; (800d5e0 <tcp_slowtmr+0x4c4>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6a22      	ldr	r2, [r4, #32]
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	2bf0      	cmp	r3, #240	; 0xf0
 800d552:	d806      	bhi.n	800d562 <tcp_slowtmr+0x446>
      pcb = pcb->next;
 800d554:	4625      	mov	r5, r4
 800d556:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800d558:	b374      	cbz	r4, 800d5b8 <tcp_slowtmr+0x49c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d55a:	7d23      	ldrb	r3, [r4, #20]
 800d55c:	2b0a      	cmp	r3, #10
 800d55e:	d0f3      	beq.n	800d548 <tcp_slowtmr+0x42c>
 800d560:	e7eb      	b.n	800d53a <tcp_slowtmr+0x41e>
      tcp_pcb_purge(pcb);
 800d562:	4620      	mov	r0, r4
 800d564:	f7ff f99a 	bl	800c89c <tcp_pcb_purge>
      if (prev != NULL) {
 800d568:	b1a5      	cbz	r5, 800d594 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d56a:	4b1b      	ldr	r3, [pc, #108]	; (800d5d8 <tcp_slowtmr+0x4bc>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	42a3      	cmp	r3, r4
 800d570:	d008      	beq.n	800d584 <tcp_slowtmr+0x468>
        prev->next = pcb->next;
 800d572:	68e3      	ldr	r3, [r4, #12]
 800d574:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 800d576:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 800d57a:	4620      	mov	r0, r4
 800d57c:	f7fe ff3e 	bl	800c3fc <tcp_free>
      pcb = pcb->next;
 800d580:	464c      	mov	r4, r9
 800d582:	e7e9      	b.n	800d558 <tcp_slowtmr+0x43c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d584:	463b      	mov	r3, r7
 800d586:	f240 52af 	movw	r2, #1455	; 0x5af
 800d58a:	4916      	ldr	r1, [pc, #88]	; (800d5e4 <tcp_slowtmr+0x4c8>)
 800d58c:	4630      	mov	r0, r6
 800d58e:	f005 f841 	bl	8012614 <iprintf>
 800d592:	e7ee      	b.n	800d572 <tcp_slowtmr+0x456>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d594:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <tcp_slowtmr+0x4bc>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	42a3      	cmp	r3, r4
 800d59a:	d006      	beq.n	800d5aa <tcp_slowtmr+0x48e>
 800d59c:	463b      	mov	r3, r7
 800d59e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d5a2:	4911      	ldr	r1, [pc, #68]	; (800d5e8 <tcp_slowtmr+0x4cc>)
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f005 f835 	bl	8012614 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d5aa:	68e2      	ldr	r2, [r4, #12]
 800d5ac:	4b0a      	ldr	r3, [pc, #40]	; (800d5d8 <tcp_slowtmr+0x4bc>)
 800d5ae:	601a      	str	r2, [r3, #0]
 800d5b0:	e7e1      	b.n	800d576 <tcp_slowtmr+0x45a>
    pcb_reset = 0;
 800d5b2:	f04f 0800 	mov.w	r8, #0
 800d5b6:	e703      	b.n	800d3c0 <tcp_slowtmr+0x2a4>
}
 800d5b8:	b005      	add	sp, #20
 800d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5be:	bf00      	nop
 800d5c0:	08014ef8 	.word	0x08014ef8
 800d5c4:	0801397c 	.word	0x0801397c
 800d5c8:	08014f24 	.word	0x08014f24
 800d5cc:	20012bba 	.word	0x20012bba
 800d5d0:	08014e8c 	.word	0x08014e8c
 800d5d4:	08014ff0 	.word	0x08014ff0
 800d5d8:	2001b61c 	.word	0x2001b61c
 800d5dc:	08014954 	.word	0x08014954
 800d5e0:	2001b610 	.word	0x2001b610
 800d5e4:	08014f80 	.word	0x08014f80
 800d5e8:	08014fa8 	.word	0x08014fa8
 800d5ec:	08014f50 	.word	0x08014f50

0800d5f0 <tcp_tmr>:
{
 800d5f0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800d5f2:	f7ff fd0b 	bl	800d00c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800d5f6:	4a06      	ldr	r2, [pc, #24]	; (800d610 <tcp_tmr+0x20>)
 800d5f8:	7813      	ldrb	r3, [r2, #0]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	7013      	strb	r3, [r2, #0]
 800d600:	f013 0f01 	tst.w	r3, #1
 800d604:	d100      	bne.n	800d608 <tcp_tmr+0x18>
}
 800d606:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800d608:	f7ff fd88 	bl	800d11c <tcp_slowtmr>
}
 800d60c:	e7fb      	b.n	800d606 <tcp_tmr+0x16>
 800d60e:	bf00      	nop
 800d610:	20012bb9 	.word	0x20012bb9

0800d614 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800d614:	4a09      	ldr	r2, [pc, #36]	; (800d63c <tcp_get_next_optbyte+0x28>)
 800d616:	8813      	ldrh	r3, [r2, #0]
 800d618:	1c59      	adds	r1, r3, #1
 800d61a:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d61c:	4a08      	ldr	r2, [pc, #32]	; (800d640 <tcp_get_next_optbyte+0x2c>)
 800d61e:	6812      	ldr	r2, [r2, #0]
 800d620:	b11a      	cbz	r2, 800d62a <tcp_get_next_optbyte+0x16>
 800d622:	4908      	ldr	r1, [pc, #32]	; (800d644 <tcp_get_next_optbyte+0x30>)
 800d624:	8809      	ldrh	r1, [r1, #0]
 800d626:	428b      	cmp	r3, r1
 800d628:	d204      	bcs.n	800d634 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d62a:	4a07      	ldr	r2, [pc, #28]	; (800d648 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 800d62c:	6812      	ldr	r2, [r2, #0]
 800d62e:	4413      	add	r3, r2
 800d630:	7d18      	ldrb	r0, [r3, #20]
 800d632:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d634:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 800d636:	b2db      	uxtb	r3, r3
 800d638:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800d63a:	4770      	bx	lr
 800d63c:	20012be4 	.word	0x20012be4
 800d640:	20012bf0 	.word	0x20012bf0
 800d644:	20012bec 	.word	0x20012bec
 800d648:	20012be8 	.word	0x20012be8

0800d64c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d64e:	4607      	mov	r7, r0
 800d650:	b1d0      	cbz	r0, 800d688 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d652:	4b1e      	ldr	r3, [pc, #120]	; (800d6cc <tcp_parseopt+0x80>)
 800d654:	881d      	ldrh	r5, [r3, #0]
 800d656:	2d00      	cmp	r5, #0
 800d658:	d037      	beq.n	800d6ca <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d65a:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <tcp_parseopt+0x84>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	801a      	strh	r2, [r3, #0]
 800d660:	461e      	mov	r6, r3
 800d662:	8833      	ldrh	r3, [r6, #0]
 800d664:	42ab      	cmp	r3, r5
 800d666:	d230      	bcs.n	800d6ca <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 800d668:	f7ff ffd4 	bl	800d614 <tcp_get_next_optbyte>
      switch (opt) {
 800d66c:	2801      	cmp	r0, #1
 800d66e:	d0f8      	beq.n	800d662 <tcp_parseopt+0x16>
 800d670:	2802      	cmp	r0, #2
 800d672:	d011      	beq.n	800d698 <tcp_parseopt+0x4c>
 800d674:	b348      	cbz	r0, 800d6ca <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d676:	f7ff ffcd 	bl	800d614 <tcp_get_next_optbyte>
          if (data < 2) {
 800d67a:	2801      	cmp	r0, #1
 800d67c:	d925      	bls.n	800d6ca <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d67e:	8833      	ldrh	r3, [r6, #0]
 800d680:	3b02      	subs	r3, #2
 800d682:	4418      	add	r0, r3
 800d684:	8030      	strh	r0, [r6, #0]
 800d686:	e7ec      	b.n	800d662 <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d688:	4b12      	ldr	r3, [pc, #72]	; (800d6d4 <tcp_parseopt+0x88>)
 800d68a:	f240 727d 	movw	r2, #1917	; 0x77d
 800d68e:	4912      	ldr	r1, [pc, #72]	; (800d6d8 <tcp_parseopt+0x8c>)
 800d690:	4812      	ldr	r0, [pc, #72]	; (800d6dc <tcp_parseopt+0x90>)
 800d692:	f004 ffbf 	bl	8012614 <iprintf>
 800d696:	e7dc      	b.n	800d652 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d698:	f7ff ffbc 	bl	800d614 <tcp_get_next_optbyte>
 800d69c:	2804      	cmp	r0, #4
 800d69e:	d114      	bne.n	800d6ca <tcp_parseopt+0x7e>
 800d6a0:	8833      	ldrh	r3, [r6, #0]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	42ab      	cmp	r3, r5
 800d6a6:	da10      	bge.n	800d6ca <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d6a8:	f7ff ffb4 	bl	800d614 <tcp_get_next_optbyte>
 800d6ac:	0204      	lsls	r4, r0, #8
 800d6ae:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 800d6b0:	f7ff ffb0 	bl	800d614 <tcp_get_next_optbyte>
 800d6b4:	4320      	orrs	r0, r4
 800d6b6:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d6b8:	1e43      	subs	r3, r0, #1
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800d6c0:	bf28      	it	cs
 800d6c2:	f44f 70e6 	movcs.w	r0, #460	; 0x1cc
 800d6c6:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 800d6c8:	e7cb      	b.n	800d662 <tcp_parseopt+0x16>
      }
    }
  }
}
 800d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6cc:	20012bf4 	.word	0x20012bf4
 800d6d0:	20012be4 	.word	0x20012be4
 800d6d4:	08014ff8 	.word	0x08014ff8
 800d6d8:	0801502c 	.word	0x0801502c
 800d6dc:	0801397c 	.word	0x0801397c

0800d6e0 <tcp_input_delayed_close>:
{
 800d6e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	b130      	cbz	r0, 800d6f4 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 800d6e6:	4b11      	ldr	r3, [pc, #68]	; (800d72c <tcp_input_delayed_close+0x4c>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	f013 0f10 	tst.w	r3, #16
 800d6ee:	d109      	bne.n	800d704 <tcp_input_delayed_close+0x24>
  return 0;
 800d6f0:	2000      	movs	r0, #0
}
 800d6f2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d6f4:	4b0e      	ldr	r3, [pc, #56]	; (800d730 <tcp_input_delayed_close+0x50>)
 800d6f6:	f240 225a 	movw	r2, #602	; 0x25a
 800d6fa:	490e      	ldr	r1, [pc, #56]	; (800d734 <tcp_input_delayed_close+0x54>)
 800d6fc:	480e      	ldr	r0, [pc, #56]	; (800d738 <tcp_input_delayed_close+0x58>)
 800d6fe:	f004 ff89 	bl	8012614 <iprintf>
 800d702:	e7f0      	b.n	800d6e6 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d704:	8b63      	ldrh	r3, [r4, #26]
 800d706:	f013 0f10 	tst.w	r3, #16
 800d70a:	d106      	bne.n	800d71a <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d70c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d710:	b11b      	cbz	r3, 800d71a <tcp_input_delayed_close+0x3a>
 800d712:	f06f 010e 	mvn.w	r1, #14
 800d716:	6920      	ldr	r0, [r4, #16]
 800d718:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d71a:	4621      	mov	r1, r4
 800d71c:	4807      	ldr	r0, [pc, #28]	; (800d73c <tcp_input_delayed_close+0x5c>)
 800d71e:	f7ff f8ef 	bl	800c900 <tcp_pcb_remove>
    tcp_free(pcb);
 800d722:	4620      	mov	r0, r4
 800d724:	f7fe fe6a 	bl	800c3fc <tcp_free>
    return 1;
 800d728:	2001      	movs	r0, #1
 800d72a:	e7e2      	b.n	800d6f2 <tcp_input_delayed_close+0x12>
 800d72c:	20012bdc 	.word	0x20012bdc
 800d730:	08014ff8 	.word	0x08014ff8
 800d734:	08015048 	.word	0x08015048
 800d738:	0801397c 	.word	0x0801397c
 800d73c:	2001b60c 	.word	0x2001b60c

0800d740 <tcp_free_acked_segments>:
{
 800d740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 800d744:	468a      	mov	sl, r1
 800d746:	2900      	cmp	r1, #0
 800d748:	d052      	beq.n	800d7f0 <tcp_free_acked_segments+0xb0>
 800d74a:	4605      	mov	r5, r0
 800d74c:	461e      	mov	r6, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d74e:	4f2b      	ldr	r7, [pc, #172]	; (800d7fc <tcp_free_acked_segments+0xbc>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d750:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800d808 <tcp_free_acked_segments+0xc8>
 800d754:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800d810 <tcp_free_acked_segments+0xd0>
 800d758:	e00b      	b.n	800d772 <tcp_free_acked_segments+0x32>
 800d75a:	464b      	mov	r3, r9
 800d75c:	f240 4257 	movw	r2, #1111	; 0x457
 800d760:	4641      	mov	r1, r8
 800d762:	4827      	ldr	r0, [pc, #156]	; (800d800 <tcp_free_acked_segments+0xc0>)
 800d764:	f004 ff56 	bl	8012614 <iprintf>
 800d768:	e026      	b.n	800d7b8 <tcp_free_acked_segments+0x78>
  while (seg_list != NULL &&
 800d76a:	f1bb 0f00 	cmp.w	fp, #0
 800d76e:	d042      	beq.n	800d7f6 <tcp_free_acked_segments+0xb6>
 800d770:	46da      	mov	sl, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d772:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d776:	6858      	ldr	r0, [r3, #4]
 800d778:	f7fd fcd1 	bl	800b11e <lwip_htonl>
 800d77c:	4604      	mov	r4, r0
 800d77e:	f8ba b008 	ldrh.w	fp, [sl, #8]
 800d782:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d786:	8998      	ldrh	r0, [r3, #12]
 800d788:	f7fd fcc4 	bl	800b114 <lwip_htons>
 800d78c:	683a      	ldr	r2, [r7, #0]
 800d78e:	1aa4      	subs	r4, r4, r2
 800d790:	eb04 020b 	add.w	r2, r4, fp
 800d794:	f010 0003 	ands.w	r0, r0, #3
 800d798:	bf18      	it	ne
 800d79a:	2001      	movne	r0, #1
 800d79c:	4402      	add	r2, r0
  while (seg_list != NULL &&
 800d79e:	2a00      	cmp	r2, #0
 800d7a0:	dc26      	bgt.n	800d7f0 <tcp_free_acked_segments+0xb0>
    seg_list = seg_list->next;
 800d7a2:	f8da b000 	ldr.w	fp, [sl]
    clen = pbuf_clen(next->p);
 800d7a6:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d7aa:	f7fe fc39 	bl	800c020 <pbuf_clen>
 800d7ae:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d7b0:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800d7b4:	4283      	cmp	r3, r0
 800d7b6:	d3d0      	bcc.n	800d75a <tcp_free_acked_segments+0x1a>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d7b8:	f8b5 0066 	ldrh.w	r0, [r5, #102]	; 0x66
 800d7bc:	1b04      	subs	r4, r0, r4
 800d7be:	f8a5 4066 	strh.w	r4, [r5, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d7c2:	4a10      	ldr	r2, [pc, #64]	; (800d804 <tcp_free_acked_segments+0xc4>)
 800d7c4:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800d7c8:	8811      	ldrh	r1, [r2, #0]
 800d7ca:	440b      	add	r3, r1
 800d7cc:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800d7ce:	4650      	mov	r0, sl
 800d7d0:	f7fe ff66 	bl	800c6a0 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800d7d4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d0c6      	beq.n	800d76a <tcp_free_acked_segments+0x2a>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d7dc:	ea5b 0a06 	orrs.w	sl, fp, r6
 800d7e0:	d1c3      	bne.n	800d76a <tcp_free_acked_segments+0x2a>
 800d7e2:	4b09      	ldr	r3, [pc, #36]	; (800d808 <tcp_free_acked_segments+0xc8>)
 800d7e4:	f240 4261 	movw	r2, #1121	; 0x461
 800d7e8:	4908      	ldr	r1, [pc, #32]	; (800d80c <tcp_free_acked_segments+0xcc>)
 800d7ea:	4805      	ldr	r0, [pc, #20]	; (800d800 <tcp_free_acked_segments+0xc0>)
 800d7ec:	f004 ff12 	bl	8012614 <iprintf>
}
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f6:	46da      	mov	sl, fp
  return seg_list;
 800d7f8:	e7fa      	b.n	800d7f0 <tcp_free_acked_segments+0xb0>
 800d7fa:	bf00      	nop
 800d7fc:	20012bbc 	.word	0x20012bbc
 800d800:	0801397c 	.word	0x0801397c
 800d804:	20012bd4 	.word	0x20012bd4
 800d808:	08014ff8 	.word	0x08014ff8
 800d80c:	08015098 	.word	0x08015098
 800d810:	08015070 	.word	0x08015070

0800d814 <tcp_oos_insert_segment>:
{
 800d814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d818:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d81a:	4605      	mov	r5, r0
 800d81c:	b160      	cbz	r0, 800d838 <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d81e:	68eb      	ldr	r3, [r5, #12]
 800d820:	8998      	ldrh	r0, [r3, #12]
 800d822:	f7fd fc77 	bl	800b114 <lwip_htons>
 800d826:	f010 0f01 	tst.w	r0, #1
 800d82a:	d10d      	bne.n	800d848 <tcp_oos_insert_segment+0x34>
    while (next &&
 800d82c:	2c00      	cmp	r4, #0
 800d82e:	d035      	beq.n	800d89c <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d830:	4e20      	ldr	r6, [pc, #128]	; (800d8b4 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d832:	f04f 0901 	mov.w	r9, #1
 800d836:	e01f      	b.n	800d878 <tcp_oos_insert_segment+0x64>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d838:	4b1f      	ldr	r3, [pc, #124]	; (800d8b8 <tcp_oos_insert_segment+0xa4>)
 800d83a:	f240 421f 	movw	r2, #1055	; 0x41f
 800d83e:	491f      	ldr	r1, [pc, #124]	; (800d8bc <tcp_oos_insert_segment+0xa8>)
 800d840:	481f      	ldr	r0, [pc, #124]	; (800d8c0 <tcp_oos_insert_segment+0xac>)
 800d842:	f004 fee7 	bl	8012614 <iprintf>
 800d846:	e7ea      	b.n	800d81e <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 800d848:	4620      	mov	r0, r4
 800d84a:	f7fe ff36 	bl	800c6ba <tcp_segs_free>
    next = NULL;
 800d84e:	2400      	movs	r4, #0
  cseg->next = next;
 800d850:	602c      	str	r4, [r5, #0]
}
 800d852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d856:	68eb      	ldr	r3, [r5, #12]
 800d858:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800d85c:	4648      	mov	r0, r9
 800d85e:	f7fd fc59 	bl	800b114 <lwip_htons>
 800d862:	68eb      	ldr	r3, [r5, #12]
 800d864:	ea48 0800 	orr.w	r8, r8, r0
 800d868:	f8a3 800c 	strh.w	r8, [r3, #12]
      next = next->next;
 800d86c:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800d86e:	4620      	mov	r0, r4
 800d870:	f7fe ff16 	bl	800c6a0 <tcp_seg_free>
    while (next &&
 800d874:	b197      	cbz	r7, 800d89c <tcp_oos_insert_segment+0x88>
      next = next->next;
 800d876:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d878:	f8d6 c000 	ldr.w	ip, [r6]
 800d87c:	68e1      	ldr	r1, [r4, #12]
 800d87e:	6848      	ldr	r0, [r1, #4]
 800d880:	892b      	ldrh	r3, [r5, #8]
 800d882:	4463      	add	r3, ip
 800d884:	1a1b      	subs	r3, r3, r0
 800d886:	8922      	ldrh	r2, [r4, #8]
 800d888:	1a9a      	subs	r2, r3, r2
    while (next &&
 800d88a:	2a00      	cmp	r2, #0
 800d88c:	db08      	blt.n	800d8a0 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d88e:	8988      	ldrh	r0, [r1, #12]
 800d890:	f7fd fc40 	bl	800b114 <lwip_htons>
 800d894:	f010 0f01 	tst.w	r0, #1
 800d898:	d0e8      	beq.n	800d86c <tcp_oos_insert_segment+0x58>
 800d89a:	e7dc      	b.n	800d856 <tcp_oos_insert_segment+0x42>
    next = NULL;
 800d89c:	2400      	movs	r4, #0
 800d89e:	e7d7      	b.n	800d850 <tcp_oos_insert_segment+0x3c>
    if (next &&
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	ddd5      	ble.n	800d850 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d8a4:	eba0 010c 	sub.w	r1, r0, ip
 800d8a8:	b289      	uxth	r1, r1
 800d8aa:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d8ac:	6868      	ldr	r0, [r5, #4]
 800d8ae:	f7fe fb57 	bl	800bf60 <pbuf_realloc>
 800d8b2:	e7cd      	b.n	800d850 <tcp_oos_insert_segment+0x3c>
 800d8b4:	20012be0 	.word	0x20012be0
 800d8b8:	08014ff8 	.word	0x08014ff8
 800d8bc:	080150b8 	.word	0x080150b8
 800d8c0:	0801397c 	.word	0x0801397c

0800d8c4 <tcp_receive>:
{
 800d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d066      	beq.n	800d99c <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d8ce:	7d23      	ldrb	r3, [r4, #20]
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d96b      	bls.n	800d9ac <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 800d8d4:	4bab      	ldr	r3, [pc, #684]	; (800db84 <tcp_receive+0x2c0>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	f013 0f10 	tst.w	r3, #16
 800d8dc:	d03a      	beq.n	800d954 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d8de:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800d8e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d8e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d8e6:	4ba8      	ldr	r3, [pc, #672]	; (800db88 <tcp_receive+0x2c4>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	1ad1      	subs	r1, r2, r3
 800d8ec:	2900      	cmp	r1, #0
 800d8ee:	db0a      	blt.n	800d906 <tcp_receive+0x42>
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d063      	beq.n	800d9bc <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d8f4:	4aa5      	ldr	r2, [pc, #660]	; (800db8c <tcp_receive+0x2c8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d8f6:	6812      	ldr	r2, [r2, #0]
 800d8f8:	4290      	cmp	r0, r2
 800d8fa:	d114      	bne.n	800d926 <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d8fc:	4aa4      	ldr	r2, [pc, #656]	; (800db90 <tcp_receive+0x2cc>)
 800d8fe:	6812      	ldr	r2, [r2, #0]
 800d900:	89d2      	ldrh	r2, [r2, #14]
 800d902:	42aa      	cmp	r2, r5
 800d904:	d90f      	bls.n	800d926 <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d906:	4aa2      	ldr	r2, [pc, #648]	; (800db90 <tcp_receive+0x2cc>)
 800d908:	6812      	ldr	r2, [r2, #0]
 800d90a:	89d2      	ldrh	r2, [r2, #14]
 800d90c:	b291      	uxth	r1, r2
 800d90e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d912:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800d916:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d918:	bf38      	it	cc
 800d91a:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 800d91e:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d920:	4b9a      	ldr	r3, [pc, #616]	; (800db8c <tcp_receive+0x2c8>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d926:	4b99      	ldr	r3, [pc, #612]	; (800db8c <tcp_receive+0x2c8>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d92c:	1a5a      	subs	r2, r3, r1
 800d92e:	2a00      	cmp	r2, #0
 800d930:	dd4a      	ble.n	800d9c8 <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d932:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d934:	1a9a      	subs	r2, r3, r2
 800d936:	2a00      	cmp	r2, #0
 800d938:	f340 808a 	ble.w	800da50 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 800d93c:	4620      	mov	r0, r4
 800d93e:	f002 fa2f 	bl	800fda0 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d944:	b133      	cbz	r3, 800d954 <tcp_receive+0x90>
 800d946:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d948:	4990      	ldr	r1, [pc, #576]	; (800db8c <tcp_receive+0x2c8>)
 800d94a:	6809      	ldr	r1, [r1, #0]
 800d94c:	1a52      	subs	r2, r2, r1
 800d94e:	2a00      	cmp	r2, #0
 800d950:	f2c0 8130 	blt.w	800dbb4 <tcp_receive+0x2f0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d954:	4b8f      	ldr	r3, [pc, #572]	; (800db94 <tcp_receive+0x2d0>)
 800d956:	881a      	ldrh	r2, [r3, #0]
 800d958:	2a00      	cmp	r2, #0
 800d95a:	d058      	beq.n	800da0e <tcp_receive+0x14a>
 800d95c:	7d23      	ldrb	r3, [r4, #20]
 800d95e:	2b06      	cmp	r3, #6
 800d960:	d855      	bhi.n	800da0e <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d962:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d964:	4b88      	ldr	r3, [pc, #544]	; (800db88 <tcp_receive+0x2c4>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	1ace      	subs	r6, r1, r3
 800d96a:	2e01      	cmp	r6, #1
 800d96c:	d406      	bmi.n	800d97c <tcp_receive+0xb8>
 800d96e:	f1c3 0001 	rsb	r0, r3, #1
 800d972:	1a82      	subs	r2, r0, r2
 800d974:	440a      	add	r2, r1
 800d976:	2a00      	cmp	r2, #0
 800d978:	f340 813e 	ble.w	800dbf8 <tcp_receive+0x334>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d97c:	1a5a      	subs	r2, r3, r1
 800d97e:	2a00      	cmp	r2, #0
 800d980:	f2c0 8184 	blt.w	800dc8c <tcp_receive+0x3c8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d984:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d986:	f1c2 0201 	rsb	r2, r2, #1
 800d98a:	441a      	add	r2, r3
 800d98c:	1a52      	subs	r2, r2, r1
 800d98e:	2a00      	cmp	r2, #0
 800d990:	f340 8181 	ble.w	800dc96 <tcp_receive+0x3d2>
      tcp_send_empty_ack(pcb);
 800d994:	4620      	mov	r0, r4
 800d996:	f002 fa03 	bl	800fda0 <tcp_send_empty_ack>
 800d99a:	e048      	b.n	800da2e <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d99c:	4b7e      	ldr	r3, [pc, #504]	; (800db98 <tcp_receive+0x2d4>)
 800d99e:	f240 427b 	movw	r2, #1147	; 0x47b
 800d9a2:	497e      	ldr	r1, [pc, #504]	; (800db9c <tcp_receive+0x2d8>)
 800d9a4:	487e      	ldr	r0, [pc, #504]	; (800dba0 <tcp_receive+0x2dc>)
 800d9a6:	f004 fe35 	bl	8012614 <iprintf>
 800d9aa:	e790      	b.n	800d8ce <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d9ac:	4b7a      	ldr	r3, [pc, #488]	; (800db98 <tcp_receive+0x2d4>)
 800d9ae:	f240 427c 	movw	r2, #1148	; 0x47c
 800d9b2:	497c      	ldr	r1, [pc, #496]	; (800dba4 <tcp_receive+0x2e0>)
 800d9b4:	487a      	ldr	r0, [pc, #488]	; (800dba0 <tcp_receive+0x2dc>)
 800d9b6:	f004 fe2d 	bl	8012614 <iprintf>
 800d9ba:	e78b      	b.n	800d8d4 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d9bc:	4a73      	ldr	r2, [pc, #460]	; (800db8c <tcp_receive+0x2c8>)
 800d9be:	6812      	ldr	r2, [r2, #0]
 800d9c0:	1a82      	subs	r2, r0, r2
 800d9c2:	2a00      	cmp	r2, #0
 800d9c4:	da96      	bge.n	800d8f4 <tcp_receive+0x30>
 800d9c6:	e79e      	b.n	800d906 <tcp_receive+0x42>
      if (tcplen == 0) {
 800d9c8:	4a72      	ldr	r2, [pc, #456]	; (800db94 <tcp_receive+0x2d0>)
 800d9ca:	8812      	ldrh	r2, [r2, #0]
 800d9cc:	b932      	cbnz	r2, 800d9dc <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d9ce:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800d9d2:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800d9d4:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d9d6:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d9d8:	4282      	cmp	r2, r0
 800d9da:	d003      	beq.n	800d9e4 <tcp_receive+0x120>
        pcb->dupacks = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9e2:	e7ae      	b.n	800d942 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 800d9e4:	8e22      	ldrh	r2, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 800d9e6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800d9ea:	d1f7      	bne.n	800d9dc <tcp_receive+0x118>
 800d9ec:	428b      	cmp	r3, r1
 800d9ee:	d1f5      	bne.n	800d9dc <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d9f0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d9f4:	2bff      	cmp	r3, #255	; 0xff
 800d9f6:	d01c      	beq.n	800da32 <tcp_receive+0x16e>
                ++pcb->dupacks;
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800da00:	2b03      	cmp	r3, #3
 800da02:	d816      	bhi.n	800da32 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 800da04:	2b03      	cmp	r3, #3
 800da06:	d01f      	beq.n	800da48 <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800da08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d19b      	bne.n	800d946 <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800da0e:	4b5e      	ldr	r3, [pc, #376]	; (800db88 <tcp_receive+0x2c4>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800da14:	1a99      	subs	r1, r3, r2
 800da16:	2900      	cmp	r1, #0
 800da18:	db05      	blt.n	800da26 <tcp_receive+0x162>
 800da1a:	3301      	adds	r3, #1
 800da1c:	1a9b      	subs	r3, r3, r2
 800da1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800da20:	1a9b      	subs	r3, r3, r2
 800da22:	2b00      	cmp	r3, #0
 800da24:	dd03      	ble.n	800da2e <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 800da26:	8b63      	ldrh	r3, [r4, #26]
 800da28:	f043 0302 	orr.w	r3, r3, #2
 800da2c:	8363      	strh	r3, [r4, #26]
}
 800da2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800da32:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800da36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800da38:	4413      	add	r3, r2
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	429a      	cmp	r2, r3
 800da3e:	bf88      	it	hi
 800da40:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800da44:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800da48:	4620      	mov	r0, r4
 800da4a:	f002 f927 	bl	800fc9c <tcp_rexmit_fast>
      if (!found_dupack) {
 800da4e:	e778      	b.n	800d942 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 800da50:	8b62      	ldrh	r2, [r4, #26]
 800da52:	f012 0f04 	tst.w	r2, #4
 800da56:	d009      	beq.n	800da6c <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800da58:	f022 0204 	bic.w	r2, r2, #4
 800da5c:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800da5e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800da62:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800da66:	2200      	movs	r2, #0
 800da68:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 800da6c:	2000      	movs	r0, #0
 800da6e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800da72:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800da76:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800da78:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800da7c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800da80:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800da84:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800da86:	7d22      	ldrb	r2, [r4, #20]
 800da88:	2a03      	cmp	r2, #3
 800da8a:	d91c      	bls.n	800dac6 <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800da8c:	1a5b      	subs	r3, r3, r1
 800da8e:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800da90:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800da94:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800da98:	428a      	cmp	r2, r1
 800da9a:	d946      	bls.n	800db2a <tcp_receive+0x266>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800da9c:	8b62      	ldrh	r2, [r4, #26]
 800da9e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800daa2:	bf14      	ite	ne
 800daa4:	2001      	movne	r0, #1
 800daa6:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800daa8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800daaa:	fb12 f200 	smulbb	r2, r2, r0
 800daae:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800dab0:	429a      	cmp	r2, r3
 800dab2:	bf94      	ite	ls
 800dab4:	188b      	addls	r3, r1, r2
 800dab6:	18cb      	addhi	r3, r1, r3
 800dab8:	b29b      	uxth	r3, r3
 800daba:	4299      	cmp	r1, r3
 800dabc:	bf88      	it	hi
 800dabe:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800dac2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dac6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dac8:	4a37      	ldr	r2, [pc, #220]	; (800dba8 <tcp_receive+0x2e4>)
 800daca:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800dacc:	4620      	mov	r0, r4
 800dace:	f7ff fe37 	bl	800d740 <tcp_free_acked_segments>
 800dad2:	4603      	mov	r3, r0
 800dad4:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dad6:	4a35      	ldr	r2, [pc, #212]	; (800dbac <tcp_receive+0x2e8>)
 800dad8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800dada:	4620      	mov	r0, r4
 800dadc:	f7ff fe30 	bl	800d740 <tcp_free_acked_segments>
 800dae0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800dae2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800dae4:	fab2 f382 	clz	r3, r2
 800dae8:	095b      	lsrs	r3, r3, #5
 800daea:	425b      	negs	r3, r3
 800daec:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800daee:	2300      	movs	r3, #0
 800daf0:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800daf2:	b3a0      	cbz	r0, 800db5e <tcp_receive+0x29a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800daf4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800daf8:	492d      	ldr	r1, [pc, #180]	; (800dbb0 <tcp_receive+0x2ec>)
 800dafa:	8809      	ldrh	r1, [r1, #0]
 800dafc:	440b      	add	r3, r1
 800dafe:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800db02:	8b63      	ldrh	r3, [r4, #26]
 800db04:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800db08:	f43f af1b 	beq.w	800d942 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 800db0c:	b352      	cbz	r2, 800db64 <tcp_receive+0x2a0>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800db0e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800db10:	68d3      	ldr	r3, [r2, #12]
 800db12:	6858      	ldr	r0, [r3, #4]
 800db14:	f7fd fb03 	bl	800b11e <lwip_htonl>
 800db18:	1a2d      	subs	r5, r5, r0
 800db1a:	2d00      	cmp	r5, #0
 800db1c:	f73f af11 	bgt.w	800d942 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 800db20:	8b63      	ldrh	r3, [r4, #26]
 800db22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db26:	8363      	strh	r3, [r4, #26]
 800db28:	e70b      	b.n	800d942 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800db2a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800db2e:	4413      	add	r3, r2
 800db30:	b29b      	uxth	r3, r3
 800db32:	429a      	cmp	r2, r3
 800db34:	d804      	bhi.n	800db40 <tcp_receive+0x27c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800db36:	4299      	cmp	r1, r3
 800db38:	d904      	bls.n	800db44 <tcp_receive+0x280>
 800db3a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800db3e:	e7c2      	b.n	800dac6 <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800db40:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800db44:	1a5b      	subs	r3, r3, r1
 800db46:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800db4a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800db4c:	440b      	add	r3, r1
 800db4e:	b29b      	uxth	r3, r3
 800db50:	4299      	cmp	r1, r3
 800db52:	bf88      	it	hi
 800db54:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800db58:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800db5c:	e7b3      	b.n	800dac6 <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 800db5e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800db62:	e7c7      	b.n	800daf4 <tcp_receive+0x230>
          if ((pcb->unsent == NULL) ||
 800db64:	b140      	cbz	r0, 800db78 <tcp_receive+0x2b4>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800db66:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800db68:	68c3      	ldr	r3, [r0, #12]
 800db6a:	6858      	ldr	r0, [r3, #4]
 800db6c:	f7fd fad7 	bl	800b11e <lwip_htonl>
 800db70:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800db72:	2d00      	cmp	r5, #0
 800db74:	f73f aee5 	bgt.w	800d942 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 800db78:	8b63      	ldrh	r3, [r4, #26]
 800db7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db7e:	8363      	strh	r3, [r4, #26]
 800db80:	e6df      	b.n	800d942 <tcp_receive+0x7e>
 800db82:	bf00      	nop
 800db84:	20012bc0 	.word	0x20012bc0
 800db88:	20012be0 	.word	0x20012be0
 800db8c:	20012bbc 	.word	0x20012bbc
 800db90:	20012be8 	.word	0x20012be8
 800db94:	20012bf6 	.word	0x20012bf6
 800db98:	08014ff8 	.word	0x08014ff8
 800db9c:	080150e0 	.word	0x080150e0
 800dba0:	0801397c 	.word	0x0801397c
 800dba4:	080150fc 	.word	0x080150fc
 800dba8:	08015118 	.word	0x08015118
 800dbac:	08015120 	.word	0x08015120
 800dbb0:	20012bd4 	.word	0x20012bd4
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dbb4:	4a9a      	ldr	r2, [pc, #616]	; (800de20 <tcp_receive+0x55c>)
 800dbb6:	8816      	ldrh	r6, [r2, #0]
 800dbb8:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800dbba:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800dbbe:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 800dbc2:	1ab1      	subs	r1, r6, r2
 800dbc4:	1ac9      	subs	r1, r1, r3
 800dbc6:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800dbc8:	fa15 f181 	uxtah	r1, r5, r1
 800dbcc:	b209      	sxth	r1, r1
 800dbce:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	db0d      	blt.n	800dbf0 <tcp_receive+0x32c>
      m = (s16_t)(m - (pcb->sv >> 2));
 800dbd4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dbd8:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 800dbdc:	1813      	adds	r3, r2, r0
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dbe2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800dbe6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	6363      	str	r3, [r4, #52]	; 0x34
 800dbee:	e6b1      	b.n	800d954 <tcp_receive+0x90>
        m = (s16_t) - m;
 800dbf0:	1b92      	subs	r2, r2, r6
 800dbf2:	4413      	add	r3, r2
 800dbf4:	b218      	sxth	r0, r3
 800dbf6:	e7ed      	b.n	800dbd4 <tcp_receive+0x310>
      struct pbuf *p = inseg.p;
 800dbf8:	4b8a      	ldr	r3, [pc, #552]	; (800de24 <tcp_receive+0x560>)
 800dbfa:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dbfc:	2d00      	cmp	r5, #0
 800dbfe:	d02d      	beq.n	800dc5c <tcp_receive+0x398>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dc00:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800dc04:	429e      	cmp	r6, r3
 800dc06:	d831      	bhi.n	800dc6c <tcp_receive+0x3a8>
      off = (u16_t)off32;
 800dc08:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dc0a:	4b86      	ldr	r3, [pc, #536]	; (800de24 <tcp_receive+0x560>)
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	891b      	ldrh	r3, [r3, #8]
 800dc10:	42b3      	cmp	r3, r6
 800dc12:	d333      	bcc.n	800dc7c <tcp_receive+0x3b8>
      inseg.len -= off;
 800dc14:	4b83      	ldr	r3, [pc, #524]	; (800de24 <tcp_receive+0x560>)
 800dc16:	891a      	ldrh	r2, [r3, #8]
 800dc18:	1b92      	subs	r2, r2, r6
 800dc1a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	891b      	ldrh	r3, [r3, #8]
 800dc20:	1b9b      	subs	r3, r3, r6
 800dc22:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800dc24:	8969      	ldrh	r1, [r5, #10]
 800dc26:	428e      	cmp	r6, r1
 800dc28:	d908      	bls.n	800dc3c <tcp_receive+0x378>
        p->len = 0;
 800dc2a:	2200      	movs	r2, #0
        off -= p->len;
 800dc2c:	1a71      	subs	r1, r6, r1
 800dc2e:	b28e      	uxth	r6, r1
        p->tot_len = new_tot_len;
 800dc30:	812b      	strh	r3, [r5, #8]
        p->len = 0;
 800dc32:	816a      	strh	r2, [r5, #10]
        p = p->next;
 800dc34:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800dc36:	8969      	ldrh	r1, [r5, #10]
 800dc38:	42b1      	cmp	r1, r6
 800dc3a:	d3f7      	bcc.n	800dc2c <tcp_receive+0x368>
      pbuf_remove_header(p, off);
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f7fe f836 	bl	800bcb0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dc44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc46:	4a78      	ldr	r2, [pc, #480]	; (800de28 <tcp_receive+0x564>)
 800dc48:	6013      	str	r3, [r2, #0]
 800dc4a:	4a76      	ldr	r2, [pc, #472]	; (800de24 <tcp_receive+0x560>)
 800dc4c:	68d2      	ldr	r2, [r2, #12]
 800dc4e:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dc52:	1a5a      	subs	r2, r3, r1
 800dc54:	2a00      	cmp	r2, #0
 800dc56:	f6bf ae95 	bge.w	800d984 <tcp_receive+0xc0>
 800dc5a:	e69b      	b.n	800d994 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dc5c:	4b73      	ldr	r3, [pc, #460]	; (800de2c <tcp_receive+0x568>)
 800dc5e:	f240 5294 	movw	r2, #1428	; 0x594
 800dc62:	4973      	ldr	r1, [pc, #460]	; (800de30 <tcp_receive+0x56c>)
 800dc64:	4873      	ldr	r0, [pc, #460]	; (800de34 <tcp_receive+0x570>)
 800dc66:	f004 fcd5 	bl	8012614 <iprintf>
 800dc6a:	e7c9      	b.n	800dc00 <tcp_receive+0x33c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dc6c:	4b6f      	ldr	r3, [pc, #444]	; (800de2c <tcp_receive+0x568>)
 800dc6e:	f240 5295 	movw	r2, #1429	; 0x595
 800dc72:	4971      	ldr	r1, [pc, #452]	; (800de38 <tcp_receive+0x574>)
 800dc74:	486f      	ldr	r0, [pc, #444]	; (800de34 <tcp_receive+0x570>)
 800dc76:	f004 fccd 	bl	8012614 <iprintf>
 800dc7a:	e7c5      	b.n	800dc08 <tcp_receive+0x344>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dc7c:	4b6b      	ldr	r3, [pc, #428]	; (800de2c <tcp_receive+0x568>)
 800dc7e:	f240 5297 	movw	r2, #1431	; 0x597
 800dc82:	496e      	ldr	r1, [pc, #440]	; (800de3c <tcp_receive+0x578>)
 800dc84:	486b      	ldr	r0, [pc, #428]	; (800de34 <tcp_receive+0x570>)
 800dc86:	f004 fcc5 	bl	8012614 <iprintf>
 800dc8a:	e7c3      	b.n	800dc14 <tcp_receive+0x350>
        tcp_ack_now(pcb);
 800dc8c:	8b63      	ldrh	r3, [r4, #26]
 800dc8e:	f043 0302 	orr.w	r3, r3, #2
 800dc92:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc94:	e67e      	b.n	800d994 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 800dc96:	428b      	cmp	r3, r1
 800dc98:	d008      	beq.n	800dcac <tcp_receive+0x3e8>
        if (pcb->ooseq == NULL) {
 800dc9a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800dc9c:	2d00      	cmp	r5, #0
 800dc9e:	f000 817e 	beq.w	800df9e <tcp_receive+0x6da>
          struct tcp_seg *next, *prev = NULL;
 800dca2:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dca4:	1e5f      	subs	r7, r3, #1
 800dca6:	f103 0c01 	add.w	ip, r3, #1
 800dcaa:	e199      	b.n	800dfe0 <tcp_receive+0x71c>
        tcplen = TCP_TCPLEN(&inseg);
 800dcac:	4b5d      	ldr	r3, [pc, #372]	; (800de24 <tcp_receive+0x560>)
 800dcae:	891d      	ldrh	r5, [r3, #8]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	8998      	ldrh	r0, [r3, #12]
 800dcb4:	f7fd fa2e 	bl	800b114 <lwip_htons>
 800dcb8:	f010 0303 	ands.w	r3, r0, #3
 800dcbc:	bf18      	it	ne
 800dcbe:	2301      	movne	r3, #1
 800dcc0:	442b      	add	r3, r5
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4a5e      	ldr	r2, [pc, #376]	; (800de40 <tcp_receive+0x57c>)
 800dcc6:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800dcc8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d317      	bcc.n	800dcfe <tcp_receive+0x43a>
        if (pcb->ooseq != NULL) {
 800dcce:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 8241 	beq.w	800e158 <tcp_receive+0x894>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dcd6:	4b53      	ldr	r3, [pc, #332]	; (800de24 <tcp_receive+0x560>)
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	8998      	ldrh	r0, [r3, #12]
 800dcdc:	f7fd fa1a 	bl	800b114 <lwip_htons>
 800dce0:	f010 0f01 	tst.w	r0, #1
 800dce4:	d053      	beq.n	800dd8e <tcp_receive+0x4ca>
            while (pcb->ooseq != NULL) {
 800dce6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800dce8:	2800      	cmp	r0, #0
 800dcea:	f000 8235 	beq.w	800e158 <tcp_receive+0x894>
              pcb->ooseq = pcb->ooseq->next;
 800dcee:	6803      	ldr	r3, [r0, #0]
 800dcf0:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800dcf2:	f7fe fcd5 	bl	800c6a0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800dcf6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d1f8      	bne.n	800dcee <tcp_receive+0x42a>
 800dcfc:	e22c      	b.n	800e158 <tcp_receive+0x894>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dcfe:	4b49      	ldr	r3, [pc, #292]	; (800de24 <tcp_receive+0x560>)
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	8998      	ldrh	r0, [r3, #12]
 800dd04:	f7fd fa06 	bl	800b114 <lwip_htons>
 800dd08:	f010 0f01 	tst.w	r0, #1
 800dd0c:	d12f      	bne.n	800dd6e <tcp_receive+0x4aa>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dd0e:	4b45      	ldr	r3, [pc, #276]	; (800de24 <tcp_receive+0x560>)
 800dd10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800dd12:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	8998      	ldrh	r0, [r3, #12]
 800dd18:	f7fd f9fc 	bl	800b114 <lwip_htons>
 800dd1c:	f010 0f02 	tst.w	r0, #2
 800dd20:	d003      	beq.n	800dd2a <tcp_receive+0x466>
            inseg.len -= 1;
 800dd22:	4a40      	ldr	r2, [pc, #256]	; (800de24 <tcp_receive+0x560>)
 800dd24:	8913      	ldrh	r3, [r2, #8]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800dd2a:	4e3e      	ldr	r6, [pc, #248]	; (800de24 <tcp_receive+0x560>)
 800dd2c:	8931      	ldrh	r1, [r6, #8]
 800dd2e:	6870      	ldr	r0, [r6, #4]
 800dd30:	f7fe f916 	bl	800bf60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dd34:	8935      	ldrh	r5, [r6, #8]
 800dd36:	68f3      	ldr	r3, [r6, #12]
 800dd38:	8998      	ldrh	r0, [r3, #12]
 800dd3a:	f7fd f9eb 	bl	800b114 <lwip_htons>
 800dd3e:	f010 0303 	ands.w	r3, r0, #3
 800dd42:	bf18      	it	ne
 800dd44:	2301      	movne	r3, #1
 800dd46:	442b      	add	r3, r5
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	4a3d      	ldr	r2, [pc, #244]	; (800de40 <tcp_receive+0x57c>)
 800dd4c:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dd4e:	4a36      	ldr	r2, [pc, #216]	; (800de28 <tcp_receive+0x564>)
 800dd50:	6812      	ldr	r2, [r2, #0]
 800dd52:	4413      	add	r3, r2
 800dd54:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800dd56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dd58:	440a      	add	r2, r1
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d0b7      	beq.n	800dcce <tcp_receive+0x40a>
 800dd5e:	4b33      	ldr	r3, [pc, #204]	; (800de2c <tcp_receive+0x568>)
 800dd60:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800dd64:	4937      	ldr	r1, [pc, #220]	; (800de44 <tcp_receive+0x580>)
 800dd66:	4833      	ldr	r0, [pc, #204]	; (800de34 <tcp_receive+0x570>)
 800dd68:	f004 fc54 	bl	8012614 <iprintf>
 800dd6c:	e7af      	b.n	800dcce <tcp_receive+0x40a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dd6e:	4e2d      	ldr	r6, [pc, #180]	; (800de24 <tcp_receive+0x560>)
 800dd70:	68f3      	ldr	r3, [r6, #12]
 800dd72:	899d      	ldrh	r5, [r3, #12]
 800dd74:	4628      	mov	r0, r5
 800dd76:	f7fd f9cd 	bl	800b114 <lwip_htons>
 800dd7a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800dd7e:	f7fd f9c9 	bl	800b114 <lwip_htons>
 800dd82:	68f3      	ldr	r3, [r6, #12]
 800dd84:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800dd88:	4305      	orrs	r5, r0
 800dd8a:	819d      	strh	r5, [r3, #12]
 800dd8c:	e7bf      	b.n	800dd0e <tcp_receive+0x44a>
            struct tcp_seg *next = pcb->ooseq;
 800dd8e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800dd90:	2d00      	cmp	r5, #0
 800dd92:	f000 81db 	beq.w	800e14c <tcp_receive+0x888>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800dd96:	4f24      	ldr	r7, [pc, #144]	; (800de28 <tcp_receive+0x564>)
 800dd98:	4e29      	ldr	r6, [pc, #164]	; (800de40 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800dd9a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800de24 <tcp_receive+0x560>
 800dd9e:	e009      	b.n	800ddb4 <tcp_receive+0x4f0>
              next = next->next;
 800dda0:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 800dda4:	4628      	mov	r0, r5
 800dda6:	f7fe fc7b 	bl	800c6a0 <tcp_seg_free>
            while (next &&
 800ddaa:	f1b9 0f00 	cmp.w	r9, #0
 800ddae:	f000 81cd 	beq.w	800e14c <tcp_receive+0x888>
              next = next->next;
 800ddb2:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ddb4:	f8d7 c000 	ldr.w	ip, [r7]
 800ddb8:	68e9      	ldr	r1, [r5, #12]
 800ddba:	6848      	ldr	r0, [r1, #4]
 800ddbc:	8833      	ldrh	r3, [r6, #0]
 800ddbe:	4463      	add	r3, ip
 800ddc0:	1a1b      	subs	r3, r3, r0
 800ddc2:	892a      	ldrh	r2, [r5, #8]
 800ddc4:	1a9a      	subs	r2, r3, r2
            while (next &&
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	f2c0 81c2 	blt.w	800e150 <tcp_receive+0x88c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ddcc:	8988      	ldrh	r0, [r1, #12]
 800ddce:	f7fd f9a1 	bl	800b114 <lwip_htons>
 800ddd2:	f010 0f01 	tst.w	r0, #1
 800ddd6:	d0e3      	beq.n	800dda0 <tcp_receive+0x4dc>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ddd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dddc:	8998      	ldrh	r0, [r3, #12]
 800ddde:	f7fd f999 	bl	800b114 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dde2:	f010 0f02 	tst.w	r0, #2
 800dde6:	d1db      	bne.n	800dda0 <tcp_receive+0x4dc>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800dde8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddec:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	f7fd f98f 	bl	800b114 <lwip_htons>
 800ddf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddfa:	ea49 0900 	orr.w	r9, r9, r0
 800ddfe:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800de02:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800de06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de0a:	8998      	ldrh	r0, [r3, #12]
 800de0c:	f7fd f982 	bl	800b114 <lwip_htons>
 800de10:	f010 0303 	ands.w	r3, r0, #3
 800de14:	bf18      	it	ne
 800de16:	2301      	movne	r3, #1
 800de18:	444b      	add	r3, r9
 800de1a:	8033      	strh	r3, [r6, #0]
 800de1c:	e7c0      	b.n	800dda0 <tcp_receive+0x4dc>
 800de1e:	bf00      	nop
 800de20:	2001b610 	.word	0x2001b610
 800de24:	20012bc4 	.word	0x20012bc4
 800de28:	20012be0 	.word	0x20012be0
 800de2c:	08014ff8 	.word	0x08014ff8
 800de30:	08015128 	.word	0x08015128
 800de34:	0801397c 	.word	0x0801397c
 800de38:	08015138 	.word	0x08015138
 800de3c:	08015148 	.word	0x08015148
 800de40:	20012bf6 	.word	0x20012bf6
 800de44:	08015158 	.word	0x08015158
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800de48:	4b82      	ldr	r3, [pc, #520]	; (800e054 <tcp_receive+0x790>)
 800de4a:	eba0 000c 	sub.w	r0, r0, ip
 800de4e:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	8998      	ldrh	r0, [r3, #12]
 800de54:	f7fd f95e 	bl	800b114 <lwip_htons>
 800de58:	f010 0f02 	tst.w	r0, #2
 800de5c:	d003      	beq.n	800de66 <tcp_receive+0x5a2>
                inseg.len -= 1;
 800de5e:	4a7d      	ldr	r2, [pc, #500]	; (800e054 <tcp_receive+0x790>)
 800de60:	8913      	ldrh	r3, [r2, #8]
 800de62:	3b01      	subs	r3, #1
 800de64:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800de66:	4f7b      	ldr	r7, [pc, #492]	; (800e054 <tcp_receive+0x790>)
 800de68:	8939      	ldrh	r1, [r7, #8]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7fe f878 	bl	800bf60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800de70:	893e      	ldrh	r6, [r7, #8]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	8998      	ldrh	r0, [r3, #12]
 800de76:	f7fd f94d 	bl	800b114 <lwip_htons>
 800de7a:	f010 0303 	ands.w	r3, r0, #3
 800de7e:	bf18      	it	ne
 800de80:	2301      	movne	r3, #1
 800de82:	4433      	add	r3, r6
 800de84:	b29b      	uxth	r3, r3
 800de86:	4a74      	ldr	r2, [pc, #464]	; (800e058 <tcp_receive+0x794>)
 800de88:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800de8a:	4a74      	ldr	r2, [pc, #464]	; (800e05c <tcp_receive+0x798>)
 800de8c:	6812      	ldr	r2, [r2, #0]
 800de8e:	4413      	add	r3, r2
 800de90:	68ea      	ldr	r2, [r5, #12]
 800de92:	6852      	ldr	r2, [r2, #4]
 800de94:	4293      	cmp	r3, r2
 800de96:	f000 815e 	beq.w	800e156 <tcp_receive+0x892>
 800de9a:	4b71      	ldr	r3, [pc, #452]	; (800e060 <tcp_receive+0x79c>)
 800de9c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800dea0:	4970      	ldr	r1, [pc, #448]	; (800e064 <tcp_receive+0x7a0>)
 800dea2:	4871      	ldr	r0, [pc, #452]	; (800e068 <tcp_receive+0x7a4>)
 800dea4:	f004 fbb6 	bl	8012614 <iprintf>
 800dea8:	e155      	b.n	800e156 <tcp_receive+0x892>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800deaa:	4b6d      	ldr	r3, [pc, #436]	; (800e060 <tcp_receive+0x79c>)
 800deac:	f240 6207 	movw	r2, #1543	; 0x607
 800deb0:	496e      	ldr	r1, [pc, #440]	; (800e06c <tcp_receive+0x7a8>)
 800deb2:	486d      	ldr	r0, [pc, #436]	; (800e068 <tcp_receive+0x7a4>)
 800deb4:	f004 fbae 	bl	8012614 <iprintf>
 800deb8:	e158      	b.n	800e16c <tcp_receive+0x8a8>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800deba:	4643      	mov	r3, r8
 800debc:	f240 622b 	movw	r2, #1579	; 0x62b
 800dec0:	4639      	mov	r1, r7
 800dec2:	4869      	ldr	r0, [pc, #420]	; (800e068 <tcp_receive+0x7a4>)
 800dec4:	f004 fba6 	bl	8012614 <iprintf>
 800dec8:	e03c      	b.n	800df44 <tcp_receive+0x680>
              pbuf_cat(recv_data, cseg->p);
 800deca:	f7fe f8d1 	bl	800c070 <pbuf_cat>
            cseg->p = NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ded2:	68eb      	ldr	r3, [r5, #12]
 800ded4:	8998      	ldrh	r0, [r3, #12]
 800ded6:	f7fd f91d 	bl	800b114 <lwip_htons>
 800deda:	f010 0f01 	tst.w	r0, #1
 800dede:	d007      	beq.n	800def0 <tcp_receive+0x62c>
            recv_flags |= TF_GOT_FIN;
 800dee0:	4a63      	ldr	r2, [pc, #396]	; (800e070 <tcp_receive+0x7ac>)
 800dee2:	7813      	ldrb	r3, [r2, #0]
 800dee4:	f043 0320 	orr.w	r3, r3, #32
 800dee8:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800deea:	7d23      	ldrb	r3, [r4, #20]
 800deec:	2b04      	cmp	r3, #4
 800deee:	d045      	beq.n	800df7c <tcp_receive+0x6b8>
          pcb->ooseq = cseg->next;
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800def4:	4628      	mov	r0, r5
 800def6:	f7fe fbd3 	bl	800c6a0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800defa:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800defc:	2d00      	cmp	r5, #0
 800defe:	d040      	beq.n	800df82 <tcp_receive+0x6be>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800df00:	68ea      	ldr	r2, [r5, #12]
 800df02:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800df04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df06:	428b      	cmp	r3, r1
 800df08:	d13b      	bne.n	800df82 <tcp_receive+0x6be>
          seqno = pcb->ooseq->tcphdr->seqno;
 800df0a:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800df0c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800df10:	8990      	ldrh	r0, [r2, #12]
 800df12:	f7fd f8ff 	bl	800b114 <lwip_htons>
 800df16:	f010 0003 	ands.w	r0, r0, #3
 800df1a:	bf18      	it	ne
 800df1c:	2001      	movne	r0, #1
 800df1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df20:	4499      	add	r9, r3
 800df22:	4448      	add	r0, r9
 800df24:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800df26:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 800df2a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800df2e:	68eb      	ldr	r3, [r5, #12]
 800df30:	8998      	ldrh	r0, [r3, #12]
 800df32:	f7fd f8ef 	bl	800b114 <lwip_htons>
 800df36:	f010 0003 	ands.w	r0, r0, #3
 800df3a:	bf18      	it	ne
 800df3c:	2001      	movne	r0, #1
 800df3e:	4450      	add	r0, sl
 800df40:	4581      	cmp	r9, r0
 800df42:	d3ba      	bcc.n	800deba <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800df44:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800df48:	68eb      	ldr	r3, [r5, #12]
 800df4a:	8998      	ldrh	r0, [r3, #12]
 800df4c:	f7fd f8e2 	bl	800b114 <lwip_htons>
 800df50:	f010 0003 	ands.w	r0, r0, #3
 800df54:	bf18      	it	ne
 800df56:	2001      	movne	r0, #1
 800df58:	4448      	add	r0, r9
 800df5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800df5c:	1a18      	subs	r0, r3, r0
 800df5e:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800df60:	4620      	mov	r0, r4
 800df62:	f7fe fb2b 	bl	800c5bc <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800df66:	6869      	ldr	r1, [r5, #4]
 800df68:	890b      	ldrh	r3, [r1, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d0b1      	beq.n	800ded2 <tcp_receive+0x60e>
            if (recv_data) {
 800df6e:	4b41      	ldr	r3, [pc, #260]	; (800e074 <tcp_receive+0x7b0>)
 800df70:	6818      	ldr	r0, [r3, #0]
 800df72:	2800      	cmp	r0, #0
 800df74:	d1a9      	bne.n	800deca <tcp_receive+0x606>
              recv_data = cseg->p;
 800df76:	4b3f      	ldr	r3, [pc, #252]	; (800e074 <tcp_receive+0x7b0>)
 800df78:	6019      	str	r1, [r3, #0]
 800df7a:	e7a8      	b.n	800dece <tcp_receive+0x60a>
              pcb->state = CLOSE_WAIT;
 800df7c:	2307      	movs	r3, #7
 800df7e:	7523      	strb	r3, [r4, #20]
 800df80:	e7b6      	b.n	800def0 <tcp_receive+0x62c>
        tcp_ack(pcb);
 800df82:	8b63      	ldrh	r3, [r4, #26]
 800df84:	f013 0f01 	tst.w	r3, #1
 800df88:	d005      	beq.n	800df96 <tcp_receive+0x6d2>
 800df8a:	f023 0301 	bic.w	r3, r3, #1
 800df8e:	f043 0302 	orr.w	r3, r3, #2
 800df92:	8363      	strh	r3, [r4, #26]
 800df94:	e54b      	b.n	800da2e <tcp_receive+0x16a>
 800df96:	f043 0301 	orr.w	r3, r3, #1
 800df9a:	8363      	strh	r3, [r4, #26]
 800df9c:	e547      	b.n	800da2e <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800df9e:	482d      	ldr	r0, [pc, #180]	; (800e054 <tcp_receive+0x790>)
 800dfa0:	f7fe fb96 	bl	800c6d0 <tcp_seg_copy>
 800dfa4:	6760      	str	r0, [r4, #116]	; 0x74
 800dfa6:	e051      	b.n	800e04c <tcp_receive+0x788>
              if (inseg.len > next->len) {
 800dfa8:	4b2a      	ldr	r3, [pc, #168]	; (800e054 <tcp_receive+0x790>)
 800dfaa:	891a      	ldrh	r2, [r3, #8]
 800dfac:	892b      	ldrh	r3, [r5, #8]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d94c      	bls.n	800e04c <tcp_receive+0x788>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dfb2:	4828      	ldr	r0, [pc, #160]	; (800e054 <tcp_receive+0x790>)
 800dfb4:	f7fe fb8c 	bl	800c6d0 <tcp_seg_copy>
                if (cseg != NULL) {
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d046      	beq.n	800e04c <tcp_receive+0x788>
                  if (prev != NULL) {
 800dfbe:	b12e      	cbz	r6, 800dfcc <tcp_receive+0x708>
                    prev->next = cseg;
 800dfc0:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7ff fc25 	bl	800d814 <tcp_oos_insert_segment>
 800dfca:	e03f      	b.n	800e04c <tcp_receive+0x788>
                    pcb->ooseq = cseg;
 800dfcc:	6760      	str	r0, [r4, #116]	; 0x74
 800dfce:	e7f8      	b.n	800dfc2 <tcp_receive+0x6fe>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dfd0:	1a99      	subs	r1, r3, r2
 800dfd2:	2900      	cmp	r1, #0
 800dfd4:	db27      	blt.n	800e026 <tcp_receive+0x762>
              if (next->next == NULL &&
 800dfd6:	6829      	ldr	r1, [r5, #0]
 800dfd8:	462e      	mov	r6, r5
 800dfda:	2900      	cmp	r1, #0
 800dfdc:	d033      	beq.n	800e046 <tcp_receive+0x782>
 800dfde:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800dfe0:	68e8      	ldr	r0, [r5, #12]
 800dfe2:	6842      	ldr	r2, [r0, #4]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d0df      	beq.n	800dfa8 <tcp_receive+0x6e4>
              if (prev == NULL) {
 800dfe8:	2e00      	cmp	r6, #0
 800dfea:	d0f1      	beq.n	800dfd0 <tcp_receive+0x70c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dfec:	68f1      	ldr	r1, [r6, #12]
 800dfee:	6849      	ldr	r1, [r1, #4]
 800dff0:	1a79      	subs	r1, r7, r1
 800dff2:	2900      	cmp	r1, #0
 800dff4:	dbef      	blt.n	800dfd6 <tcp_receive+0x712>
 800dff6:	ebac 0102 	sub.w	r1, ip, r2
 800dffa:	2900      	cmp	r1, #0
 800dffc:	dceb      	bgt.n	800dfd6 <tcp_receive+0x712>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dffe:	4815      	ldr	r0, [pc, #84]	; (800e054 <tcp_receive+0x790>)
 800e000:	f7fe fb66 	bl	800c6d0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800e004:	4607      	mov	r7, r0
 800e006:	b308      	cbz	r0, 800e04c <tcp_receive+0x788>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e008:	68f3      	ldr	r3, [r6, #12]
 800e00a:	6859      	ldr	r1, [r3, #4]
 800e00c:	4b13      	ldr	r3, [pc, #76]	; (800e05c <tcp_receive+0x798>)
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	8933      	ldrh	r3, [r6, #8]
 800e012:	440b      	add	r3, r1
 800e014:	1a9b      	subs	r3, r3, r2
 800e016:	2b00      	cmp	r3, #0
 800e018:	dc0e      	bgt.n	800e038 <tcp_receive+0x774>
                    prev->next = cseg;
 800e01a:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e01c:	4629      	mov	r1, r5
 800e01e:	4638      	mov	r0, r7
 800e020:	f7ff fbf8 	bl	800d814 <tcp_oos_insert_segment>
 800e024:	e012      	b.n	800e04c <tcp_receive+0x788>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e026:	480b      	ldr	r0, [pc, #44]	; (800e054 <tcp_receive+0x790>)
 800e028:	f7fe fb52 	bl	800c6d0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800e02c:	b170      	cbz	r0, 800e04c <tcp_receive+0x788>
                    pcb->ooseq = cseg;
 800e02e:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e030:	4629      	mov	r1, r5
 800e032:	f7ff fbef 	bl	800d814 <tcp_oos_insert_segment>
 800e036:	e009      	b.n	800e04c <tcp_receive+0x788>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e038:	1a52      	subs	r2, r2, r1
 800e03a:	b291      	uxth	r1, r2
 800e03c:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e03e:	6870      	ldr	r0, [r6, #4]
 800e040:	f7fd ff8e 	bl	800bf60 <pbuf_realloc>
 800e044:	e7e9      	b.n	800e01a <tcp_receive+0x756>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e046:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800e048:	2b00      	cmp	r3, #0
 800e04a:	dc15      	bgt.n	800e078 <tcp_receive+0x7b4>
        tcp_send_empty_ack(pcb);
 800e04c:	4620      	mov	r0, r4
 800e04e:	f001 fea7 	bl	800fda0 <tcp_send_empty_ack>
 800e052:	e4ec      	b.n	800da2e <tcp_receive+0x16a>
 800e054:	20012bc4 	.word	0x20012bc4
 800e058:	20012bf6 	.word	0x20012bf6
 800e05c:	20012be0 	.word	0x20012be0
 800e060:	08014ff8 	.word	0x08014ff8
 800e064:	08015190 	.word	0x08015190
 800e068:	0801397c 	.word	0x0801397c
 800e06c:	080151cc 	.word	0x080151cc
 800e070:	20012bdc 	.word	0x20012bdc
 800e074:	20012bd8 	.word	0x20012bd8
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e078:	8980      	ldrh	r0, [r0, #12]
 800e07a:	f7fd f84b 	bl	800b114 <lwip_htons>
 800e07e:	f010 0f01 	tst.w	r0, #1
 800e082:	d1e3      	bne.n	800e04c <tcp_receive+0x788>
                next->next = tcp_seg_copy(&inseg);
 800e084:	484d      	ldr	r0, [pc, #308]	; (800e1bc <tcp_receive+0x8f8>)
 800e086:	f7fe fb23 	bl	800c6d0 <tcp_seg_copy>
 800e08a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d0dd      	beq.n	800e04c <tcp_receive+0x788>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e090:	68eb      	ldr	r3, [r5, #12]
 800e092:	6859      	ldr	r1, [r3, #4]
 800e094:	4b4a      	ldr	r3, [pc, #296]	; (800e1c0 <tcp_receive+0x8fc>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	892a      	ldrh	r2, [r5, #8]
 800e09a:	440a      	add	r2, r1
 800e09c:	1ad2      	subs	r2, r2, r3
 800e09e:	2a00      	cmp	r2, #0
 800e0a0:	dc3c      	bgt.n	800e11c <tcp_receive+0x858>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e0a2:	4b48      	ldr	r3, [pc, #288]	; (800e1c4 <tcp_receive+0x900>)
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	4a46      	ldr	r2, [pc, #280]	; (800e1c0 <tcp_receive+0x8fc>)
 800e0a8:	6812      	ldr	r2, [r2, #0]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e0ae:	1a9b      	subs	r3, r3, r2
 800e0b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800e0b2:	1a9b      	subs	r3, r3, r2
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	ddc9      	ble.n	800e04c <tcp_receive+0x788>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e0b8:	682b      	ldr	r3, [r5, #0]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	8998      	ldrh	r0, [r3, #12]
 800e0be:	f7fd f829 	bl	800b114 <lwip_htons>
 800e0c2:	f010 0f01 	tst.w	r0, #1
 800e0c6:	d130      	bne.n	800e12a <tcp_receive+0x866>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e0c8:	682a      	ldr	r2, [r5, #0]
 800e0ca:	4e3d      	ldr	r6, [pc, #244]	; (800e1c0 <tcp_receive+0x8fc>)
 800e0cc:	6831      	ldr	r1, [r6, #0]
 800e0ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e0d0:	1a5b      	subs	r3, r3, r1
 800e0d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e0d4:	440b      	add	r3, r1
 800e0d6:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e0d8:	682b      	ldr	r3, [r5, #0]
 800e0da:	8919      	ldrh	r1, [r3, #8]
 800e0dc:	6858      	ldr	r0, [r3, #4]
 800e0de:	f7fd ff3f 	bl	800bf60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e0e2:	682b      	ldr	r3, [r5, #0]
 800e0e4:	891d      	ldrh	r5, [r3, #8]
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	8998      	ldrh	r0, [r3, #12]
 800e0ea:	f7fd f813 	bl	800b114 <lwip_htons>
 800e0ee:	f010 0303 	ands.w	r3, r0, #3
 800e0f2:	bf18      	it	ne
 800e0f4:	2301      	movne	r3, #1
 800e0f6:	442b      	add	r3, r5
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	4a32      	ldr	r2, [pc, #200]	; (800e1c4 <tcp_receive+0x900>)
 800e0fc:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e0fe:	6832      	ldr	r2, [r6, #0]
 800e100:	4413      	add	r3, r2
 800e102:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800e104:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e106:	440a      	add	r2, r1
 800e108:	4293      	cmp	r3, r2
 800e10a:	d09f      	beq.n	800e04c <tcp_receive+0x788>
 800e10c:	4b2e      	ldr	r3, [pc, #184]	; (800e1c8 <tcp_receive+0x904>)
 800e10e:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e112:	492e      	ldr	r1, [pc, #184]	; (800e1cc <tcp_receive+0x908>)
 800e114:	482e      	ldr	r0, [pc, #184]	; (800e1d0 <tcp_receive+0x90c>)
 800e116:	f004 fa7d 	bl	8012614 <iprintf>
 800e11a:	e797      	b.n	800e04c <tcp_receive+0x788>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e11c:	1a5b      	subs	r3, r3, r1
 800e11e:	b299      	uxth	r1, r3
 800e120:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800e122:	6868      	ldr	r0, [r5, #4]
 800e124:	f7fd ff1c 	bl	800bf60 <pbuf_realloc>
 800e128:	e7bb      	b.n	800e0a2 <tcp_receive+0x7de>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e12a:	682b      	ldr	r3, [r5, #0]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	899e      	ldrh	r6, [r3, #12]
 800e130:	4630      	mov	r0, r6
 800e132:	f7fc ffef 	bl	800b114 <lwip_htons>
 800e136:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800e13a:	f7fc ffeb 	bl	800b114 <lwip_htons>
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800e146:	4306      	orrs	r6, r0
 800e148:	819e      	strh	r6, [r3, #12]
 800e14a:	e7bd      	b.n	800e0c8 <tcp_receive+0x804>
              next = next->next;
 800e14c:	2500      	movs	r5, #0
 800e14e:	e002      	b.n	800e156 <tcp_receive+0x892>
            if (next &&
 800e150:	2b00      	cmp	r3, #0
 800e152:	f73f ae79 	bgt.w	800de48 <tcp_receive+0x584>
            pcb->ooseq = next;
 800e156:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800e158:	4b1a      	ldr	r3, [pc, #104]	; (800e1c4 <tcp_receive+0x900>)
 800e15a:	881a      	ldrh	r2, [r3, #0]
 800e15c:	4b18      	ldr	r3, [pc, #96]	; (800e1c0 <tcp_receive+0x8fc>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4413      	add	r3, r2
 800e162:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e164:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e166:	4293      	cmp	r3, r2
 800e168:	f4ff ae9f 	bcc.w	800deaa <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 800e16c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e16e:	4a15      	ldr	r2, [pc, #84]	; (800e1c4 <tcp_receive+0x900>)
 800e170:	8812      	ldrh	r2, [r2, #0]
 800e172:	1a9b      	subs	r3, r3, r2
 800e174:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800e176:	4620      	mov	r0, r4
 800e178:	f7fe fa20 	bl	800c5bc <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800e17c:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <tcp_receive+0x8f8>)
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	891a      	ldrh	r2, [r3, #8]
 800e182:	b122      	cbz	r2, 800e18e <tcp_receive+0x8ca>
          recv_data = inseg.p;
 800e184:	4a13      	ldr	r2, [pc, #76]	; (800e1d4 <tcp_receive+0x910>)
 800e186:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800e188:	4b0c      	ldr	r3, [pc, #48]	; (800e1bc <tcp_receive+0x8f8>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e18e:	4b0b      	ldr	r3, [pc, #44]	; (800e1bc <tcp_receive+0x8f8>)
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	8998      	ldrh	r0, [r3, #12]
 800e194:	f7fc ffbe 	bl	800b114 <lwip_htons>
 800e198:	f010 0f01 	tst.w	r0, #1
 800e19c:	d004      	beq.n	800e1a8 <tcp_receive+0x8e4>
          recv_flags |= TF_GOT_FIN;
 800e19e:	4a0e      	ldr	r2, [pc, #56]	; (800e1d8 <tcp_receive+0x914>)
 800e1a0:	7813      	ldrb	r3, [r2, #0]
 800e1a2:	f043 0320 	orr.w	r3, r3, #32
 800e1a6:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800e1a8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800e1aa:	2d00      	cmp	r5, #0
 800e1ac:	f43f aee9 	beq.w	800df82 <tcp_receive+0x6be>
          seqno = pcb->ooseq->tcphdr->seqno;
 800e1b0:	4e03      	ldr	r6, [pc, #12]	; (800e1c0 <tcp_receive+0x8fc>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e1b2:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800e1c8 <tcp_receive+0x904>
 800e1b6:	4f09      	ldr	r7, [pc, #36]	; (800e1dc <tcp_receive+0x918>)
 800e1b8:	e6a2      	b.n	800df00 <tcp_receive+0x63c>
 800e1ba:	bf00      	nop
 800e1bc:	20012bc4 	.word	0x20012bc4
 800e1c0:	20012be0 	.word	0x20012be0
 800e1c4:	20012bf6 	.word	0x20012bf6
 800e1c8:	08014ff8 	.word	0x08014ff8
 800e1cc:	08015158 	.word	0x08015158
 800e1d0:	0801397c 	.word	0x0801397c
 800e1d4:	20012bd8 	.word	0x20012bd8
 800e1d8:	20012bdc 	.word	0x20012bdc
 800e1dc:	080151ec 	.word	0x080151ec

0800e1e0 <tcp_input>:
{
 800e1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	b158      	cbz	r0, 800e202 <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 800e1ea:	686a      	ldr	r2, [r5, #4]
 800e1ec:	4b77      	ldr	r3, [pc, #476]	; (800e3cc <tcp_input+0x1ec>)
 800e1ee:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800e1f0:	896b      	ldrh	r3, [r5, #10]
 800e1f2:	2b13      	cmp	r3, #19
 800e1f4:	d80c      	bhi.n	800e210 <tcp_input+0x30>
  pbuf_free(p);
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f7fd fd9a 	bl	800bd30 <pbuf_free>
}
 800e1fc:	b005      	add	sp, #20
 800e1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e202:	4b73      	ldr	r3, [pc, #460]	; (800e3d0 <tcp_input+0x1f0>)
 800e204:	2283      	movs	r2, #131	; 0x83
 800e206:	4973      	ldr	r1, [pc, #460]	; (800e3d4 <tcp_input+0x1f4>)
 800e208:	4873      	ldr	r0, [pc, #460]	; (800e3d8 <tcp_input+0x1f8>)
 800e20a:	f004 fa03 	bl	8012614 <iprintf>
 800e20e:	e7ec      	b.n	800e1ea <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e210:	4b72      	ldr	r3, [pc, #456]	; (800e3dc <tcp_input+0x1fc>)
 800e212:	6819      	ldr	r1, [r3, #0]
 800e214:	6958      	ldr	r0, [r3, #20]
 800e216:	f003 fa68 	bl	80116ea <ip4_addr_isbroadcast_u32>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d1eb      	bne.n	800e1f6 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e21e:	4b6f      	ldr	r3, [pc, #444]	; (800e3dc <tcp_input+0x1fc>)
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e226:	2be0      	cmp	r3, #224	; 0xe0
 800e228:	d0e5      	beq.n	800e1f6 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e22a:	4b68      	ldr	r3, [pc, #416]	; (800e3cc <tcp_input+0x1ec>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	8998      	ldrh	r0, [r3, #12]
 800e230:	f7fc ff70 	bl	800b114 <lwip_htons>
 800e234:	0a81      	lsrs	r1, r0, #10
 800e236:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e23a:	2913      	cmp	r1, #19
 800e23c:	d9db      	bls.n	800e1f6 <tcp_input+0x16>
 800e23e:	b28b      	uxth	r3, r1
 800e240:	892a      	ldrh	r2, [r5, #8]
 800e242:	429a      	cmp	r2, r3
 800e244:	d3d7      	bcc.n	800e1f6 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e246:	f1a3 0214 	sub.w	r2, r3, #20
 800e24a:	b292      	uxth	r2, r2
 800e24c:	4864      	ldr	r0, [pc, #400]	; (800e3e0 <tcp_input+0x200>)
 800e24e:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800e250:	4864      	ldr	r0, [pc, #400]	; (800e3e4 <tcp_input+0x204>)
 800e252:	2400      	movs	r4, #0
 800e254:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800e256:	8968      	ldrh	r0, [r5, #10]
 800e258:	4298      	cmp	r0, r3
 800e25a:	d22e      	bcs.n	800e2ba <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d068      	beq.n	800e334 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800e262:	2114      	movs	r1, #20
 800e264:	4628      	mov	r0, r5
 800e266:	f7fd fd23 	bl	800bcb0 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800e26a:	896c      	ldrh	r4, [r5, #10]
 800e26c:	4b5e      	ldr	r3, [pc, #376]	; (800e3e8 <tcp_input+0x208>)
 800e26e:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e270:	4b5b      	ldr	r3, [pc, #364]	; (800e3e0 <tcp_input+0x200>)
 800e272:	881f      	ldrh	r7, [r3, #0]
 800e274:	1b3e      	subs	r6, r7, r4
 800e276:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800e278:	4621      	mov	r1, r4
 800e27a:	4628      	mov	r0, r5
 800e27c:	f7fd fd18 	bl	800bcb0 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800e280:	6828      	ldr	r0, [r5, #0]
 800e282:	8943      	ldrh	r3, [r0, #10]
 800e284:	42b3      	cmp	r3, r6
 800e286:	d3b6      	bcc.n	800e1f6 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e288:	6842      	ldr	r2, [r0, #4]
 800e28a:	4b56      	ldr	r3, [pc, #344]	; (800e3e4 <tcp_input+0x204>)
 800e28c:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800e28e:	4631      	mov	r1, r6
 800e290:	f7fd fd0e 	bl	800bcb0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e294:	892b      	ldrh	r3, [r5, #8]
 800e296:	441c      	add	r4, r3
 800e298:	1be4      	subs	r4, r4, r7
 800e29a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e29c:	896b      	ldrh	r3, [r5, #10]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d14f      	bne.n	800e342 <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e2a2:	682b      	ldr	r3, [r5, #0]
 800e2a4:	892a      	ldrh	r2, [r5, #8]
 800e2a6:	891b      	ldrh	r3, [r3, #8]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d00b      	beq.n	800e2c4 <tcp_input+0xe4>
 800e2ac:	4b48      	ldr	r3, [pc, #288]	; (800e3d0 <tcp_input+0x1f0>)
 800e2ae:	22e0      	movs	r2, #224	; 0xe0
 800e2b0:	494e      	ldr	r1, [pc, #312]	; (800e3ec <tcp_input+0x20c>)
 800e2b2:	4849      	ldr	r0, [pc, #292]	; (800e3d8 <tcp_input+0x1f8>)
 800e2b4:	f004 f9ae 	bl	8012614 <iprintf>
 800e2b8:	e004      	b.n	800e2c4 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800e2ba:	4b4b      	ldr	r3, [pc, #300]	; (800e3e8 <tcp_input+0x208>)
 800e2bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f7fd fcf6 	bl	800bcb0 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e2c4:	4c41      	ldr	r4, [pc, #260]	; (800e3cc <tcp_input+0x1ec>)
 800e2c6:	6826      	ldr	r6, [r4, #0]
 800e2c8:	8830      	ldrh	r0, [r6, #0]
 800e2ca:	f7fc ff23 	bl	800b114 <lwip_htons>
 800e2ce:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e2d0:	6826      	ldr	r6, [r4, #0]
 800e2d2:	8870      	ldrh	r0, [r6, #2]
 800e2d4:	f7fc ff1e 	bl	800b114 <lwip_htons>
 800e2d8:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e2da:	6826      	ldr	r6, [r4, #0]
 800e2dc:	6870      	ldr	r0, [r6, #4]
 800e2de:	f7fc ff1e 	bl	800b11e <lwip_htonl>
 800e2e2:	6070      	str	r0, [r6, #4]
 800e2e4:	4b42      	ldr	r3, [pc, #264]	; (800e3f0 <tcp_input+0x210>)
 800e2e6:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e2e8:	6826      	ldr	r6, [r4, #0]
 800e2ea:	68b0      	ldr	r0, [r6, #8]
 800e2ec:	f7fc ff17 	bl	800b11e <lwip_htonl>
 800e2f0:	60b0      	str	r0, [r6, #8]
 800e2f2:	4b40      	ldr	r3, [pc, #256]	; (800e3f4 <tcp_input+0x214>)
 800e2f4:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e2f6:	6826      	ldr	r6, [r4, #0]
 800e2f8:	89f0      	ldrh	r0, [r6, #14]
 800e2fa:	f7fc ff0b 	bl	800b114 <lwip_htons>
 800e2fe:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	8998      	ldrh	r0, [r3, #12]
 800e304:	f7fc ff06 	bl	800b114 <lwip_htons>
 800e308:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800e30c:	4b3a      	ldr	r3, [pc, #232]	; (800e3f8 <tcp_input+0x218>)
 800e30e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e310:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e312:	f010 0f03 	tst.w	r0, #3
 800e316:	d11b      	bne.n	800e350 <tcp_input+0x170>
  tcplen = p->tot_len;
 800e318:	4b38      	ldr	r3, [pc, #224]	; (800e3fc <tcp_input+0x21c>)
 800e31a:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e31c:	4b38      	ldr	r3, [pc, #224]	; (800e400 <tcp_input+0x220>)
 800e31e:	681c      	ldr	r4, [r3, #0]
 800e320:	2c00      	cmp	r4, #0
 800e322:	f000 8563 	beq.w	800edec <tcp_input+0xc0c>
  prev = NULL;
 800e326:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e328:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e3d0 <tcp_input+0x1f0>
 800e32c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800e414 <tcp_input+0x234>
 800e330:	4f29      	ldr	r7, [pc, #164]	; (800e3d8 <tcp_input+0x1f8>)
 800e332:	e035      	b.n	800e3a0 <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e334:	4b26      	ldr	r3, [pc, #152]	; (800e3d0 <tcp_input+0x1f0>)
 800e336:	22c2      	movs	r2, #194	; 0xc2
 800e338:	4932      	ldr	r1, [pc, #200]	; (800e404 <tcp_input+0x224>)
 800e33a:	4827      	ldr	r0, [pc, #156]	; (800e3d8 <tcp_input+0x1f8>)
 800e33c:	f004 f96a 	bl	8012614 <iprintf>
 800e340:	e78f      	b.n	800e262 <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e342:	4b23      	ldr	r3, [pc, #140]	; (800e3d0 <tcp_input+0x1f0>)
 800e344:	22df      	movs	r2, #223	; 0xdf
 800e346:	4930      	ldr	r1, [pc, #192]	; (800e408 <tcp_input+0x228>)
 800e348:	4823      	ldr	r0, [pc, #140]	; (800e3d8 <tcp_input+0x1f8>)
 800e34a:	f004 f963 	bl	8012614 <iprintf>
 800e34e:	e7a8      	b.n	800e2a2 <tcp_input+0xc2>
    tcplen++;
 800e350:	1c53      	adds	r3, r2, #1
 800e352:	b29b      	uxth	r3, r3
 800e354:	4929      	ldr	r1, [pc, #164]	; (800e3fc <tcp_input+0x21c>)
 800e356:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800e358:	429a      	cmp	r2, r3
 800e35a:	d9df      	bls.n	800e31c <tcp_input+0x13c>
 800e35c:	e74b      	b.n	800e1f6 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e35e:	4643      	mov	r3, r8
 800e360:	22fb      	movs	r2, #251	; 0xfb
 800e362:	4649      	mov	r1, r9
 800e364:	4638      	mov	r0, r7
 800e366:	f004 f955 	bl	8012614 <iprintf>
 800e36a:	e01c      	b.n	800e3a6 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e36c:	4643      	mov	r3, r8
 800e36e:	22fc      	movs	r2, #252	; 0xfc
 800e370:	4926      	ldr	r1, [pc, #152]	; (800e40c <tcp_input+0x22c>)
 800e372:	4638      	mov	r0, r7
 800e374:	f004 f94e 	bl	8012614 <iprintf>
 800e378:	e018      	b.n	800e3ac <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e37a:	4643      	mov	r3, r8
 800e37c:	22fd      	movs	r2, #253	; 0xfd
 800e37e:	4924      	ldr	r1, [pc, #144]	; (800e410 <tcp_input+0x230>)
 800e380:	4638      	mov	r0, r7
 800e382:	f004 f947 	bl	8012614 <iprintf>
 800e386:	e014      	b.n	800e3b2 <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 800e388:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <tcp_input+0x1ec>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	8b21      	ldrh	r1, [r4, #24]
 800e38e:	881a      	ldrh	r2, [r3, #0]
 800e390:	4291      	cmp	r1, r2
 800e392:	d041      	beq.n	800e418 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e394:	68e3      	ldr	r3, [r4, #12]
 800e396:	4626      	mov	r6, r4
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 8527 	beq.w	800edec <tcp_input+0xc0c>
 800e39e:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e3a0:	7d23      	ldrb	r3, [r4, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0db      	beq.n	800e35e <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e3a6:	7d23      	ldrb	r3, [r4, #20]
 800e3a8:	2b0a      	cmp	r3, #10
 800e3aa:	d0df      	beq.n	800e36c <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e3ac:	7d23      	ldrb	r3, [r4, #20]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d0e3      	beq.n	800e37a <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3b2:	7a22      	ldrb	r2, [r4, #8]
 800e3b4:	2a00      	cmp	r2, #0
 800e3b6:	d0e7      	beq.n	800e388 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e3b8:	4b08      	ldr	r3, [pc, #32]	; (800e3dc <tcp_input+0x1fc>)
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e3c0:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d0df      	beq.n	800e388 <tcp_input+0x1a8>
 800e3c8:	e7e4      	b.n	800e394 <tcp_input+0x1b4>
 800e3ca:	bf00      	nop
 800e3cc:	20012be8 	.word	0x20012be8
 800e3d0:	08014ff8 	.word	0x08014ff8
 800e3d4:	08015214 	.word	0x08015214
 800e3d8:	0801397c 	.word	0x0801397c
 800e3dc:	20016178 	.word	0x20016178
 800e3e0:	20012bf4 	.word	0x20012bf4
 800e3e4:	20012bf0 	.word	0x20012bf0
 800e3e8:	20012bec 	.word	0x20012bec
 800e3ec:	08015248 	.word	0x08015248
 800e3f0:	20012be0 	.word	0x20012be0
 800e3f4:	20012bbc 	.word	0x20012bbc
 800e3f8:	20012bc0 	.word	0x20012bc0
 800e3fc:	20012bf6 	.word	0x20012bf6
 800e400:	2001b60c 	.word	0x2001b60c
 800e404:	0801522c 	.word	0x0801522c
 800e408:	0801523c 	.word	0x0801523c
 800e40c:	08015290 	.word	0x08015290
 800e410:	080152bc 	.word	0x080152bc
 800e414:	08015268 	.word	0x08015268
    if (pcb->remote_port == tcphdr->src &&
 800e418:	8ae2      	ldrh	r2, [r4, #22]
 800e41a:	885b      	ldrh	r3, [r3, #2]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d1b9      	bne.n	800e394 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800e420:	6862      	ldr	r2, [r4, #4]
 800e422:	4b8f      	ldr	r3, [pc, #572]	; (800e660 <tcp_input+0x480>)
 800e424:	691b      	ldr	r3, [r3, #16]
 800e426:	429a      	cmp	r2, r3
 800e428:	d1b4      	bne.n	800e394 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e42a:	6822      	ldr	r2, [r4, #0]
 800e42c:	4b8c      	ldr	r3, [pc, #560]	; (800e660 <tcp_input+0x480>)
 800e42e:	695b      	ldr	r3, [r3, #20]
 800e430:	429a      	cmp	r2, r3
 800e432:	d1af      	bne.n	800e394 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e434:	68e3      	ldr	r3, [r4, #12]
 800e436:	42a3      	cmp	r3, r4
 800e438:	d04d      	beq.n	800e4d6 <tcp_input+0x2f6>
      if (prev != NULL) {
 800e43a:	b146      	cbz	r6, 800e44e <tcp_input+0x26e>
        prev->next = pcb->next;
 800e43c:	68e3      	ldr	r3, [r4, #12]
 800e43e:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800e440:	4b88      	ldr	r3, [pc, #544]	; (800e664 <tcp_input+0x484>)
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800e446:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e448:	68e3      	ldr	r3, [r4, #12]
 800e44a:	42a3      	cmp	r3, r4
 800e44c:	d04d      	beq.n	800e4ea <tcp_input+0x30a>
    inseg.next = NULL;
 800e44e:	4a86      	ldr	r2, [pc, #536]	; (800e668 <tcp_input+0x488>)
 800e450:	2300      	movs	r3, #0
 800e452:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800e454:	8929      	ldrh	r1, [r5, #8]
 800e456:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800e458:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e45a:	4984      	ldr	r1, [pc, #528]	; (800e66c <tcp_input+0x48c>)
 800e45c:	6809      	ldr	r1, [r1, #0]
 800e45e:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800e460:	4a83      	ldr	r2, [pc, #524]	; (800e670 <tcp_input+0x490>)
 800e462:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800e464:	4a83      	ldr	r2, [pc, #524]	; (800e674 <tcp_input+0x494>)
 800e466:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800e468:	4a83      	ldr	r2, [pc, #524]	; (800e678 <tcp_input+0x498>)
 800e46a:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800e46c:	4b83      	ldr	r3, [pc, #524]	; (800e67c <tcp_input+0x49c>)
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	f013 0f08 	tst.w	r3, #8
 800e474:	f040 817c 	bne.w	800e770 <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 800e478:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e47a:	b16b      	cbz	r3, 800e498 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e47c:	4620      	mov	r0, r4
 800e47e:	f7fe fd7f 	bl	800cf80 <tcp_process_refused_data>
 800e482:	f110 0f0d 	cmn.w	r0, #13
 800e486:	f000 8178 	beq.w	800e77a <tcp_input+0x59a>
 800e48a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e48c:	b123      	cbz	r3, 800e498 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e48e:	4b7c      	ldr	r3, [pc, #496]	; (800e680 <tcp_input+0x4a0>)
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	f040 8171 	bne.w	800e77a <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 800e498:	4b7a      	ldr	r3, [pc, #488]	; (800e684 <tcp_input+0x4a4>)
 800e49a:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800e49c:	4b77      	ldr	r3, [pc, #476]	; (800e67c <tcp_input+0x49c>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	f013 0f04 	tst.w	r3, #4
 800e4a4:	f000 81aa 	beq.w	800e7fc <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 800e4a8:	7d21      	ldrb	r1, [r4, #20]
 800e4aa:	2902      	cmp	r1, #2
 800e4ac:	f000 816b 	beq.w	800e786 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 800e4b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e4b2:	4b75      	ldr	r3, [pc, #468]	; (800e688 <tcp_input+0x4a8>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	f000 818e 	beq.w	800e7d8 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e4bc:	1a9b      	subs	r3, r3, r2
 800e4be:	f100 8167 	bmi.w	800e790 <tcp_input+0x5b0>
 800e4c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800e4c4:	1a9b      	subs	r3, r3, r2
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	f300 8162 	bgt.w	800e790 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800e4cc:	8b63      	ldrh	r3, [r4, #26]
 800e4ce:	f043 0302 	orr.w	r3, r3, #2
 800e4d2:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 800e4d4:	e15c      	b.n	800e790 <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e4d6:	4b6d      	ldr	r3, [pc, #436]	; (800e68c <tcp_input+0x4ac>)
 800e4d8:	f240 120d 	movw	r2, #269	; 0x10d
 800e4dc:	496c      	ldr	r1, [pc, #432]	; (800e690 <tcp_input+0x4b0>)
 800e4de:	486d      	ldr	r0, [pc, #436]	; (800e694 <tcp_input+0x4b4>)
 800e4e0:	f004 f898 	bl	8012614 <iprintf>
      if (prev != NULL) {
 800e4e4:	2e00      	cmp	r6, #0
 800e4e6:	d1a9      	bne.n	800e43c <tcp_input+0x25c>
 800e4e8:	e7ae      	b.n	800e448 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e4ea:	4b68      	ldr	r3, [pc, #416]	; (800e68c <tcp_input+0x4ac>)
 800e4ec:	f240 1215 	movw	r2, #277	; 0x115
 800e4f0:	4969      	ldr	r1, [pc, #420]	; (800e698 <tcp_input+0x4b8>)
 800e4f2:	4868      	ldr	r0, [pc, #416]	; (800e694 <tcp_input+0x4b4>)
 800e4f4:	f004 f88e 	bl	8012614 <iprintf>
 800e4f8:	e7a9      	b.n	800e44e <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e4fa:	4643      	mov	r3, r8
 800e4fc:	f240 121f 	movw	r2, #287	; 0x11f
 800e500:	4639      	mov	r1, r7
 800e502:	4630      	mov	r0, r6
 800e504:	f004 f886 	bl	8012614 <iprintf>
 800e508:	e00b      	b.n	800e522 <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 800e50a:	4b58      	ldr	r3, [pc, #352]	; (800e66c <tcp_input+0x48c>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	8819      	ldrh	r1, [r3, #0]
 800e510:	8b22      	ldrh	r2, [r4, #24]
 800e512:	428a      	cmp	r2, r1
 800e514:	d011      	beq.n	800e53a <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e516:	68e4      	ldr	r4, [r4, #12]
 800e518:	2c00      	cmp	r4, #0
 800e51a:	d051      	beq.n	800e5c0 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e51c:	7d23      	ldrb	r3, [r4, #20]
 800e51e:	2b0a      	cmp	r3, #10
 800e520:	d1eb      	bne.n	800e4fa <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e522:	7a22      	ldrb	r2, [r4, #8]
 800e524:	2a00      	cmp	r2, #0
 800e526:	d0f0      	beq.n	800e50a <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e528:	4b4d      	ldr	r3, [pc, #308]	; (800e660 <tcp_input+0x480>)
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e530:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e532:	b2db      	uxtb	r3, r3
 800e534:	429a      	cmp	r2, r3
 800e536:	d0e8      	beq.n	800e50a <tcp_input+0x32a>
 800e538:	e7ed      	b.n	800e516 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800e53a:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800e53c:	8ae3      	ldrh	r3, [r4, #22]
 800e53e:	4283      	cmp	r3, r0
 800e540:	d1e9      	bne.n	800e516 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800e542:	6862      	ldr	r2, [r4, #4]
 800e544:	4b46      	ldr	r3, [pc, #280]	; (800e660 <tcp_input+0x480>)
 800e546:	691b      	ldr	r3, [r3, #16]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d1e4      	bne.n	800e516 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e54c:	6822      	ldr	r2, [r4, #0]
 800e54e:	4b44      	ldr	r3, [pc, #272]	; (800e660 <tcp_input+0x480>)
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	429a      	cmp	r2, r3
 800e554:	d1df      	bne.n	800e516 <tcp_input+0x336>
  if (flags & TCP_RST) {
 800e556:	4b49      	ldr	r3, [pc, #292]	; (800e67c <tcp_input+0x49c>)
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	f013 0f04 	tst.w	r3, #4
 800e55e:	d10e      	bne.n	800e57e <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 800e560:	f013 0f02 	tst.w	r3, #2
 800e564:	d01d      	beq.n	800e5a2 <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e566:	4b48      	ldr	r3, [pc, #288]	; (800e688 <tcp_input+0x4a8>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	d403      	bmi.n	800e578 <tcp_input+0x398>
 800e570:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800e572:	1b9b      	subs	r3, r3, r6
 800e574:	2b00      	cmp	r3, #0
 800e576:	dd06      	ble.n	800e586 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 800e578:	4b41      	ldr	r3, [pc, #260]	; (800e680 <tcp_input+0x4a0>)
 800e57a:	881b      	ldrh	r3, [r3, #0]
 800e57c:	b9c3      	cbnz	r3, 800e5b0 <tcp_input+0x3d0>
        pbuf_free(p);
 800e57e:	4628      	mov	r0, r5
 800e580:	f7fd fbd6 	bl	800bd30 <pbuf_free>
        return;
 800e584:	e63a      	b.n	800e1fc <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e586:	4b45      	ldr	r3, [pc, #276]	; (800e69c <tcp_input+0x4bc>)
 800e588:	4e3d      	ldr	r6, [pc, #244]	; (800e680 <tcp_input+0x4a0>)
 800e58a:	8836      	ldrh	r6, [r6, #0]
 800e58c:	9102      	str	r1, [sp, #8]
 800e58e:	9001      	str	r0, [sp, #4]
 800e590:	1f19      	subs	r1, r3, #4
 800e592:	9100      	str	r1, [sp, #0]
 800e594:	4432      	add	r2, r6
 800e596:	4942      	ldr	r1, [pc, #264]	; (800e6a0 <tcp_input+0x4c0>)
 800e598:	6809      	ldr	r1, [r1, #0]
 800e59a:	4620      	mov	r0, r4
 800e59c:	f001 fbba 	bl	800fd14 <tcp_rst>
      return;
 800e5a0:	e7ed      	b.n	800e57e <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 800e5a2:	f013 0f01 	tst.w	r3, #1
 800e5a6:	d0e7      	beq.n	800e578 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 800e5a8:	4b3e      	ldr	r3, [pc, #248]	; (800e6a4 <tcp_input+0x4c4>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6223      	str	r3, [r4, #32]
 800e5ae:	e7e3      	b.n	800e578 <tcp_input+0x398>
    tcp_ack_now(pcb);
 800e5b0:	8b63      	ldrh	r3, [r4, #26]
 800e5b2:	f043 0302 	orr.w	r3, r3, #2
 800e5b6:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f001 fc2b 	bl	800fe14 <tcp_output>
 800e5be:	e7de      	b.n	800e57e <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e5c0:	4b39      	ldr	r3, [pc, #228]	; (800e6a8 <tcp_input+0x4c8>)
 800e5c2:	f8d3 c000 	ldr.w	ip, [r3]
 800e5c6:	f1bc 0f00 	cmp.w	ip, #0
 800e5ca:	f000 8402 	beq.w	800edd2 <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5ce:	4b24      	ldr	r3, [pc, #144]	; (800e660 <tcp_input+0x480>)
 800e5d0:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 800e5d2:	4a26      	ldr	r2, [pc, #152]	; (800e66c <tcp_input+0x48c>)
 800e5d4:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e5d6:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e5d8:	4664      	mov	r4, ip
    prev = NULL;
 800e5da:	2100      	movs	r1, #0
 800e5dc:	e009      	b.n	800e5f2 <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 800e5de:	8ae2      	ldrh	r2, [r4, #22]
 800e5e0:	8843      	ldrh	r3, [r0, #2]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d00f      	beq.n	800e606 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e5e6:	68e3      	ldr	r3, [r4, #12]
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 83f1 	beq.w	800edd2 <tcp_input+0xbf2>
 800e5f0:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e5f2:	7a22      	ldrb	r2, [r4, #8]
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	d0f2      	beq.n	800e5de <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5f8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800e5fc:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	429a      	cmp	r2, r3
 800e602:	d0ec      	beq.n	800e5de <tcp_input+0x3fe>
 800e604:	e7ef      	b.n	800e5e6 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	42bb      	cmp	r3, r7
 800e60a:	d001      	beq.n	800e610 <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1ea      	bne.n	800e5e6 <tcp_input+0x406>
      if (prev != NULL) {
 800e610:	b129      	cbz	r1, 800e61e <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e612:	68e3      	ldr	r3, [r4, #12]
 800e614:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e616:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e61a:	4b23      	ldr	r3, [pc, #140]	; (800e6a8 <tcp_input+0x4c8>)
 800e61c:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800e61e:	4b17      	ldr	r3, [pc, #92]	; (800e67c <tcp_input+0x49c>)
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f013 0f04 	tst.w	r3, #4
 800e626:	d105      	bne.n	800e634 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 800e628:	f013 0f10 	tst.w	r3, #16
 800e62c:	d106      	bne.n	800e63c <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 800e62e:	f013 0f02 	tst.w	r3, #2
 800e632:	d13b      	bne.n	800e6ac <tcp_input+0x4cc>
      pbuf_free(p);
 800e634:	4628      	mov	r0, r5
 800e636:	f7fd fb7b 	bl	800bd30 <pbuf_free>
      return;
 800e63a:	e5df      	b.n	800e1fc <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e63c:	4b17      	ldr	r3, [pc, #92]	; (800e69c <tcp_input+0x4bc>)
 800e63e:	4a10      	ldr	r2, [pc, #64]	; (800e680 <tcp_input+0x4a0>)
 800e640:	8811      	ldrh	r1, [r2, #0]
 800e642:	4a11      	ldr	r2, [pc, #68]	; (800e688 <tcp_input+0x4a8>)
 800e644:	6812      	ldr	r2, [r2, #0]
 800e646:	8806      	ldrh	r6, [r0, #0]
 800e648:	9602      	str	r6, [sp, #8]
 800e64a:	8840      	ldrh	r0, [r0, #2]
 800e64c:	9001      	str	r0, [sp, #4]
 800e64e:	1f18      	subs	r0, r3, #4
 800e650:	9000      	str	r0, [sp, #0]
 800e652:	440a      	add	r2, r1
 800e654:	4912      	ldr	r1, [pc, #72]	; (800e6a0 <tcp_input+0x4c0>)
 800e656:	6809      	ldr	r1, [r1, #0]
 800e658:	4620      	mov	r0, r4
 800e65a:	f001 fb5b 	bl	800fd14 <tcp_rst>
 800e65e:	e7e9      	b.n	800e634 <tcp_input+0x454>
 800e660:	20016178 	.word	0x20016178
 800e664:	2001b60c 	.word	0x2001b60c
 800e668:	20012bc4 	.word	0x20012bc4
 800e66c:	20012be8 	.word	0x20012be8
 800e670:	20012bd8 	.word	0x20012bd8
 800e674:	20012bdc 	.word	0x20012bdc
 800e678:	20012bd4 	.word	0x20012bd4
 800e67c:	20012bc0 	.word	0x20012bc0
 800e680:	20012bf6 	.word	0x20012bf6
 800e684:	2001b620 	.word	0x2001b620
 800e688:	20012be0 	.word	0x20012be0
 800e68c:	08014ff8 	.word	0x08014ff8
 800e690:	080152e4 	.word	0x080152e4
 800e694:	0801397c 	.word	0x0801397c
 800e698:	08015310 	.word	0x08015310
 800e69c:	2001618c 	.word	0x2001618c
 800e6a0:	20012bbc 	.word	0x20012bbc
 800e6a4:	2001b610 	.word	0x2001b610
 800e6a8:	2001b614 	.word	0x2001b614
    npcb = tcp_alloc(pcb->prio);
 800e6ac:	7d60      	ldrb	r0, [r4, #21]
 800e6ae:	f7fe fab1 	bl	800cc14 <tcp_alloc>
    if (npcb == NULL) {
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d04c      	beq.n	800e752 <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6b8:	4ba9      	ldr	r3, [pc, #676]	; (800e960 <tcp_input+0x780>)
 800e6ba:	695a      	ldr	r2, [r3, #20]
 800e6bc:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800e6c2:	8ae3      	ldrh	r3, [r4, #22]
 800e6c4:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800e6c6:	4fa7      	ldr	r7, [pc, #668]	; (800e964 <tcp_input+0x784>)
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800e6d2:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800e9a0 <tcp_input+0x7c0>
 800e6d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e6de:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e6e0:	f7fe f896 	bl	800c810 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800e6e4:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e6e6:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 800e6e8:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e6ea:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e6ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 800e6f8:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e6fa:	7a63      	ldrb	r3, [r4, #9]
 800e6fc:	f003 030c 	and.w	r3, r3, #12
 800e700:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e702:	7a23      	ldrb	r3, [r4, #8]
 800e704:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 800e706:	4b98      	ldr	r3, [pc, #608]	; (800e968 <tcp_input+0x788>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	60f2      	str	r2, [r6, #12]
 800e70c:	601e      	str	r6, [r3, #0]
 800e70e:	f001 fe8b 	bl	8010428 <tcp_timer_needed>
 800e712:	4b96      	ldr	r3, [pc, #600]	; (800e96c <tcp_input+0x78c>)
 800e714:	2201      	movs	r2, #1
 800e716:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e718:	4630      	mov	r0, r6
 800e71a:	f7fe ff97 	bl	800d64c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	89db      	ldrh	r3, [r3, #14]
 800e722:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e726:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e72a:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 800e72c:	1d34      	adds	r4, r6, #4
 800e72e:	4620      	mov	r0, r4
 800e730:	f002 fe3e 	bl	80113b0 <ip4_route>
 800e734:	4601      	mov	r1, r0
 800e736:	4622      	mov	r2, r4
 800e738:	4638      	mov	r0, r7
 800e73a:	f7fe f885 	bl	800c848 <tcp_eff_send_mss_netif>
 800e73e:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e740:	2112      	movs	r1, #18
 800e742:	4630      	mov	r0, r6
 800e744:	f001 f938 	bl	800f9b8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800e748:	b968      	cbnz	r0, 800e766 <tcp_input+0x586>
    tcp_output(npcb);
 800e74a:	4630      	mov	r0, r6
 800e74c:	f001 fb62 	bl	800fe14 <tcp_output>
 800e750:	e770      	b.n	800e634 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e752:	69a3      	ldr	r3, [r4, #24]
 800e754:	2b00      	cmp	r3, #0
 800e756:	f43f af6d 	beq.w	800e634 <tcp_input+0x454>
 800e75a:	f04f 32ff 	mov.w	r2, #4294967295
 800e75e:	2100      	movs	r1, #0
 800e760:	6920      	ldr	r0, [r4, #16]
 800e762:	4798      	blx	r3
 800e764:	e766      	b.n	800e634 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 800e766:	2100      	movs	r1, #0
 800e768:	4630      	mov	r0, r6
 800e76a:	f7fe f931 	bl	800c9d0 <tcp_abandon>
      return;
 800e76e:	e761      	b.n	800e634 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 800e770:	7b6b      	ldrb	r3, [r5, #13]
 800e772:	f043 0301 	orr.w	r3, r3, #1
 800e776:	736b      	strb	r3, [r5, #13]
 800e778:	e67e      	b.n	800e478 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 800e77a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e77c:	b9e3      	cbnz	r3, 800e7b8 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 800e77e:	4620      	mov	r0, r4
 800e780:	f001 fb0e 	bl	800fda0 <tcp_send_empty_ack>
 800e784:	e018      	b.n	800e7b8 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 800e786:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e788:	4b79      	ldr	r3, [pc, #484]	; (800e970 <tcp_input+0x790>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d02b      	beq.n	800e7e8 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 800e790:	4b78      	ldr	r3, [pc, #480]	; (800e974 <tcp_input+0x794>)
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	f013 0f08 	tst.w	r3, #8
 800e798:	f000 8295 	beq.w	800ecc6 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e79c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e7a0:	b11b      	cbz	r3, 800e7aa <tcp_input+0x5ca>
 800e7a2:	f06f 010d 	mvn.w	r1, #13
 800e7a6:	6920      	ldr	r0, [r4, #16]
 800e7a8:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	486e      	ldr	r0, [pc, #440]	; (800e968 <tcp_input+0x788>)
 800e7ae:	f7fe f8a7 	bl	800c900 <tcp_pcb_remove>
        tcp_free(pcb);
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f7fd fe22 	bl	800c3fc <tcp_free>
    tcp_input_pcb = NULL;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	4a6f      	ldr	r2, [pc, #444]	; (800e978 <tcp_input+0x798>)
 800e7bc:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800e7be:	4a6f      	ldr	r2, [pc, #444]	; (800e97c <tcp_input+0x79c>)
 800e7c0:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800e7c2:	4b6f      	ldr	r3, [pc, #444]	; (800e980 <tcp_input+0x7a0>)
 800e7c4:	6858      	ldr	r0, [r3, #4]
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f43f ad18 	beq.w	800e1fc <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800e7cc:	f7fd fab0 	bl	800bd30 <pbuf_free>
      inseg.p = NULL;
 800e7d0:	4b6b      	ldr	r3, [pc, #428]	; (800e980 <tcp_input+0x7a0>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	605a      	str	r2, [r3, #4]
 800e7d6:	e511      	b.n	800e1fc <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e7d8:	b931      	cbnz	r1, 800e7e8 <tcp_input+0x608>
 800e7da:	4b6a      	ldr	r3, [pc, #424]	; (800e984 <tcp_input+0x7a4>)
 800e7dc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e7e0:	4969      	ldr	r1, [pc, #420]	; (800e988 <tcp_input+0x7a8>)
 800e7e2:	486a      	ldr	r0, [pc, #424]	; (800e98c <tcp_input+0x7ac>)
 800e7e4:	f003 ff16 	bl	8012614 <iprintf>
      recv_flags |= TF_RESET;
 800e7e8:	4a62      	ldr	r2, [pc, #392]	; (800e974 <tcp_input+0x794>)
 800e7ea:	7813      	ldrb	r3, [r2, #0]
 800e7ec:	f043 0308 	orr.w	r3, r3, #8
 800e7f0:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e7f2:	8b63      	ldrh	r3, [r4, #26]
 800e7f4:	f023 0301 	bic.w	r3, r3, #1
 800e7f8:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800e7fa:	e7c9      	b.n	800e790 <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e7fc:	f013 0f02 	tst.w	r3, #2
 800e800:	d004      	beq.n	800e80c <tcp_input+0x62c>
 800e802:	7d23      	ldrb	r3, [r4, #20]
 800e804:	3b02      	subs	r3, #2
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d81c      	bhi.n	800e846 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e80c:	8b63      	ldrh	r3, [r4, #26]
 800e80e:	f013 0f10 	tst.w	r3, #16
 800e812:	d102      	bne.n	800e81a <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 800e814:	4b5e      	ldr	r3, [pc, #376]	; (800e990 <tcp_input+0x7b0>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800e81a:	2300      	movs	r3, #0
 800e81c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e820:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 800e824:	4620      	mov	r0, r4
 800e826:	f7fe ff11 	bl	800d64c <tcp_parseopt>
  switch (pcb->state) {
 800e82a:	7d23      	ldrb	r3, [r4, #20]
 800e82c:	3b02      	subs	r3, #2
 800e82e:	2b07      	cmp	r3, #7
 800e830:	d8ae      	bhi.n	800e790 <tcp_input+0x5b0>
 800e832:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e836:	000d      	.short	0x000d
 800e838:	014f00d0 	.word	0x014f00d0
 800e83c:	01b1015f 	.word	0x01b1015f
 800e840:	01dd014f 	.word	0x01dd014f
 800e844:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 800e846:	8b63      	ldrh	r3, [r4, #26]
 800e848:	f043 0302 	orr.w	r3, r3, #2
 800e84c:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800e84e:	e79f      	b.n	800e790 <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e850:	4b50      	ldr	r3, [pc, #320]	; (800e994 <tcp_input+0x7b4>)
 800e852:	781a      	ldrb	r2, [r3, #0]
 800e854:	f002 0312 	and.w	r3, r2, #18
 800e858:	2b12      	cmp	r3, #18
 800e85a:	d020      	beq.n	800e89e <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 800e85c:	f012 0f10 	tst.w	r2, #16
 800e860:	d096      	beq.n	800e790 <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e862:	4b40      	ldr	r3, [pc, #256]	; (800e964 <tcp_input+0x784>)
 800e864:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e866:	4b4c      	ldr	r3, [pc, #304]	; (800e998 <tcp_input+0x7b8>)
 800e868:	4a4c      	ldr	r2, [pc, #304]	; (800e99c <tcp_input+0x7bc>)
 800e86a:	8810      	ldrh	r0, [r2, #0]
 800e86c:	4a4c      	ldr	r2, [pc, #304]	; (800e9a0 <tcp_input+0x7c0>)
 800e86e:	6812      	ldr	r2, [r2, #0]
 800e870:	880d      	ldrh	r5, [r1, #0]
 800e872:	9502      	str	r5, [sp, #8]
 800e874:	8849      	ldrh	r1, [r1, #2]
 800e876:	9101      	str	r1, [sp, #4]
 800e878:	1f19      	subs	r1, r3, #4
 800e87a:	9100      	str	r1, [sp, #0]
 800e87c:	4402      	add	r2, r0
 800e87e:	493c      	ldr	r1, [pc, #240]	; (800e970 <tcp_input+0x790>)
 800e880:	6809      	ldr	r1, [r1, #0]
 800e882:	4620      	mov	r0, r4
 800e884:	f001 fa46 	bl	800fd14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e888:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e88c:	2b05      	cmp	r3, #5
 800e88e:	f63f af7f 	bhi.w	800e790 <tcp_input+0x5b0>
          pcb->rtime = 0;
 800e892:	2300      	movs	r3, #0
 800e894:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e896:	4620      	mov	r0, r4
 800e898:	f001 fca4 	bl	80101e4 <tcp_rexmit_rto>
 800e89c:	e778      	b.n	800e790 <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 800e89e:	4b34      	ldr	r3, [pc, #208]	; (800e970 <tcp_input+0x790>)
 800e8a0:	6819      	ldr	r1, [r3, #0]
 800e8a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	428b      	cmp	r3, r1
 800e8a8:	d1d8      	bne.n	800e85c <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 800e8aa:	4b3d      	ldr	r3, [pc, #244]	; (800e9a0 <tcp_input+0x7c0>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	1c5a      	adds	r2, r3, #1
 800e8b0:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e8b2:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 800e8b4:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e8b6:	4a2b      	ldr	r2, [pc, #172]	; (800e964 <tcp_input+0x784>)
 800e8b8:	6812      	ldr	r2, [r2, #0]
 800e8ba:	89d2      	ldrh	r2, [r2, #14]
 800e8bc:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e8c0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e8c8:	2304      	movs	r3, #4
 800e8ca:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e8cc:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800e8ce:	18e5      	adds	r5, r4, r3
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	f002 fd6d 	bl	80113b0 <ip4_route>
 800e8d6:	4601      	mov	r1, r0
 800e8d8:	462a      	mov	r2, r5
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7fd ffb4 	bl	800c848 <tcp_eff_send_mss_netif>
 800e8e0:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8e2:	0041      	lsls	r1, r0, #1
 800e8e4:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8e8:	428a      	cmp	r2, r1
 800e8ea:	bf38      	it	cc
 800e8ec:	460a      	movcc	r2, r1
 800e8ee:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 800e8f2:	d92b      	bls.n	800e94c <tcp_input+0x76c>
 800e8f4:	0083      	lsls	r3, r0, #2
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e8fc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800e900:	2b00      	cmp	r3, #0
 800e902:	d04f      	beq.n	800e9a4 <tcp_input+0x7c4>
        --pcb->snd_queuelen;
 800e904:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800e908:	3b01      	subs	r3, #1
 800e90a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800e90e:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800e910:	2d00      	cmp	r5, #0
 800e912:	d04f      	beq.n	800e9b4 <tcp_input+0x7d4>
          pcb->unacked = rseg->next;
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 800e918:	4628      	mov	r0, r5
 800e91a:	f7fd fec1 	bl	800c6a0 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800e91e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e920:	2b00      	cmp	r3, #0
 800e922:	d054      	beq.n	800e9ce <tcp_input+0x7ee>
          pcb->rtime = 0;
 800e924:	2300      	movs	r3, #0
 800e926:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800e928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e92c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800e930:	b13b      	cbz	r3, 800e942 <tcp_input+0x762>
 800e932:	2200      	movs	r2, #0
 800e934:	4621      	mov	r1, r4
 800e936:	6920      	ldr	r0, [r4, #16]
 800e938:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800e93a:	f110 0f0d 	cmn.w	r0, #13
 800e93e:	f43f af3b 	beq.w	800e7b8 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 800e942:	8b63      	ldrh	r3, [r4, #26]
 800e944:	f043 0302 	orr.w	r3, r3, #2
 800e948:	8363      	strh	r3, [r4, #26]
 800e94a:	e721      	b.n	800e790 <tcp_input+0x5b0>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e94c:	f241 121c 	movw	r2, #4380	; 0x111c
 800e950:	4291      	cmp	r1, r2
 800e952:	d902      	bls.n	800e95a <tcp_input+0x77a>
 800e954:	0043      	lsls	r3, r0, #1
 800e956:	b29b      	uxth	r3, r3
 800e958:	e7ce      	b.n	800e8f8 <tcp_input+0x718>
 800e95a:	f241 131c 	movw	r3, #4380	; 0x111c
 800e95e:	e7cb      	b.n	800e8f8 <tcp_input+0x718>
 800e960:	20016178 	.word	0x20016178
 800e964:	20012be8 	.word	0x20012be8
 800e968:	2001b60c 	.word	0x2001b60c
 800e96c:	2001b608 	.word	0x2001b608
 800e970:	20012bbc 	.word	0x20012bbc
 800e974:	20012bdc 	.word	0x20012bdc
 800e978:	2001b620 	.word	0x2001b620
 800e97c:	20012bd8 	.word	0x20012bd8
 800e980:	20012bc4 	.word	0x20012bc4
 800e984:	08014ff8 	.word	0x08014ff8
 800e988:	0801536c 	.word	0x0801536c
 800e98c:	0801397c 	.word	0x0801397c
 800e990:	2001b610 	.word	0x2001b610
 800e994:	20012bc0 	.word	0x20012bc0
 800e998:	2001618c 	.word	0x2001618c
 800e99c:	20012bf6 	.word	0x20012bf6
 800e9a0:	20012be0 	.word	0x20012be0
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e9a4:	4ba4      	ldr	r3, [pc, #656]	; (800ec38 <tcp_input+0xa58>)
 800e9a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e9aa:	49a4      	ldr	r1, [pc, #656]	; (800ec3c <tcp_input+0xa5c>)
 800e9ac:	48a4      	ldr	r0, [pc, #656]	; (800ec40 <tcp_input+0xa60>)
 800e9ae:	f003 fe31 	bl	8012614 <iprintf>
 800e9b2:	e7a7      	b.n	800e904 <tcp_input+0x724>
          rseg = pcb->unsent;
 800e9b4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e9b6:	b115      	cbz	r5, 800e9be <tcp_input+0x7de>
          pcb->unsent = rseg->next;
 800e9b8:	682b      	ldr	r3, [r5, #0]
 800e9ba:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e9bc:	e7ac      	b.n	800e918 <tcp_input+0x738>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e9be:	4b9e      	ldr	r3, [pc, #632]	; (800ec38 <tcp_input+0xa58>)
 800e9c0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e9c4:	499f      	ldr	r1, [pc, #636]	; (800ec44 <tcp_input+0xa64>)
 800e9c6:	489e      	ldr	r0, [pc, #632]	; (800ec40 <tcp_input+0xa60>)
 800e9c8:	f003 fe24 	bl	8012614 <iprintf>
 800e9cc:	e7f4      	b.n	800e9b8 <tcp_input+0x7d8>
          pcb->rtime = -1;
 800e9ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9d2:	8623      	strh	r3, [r4, #48]	; 0x30
 800e9d4:	e7aa      	b.n	800e92c <tcp_input+0x74c>
      if (flags & TCP_ACK) {
 800e9d6:	4b9c      	ldr	r3, [pc, #624]	; (800ec48 <tcp_input+0xa68>)
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	f013 0f10 	tst.w	r3, #16
 800e9de:	d06a      	beq.n	800eab6 <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9e0:	4b9a      	ldr	r3, [pc, #616]	; (800ec4c <tcp_input+0xa6c>)
 800e9e2:	6819      	ldr	r1, [r3, #0]
 800e9e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9e6:	43db      	mvns	r3, r3
 800e9e8:	42cb      	cmn	r3, r1
 800e9ea:	d403      	bmi.n	800e9f4 <tcp_input+0x814>
 800e9ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e9ee:	1acb      	subs	r3, r1, r3
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	dd11      	ble.n	800ea18 <tcp_input+0x838>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9f4:	4b96      	ldr	r3, [pc, #600]	; (800ec50 <tcp_input+0xa70>)
 800e9f6:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9f8:	4b96      	ldr	r3, [pc, #600]	; (800ec54 <tcp_input+0xa74>)
 800e9fa:	4a97      	ldr	r2, [pc, #604]	; (800ec58 <tcp_input+0xa78>)
 800e9fc:	8815      	ldrh	r5, [r2, #0]
 800e9fe:	4a97      	ldr	r2, [pc, #604]	; (800ec5c <tcp_input+0xa7c>)
 800ea00:	6812      	ldr	r2, [r2, #0]
 800ea02:	8806      	ldrh	r6, [r0, #0]
 800ea04:	9602      	str	r6, [sp, #8]
 800ea06:	8840      	ldrh	r0, [r0, #2]
 800ea08:	9001      	str	r0, [sp, #4]
 800ea0a:	1f18      	subs	r0, r3, #4
 800ea0c:	9000      	str	r0, [sp, #0]
 800ea0e:	442a      	add	r2, r5
 800ea10:	4620      	mov	r0, r4
 800ea12:	f001 f97f 	bl	800fd14 <tcp_rst>
 800ea16:	e6bb      	b.n	800e790 <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 800ea18:	2304      	movs	r3, #4
 800ea1a:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800ea1c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d03b      	beq.n	800ea9a <tcp_input+0x8ba>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	b34b      	cbz	r3, 800ea7a <tcp_input+0x89a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ea26:	2200      	movs	r2, #0
 800ea28:	4621      	mov	r1, r4
 800ea2a:	6920      	ldr	r0, [r4, #16]
 800ea2c:	4798      	blx	r3
          if (err != ERR_OK) {
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d12f      	bne.n	800ea92 <tcp_input+0x8b2>
          tcp_receive(pcb);
 800ea32:	4620      	mov	r0, r4
 800ea34:	f7fe ff46 	bl	800d8c4 <tcp_receive>
          if (recv_acked != 0) {
 800ea38:	4b89      	ldr	r3, [pc, #548]	; (800ec60 <tcp_input+0xa80>)
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	b113      	cbz	r3, 800ea44 <tcp_input+0x864>
            recv_acked--;
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	4a87      	ldr	r2, [pc, #540]	; (800ec60 <tcp_input+0xa80>)
 800ea42:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea44:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ea46:	0059      	lsls	r1, r3, #1
 800ea48:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea4c:	428a      	cmp	r2, r1
 800ea4e:	bf38      	it	cc
 800ea50:	460a      	movcc	r2, r1
 800ea52:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800ea56:	d924      	bls.n	800eaa2 <tcp_input+0x8c2>
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800ea60:	4b80      	ldr	r3, [pc, #512]	; (800ec64 <tcp_input+0xa84>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f013 0f20 	tst.w	r3, #32
 800ea68:	f43f ae92 	beq.w	800e790 <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 800ea6c:	8b63      	ldrh	r3, [r4, #26]
 800ea6e:	f043 0302 	orr.w	r3, r3, #2
 800ea72:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 800ea74:	2307      	movs	r3, #7
 800ea76:	7523      	strb	r3, [r4, #20]
 800ea78:	e68a      	b.n	800e790 <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ea7a:	4b6f      	ldr	r3, [pc, #444]	; (800ec38 <tcp_input+0xa58>)
 800ea7c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ea80:	4979      	ldr	r1, [pc, #484]	; (800ec68 <tcp_input+0xa88>)
 800ea82:	486f      	ldr	r0, [pc, #444]	; (800ec40 <tcp_input+0xa60>)
 800ea84:	f003 fdc6 	bl	8012614 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ea88:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1ca      	bne.n	800ea26 <tcp_input+0x846>
 800ea90:	e003      	b.n	800ea9a <tcp_input+0x8ba>
            if (err != ERR_ABRT) {
 800ea92:	f110 0f0d 	cmn.w	r0, #13
 800ea96:	f43f ae8f 	beq.w	800e7b8 <tcp_input+0x5d8>
              tcp_abort(pcb);
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f7fe f81e 	bl	800cadc <tcp_abort>
 800eaa0:	e68a      	b.n	800e7b8 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eaa2:	f241 121c 	movw	r2, #4380	; 0x111c
 800eaa6:	4291      	cmp	r1, r2
 800eaa8:	d902      	bls.n	800eab0 <tcp_input+0x8d0>
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	e7d5      	b.n	800ea5c <tcp_input+0x87c>
 800eab0:	f241 131c 	movw	r3, #4380	; 0x111c
 800eab4:	e7d2      	b.n	800ea5c <tcp_input+0x87c>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eab6:	f013 0f02 	tst.w	r3, #2
 800eaba:	f43f ae69 	beq.w	800e790 <tcp_input+0x5b0>
 800eabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eac0:	3b01      	subs	r3, #1
 800eac2:	4a66      	ldr	r2, [pc, #408]	; (800ec5c <tcp_input+0xa7c>)
 800eac4:	6812      	ldr	r2, [r2, #0]
 800eac6:	4293      	cmp	r3, r2
 800eac8:	f47f ae62 	bne.w	800e790 <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 800eacc:	4620      	mov	r0, r4
 800eace:	f001 f89d 	bl	800fc0c <tcp_rexmit>
 800ead2:	e65d      	b.n	800e790 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800ead4:	4620      	mov	r0, r4
 800ead6:	f7fe fef5 	bl	800d8c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eada:	4b62      	ldr	r3, [pc, #392]	; (800ec64 <tcp_input+0xa84>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	f013 0f20 	tst.w	r3, #32
 800eae2:	f43f ae55 	beq.w	800e790 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800eae6:	8b63      	ldrh	r3, [r4, #26]
 800eae8:	f043 0302 	orr.w	r3, r3, #2
 800eaec:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800eaee:	2307      	movs	r3, #7
 800eaf0:	7523      	strb	r3, [r4, #20]
 800eaf2:	e64d      	b.n	800e790 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f7fe fee5 	bl	800d8c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eafa:	4b5a      	ldr	r3, [pc, #360]	; (800ec64 <tcp_input+0xa84>)
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	f013 0f20 	tst.w	r3, #32
 800eb02:	d036      	beq.n	800eb72 <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb04:	4b50      	ldr	r3, [pc, #320]	; (800ec48 <tcp_input+0xa68>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f013 0f10 	tst.w	r3, #16
 800eb0c:	d004      	beq.n	800eb18 <tcp_input+0x938>
 800eb0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb10:	4b4e      	ldr	r3, [pc, #312]	; (800ec4c <tcp_input+0xa6c>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d006      	beq.n	800eb26 <tcp_input+0x946>
          tcp_ack_now(pcb);
 800eb18:	8b63      	ldrh	r3, [r4, #26]
 800eb1a:	f043 0302 	orr.w	r3, r3, #2
 800eb1e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800eb20:	2308      	movs	r3, #8
 800eb22:	7523      	strb	r3, [r4, #20]
 800eb24:	e634      	b.n	800e790 <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1f5      	bne.n	800eb18 <tcp_input+0x938>
          tcp_ack_now(pcb);
 800eb2c:	8b63      	ldrh	r3, [r4, #26]
 800eb2e:	f043 0302 	orr.w	r3, r3, #2
 800eb32:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800eb34:	4620      	mov	r0, r4
 800eb36:	f7fd feb1 	bl	800c89c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eb3a:	4b4c      	ldr	r3, [pc, #304]	; (800ec6c <tcp_input+0xa8c>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	42a3      	cmp	r3, r4
 800eb40:	d005      	beq.n	800eb4e <tcp_input+0x96e>
 800eb42:	b153      	cbz	r3, 800eb5a <tcp_input+0x97a>
 800eb44:	68da      	ldr	r2, [r3, #12]
 800eb46:	42a2      	cmp	r2, r4
 800eb48:	d005      	beq.n	800eb56 <tcp_input+0x976>
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	e7f9      	b.n	800eb42 <tcp_input+0x962>
 800eb4e:	68e2      	ldr	r2, [r4, #12]
 800eb50:	4b46      	ldr	r3, [pc, #280]	; (800ec6c <tcp_input+0xa8c>)
 800eb52:	601a      	str	r2, [r3, #0]
 800eb54:	e001      	b.n	800eb5a <tcp_input+0x97a>
 800eb56:	68e2      	ldr	r2, [r4, #12]
 800eb58:	60da      	str	r2, [r3, #12]
 800eb5a:	4b45      	ldr	r3, [pc, #276]	; (800ec70 <tcp_input+0xa90>)
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eb60:	230a      	movs	r3, #10
 800eb62:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eb64:	4b43      	ldr	r3, [pc, #268]	; (800ec74 <tcp_input+0xa94>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	60e2      	str	r2, [r4, #12]
 800eb6a:	601c      	str	r4, [r3, #0]
 800eb6c:	f001 fc5c 	bl	8010428 <tcp_timer_needed>
 800eb70:	e60e      	b.n	800e790 <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb72:	4b35      	ldr	r3, [pc, #212]	; (800ec48 <tcp_input+0xa68>)
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	f013 0f10 	tst.w	r3, #16
 800eb7a:	f43f ae09 	beq.w	800e790 <tcp_input+0x5b0>
 800eb7e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb80:	4b32      	ldr	r3, [pc, #200]	; (800ec4c <tcp_input+0xa6c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	f47f ae03 	bne.w	800e790 <tcp_input+0x5b0>
 800eb8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f47f adff 	bne.w	800e790 <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 800eb92:	2306      	movs	r3, #6
 800eb94:	7523      	strb	r3, [r4, #20]
 800eb96:	e5fb      	b.n	800e790 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f7fe fe93 	bl	800d8c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb9e:	4b31      	ldr	r3, [pc, #196]	; (800ec64 <tcp_input+0xa84>)
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	f013 0f20 	tst.w	r3, #32
 800eba6:	f43f adf3 	beq.w	800e790 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800ebaa:	8b63      	ldrh	r3, [r4, #26]
 800ebac:	f043 0302 	orr.w	r3, r3, #2
 800ebb0:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f7fd fe72 	bl	800c89c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ebb8:	4b2c      	ldr	r3, [pc, #176]	; (800ec6c <tcp_input+0xa8c>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	42a3      	cmp	r3, r4
 800ebbe:	d005      	beq.n	800ebcc <tcp_input+0x9ec>
 800ebc0:	b153      	cbz	r3, 800ebd8 <tcp_input+0x9f8>
 800ebc2:	68da      	ldr	r2, [r3, #12]
 800ebc4:	42a2      	cmp	r2, r4
 800ebc6:	d005      	beq.n	800ebd4 <tcp_input+0x9f4>
 800ebc8:	4613      	mov	r3, r2
 800ebca:	e7f9      	b.n	800ebc0 <tcp_input+0x9e0>
 800ebcc:	68e2      	ldr	r2, [r4, #12]
 800ebce:	4b27      	ldr	r3, [pc, #156]	; (800ec6c <tcp_input+0xa8c>)
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	e001      	b.n	800ebd8 <tcp_input+0x9f8>
 800ebd4:	68e2      	ldr	r2, [r4, #12]
 800ebd6:	60da      	str	r2, [r3, #12]
 800ebd8:	4b25      	ldr	r3, [pc, #148]	; (800ec70 <tcp_input+0xa90>)
 800ebda:	2201      	movs	r2, #1
 800ebdc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebde:	230a      	movs	r3, #10
 800ebe0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebe2:	4b24      	ldr	r3, [pc, #144]	; (800ec74 <tcp_input+0xa94>)
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	60e2      	str	r2, [r4, #12]
 800ebe8:	601c      	str	r4, [r3, #0]
 800ebea:	f001 fc1d 	bl	8010428 <tcp_timer_needed>
 800ebee:	e5cf      	b.n	800e790 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f7fe fe67 	bl	800d8c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ebf6:	4b14      	ldr	r3, [pc, #80]	; (800ec48 <tcp_input+0xa68>)
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	f013 0f10 	tst.w	r3, #16
 800ebfe:	f43f adc7 	beq.w	800e790 <tcp_input+0x5b0>
 800ec02:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ec04:	4b11      	ldr	r3, [pc, #68]	; (800ec4c <tcp_input+0xa6c>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	f47f adc1 	bne.w	800e790 <tcp_input+0x5b0>
 800ec0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f47f adbd 	bne.w	800e790 <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 800ec16:	4620      	mov	r0, r4
 800ec18:	f7fd fe40 	bl	800c89c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec1c:	4b13      	ldr	r3, [pc, #76]	; (800ec6c <tcp_input+0xa8c>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	42a3      	cmp	r3, r4
 800ec22:	d005      	beq.n	800ec30 <tcp_input+0xa50>
 800ec24:	b353      	cbz	r3, 800ec7c <tcp_input+0xa9c>
 800ec26:	68da      	ldr	r2, [r3, #12]
 800ec28:	42a2      	cmp	r2, r4
 800ec2a:	d025      	beq.n	800ec78 <tcp_input+0xa98>
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	e7f9      	b.n	800ec24 <tcp_input+0xa44>
 800ec30:	68e2      	ldr	r2, [r4, #12]
 800ec32:	4b0e      	ldr	r3, [pc, #56]	; (800ec6c <tcp_input+0xa8c>)
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	e021      	b.n	800ec7c <tcp_input+0xa9c>
 800ec38:	08014ff8 	.word	0x08014ff8
 800ec3c:	0801538c 	.word	0x0801538c
 800ec40:	0801397c 	.word	0x0801397c
 800ec44:	080153a4 	.word	0x080153a4
 800ec48:	20012bc0 	.word	0x20012bc0
 800ec4c:	20012bbc 	.word	0x20012bbc
 800ec50:	20012be8 	.word	0x20012be8
 800ec54:	2001618c 	.word	0x2001618c
 800ec58:	20012bf6 	.word	0x20012bf6
 800ec5c:	20012be0 	.word	0x20012be0
 800ec60:	20012bd4 	.word	0x20012bd4
 800ec64:	20012bdc 	.word	0x20012bdc
 800ec68:	080153b8 	.word	0x080153b8
 800ec6c:	2001b60c 	.word	0x2001b60c
 800ec70:	2001b608 	.word	0x2001b608
 800ec74:	2001b61c 	.word	0x2001b61c
 800ec78:	68e2      	ldr	r2, [r4, #12]
 800ec7a:	60da      	str	r2, [r3, #12]
 800ec7c:	4b61      	ldr	r3, [pc, #388]	; (800ee04 <tcp_input+0xc24>)
 800ec7e:	2201      	movs	r2, #1
 800ec80:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec82:	230a      	movs	r3, #10
 800ec84:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec86:	4b60      	ldr	r3, [pc, #384]	; (800ee08 <tcp_input+0xc28>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	60e2      	str	r2, [r4, #12]
 800ec8c:	601c      	str	r4, [r3, #0]
 800ec8e:	f001 fbcb 	bl	8010428 <tcp_timer_needed>
 800ec92:	e57d      	b.n	800e790 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800ec94:	4620      	mov	r0, r4
 800ec96:	f7fe fe15 	bl	800d8c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec9a:	4b5c      	ldr	r3, [pc, #368]	; (800ee0c <tcp_input+0xc2c>)
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	f013 0f10 	tst.w	r3, #16
 800eca2:	f43f ad75 	beq.w	800e790 <tcp_input+0x5b0>
 800eca6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eca8:	4b59      	ldr	r3, [pc, #356]	; (800ee10 <tcp_input+0xc30>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	f47f ad6f 	bne.w	800e790 <tcp_input+0x5b0>
 800ecb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f47f ad6b 	bne.w	800e790 <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 800ecba:	4a56      	ldr	r2, [pc, #344]	; (800ee14 <tcp_input+0xc34>)
 800ecbc:	7813      	ldrb	r3, [r2, #0]
 800ecbe:	f043 0310 	orr.w	r3, r3, #16
 800ecc2:	7013      	strb	r3, [r2, #0]
 800ecc4:	e564      	b.n	800e790 <tcp_input+0x5b0>
        if (recv_acked > 0) {
 800ecc6:	4b54      	ldr	r3, [pc, #336]	; (800ee18 <tcp_input+0xc38>)
 800ecc8:	881a      	ldrh	r2, [r3, #0]
 800ecca:	b162      	cbz	r2, 800ece6 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eccc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ecd0:	b133      	cbz	r3, 800ece0 <tcp_input+0xb00>
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	6920      	ldr	r0, [r4, #16]
 800ecd6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800ecd8:	f110 0f0d 	cmn.w	r0, #13
 800ecdc:	f43f ad6c 	beq.w	800e7b8 <tcp_input+0x5d8>
          recv_acked = 0;
 800ece0:	4b4d      	ldr	r3, [pc, #308]	; (800ee18 <tcp_input+0xc38>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7fe fcfa 	bl	800d6e0 <tcp_input_delayed_close>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	f47f ad63 	bne.w	800e7b8 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 800ecf2:	4b4a      	ldr	r3, [pc, #296]	; (800ee1c <tcp_input+0xc3c>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	b1eb      	cbz	r3, 800ed34 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ecf8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ecfa:	b133      	cbz	r3, 800ed0a <tcp_input+0xb2a>
 800ecfc:	4b48      	ldr	r3, [pc, #288]	; (800ee20 <tcp_input+0xc40>)
 800ecfe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ed02:	4948      	ldr	r1, [pc, #288]	; (800ee24 <tcp_input+0xc44>)
 800ed04:	4848      	ldr	r0, [pc, #288]	; (800ee28 <tcp_input+0xc48>)
 800ed06:	f003 fc85 	bl	8012614 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ed0a:	8b63      	ldrh	r3, [r4, #26]
 800ed0c:	f013 0f10 	tst.w	r3, #16
 800ed10:	d128      	bne.n	800ed64 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ed12:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800ed16:	b36d      	cbz	r5, 800ed74 <tcp_input+0xb94>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	4a40      	ldr	r2, [pc, #256]	; (800ee1c <tcp_input+0xc3c>)
 800ed1c:	6812      	ldr	r2, [r2, #0]
 800ed1e:	4621      	mov	r1, r4
 800ed20:	6920      	ldr	r0, [r4, #16]
 800ed22:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800ed24:	f110 0f0d 	cmn.w	r0, #13
 800ed28:	f43f ad46 	beq.w	800e7b8 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 800ed2c:	b110      	cbz	r0, 800ed34 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800ed2e:	4b3b      	ldr	r3, [pc, #236]	; (800ee1c <tcp_input+0xc3c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800ed34:	4b37      	ldr	r3, [pc, #220]	; (800ee14 <tcp_input+0xc34>)
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	f013 0f20 	tst.w	r3, #32
 800ed3c:	d005      	beq.n	800ed4a <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800ed3e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed40:	b303      	cbz	r3, 800ed84 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ed42:	7b5a      	ldrb	r2, [r3, #13]
 800ed44:	f042 0220 	orr.w	r2, r2, #32
 800ed48:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800ed4a:	4b38      	ldr	r3, [pc, #224]	; (800ee2c <tcp_input+0xc4c>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ed50:	4620      	mov	r0, r4
 800ed52:	f7fe fcc5 	bl	800d6e0 <tcp_input_delayed_close>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	f47f ad2e 	bne.w	800e7b8 <tcp_input+0x5d8>
        tcp_output(pcb);
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f001 f859 	bl	800fe14 <tcp_output>
 800ed62:	e529      	b.n	800e7b8 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 800ed64:	4b2d      	ldr	r3, [pc, #180]	; (800ee1c <tcp_input+0xc3c>)
 800ed66:	6818      	ldr	r0, [r3, #0]
 800ed68:	f7fc ffe2 	bl	800bd30 <pbuf_free>
            tcp_abort(pcb);
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f7fd feb5 	bl	800cadc <tcp_abort>
            goto aborted;
 800ed72:	e521      	b.n	800e7b8 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ed74:	2300      	movs	r3, #0
 800ed76:	4a29      	ldr	r2, [pc, #164]	; (800ee1c <tcp_input+0xc3c>)
 800ed78:	6812      	ldr	r2, [r2, #0]
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fe f8db 	bl	800cf38 <tcp_recv_null>
 800ed82:	e7cf      	b.n	800ed24 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ed86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed8a:	d001      	beq.n	800ed90 <tcp_input+0xbb0>
              pcb->rcv_wnd++;
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	8523      	strh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800ed90:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800ed94:	2d00      	cmp	r5, #0
 800ed96:	d0d8      	beq.n	800ed4a <tcp_input+0xb6a>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	6920      	ldr	r0, [r4, #16]
 800eda0:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800eda2:	f110 0f0d 	cmn.w	r0, #13
 800eda6:	d1d0      	bne.n	800ed4a <tcp_input+0xb6a>
 800eda8:	e506      	b.n	800e7b8 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edaa:	4b21      	ldr	r3, [pc, #132]	; (800ee30 <tcp_input+0xc50>)
 800edac:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edae:	4b21      	ldr	r3, [pc, #132]	; (800ee34 <tcp_input+0xc54>)
 800edb0:	4a21      	ldr	r2, [pc, #132]	; (800ee38 <tcp_input+0xc58>)
 800edb2:	8810      	ldrh	r0, [r2, #0]
 800edb4:	4a21      	ldr	r2, [pc, #132]	; (800ee3c <tcp_input+0xc5c>)
 800edb6:	6812      	ldr	r2, [r2, #0]
 800edb8:	880c      	ldrh	r4, [r1, #0]
 800edba:	9402      	str	r4, [sp, #8]
 800edbc:	8849      	ldrh	r1, [r1, #2]
 800edbe:	9101      	str	r1, [sp, #4]
 800edc0:	1f19      	subs	r1, r3, #4
 800edc2:	9100      	str	r1, [sp, #0]
 800edc4:	4402      	add	r2, r0
 800edc6:	4912      	ldr	r1, [pc, #72]	; (800ee10 <tcp_input+0xc30>)
 800edc8:	6809      	ldr	r1, [r1, #0]
 800edca:	2000      	movs	r0, #0
 800edcc:	f000 ffa2 	bl	800fd14 <tcp_rst>
 800edd0:	e007      	b.n	800ede2 <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800edd2:	4b17      	ldr	r3, [pc, #92]	; (800ee30 <tcp_input+0xc50>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	8998      	ldrh	r0, [r3, #12]
 800edd8:	f7fc f99c 	bl	800b114 <lwip_htons>
 800eddc:	f010 0f04 	tst.w	r0, #4
 800ede0:	d0e3      	beq.n	800edaa <tcp_input+0xbca>
    pbuf_free(p);
 800ede2:	4628      	mov	r0, r5
 800ede4:	f7fc ffa4 	bl	800bd30 <pbuf_free>
 800ede8:	f7ff ba08 	b.w	800e1fc <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800edec:	4b06      	ldr	r3, [pc, #24]	; (800ee08 <tcp_input+0xc28>)
 800edee:	681c      	ldr	r4, [r3, #0]
 800edf0:	2c00      	cmp	r4, #0
 800edf2:	f43f abe5 	beq.w	800e5c0 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800edf6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800ee20 <tcp_input+0xc40>
 800edfa:	4f11      	ldr	r7, [pc, #68]	; (800ee40 <tcp_input+0xc60>)
 800edfc:	4e0a      	ldr	r6, [pc, #40]	; (800ee28 <tcp_input+0xc48>)
 800edfe:	f7ff bb8d 	b.w	800e51c <tcp_input+0x33c>
 800ee02:	bf00      	nop
 800ee04:	2001b608 	.word	0x2001b608
 800ee08:	2001b61c 	.word	0x2001b61c
 800ee0c:	20012bc0 	.word	0x20012bc0
 800ee10:	20012bbc 	.word	0x20012bbc
 800ee14:	20012bdc 	.word	0x20012bdc
 800ee18:	20012bd4 	.word	0x20012bd4
 800ee1c:	20012bd8 	.word	0x20012bd8
 800ee20:	08014ff8 	.word	0x08014ff8
 800ee24:	080153d8 	.word	0x080153d8
 800ee28:	0801397c 	.word	0x0801397c
 800ee2c:	2001b620 	.word	0x2001b620
 800ee30:	20012be8 	.word	0x20012be8
 800ee34:	2001618c 	.word	0x2001618c
 800ee38:	20012bf6 	.word	0x20012bf6
 800ee3c:	20012be0 	.word	0x20012be0
 800ee40:	0801533c 	.word	0x0801533c

0800ee44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ee44:	4a02      	ldr	r2, [pc, #8]	; (800ee50 <tcp_trigger_input_pcb_close+0xc>)
 800ee46:	7813      	ldrb	r3, [r2, #0]
 800ee48:	f043 0310 	orr.w	r3, r3, #16
 800ee4c:	7013      	strb	r3, [r2, #0]
}
 800ee4e:	4770      	bx	lr
 800ee50:	20012bdc 	.word	0x20012bdc

0800ee54 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ee54:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ee56:	4604      	mov	r4, r0
 800ee58:	b128      	cbz	r0, 800ee66 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ee5a:	6863      	ldr	r3, [r4, #4]
 800ee5c:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800ee5e:	3801      	subs	r0, #1
 800ee60:	bf18      	it	ne
 800ee62:	2001      	movne	r0, #1
 800ee64:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ee66:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <tcp_output_segment_busy+0x24>)
 800ee68:	f240 529a 	movw	r2, #1434	; 0x59a
 800ee6c:	4903      	ldr	r1, [pc, #12]	; (800ee7c <tcp_output_segment_busy+0x28>)
 800ee6e:	4804      	ldr	r0, [pc, #16]	; (800ee80 <tcp_output_segment_busy+0x2c>)
 800ee70:	f003 fbd0 	bl	8012614 <iprintf>
 800ee74:	e7f1      	b.n	800ee5a <tcp_output_segment_busy+0x6>
 800ee76:	bf00      	nop
 800ee78:	080153f4 	.word	0x080153f4
 800ee7c:	08015428 	.word	0x08015428
 800ee80:	0801397c 	.word	0x0801397c

0800ee84 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ee88:	460d      	mov	r5, r1
 800ee8a:	b181      	cbz	r1, 800eeae <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ee8c:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ee8e:	00a4      	lsls	r4, r4, #2
 800ee90:	f004 0404 	and.w	r4, r4, #4
 800ee94:	3414      	adds	r4, #20
 800ee96:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ee98:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ee9a:	429c      	cmp	r4, r3
 800ee9c:	d006      	beq.n	800eeac <tcp_output_fill_options+0x28>
 800ee9e:	4b08      	ldr	r3, [pc, #32]	; (800eec0 <tcp_output_fill_options+0x3c>)
 800eea0:	f240 7275 	movw	r2, #1909	; 0x775
 800eea4:	4907      	ldr	r1, [pc, #28]	; (800eec4 <tcp_output_fill_options+0x40>)
 800eea6:	4808      	ldr	r0, [pc, #32]	; (800eec8 <tcp_output_fill_options+0x44>)
 800eea8:	f003 fbb4 	bl	8012614 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800eeae:	4b04      	ldr	r3, [pc, #16]	; (800eec0 <tcp_output_fill_options+0x3c>)
 800eeb0:	f240 7256 	movw	r2, #1878	; 0x756
 800eeb4:	4905      	ldr	r1, [pc, #20]	; (800eecc <tcp_output_fill_options+0x48>)
 800eeb6:	4804      	ldr	r0, [pc, #16]	; (800eec8 <tcp_output_fill_options+0x44>)
 800eeb8:	f003 fbac 	bl	8012614 <iprintf>
 800eebc:	e7e6      	b.n	800ee8c <tcp_output_fill_options+0x8>
 800eebe:	bf00      	nop
 800eec0:	080153f4 	.word	0x080153f4
 800eec4:	08015478 	.word	0x08015478
 800eec8:	0801397c 	.word	0x0801397c
 800eecc:	08015450 	.word	0x08015450

0800eed0 <tcp_pbuf_prealloc>:
{
 800eed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed4:	4680      	mov	r8, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	4615      	mov	r5, r2
 800eeda:	9e08      	ldr	r6, [sp, #32]
 800eedc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800eee0:	461f      	mov	r7, r3
 800eee2:	b1cb      	cbz	r3, 800ef18 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800eee4:	b1fe      	cbz	r6, 800ef26 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800eee6:	42ac      	cmp	r4, r5
 800eee8:	d229      	bcs.n	800ef3e <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800eeea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800eeee:	f013 0f02 	tst.w	r3, #2
 800eef2:	d108      	bne.n	800ef06 <tcp_pbuf_prealloc+0x36>
 800eef4:	8b73      	ldrh	r3, [r6, #26]
 800eef6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800eefa:	d139      	bne.n	800ef70 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800eefc:	f1b9 0f00 	cmp.w	r9, #0
 800ef00:	d001      	beq.n	800ef06 <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 800ef02:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800ef04:	b1b3      	cbz	r3, 800ef34 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ef06:	f204 11cf 	addw	r1, r4, #463	; 0x1cf
 800ef0a:	f021 0103 	bic.w	r1, r1, #3
 800ef0e:	428d      	cmp	r5, r1
 800ef10:	bf28      	it	cs
 800ef12:	460d      	movcs	r5, r1
 800ef14:	b2a9      	uxth	r1, r5
 800ef16:	e013      	b.n	800ef40 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ef18:	4b16      	ldr	r3, [pc, #88]	; (800ef74 <tcp_pbuf_prealloc+0xa4>)
 800ef1a:	22e8      	movs	r2, #232	; 0xe8
 800ef1c:	4916      	ldr	r1, [pc, #88]	; (800ef78 <tcp_pbuf_prealloc+0xa8>)
 800ef1e:	4817      	ldr	r0, [pc, #92]	; (800ef7c <tcp_pbuf_prealloc+0xac>)
 800ef20:	f003 fb78 	bl	8012614 <iprintf>
 800ef24:	e7de      	b.n	800eee4 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ef26:	4b13      	ldr	r3, [pc, #76]	; (800ef74 <tcp_pbuf_prealloc+0xa4>)
 800ef28:	22e9      	movs	r2, #233	; 0xe9
 800ef2a:	4915      	ldr	r1, [pc, #84]	; (800ef80 <tcp_pbuf_prealloc+0xb0>)
 800ef2c:	4813      	ldr	r0, [pc, #76]	; (800ef7c <tcp_pbuf_prealloc+0xac>)
 800ef2e:	f003 fb71 	bl	8012614 <iprintf>
 800ef32:	e7d8      	b.n	800eee6 <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 800ef34:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d1e5      	bne.n	800ef06 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800ef3a:	4621      	mov	r1, r4
 800ef3c:	e000      	b.n	800ef40 <tcp_pbuf_prealloc+0x70>
 800ef3e:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ef40:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef44:	4640      	mov	r0, r8
 800ef46:	f7fc ff63 	bl	800be10 <pbuf_alloc>
  if (p == NULL) {
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	b168      	cbz	r0, 800ef6a <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ef4e:	6803      	ldr	r3, [r0, #0]
 800ef50:	b133      	cbz	r3, 800ef60 <tcp_pbuf_prealloc+0x90>
 800ef52:	4b08      	ldr	r3, [pc, #32]	; (800ef74 <tcp_pbuf_prealloc+0xa4>)
 800ef54:	f240 120b 	movw	r2, #267	; 0x10b
 800ef58:	490a      	ldr	r1, [pc, #40]	; (800ef84 <tcp_pbuf_prealloc+0xb4>)
 800ef5a:	4808      	ldr	r0, [pc, #32]	; (800ef7c <tcp_pbuf_prealloc+0xac>)
 800ef5c:	f003 fb5a 	bl	8012614 <iprintf>
  *oversize = p->len - length;
 800ef60:	896b      	ldrh	r3, [r5, #10]
 800ef62:	1b1b      	subs	r3, r3, r4
 800ef64:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 800ef66:	812c      	strh	r4, [r5, #8]
 800ef68:	816c      	strh	r4, [r5, #10]
}
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800ef70:	4621      	mov	r1, r4
 800ef72:	e7e5      	b.n	800ef40 <tcp_pbuf_prealloc+0x70>
 800ef74:	080153f4 	.word	0x080153f4
 800ef78:	0801548c 	.word	0x0801548c
 800ef7c:	0801397c 	.word	0x0801397c
 800ef80:	080154b0 	.word	0x080154b0
 800ef84:	080154d0 	.word	0x080154d0

0800ef88 <tcp_create_segment>:
{
 800ef88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	460e      	mov	r6, r1
 800ef8e:	4617      	mov	r7, r2
 800ef90:	4698      	mov	r8, r3
 800ef92:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ef96:	4681      	mov	r9, r0
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d041      	beq.n	800f020 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ef9c:	2e00      	cmp	r6, #0
 800ef9e:	d046      	beq.n	800f02e <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800efa0:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800efa4:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800efa8:	2003      	movs	r0, #3
 800efaa:	f7fc fbe7 	bl	800b77c <memp_malloc>
 800efae:	4604      	mov	r4, r0
 800efb0:	2800      	cmp	r0, #0
 800efb2:	d043      	beq.n	800f03c <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800efb4:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800efbc:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800efbe:	fa1f fa85 	uxth.w	sl, r5
 800efc2:	8933      	ldrh	r3, [r6, #8]
 800efc4:	4553      	cmp	r3, sl
 800efc6:	d33d      	bcc.n	800f044 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800efc8:	8931      	ldrh	r1, [r6, #8]
 800efca:	eba1 010a 	sub.w	r1, r1, sl
 800efce:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800efd0:	2114      	movs	r1, #20
 800efd2:	4630      	mov	r0, r6
 800efd4:	f7fc fe66 	bl	800bca4 <pbuf_add_header>
 800efd8:	2800      	cmp	r0, #0
 800efda:	d13a      	bne.n	800f052 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800efdc:	6863      	ldr	r3, [r4, #4]
 800efde:	685e      	ldr	r6, [r3, #4]
 800efe0:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800efe2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800efe6:	f7fc f895 	bl	800b114 <lwip_htons>
 800efea:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800efec:	68e6      	ldr	r6, [r4, #12]
 800efee:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800eff2:	f7fc f88f 	bl	800b114 <lwip_htons>
 800eff6:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eff8:	68e6      	ldr	r6, [r4, #12]
 800effa:	4640      	mov	r0, r8
 800effc:	f7fc f88f 	bl	800b11e <lwip_htonl>
 800f000:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f002:	68e6      	ldr	r6, [r4, #12]
 800f004:	08a8      	lsrs	r0, r5, #2
 800f006:	3005      	adds	r0, #5
 800f008:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 800f00c:	f7fc f882 	bl	800b114 <lwip_htons>
 800f010:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800f012:	68e3      	ldr	r3, [r4, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	749a      	strb	r2, [r3, #18]
 800f018:	74da      	strb	r2, [r3, #19]
}
 800f01a:	4620      	mov	r0, r4
 800f01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f020:	4b0e      	ldr	r3, [pc, #56]	; (800f05c <tcp_create_segment+0xd4>)
 800f022:	22a3      	movs	r2, #163	; 0xa3
 800f024:	490e      	ldr	r1, [pc, #56]	; (800f060 <tcp_create_segment+0xd8>)
 800f026:	480f      	ldr	r0, [pc, #60]	; (800f064 <tcp_create_segment+0xdc>)
 800f028:	f003 faf4 	bl	8012614 <iprintf>
 800f02c:	e7b6      	b.n	800ef9c <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f02e:	4b0b      	ldr	r3, [pc, #44]	; (800f05c <tcp_create_segment+0xd4>)
 800f030:	22a4      	movs	r2, #164	; 0xa4
 800f032:	490d      	ldr	r1, [pc, #52]	; (800f068 <tcp_create_segment+0xe0>)
 800f034:	480b      	ldr	r0, [pc, #44]	; (800f064 <tcp_create_segment+0xdc>)
 800f036:	f003 faed 	bl	8012614 <iprintf>
 800f03a:	e7b1      	b.n	800efa0 <tcp_create_segment+0x18>
    pbuf_free(p);
 800f03c:	4630      	mov	r0, r6
 800f03e:	f7fc fe77 	bl	800bd30 <pbuf_free>
    return NULL;
 800f042:	e7ea      	b.n	800f01a <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f044:	4b05      	ldr	r3, [pc, #20]	; (800f05c <tcp_create_segment+0xd4>)
 800f046:	22b0      	movs	r2, #176	; 0xb0
 800f048:	4908      	ldr	r1, [pc, #32]	; (800f06c <tcp_create_segment+0xe4>)
 800f04a:	4806      	ldr	r0, [pc, #24]	; (800f064 <tcp_create_segment+0xdc>)
 800f04c:	f003 fae2 	bl	8012614 <iprintf>
 800f050:	e7ba      	b.n	800efc8 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800f052:	4620      	mov	r0, r4
 800f054:	f7fd fb24 	bl	800c6a0 <tcp_seg_free>
    return NULL;
 800f058:	2400      	movs	r4, #0
 800f05a:	e7de      	b.n	800f01a <tcp_create_segment+0x92>
 800f05c:	080153f4 	.word	0x080153f4
 800f060:	080154e4 	.word	0x080154e4
 800f064:	0801397c 	.word	0x0801397c
 800f068:	08015504 	.word	0x08015504
 800f06c:	08015528 	.word	0x08015528

0800f070 <tcp_output_alloc_header_common>:
{
 800f070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f074:	4607      	mov	r7, r0
 800f076:	460c      	mov	r4, r1
 800f078:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f07a:	3214      	adds	r2, #20
 800f07c:	4411      	add	r1, r2
 800f07e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f082:	b289      	uxth	r1, r1
 800f084:	2022      	movs	r0, #34	; 0x22
 800f086:	f7fc fec3 	bl	800be10 <pbuf_alloc>
  if (p != NULL) {
 800f08a:	4606      	mov	r6, r0
 800f08c:	b348      	cbz	r0, 800f0e2 <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f08e:	f104 0313 	add.w	r3, r4, #19
 800f092:	8942      	ldrh	r2, [r0, #10]
 800f094:	4293      	cmp	r3, r2
 800f096:	da27      	bge.n	800f0e8 <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800f098:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800f09a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800f09e:	f7fc f839 	bl	800b114 <lwip_htons>
 800f0a2:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f0a4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800f0a8:	f7fc f834 	bl	800b114 <lwip_htons>
 800f0ac:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800f0ae:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	f7fc f833 	bl	800b11e <lwip_htonl>
 800f0b8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f0ba:	08a4      	lsrs	r4, r4, #2
 800f0bc:	3405      	adds	r4, #5
 800f0be:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800f0c2:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800f0c6:	b2a0      	uxth	r0, r4
 800f0c8:	f7fc f824 	bl	800b114 <lwip_htons>
 800f0cc:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f0ce:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800f0d2:	f7fc f81f 	bl	800b114 <lwip_htons>
 800f0d6:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	742b      	strb	r3, [r5, #16]
 800f0dc:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800f0de:	74ab      	strb	r3, [r5, #18]
 800f0e0:	74eb      	strb	r3, [r5, #19]
}
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f0e8:	4b03      	ldr	r3, [pc, #12]	; (800f0f8 <tcp_output_alloc_header_common+0x88>)
 800f0ea:	f240 7223 	movw	r2, #1827	; 0x723
 800f0ee:	4903      	ldr	r1, [pc, #12]	; (800f0fc <tcp_output_alloc_header_common+0x8c>)
 800f0f0:	4803      	ldr	r0, [pc, #12]	; (800f100 <tcp_output_alloc_header_common+0x90>)
 800f0f2:	f003 fa8f 	bl	8012614 <iprintf>
 800f0f6:	e7cf      	b.n	800f098 <tcp_output_alloc_header_common+0x28>
 800f0f8:	080153f4 	.word	0x080153f4
 800f0fc:	08015540 	.word	0x08015540
 800f100:	0801397c 	.word	0x0801397c

0800f104 <tcp_output_alloc_header>:
{
 800f104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f106:	b085      	sub	sp, #20
 800f108:	460d      	mov	r5, r1
 800f10a:	4616      	mov	r6, r2
 800f10c:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f10e:	4604      	mov	r4, r0
 800f110:	b1a0      	cbz	r0, 800f13c <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f112:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800f114:	9303      	str	r3, [sp, #12]
 800f116:	2310      	movs	r3, #16
 800f118:	9302      	str	r3, [sp, #8]
 800f11a:	8b23      	ldrh	r3, [r4, #24]
 800f11c:	9301      	str	r3, [sp, #4]
 800f11e:	8ae3      	ldrh	r3, [r4, #22]
 800f120:	9300      	str	r3, [sp, #0]
 800f122:	463b      	mov	r3, r7
 800f124:	4632      	mov	r2, r6
 800f126:	4629      	mov	r1, r5
 800f128:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f12a:	f7ff ffa1 	bl	800f070 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800f12e:	b118      	cbz	r0, 800f138 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f130:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800f132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f134:	4413      	add	r3, r2
 800f136:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800f138:	b005      	add	sp, #20
 800f13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f13c:	4b03      	ldr	r3, [pc, #12]	; (800f14c <tcp_output_alloc_header+0x48>)
 800f13e:	f240 7242 	movw	r2, #1858	; 0x742
 800f142:	4903      	ldr	r1, [pc, #12]	; (800f150 <tcp_output_alloc_header+0x4c>)
 800f144:	4803      	ldr	r0, [pc, #12]	; (800f154 <tcp_output_alloc_header+0x50>)
 800f146:	f003 fa65 	bl	8012614 <iprintf>
 800f14a:	e7e2      	b.n	800f112 <tcp_output_alloc_header+0xe>
 800f14c:	080153f4 	.word	0x080153f4
 800f150:	08015570 	.word	0x08015570
 800f154:	0801397c 	.word	0x0801397c

0800f158 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f15a:	b085      	sub	sp, #20
 800f15c:	4604      	mov	r4, r0
 800f15e:	4616      	mov	r6, r2
 800f160:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f162:	460f      	mov	r7, r1
 800f164:	b1c9      	cbz	r1, 800f19a <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f166:	b374      	cbz	r4, 800f1c6 <tcp_output_control_segment+0x6e>
 800f168:	7a20      	ldrb	r0, [r4, #8]
 800f16a:	b9f0      	cbnz	r0, 800f1aa <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 800f16c:	4628      	mov	r0, r5
 800f16e:	f002 f91f 	bl	80113b0 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800f172:	4602      	mov	r2, r0
 800f174:	b308      	cbz	r0, 800f1ba <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f176:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800f178:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f17a:	9202      	str	r2, [sp, #8]
 800f17c:	2206      	movs	r2, #6
 800f17e:	9201      	str	r2, [sp, #4]
 800f180:	9100      	str	r1, [sp, #0]
 800f182:	462a      	mov	r2, r5
 800f184:	4631      	mov	r1, r6
 800f186:	4638      	mov	r0, r7
 800f188:	f002 fa9a 	bl	80116c0 <ip4_output_if>
 800f18c:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f18e:	4638      	mov	r0, r7
 800f190:	f7fc fdce 	bl	800bd30 <pbuf_free>
  return err;
}
 800f194:	4620      	mov	r0, r4
 800f196:	b005      	add	sp, #20
 800f198:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f19a:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <tcp_output_control_segment+0x80>)
 800f19c:	f240 7287 	movw	r2, #1927	; 0x787
 800f1a0:	490e      	ldr	r1, [pc, #56]	; (800f1dc <tcp_output_control_segment+0x84>)
 800f1a2:	480f      	ldr	r0, [pc, #60]	; (800f1e0 <tcp_output_control_segment+0x88>)
 800f1a4:	f003 fa36 	bl	8012614 <iprintf>
 800f1a8:	e7dd      	b.n	800f166 <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800f1aa:	f7fc fcd1 	bl	800bb50 <netif_get_by_index>
  if (netif == NULL) {
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d1e0      	bne.n	800f176 <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 800f1b4:	f06f 0403 	mvn.w	r4, #3
 800f1b8:	e7e9      	b.n	800f18e <tcp_output_control_segment+0x36>
 800f1ba:	f06f 0403 	mvn.w	r4, #3
 800f1be:	e7e6      	b.n	800f18e <tcp_output_control_segment+0x36>
 800f1c0:	f06f 0403 	mvn.w	r4, #3
 800f1c4:	e7e3      	b.n	800f18e <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f002 f8f2 	bl	80113b0 <ip4_route>
  if (netif == NULL) {
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	d0f6      	beq.n	800f1c0 <tcp_output_control_segment+0x68>
      tos = 0;
 800f1d2:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800f1d4:	23ff      	movs	r3, #255	; 0xff
 800f1d6:	e7d0      	b.n	800f17a <tcp_output_control_segment+0x22>
 800f1d8:	080153f4 	.word	0x080153f4
 800f1dc:	08015598 	.word	0x08015598
 800f1e0:	0801397c 	.word	0x0801397c

0800f1e4 <tcp_write>:
{
 800f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e8:	b091      	sub	sp, #68	; 0x44
 800f1ea:	9107      	str	r1, [sp, #28]
 800f1ec:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1f4:	b378      	cbz	r0, 800f256 <tcp_write+0x72>
 800f1f6:	4692      	mov	sl, r2
 800f1f8:	4681      	mov	r9, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f1fa:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800f1fc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800f200:	085b      	lsrs	r3, r3, #1
 800f202:	4293      	cmp	r3, r2
 800f204:	bf28      	it	cs
 800f206:	4613      	movcs	r3, r2
 800f208:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bf08      	it	eq
 800f20e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f210:	9b07      	ldr	r3, [sp, #28]
 800f212:	b353      	cbz	r3, 800f26a <tcp_write+0x86>
  if ((pcb->state != ESTABLISHED) &&
 800f214:	7d02      	ldrb	r2, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f216:	1e93      	subs	r3, r2, #2
 800f218:	b2db      	uxtb	r3, r3
      (pcb->state != SYN_SENT) &&
 800f21a:	2b02      	cmp	r3, #2
 800f21c:	d902      	bls.n	800f224 <tcp_write+0x40>
 800f21e:	2a07      	cmp	r2, #7
 800f220:	f040 82b1 	bne.w	800f786 <tcp_write+0x5a2>
  } else if (len == 0) {
 800f224:	f1ba 0f00 	cmp.w	sl, #0
 800f228:	d04e      	beq.n	800f2c8 <tcp_write+0xe4>
  if (len > pcb->snd_buf) {
 800f22a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800f22e:	4553      	cmp	r3, sl
 800f230:	d325      	bcc.n	800f27e <tcp_write+0x9a>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f232:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 800f236:	2b0f      	cmp	r3, #15
 800f238:	d82a      	bhi.n	800f290 <tcp_write+0xac>
  if (pcb->snd_queuelen != 0) {
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d039      	beq.n	800f2b2 <tcp_write+0xce>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f23e:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800f242:	2b00      	cmp	r3, #0
 800f244:	d140      	bne.n	800f2c8 <tcp_write+0xe4>
 800f246:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800f24a:	b353      	cbz	r3, 800f2a2 <tcp_write+0xbe>
  queuelen = pcb->snd_queuelen;
 800f24c:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800f250:	f8d9 706c 	ldr.w	r7, [r9, #108]	; 0x6c
 800f254:	e03e      	b.n	800f2d4 <tcp_write+0xf0>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f256:	4ba0      	ldr	r3, [pc, #640]	; (800f4d8 <tcp_write+0x2f4>)
 800f258:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f25c:	499f      	ldr	r1, [pc, #636]	; (800f4dc <tcp_write+0x2f8>)
 800f25e:	48a0      	ldr	r0, [pc, #640]	; (800f4e0 <tcp_write+0x2fc>)
 800f260:	f003 f9d8 	bl	8012614 <iprintf>
 800f264:	f06f 000f 	mvn.w	r0, #15
 800f268:	e1c3      	b.n	800f5f2 <tcp_write+0x40e>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f26a:	4b9b      	ldr	r3, [pc, #620]	; (800f4d8 <tcp_write+0x2f4>)
 800f26c:	f240 12ad 	movw	r2, #429	; 0x1ad
 800f270:	499c      	ldr	r1, [pc, #624]	; (800f4e4 <tcp_write+0x300>)
 800f272:	489b      	ldr	r0, [pc, #620]	; (800f4e0 <tcp_write+0x2fc>)
 800f274:	f003 f9ce 	bl	8012614 <iprintf>
 800f278:	f06f 000f 	mvn.w	r0, #15
 800f27c:	e1b9      	b.n	800f5f2 <tcp_write+0x40e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f27e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800f282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f286:	f8a9 301a 	strh.w	r3, [r9, #26]
    return ERR_MEM;
 800f28a:	f04f 30ff 	mov.w	r0, #4294967295
 800f28e:	e1b0      	b.n	800f5f2 <tcp_write+0x40e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f290:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800f294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f298:	f8a9 301a 	strh.w	r3, [r9, #26]
    return ERR_MEM;
 800f29c:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a0:	e1a7      	b.n	800f5f2 <tcp_write+0x40e>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f2a2:	4b8d      	ldr	r3, [pc, #564]	; (800f4d8 <tcp_write+0x2f4>)
 800f2a4:	f240 1255 	movw	r2, #341	; 0x155
 800f2a8:	498f      	ldr	r1, [pc, #572]	; (800f4e8 <tcp_write+0x304>)
 800f2aa:	488d      	ldr	r0, [pc, #564]	; (800f4e0 <tcp_write+0x2fc>)
 800f2ac:	f003 f9b2 	bl	8012614 <iprintf>
 800f2b0:	e00a      	b.n	800f2c8 <tcp_write+0xe4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f2b2:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d046      	beq.n	800f348 <tcp_write+0x164>
 800f2ba:	4b87      	ldr	r3, [pc, #540]	; (800f4d8 <tcp_write+0x2f4>)
 800f2bc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f2c0:	498a      	ldr	r1, [pc, #552]	; (800f4ec <tcp_write+0x308>)
 800f2c2:	4887      	ldr	r0, [pc, #540]	; (800f4e0 <tcp_write+0x2fc>)
 800f2c4:	f003 f9a6 	bl	8012614 <iprintf>
  queuelen = pcb->snd_queuelen;
 800f2c8:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800f2cc:	f8d9 706c 	ldr.w	r7, [r9, #108]	; 0x6c
 800f2d0:	2f00      	cmp	r7, #0
 800f2d2:	d03f      	beq.n	800f354 <tcp_write+0x170>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f2d4:	9709      	str	r7, [sp, #36]	; 0x24
 800f2d6:	683f      	ldr	r7, [r7, #0]
 800f2d8:	2f00      	cmp	r7, #0
 800f2da:	d1fb      	bne.n	800f2d4 <tcp_write+0xf0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2de:	7a9d      	ldrb	r5, [r3, #10]
 800f2e0:	00ad      	lsls	r5, r5, #2
 800f2e2:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f2e6:	891b      	ldrh	r3, [r3, #8]
 800f2e8:	442b      	add	r3, r5
 800f2ea:	459b      	cmp	fp, r3
 800f2ec:	db41      	blt.n	800f372 <tcp_write+0x18e>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2f0:	891c      	ldrh	r4, [r3, #8]
 800f2f2:	ebab 0404 	sub.w	r4, fp, r4
 800f2f6:	1b64      	subs	r4, r4, r5
 800f2f8:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 800f2fa:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800f2fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800f300:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800f304:	2b00      	cmp	r3, #0
 800f306:	d044      	beq.n	800f392 <tcp_write+0x1ae>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f308:	42a3      	cmp	r3, r4
 800f30a:	d83a      	bhi.n	800f382 <tcp_write+0x19e>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f30c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f310:	461a      	mov	r2, r3
 800f312:	4553      	cmp	r3, sl
 800f314:	bf28      	it	cs
 800f316:	4652      	movcs	r2, sl
 800f318:	42a2      	cmp	r2, r4
 800f31a:	bf28      	it	cs
 800f31c:	4622      	movcs	r2, r4
 800f31e:	920b      	str	r2, [sp, #44]	; 0x2c
      oversize -= oversize_used;
 800f320:	1a9b      	subs	r3, r3, r2
 800f322:	b29b      	uxth	r3, r3
 800f324:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800f328:	1aa4      	subs	r4, r4, r2
 800f32a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d072      	beq.n	800f416 <tcp_write+0x232>
 800f330:	4592      	cmp	sl, r2
 800f332:	d070      	beq.n	800f416 <tcp_write+0x232>
 800f334:	4b68      	ldr	r3, [pc, #416]	; (800f4d8 <tcp_write+0x2f4>)
 800f336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f33a:	496d      	ldr	r1, [pc, #436]	; (800f4f0 <tcp_write+0x30c>)
 800f33c:	4868      	ldr	r0, [pc, #416]	; (800f4e0 <tcp_write+0x2fc>)
 800f33e:	f003 f969 	bl	8012614 <iprintf>
 800f342:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800f346:	e025      	b.n	800f394 <tcp_write+0x1b0>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f348:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d1b4      	bne.n	800f2ba <tcp_write+0xd6>
  queuelen = pcb->snd_queuelen;
 800f350:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f354:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f040 808d 	bne.w	800f478 <tcp_write+0x294>
  while (pos < len) {
 800f35e:	f1ba 0f00 	cmp.w	sl, #0
 800f362:	f000 822d 	beq.w	800f7c0 <tcp_write+0x5dc>
 800f366:	2400      	movs	r4, #0
 800f368:	9409      	str	r4, [sp, #36]	; 0x24
 800f36a:	940b      	str	r4, [sp, #44]	; 0x2c
 800f36c:	940d      	str	r4, [sp, #52]	; 0x34
 800f36e:	940c      	str	r4, [sp, #48]	; 0x30
 800f370:	e152      	b.n	800f618 <tcp_write+0x434>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f372:	4b59      	ldr	r3, [pc, #356]	; (800f4d8 <tcp_write+0x2f4>)
 800f374:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f378:	495e      	ldr	r1, [pc, #376]	; (800f4f4 <tcp_write+0x310>)
 800f37a:	4859      	ldr	r0, [pc, #356]	; (800f4e0 <tcp_write+0x2fc>)
 800f37c:	f003 f94a 	bl	8012614 <iprintf>
 800f380:	e7b5      	b.n	800f2ee <tcp_write+0x10a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f382:	4b55      	ldr	r3, [pc, #340]	; (800f4d8 <tcp_write+0x2f4>)
 800f384:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f388:	495b      	ldr	r1, [pc, #364]	; (800f4f8 <tcp_write+0x314>)
 800f38a:	4855      	ldr	r0, [pc, #340]	; (800f4e0 <tcp_write+0x2fc>)
 800f38c:	f003 f942 	bl	8012614 <iprintf>
 800f390:	e7bc      	b.n	800f30c <tcp_write+0x128>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f392:	46b8      	mov	r8, r7
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f396:	459a      	cmp	sl, r3
 800f398:	f240 8138 	bls.w	800f60c <tcp_write+0x428>
 800f39c:	2c00      	cmp	r4, #0
 800f39e:	f000 8135 	beq.w	800f60c <tcp_write+0x428>
 800f3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3a4:	8912      	ldrh	r2, [r2, #8]
 800f3a6:	920d      	str	r2, [sp, #52]	; 0x34
 800f3a8:	2a00      	cmp	r2, #0
 800f3aa:	d06d      	beq.n	800f488 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f3ac:	ebaa 0803 	sub.w	r8, sl, r3
 800f3b0:	45a0      	cmp	r8, r4
 800f3b2:	bfa8      	it	ge
 800f3b4:	46a0      	movge	r8, r4
 800f3b6:	fa1f f588 	uxth.w	r5, r8
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3bc:	f013 0f01 	tst.w	r3, #1
 800f3c0:	d12c      	bne.n	800f41c <tcp_write+0x238>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c4:	685a      	ldr	r2, [r3, #4]
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	6812      	ldr	r2, [r2, #0]
 800f3ca:	2a00      	cmp	r2, #0
 800f3cc:	d1fb      	bne.n	800f3c6 <tcp_write+0x1e2>
 800f3ce:	920c      	str	r2, [sp, #48]	; 0x30
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f3d0:	7b1a      	ldrb	r2, [r3, #12]
 800f3d2:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800f3d6:	d105      	bne.n	800f3e4 <tcp_write+0x200>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f3d8:	895a      	ldrh	r2, [r3, #10]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f3de:	9a07      	ldr	r2, [sp, #28]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d03c      	beq.n	800f45e <tcp_write+0x27a>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	f7fc fd11 	bl	800be10 <pbuf_alloc>
 800f3ee:	900c      	str	r0, [sp, #48]	; 0x30
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	f000 81c1 	beq.w	800f778 <tcp_write+0x594>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f3f6:	9b07      	ldr	r3, [sp, #28]
 800f3f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3fa:	4413      	add	r3, r2
 800f3fc:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800f3fe:	f7fc fe0f 	bl	800c020 <pbuf_clen>
 800f402:	4406      	add	r6, r0
 800f404:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800f406:	2300      	movs	r3, #0
 800f408:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 800f40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f40c:	18ec      	adds	r4, r5, r3
 800f40e:	b2a4      	uxth	r4, r4
 800f410:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800f414:	e0fe      	b.n	800f614 <tcp_write+0x430>
 800f416:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800f41a:	e7bb      	b.n	800f394 <tcp_write+0x1b0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f41c:	2301      	movs	r3, #1
 800f41e:	9302      	str	r3, [sp, #8]
 800f420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f422:	9301      	str	r3, [sp, #4]
 800f424:	f8cd 9000 	str.w	r9, [sp]
 800f428:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800f42c:	4622      	mov	r2, r4
 800f42e:	4629      	mov	r1, r5
 800f430:	2000      	movs	r0, #0
 800f432:	f7ff fd4d 	bl	800eed0 <tcp_pbuf_prealloc>
 800f436:	4604      	mov	r4, r0
 800f438:	900c      	str	r0, [sp, #48]	; 0x30
 800f43a:	2800      	cmp	r0, #0
 800f43c:	f000 819c 	beq.w	800f778 <tcp_write+0x594>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f440:	462a      	mov	r2, r5
 800f442:	9b07      	ldr	r3, [sp, #28]
 800f444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f446:	1859      	adds	r1, r3, r1
 800f448:	6840      	ldr	r0, [r0, #4]
 800f44a:	f003 f872 	bl	8012532 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800f44e:	4620      	mov	r0, r4
 800f450:	f7fc fde6 	bl	800c020 <pbuf_clen>
 800f454:	4406      	add	r6, r0
 800f456:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800f458:	2300      	movs	r3, #0
 800f45a:	930d      	str	r3, [sp, #52]	; 0x34
 800f45c:	e7d5      	b.n	800f40a <tcp_write+0x226>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f460:	b90b      	cbnz	r3, 800f466 <tcp_write+0x282>
          extendlen = seglen;
 800f462:	950d      	str	r5, [sp, #52]	; 0x34
 800f464:	e7d1      	b.n	800f40a <tcp_write+0x226>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f466:	4b1c      	ldr	r3, [pc, #112]	; (800f4d8 <tcp_write+0x2f4>)
 800f468:	f240 2231 	movw	r2, #561	; 0x231
 800f46c:	4923      	ldr	r1, [pc, #140]	; (800f4fc <tcp_write+0x318>)
 800f46e:	481c      	ldr	r0, [pc, #112]	; (800f4e0 <tcp_write+0x2fc>)
 800f470:	f003 f8d0 	bl	8012614 <iprintf>
          extendlen = seglen;
 800f474:	950d      	str	r5, [sp, #52]	; 0x34
 800f476:	e7c8      	b.n	800f40a <tcp_write+0x226>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f478:	4b17      	ldr	r3, [pc, #92]	; (800f4d8 <tcp_write+0x2f4>)
 800f47a:	f240 224a 	movw	r2, #586	; 0x24a
 800f47e:	4920      	ldr	r1, [pc, #128]	; (800f500 <tcp_write+0x31c>)
 800f480:	4817      	ldr	r0, [pc, #92]	; (800f4e0 <tcp_write+0x2fc>)
 800f482:	f003 f8c7 	bl	8012614 <iprintf>
 800f486:	e76a      	b.n	800f35e <tcp_write+0x17a>
  struct pbuf *concat_p = NULL;
 800f488:	970c      	str	r7, [sp, #48]	; 0x30
 800f48a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f48c:	e0c4      	b.n	800f618 <tcp_write+0x434>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f48e:	fab7 f387 	clz	r3, r7
 800f492:	095b      	lsrs	r3, r3, #5
 800f494:	9302      	str	r3, [sp, #8]
 800f496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f498:	9301      	str	r3, [sp, #4]
 800f49a:	f8cd 9000 	str.w	r9, [sp]
 800f49e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800f4a2:	465a      	mov	r2, fp
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	2036      	movs	r0, #54	; 0x36
 800f4a8:	f7ff fd12 	bl	800eed0 <tcp_pbuf_prealloc>
 800f4ac:	4680      	mov	r8, r0
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d07f      	beq.n	800f5b2 <tcp_write+0x3ce>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f4b2:	8943      	ldrh	r3, [r0, #10]
 800f4b4:	42ab      	cmp	r3, r5
 800f4b6:	d307      	bcc.n	800f4c8 <tcp_write+0x2e4>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f4b8:	462a      	mov	r2, r5
 800f4ba:	9b07      	ldr	r3, [sp, #28]
 800f4bc:	1919      	adds	r1, r3, r4
 800f4be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f4c2:	f003 f836 	bl	8012532 <memcpy>
 800f4c6:	e03d      	b.n	800f544 <tcp_write+0x360>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f4c8:	4b03      	ldr	r3, [pc, #12]	; (800f4d8 <tcp_write+0x2f4>)
 800f4ca:	f240 2266 	movw	r2, #614	; 0x266
 800f4ce:	490d      	ldr	r1, [pc, #52]	; (800f504 <tcp_write+0x320>)
 800f4d0:	4803      	ldr	r0, [pc, #12]	; (800f4e0 <tcp_write+0x2fc>)
 800f4d2:	f003 f89f 	bl	8012614 <iprintf>
 800f4d6:	e7ef      	b.n	800f4b8 <tcp_write+0x2d4>
 800f4d8:	080153f4 	.word	0x080153f4
 800f4dc:	080155c4 	.word	0x080155c4
 800f4e0:	0801397c 	.word	0x0801397c
 800f4e4:	080155dc 	.word	0x080155dc
 800f4e8:	08015610 	.word	0x08015610
 800f4ec:	0801564c 	.word	0x0801564c
 800f4f0:	080156b8 	.word	0x080156b8
 800f4f4:	08015680 	.word	0x08015680
 800f4f8:	08015698 	.word	0x08015698
 800f4fc:	080156d8 	.word	0x080156d8
 800f500:	08015704 	.word	0x08015704
 800f504:	08015734 	.word	0x08015734
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f508:	4ba7      	ldr	r3, [pc, #668]	; (800f7a8 <tcp_write+0x5c4>)
 800f50a:	f240 2271 	movw	r2, #625	; 0x271
 800f50e:	49a7      	ldr	r1, [pc, #668]	; (800f7ac <tcp_write+0x5c8>)
 800f510:	48a7      	ldr	r0, [pc, #668]	; (800f7b0 <tcp_write+0x5cc>)
 800f512:	f003 f87f 	bl	8012614 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f516:	2201      	movs	r2, #1
 800f518:	4629      	mov	r1, r5
 800f51a:	2036      	movs	r0, #54	; 0x36
 800f51c:	f7fc fc78 	bl	800be10 <pbuf_alloc>
 800f520:	9006      	str	r0, [sp, #24]
 800f522:	2800      	cmp	r0, #0
 800f524:	d045      	beq.n	800f5b2 <tcp_write+0x3ce>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f526:	9b07      	ldr	r3, [sp, #28]
 800f528:	4423      	add	r3, r4
 800f52a:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f52c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f530:	2100      	movs	r1, #0
 800f532:	2036      	movs	r0, #54	; 0x36
 800f534:	f7fc fc6c 	bl	800be10 <pbuf_alloc>
 800f538:	4680      	mov	r8, r0
 800f53a:	2800      	cmp	r0, #0
 800f53c:	d032      	beq.n	800f5a4 <tcp_write+0x3c0>
      pbuf_cat(p/*header*/, p2/*data*/);
 800f53e:	9906      	ldr	r1, [sp, #24]
 800f540:	f7fc fd96 	bl	800c070 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800f544:	4640      	mov	r0, r8
 800f546:	f7fc fd6b 	bl	800c020 <pbuf_clen>
 800f54a:	4406      	add	r6, r0
 800f54c:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f54e:	2e10      	cmp	r6, #16
 800f550:	d82c      	bhi.n	800f5ac <tcp_write+0x3c8>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f552:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800f556:	2200      	movs	r2, #0
 800f558:	9200      	str	r2, [sp, #0]
 800f55a:	4423      	add	r3, r4
 800f55c:	4641      	mov	r1, r8
 800f55e:	4648      	mov	r0, r9
 800f560:	f7ff fd12 	bl	800ef88 <tcp_create_segment>
 800f564:	4680      	mov	r8, r0
 800f566:	b320      	cbz	r0, 800f5b2 <tcp_write+0x3ce>
    if (queue == NULL) {
 800f568:	2f00      	cmp	r7, #0
 800f56a:	d04d      	beq.n	800f608 <tcp_write+0x424>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f56c:	9b05      	ldr	r3, [sp, #20]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d042      	beq.n	800f5f8 <tcp_write+0x414>
      prev_seg->next = seg;
 800f572:	9b05      	ldr	r3, [sp, #20]
 800f574:	f8c3 8000 	str.w	r8, [r3]
    pos += seglen;
 800f578:	442c      	add	r4, r5
 800f57a:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800f57c:	45a2      	cmp	sl, r4
 800f57e:	d952      	bls.n	800f626 <tcp_write+0x442>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f580:	f8cd 8014 	str.w	r8, [sp, #20]
    u16_t left = len - pos;
 800f584:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800f588:	b2ad      	uxth	r5, r5
 800f58a:	455d      	cmp	r5, fp
 800f58c:	bf28      	it	cs
 800f58e:	465d      	movcs	r5, fp
 800f590:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f592:	9b08      	ldr	r3, [sp, #32]
 800f594:	2b00      	cmp	r3, #0
 800f596:	f47f af7a 	bne.w	800f48e <tcp_write+0x2aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f59a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d0b9      	beq.n	800f516 <tcp_write+0x332>
 800f5a2:	e7b1      	b.n	800f508 <tcp_write+0x324>
        pbuf_free(p2);
 800f5a4:	9806      	ldr	r0, [sp, #24]
 800f5a6:	f7fc fbc3 	bl	800bd30 <pbuf_free>
        goto memerr;
 800f5aa:	e002      	b.n	800f5b2 <tcp_write+0x3ce>
      pbuf_free(p);
 800f5ac:	4640      	mov	r0, r8
 800f5ae:	f7fc fbbf 	bl	800bd30 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f5b2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800f5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5ba:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800f5be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5c0:	b113      	cbz	r3, 800f5c8 <tcp_write+0x3e4>
    pbuf_free(concat_p);
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fc fbb4 	bl	800bd30 <pbuf_free>
  if (queue != NULL) {
 800f5c8:	b117      	cbz	r7, 800f5d0 <tcp_write+0x3ec>
    tcp_segs_free(queue);
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	f7fd f875 	bl	800c6ba <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800f5d0:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 80c9 	beq.w	800f76c <tcp_write+0x588>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f5da:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f040 80c7 	bne.w	800f772 <tcp_write+0x58e>
 800f5e4:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f000 80b1 	beq.w	800f750 <tcp_write+0x56c>
  return ERR_MEM;
 800f5ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f5f2:	b011      	add	sp, #68	; 0x44
 800f5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f5f8:	4b6b      	ldr	r3, [pc, #428]	; (800f7a8 <tcp_write+0x5c4>)
 800f5fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f5fe:	496d      	ldr	r1, [pc, #436]	; (800f7b4 <tcp_write+0x5d0>)
 800f600:	486b      	ldr	r0, [pc, #428]	; (800f7b0 <tcp_write+0x5cc>)
 800f602:	f003 f807 	bl	8012614 <iprintf>
 800f606:	e7b4      	b.n	800f572 <tcp_write+0x38e>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f608:	4607      	mov	r7, r0
 800f60a:	e7b5      	b.n	800f578 <tcp_write+0x394>
 800f60c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 800f60e:	970c      	str	r7, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 800f610:	2300      	movs	r3, #0
 800f612:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 800f614:	45a2      	cmp	sl, r4
 800f616:	d906      	bls.n	800f626 <tcp_write+0x442>
 800f618:	2700      	movs	r7, #0
 800f61a:	9705      	str	r7, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f61e:	f003 0301 	and.w	r3, r3, #1
 800f622:	9308      	str	r3, [sp, #32]
 800f624:	e7ae      	b.n	800f584 <tcp_write+0x3a0>
  if (oversize_used > 0) {
 800f626:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f628:	2d00      	cmp	r5, #0
 800f62a:	f000 80d0 	beq.w	800f7ce <tcp_write+0x5ea>
    for (p = last_unsent->p; p; p = p->next) {
 800f62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f630:	685c      	ldr	r4, [r3, #4]
 800f632:	b1b4      	cbz	r4, 800f662 <tcp_write+0x47e>
 800f634:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800f638:	e000      	b.n	800f63c <tcp_write+0x458>
  u16_t extendlen = 0;
 800f63a:	461c      	mov	r4, r3
      p->tot_len += oversize_used;
 800f63c:	8923      	ldrh	r3, [r4, #8]
 800f63e:	442b      	add	r3, r5
 800f640:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d1f8      	bne.n	800f63a <tcp_write+0x456>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f648:	8963      	ldrh	r3, [r4, #10]
 800f64a:	6860      	ldr	r0, [r4, #4]
 800f64c:	462a      	mov	r2, r5
 800f64e:	4659      	mov	r1, fp
 800f650:	4418      	add	r0, r3
 800f652:	f002 ff6e 	bl	8012532 <memcpy>
        p->len += oversize_used;
 800f656:	8963      	ldrh	r3, [r4, #10]
 800f658:	442b      	add	r3, r5
 800f65a:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1eb      	bne.n	800f63a <tcp_write+0x456>
    last_unsent->len += oversize_used;
 800f662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f664:	8913      	ldrh	r3, [r2, #8]
 800f666:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f668:	4419      	add	r1, r3
 800f66a:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800f66c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f670:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800f674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f676:	2b00      	cmp	r3, #0
 800f678:	f000 8088 	beq.w	800f78c <tcp_write+0x5a8>
    pbuf_cat(last_unsent->p, concat_p);
 800f67c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f67e:	4629      	mov	r1, r5
 800f680:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f682:	6860      	ldr	r0, [r4, #4]
 800f684:	f7fc fcf4 	bl	800c070 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f688:	8923      	ldrh	r3, [r4, #8]
 800f68a:	892a      	ldrh	r2, [r5, #8]
 800f68c:	4413      	add	r3, r2
 800f68e:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800f690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f692:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 800f694:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800f698:	4453      	add	r3, sl
 800f69a:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 800f69e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800f6a2:	eba3 0a0a 	sub.w	sl, r3, sl
 800f6a6:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800f6aa:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800f6ae:	b11e      	cbz	r6, 800f6b8 <tcp_write+0x4d4>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f6b0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d035      	beq.n	800f724 <tcp_write+0x540>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f6b8:	f1b8 0f00 	cmp.w	r8, #0
 800f6bc:	d052      	beq.n	800f764 <tcp_write+0x580>
 800f6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d050      	beq.n	800f768 <tcp_write+0x584>
 800f6c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6c8:	f012 0f02 	tst.w	r2, #2
 800f6cc:	d036      	beq.n	800f73c <tcp_write+0x558>
  return ERR_OK;
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	e78f      	b.n	800f5f2 <tcp_write+0x40e>
  } else if (extendlen > 0) {
 800f6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6d4:	b303      	cbz	r3, 800f718 <tcp_write+0x534>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d15a      	bne.n	800f792 <tcp_write+0x5ae>
 800f6dc:	4b32      	ldr	r3, [pc, #200]	; (800f7a8 <tcp_write+0x5c4>)
 800f6de:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f6e2:	4935      	ldr	r1, [pc, #212]	; (800f7b8 <tcp_write+0x5d4>)
 800f6e4:	4832      	ldr	r0, [pc, #200]	; (800f7b0 <tcp_write+0x5cc>)
 800f6e6:	f002 ff95 	bl	8012614 <iprintf>
 800f6ea:	e056      	b.n	800f79a <tcp_write+0x5b6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f6ec:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800f6ee:	890b      	ldrh	r3, [r1, #8]
 800f6f0:	4403      	add	r3, r0
 800f6f2:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f6f4:	6813      	ldr	r3, [r2, #0]
 800f6f6:	4611      	mov	r1, r2
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1f7      	bne.n	800f6ec <tcp_write+0x508>
    p->tot_len += extendlen;
 800f6fc:	8913      	ldrh	r3, [r2, #8]
 800f6fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f700:	440b      	add	r3, r1
 800f702:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800f704:	8953      	ldrh	r3, [r2, #10]
 800f706:	440b      	add	r3, r1
 800f708:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800f70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f70c:	8913      	ldrh	r3, [r2, #8]
 800f70e:	440b      	add	r3, r1
 800f710:	8113      	strh	r3, [r2, #8]
 800f712:	e7bd      	b.n	800f690 <tcp_write+0x4ac>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f714:	460a      	mov	r2, r1
 800f716:	e7f1      	b.n	800f6fc <tcp_write+0x518>
  if (last_unsent == NULL) {
 800f718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1b8      	bne.n	800f690 <tcp_write+0x4ac>
    pcb->unsent = queue;
 800f71e:	f8c9 706c 	str.w	r7, [r9, #108]	; 0x6c
 800f722:	e7b7      	b.n	800f694 <tcp_write+0x4b0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f724:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1c5      	bne.n	800f6b8 <tcp_write+0x4d4>
 800f72c:	4b1e      	ldr	r3, [pc, #120]	; (800f7a8 <tcp_write+0x5c4>)
 800f72e:	f240 3212 	movw	r2, #786	; 0x312
 800f732:	4922      	ldr	r1, [pc, #136]	; (800f7bc <tcp_write+0x5d8>)
 800f734:	481e      	ldr	r0, [pc, #120]	; (800f7b0 <tcp_write+0x5cc>)
 800f736:	f002 ff6d 	bl	8012614 <iprintf>
 800f73a:	e7bd      	b.n	800f6b8 <tcp_write+0x4d4>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f73c:	899c      	ldrh	r4, [r3, #12]
 800f73e:	2008      	movs	r0, #8
 800f740:	f7fb fce8 	bl	800b114 <lwip_htons>
 800f744:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f748:	4304      	orrs	r4, r0
 800f74a:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800f74c:	2000      	movs	r0, #0
 800f74e:	e750      	b.n	800f5f2 <tcp_write+0x40e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f750:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <tcp_write+0x5c4>)
 800f752:	f240 3227 	movw	r2, #807	; 0x327
 800f756:	4919      	ldr	r1, [pc, #100]	; (800f7bc <tcp_write+0x5d8>)
 800f758:	4815      	ldr	r0, [pc, #84]	; (800f7b0 <tcp_write+0x5cc>)
 800f75a:	f002 ff5b 	bl	8012614 <iprintf>
  return ERR_MEM;
 800f75e:	f04f 30ff 	mov.w	r0, #4294967295
 800f762:	e746      	b.n	800f5f2 <tcp_write+0x40e>
  return ERR_OK;
 800f764:	2000      	movs	r0, #0
 800f766:	e744      	b.n	800f5f2 <tcp_write+0x40e>
 800f768:	2000      	movs	r0, #0
 800f76a:	e742      	b.n	800f5f2 <tcp_write+0x40e>
  return ERR_MEM;
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
 800f770:	e73f      	b.n	800f5f2 <tcp_write+0x40e>
 800f772:	f04f 30ff 	mov.w	r0, #4294967295
 800f776:	e73c      	b.n	800f5f2 <tcp_write+0x40e>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f778:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800f77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f780:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (queue != NULL) {
 800f784:	e724      	b.n	800f5d0 <tcp_write+0x3ec>
    return ERR_CONN;
 800f786:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 800f78a:	e732      	b.n	800f5f2 <tcp_write+0x40e>
  } else if (extendlen > 0) {
 800f78c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d0c2      	beq.n	800f718 <tcp_write+0x534>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d0a0      	beq.n	800f6dc <tcp_write+0x4f8>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f79c:	6859      	ldr	r1, [r3, #4]
 800f79e:	680a      	ldr	r2, [r1, #0]
 800f7a0:	2a00      	cmp	r2, #0
 800f7a2:	d0b7      	beq.n	800f714 <tcp_write+0x530>
 800f7a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f7a6:	e7a2      	b.n	800f6ee <tcp_write+0x50a>
 800f7a8:	080153f4 	.word	0x080153f4
 800f7ac:	08015774 	.word	0x08015774
 800f7b0:	0801397c 	.word	0x0801397c
 800f7b4:	08015784 	.word	0x08015784
 800f7b8:	080157d0 	.word	0x080157d0
 800f7bc:	08015808 	.word	0x08015808
  while (pos < len) {
 800f7c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c8:	930c      	str	r3, [sp, #48]	; 0x30
 800f7ca:	461f      	mov	r7, r3
 800f7cc:	4698      	mov	r8, r3
  pcb->unsent_oversize = oversize;
 800f7ce:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f7d2:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800f7d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f43f af7a 	beq.w	800f6d2 <tcp_write+0x4ee>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f47f af4b 	bne.w	800f67c <tcp_write+0x498>
 800f7e6:	4b04      	ldr	r3, [pc, #16]	; (800f7f8 <tcp_write+0x614>)
 800f7e8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800f7ec:	4903      	ldr	r1, [pc, #12]	; (800f7fc <tcp_write+0x618>)
 800f7ee:	4804      	ldr	r0, [pc, #16]	; (800f800 <tcp_write+0x61c>)
 800f7f0:	f002 ff10 	bl	8012614 <iprintf>
 800f7f4:	e742      	b.n	800f67c <tcp_write+0x498>
 800f7f6:	bf00      	nop
 800f7f8:	080153f4 	.word	0x080153f4
 800f7fc:	08015798 	.word	0x08015798
 800f800:	0801397c 	.word	0x0801397c

0800f804 <tcp_split_unsent_seg>:
{
 800f804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f808:	b083      	sub	sp, #12
 800f80a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f80c:	4607      	mov	r7, r0
 800f80e:	2800      	cmp	r0, #0
 800f810:	d03a      	beq.n	800f888 <tcp_split_unsent_seg+0x84>
  useg = pcb->unsent;
 800f812:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 800f814:	2d00      	cmp	r5, #0
 800f816:	f000 80b9 	beq.w	800f98c <tcp_split_unsent_seg+0x188>
  if (split == 0) {
 800f81a:	2c00      	cmp	r4, #0
 800f81c:	d03c      	beq.n	800f898 <tcp_split_unsent_seg+0x94>
  if (useg->len <= split) {
 800f81e:	892b      	ldrh	r3, [r5, #8]
 800f820:	42a3      	cmp	r3, r4
 800f822:	f240 80b6 	bls.w	800f992 <tcp_split_unsent_seg+0x18e>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f826:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f828:	42a3      	cmp	r3, r4
 800f82a:	d33f      	bcc.n	800f8ac <tcp_split_unsent_seg+0xa8>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f82c:	892b      	ldrh	r3, [r5, #8]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d044      	beq.n	800f8bc <tcp_split_unsent_seg+0xb8>
  optflags = useg->flags;
 800f832:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f836:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800f83a:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800f83e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800f842:	ebaa 0604 	sub.w	r6, sl, r4
 800f846:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f848:	eb06 010b 	add.w	r1, r6, fp
 800f84c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f850:	b289      	uxth	r1, r1
 800f852:	2036      	movs	r0, #54	; 0x36
 800f854:	f7fc fadc 	bl	800be10 <pbuf_alloc>
  if (p == NULL) {
 800f858:	4680      	mov	r8, r0
 800f85a:	2800      	cmp	r0, #0
 800f85c:	f000 809d 	beq.w	800f99a <tcp_split_unsent_seg+0x196>
  offset = useg->p->tot_len - useg->len + split;
 800f860:	6868      	ldr	r0, [r5, #4]
 800f862:	8903      	ldrh	r3, [r0, #8]
 800f864:	892a      	ldrh	r2, [r5, #8]
 800f866:	1a9b      	subs	r3, r3, r2
 800f868:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f86a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	4632      	mov	r2, r6
 800f872:	4459      	add	r1, fp
 800f874:	f7fc fce4 	bl	800c240 <pbuf_copy_partial>
 800f878:	42b0      	cmp	r0, r6
 800f87a:	d027      	beq.n	800f8cc <tcp_split_unsent_seg+0xc8>
    pbuf_free(p);
 800f87c:	4640      	mov	r0, r8
 800f87e:	f7fc fa57 	bl	800bd30 <pbuf_free>
  return ERR_MEM;
 800f882:	f04f 30ff 	mov.w	r0, #4294967295
 800f886:	e085      	b.n	800f994 <tcp_split_unsent_seg+0x190>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f888:	4b45      	ldr	r3, [pc, #276]	; (800f9a0 <tcp_split_unsent_seg+0x19c>)
 800f88a:	f240 324b 	movw	r2, #843	; 0x34b
 800f88e:	4945      	ldr	r1, [pc, #276]	; (800f9a4 <tcp_split_unsent_seg+0x1a0>)
 800f890:	4845      	ldr	r0, [pc, #276]	; (800f9a8 <tcp_split_unsent_seg+0x1a4>)
 800f892:	f002 febf 	bl	8012614 <iprintf>
 800f896:	e7bc      	b.n	800f812 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f898:	4b41      	ldr	r3, [pc, #260]	; (800f9a0 <tcp_split_unsent_seg+0x19c>)
 800f89a:	f240 3253 	movw	r2, #851	; 0x353
 800f89e:	4943      	ldr	r1, [pc, #268]	; (800f9ac <tcp_split_unsent_seg+0x1a8>)
 800f8a0:	4841      	ldr	r0, [pc, #260]	; (800f9a8 <tcp_split_unsent_seg+0x1a4>)
 800f8a2:	f002 feb7 	bl	8012614 <iprintf>
    return ERR_VAL;
 800f8a6:	f06f 0005 	mvn.w	r0, #5
 800f8aa:	e073      	b.n	800f994 <tcp_split_unsent_seg+0x190>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f8ac:	4b3c      	ldr	r3, [pc, #240]	; (800f9a0 <tcp_split_unsent_seg+0x19c>)
 800f8ae:	f240 325b 	movw	r2, #859	; 0x35b
 800f8b2:	493f      	ldr	r1, [pc, #252]	; (800f9b0 <tcp_split_unsent_seg+0x1ac>)
 800f8b4:	483c      	ldr	r0, [pc, #240]	; (800f9a8 <tcp_split_unsent_seg+0x1a4>)
 800f8b6:	f002 fead 	bl	8012614 <iprintf>
 800f8ba:	e7b7      	b.n	800f82c <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f8bc:	4b38      	ldr	r3, [pc, #224]	; (800f9a0 <tcp_split_unsent_seg+0x19c>)
 800f8be:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f8c2:	493c      	ldr	r1, [pc, #240]	; (800f9b4 <tcp_split_unsent_seg+0x1b0>)
 800f8c4:	4838      	ldr	r0, [pc, #224]	; (800f9a8 <tcp_split_unsent_seg+0x1a4>)
 800f8c6:	f002 fea5 	bl	8012614 <iprintf>
 800f8ca:	e7b2      	b.n	800f832 <tcp_split_unsent_seg+0x2e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f8cc:	68eb      	ldr	r3, [r5, #12]
 800f8ce:	8998      	ldrh	r0, [r3, #12]
 800f8d0:	f7fb fc20 	bl	800b114 <lwip_htons>
 800f8d4:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800f8d6:	f010 0b08 	ands.w	fp, r0, #8
 800f8da:	d14e      	bne.n	800f97a <tcp_split_unsent_seg+0x176>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f8dc:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 800f8e0:	f016 0f01 	tst.w	r6, #1
 800f8e4:	d003      	beq.n	800f8ee <tcp_split_unsent_seg+0xea>
    split_flags &= ~TCP_FIN;
 800f8e6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800f8ea:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f8ee:	68eb      	ldr	r3, [r5, #12]
 800f8f0:	6858      	ldr	r0, [r3, #4]
 800f8f2:	f7fb fc14 	bl	800b11e <lwip_htonl>
 800f8f6:	f8cd 9000 	str.w	r9, [sp]
 800f8fa:	1823      	adds	r3, r4, r0
 800f8fc:	465a      	mov	r2, fp
 800f8fe:	4641      	mov	r1, r8
 800f900:	4638      	mov	r0, r7
 800f902:	f7ff fb41 	bl	800ef88 <tcp_create_segment>
  if (seg == NULL) {
 800f906:	4681      	mov	r9, r0
 800f908:	2800      	cmp	r0, #0
 800f90a:	d0b7      	beq.n	800f87c <tcp_split_unsent_seg+0x78>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f90c:	6868      	ldr	r0, [r5, #4]
 800f90e:	f7fc fb87 	bl	800c020 <pbuf_clen>
 800f912:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f916:	1a1b      	subs	r3, r3, r0
 800f918:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f91c:	6868      	ldr	r0, [r5, #4]
 800f91e:	eba4 040a 	sub.w	r4, r4, sl
 800f922:	b2a4      	uxth	r4, r4
 800f924:	8901      	ldrh	r1, [r0, #8]
 800f926:	4421      	add	r1, r4
 800f928:	b289      	uxth	r1, r1
 800f92a:	f7fc fb19 	bl	800bf60 <pbuf_realloc>
  useg->len -= remainder;
 800f92e:	892b      	ldrh	r3, [r5, #8]
 800f930:	441c      	add	r4, r3
 800f932:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f934:	68eb      	ldr	r3, [r5, #12]
 800f936:	899c      	ldrh	r4, [r3, #12]
 800f938:	4630      	mov	r0, r6
 800f93a:	f7fb fbeb 	bl	800b114 <lwip_htons>
 800f93e:	68eb      	ldr	r3, [r5, #12]
 800f940:	4304      	orrs	r4, r0
 800f942:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f944:	6868      	ldr	r0, [r5, #4]
 800f946:	f7fc fb6b 	bl	800c020 <pbuf_clen>
 800f94a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f94e:	4418      	add	r0, r3
 800f950:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f954:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f958:	f7fc fb62 	bl	800c020 <pbuf_clen>
 800f95c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f960:	4418      	add	r0, r3
 800f962:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 800f966:	682b      	ldr	r3, [r5, #0]
 800f968:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800f96c:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800f970:	f8d9 3000 	ldr.w	r3, [r9]
 800f974:	b133      	cbz	r3, 800f984 <tcp_split_unsent_seg+0x180>
  return ERR_OK;
 800f976:	2000      	movs	r0, #0
 800f978:	e00c      	b.n	800f994 <tcp_split_unsent_seg+0x190>
    split_flags &= ~TCP_PSH;
 800f97a:	f006 0637 	and.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800f97e:	f04f 0b08 	mov.w	fp, #8
 800f982:	e7ad      	b.n	800f8e0 <tcp_split_unsent_seg+0xdc>
    pcb->unsent_oversize = 0;
 800f984:	2000      	movs	r0, #0
 800f986:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 800f98a:	e003      	b.n	800f994 <tcp_split_unsent_seg+0x190>
    return ERR_MEM;
 800f98c:	f04f 30ff 	mov.w	r0, #4294967295
 800f990:	e000      	b.n	800f994 <tcp_split_unsent_seg+0x190>
    return ERR_OK;
 800f992:	2000      	movs	r0, #0
}
 800f994:	b003      	add	sp, #12
 800f996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800f99a:	f04f 30ff 	mov.w	r0, #4294967295
 800f99e:	e7f9      	b.n	800f994 <tcp_split_unsent_seg+0x190>
 800f9a0:	080153f4 	.word	0x080153f4
 800f9a4:	08015828 	.word	0x08015828
 800f9a8:	0801397c 	.word	0x0801397c
 800f9ac:	0801584c 	.word	0x0801584c
 800f9b0:	08015870 	.word	0x08015870
 800f9b4:	08015880 	.word	0x08015880

0800f9b8 <tcp_enqueue_flags>:
{
 800f9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9bc:	b083      	sub	sp, #12
 800f9be:	4604      	mov	r4, r0
 800f9c0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f9c2:	f011 0703 	ands.w	r7, r1, #3
 800f9c6:	d048      	beq.n	800fa5a <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f9c8:	2c00      	cmp	r4, #0
 800f9ca:	d04e      	beq.n	800fa6a <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 800f9cc:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f9d0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800f9d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9d8:	4641      	mov	r1, r8
 800f9da:	2036      	movs	r0, #54	; 0x36
 800f9dc:	f7fc fa18 	bl	800be10 <pbuf_alloc>
 800f9e0:	4681      	mov	r9, r0
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	d049      	beq.n	800fa7a <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f9e6:	8943      	ldrh	r3, [r0, #10]
 800f9e8:	4543      	cmp	r3, r8
 800f9ea:	d34d      	bcc.n	800fa88 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f9ec:	9600      	str	r6, [sp, #0]
 800f9ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f9f0:	462a      	mov	r2, r5
 800f9f2:	4649      	mov	r1, r9
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f7ff fac7 	bl	800ef88 <tcp_create_segment>
 800f9fa:	4606      	mov	r6, r0
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d04b      	beq.n	800fa98 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fa00:	68c3      	ldr	r3, [r0, #12]
 800fa02:	f013 0f03 	tst.w	r3, #3
 800fa06:	d14e      	bne.n	800faa6 <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fa08:	8933      	ldrh	r3, [r6, #8]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d153      	bne.n	800fab6 <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 800fa0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d058      	beq.n	800fac6 <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fa14:	461a      	mov	r2, r3
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1fb      	bne.n	800fa14 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800fa1c:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fa24:	b117      	cbz	r7, 800fa2c <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800fa26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800fa28:	3301      	adds	r3, #1
 800fa2a:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800fa2c:	f015 0f01 	tst.w	r5, #1
 800fa30:	d003      	beq.n	800fa3a <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 800fa32:	8b63      	ldrh	r3, [r4, #26]
 800fa34:	f043 0320 	orr.w	r3, r3, #32
 800fa38:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fa3a:	6870      	ldr	r0, [r6, #4]
 800fa3c:	f7fc faf0 	bl	800c020 <pbuf_clen>
 800fa40:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800fa44:	4418      	add	r0, r3
 800fa46:	b280      	uxth	r0, r0
 800fa48:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d049      	beq.n	800fae4 <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fa50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d039      	beq.n	800faca <tcp_enqueue_flags+0x112>
  return ERR_OK;
 800fa56:	2000      	movs	r0, #0
 800fa58:	e045      	b.n	800fae6 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fa5a:	4b24      	ldr	r3, [pc, #144]	; (800faec <tcp_enqueue_flags+0x134>)
 800fa5c:	f240 4211 	movw	r2, #1041	; 0x411
 800fa60:	4923      	ldr	r1, [pc, #140]	; (800faf0 <tcp_enqueue_flags+0x138>)
 800fa62:	4824      	ldr	r0, [pc, #144]	; (800faf4 <tcp_enqueue_flags+0x13c>)
 800fa64:	f002 fdd6 	bl	8012614 <iprintf>
 800fa68:	e7ae      	b.n	800f9c8 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fa6a:	4b20      	ldr	r3, [pc, #128]	; (800faec <tcp_enqueue_flags+0x134>)
 800fa6c:	f240 4213 	movw	r2, #1043	; 0x413
 800fa70:	4921      	ldr	r1, [pc, #132]	; (800faf8 <tcp_enqueue_flags+0x140>)
 800fa72:	4820      	ldr	r0, [pc, #128]	; (800faf4 <tcp_enqueue_flags+0x13c>)
 800fa74:	f002 fdce 	bl	8012614 <iprintf>
 800fa78:	e7a8      	b.n	800f9cc <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fa7a:	8b63      	ldrh	r3, [r4, #26]
 800fa7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa80:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800fa82:	f04f 30ff 	mov.w	r0, #4294967295
 800fa86:	e02e      	b.n	800fae6 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fa88:	4b18      	ldr	r3, [pc, #96]	; (800faec <tcp_enqueue_flags+0x134>)
 800fa8a:	f240 4239 	movw	r2, #1081	; 0x439
 800fa8e:	491b      	ldr	r1, [pc, #108]	; (800fafc <tcp_enqueue_flags+0x144>)
 800fa90:	4818      	ldr	r0, [pc, #96]	; (800faf4 <tcp_enqueue_flags+0x13c>)
 800fa92:	f002 fdbf 	bl	8012614 <iprintf>
 800fa96:	e7a9      	b.n	800f9ec <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fa98:	8b63      	ldrh	r3, [r4, #26]
 800fa9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa9e:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800faa0:	f04f 30ff 	mov.w	r0, #4294967295
 800faa4:	e01f      	b.n	800fae6 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800faa6:	4b11      	ldr	r3, [pc, #68]	; (800faec <tcp_enqueue_flags+0x134>)
 800faa8:	f240 4242 	movw	r2, #1090	; 0x442
 800faac:	4914      	ldr	r1, [pc, #80]	; (800fb00 <tcp_enqueue_flags+0x148>)
 800faae:	4811      	ldr	r0, [pc, #68]	; (800faf4 <tcp_enqueue_flags+0x13c>)
 800fab0:	f002 fdb0 	bl	8012614 <iprintf>
 800fab4:	e7a8      	b.n	800fa08 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fab6:	4b0d      	ldr	r3, [pc, #52]	; (800faec <tcp_enqueue_flags+0x134>)
 800fab8:	f240 4243 	movw	r2, #1091	; 0x443
 800fabc:	4911      	ldr	r1, [pc, #68]	; (800fb04 <tcp_enqueue_flags+0x14c>)
 800fabe:	480d      	ldr	r0, [pc, #52]	; (800faf4 <tcp_enqueue_flags+0x13c>)
 800fac0:	f002 fda8 	bl	8012614 <iprintf>
 800fac4:	e7a3      	b.n	800fa0e <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800fac6:	66e6      	str	r6, [r4, #108]	; 0x6c
 800fac8:	e7a9      	b.n	800fa1e <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800faca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800facc:	b10b      	cbz	r3, 800fad2 <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800face:	2000      	movs	r0, #0
 800fad0:	e009      	b.n	800fae6 <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fad2:	4b06      	ldr	r3, [pc, #24]	; (800faec <tcp_enqueue_flags+0x134>)
 800fad4:	f240 4265 	movw	r2, #1125	; 0x465
 800fad8:	490b      	ldr	r1, [pc, #44]	; (800fb08 <tcp_enqueue_flags+0x150>)
 800fada:	4806      	ldr	r0, [pc, #24]	; (800faf4 <tcp_enqueue_flags+0x13c>)
 800fadc:	f002 fd9a 	bl	8012614 <iprintf>
  return ERR_OK;
 800fae0:	2000      	movs	r0, #0
 800fae2:	e000      	b.n	800fae6 <tcp_enqueue_flags+0x12e>
 800fae4:	2000      	movs	r0, #0
}
 800fae6:	b003      	add	sp, #12
 800fae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faec:	080153f4 	.word	0x080153f4
 800faf0:	08015890 	.word	0x08015890
 800faf4:	0801397c 	.word	0x0801397c
 800faf8:	080158e8 	.word	0x080158e8
 800fafc:	08015908 	.word	0x08015908
 800fb00:	08015944 	.word	0x08015944
 800fb04:	0801595c 	.word	0x0801595c
 800fb08:	08015988 	.word	0x08015988

0800fb0c <tcp_send_fin>:
{
 800fb0c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fb0e:	4605      	mov	r5, r0
 800fb10:	b188      	cbz	r0, 800fb36 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800fb12:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800fb14:	b153      	cbz	r3, 800fb2c <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fb16:	461c      	mov	r4, r3
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1fb      	bne.n	800fb16 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fb1e:	68e3      	ldr	r3, [r4, #12]
 800fb20:	8998      	ldrh	r0, [r3, #12]
 800fb22:	f7fb faf7 	bl	800b114 <lwip_htons>
 800fb26:	f010 0f07 	tst.w	r0, #7
 800fb2a:	d00c      	beq.n	800fb46 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	4628      	mov	r0, r5
 800fb30:	f7ff ff42 	bl	800f9b8 <tcp_enqueue_flags>
}
 800fb34:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fb36:	4b0b      	ldr	r3, [pc, #44]	; (800fb64 <tcp_send_fin+0x58>)
 800fb38:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fb3c:	490a      	ldr	r1, [pc, #40]	; (800fb68 <tcp_send_fin+0x5c>)
 800fb3e:	480b      	ldr	r0, [pc, #44]	; (800fb6c <tcp_send_fin+0x60>)
 800fb40:	f002 fd68 	bl	8012614 <iprintf>
 800fb44:	e7e5      	b.n	800fb12 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fb46:	68e3      	ldr	r3, [r4, #12]
 800fb48:	899e      	ldrh	r6, [r3, #12]
 800fb4a:	2001      	movs	r0, #1
 800fb4c:	f7fb fae2 	bl	800b114 <lwip_htons>
 800fb50:	68e3      	ldr	r3, [r4, #12]
 800fb52:	4306      	orrs	r6, r0
 800fb54:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fb56:	8b6b      	ldrh	r3, [r5, #26]
 800fb58:	f043 0320 	orr.w	r3, r3, #32
 800fb5c:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 800fb5e:	2000      	movs	r0, #0
 800fb60:	e7e8      	b.n	800fb34 <tcp_send_fin+0x28>
 800fb62:	bf00      	nop
 800fb64:	080153f4 	.word	0x080153f4
 800fb68:	080159b0 	.word	0x080159b0
 800fb6c:	0801397c 	.word	0x0801397c

0800fb70 <tcp_rexmit_rto_prepare>:
{
 800fb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fb74:	4605      	mov	r5, r0
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d031      	beq.n	800fbde <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800fb7a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800fb7c:	2c00      	cmp	r4, #0
 800fb7e:	d036      	beq.n	800fbee <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	b143      	cbz	r3, 800fb96 <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 800fb84:	4620      	mov	r0, r4
 800fb86:	f7ff f965 	bl	800ee54 <tcp_output_segment_busy>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d132      	bne.n	800fbf4 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fb8e:	6824      	ldr	r4, [r4, #0]
 800fb90:	6823      	ldr	r3, [r4, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1f6      	bne.n	800fb84 <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800fb96:	4620      	mov	r0, r4
 800fb98:	f7ff f95c 	bl	800ee54 <tcp_output_segment_busy>
 800fb9c:	bb68      	cbnz	r0, 800fbfa <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 800fb9e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800fba0:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800fba2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fba4:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800fba6:	2600      	movs	r6, #0
 800fba8:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 800fbaa:	8b6b      	ldrh	r3, [r5, #26]
 800fbac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fbb0:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fbb2:	68e3      	ldr	r3, [r4, #12]
 800fbb4:	6858      	ldr	r0, [r3, #4]
 800fbb6:	f7fb fab2 	bl	800b11e <lwip_htonl>
 800fbba:	4607      	mov	r7, r0
 800fbbc:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800fbc0:	68e3      	ldr	r3, [r4, #12]
 800fbc2:	8998      	ldrh	r0, [r3, #12]
 800fbc4:	f7fb faa6 	bl	800b114 <lwip_htons>
 800fbc8:	f010 0303 	ands.w	r3, r0, #3
 800fbcc:	bf18      	it	ne
 800fbce:	2301      	movne	r3, #1
 800fbd0:	4447      	add	r7, r8
 800fbd2:	443b      	add	r3, r7
 800fbd4:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800fbd6:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 800fbd8:	4630      	mov	r0, r6
}
 800fbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fbde:	4b08      	ldr	r3, [pc, #32]	; (800fc00 <tcp_rexmit_rto_prepare+0x90>)
 800fbe0:	f240 6263 	movw	r2, #1635	; 0x663
 800fbe4:	4907      	ldr	r1, [pc, #28]	; (800fc04 <tcp_rexmit_rto_prepare+0x94>)
 800fbe6:	4808      	ldr	r0, [pc, #32]	; (800fc08 <tcp_rexmit_rto_prepare+0x98>)
 800fbe8:	f002 fd14 	bl	8012614 <iprintf>
 800fbec:	e7c5      	b.n	800fb7a <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 800fbee:	f06f 0005 	mvn.w	r0, #5
 800fbf2:	e7f2      	b.n	800fbda <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800fbf4:	f06f 0005 	mvn.w	r0, #5
 800fbf8:	e7ef      	b.n	800fbda <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 800fbfa:	f06f 0005 	mvn.w	r0, #5
 800fbfe:	e7ec      	b.n	800fbda <tcp_rexmit_rto_prepare+0x6a>
 800fc00:	080153f4 	.word	0x080153f4
 800fc04:	080159cc 	.word	0x080159cc
 800fc08:	0801397c 	.word	0x0801397c

0800fc0c <tcp_rexmit>:
{
 800fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fc0e:	4607      	mov	r7, r0
 800fc10:	b360      	cbz	r0, 800fc6c <tcp_rexmit+0x60>
  if (pcb->unacked == NULL) {
 800fc12:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800fc14:	2e00      	cmp	r6, #0
 800fc16:	d034      	beq.n	800fc82 <tcp_rexmit+0x76>
  if (tcp_output_segment_busy(seg)) {
 800fc18:	4630      	mov	r0, r6
 800fc1a:	f7ff f91b 	bl	800ee54 <tcp_output_segment_busy>
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d132      	bne.n	800fc88 <tcp_rexmit+0x7c>
  pcb->unacked = seg->next;
 800fc22:	6833      	ldr	r3, [r6, #0]
 800fc24:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800fc26:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800fc2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc2c:	b17b      	cbz	r3, 800fc4e <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	6858      	ldr	r0, [r3, #4]
 800fc32:	f7fb fa74 	bl	800b11e <lwip_htonl>
 800fc36:	4604      	mov	r4, r0
 800fc38:	68f3      	ldr	r3, [r6, #12]
 800fc3a:	6858      	ldr	r0, [r3, #4]
 800fc3c:	f7fb fa6f 	bl	800b11e <lwip_htonl>
 800fc40:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800fc42:	2c00      	cmp	r4, #0
 800fc44:	da03      	bge.n	800fc4e <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800fc46:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1ef      	bne.n	800fc2e <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 800fc4e:	682b      	ldr	r3, [r5, #0]
 800fc50:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800fc52:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800fc54:	6833      	ldr	r3, [r6, #0]
 800fc56:	b18b      	cbz	r3, 800fc7c <tcp_rexmit+0x70>
  if (pcb->nrtx < 0xFF) {
 800fc58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800fc5c:	2bff      	cmp	r3, #255	; 0xff
 800fc5e:	d002      	beq.n	800fc66 <tcp_rexmit+0x5a>
    ++pcb->nrtx;
 800fc60:	3301      	adds	r3, #1
 800fc62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800fc66:	2000      	movs	r0, #0
 800fc68:	6378      	str	r0, [r7, #52]	; 0x34
}
 800fc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fc6c:	4b08      	ldr	r3, [pc, #32]	; (800fc90 <tcp_rexmit+0x84>)
 800fc6e:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fc72:	4908      	ldr	r1, [pc, #32]	; (800fc94 <tcp_rexmit+0x88>)
 800fc74:	4808      	ldr	r0, [pc, #32]	; (800fc98 <tcp_rexmit+0x8c>)
 800fc76:	f002 fccd 	bl	8012614 <iprintf>
 800fc7a:	e7ca      	b.n	800fc12 <tcp_rexmit+0x6>
    pcb->unsent_oversize = 0;
 800fc7c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800fc80:	e7ea      	b.n	800fc58 <tcp_rexmit+0x4c>
    return ERR_VAL;
 800fc82:	f06f 0005 	mvn.w	r0, #5
 800fc86:	e7f0      	b.n	800fc6a <tcp_rexmit+0x5e>
    return ERR_VAL;
 800fc88:	f06f 0005 	mvn.w	r0, #5
 800fc8c:	e7ed      	b.n	800fc6a <tcp_rexmit+0x5e>
 800fc8e:	bf00      	nop
 800fc90:	080153f4 	.word	0x080153f4
 800fc94:	080159f0 	.word	0x080159f0
 800fc98:	0801397c 	.word	0x0801397c

0800fc9c <tcp_rexmit_fast>:
{
 800fc9c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fc9e:	4604      	mov	r4, r0
 800fca0:	b130      	cbz	r0, 800fcb0 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fca2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fca4:	b11b      	cbz	r3, 800fcae <tcp_rexmit_fast+0x12>
 800fca6:	8b63      	ldrh	r3, [r4, #26]
 800fca8:	f013 0f04 	tst.w	r3, #4
 800fcac:	d008      	beq.n	800fcc0 <tcp_rexmit_fast+0x24>
}
 800fcae:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fcb0:	4b15      	ldr	r3, [pc, #84]	; (800fd08 <tcp_rexmit_fast+0x6c>)
 800fcb2:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fcb6:	4915      	ldr	r1, [pc, #84]	; (800fd0c <tcp_rexmit_fast+0x70>)
 800fcb8:	4815      	ldr	r0, [pc, #84]	; (800fd10 <tcp_rexmit_fast+0x74>)
 800fcba:	f002 fcab 	bl	8012614 <iprintf>
 800fcbe:	e7f0      	b.n	800fca2 <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f7ff ffa3 	bl	800fc0c <tcp_rexmit>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d1f1      	bne.n	800fcae <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fcca:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800fcce:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	bf28      	it	cs
 800fcd6:	461a      	movcs	r2, r3
 800fcd8:	1052      	asrs	r2, r2, #1
 800fcda:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fcde:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800fce0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800fce4:	d202      	bcs.n	800fcec <tcp_rexmit_fast+0x50>
        pcb->ssthresh = 2 * pcb->mss;
 800fce6:	005a      	lsls	r2, r3, #1
 800fce8:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fcec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fcf0:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800fcf4:	4413      	add	r3, r2
 800fcf6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fcfa:	8b63      	ldrh	r3, [r4, #26]
 800fcfc:	f043 0304 	orr.w	r3, r3, #4
 800fd00:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800fd06:	e7d2      	b.n	800fcae <tcp_rexmit_fast+0x12>
 800fd08:	080153f4 	.word	0x080153f4
 800fd0c:	08015a08 	.word	0x08015a08
 800fd10:	0801397c 	.word	0x0801397c

0800fd14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd18:	b084      	sub	sp, #16
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	4615      	mov	r5, r2
 800fd20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fd22:	4698      	mov	r8, r3
 800fd24:	b323      	cbz	r3, 800fd70 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fd26:	b35f      	cbz	r7, 800fd80 <tcp_rst+0x6c>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f7fb f9f8 	bl	800b11e <lwip_htonl>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2208      	movs	r2, #8
 800fd32:	9203      	str	r2, [sp, #12]
 800fd34:	2214      	movs	r2, #20
 800fd36:	9202      	str	r2, [sp, #8]
 800fd38:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800fd3c:	9201      	str	r2, [sp, #4]
 800fd3e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800fd42:	9200      	str	r2, [sp, #0]
 800fd44:	2200      	movs	r2, #0
 800fd46:	4611      	mov	r1, r2
 800fd48:	4628      	mov	r0, r5
 800fd4a:	f7ff f991 	bl	800f070 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fd4e:	4605      	mov	r5, r0
 800fd50:	b158      	cbz	r0, 800fd6a <tcp_rst+0x56>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fd52:	2300      	movs	r3, #0
 800fd54:	461a      	mov	r2, r3
 800fd56:	4601      	mov	r1, r0
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f7ff f893 	bl	800ee84 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fd5e:	463b      	mov	r3, r7
 800fd60:	4642      	mov	r2, r8
 800fd62:	4629      	mov	r1, r5
 800fd64:	4620      	mov	r0, r4
 800fd66:	f7ff f9f7 	bl	800f158 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fd6a:	b004      	add	sp, #16
 800fd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fd70:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <tcp_rst+0x7c>)
 800fd72:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fd76:	4907      	ldr	r1, [pc, #28]	; (800fd94 <tcp_rst+0x80>)
 800fd78:	4807      	ldr	r0, [pc, #28]	; (800fd98 <tcp_rst+0x84>)
 800fd7a:	f002 fc4b 	bl	8012614 <iprintf>
 800fd7e:	e7d2      	b.n	800fd26 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fd80:	4b03      	ldr	r3, [pc, #12]	; (800fd90 <tcp_rst+0x7c>)
 800fd82:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fd86:	4905      	ldr	r1, [pc, #20]	; (800fd9c <tcp_rst+0x88>)
 800fd88:	4803      	ldr	r0, [pc, #12]	; (800fd98 <tcp_rst+0x84>)
 800fd8a:	f002 fc43 	bl	8012614 <iprintf>
 800fd8e:	e7cb      	b.n	800fd28 <tcp_rst+0x14>
 800fd90:	080153f4 	.word	0x080153f4
 800fd94:	08015a28 	.word	0x08015a28
 800fd98:	0801397c 	.word	0x0801397c
 800fd9c:	08015a44 	.word	0x08015a44

0800fda0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fda0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fda2:	4604      	mov	r4, r0
 800fda4:	b1e0      	cbz	r0, 800fde0 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fda6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fda8:	f7fb f9b9 	bl	800b11e <lwip_htonl>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2200      	movs	r2, #0
 800fdb0:	4611      	mov	r1, r2
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f7ff f9a6 	bl	800f104 <tcp_output_alloc_header>
  if (p == NULL) {
 800fdb8:	4605      	mov	r5, r0
 800fdba:	b1c8      	cbz	r0, 800fdf0 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	4601      	mov	r1, r0
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7ff f85e 	bl	800ee84 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fdc8:	1d23      	adds	r3, r4, #4
 800fdca:	4622      	mov	r2, r4
 800fdcc:	4629      	mov	r1, r5
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7ff f9c2 	bl	800f158 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800fdd4:	b198      	cbz	r0, 800fdfe <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdd6:	8b63      	ldrh	r3, [r4, #26]
 800fdd8:	f043 0303 	orr.w	r3, r3, #3
 800fddc:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800fdde:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fde0:	4b09      	ldr	r3, [pc, #36]	; (800fe08 <tcp_send_empty_ack+0x68>)
 800fde2:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fde6:	4909      	ldr	r1, [pc, #36]	; (800fe0c <tcp_send_empty_ack+0x6c>)
 800fde8:	4809      	ldr	r0, [pc, #36]	; (800fe10 <tcp_send_empty_ack+0x70>)
 800fdea:	f002 fc13 	bl	8012614 <iprintf>
 800fdee:	e7da      	b.n	800fda6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdf0:	8b63      	ldrh	r3, [r4, #26]
 800fdf2:	f043 0303 	orr.w	r3, r3, #3
 800fdf6:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800fdf8:	f06f 0001 	mvn.w	r0, #1
 800fdfc:	e7ef      	b.n	800fdde <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdfe:	8b63      	ldrh	r3, [r4, #26]
 800fe00:	f023 0303 	bic.w	r3, r3, #3
 800fe04:	8363      	strh	r3, [r4, #26]
 800fe06:	e7ea      	b.n	800fdde <tcp_send_empty_ack+0x3e>
 800fe08:	080153f4 	.word	0x080153f4
 800fe0c:	08015a60 	.word	0x08015a60
 800fe10:	0801397c 	.word	0x0801397c

0800fe14 <tcp_output>:
{
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d03b      	beq.n	800fe98 <tcp_output+0x84>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fe20:	7d2b      	ldrb	r3, [r5, #20]
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d040      	beq.n	800fea8 <tcp_output+0x94>
  if (tcp_input_pcb == pcb) {
 800fe26:	4b9c      	ldr	r3, [pc, #624]	; (8010098 <tcp_output+0x284>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	42ab      	cmp	r3, r5
 800fe2c:	f000 81b8 	beq.w	80101a0 <tcp_output+0x38c>
  seg = pcb->unsent;
 800fe30:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800fe32:	2c00      	cmp	r4, #0
 800fe34:	d040      	beq.n	800feb8 <tcp_output+0xa4>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fe36:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800fe3a:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fe3e:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fe42:	7a28      	ldrb	r0, [r5, #8]
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d149      	bne.n	800fedc <tcp_output+0xc8>
    return ip_route(src, dst);
 800fe48:	4650      	mov	r0, sl
 800fe4a:	f001 fab1 	bl	80113b0 <ip4_route>
 800fe4e:	4680      	mov	r8, r0
  if (netif == NULL) {
 800fe50:	f1b8 0f00 	cmp.w	r8, #0
 800fe54:	f000 81a6 	beq.w	80101a4 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 800fe58:	682b      	ldr	r3, [r5, #0]
 800fe5a:	b913      	cbnz	r3, 800fe62 <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fe5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe60:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fe62:	42be      	cmp	r6, r7
 800fe64:	bf28      	it	cs
 800fe66:	463e      	movcs	r6, r7
 800fe68:	46b1      	mov	r9, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fe6a:	68e3      	ldr	r3, [r4, #12]
 800fe6c:	6858      	ldr	r0, [r3, #4]
 800fe6e:	f7fb f956 	bl	800b11e <lwip_htonl>
 800fe72:	8923      	ldrh	r3, [r4, #8]
 800fe74:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800fe76:	1a9b      	subs	r3, r3, r2
 800fe78:	4403      	add	r3, r0
 800fe7a:	42b3      	cmp	r3, r6
 800fe7c:	d941      	bls.n	800ff02 <tcp_output+0xee>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fe7e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800fe82:	42b3      	cmp	r3, r6
 800fe84:	d02e      	beq.n	800fee4 <tcp_output+0xd0>
    if (pcb->flags & TF_ACK_NOW) {
 800fe86:	8b6b      	ldrh	r3, [r5, #26]
 800fe88:	f013 0f02 	tst.w	r3, #2
 800fe8c:	d018      	beq.n	800fec0 <tcp_output+0xac>
      return tcp_send_empty_ack(pcb);
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f7ff ff86 	bl	800fda0 <tcp_send_empty_ack>
 800fe94:	4603      	mov	r3, r0
 800fe96:	e018      	b.n	800feca <tcp_output+0xb6>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fe98:	4b80      	ldr	r3, [pc, #512]	; (801009c <tcp_output+0x288>)
 800fe9a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fe9e:	4980      	ldr	r1, [pc, #512]	; (80100a0 <tcp_output+0x28c>)
 800fea0:	4880      	ldr	r0, [pc, #512]	; (80100a4 <tcp_output+0x290>)
 800fea2:	f002 fbb7 	bl	8012614 <iprintf>
 800fea6:	e7bb      	b.n	800fe20 <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fea8:	4b7c      	ldr	r3, [pc, #496]	; (801009c <tcp_output+0x288>)
 800feaa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800feae:	497e      	ldr	r1, [pc, #504]	; (80100a8 <tcp_output+0x294>)
 800feb0:	487c      	ldr	r0, [pc, #496]	; (80100a4 <tcp_output+0x290>)
 800feb2:	f002 fbaf 	bl	8012614 <iprintf>
 800feb6:	e7b6      	b.n	800fe26 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800feb8:	8b6b      	ldrh	r3, [r5, #26]
 800feba:	f013 0f02 	tst.w	r3, #2
 800febe:	d108      	bne.n	800fed2 <tcp_output+0xbe>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fec0:	8b6b      	ldrh	r3, [r5, #26]
 800fec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fec6:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	b007      	add	sp, #28
 800fece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800fed2:	4628      	mov	r0, r5
 800fed4:	f7ff ff64 	bl	800fda0 <tcp_send_empty_ack>
 800fed8:	4603      	mov	r3, r0
 800feda:	e7f6      	b.n	800feca <tcp_output+0xb6>
    return netif_get_by_index(pcb->netif_idx);
 800fedc:	f7fb fe38 	bl	800bb50 <netif_get_by_index>
 800fee0:	4680      	mov	r8, r0
 800fee2:	e7b5      	b.n	800fe50 <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fee4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d1cd      	bne.n	800fe86 <tcp_output+0x72>
 800feea:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1c9      	bne.n	800fe86 <tcp_output+0x72>
      pcb->persist_cnt = 0;
 800fef2:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fef6:	2201      	movs	r2, #1
 800fef8:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 800fefc:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800ff00:	e7c1      	b.n	800fe86 <tcp_output+0x72>
  pcb->persist_backoff = 0;
 800ff02:	2300      	movs	r3, #0
 800ff04:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 800ff08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	f000 8146 	beq.w	801019c <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800ff10:	461f      	mov	r7, r3
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1fb      	bne.n	800ff10 <tcp_output+0xfc>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ff18:	9505      	str	r5, [sp, #20]
  while (seg != NULL &&
 800ff1a:	e0d4      	b.n	80100c6 <tcp_output+0x2b2>
    LWIP_ASSERT("RST not expected here!",
 800ff1c:	4b5f      	ldr	r3, [pc, #380]	; (801009c <tcp_output+0x288>)
 800ff1e:	f240 5236 	movw	r2, #1334	; 0x536
 800ff22:	4962      	ldr	r1, [pc, #392]	; (80100ac <tcp_output+0x298>)
 800ff24:	485f      	ldr	r0, [pc, #380]	; (80100a4 <tcp_output+0x290>)
 800ff26:	f002 fb75 	bl	8012614 <iprintf>
 800ff2a:	e0df      	b.n	80100ec <tcp_output+0x2d8>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ff2c:	8911      	ldrh	r1, [r2, #8]
 800ff2e:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800ff30:	4291      	cmp	r1, r2
 800ff32:	f080 80e9 	bcs.w	8010108 <tcp_output+0x2f4>
 800ff36:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800ff3a:	2a00      	cmp	r2, #0
 800ff3c:	f000 80e4 	beq.w	8010108 <tcp_output+0x2f4>
 800ff40:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800ff44:	2a0f      	cmp	r2, #15
 800ff46:	f200 80df 	bhi.w	8010108 <tcp_output+0x2f4>
 800ff4a:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800ff4e:	f040 80db 	bne.w	8010108 <tcp_output+0x2f4>
  if (pcb->unsent == NULL) {
 800ff52:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d1b3      	bne.n	800fec0 <tcp_output+0xac>
    pcb->unsent_oversize = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800ff5e:	e7af      	b.n	800fec0 <tcp_output+0xac>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ff60:	68e3      	ldr	r3, [r4, #12]
 800ff62:	899e      	ldrh	r6, [r3, #12]
 800ff64:	2010      	movs	r0, #16
 800ff66:	f7fb f8d5 	bl	800b114 <lwip_htons>
 800ff6a:	68e3      	ldr	r3, [r4, #12]
 800ff6c:	4330      	orrs	r0, r6
 800ff6e:	8198      	strh	r0, [r3, #12]
 800ff70:	e0ce      	b.n	8010110 <tcp_output+0x2fc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ff72:	68e6      	ldr	r6, [r4, #12]
 800ff74:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ff76:	f7fb f8d2 	bl	800b11e <lwip_htonl>
 800ff7a:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ff7c:	68e6      	ldr	r6, [r4, #12]
 800ff7e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800ff80:	f7fb f8c8 	bl	800b114 <lwip_htons>
 800ff84:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff86:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800ff88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff8a:	4413      	add	r3, r2
 800ff8c:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ff8e:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ff90:	7aa3      	ldrb	r3, [r4, #10]
 800ff92:	f013 0f01 	tst.w	r3, #1
 800ff96:	d13e      	bne.n	8010016 <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ff98:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 800ff9a:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	db46      	blt.n	8010030 <tcp_output+0x21c>
  if (pcb->rttest == 0) {
 800ffa2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d046      	beq.n	8010036 <tcp_output+0x222>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ffa8:	6861      	ldr	r1, [r4, #4]
 800ffaa:	68e3      	ldr	r3, [r4, #12]
 800ffac:	684a      	ldr	r2, [r1, #4]
 800ffae:	1a9b      	subs	r3, r3, r2
 800ffb0:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800ffb2:	894a      	ldrh	r2, [r1, #10]
 800ffb4:	1ad2      	subs	r2, r2, r3
 800ffb6:	814a      	strh	r2, [r1, #10]
  seg->p->tot_len -= len;
 800ffb8:	6861      	ldr	r1, [r4, #4]
 800ffba:	890a      	ldrh	r2, [r1, #8]
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800ffc0:	6862      	ldr	r2, [r4, #4]
 800ffc2:	68e3      	ldr	r3, [r4, #12]
 800ffc4:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	741a      	strb	r2, [r3, #16]
 800ffca:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ffcc:	7aa3      	ldrb	r3, [r4, #10]
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	f003 0304 	and.w	r3, r3, #4
 800ffd4:	3314      	adds	r3, #20
 800ffd6:	68e2      	ldr	r2, [r4, #12]
 800ffd8:	4413      	add	r3, r2
 800ffda:	429e      	cmp	r6, r3
 800ffdc:	d006      	beq.n	800ffec <tcp_output+0x1d8>
 800ffde:	4b2f      	ldr	r3, [pc, #188]	; (801009c <tcp_output+0x288>)
 800ffe0:	f240 621c 	movw	r2, #1564	; 0x61c
 800ffe4:	4932      	ldr	r1, [pc, #200]	; (80100b0 <tcp_output+0x29c>)
 800ffe6:	482f      	ldr	r0, [pc, #188]	; (80100a4 <tcp_output+0x290>)
 800ffe8:	f002 fb14 	bl	8012614 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ffec:	6860      	ldr	r0, [r4, #4]
 800ffee:	f8cd 8008 	str.w	r8, [sp, #8]
 800fff2:	2306      	movs	r3, #6
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	7aab      	ldrb	r3, [r5, #10]
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	7aeb      	ldrb	r3, [r5, #11]
 800fffc:	4652      	mov	r2, sl
 800fffe:	9905      	ldr	r1, [sp, #20]
 8010000:	f001 fb5e 	bl	80116c0 <ip4_output_if>
    if (err != ERR_OK) {
 8010004:	4603      	mov	r3, r0
 8010006:	2800      	cmp	r0, #0
 8010008:	f000 8088 	beq.w	801011c <tcp_output+0x308>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801000c:	8b6a      	ldrh	r2, [r5, #26]
 801000e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010012:	836a      	strh	r2, [r5, #26]
      return err;
 8010014:	e759      	b.n	800feca <tcp_output+0xb6>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010016:	4652      	mov	r2, sl
 8010018:	4641      	mov	r1, r8
 801001a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 801001e:	f7fc fc13 	bl	800c848 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010022:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8010026:	f7fb f87a 	bl	800b11e <lwip_htonl>
 801002a:	6170      	str	r0, [r6, #20]
    opts += 1;
 801002c:	3618      	adds	r6, #24
 801002e:	e7b4      	b.n	800ff9a <tcp_output+0x186>
    pcb->rtime = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	862b      	strh	r3, [r5, #48]	; 0x30
 8010034:	e7b5      	b.n	800ffa2 <tcp_output+0x18e>
    pcb->rttest = tcp_ticks;
 8010036:	4b1f      	ldr	r3, [pc, #124]	; (80100b4 <tcp_output+0x2a0>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801003c:	68e3      	ldr	r3, [r4, #12]
 801003e:	6858      	ldr	r0, [r3, #4]
 8010040:	f7fb f86d 	bl	800b11e <lwip_htonl>
 8010044:	63a8      	str	r0, [r5, #56]	; 0x38
 8010046:	e7af      	b.n	800ffa8 <tcp_output+0x194>
        pcb->unacked = seg;
 8010048:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 801004a:	4627      	mov	r7, r4
 801004c:	e037      	b.n	80100be <tcp_output+0x2aa>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801004e:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 8010052:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010054:	b1d3      	cbz	r3, 801008c <tcp_output+0x278>
 8010056:	4622      	mov	r2, r4
 8010058:	465c      	mov	r4, fp
 801005a:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	6858      	ldr	r0, [r3, #4]
 8010060:	f7fb f85d 	bl	800b11e <lwip_htonl>
 8010064:	4606      	mov	r6, r0
 8010066:	f8db 300c 	ldr.w	r3, [fp, #12]
 801006a:	6858      	ldr	r0, [r3, #4]
 801006c:	f7fb f857 	bl	800b11e <lwip_htonl>
 8010070:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 8010072:	2e00      	cmp	r6, #0
 8010074:	da07      	bge.n	8010086 <tcp_output+0x272>
            cur_seg = &((*cur_seg)->next );
 8010076:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d1ee      	bne.n	801005c <tcp_output+0x248>
 801007e:	465b      	mov	r3, fp
 8010080:	46a3      	mov	fp, r4
 8010082:	461c      	mov	r4, r3
 8010084:	e002      	b.n	801008c <tcp_output+0x278>
 8010086:	465b      	mov	r3, fp
 8010088:	46a3      	mov	fp, r4
 801008a:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 801008c:	f8db 3000 	ldr.w	r3, [fp]
 8010090:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 8010092:	f8cb 4000 	str.w	r4, [fp]
 8010096:	e012      	b.n	80100be <tcp_output+0x2aa>
 8010098:	2001b620 	.word	0x2001b620
 801009c:	080153f4 	.word	0x080153f4
 80100a0:	08015a80 	.word	0x08015a80
 80100a4:	0801397c 	.word	0x0801397c
 80100a8:	08015a98 	.word	0x08015a98
 80100ac:	08015ac0 	.word	0x08015ac0
 80100b0:	08015478 	.word	0x08015478
 80100b4:	2001b610 	.word	0x2001b610
      tcp_seg_free(seg);
 80100b8:	4620      	mov	r0, r4
 80100ba:	f7fc faf1 	bl	800c6a0 <tcp_seg_free>
    seg = pcb->unsent;
 80100be:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 80100c0:	2c00      	cmp	r4, #0
 80100c2:	f43f af49 	beq.w	800ff58 <tcp_output+0x144>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80100c6:	68e3      	ldr	r3, [r4, #12]
 80100c8:	6858      	ldr	r0, [r3, #4]
 80100ca:	f7fb f828 	bl	800b11e <lwip_htonl>
 80100ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80100d0:	1ac0      	subs	r0, r0, r3
 80100d2:	8923      	ldrh	r3, [r4, #8]
 80100d4:	4418      	add	r0, r3
  while (seg != NULL &&
 80100d6:	4548      	cmp	r0, r9
 80100d8:	f63f af3b 	bhi.w	800ff52 <tcp_output+0x13e>
    LWIP_ASSERT("RST not expected here!",
 80100dc:	68e3      	ldr	r3, [r4, #12]
 80100de:	8998      	ldrh	r0, [r3, #12]
 80100e0:	f7fb f818 	bl	800b114 <lwip_htons>
 80100e4:	f010 0f04 	tst.w	r0, #4
 80100e8:	f47f af18 	bne.w	800ff1c <tcp_output+0x108>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80100ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80100ee:	b15b      	cbz	r3, 8010108 <tcp_output+0x2f4>
 80100f0:	8b6b      	ldrh	r3, [r5, #26]
 80100f2:	f013 0f44 	tst.w	r3, #68	; 0x44
 80100f6:	d107      	bne.n	8010108 <tcp_output+0x2f4>
 80100f8:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 80100fa:	2a00      	cmp	r2, #0
 80100fc:	f43f af1b 	beq.w	800ff36 <tcp_output+0x122>
 8010100:	6811      	ldr	r1, [r2, #0]
 8010102:	2900      	cmp	r1, #0
 8010104:	f43f af12 	beq.w	800ff2c <tcp_output+0x118>
    if (pcb->state != SYN_SENT) {
 8010108:	7d2b      	ldrb	r3, [r5, #20]
 801010a:	2b02      	cmp	r3, #2
 801010c:	f47f af28 	bne.w	800ff60 <tcp_output+0x14c>
  if (tcp_output_segment_busy(seg)) {
 8010110:	4620      	mov	r0, r4
 8010112:	f7fe fe9f 	bl	800ee54 <tcp_output_segment_busy>
 8010116:	2800      	cmp	r0, #0
 8010118:	f43f af2b 	beq.w	800ff72 <tcp_output+0x15e>
    pcb->unsent = seg->next;
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010120:	7d2b      	ldrb	r3, [r5, #20]
 8010122:	2b02      	cmp	r3, #2
 8010124:	d003      	beq.n	801012e <tcp_output+0x31a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010126:	8b6b      	ldrh	r3, [r5, #26]
 8010128:	f023 0303 	bic.w	r3, r3, #3
 801012c:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801012e:	68e3      	ldr	r3, [r4, #12]
 8010130:	6858      	ldr	r0, [r3, #4]
 8010132:	f7fa fff4 	bl	800b11e <lwip_htonl>
 8010136:	4606      	mov	r6, r0
 8010138:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 801013c:	68e3      	ldr	r3, [r4, #12]
 801013e:	8998      	ldrh	r0, [r3, #12]
 8010140:	f7fa ffe8 	bl	800b114 <lwip_htons>
 8010144:	f010 0003 	ands.w	r0, r0, #3
 8010148:	bf18      	it	ne
 801014a:	2001      	movne	r0, #1
 801014c:	445e      	add	r6, fp
 801014e:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010150:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010152:	1a1b      	subs	r3, r3, r0
 8010154:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8010156:	bfb8      	it	lt
 8010158:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801015a:	8926      	ldrh	r6, [r4, #8]
 801015c:	68e3      	ldr	r3, [r4, #12]
 801015e:	8998      	ldrh	r0, [r3, #12]
 8010160:	f7fa ffd8 	bl	800b114 <lwip_htons>
 8010164:	f010 0003 	ands.w	r0, r0, #3
 8010168:	bf18      	it	ne
 801016a:	2001      	movne	r0, #1
 801016c:	42f0      	cmn	r0, r6
 801016e:	d0a3      	beq.n	80100b8 <tcp_output+0x2a4>
      seg->next = NULL;
 8010170:	2300      	movs	r3, #0
 8010172:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 8010174:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010176:	2b00      	cmp	r3, #0
 8010178:	f43f af66 	beq.w	8010048 <tcp_output+0x234>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801017c:	68e3      	ldr	r3, [r4, #12]
 801017e:	6858      	ldr	r0, [r3, #4]
 8010180:	f7fa ffcd 	bl	800b11e <lwip_htonl>
 8010184:	4606      	mov	r6, r0
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	6858      	ldr	r0, [r3, #4]
 801018a:	f7fa ffc8 	bl	800b11e <lwip_htonl>
 801018e:	1a36      	subs	r6, r6, r0
 8010190:	2e00      	cmp	r6, #0
 8010192:	f6ff af5c 	blt.w	801004e <tcp_output+0x23a>
          useg->next = seg;
 8010196:	603c      	str	r4, [r7, #0]
 8010198:	4627      	mov	r7, r4
 801019a:	e790      	b.n	80100be <tcp_output+0x2aa>
  useg = pcb->unacked;
 801019c:	461f      	mov	r7, r3
 801019e:	e6bb      	b.n	800ff18 <tcp_output+0x104>
    return ERR_OK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	e692      	b.n	800feca <tcp_output+0xb6>
    return ERR_RTE;
 80101a4:	f06f 0303 	mvn.w	r3, #3
 80101a8:	e68f      	b.n	800feca <tcp_output+0xb6>
 80101aa:	bf00      	nop

080101ac <tcp_rexmit_rto_commit>:
{
 80101ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80101ae:	4604      	mov	r4, r0
 80101b0:	b150      	cbz	r0, 80101c8 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 80101b2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80101b6:	2bff      	cmp	r3, #255	; 0xff
 80101b8:	d002      	beq.n	80101c0 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 80101ba:	3301      	adds	r3, #1
 80101bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 80101c0:	4620      	mov	r0, r4
 80101c2:	f7ff fe27 	bl	800fe14 <tcp_output>
}
 80101c6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80101c8:	4b03      	ldr	r3, [pc, #12]	; (80101d8 <tcp_rexmit_rto_commit+0x2c>)
 80101ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80101ce:	4903      	ldr	r1, [pc, #12]	; (80101dc <tcp_rexmit_rto_commit+0x30>)
 80101d0:	4803      	ldr	r0, [pc, #12]	; (80101e0 <tcp_rexmit_rto_commit+0x34>)
 80101d2:	f002 fa1f 	bl	8012614 <iprintf>
 80101d6:	e7ec      	b.n	80101b2 <tcp_rexmit_rto_commit+0x6>
 80101d8:	080153f4 	.word	0x080153f4
 80101dc:	08015ad8 	.word	0x08015ad8
 80101e0:	0801397c 	.word	0x0801397c

080101e4 <tcp_rexmit_rto>:
{
 80101e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80101e6:	4604      	mov	r4, r0
 80101e8:	b120      	cbz	r0, 80101f4 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7ff fcc0 	bl	800fb70 <tcp_rexmit_rto_prepare>
 80101f0:	b140      	cbz	r0, 8010204 <tcp_rexmit_rto+0x20>
}
 80101f2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80101f4:	4b05      	ldr	r3, [pc, #20]	; (801020c <tcp_rexmit_rto+0x28>)
 80101f6:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80101fa:	4905      	ldr	r1, [pc, #20]	; (8010210 <tcp_rexmit_rto+0x2c>)
 80101fc:	4805      	ldr	r0, [pc, #20]	; (8010214 <tcp_rexmit_rto+0x30>)
 80101fe:	f002 fa09 	bl	8012614 <iprintf>
 8010202:	e7f2      	b.n	80101ea <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 8010204:	4620      	mov	r0, r4
 8010206:	f7ff ffd1 	bl	80101ac <tcp_rexmit_rto_commit>
}
 801020a:	e7f2      	b.n	80101f2 <tcp_rexmit_rto+0xe>
 801020c:	080153f4 	.word	0x080153f4
 8010210:	08015afc 	.word	0x08015afc
 8010214:	0801397c 	.word	0x0801397c

08010218 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010218:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801021a:	4604      	mov	r4, r0
 801021c:	b1c0      	cbz	r0, 8010250 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801021e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010220:	3801      	subs	r0, #1
 8010222:	f7fa ff7c 	bl	800b11e <lwip_htonl>
 8010226:	4603      	mov	r3, r0
 8010228:	2200      	movs	r2, #0
 801022a:	4611      	mov	r1, r2
 801022c:	4620      	mov	r0, r4
 801022e:	f7fe ff69 	bl	800f104 <tcp_output_alloc_header>
  if (p == NULL) {
 8010232:	4605      	mov	r5, r0
 8010234:	b1a0      	cbz	r0, 8010260 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010236:	2300      	movs	r3, #0
 8010238:	461a      	mov	r2, r3
 801023a:	4601      	mov	r1, r0
 801023c:	4620      	mov	r0, r4
 801023e:	f7fe fe21 	bl	800ee84 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010242:	1d23      	adds	r3, r4, #4
 8010244:	4622      	mov	r2, r4
 8010246:	4629      	mov	r1, r5
 8010248:	4620      	mov	r0, r4
 801024a:	f7fe ff85 	bl	800f158 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801024e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010250:	4b05      	ldr	r3, [pc, #20]	; (8010268 <tcp_keepalive+0x50>)
 8010252:	f640 0224 	movw	r2, #2084	; 0x824
 8010256:	4905      	ldr	r1, [pc, #20]	; (801026c <tcp_keepalive+0x54>)
 8010258:	4805      	ldr	r0, [pc, #20]	; (8010270 <tcp_keepalive+0x58>)
 801025a:	f002 f9db 	bl	8012614 <iprintf>
 801025e:	e7de      	b.n	801021e <tcp_keepalive+0x6>
    return ERR_MEM;
 8010260:	f04f 30ff 	mov.w	r0, #4294967295
 8010264:	e7f3      	b.n	801024e <tcp_keepalive+0x36>
 8010266:	bf00      	nop
 8010268:	080153f4 	.word	0x080153f4
 801026c:	08015b18 	.word	0x08015b18
 8010270:	0801397c 	.word	0x0801397c

08010274 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010278:	4604      	mov	r4, r0
 801027a:	b328      	cbz	r0, 80102c8 <tcp_zero_window_probe+0x54>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801027c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801027e:	b35d      	cbz	r5, 80102d8 <tcp_zero_window_probe+0x64>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010280:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8010284:	2bff      	cmp	r3, #255	; 0xff
 8010286:	d002      	beq.n	801028e <tcp_zero_window_probe+0x1a>
    ++pcb->persist_probe;
 8010288:	3301      	adds	r3, #1
 801028a:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801028e:	68eb      	ldr	r3, [r5, #12]
 8010290:	8998      	ldrh	r0, [r3, #12]
 8010292:	f7fa ff3f 	bl	800b114 <lwip_htons>
 8010296:	f010 0f01 	tst.w	r0, #1
 801029a:	d001      	beq.n	80102a0 <tcp_zero_window_probe+0x2c>
 801029c:	892b      	ldrh	r3, [r5, #8]
 801029e:	b31b      	cbz	r3, 80102e8 <tcp_zero_window_probe+0x74>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80102a0:	68eb      	ldr	r3, [r5, #12]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	2201      	movs	r2, #1
 80102a6:	2100      	movs	r1, #0
 80102a8:	4620      	mov	r0, r4
 80102aa:	f7fe ff2b 	bl	800f104 <tcp_output_alloc_header>
  if (p == NULL) {
 80102ae:	4606      	mov	r6, r0
 80102b0:	b1b8      	cbz	r0, 80102e2 <tcp_zero_window_probe+0x6e>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80102b2:	6868      	ldr	r0, [r5, #4]
 80102b4:	8903      	ldrh	r3, [r0, #8]
 80102b6:	892a      	ldrh	r2, [r5, #8]
 80102b8:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 80102ba:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80102bc:	b29b      	uxth	r3, r3
 80102be:	2201      	movs	r2, #1
 80102c0:	3114      	adds	r1, #20
 80102c2:	f7fb ffbd 	bl	800c240 <pbuf_copy_partial>
 80102c6:	e025      	b.n	8010314 <tcp_zero_window_probe+0xa0>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80102c8:	4b1e      	ldr	r3, [pc, #120]	; (8010344 <tcp_zero_window_probe+0xd0>)
 80102ca:	f640 024f 	movw	r2, #2127	; 0x84f
 80102ce:	491e      	ldr	r1, [pc, #120]	; (8010348 <tcp_zero_window_probe+0xd4>)
 80102d0:	481e      	ldr	r0, [pc, #120]	; (801034c <tcp_zero_window_probe+0xd8>)
 80102d2:	f002 f99f 	bl	8012614 <iprintf>
 80102d6:	e7d1      	b.n	801027c <tcp_zero_window_probe+0x8>
    return ERR_OK;
 80102d8:	2000      	movs	r0, #0
 80102da:	e031      	b.n	8010340 <tcp_zero_window_probe+0xcc>
    return ERR_MEM;
 80102dc:	f04f 30ff 	mov.w	r0, #4294967295
 80102e0:	e02e      	b.n	8010340 <tcp_zero_window_probe+0xcc>
 80102e2:	f04f 30ff 	mov.w	r0, #4294967295
 80102e6:	e02b      	b.n	8010340 <tcp_zero_window_probe+0xcc>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80102e8:	68eb      	ldr	r3, [r5, #12]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	2200      	movs	r2, #0
 80102ee:	4611      	mov	r1, r2
 80102f0:	4620      	mov	r0, r4
 80102f2:	f7fe ff07 	bl	800f104 <tcp_output_alloc_header>
  if (p == NULL) {
 80102f6:	4606      	mov	r6, r0
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d0ef      	beq.n	80102dc <tcp_zero_window_probe+0x68>
  tcphdr = (struct tcp_hdr *)p->payload;
 80102fc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010300:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8010304:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8010308:	2011      	movs	r0, #17
 801030a:	f7fa ff03 	bl	800b114 <lwip_htons>
 801030e:	4307      	orrs	r7, r0
 8010310:	f8a8 700c 	strh.w	r7, [r8, #12]
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010314:	68eb      	ldr	r3, [r5, #12]
 8010316:	6858      	ldr	r0, [r3, #4]
 8010318:	f7fa ff01 	bl	800b11e <lwip_htonl>
 801031c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801031e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010320:	1a1b      	subs	r3, r3, r0
 8010322:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8010324:	bfb8      	it	lt
 8010326:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010328:	2300      	movs	r3, #0
 801032a:	461a      	mov	r2, r3
 801032c:	4631      	mov	r1, r6
 801032e:	4620      	mov	r0, r4
 8010330:	f7fe fda8 	bl	800ee84 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010334:	1d23      	adds	r3, r4, #4
 8010336:	4622      	mov	r2, r4
 8010338:	4631      	mov	r1, r6
 801033a:	4620      	mov	r0, r4
 801033c:	f7fe ff0c 	bl	800f158 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8010340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010344:	080153f4 	.word	0x080153f4
 8010348:	08015b34 	.word	0x08015b34
 801034c:	0801397c 	.word	0x0801397c

08010350 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010352:	4604      	mov	r4, r0
 8010354:	460f      	mov	r7, r1
 8010356:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010358:	200a      	movs	r0, #10
 801035a:	f7fb fa0f 	bl	800b77c <memp_malloc>
  if (timeout == NULL) {
 801035e:	b180      	cbz	r0, 8010382 <sys_timeout_abs+0x32>
 8010360:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8010362:	2300      	movs	r3, #0
 8010364:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 8010366:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 8010368:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 801036a:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801036c:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <sys_timeout_abs+0x5c>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	b173      	cbz	r3, 8010390 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010372:	685a      	ldr	r2, [r3, #4]
 8010374:	1aa2      	subs	r2, r4, r2
 8010376:	2a00      	cmp	r2, #0
 8010378:	da0d      	bge.n	8010396 <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 801037a:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 801037c:	4b0b      	ldr	r3, [pc, #44]	; (80103ac <sys_timeout_abs+0x5c>)
 801037e:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 8010380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010382:	4b0b      	ldr	r3, [pc, #44]	; (80103b0 <sys_timeout_abs+0x60>)
 8010384:	22be      	movs	r2, #190	; 0xbe
 8010386:	490b      	ldr	r1, [pc, #44]	; (80103b4 <sys_timeout_abs+0x64>)
 8010388:	480b      	ldr	r0, [pc, #44]	; (80103b8 <sys_timeout_abs+0x68>)
 801038a:	f002 f943 	bl	8012614 <iprintf>
    return;
 801038e:	e7f7      	b.n	8010380 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 8010390:	4b06      	ldr	r3, [pc, #24]	; (80103ac <sys_timeout_abs+0x5c>)
 8010392:	6018      	str	r0, [r3, #0]
    return;
 8010394:	e7f4      	b.n	8010380 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010396:	4619      	mov	r1, r3
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	b11b      	cbz	r3, 80103a4 <sys_timeout_abs+0x54>
 801039c:	685a      	ldr	r2, [r3, #4]
 801039e:	1aa2      	subs	r2, r4, r2
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	daf8      	bge.n	8010396 <sys_timeout_abs+0x46>
        timeout->next = t->next;
 80103a4:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 80103a6:	600d      	str	r5, [r1, #0]
        break;
 80103a8:	e7ea      	b.n	8010380 <sys_timeout_abs+0x30>
 80103aa:	bf00      	nop
 80103ac:	20012bfc 	.word	0x20012bfc
 80103b0:	08015b58 	.word	0x08015b58
 80103b4:	08015b8c 	.word	0x08015b8c
 80103b8:	0801397c 	.word	0x0801397c

080103bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80103bc:	b570      	push	{r4, r5, r6, lr}
 80103be:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80103c0:	6843      	ldr	r3, [r0, #4]
 80103c2:	4798      	blx	r3

  now = sys_now();
 80103c4:	f7f6 fba2 	bl	8006b0c <sys_now>
 80103c8:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80103ca:	6826      	ldr	r6, [r4, #0]
 80103cc:	4b05      	ldr	r3, [pc, #20]	; (80103e4 <lwip_cyclic_timer+0x28>)
 80103ce:	6818      	ldr	r0, [r3, #0]
 80103d0:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80103d2:	1b43      	subs	r3, r0, r5
 80103d4:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80103d6:	4622      	mov	r2, r4
 80103d8:	4903      	ldr	r1, [pc, #12]	; (80103e8 <lwip_cyclic_timer+0x2c>)
 80103da:	bfb8      	it	lt
 80103dc:	1970      	addlt	r0, r6, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80103de:	f7ff ffb7 	bl	8010350 <sys_timeout_abs>
#endif
  }
}
 80103e2:	bd70      	pop	{r4, r5, r6, pc}
 80103e4:	20012bf8 	.word	0x20012bf8
 80103e8:	080103bd 	.word	0x080103bd

080103ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80103ec:	b570      	push	{r4, r5, r6, lr}
 80103ee:	4604      	mov	r4, r0
 80103f0:	460d      	mov	r5, r1
 80103f2:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80103f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80103f8:	d207      	bcs.n	801040a <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80103fa:	f7f6 fb87 	bl	8006b0c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80103fe:	4632      	mov	r2, r6
 8010400:	4629      	mov	r1, r5
 8010402:	4420      	add	r0, r4
 8010404:	f7ff ffa4 	bl	8010350 <sys_timeout_abs>
#endif
}
 8010408:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801040a:	4b04      	ldr	r3, [pc, #16]	; (801041c <sys_timeout+0x30>)
 801040c:	f240 1229 	movw	r2, #297	; 0x129
 8010410:	4903      	ldr	r1, [pc, #12]	; (8010420 <sys_timeout+0x34>)
 8010412:	4804      	ldr	r0, [pc, #16]	; (8010424 <sys_timeout+0x38>)
 8010414:	f002 f8fe 	bl	8012614 <iprintf>
 8010418:	e7ef      	b.n	80103fa <sys_timeout+0xe>
 801041a:	bf00      	nop
 801041c:	08015b58 	.word	0x08015b58
 8010420:	08015bcc 	.word	0x08015bcc
 8010424:	0801397c 	.word	0x0801397c

08010428 <tcp_timer_needed>:
{
 8010428:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801042a:	4b0a      	ldr	r3, [pc, #40]	; (8010454 <tcp_timer_needed+0x2c>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	b953      	cbnz	r3, 8010446 <tcp_timer_needed+0x1e>
 8010430:	4b09      	ldr	r3, [pc, #36]	; (8010458 <tcp_timer_needed+0x30>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	b143      	cbz	r3, 8010448 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8010436:	4b07      	ldr	r3, [pc, #28]	; (8010454 <tcp_timer_needed+0x2c>)
 8010438:	2201      	movs	r2, #1
 801043a:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801043c:	2200      	movs	r2, #0
 801043e:	4907      	ldr	r1, [pc, #28]	; (801045c <tcp_timer_needed+0x34>)
 8010440:	20fa      	movs	r0, #250	; 0xfa
 8010442:	f7ff ffd3 	bl	80103ec <sys_timeout>
}
 8010446:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010448:	4b05      	ldr	r3, [pc, #20]	; (8010460 <tcp_timer_needed+0x38>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1f2      	bne.n	8010436 <tcp_timer_needed+0xe>
 8010450:	e7f9      	b.n	8010446 <tcp_timer_needed+0x1e>
 8010452:	bf00      	nop
 8010454:	20012c00 	.word	0x20012c00
 8010458:	2001b60c 	.word	0x2001b60c
 801045c:	08010465 	.word	0x08010465
 8010460:	2001b61c 	.word	0x2001b61c

08010464 <tcpip_tcp_timer>:
{
 8010464:	b508      	push	{r3, lr}
  tcp_tmr();
 8010466:	f7fd f8c3 	bl	800d5f0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801046a:	4b08      	ldr	r3, [pc, #32]	; (801048c <tcpip_tcp_timer+0x28>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	b12b      	cbz	r3, 801047c <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010470:	2200      	movs	r2, #0
 8010472:	4907      	ldr	r1, [pc, #28]	; (8010490 <tcpip_tcp_timer+0x2c>)
 8010474:	20fa      	movs	r0, #250	; 0xfa
 8010476:	f7ff ffb9 	bl	80103ec <sys_timeout>
}
 801047a:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801047c:	4b05      	ldr	r3, [pc, #20]	; (8010494 <tcpip_tcp_timer+0x30>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d1f5      	bne.n	8010470 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8010484:	4b04      	ldr	r3, [pc, #16]	; (8010498 <tcpip_tcp_timer+0x34>)
 8010486:	2200      	movs	r2, #0
 8010488:	601a      	str	r2, [r3, #0]
}
 801048a:	e7f6      	b.n	801047a <tcpip_tcp_timer+0x16>
 801048c:	2001b60c 	.word	0x2001b60c
 8010490:	08010465 	.word	0x08010465
 8010494:	2001b61c 	.word	0x2001b61c
 8010498:	20012c00 	.word	0x20012c00

0801049c <sys_timeouts_init>:
{
 801049c:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801049e:	4d08      	ldr	r5, [pc, #32]	; (80104c0 <sys_timeouts_init+0x24>)
 80104a0:	4c08      	ldr	r4, [pc, #32]	; (80104c4 <sys_timeouts_init+0x28>)
 80104a2:	f105 0208 	add.w	r2, r5, #8
 80104a6:	4621      	mov	r1, r4
 80104a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80104ac:	f7ff ff9e 	bl	80103ec <sys_timeout>
 80104b0:	f105 0210 	add.w	r2, r5, #16
 80104b4:	4621      	mov	r1, r4
 80104b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80104ba:	f7ff ff97 	bl	80103ec <sys_timeout>
}
 80104be:	bd38      	pop	{r3, r4, r5, pc}
 80104c0:	08015c18 	.word	0x08015c18
 80104c4:	080103bd 	.word	0x080103bd

080104c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80104c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80104cc:	f7f6 fb1e 	bl	8006b0c <sys_now>
 80104d0:	4606      	mov	r6, r0
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80104d2:	4c0d      	ldr	r4, [pc, #52]	; (8010508 <sys_check_timeouts+0x40>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 80104d4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801050c <sys_check_timeouts+0x44>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80104d8:	270a      	movs	r7, #10
    tmptimeout = next_timeout;
 80104da:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 80104dc:	b191      	cbz	r1, 8010504 <sys_check_timeouts+0x3c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80104de:	684b      	ldr	r3, [r1, #4]
 80104e0:	1af2      	subs	r2, r6, r3
 80104e2:	2a00      	cmp	r2, #0
 80104e4:	db0e      	blt.n	8010504 <sys_check_timeouts+0x3c>
    next_timeout = tmptimeout->next;
 80104e6:	680a      	ldr	r2, [r1, #0]
 80104e8:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 80104ea:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 80104ec:	f8d1 900c 	ldr.w	r9, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 80104f0:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80104f4:	4638      	mov	r0, r7
 80104f6:	f7fb f95b 	bl	800b7b0 <memp_free>
    if (handler != NULL) {
 80104fa:	2d00      	cmp	r5, #0
 80104fc:	d0ed      	beq.n	80104da <sys_check_timeouts+0x12>
      handler(arg);
 80104fe:	4648      	mov	r0, r9
 8010500:	47a8      	blx	r5
 8010502:	e7e9      	b.n	80104d8 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010508:	20012bfc 	.word	0x20012bfc
 801050c:	20012bf8 	.word	0x20012bf8

08010510 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010510:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010512:	4b0d      	ldr	r3, [pc, #52]	; (8010548 <sys_timeouts_sleeptime+0x38>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	b183      	cbz	r3, 801053a <sys_timeouts_sleeptime+0x2a>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8010518:	f7f6 faf8 	bl	8006b0c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801051c:	4b0a      	ldr	r3, [pc, #40]	; (8010548 <sys_timeouts_sleeptime+0x38>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	685c      	ldr	r4, [r3, #4]
 8010522:	1a24      	subs	r4, r4, r0
 8010524:	d40c      	bmi.n	8010540 <sys_timeouts_sleeptime+0x30>
    return 0;
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010526:	2c00      	cmp	r4, #0
 8010528:	da0b      	bge.n	8010542 <sys_timeouts_sleeptime+0x32>
 801052a:	4b08      	ldr	r3, [pc, #32]	; (801054c <sys_timeouts_sleeptime+0x3c>)
 801052c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010530:	4907      	ldr	r1, [pc, #28]	; (8010550 <sys_timeouts_sleeptime+0x40>)
 8010532:	4808      	ldr	r0, [pc, #32]	; (8010554 <sys_timeouts_sleeptime+0x44>)
 8010534:	f002 f86e 	bl	8012614 <iprintf>
 8010538:	e003      	b.n	8010542 <sys_timeouts_sleeptime+0x32>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801053a:	f04f 34ff 	mov.w	r4, #4294967295
 801053e:	e000      	b.n	8010542 <sys_timeouts_sleeptime+0x32>
    return 0;
 8010540:	2400      	movs	r4, #0
    return ret;
  }
}
 8010542:	4620      	mov	r0, r4
 8010544:	bd10      	pop	{r4, pc}
 8010546:	bf00      	nop
 8010548:	20012bfc 	.word	0x20012bfc
 801054c:	08015b58 	.word	0x08015b58
 8010550:	08015c04 	.word	0x08015c04
 8010554:	0801397c 	.word	0x0801397c

08010558 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010558:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801055a:	f002 f873 	bl	8012644 <rand>
 801055e:	4b02      	ldr	r3, [pc, #8]	; (8010568 <udp_init+0x10>)
 8010560:	4303      	orrs	r3, r0
 8010562:	4a02      	ldr	r2, [pc, #8]	; (801056c <udp_init+0x14>)
 8010564:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 8010566:	bd08      	pop	{r3, pc}
 8010568:	ffffc000 	.word	0xffffc000
 801056c:	20000016 	.word	0x20000016

08010570 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010574:	b085      	sub	sp, #20
 8010576:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010578:	4681      	mov	r9, r0
 801057a:	b300      	cbz	r0, 80105be <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801057c:	b336      	cbz	r6, 80105cc <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801057e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8010582:	2b07      	cmp	r3, #7
 8010584:	d929      	bls.n	80105da <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010586:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801058a:	4b68      	ldr	r3, [pc, #416]	; (801072c <udp_input+0x1bc>)
 801058c:	6819      	ldr	r1, [r3, #0]
 801058e:	6958      	ldr	r0, [r3, #20]
 8010590:	f001 f8ab 	bl	80116ea <ip4_addr_isbroadcast_u32>
 8010594:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010596:	8820      	ldrh	r0, [r4, #0]
 8010598:	f7fa fdbc 	bl	800b114 <lwip_htons>
 801059c:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 801059e:	8860      	ldrh	r0, [r4, #2]
 80105a0:	f7fa fdb8 	bl	800b114 <lwip_htons>
 80105a4:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80105a6:	4b62      	ldr	r3, [pc, #392]	; (8010730 <udp_input+0x1c0>)
 80105a8:	681c      	ldr	r4, [r3, #0]
 80105aa:	2c00      	cmp	r4, #0
 80105ac:	f000 8088 	beq.w	80106c0 <udp_input+0x150>
  uncon_pcb = NULL;
 80105b0:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 80105b4:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80105b8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 801072c <udp_input+0x1bc>
 80105bc:	e02c      	b.n	8010618 <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80105be:	4b5d      	ldr	r3, [pc, #372]	; (8010734 <udp_input+0x1c4>)
 80105c0:	22cf      	movs	r2, #207	; 0xcf
 80105c2:	495d      	ldr	r1, [pc, #372]	; (8010738 <udp_input+0x1c8>)
 80105c4:	485d      	ldr	r0, [pc, #372]	; (801073c <udp_input+0x1cc>)
 80105c6:	f002 f825 	bl	8012614 <iprintf>
 80105ca:	e7d7      	b.n	801057c <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80105cc:	4b59      	ldr	r3, [pc, #356]	; (8010734 <udp_input+0x1c4>)
 80105ce:	22d0      	movs	r2, #208	; 0xd0
 80105d0:	495b      	ldr	r1, [pc, #364]	; (8010740 <udp_input+0x1d0>)
 80105d2:	485a      	ldr	r0, [pc, #360]	; (801073c <udp_input+0x1cc>)
 80105d4:	f002 f81e 	bl	8012614 <iprintf>
 80105d8:	e7d1      	b.n	801057e <udp_input+0xe>
    pbuf_free(p);
 80105da:	4648      	mov	r0, r9
 80105dc:	f7fb fba8 	bl	800bd30 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80105e0:	b005      	add	sp, #20
 80105e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80105e6:	4b53      	ldr	r3, [pc, #332]	; (8010734 <udp_input+0x1c4>)
 80105e8:	2288      	movs	r2, #136	; 0x88
 80105ea:	4956      	ldr	r1, [pc, #344]	; (8010744 <udp_input+0x1d4>)
 80105ec:	4853      	ldr	r0, [pc, #332]	; (801073c <udp_input+0x1cc>)
 80105ee:	f002 f811 	bl	8012614 <iprintf>
 80105f2:	e016      	b.n	8010622 <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	b11b      	cbz	r3, 8010600 <udp_input+0x90>
 80105f8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d106      	bne.n	801060e <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010600:	7c23      	ldrb	r3, [r4, #16]
 8010602:	f013 0f04 	tst.w	r3, #4
 8010606:	d025      	beq.n	8010654 <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 8010608:	8aa3      	ldrh	r3, [r4, #20]
 801060a:	4553      	cmp	r3, sl
 801060c:	d038      	beq.n	8010680 <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801060e:	68e3      	ldr	r3, [r4, #12]
 8010610:	9403      	str	r4, [sp, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d051      	beq.n	80106ba <udp_input+0x14a>
 8010616:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 8010618:	8a63      	ldrh	r3, [r4, #18]
 801061a:	42ab      	cmp	r3, r5
 801061c:	d1f7      	bne.n	801060e <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801061e:	2e00      	cmp	r6, #0
 8010620:	d0e1      	beq.n	80105e6 <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010622:	7a22      	ldrb	r2, [r4, #8]
 8010624:	b13a      	cbz	r2, 8010636 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010626:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801062a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801062e:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010630:	b2db      	uxtb	r3, r3
 8010632:	429a      	cmp	r2, r3
 8010634:	d1eb      	bne.n	801060e <udp_input+0x9e>
    if (broadcast != 0) {
 8010636:	2f00      	cmp	r7, #0
 8010638:	d0dc      	beq.n	80105f4 <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801063a:	6823      	ldr	r3, [r4, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0df      	beq.n	8010600 <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010640:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010644:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010648:	d0da      	beq.n	8010600 <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801064a:	4053      	eors	r3, r2
 801064c:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801064e:	4213      	tst	r3, r2
 8010650:	d1dd      	bne.n	801060e <udp_input+0x9e>
 8010652:	e7d5      	b.n	8010600 <udp_input+0x90>
        if (uncon_pcb == NULL) {
 8010654:	f1bb 0f00 	cmp.w	fp, #0
 8010658:	d010      	beq.n	801067c <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801065a:	2f00      	cmp	r7, #0
 801065c:	d0d4      	beq.n	8010608 <udp_input+0x98>
 801065e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010666:	d1cf      	bne.n	8010608 <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010668:	6873      	ldr	r3, [r6, #4]
 801066a:	f8db 2000 	ldr.w	r2, [fp]
 801066e:	429a      	cmp	r2, r3
 8010670:	d0ca      	beq.n	8010608 <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010672:	6822      	ldr	r2, [r4, #0]
 8010674:	4293      	cmp	r3, r2
 8010676:	bf08      	it	eq
 8010678:	46a3      	moveq	fp, r4
 801067a:	e7c5      	b.n	8010608 <udp_input+0x98>
 801067c:	46a3      	mov	fp, r4
 801067e:	e7c3      	b.n	8010608 <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010680:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8010682:	b11b      	cbz	r3, 801068c <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010684:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010688:	4293      	cmp	r3, r2
 801068a:	d1c0      	bne.n	801060e <udp_input+0x9e>
        if (prev != NULL) {
 801068c:	9a03      	ldr	r2, [sp, #12]
 801068e:	b12a      	cbz	r2, 801069c <udp_input+0x12c>
          prev->next = pcb->next;
 8010690:	68e3      	ldr	r3, [r4, #12]
 8010692:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 8010694:	4b26      	ldr	r3, [pc, #152]	; (8010730 <udp_input+0x1c0>)
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 801069a:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801069c:	2108      	movs	r1, #8
 801069e:	4648      	mov	r0, r9
 80106a0:	f7fb fb06 	bl	800bcb0 <pbuf_remove_header>
 80106a4:	bb08      	cbnz	r0, 80106ea <udp_input+0x17a>
      if (pcb->recv != NULL) {
 80106a6:	69a5      	ldr	r5, [r4, #24]
 80106a8:	b355      	cbz	r5, 8010700 <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80106aa:	69e0      	ldr	r0, [r4, #28]
 80106ac:	f8cd a000 	str.w	sl, [sp]
 80106b0:	4b25      	ldr	r3, [pc, #148]	; (8010748 <udp_input+0x1d8>)
 80106b2:	464a      	mov	r2, r9
 80106b4:	4621      	mov	r1, r4
 80106b6:	47a8      	blx	r5
 80106b8:	e792      	b.n	80105e0 <udp_input+0x70>
  if (pcb != NULL) {
 80106ba:	f1bb 0f00 	cmp.w	fp, #0
 80106be:	d133      	bne.n	8010728 <udp_input+0x1b8>
  if (for_us) {
 80106c0:	6872      	ldr	r2, [r6, #4]
 80106c2:	4b1a      	ldr	r3, [pc, #104]	; (801072c <udp_input+0x1bc>)
 80106c4:	695b      	ldr	r3, [r3, #20]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d12a      	bne.n	8010720 <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80106ca:	2108      	movs	r1, #8
 80106cc:	4648      	mov	r0, r9
 80106ce:	f7fb faef 	bl	800bcb0 <pbuf_remove_header>
 80106d2:	b950      	cbnz	r0, 80106ea <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80106d4:	b92f      	cbnz	r7, 80106e2 <udp_input+0x172>
 80106d6:	4b15      	ldr	r3, [pc, #84]	; (801072c <udp_input+0x1bc>)
 80106d8:	695b      	ldr	r3, [r3, #20]
 80106da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106de:	2be0      	cmp	r3, #224	; 0xe0
 80106e0:	d112      	bne.n	8010708 <udp_input+0x198>
      pbuf_free(p);
 80106e2:	4648      	mov	r0, r9
 80106e4:	f7fb fb24 	bl	800bd30 <pbuf_free>
 80106e8:	e77a      	b.n	80105e0 <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80106ea:	4b12      	ldr	r3, [pc, #72]	; (8010734 <udp_input+0x1c4>)
 80106ec:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80106f0:	4916      	ldr	r1, [pc, #88]	; (801074c <udp_input+0x1dc>)
 80106f2:	4812      	ldr	r0, [pc, #72]	; (801073c <udp_input+0x1cc>)
 80106f4:	f001 ff8e 	bl	8012614 <iprintf>
      pbuf_free(p);
 80106f8:	4648      	mov	r0, r9
 80106fa:	f7fb fb19 	bl	800bd30 <pbuf_free>
      goto end;
 80106fe:	e76f      	b.n	80105e0 <udp_input+0x70>
        pbuf_free(p);
 8010700:	4648      	mov	r0, r9
 8010702:	f7fb fb15 	bl	800bd30 <pbuf_free>
        goto end;
 8010706:	e76b      	b.n	80105e0 <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010708:	4b08      	ldr	r3, [pc, #32]	; (801072c <udp_input+0x1bc>)
 801070a:	8999      	ldrh	r1, [r3, #12]
 801070c:	3108      	adds	r1, #8
 801070e:	b209      	sxth	r1, r1
 8010710:	4648      	mov	r0, r9
 8010712:	f7fb fb01 	bl	800bd18 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010716:	2103      	movs	r1, #3
 8010718:	4648      	mov	r0, r9
 801071a:	f000 fe21 	bl	8011360 <icmp_dest_unreach>
 801071e:	e7e0      	b.n	80106e2 <udp_input+0x172>
    pbuf_free(p);
 8010720:	4648      	mov	r0, r9
 8010722:	f7fb fb05 	bl	800bd30 <pbuf_free>
  return;
 8010726:	e75b      	b.n	80105e0 <udp_input+0x70>
 8010728:	465c      	mov	r4, fp
 801072a:	e7b7      	b.n	801069c <udp_input+0x12c>
 801072c:	20016178 	.word	0x20016178
 8010730:	2001b624 	.word	0x2001b624
 8010734:	08015c30 	.word	0x08015c30
 8010738:	08015c60 	.word	0x08015c60
 801073c:	0801397c 	.word	0x0801397c
 8010740:	08015c78 	.word	0x08015c78
 8010744:	08015c94 	.word	0x08015c94
 8010748:	20016188 	.word	0x20016188
 801074c:	08015cbc 	.word	0x08015cbc

08010750 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8010752:	4b3b      	ldr	r3, [pc, #236]	; (8010840 <udp_bind+0xf0>)
 8010754:	2900      	cmp	r1, #0
 8010756:	bf08      	it	eq
 8010758:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801075a:	b168      	cbz	r0, 8010778 <udp_bind+0x28>
 801075c:	4604      	mov	r4, r0
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801075e:	4b39      	ldr	r3, [pc, #228]	; (8010844 <udp_bind+0xf4>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d059      	beq.n	801081a <udp_bind+0xca>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010766:	4298      	cmp	r0, r3
 8010768:	d05a      	beq.n	8010820 <udp_bind+0xd0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801076a:	4618      	mov	r0, r3
 801076c:	68c0      	ldr	r0, [r0, #12]
 801076e:	b168      	cbz	r0, 801078c <udp_bind+0x3c>
    if (pcb == ipcb) {
 8010770:	4284      	cmp	r4, r0
 8010772:	d1fb      	bne.n	801076c <udp_bind+0x1c>
      rebind = 1;
 8010774:	2701      	movs	r7, #1
 8010776:	e00a      	b.n	801078e <udp_bind+0x3e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010778:	4b33      	ldr	r3, [pc, #204]	; (8010848 <udp_bind+0xf8>)
 801077a:	f240 32b7 	movw	r2, #951	; 0x3b7
 801077e:	4933      	ldr	r1, [pc, #204]	; (801084c <udp_bind+0xfc>)
 8010780:	4833      	ldr	r0, [pc, #204]	; (8010850 <udp_bind+0x100>)
 8010782:	f001 ff47 	bl	8012614 <iprintf>
 8010786:	f06f 000f 	mvn.w	r0, #15
 801078a:	e053      	b.n	8010834 <udp_bind+0xe4>
  rebind = 0;
 801078c:	2700      	movs	r7, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801078e:	2a00      	cmp	r2, #0
 8010790:	d12f      	bne.n	80107f2 <udp_bind+0xa2>
 8010792:	4a30      	ldr	r2, [pc, #192]	; (8010854 <udp_bind+0x104>)
 8010794:	8815      	ldrh	r5, [r2, #0]
  rebind = 0;
 8010796:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801079a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801079e:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80107a2:	4565      	cmp	r5, ip
 80107a4:	d014      	beq.n	80107d0 <udp_bind+0x80>
 80107a6:	3501      	adds	r5, #1
 80107a8:	b2ad      	uxth	r5, r5
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80107aa:	b1e3      	cbz	r3, 80107e6 <udp_bind+0x96>
 80107ac:	461a      	mov	r2, r3
    if (pcb->local_port == udp_port) {
 80107ae:	8a50      	ldrh	r0, [r2, #18]
 80107b0:	42a8      	cmp	r0, r5
 80107b2:	d00f      	beq.n	80107d4 <udp_bind+0x84>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80107b4:	68d2      	ldr	r2, [r2, #12]
 80107b6:	2a00      	cmp	r2, #0
 80107b8:	d1f9      	bne.n	80107ae <udp_bind+0x5e>
 80107ba:	4b26      	ldr	r3, [pc, #152]	; (8010854 <udp_bind+0x104>)
 80107bc:	801d      	strh	r5, [r3, #0]
  return udp_port;
 80107be:	4b25      	ldr	r3, [pc, #148]	; (8010854 <udp_bind+0x104>)
 80107c0:	881a      	ldrh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80107c2:	b329      	cbz	r1, 8010810 <udp_bind+0xc0>
 80107c4:	680b      	ldr	r3, [r1, #0]
 80107c6:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 80107c8:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80107ca:	b377      	cbz	r7, 801082a <udp_bind+0xda>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80107cc:	2000      	movs	r0, #0
 80107ce:	e031      	b.n	8010834 <udp_bind+0xe4>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80107d0:	4675      	mov	r5, lr
 80107d2:	e7ea      	b.n	80107aa <udp_bind+0x5a>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80107d4:	3e01      	subs	r6, #1
 80107d6:	b2b6      	uxth	r6, r6
 80107d8:	2e00      	cmp	r6, #0
 80107da:	d1e2      	bne.n	80107a2 <udp_bind+0x52>
 80107dc:	4b1d      	ldr	r3, [pc, #116]	; (8010854 <udp_bind+0x104>)
 80107de:	801d      	strh	r5, [r3, #0]
      return ERR_USE;
 80107e0:	f06f 0007 	mvn.w	r0, #7
 80107e4:	e026      	b.n	8010834 <udp_bind+0xe4>
 80107e6:	4b1b      	ldr	r3, [pc, #108]	; (8010854 <udp_bind+0x104>)
 80107e8:	801d      	strh	r5, [r3, #0]
 80107ea:	e7e8      	b.n	80107be <udp_bind+0x6e>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d0e7      	beq.n	80107c2 <udp_bind+0x72>
      if (pcb != ipcb) {
 80107f2:	429c      	cmp	r4, r3
 80107f4:	d0fa      	beq.n	80107ec <udp_bind+0x9c>
          if ((ipcb->local_port == port) &&
 80107f6:	8a58      	ldrh	r0, [r3, #18]
 80107f8:	4290      	cmp	r0, r2
 80107fa:	d1f7      	bne.n	80107ec <udp_bind+0x9c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80107fc:	681d      	ldr	r5, [r3, #0]
 80107fe:	6808      	ldr	r0, [r1, #0]
 8010800:	b140      	cbz	r0, 8010814 <udp_bind+0xc4>
 8010802:	4285      	cmp	r5, r0
 8010804:	d006      	beq.n	8010814 <udp_bind+0xc4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010806:	2d00      	cmp	r5, #0
 8010808:	d1f0      	bne.n	80107ec <udp_bind+0x9c>
            return ERR_USE;
 801080a:	f06f 0007 	mvn.w	r0, #7
 801080e:	e011      	b.n	8010834 <udp_bind+0xe4>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010810:	2300      	movs	r3, #0
 8010812:	e7d8      	b.n	80107c6 <udp_bind+0x76>
            return ERR_USE;
 8010814:	f06f 0007 	mvn.w	r0, #7
 8010818:	e00c      	b.n	8010834 <udp_bind+0xe4>
  if (port == 0) {
 801081a:	b962      	cbnz	r2, 8010836 <udp_bind+0xe6>
  rebind = 0;
 801081c:	2700      	movs	r7, #0
 801081e:	e7b8      	b.n	8010792 <udp_bind+0x42>
      rebind = 1;
 8010820:	2701      	movs	r7, #1
 8010822:	e7b4      	b.n	801078e <udp_bind+0x3e>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010824:	2300      	movs	r3, #0
 8010826:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
 8010828:	8262      	strh	r2, [r4, #18]
    pcb->next = udp_pcbs;
 801082a:	4b06      	ldr	r3, [pc, #24]	; (8010844 <udp_bind+0xf4>)
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 8010830:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8010832:	2000      	movs	r0, #0
}
 8010834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010836:	2900      	cmp	r1, #0
 8010838:	d0f4      	beq.n	8010824 <udp_bind+0xd4>
  rebind = 0;
 801083a:	2700      	movs	r7, #0
 801083c:	e7c2      	b.n	80107c4 <udp_bind+0x74>
 801083e:	bf00      	nop
 8010840:	08016000 	.word	0x08016000
 8010844:	2001b624 	.word	0x2001b624
 8010848:	08015c30 	.word	0x08015c30
 801084c:	08015cd8 	.word	0x08015cd8
 8010850:	0801397c 	.word	0x0801397c
 8010854:	20000016 	.word	0x20000016

08010858 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010858:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801085a:	b110      	cbz	r0, 8010862 <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801085c:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 801085e:	61c2      	str	r2, [r0, #28]
}
 8010860:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010862:	4b04      	ldr	r3, [pc, #16]	; (8010874 <udp_recv+0x1c>)
 8010864:	f240 428a 	movw	r2, #1162	; 0x48a
 8010868:	4903      	ldr	r1, [pc, #12]	; (8010878 <udp_recv+0x20>)
 801086a:	4804      	ldr	r0, [pc, #16]	; (801087c <udp_recv+0x24>)
 801086c:	f001 fed2 	bl	8012614 <iprintf>
 8010870:	e7f6      	b.n	8010860 <udp_recv+0x8>
 8010872:	bf00      	nop
 8010874:	08015c30 	.word	0x08015c30
 8010878:	08015cf0 	.word	0x08015cf0
 801087c:	0801397c 	.word	0x0801397c

08010880 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010880:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010882:	b150      	cbz	r0, 801089a <udp_remove+0x1a>
 8010884:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010886:	4b0e      	ldr	r3, [pc, #56]	; (80108c0 <udp_remove+0x40>)
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	4282      	cmp	r2, r0
 801088c:	d10e      	bne.n	80108ac <udp_remove+0x2c>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801088e:	68c2      	ldr	r2, [r0, #12]
 8010890:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010892:	2000      	movs	r0, #0
 8010894:	f7fa ff8c 	bl	800b7b0 <memp_free>
}
 8010898:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801089a:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <udp_remove+0x44>)
 801089c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80108a0:	4909      	ldr	r1, [pc, #36]	; (80108c8 <udp_remove+0x48>)
 80108a2:	480a      	ldr	r0, [pc, #40]	; (80108cc <udp_remove+0x4c>)
 80108a4:	f001 feb6 	bl	8012614 <iprintf>
 80108a8:	e7f6      	b.n	8010898 <udp_remove+0x18>
 80108aa:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80108ac:	2a00      	cmp	r2, #0
 80108ae:	d0f0      	beq.n	8010892 <udp_remove+0x12>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80108b0:	68d3      	ldr	r3, [r2, #12]
 80108b2:	428b      	cmp	r3, r1
 80108b4:	d1f9      	bne.n	80108aa <udp_remove+0x2a>
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d0f7      	beq.n	80108aa <udp_remove+0x2a>
        pcb2->next = pcb->next;
 80108ba:	68cb      	ldr	r3, [r1, #12]
 80108bc:	60d3      	str	r3, [r2, #12]
        break;
 80108be:	e7e8      	b.n	8010892 <udp_remove+0x12>
 80108c0:	2001b624 	.word	0x2001b624
 80108c4:	08015c30 	.word	0x08015c30
 80108c8:	08015d08 	.word	0x08015d08
 80108cc:	0801397c 	.word	0x0801397c

080108d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80108d0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80108d2:	2000      	movs	r0, #0
 80108d4:	f7fa ff52 	bl	800b77c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80108d8:	4604      	mov	r4, r0
 80108da:	b128      	cbz	r0, 80108e8 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80108dc:	2220      	movs	r2, #32
 80108de:	2100      	movs	r1, #0
 80108e0:	f001 fe35 	bl	801254e <memset>
    pcb->ttl = UDP_TTL;
 80108e4:	23ff      	movs	r3, #255	; 0xff
 80108e6:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80108e8:	4620      	mov	r0, r4
 80108ea:	bd10      	pop	{r4, pc}

080108ec <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80108ec:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80108ee:	f7ff ffef 	bl	80108d0 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 80108f2:	bd08      	pop	{r3, pc}

080108f4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80108f4:	b1b0      	cbz	r0, 8010924 <udp_netif_ip_addr_changed+0x30>
 80108f6:	4602      	mov	r2, r0
 80108f8:	6803      	ldr	r3, [r0, #0]
 80108fa:	b19b      	cbz	r3, 8010924 <udp_netif_ip_addr_changed+0x30>
 80108fc:	b191      	cbz	r1, 8010924 <udp_netif_ip_addr_changed+0x30>
 80108fe:	680b      	ldr	r3, [r1, #0]
 8010900:	b183      	cbz	r3, 8010924 <udp_netif_ip_addr_changed+0x30>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010902:	4b09      	ldr	r3, [pc, #36]	; (8010928 <udp_netif_ip_addr_changed+0x34>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	b16b      	cbz	r3, 8010924 <udp_netif_ip_addr_changed+0x30>
{
 8010908:	b410      	push	{r4}
 801090a:	e001      	b.n	8010910 <udp_netif_ip_addr_changed+0x1c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	b133      	cbz	r3, 801091e <udp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010910:	681c      	ldr	r4, [r3, #0]
 8010912:	6810      	ldr	r0, [r2, #0]
 8010914:	4284      	cmp	r4, r0
 8010916:	d1f9      	bne.n	801090c <udp_netif_ip_addr_changed+0x18>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010918:	6808      	ldr	r0, [r1, #0]
 801091a:	6018      	str	r0, [r3, #0]
 801091c:	e7f6      	b.n	801090c <udp_netif_ip_addr_changed+0x18>
      }
    }
  }
}
 801091e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010922:	4770      	bx	lr
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	2001b624 	.word	0x2001b624

0801092c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801092c:	b510      	push	{r4, lr}
 801092e:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010930:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8010934:	4b09      	ldr	r3, [pc, #36]	; (801095c <etharp_free_entry+0x30>)
 8010936:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 801093a:	b138      	cbz	r0, 801094c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801093c:	f7fb f9f8 	bl	800bd30 <pbuf_free>
    arp_table[i].q = NULL;
 8010940:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010944:	00db      	lsls	r3, r3, #3
 8010946:	4a05      	ldr	r2, [pc, #20]	; (801095c <etharp_free_entry+0x30>)
 8010948:	2100      	movs	r1, #0
 801094a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801094c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010950:	4802      	ldr	r0, [pc, #8]	; (801095c <etharp_free_entry+0x30>)
 8010952:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8010956:	2300      	movs	r3, #0
 8010958:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801095a:	bd10      	pop	{r4, pc}
 801095c:	20012c04 	.word	0x20012c04

08010960 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	b085      	sub	sp, #20
 8010966:	4606      	mov	r6, r0
 8010968:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801096a:	4c4d      	ldr	r4, [pc, #308]	; (8010aa0 <etharp_find_entry+0x140>)
{
 801096c:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801096e:	9303      	str	r3, [sp, #12]
  s16_t old_queue = ARP_TABLE_SIZE;
 8010970:	f04f 0b0a 	mov.w	fp, #10
  s16_t empty = ARP_TABLE_SIZE;
 8010974:	465d      	mov	r5, fp
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010976:	46d8      	mov	r8, fp
 8010978:	46da      	mov	sl, fp
 801097a:	9302      	str	r3, [sp, #8]
 801097c:	9301      	str	r3, [sp, #4]
 801097e:	4689      	mov	r9, r1
 8010980:	e01c      	b.n	80109bc <etharp_find_entry+0x5c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010982:	2f00      	cmp	r7, #0
 8010984:	f000 8082 	beq.w	8010a8c <etharp_find_entry+0x12c>
 8010988:	6890      	ldr	r0, [r2, #8]
 801098a:	42b8      	cmp	r0, r7
 801098c:	d126      	bne.n	80109dc <etharp_find_entry+0x7c>
 801098e:	4665      	mov	r5, ip
 8010990:	e04d      	b.n	8010a2e <etharp_find_entry+0xce>
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010992:	6811      	ldr	r1, [r2, #0]
 8010994:	b131      	cbz	r1, 80109a4 <etharp_find_entry+0x44>
          if (arp_table[i].ctime >= age_queue) {
 8010996:	8a52      	ldrh	r2, [r2, #18]
 8010998:	9902      	ldr	r1, [sp, #8]
 801099a:	428a      	cmp	r2, r1
 801099c:	d30a      	bcc.n	80109b4 <etharp_find_entry+0x54>
            old_queue = i;
            age_queue = arp_table[i].ctime;
 801099e:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_queue) {
 80109a0:	46e3      	mov	fp, ip
 80109a2:	e007      	b.n	80109b4 <etharp_find_entry+0x54>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80109a4:	8a52      	ldrh	r2, [r2, #18]
 80109a6:	9903      	ldr	r1, [sp, #12]
 80109a8:	428a      	cmp	r2, r1
 80109aa:	d303      	bcc.n	80109b4 <etharp_find_entry+0x54>
            old_pending = i;
            age_pending = arp_table[i].ctime;
 80109ac:	9203      	str	r2, [sp, #12]
          if (arp_table[i].ctime >= age_pending) {
 80109ae:	46e2      	mov	sl, ip
 80109b0:	e000      	b.n	80109b4 <etharp_find_entry+0x54>
 80109b2:	4665      	mov	r5, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80109b4:	3301      	adds	r3, #1
 80109b6:	3418      	adds	r4, #24
 80109b8:	2b0a      	cmp	r3, #10
 80109ba:	d018      	beq.n	80109ee <etharp_find_entry+0x8e>
 80109bc:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 80109c0:	4622      	mov	r2, r4
 80109c2:	7d21      	ldrb	r1, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80109c4:	2d0a      	cmp	r5, #10
 80109c6:	d101      	bne.n	80109cc <etharp_find_entry+0x6c>
 80109c8:	2900      	cmp	r1, #0
 80109ca:	d0f2      	beq.n	80109b2 <etharp_find_entry+0x52>
    } else if (state != ETHARP_STATE_EMPTY) {
 80109cc:	2900      	cmp	r1, #0
 80109ce:	d0f1      	beq.n	80109b4 <etharp_find_entry+0x54>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80109d0:	b126      	cbz	r6, 80109dc <etharp_find_entry+0x7c>
 80109d2:	6830      	ldr	r0, [r6, #0]
 80109d4:	4686      	mov	lr, r0
 80109d6:	6850      	ldr	r0, [r2, #4]
 80109d8:	4586      	cmp	lr, r0
 80109da:	d0d2      	beq.n	8010982 <etharp_find_entry+0x22>
      if (state == ETHARP_STATE_PENDING) {
 80109dc:	2901      	cmp	r1, #1
 80109de:	d0d8      	beq.n	8010992 <etharp_find_entry+0x32>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80109e0:	8a52      	ldrh	r2, [r2, #18]
 80109e2:	9901      	ldr	r1, [sp, #4]
 80109e4:	428a      	cmp	r2, r1
 80109e6:	d3e5      	bcc.n	80109b4 <etharp_find_entry+0x54>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 80109e8:	9201      	str	r2, [sp, #4]
          if (arp_table[i].ctime >= age_stable) {
 80109ea:	46e0      	mov	r8, ip
 80109ec:	e7e2      	b.n	80109b4 <etharp_find_entry+0x54>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80109ee:	f019 0f02 	tst.w	r9, #2
 80109f2:	d14d      	bne.n	8010a90 <etharp_find_entry+0x130>
 80109f4:	2d0a      	cmp	r5, #10
 80109f6:	d01e      	beq.n	8010a36 <etharp_find_entry+0xd6>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80109f8:	2d09      	cmp	r5, #9
 80109fa:	dc1f      	bgt.n	8010a3c <etharp_find_entry+0xdc>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80109fc:	462c      	mov	r4, r5
 80109fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8010a02:	4a27      	ldr	r2, [pc, #156]	; (8010aa0 <etharp_find_entry+0x140>)
 8010a04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a08:	7d1b      	ldrb	r3, [r3, #20]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d136      	bne.n	8010a7c <etharp_find_entry+0x11c>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010a0e:	b136      	cbz	r6, 8010a1e <etharp_find_entry+0xbe>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010a10:	6831      	ldr	r1, [r6, #0]
 8010a12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010a16:	4a22      	ldr	r2, [pc, #136]	; (8010aa0 <etharp_find_entry+0x140>)
 8010a18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a1c:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8010a1e:	4b20      	ldr	r3, [pc, #128]	; (8010aa0 <etharp_find_entry+0x140>)
 8010a20:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8010a24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010a28:	2100      	movs	r1, #0
 8010a2a:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010a2c:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8010a2e:	4628      	mov	r0, r5
 8010a30:	b005      	add	sp, #20
 8010a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010a36:	f019 0f01 	tst.w	r9, #1
 8010a3a:	d02c      	beq.n	8010a96 <etharp_find_entry+0x136>
    if (old_stable < ARP_TABLE_SIZE) {
 8010a3c:	f1b8 0f09 	cmp.w	r8, #9
 8010a40:	dc11      	bgt.n	8010a66 <etharp_find_entry+0x106>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010a42:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8010a46:	4a16      	ldr	r2, [pc, #88]	; (8010aa0 <etharp_find_entry+0x140>)
 8010a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010a4c:	b133      	cbz	r3, 8010a5c <etharp_find_entry+0xfc>
 8010a4e:	4b15      	ldr	r3, [pc, #84]	; (8010aa4 <etharp_find_entry+0x144>)
 8010a50:	f240 126d 	movw	r2, #365	; 0x16d
 8010a54:	4914      	ldr	r1, [pc, #80]	; (8010aa8 <etharp_find_entry+0x148>)
 8010a56:	4815      	ldr	r0, [pc, #84]	; (8010aac <etharp_find_entry+0x14c>)
 8010a58:	f001 fddc 	bl	8012614 <iprintf>
    etharp_free_entry(i);
 8010a5c:	4640      	mov	r0, r8
 8010a5e:	f7ff ff65 	bl	801092c <etharp_free_entry>
 8010a62:	4645      	mov	r5, r8
 8010a64:	e7ca      	b.n	80109fc <etharp_find_entry+0x9c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010a66:	f1ba 0f09 	cmp.w	sl, #9
 8010a6a:	dd17      	ble.n	8010a9c <etharp_find_entry+0x13c>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010a6c:	f1bb 0f09 	cmp.w	fp, #9
 8010a70:	dc01      	bgt.n	8010a76 <etharp_find_entry+0x116>
 8010a72:	46d8      	mov	r8, fp
 8010a74:	e7f2      	b.n	8010a5c <etharp_find_entry+0xfc>
      return (s16_t)ERR_MEM;
 8010a76:	f04f 35ff 	mov.w	r5, #4294967295
 8010a7a:	e7d8      	b.n	8010a2e <etharp_find_entry+0xce>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010a7c:	4b09      	ldr	r3, [pc, #36]	; (8010aa4 <etharp_find_entry+0x144>)
 8010a7e:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010a82:	490b      	ldr	r1, [pc, #44]	; (8010ab0 <etharp_find_entry+0x150>)
 8010a84:	4809      	ldr	r0, [pc, #36]	; (8010aac <etharp_find_entry+0x14c>)
 8010a86:	f001 fdc5 	bl	8012614 <iprintf>
 8010a8a:	e7c0      	b.n	8010a0e <etharp_find_entry+0xae>
 8010a8c:	4665      	mov	r5, ip
 8010a8e:	e7ce      	b.n	8010a2e <etharp_find_entry+0xce>
    return (s16_t)ERR_MEM;
 8010a90:	f04f 35ff 	mov.w	r5, #4294967295
 8010a94:	e7cb      	b.n	8010a2e <etharp_find_entry+0xce>
 8010a96:	f04f 35ff 	mov.w	r5, #4294967295
 8010a9a:	e7c8      	b.n	8010a2e <etharp_find_entry+0xce>
 8010a9c:	46d0      	mov	r8, sl
 8010a9e:	e7dd      	b.n	8010a5c <etharp_find_entry+0xfc>
 8010aa0:	20012c04 	.word	0x20012c04
 8010aa4:	08015d20 	.word	0x08015d20
 8010aa8:	08015d58 	.word	0x08015d58
 8010aac:	0801397c 	.word	0x0801397c
 8010ab0:	08015d70 	.word	0x08015d70

08010ab4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab8:	b082      	sub	sp, #8
 8010aba:	460f      	mov	r7, r1
 8010abc:	4690      	mov	r8, r2
 8010abe:	461d      	mov	r5, r3
 8010ac0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ac4:	4681      	mov	r9, r0
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d042      	beq.n	8010b50 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010aca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ace:	211c      	movs	r1, #28
 8010ad0:	200e      	movs	r0, #14
 8010ad2:	f7fb f99d 	bl	800be10 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010ad6:	4606      	mov	r6, r0
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d051      	beq.n	8010b80 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010adc:	8943      	ldrh	r3, [r0, #10]
 8010ade:	2b1b      	cmp	r3, #27
 8010ae0:	d93e      	bls.n	8010b60 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010ae2:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010ae4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8010ae8:	f7fa fb14 	bl	800b114 <lwip_htons>
 8010aec:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010aee:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8010af2:	2b06      	cmp	r3, #6
 8010af4:	d13c      	bne.n	8010b70 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010af6:	682b      	ldr	r3, [r5, #0]
 8010af8:	60a3      	str	r3, [r4, #8]
 8010afa:	88ab      	ldrh	r3, [r5, #4]
 8010afc:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010afe:	f8da 3000 	ldr.w	r3, [sl]
 8010b02:	f8c4 3012 	str.w	r3, [r4, #18]
 8010b06:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8010b0a:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010b1a:	2500      	movs	r5, #0
 8010b1c:	7025      	strb	r5, [r4, #0]
 8010b1e:	2301      	movs	r3, #1
 8010b20:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010b22:	2308      	movs	r3, #8
 8010b24:	70a3      	strb	r3, [r4, #2]
 8010b26:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010b28:	2306      	movs	r3, #6
 8010b2a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010b2c:	2304      	movs	r3, #4
 8010b2e:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010b30:	f640 0306 	movw	r3, #2054	; 0x806
 8010b34:	9300      	str	r3, [sp, #0]
 8010b36:	4643      	mov	r3, r8
 8010b38:	463a      	mov	r2, r7
 8010b3a:	4631      	mov	r1, r6
 8010b3c:	4648      	mov	r0, r9
 8010b3e:	f001 faa9 	bl	8012094 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010b42:	4630      	mov	r0, r6
 8010b44:	f7fb f8f4 	bl	800bd30 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8010b48:	4628      	mov	r0, r5
}
 8010b4a:	b002      	add	sp, #8
 8010b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010b50:	4b0d      	ldr	r3, [pc, #52]	; (8010b88 <etharp_raw+0xd4>)
 8010b52:	f240 4257 	movw	r2, #1111	; 0x457
 8010b56:	490d      	ldr	r1, [pc, #52]	; (8010b8c <etharp_raw+0xd8>)
 8010b58:	480d      	ldr	r0, [pc, #52]	; (8010b90 <etharp_raw+0xdc>)
 8010b5a:	f001 fd5b 	bl	8012614 <iprintf>
 8010b5e:	e7b4      	b.n	8010aca <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010b60:	4b09      	ldr	r3, [pc, #36]	; (8010b88 <etharp_raw+0xd4>)
 8010b62:	f240 4262 	movw	r2, #1122	; 0x462
 8010b66:	490b      	ldr	r1, [pc, #44]	; (8010b94 <etharp_raw+0xe0>)
 8010b68:	4809      	ldr	r0, [pc, #36]	; (8010b90 <etharp_raw+0xdc>)
 8010b6a:	f001 fd53 	bl	8012614 <iprintf>
 8010b6e:	e7b8      	b.n	8010ae2 <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010b70:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <etharp_raw+0xd4>)
 8010b72:	f240 4269 	movw	r2, #1129	; 0x469
 8010b76:	4908      	ldr	r1, [pc, #32]	; (8010b98 <etharp_raw+0xe4>)
 8010b78:	4805      	ldr	r0, [pc, #20]	; (8010b90 <etharp_raw+0xdc>)
 8010b7a:	f001 fd4b 	bl	8012614 <iprintf>
 8010b7e:	e7ba      	b.n	8010af6 <etharp_raw+0x42>
    return ERR_MEM;
 8010b80:	f04f 30ff 	mov.w	r0, #4294967295
 8010b84:	e7e1      	b.n	8010b4a <etharp_raw+0x96>
 8010b86:	bf00      	nop
 8010b88:	08015d20 	.word	0x08015d20
 8010b8c:	0801396c 	.word	0x0801396c
 8010b90:	0801397c 	.word	0x0801397c
 8010b94:	08015d9c 	.word	0x08015d9c
 8010b98:	08015dd0 	.word	0x08015dd0

08010b9c <etharp_cleanup_netif>:
{
 8010b9c:	b570      	push	{r4, r5, r6, lr}
 8010b9e:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ba0:	4c08      	ldr	r4, [pc, #32]	; (8010bc4 <etharp_cleanup_netif+0x28>)
 8010ba2:	2500      	movs	r5, #0
 8010ba4:	e003      	b.n	8010bae <etharp_cleanup_netif+0x12>
 8010ba6:	3501      	adds	r5, #1
 8010ba8:	3418      	adds	r4, #24
 8010baa:	2d0a      	cmp	r5, #10
 8010bac:	d009      	beq.n	8010bc2 <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010bae:	7d23      	ldrb	r3, [r4, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d0f8      	beq.n	8010ba6 <etharp_cleanup_netif+0xa>
 8010bb4:	68a3      	ldr	r3, [r4, #8]
 8010bb6:	42b3      	cmp	r3, r6
 8010bb8:	d1f5      	bne.n	8010ba6 <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 8010bba:	4628      	mov	r0, r5
 8010bbc:	f7ff feb6 	bl	801092c <etharp_free_entry>
 8010bc0:	e7f1      	b.n	8010ba6 <etharp_cleanup_netif+0xa>
}
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	20012c04 	.word	0x20012c04

08010bc8 <etharp_input>:
{
 8010bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bcc:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010bce:	b1a9      	cbz	r1, 8010bfc <etharp_input+0x34>
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8010bd4:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010bd6:	882b      	ldrh	r3, [r5, #0]
 8010bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bdc:	d108      	bne.n	8010bf0 <etharp_input+0x28>
 8010bde:	792b      	ldrb	r3, [r5, #4]
 8010be0:	2b06      	cmp	r3, #6
 8010be2:	d105      	bne.n	8010bf0 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010be4:	796b      	ldrb	r3, [r5, #5]
 8010be6:	2b04      	cmp	r3, #4
 8010be8:	d102      	bne.n	8010bf0 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010bea:	886b      	ldrh	r3, [r5, #2]
 8010bec:	2b08      	cmp	r3, #8
 8010bee:	d00d      	beq.n	8010c0c <etharp_input+0x44>
    pbuf_free(p);
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	f7fb f89d 	bl	800bd30 <pbuf_free>
}
 8010bf6:	b007      	add	sp, #28
 8010bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010bfc:	4b44      	ldr	r3, [pc, #272]	; (8010d10 <etharp_input+0x148>)
 8010bfe:	f240 228a 	movw	r2, #650	; 0x28a
 8010c02:	4944      	ldr	r1, [pc, #272]	; (8010d14 <etharp_input+0x14c>)
 8010c04:	4844      	ldr	r0, [pc, #272]	; (8010d18 <etharp_input+0x150>)
 8010c06:	f001 fd05 	bl	8012614 <iprintf>
 8010c0a:	e7f4      	b.n	8010bf6 <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010c0c:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8010c10:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010c12:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010c14:	684b      	ldr	r3, [r1, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d156      	bne.n	8010cc8 <etharp_input+0x100>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010c1a:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 8010c1e:	f04f 0800 	mov.w	r8, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010c22:	f04f 0902 	mov.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010c26:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8010c2a:	2b06      	cmp	r3, #6
 8010c2c:	d159      	bne.n	8010ce2 <etharp_input+0x11a>
  if (ip4_addr_isany(ipaddr) ||
 8010c2e:	9805      	ldr	r0, [sp, #20]
 8010c30:	2800      	cmp	r0, #0
 8010c32:	d03e      	beq.n	8010cb2 <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c34:	4631      	mov	r1, r6
 8010c36:	f000 fd58 	bl	80116ea <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d139      	bne.n	8010cb2 <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 8010c3e:	9b05      	ldr	r3, [sp, #20]
 8010c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c44:	2be0      	cmp	r3, #224	; 0xe0
 8010c46:	d034      	beq.n	8010cb2 <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 8010c48:	4632      	mov	r2, r6
 8010c4a:	4649      	mov	r1, r9
 8010c4c:	a805      	add	r0, sp, #20
 8010c4e:	f7ff fe87 	bl	8010960 <etharp_find_entry>
  if (i < 0) {
 8010c52:	1e03      	subs	r3, r0, #0
 8010c54:	db2d      	blt.n	8010cb2 <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010c56:	4931      	ldr	r1, [pc, #196]	; (8010d1c <etharp_input+0x154>)
 8010c58:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8010c5c:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 8010c60:	2202      	movs	r2, #2
 8010c62:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 8010c66:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010c6a:	4672      	mov	r2, lr
 8010c6c:	00d2      	lsls	r2, r2, #3
 8010c6e:	320c      	adds	r2, #12
 8010c70:	eb01 0902 	add.w	r9, r1, r2
 8010c74:	6838      	ldr	r0, [r7, #0]
 8010c76:	5088      	str	r0, [r1, r2]
 8010c78:	88ba      	ldrh	r2, [r7, #4]
 8010c7a:	f8a9 2004 	strh.w	r2, [r9, #4]
  arp_table[i].ctime = 0;
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 8010c84:	f851 903e 	ldr.w	r9, [r1, lr, lsl #3]
 8010c88:	f1b9 0f00 	cmp.w	r9, #0
 8010c8c:	d011      	beq.n	8010cb2 <etharp_input+0xea>
    arp_table[i].q = NULL;
 8010c8e:	4673      	mov	r3, lr
 8010c90:	00db      	lsls	r3, r3, #3
 8010c92:	460a      	mov	r2, r1
 8010c94:	2100      	movs	r1, #0
 8010c96:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	463b      	mov	r3, r7
 8010ca0:	f106 0226 	add.w	r2, r6, #38	; 0x26
 8010ca4:	4649      	mov	r1, r9
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f001 f9f4 	bl	8012094 <ethernet_output>
    pbuf_free(p);
 8010cac:	4648      	mov	r0, r9
 8010cae:	f7fb f83f 	bl	800bd30 <pbuf_free>
  switch (hdr->opcode) {
 8010cb2:	88eb      	ldrh	r3, [r5, #6]
      if (for_us) {
 8010cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cb8:	d102      	bne.n	8010cc0 <etharp_input+0xf8>
 8010cba:	f1b8 0f00 	cmp.w	r8, #0
 8010cbe:	d118      	bne.n	8010cf2 <etharp_input+0x12a>
  pbuf_free(p);
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7fb f835 	bl	800bd30 <pbuf_free>
 8010cc6:	e796      	b.n	8010bf6 <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010cc8:	f105 0708 	add.w	r7, r5, #8
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d004      	beq.n	8010cda <etharp_input+0x112>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010cd0:	f04f 0800 	mov.w	r8, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010cd4:	f04f 0902 	mov.w	r9, #2
 8010cd8:	e7a5      	b.n	8010c26 <etharp_input+0x5e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010cda:	f04f 0801 	mov.w	r8, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010cde:	46c1      	mov	r9, r8
 8010ce0:	e7a1      	b.n	8010c26 <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010ce2:	4b0b      	ldr	r3, [pc, #44]	; (8010d10 <etharp_input+0x148>)
 8010ce4:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010ce8:	490d      	ldr	r1, [pc, #52]	; (8010d20 <etharp_input+0x158>)
 8010cea:	480b      	ldr	r0, [pc, #44]	; (8010d18 <etharp_input+0x150>)
 8010cec:	f001 fc92 	bl	8012614 <iprintf>
 8010cf0:	e79d      	b.n	8010c2e <etharp_input+0x66>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010cf2:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 8010cf6:	2302      	movs	r3, #2
 8010cf8:	9303      	str	r3, [sp, #12]
 8010cfa:	ab05      	add	r3, sp, #20
 8010cfc:	9302      	str	r3, [sp, #8]
 8010cfe:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010d00:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	460b      	mov	r3, r1
 8010d06:	463a      	mov	r2, r7
 8010d08:	4630      	mov	r0, r6
 8010d0a:	f7ff fed3 	bl	8010ab4 <etharp_raw>
 8010d0e:	e7d7      	b.n	8010cc0 <etharp_input+0xf8>
 8010d10:	08015d20 	.word	0x08015d20
 8010d14:	0801396c 	.word	0x0801396c
 8010d18:	0801397c 	.word	0x0801397c
 8010d1c:	20012c04 	.word	0x20012c04
 8010d20:	08015e34 	.word	0x08015e34

08010d24 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010d24:	b510      	push	{r4, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010d2a:	f100 0326 	add.w	r3, r0, #38	; 0x26
 8010d2e:	2401      	movs	r4, #1
 8010d30:	9403      	str	r4, [sp, #12]
 8010d32:	9102      	str	r1, [sp, #8]
 8010d34:	4904      	ldr	r1, [pc, #16]	; (8010d48 <etharp_request+0x24>)
 8010d36:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010d38:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010d3a:	9200      	str	r2, [sp, #0]
 8010d3c:	4a03      	ldr	r2, [pc, #12]	; (8010d4c <etharp_request+0x28>)
 8010d3e:	4619      	mov	r1, r3
 8010d40:	f7ff feb8 	bl	8010ab4 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8010d44:	b004      	add	sp, #16
 8010d46:	bd10      	pop	{r4, pc}
 8010d48:	08016208 	.word	0x08016208
 8010d4c:	08016200 	.word	0x08016200

08010d50 <etharp_tmr>:
{
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d52:	4c15      	ldr	r4, [pc, #84]	; (8010da8 <etharp_tmr+0x58>)
 8010d54:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010d56:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010d58:	2604      	movs	r6, #4
 8010d5a:	e006      	b.n	8010d6a <etharp_tmr+0x1a>
        etharp_free_entry(i);
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f7ff fde5 	bl	801092c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d62:	3501      	adds	r5, #1
 8010d64:	3418      	adds	r4, #24
 8010d66:	2d0a      	cmp	r5, #10
 8010d68:	d01d      	beq.n	8010da6 <etharp_tmr+0x56>
    u8_t state = arp_table[i].state;
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8010d6e:	2a00      	cmp	r2, #0
 8010d70:	d0f7      	beq.n	8010d62 <etharp_tmr+0x12>
      arp_table[i].ctime++;
 8010d72:	8a63      	ldrh	r3, [r4, #18]
 8010d74:	3301      	adds	r3, #1
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010d7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010d7e:	d2ed      	bcs.n	8010d5c <etharp_tmr+0xc>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010d80:	2b04      	cmp	r3, #4
 8010d82:	d901      	bls.n	8010d88 <etharp_tmr+0x38>
 8010d84:	2a01      	cmp	r2, #1
 8010d86:	d0e9      	beq.n	8010d5c <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010d88:	2a03      	cmp	r2, #3
 8010d8a:	d008      	beq.n	8010d9e <etharp_tmr+0x4e>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010d8c:	2a04      	cmp	r2, #4
 8010d8e:	d008      	beq.n	8010da2 <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010d90:	2a01      	cmp	r2, #1
 8010d92:	d1e6      	bne.n	8010d62 <etharp_tmr+0x12>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010d94:	1d21      	adds	r1, r4, #4
 8010d96:	6880      	ldr	r0, [r0, #8]
 8010d98:	f7ff ffc4 	bl	8010d24 <etharp_request>
 8010d9c:	e7e1      	b.n	8010d62 <etharp_tmr+0x12>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010d9e:	7506      	strb	r6, [r0, #20]
 8010da0:	e7df      	b.n	8010d62 <etharp_tmr+0x12>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010da2:	7507      	strb	r7, [r0, #20]
 8010da4:	e7dd      	b.n	8010d62 <etharp_tmr+0x12>
}
 8010da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010da8:	20012c04 	.word	0x20012c04

08010dac <etharp_output_to_arp_index>:
{
 8010dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dae:	b085      	sub	sp, #20
 8010db0:	4605      	mov	r5, r0
 8010db2:	460e      	mov	r6, r1
 8010db4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010db6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010dba:	4b32      	ldr	r3, [pc, #200]	; (8010e84 <etharp_output_to_arp_index+0xd8>)
 8010dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dc0:	7d1b      	ldrb	r3, [r3, #20]
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	d919      	bls.n	8010dfa <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010dc6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010dca:	4a2e      	ldr	r2, [pc, #184]	; (8010e84 <etharp_output_to_arp_index+0xd8>)
 8010dcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010dd0:	7d1b      	ldrb	r3, [r3, #20]
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d019      	beq.n	8010e0a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010dd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010dda:	4b2a      	ldr	r3, [pc, #168]	; (8010e84 <etharp_output_to_arp_index+0xd8>)
 8010ddc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010de0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010de4:	9300      	str	r3, [sp, #0]
 8010de6:	f104 030c 	add.w	r3, r4, #12
 8010dea:	f105 0226 	add.w	r2, r5, #38	; 0x26
 8010dee:	4631      	mov	r1, r6
 8010df0:	4628      	mov	r0, r5
 8010df2:	f001 f94f 	bl	8012094 <ethernet_output>
}
 8010df6:	b005      	add	sp, #20
 8010df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010dfa:	4b23      	ldr	r3, [pc, #140]	; (8010e88 <etharp_output_to_arp_index+0xdc>)
 8010dfc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010e00:	4922      	ldr	r1, [pc, #136]	; (8010e8c <etharp_output_to_arp_index+0xe0>)
 8010e02:	4823      	ldr	r0, [pc, #140]	; (8010e90 <etharp_output_to_arp_index+0xe4>)
 8010e04:	f001 fc06 	bl	8012614 <iprintf>
 8010e08:	e7dd      	b.n	8010dc6 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010e0a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010e0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e12:	8a5b      	ldrh	r3, [r3, #18]
 8010e14:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010e18:	d822      	bhi.n	8010e60 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010e1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010e1e:	d3da      	bcc.n	8010dd6 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010e20:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8010e24:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e26:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010e2a:	4a16      	ldr	r2, [pc, #88]	; (8010e84 <etharp_output_to_arp_index+0xd8>)
 8010e2c:	f100 070c 	add.w	r7, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e30:	2301      	movs	r3, #1
 8010e32:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010e34:	3004      	adds	r0, #4
 8010e36:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e38:	9002      	str	r0, [sp, #8]
 8010e3a:	4b16      	ldr	r3, [pc, #88]	; (8010e94 <etharp_output_to_arp_index+0xe8>)
 8010e3c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010e3e:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	460b      	mov	r3, r1
 8010e44:	443a      	add	r2, r7
 8010e46:	4628      	mov	r0, r5
 8010e48:	f7ff fe34 	bl	8010ab4 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	d1c2      	bne.n	8010dd6 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e50:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010e54:	4a0b      	ldr	r2, [pc, #44]	; (8010e84 <etharp_output_to_arp_index+0xd8>)
 8010e56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e5a:	2203      	movs	r2, #3
 8010e5c:	751a      	strb	r2, [r3, #20]
 8010e5e:	e7ba      	b.n	8010dd6 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010e60:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010e64:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010e68:	3104      	adds	r1, #4
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f7ff ff5a 	bl	8010d24 <etharp_request>
 8010e70:	2800      	cmp	r0, #0
 8010e72:	d1b0      	bne.n	8010dd6 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e74:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010e78:	4a02      	ldr	r2, [pc, #8]	; (8010e84 <etharp_output_to_arp_index+0xd8>)
 8010e7a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e7e:	2203      	movs	r2, #3
 8010e80:	751a      	strb	r2, [r3, #20]
 8010e82:	e7a8      	b.n	8010dd6 <etharp_output_to_arp_index+0x2a>
 8010e84:	20012c04 	.word	0x20012c04
 8010e88:	08015d20 	.word	0x08015d20
 8010e8c:	08015e58 	.word	0x08015e58
 8010e90:	0801397c 	.word	0x0801397c
 8010e94:	08016208 	.word	0x08016208

08010e98 <etharp_query>:
{
 8010e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e9c:	b083      	sub	sp, #12
 8010e9e:	4607      	mov	r7, r0
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ea4:	4601      	mov	r1, r0
 8010ea6:	6828      	ldr	r0, [r5, #0]
 8010ea8:	f000 fc1f 	bl	80116ea <ip4_addr_isbroadcast_u32>
 8010eac:	2800      	cmp	r0, #0
 8010eae:	d15e      	bne.n	8010f6e <etharp_query+0xd6>
      ip4_addr_ismulticast(ipaddr) ||
 8010eb0:	682b      	ldr	r3, [r5, #0]
 8010eb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8010eb6:	2ae0      	cmp	r2, #224	; 0xe0
 8010eb8:	d05c      	beq.n	8010f74 <etharp_query+0xdc>
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d05a      	beq.n	8010f74 <etharp_query+0xdc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010ebe:	463a      	mov	r2, r7
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f7ff fd4c 	bl	8010960 <etharp_find_entry>
  if (i_err < 0) {
 8010ec8:	1e04      	subs	r4, r0, #0
 8010eca:	db1e      	blt.n	8010f0a <etharp_query+0x72>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010ecc:	b2a3      	uxth	r3, r4
 8010ece:	2b7e      	cmp	r3, #126	; 0x7e
 8010ed0:	d81d      	bhi.n	8010f0e <etharp_query+0x76>
  i = (netif_addr_idx_t)i_err;
 8010ed2:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010ed4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8010ed8:	4b47      	ldr	r3, [pc, #284]	; (8010ff8 <etharp_query+0x160>)
 8010eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ede:	7d1b      	ldrb	r3, [r3, #20]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d151      	bne.n	8010f88 <etharp_query+0xf0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010ee4:	4613      	mov	r3, r2
 8010ee6:	4a44      	ldr	r2, [pc, #272]	; (8010ff8 <etharp_query+0x160>)
 8010ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010eec:	2201      	movs	r2, #1
 8010eee:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 8010ef0:	609f      	str	r7, [r3, #8]
  if (is_new_entry || (q == NULL)) {
 8010ef2:	fab6 f886 	clz	r8, r6
 8010ef6:	ea4f 1858 	mov.w	r8, r8, lsr #5
    result = etharp_request(netif, ipaddr);
 8010efa:	4629      	mov	r1, r5
 8010efc:	4638      	mov	r0, r7
 8010efe:	f7ff ff11 	bl	8010d24 <etharp_request>
    if (q == NULL) {
 8010f02:	f1b8 0f00 	cmp.w	r8, #0
 8010f06:	d048      	beq.n	8010f9a <etharp_query+0x102>
 8010f08:	e01a      	b.n	8010f40 <etharp_query+0xa8>
    return (err_t)i_err;
 8010f0a:	b260      	sxtb	r0, r4
 8010f0c:	e018      	b.n	8010f40 <etharp_query+0xa8>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010f0e:	4b3b      	ldr	r3, [pc, #236]	; (8010ffc <etharp_query+0x164>)
 8010f10:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010f14:	493a      	ldr	r1, [pc, #232]	; (8011000 <etharp_query+0x168>)
 8010f16:	483b      	ldr	r0, [pc, #236]	; (8011004 <etharp_query+0x16c>)
 8010f18:	f001 fb7c 	bl	8012614 <iprintf>
 8010f1c:	e7d9      	b.n	8010ed2 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 8010f1e:	4b3a      	ldr	r3, [pc, #232]	; (8011008 <etharp_query+0x170>)
 8010f20:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010f22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010f26:	4b34      	ldr	r3, [pc, #208]	; (8010ff8 <etharp_query+0x160>)
 8010f28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010f30:	9200      	str	r2, [sp, #0]
 8010f32:	330c      	adds	r3, #12
 8010f34:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8010f38:	4631      	mov	r1, r6
 8010f3a:	4638      	mov	r0, r7
 8010f3c:	f001 f8aa 	bl	8012094 <ethernet_output>
}
 8010f40:	b003      	add	sp, #12
 8010f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 8010f46:	7b2b      	ldrb	r3, [r5, #12]
 8010f48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010f4c:	d13c      	bne.n	8010fc8 <etharp_query+0x130>
      p = p->next;
 8010f4e:	682d      	ldr	r5, [r5, #0]
    while (p) {
 8010f50:	b1b5      	cbz	r5, 8010f80 <etharp_query+0xe8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010f52:	896a      	ldrh	r2, [r5, #10]
 8010f54:	892b      	ldrh	r3, [r5, #8]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d1f5      	bne.n	8010f46 <etharp_query+0xae>
 8010f5a:	682b      	ldr	r3, [r5, #0]
 8010f5c:	b383      	cbz	r3, 8010fc0 <etharp_query+0x128>
 8010f5e:	464b      	mov	r3, r9
 8010f60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010f64:	4641      	mov	r1, r8
 8010f66:	4638      	mov	r0, r7
 8010f68:	f001 fb54 	bl	8012614 <iprintf>
 8010f6c:	e7eb      	b.n	8010f46 <etharp_query+0xae>
    return ERR_ARG;
 8010f6e:	f06f 000f 	mvn.w	r0, #15
 8010f72:	e7e5      	b.n	8010f40 <etharp_query+0xa8>
 8010f74:	f06f 000f 	mvn.w	r0, #15
 8010f78:	e7e2      	b.n	8010f40 <etharp_query+0xa8>
      result = ERR_MEM;
 8010f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7e:	e7df      	b.n	8010f40 <etharp_query+0xa8>
      pbuf_ref(p);
 8010f80:	4630      	mov	r0, r6
 8010f82:	f7fb f859 	bl	800c038 <pbuf_ref>
 8010f86:	e026      	b.n	8010fd6 <etharp_query+0x13e>
  if (is_new_entry || (q == NULL)) {
 8010f88:	2e00      	cmp	r6, #0
 8010f8a:	bf0c      	ite	eq
 8010f8c:	f04f 0801 	moveq.w	r8, #1
 8010f90:	f04f 0800 	movne.w	r8, #0
 8010f94:	d0b1      	beq.n	8010efa <etharp_query+0x62>
  err_t result = ERR_MEM;
 8010f96:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010f9a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010f9e:	4a16      	ldr	r2, [pc, #88]	; (8010ff8 <etharp_query+0x160>)
 8010fa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010fa4:	7d1b      	ldrb	r3, [r3, #20]
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d8b9      	bhi.n	8010f1e <etharp_query+0x86>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d1c8      	bne.n	8010f40 <etharp_query+0xa8>
    while (p) {
 8010fae:	2e00      	cmp	r6, #0
 8010fb0:	d0e6      	beq.n	8010f80 <etharp_query+0xe8>
    p = q;
 8010fb2:	4635      	mov	r5, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010fb4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8010ffc <etharp_query+0x164>
 8010fb8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 801100c <etharp_query+0x174>
 8010fbc:	4f11      	ldr	r7, [pc, #68]	; (8011004 <etharp_query+0x16c>)
 8010fbe:	e7c8      	b.n	8010f52 <etharp_query+0xba>
      if (PBUF_NEEDS_COPY(p)) {
 8010fc0:	7b2b      	ldrb	r3, [r5, #12]
 8010fc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010fc6:	d0db      	beq.n	8010f80 <etharp_query+0xe8>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010fc8:	4632      	mov	r2, r6
 8010fca:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010fce:	200e      	movs	r0, #14
 8010fd0:	f7fb f984 	bl	800c2dc <pbuf_clone>
 8010fd4:	4606      	mov	r6, r0
    if (p != NULL) {
 8010fd6:	2e00      	cmp	r6, #0
 8010fd8:	d0cf      	beq.n	8010f7a <etharp_query+0xe2>
      if (arp_table[i].q != NULL) {
 8010fda:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010fde:	4a06      	ldr	r2, [pc, #24]	; (8010ff8 <etharp_query+0x160>)
 8010fe0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010fe4:	b108      	cbz	r0, 8010fea <etharp_query+0x152>
        pbuf_free(arp_table[i].q);
 8010fe6:	f7fa fea3 	bl	800bd30 <pbuf_free>
      arp_table[i].q = p;
 8010fea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010fee:	4a02      	ldr	r2, [pc, #8]	; (8010ff8 <etharp_query+0x160>)
 8010ff0:	f842 6034 	str.w	r6, [r2, r4, lsl #3]
      result = ERR_OK;
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	e7a3      	b.n	8010f40 <etharp_query+0xa8>
 8010ff8:	20012c04 	.word	0x20012c04
 8010ffc:	08015d20 	.word	0x08015d20
 8011000:	08015e88 	.word	0x08015e88
 8011004:	0801397c 	.word	0x0801397c
 8011008:	20012cf4 	.word	0x20012cf4
 801100c:	08015e98 	.word	0x08015e98

08011010 <etharp_output>:
{
 8011010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011012:	b085      	sub	sp, #20
 8011014:	460f      	mov	r7, r1
 8011016:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011018:	4606      	mov	r6, r0
 801101a:	2800      	cmp	r0, #0
 801101c:	d031      	beq.n	8011082 <etharp_output+0x72>
  LWIP_ASSERT("q != NULL", q != NULL);
 801101e:	2f00      	cmp	r7, #0
 8011020:	d037      	beq.n	8011092 <etharp_output+0x82>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011022:	2d00      	cmp	r5, #0
 8011024:	d03d      	beq.n	80110a2 <etharp_output+0x92>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011026:	4631      	mov	r1, r6
 8011028:	6828      	ldr	r0, [r5, #0]
 801102a:	f000 fb5e 	bl	80116ea <ip4_addr_isbroadcast_u32>
 801102e:	2800      	cmp	r0, #0
 8011030:	d17f      	bne.n	8011132 <etharp_output+0x122>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011032:	682b      	ldr	r3, [r5, #0]
 8011034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8011038:	2ae0      	cmp	r2, #224	; 0xe0
 801103a:	d03a      	beq.n	80110b2 <etharp_output+0xa2>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801103c:	6872      	ldr	r2, [r6, #4]
 801103e:	405a      	eors	r2, r3
 8011040:	68b1      	ldr	r1, [r6, #8]
 8011042:	420a      	tst	r2, r1
 8011044:	d009      	beq.n	801105a <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8011046:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011048:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801104c:	4293      	cmp	r3, r2
 801104e:	d004      	beq.n	801105a <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011050:	68f3      	ldr	r3, [r6, #12]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d079      	beq.n	801114a <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 8011056:	f106 050c 	add.w	r5, r6, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801105a:	4b3d      	ldr	r3, [pc, #244]	; (8011150 <etharp_output+0x140>)
 801105c:	781a      	ldrb	r2, [r3, #0]
 801105e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8011062:	4b3c      	ldr	r3, [pc, #240]	; (8011154 <etharp_output+0x144>)
 8011064:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011068:	7d1b      	ldrb	r3, [r3, #20]
 801106a:	2b01      	cmp	r3, #1
 801106c:	d906      	bls.n	801107c <etharp_output+0x6c>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801106e:	460b      	mov	r3, r1
 8011070:	4938      	ldr	r1, [pc, #224]	; (8011154 <etharp_output+0x144>)
 8011072:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011076:	689b      	ldr	r3, [r3, #8]
 8011078:	42b3      	cmp	r3, r6
 801107a:	d030      	beq.n	80110de <etharp_output+0xce>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801107c:	4b35      	ldr	r3, [pc, #212]	; (8011154 <etharp_output+0x144>)
{
 801107e:	2000      	movs	r0, #0
 8011080:	e03f      	b.n	8011102 <etharp_output+0xf2>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011082:	4b35      	ldr	r3, [pc, #212]	; (8011158 <etharp_output+0x148>)
 8011084:	f240 321e 	movw	r2, #798	; 0x31e
 8011088:	4934      	ldr	r1, [pc, #208]	; (801115c <etharp_output+0x14c>)
 801108a:	4835      	ldr	r0, [pc, #212]	; (8011160 <etharp_output+0x150>)
 801108c:	f001 fac2 	bl	8012614 <iprintf>
 8011090:	e7c5      	b.n	801101e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011092:	4b31      	ldr	r3, [pc, #196]	; (8011158 <etharp_output+0x148>)
 8011094:	f240 321f 	movw	r2, #799	; 0x31f
 8011098:	4932      	ldr	r1, [pc, #200]	; (8011164 <etharp_output+0x154>)
 801109a:	4831      	ldr	r0, [pc, #196]	; (8011160 <etharp_output+0x150>)
 801109c:	f001 faba 	bl	8012614 <iprintf>
 80110a0:	e7bf      	b.n	8011022 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80110a2:	4b2d      	ldr	r3, [pc, #180]	; (8011158 <etharp_output+0x148>)
 80110a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80110a8:	492f      	ldr	r1, [pc, #188]	; (8011168 <etharp_output+0x158>)
 80110aa:	482d      	ldr	r0, [pc, #180]	; (8011160 <etharp_output+0x150>)
 80110ac:	f001 fab2 	bl	8012614 <iprintf>
 80110b0:	e7b9      	b.n	8011026 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80110b2:	2301      	movs	r3, #1
 80110b4:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80110b8:	2300      	movs	r3, #0
 80110ba:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80110be:	235e      	movs	r3, #94	; 0x5e
 80110c0:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80110c4:	786b      	ldrb	r3, [r5, #1]
 80110c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110ca:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80110ce:	78ab      	ldrb	r3, [r5, #2]
 80110d0:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80110d4:	78eb      	ldrb	r3, [r5, #3]
 80110d6:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80110da:	ab02      	add	r3, sp, #8
 80110dc:	e02a      	b.n	8011134 <etharp_output+0x124>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80110de:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80110e2:	491c      	ldr	r1, [pc, #112]	; (8011154 <etharp_output+0x144>)
 80110e4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 80110e8:	6829      	ldr	r1, [r5, #0]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	4299      	cmp	r1, r3
 80110ee:	d1c5      	bne.n	801107c <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80110f0:	4639      	mov	r1, r7
 80110f2:	4630      	mov	r0, r6
 80110f4:	f7ff fe5a 	bl	8010dac <etharp_output_to_arp_index>
 80110f8:	e025      	b.n	8011146 <etharp_output+0x136>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80110fa:	3001      	adds	r0, #1
 80110fc:	3318      	adds	r3, #24
 80110fe:	280a      	cmp	r0, #10
 8011100:	d011      	beq.n	8011126 <etharp_output+0x116>
 8011102:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011104:	7d1c      	ldrb	r4, [r3, #20]
 8011106:	2c01      	cmp	r4, #1
 8011108:	d9f7      	bls.n	80110fa <etharp_output+0xea>
 801110a:	6899      	ldr	r1, [r3, #8]
 801110c:	42b1      	cmp	r1, r6
 801110e:	d1f4      	bne.n	80110fa <etharp_output+0xea>
          (arp_table[i].netif == netif) &&
 8011110:	6829      	ldr	r1, [r5, #0]
 8011112:	685c      	ldr	r4, [r3, #4]
 8011114:	42a1      	cmp	r1, r4
 8011116:	d1f0      	bne.n	80110fa <etharp_output+0xea>
        ETHARP_SET_ADDRHINT(netif, i);
 8011118:	4b0d      	ldr	r3, [pc, #52]	; (8011150 <etharp_output+0x140>)
 801111a:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801111c:	4639      	mov	r1, r7
 801111e:	4630      	mov	r0, r6
 8011120:	f7ff fe44 	bl	8010dac <etharp_output_to_arp_index>
 8011124:	e00f      	b.n	8011146 <etharp_output+0x136>
    return etharp_query(netif, dst_addr, q);
 8011126:	463a      	mov	r2, r7
 8011128:	4629      	mov	r1, r5
 801112a:	4630      	mov	r0, r6
 801112c:	f7ff feb4 	bl	8010e98 <etharp_query>
 8011130:	e009      	b.n	8011146 <etharp_output+0x136>
    dest = (const struct eth_addr *)&ethbroadcast;
 8011132:	4b0e      	ldr	r3, [pc, #56]	; (801116c <etharp_output+0x15c>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011138:	9200      	str	r2, [sp, #0]
 801113a:	f106 0226 	add.w	r2, r6, #38	; 0x26
 801113e:	4639      	mov	r1, r7
 8011140:	4630      	mov	r0, r6
 8011142:	f000 ffa7 	bl	8012094 <ethernet_output>
}
 8011146:	b005      	add	sp, #20
 8011148:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 801114a:	f06f 0003 	mvn.w	r0, #3
 801114e:	e7fa      	b.n	8011146 <etharp_output+0x136>
 8011150:	20012cf4 	.word	0x20012cf4
 8011154:	20012c04 	.word	0x20012c04
 8011158:	08015d20 	.word	0x08015d20
 801115c:	0801396c 	.word	0x0801396c
 8011160:	0801397c 	.word	0x0801397c
 8011164:	08015eb4 	.word	0x08015eb4
 8011168:	08015e14 	.word	0x08015e14
 801116c:	08016200 	.word	0x08016200

08011170 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011174:	b086      	sub	sp, #24
 8011176:	4606      	mov	r6, r0
 8011178:	4688      	mov	r8, r1
 801117a:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801117c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011180:	2124      	movs	r1, #36	; 0x24
 8011182:	2022      	movs	r0, #34	; 0x22
 8011184:	f7fa fe44 	bl	800be10 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8011188:	b3a0      	cbz	r0, 80111f4 <icmp_send_response+0x84>
 801118a:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801118c:	8943      	ldrh	r3, [r0, #10]
 801118e:	2b23      	cmp	r3, #35	; 0x23
 8011190:	d933      	bls.n	80111fa <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011192:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011196:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8011198:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 801119c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	7123      	strb	r3, [r4, #4]
 80111a2:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 80111a4:	71a3      	strb	r3, [r4, #6]
 80111a6:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80111a8:	686b      	ldr	r3, [r5, #4]
 80111aa:	6872      	ldr	r2, [r6, #4]
 80111ac:	6816      	ldr	r6, [r2, #0]
 80111ae:	6850      	ldr	r0, [r2, #4]
 80111b0:	6891      	ldr	r1, [r2, #8]
 80111b2:	68d7      	ldr	r7, [r2, #12]
 80111b4:	609e      	str	r6, [r3, #8]
 80111b6:	60d8      	str	r0, [r3, #12]
 80111b8:	6119      	str	r1, [r3, #16]
 80111ba:	615f      	str	r7, [r3, #20]
 80111bc:	6916      	ldr	r6, [r2, #16]
 80111be:	6950      	ldr	r0, [r2, #20]
 80111c0:	6991      	ldr	r1, [r2, #24]
 80111c2:	619e      	str	r6, [r3, #24]
 80111c4:	61d8      	str	r0, [r3, #28]
 80111c6:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80111c8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80111cc:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80111ce:	a805      	add	r0, sp, #20
 80111d0:	f000 f8ee 	bl	80113b0 <ip4_route>
#endif
  if (netif != NULL) {
 80111d4:	b158      	cbz	r0, 80111ee <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80111d6:	2100      	movs	r1, #0
 80111d8:	70a1      	strb	r1, [r4, #2]
 80111da:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80111dc:	9002      	str	r0, [sp, #8]
 80111de:	2301      	movs	r3, #1
 80111e0:	9301      	str	r3, [sp, #4]
 80111e2:	9100      	str	r1, [sp, #0]
 80111e4:	23ff      	movs	r3, #255	; 0xff
 80111e6:	aa05      	add	r2, sp, #20
 80111e8:	4628      	mov	r0, r5
 80111ea:	f000 fa69 	bl	80116c0 <ip4_output_if>
  }
  pbuf_free(q);
 80111ee:	4628      	mov	r0, r5
 80111f0:	f7fa fd9e 	bl	800bd30 <pbuf_free>
}
 80111f4:	b006      	add	sp, #24
 80111f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80111fa:	4b04      	ldr	r3, [pc, #16]	; (801120c <icmp_send_response+0x9c>)
 80111fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011200:	4903      	ldr	r1, [pc, #12]	; (8011210 <icmp_send_response+0xa0>)
 8011202:	4804      	ldr	r0, [pc, #16]	; (8011214 <icmp_send_response+0xa4>)
 8011204:	f001 fa06 	bl	8012614 <iprintf>
 8011208:	e7c3      	b.n	8011192 <icmp_send_response+0x22>
 801120a:	bf00      	nop
 801120c:	08015ec0 	.word	0x08015ec0
 8011210:	08015ef8 	.word	0x08015ef8
 8011214:	0801397c 	.word	0x0801397c

08011218 <icmp_input>:
{
 8011218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801121c:	b085      	sub	sp, #20
 801121e:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8011220:	4b4a      	ldr	r3, [pc, #296]	; (801134c <icmp_input+0x134>)
 8011222:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8011224:	783b      	ldrb	r3, [r7, #0]
 8011226:	f003 030f 	and.w	r3, r3, #15
 801122a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801122e:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 8011230:	2c13      	cmp	r4, #19
 8011232:	d915      	bls.n	8011260 <icmp_input+0x48>
 8011234:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 8011236:	8943      	ldrh	r3, [r0, #10]
 8011238:	2b03      	cmp	r3, #3
 801123a:	d911      	bls.n	8011260 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 801123c:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	2b08      	cmp	r3, #8
 8011242:	d161      	bne.n	8011308 <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011244:	4b41      	ldr	r3, [pc, #260]	; (801134c <icmp_input+0x134>)
 8011246:	6958      	ldr	r0, [r3, #20]
 8011248:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801124c:	2be0      	cmp	r3, #224	; 0xe0
 801124e:	d01a      	beq.n	8011286 <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011250:	4b3e      	ldr	r3, [pc, #248]	; (801134c <icmp_input+0x134>)
 8011252:	6819      	ldr	r1, [r3, #0]
 8011254:	f000 fa49 	bl	80116ea <ip4_addr_isbroadcast_u32>
 8011258:	b9a8      	cbnz	r0, 8011286 <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801125a:	892b      	ldrh	r3, [r5, #8]
 801125c:	2b07      	cmp	r3, #7
 801125e:	d805      	bhi.n	801126c <icmp_input+0x54>
  pbuf_free(p);
 8011260:	4628      	mov	r0, r5
 8011262:	f7fa fd65 	bl	800bd30 <pbuf_free>
}
 8011266:	b005      	add	sp, #20
 8011268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801126c:	f108 090e 	add.w	r9, r8, #14
 8011270:	4649      	mov	r1, r9
 8011272:	4628      	mov	r0, r5
 8011274:	f7fa fd16 	bl	800bca4 <pbuf_add_header>
 8011278:	2800      	cmp	r0, #0
 801127a:	d03a      	beq.n	80112f2 <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801127c:	892a      	ldrh	r2, [r5, #8]
 801127e:	1913      	adds	r3, r2, r4
 8011280:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 8011282:	428a      	cmp	r2, r1
 8011284:	d903      	bls.n	801128e <icmp_input+0x76>
  pbuf_free(p);
 8011286:	4628      	mov	r0, r5
 8011288:	f7fa fd52 	bl	800bd30 <pbuf_free>
  return;
 801128c:	e7eb      	b.n	8011266 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801128e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011292:	200e      	movs	r0, #14
 8011294:	f7fa fdbc 	bl	800be10 <pbuf_alloc>
        if (r == NULL) {
 8011298:	4604      	mov	r4, r0
 801129a:	2800      	cmp	r0, #0
 801129c:	d0f3      	beq.n	8011286 <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801129e:	8942      	ldrh	r2, [r0, #10]
 80112a0:	f108 0308 	add.w	r3, r8, #8
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d313      	bcc.n	80112d0 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 80112a8:	4642      	mov	r2, r8
 80112aa:	4639      	mov	r1, r7
 80112ac:	6840      	ldr	r0, [r0, #4]
 80112ae:	f001 f940 	bl	8012532 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80112b2:	4641      	mov	r1, r8
 80112b4:	4620      	mov	r0, r4
 80112b6:	f7fa fcfb 	bl	800bcb0 <pbuf_remove_header>
 80112ba:	b960      	cbnz	r0, 80112d6 <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 80112bc:	4629      	mov	r1, r5
 80112be:	4620      	mov	r0, r4
 80112c0:	f7fa ff14 	bl	800c0ec <pbuf_copy>
 80112c4:	b988      	cbnz	r0, 80112ea <icmp_input+0xd2>
        pbuf_free(p);
 80112c6:	4628      	mov	r0, r5
 80112c8:	f7fa fd32 	bl	800bd30 <pbuf_free>
        p = r;
 80112cc:	4625      	mov	r5, r4
 80112ce:	e015      	b.n	80112fc <icmp_input+0xe4>
          pbuf_free(r);
 80112d0:	f7fa fd2e 	bl	800bd30 <pbuf_free>
          goto icmperr;
 80112d4:	e7d7      	b.n	8011286 <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80112d6:	4b1e      	ldr	r3, [pc, #120]	; (8011350 <icmp_input+0x138>)
 80112d8:	22b6      	movs	r2, #182	; 0xb6
 80112da:	491e      	ldr	r1, [pc, #120]	; (8011354 <icmp_input+0x13c>)
 80112dc:	481e      	ldr	r0, [pc, #120]	; (8011358 <icmp_input+0x140>)
 80112de:	f001 f999 	bl	8012614 <iprintf>
          pbuf_free(r);
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7fa fd24 	bl	800bd30 <pbuf_free>
          goto icmperr;
 80112e8:	e7cd      	b.n	8011286 <icmp_input+0x6e>
          pbuf_free(r);
 80112ea:	4620      	mov	r0, r4
 80112ec:	f7fa fd20 	bl	800bd30 <pbuf_free>
          goto icmperr;
 80112f0:	e7c9      	b.n	8011286 <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80112f2:	4649      	mov	r1, r9
 80112f4:	4628      	mov	r0, r5
 80112f6:	f7fa fcdb 	bl	800bcb0 <pbuf_remove_header>
 80112fa:	b948      	cbnz	r0, 8011310 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 80112fc:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 80112fe:	4641      	mov	r1, r8
 8011300:	4628      	mov	r0, r5
 8011302:	f7fa fccf 	bl	800bca4 <pbuf_add_header>
 8011306:	b150      	cbz	r0, 801131e <icmp_input+0x106>
  pbuf_free(p);
 8011308:	4628      	mov	r0, r5
 801130a:	f7fa fd11 	bl	800bd30 <pbuf_free>
  return;
 801130e:	e7aa      	b.n	8011266 <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011310:	4b0f      	ldr	r3, [pc, #60]	; (8011350 <icmp_input+0x138>)
 8011312:	22c7      	movs	r2, #199	; 0xc7
 8011314:	4911      	ldr	r1, [pc, #68]	; (801135c <icmp_input+0x144>)
 8011316:	4810      	ldr	r0, [pc, #64]	; (8011358 <icmp_input+0x140>)
 8011318:	f001 f97c 	bl	8012614 <iprintf>
          goto icmperr;
 801131c:	e7b3      	b.n	8011286 <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801131e:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 8011320:	490a      	ldr	r1, [pc, #40]	; (801134c <icmp_input+0x134>)
 8011322:	694b      	ldr	r3, [r1, #20]
 8011324:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011326:	690b      	ldr	r3, [r1, #16]
 8011328:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801132a:	2200      	movs	r2, #0
 801132c:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 801132e:	70a2      	strb	r2, [r4, #2]
 8011330:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011332:	23ff      	movs	r3, #255	; 0xff
 8011334:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011336:	7282      	strb	r2, [r0, #10]
 8011338:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801133a:	9602      	str	r6, [sp, #8]
 801133c:	2001      	movs	r0, #1
 801133e:	9001      	str	r0, [sp, #4]
 8011340:	9200      	str	r2, [sp, #0]
 8011342:	3114      	adds	r1, #20
 8011344:	4628      	mov	r0, r5
 8011346:	f000 f9bb 	bl	80116c0 <ip4_output_if>
        if (ret != ERR_OK) {
 801134a:	e7dd      	b.n	8011308 <icmp_input+0xf0>
 801134c:	20016178 	.word	0x20016178
 8011350:	08015ec0 	.word	0x08015ec0
 8011354:	08015f24 	.word	0x08015f24
 8011358:	0801397c 	.word	0x0801397c
 801135c:	08015f5c 	.word	0x08015f5c

08011360 <icmp_dest_unreach>:
{
 8011360:	b508      	push	{r3, lr}
 8011362:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8011364:	2103      	movs	r1, #3
 8011366:	f7ff ff03 	bl	8011170 <icmp_send_response>
}
 801136a:	bd08      	pop	{r3, pc}

0801136c <icmp_time_exceeded>:
{
 801136c:	b508      	push	{r3, lr}
 801136e:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8011370:	210b      	movs	r1, #11
 8011372:	f7ff fefd 	bl	8011170 <icmp_send_response>
}
 8011376:	bd08      	pop	{r3, pc}

08011378 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011378:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801137a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801137e:	f013 0f01 	tst.w	r3, #1
 8011382:	d00c      	beq.n	801139e <ip4_input_accept+0x26>
 8011384:	4601      	mov	r1, r0
 8011386:	6843      	ldr	r3, [r0, #4]
 8011388:	b15b      	cbz	r3, 80113a2 <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801138a:	4a08      	ldr	r2, [pc, #32]	; (80113ac <ip4_input_accept+0x34>)
 801138c:	6950      	ldr	r0, [r2, #20]
 801138e:	4283      	cmp	r3, r0
 8011390:	d009      	beq.n	80113a6 <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011392:	f000 f9aa 	bl	80116ea <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011396:	3800      	subs	r0, #0
 8011398:	bf18      	it	ne
 801139a:	2001      	movne	r0, #1
 801139c:	e000      	b.n	80113a0 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801139e:	2000      	movs	r0, #0
}
 80113a0:	bd08      	pop	{r3, pc}
  return 0;
 80113a2:	2000      	movs	r0, #0
 80113a4:	e7fc      	b.n	80113a0 <ip4_input_accept+0x28>
      return 1;
 80113a6:	2001      	movs	r0, #1
 80113a8:	e7fa      	b.n	80113a0 <ip4_input_accept+0x28>
 80113aa:	bf00      	nop
 80113ac:	20016178 	.word	0x20016178

080113b0 <ip4_route>:
{
 80113b0:	b430      	push	{r4, r5}
 80113b2:	4604      	mov	r4, r0
  NETIF_FOREACH(netif) {
 80113b4:	4b18      	ldr	r3, [pc, #96]	; (8011418 <ip4_route+0x68>)
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	b998      	cbnz	r0, 80113e2 <ip4_route+0x32>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80113ba:	4b18      	ldr	r3, [pc, #96]	; (801141c <ip4_route+0x6c>)
 80113bc:	6818      	ldr	r0, [r3, #0]
 80113be:	b158      	cbz	r0, 80113d8 <ip4_route+0x28>
 80113c0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80113c4:	f003 0305 	and.w	r3, r3, #5
 80113c8:	2b05      	cmp	r3, #5
 80113ca:	d121      	bne.n	8011410 <ip4_route+0x60>
 80113cc:	6843      	ldr	r3, [r0, #4]
 80113ce:	b30b      	cbz	r3, 8011414 <ip4_route+0x64>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80113d0:	7823      	ldrb	r3, [r4, #0]
    return NULL;
 80113d2:	2b7f      	cmp	r3, #127	; 0x7f
 80113d4:	bf08      	it	eq
 80113d6:	2000      	moveq	r0, #0
}
 80113d8:	bc30      	pop	{r4, r5}
 80113da:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 80113dc:	6800      	ldr	r0, [r0, #0]
 80113de:	2800      	cmp	r0, #0
 80113e0:	d0eb      	beq.n	80113ba <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80113e2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80113e6:	f013 0f01 	tst.w	r3, #1
 80113ea:	d0f7      	beq.n	80113dc <ip4_route+0x2c>
 80113ec:	f013 0f04 	tst.w	r3, #4
 80113f0:	d0f4      	beq.n	80113dc <ip4_route+0x2c>
 80113f2:	6842      	ldr	r2, [r0, #4]
 80113f4:	2a00      	cmp	r2, #0
 80113f6:	d0f1      	beq.n	80113dc <ip4_route+0x2c>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80113f8:	6821      	ldr	r1, [r4, #0]
 80113fa:	404a      	eors	r2, r1
 80113fc:	6885      	ldr	r5, [r0, #8]
 80113fe:	422a      	tst	r2, r5
 8011400:	d0ea      	beq.n	80113d8 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011402:	f013 0f02 	tst.w	r3, #2
 8011406:	d1e9      	bne.n	80113dc <ip4_route+0x2c>
 8011408:	68c3      	ldr	r3, [r0, #12]
 801140a:	4299      	cmp	r1, r3
 801140c:	d1e6      	bne.n	80113dc <ip4_route+0x2c>
 801140e:	e7e3      	b.n	80113d8 <ip4_route+0x28>
    return NULL;
 8011410:	2000      	movs	r0, #0
 8011412:	e7e1      	b.n	80113d8 <ip4_route+0x28>
 8011414:	2000      	movs	r0, #0
 8011416:	e7df      	b.n	80113d8 <ip4_route+0x28>
 8011418:	2001b5fc 	.word	0x2001b5fc
 801141c:	2001b600 	.word	0x2001b600

08011420 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011424:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011426:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 801142a:	f898 3000 	ldrb.w	r3, [r8]
 801142e:	091a      	lsrs	r2, r3, #4
 8011430:	2a04      	cmp	r2, #4
 8011432:	d004      	beq.n	801143e <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011434:	f7fa fc7c 	bl	800bd30 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8011438:	2000      	movs	r0, #0
 801143a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801143e:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011440:	f003 030f 	and.w	r3, r3, #15
 8011444:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8011448:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801144a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801144e:	f7f9 fe61 	bl	800b114 <lwip_htons>
 8011452:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 8011454:	8923      	ldrh	r3, [r4, #8]
 8011456:	4283      	cmp	r3, r0
 8011458:	d81d      	bhi.n	8011496 <ip4_input+0x76>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801145a:	8963      	ldrh	r3, [r4, #10]
 801145c:	42ab      	cmp	r3, r5
 801145e:	d31f      	bcc.n	80114a0 <ip4_input+0x80>
 8011460:	8923      	ldrh	r3, [r4, #8]
 8011462:	42b3      	cmp	r3, r6
 8011464:	d31c      	bcc.n	80114a0 <ip4_input+0x80>
 8011466:	2d13      	cmp	r5, #19
 8011468:	d91a      	bls.n	80114a0 <ip4_input+0x80>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801146a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801146e:	4a52      	ldr	r2, [pc, #328]	; (80115b8 <ip4_input+0x198>)
 8011470:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011472:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8011476:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801147c:	2be0      	cmp	r3, #224	; 0xe0
 801147e:	d113      	bne.n	80114a8 <ip4_input+0x88>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011484:	f013 0f01 	tst.w	r3, #1
 8011488:	d025      	beq.n	80114d6 <ip4_input+0xb6>
 801148a:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 801148c:	2b00      	cmp	r3, #0
 801148e:	bf14      	ite	ne
 8011490:	463d      	movne	r5, r7
 8011492:	2500      	moveq	r5, #0
 8011494:	e020      	b.n	80114d8 <ip4_input+0xb8>
    pbuf_realloc(p, iphdr_len);
 8011496:	4601      	mov	r1, r0
 8011498:	4620      	mov	r0, r4
 801149a:	f7fa fd61 	bl	800bf60 <pbuf_realloc>
 801149e:	e7dc      	b.n	801145a <ip4_input+0x3a>
    pbuf_free(p);
 80114a0:	4620      	mov	r0, r4
 80114a2:	f7fa fc45 	bl	800bd30 <pbuf_free>
    return ERR_OK;
 80114a6:	e7c7      	b.n	8011438 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 80114a8:	4638      	mov	r0, r7
 80114aa:	f7ff ff65 	bl	8011378 <ip4_input_accept>
 80114ae:	2800      	cmp	r0, #0
 80114b0:	d156      	bne.n	8011560 <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80114b2:	4b41      	ldr	r3, [pc, #260]	; (80115b8 <ip4_input+0x198>)
 80114b4:	7d1b      	ldrb	r3, [r3, #20]
 80114b6:	2b7f      	cmp	r3, #127	; 0x7f
 80114b8:	d054      	beq.n	8011564 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 80114ba:	4b40      	ldr	r3, [pc, #256]	; (80115bc <ip4_input+0x19c>)
 80114bc:	681d      	ldr	r5, [r3, #0]
 80114be:	b915      	cbnz	r5, 80114c6 <ip4_input+0xa6>
 80114c0:	e00a      	b.n	80114d8 <ip4_input+0xb8>
 80114c2:	682d      	ldr	r5, [r5, #0]
 80114c4:	b145      	cbz	r5, 80114d8 <ip4_input+0xb8>
          if (netif == inp) {
 80114c6:	42af      	cmp	r7, r5
 80114c8:	d0fb      	beq.n	80114c2 <ip4_input+0xa2>
          if (ip4_input_accept(netif)) {
 80114ca:	4628      	mov	r0, r5
 80114cc:	f7ff ff54 	bl	8011378 <ip4_input_accept>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d0f6      	beq.n	80114c2 <ip4_input+0xa2>
 80114d4:	e000      	b.n	80114d8 <ip4_input+0xb8>
      netif = NULL;
 80114d6:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80114d8:	4639      	mov	r1, r7
 80114da:	4b37      	ldr	r3, [pc, #220]	; (80115b8 <ip4_input+0x198>)
 80114dc:	6918      	ldr	r0, [r3, #16]
 80114de:	f000 f904 	bl	80116ea <ip4_addr_isbroadcast_u32>
 80114e2:	2800      	cmp	r0, #0
 80114e4:	d140      	bne.n	8011568 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80114e6:	4b34      	ldr	r3, [pc, #208]	; (80115b8 <ip4_input+0x198>)
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80114ee:	2be0      	cmp	r3, #224	; 0xe0
 80114f0:	d03a      	beq.n	8011568 <ip4_input+0x148>
  if (netif == NULL) {
 80114f2:	2d00      	cmp	r5, #0
 80114f4:	d03c      	beq.n	8011570 <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80114f6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80114fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80114fe:	b29b      	uxth	r3, r3
 8011500:	b13b      	cbz	r3, 8011512 <ip4_input+0xf2>
    p = ip4_reass(p);
 8011502:	4620      	mov	r0, r4
 8011504:	f000 fa3c 	bl	8011980 <ip4_reass>
    if (p == NULL) {
 8011508:	4604      	mov	r4, r0
 801150a:	2800      	cmp	r0, #0
 801150c:	d094      	beq.n	8011438 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 801150e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8011512:	4a29      	ldr	r2, [pc, #164]	; (80115b8 <ip4_input+0x198>)
 8011514:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 8011516:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011518:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801151c:	f898 3000 	ldrb.w	r3, [r8]
 8011520:	f003 030f 	and.w	r3, r3, #15
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011528:	4649      	mov	r1, r9
 801152a:	4620      	mov	r0, r4
 801152c:	f7fa fbc0 	bl	800bcb0 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8011530:	f898 3009 	ldrb.w	r3, [r8, #9]
 8011534:	2b06      	cmp	r3, #6
 8011536:	d02c      	beq.n	8011592 <ip4_input+0x172>
 8011538:	2b11      	cmp	r3, #17
 801153a:	d01d      	beq.n	8011578 <ip4_input+0x158>
 801153c:	2b01      	cmp	r3, #1
 801153e:	d02d      	beq.n	801159c <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011540:	4629      	mov	r1, r5
 8011542:	4b1d      	ldr	r3, [pc, #116]	; (80115b8 <ip4_input+0x198>)
 8011544:	6958      	ldr	r0, [r3, #20]
 8011546:	f000 f8d0 	bl	80116ea <ip4_addr_isbroadcast_u32>
 801154a:	b928      	cbnz	r0, 8011558 <ip4_input+0x138>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801154c:	4b1a      	ldr	r3, [pc, #104]	; (80115b8 <ip4_input+0x198>)
 801154e:	695b      	ldr	r3, [r3, #20]
 8011550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011554:	2be0      	cmp	r3, #224	; 0xe0
 8011556:	d126      	bne.n	80115a6 <ip4_input+0x186>
        pbuf_free(p);
 8011558:	4620      	mov	r0, r4
 801155a:	f7fa fbe9 	bl	800bd30 <pbuf_free>
        break;
 801155e:	e00f      	b.n	8011580 <ip4_input+0x160>
      netif = inp;
 8011560:	463d      	mov	r5, r7
 8011562:	e7b9      	b.n	80114d8 <ip4_input+0xb8>
      netif = NULL;
 8011564:	2500      	movs	r5, #0
 8011566:	e7b7      	b.n	80114d8 <ip4_input+0xb8>
      pbuf_free(p);
 8011568:	4620      	mov	r0, r4
 801156a:	f7fa fbe1 	bl	800bd30 <pbuf_free>
      return ERR_OK;
 801156e:	e763      	b.n	8011438 <ip4_input+0x18>
    pbuf_free(p);
 8011570:	4620      	mov	r0, r4
 8011572:	f7fa fbdd 	bl	800bd30 <pbuf_free>
    return ERR_OK;
 8011576:	e75f      	b.n	8011438 <ip4_input+0x18>
        udp_input(p, inp);
 8011578:	4639      	mov	r1, r7
 801157a:	4620      	mov	r0, r4
 801157c:	f7fe fff8 	bl	8010570 <udp_input>
  ip_data.current_netif = NULL;
 8011580:	4b0d      	ldr	r3, [pc, #52]	; (80115b8 <ip4_input+0x198>)
 8011582:	2200      	movs	r2, #0
 8011584:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011586:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011588:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801158a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801158c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801158e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8011590:	e752      	b.n	8011438 <ip4_input+0x18>
        tcp_input(p, inp);
 8011592:	4639      	mov	r1, r7
 8011594:	4620      	mov	r0, r4
 8011596:	f7fc fe23 	bl	800e1e0 <tcp_input>
        break;
 801159a:	e7f1      	b.n	8011580 <ip4_input+0x160>
        icmp_input(p, inp);
 801159c:	4639      	mov	r1, r7
 801159e:	4620      	mov	r0, r4
 80115a0:	f7ff fe3a 	bl	8011218 <icmp_input>
        break;
 80115a4:	e7ec      	b.n	8011580 <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80115a6:	4649      	mov	r1, r9
 80115a8:	4620      	mov	r0, r4
 80115aa:	f7fa fbb5 	bl	800bd18 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80115ae:	2102      	movs	r1, #2
 80115b0:	4620      	mov	r0, r4
 80115b2:	f7ff fed5 	bl	8011360 <icmp_dest_unreach>
 80115b6:	e7cf      	b.n	8011558 <ip4_input+0x138>
 80115b8:	20016178 	.word	0x20016178
 80115bc:	2001b5fc 	.word	0x2001b5fc

080115c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80115c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115c4:	b083      	sub	sp, #12
 80115c6:	4604      	mov	r4, r0
 80115c8:	460f      	mov	r7, r1
 80115ca:	4616      	mov	r6, r2
 80115cc:	4699      	mov	r9, r3
 80115ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80115d2:	7b82      	ldrb	r2, [r0, #14]
 80115d4:	2a01      	cmp	r2, #1
 80115d6:	d13f      	bne.n	8011658 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80115d8:	2e00      	cmp	r6, #0
 80115da:	d050      	beq.n	801167e <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80115dc:	2114      	movs	r1, #20
 80115de:	4620      	mov	r0, r4
 80115e0:	f7fa fb60 	bl	800bca4 <pbuf_add_header>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	d158      	bne.n	801169a <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 80115e8:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80115ea:	8963      	ldrh	r3, [r4, #10]
 80115ec:	2b13      	cmp	r3, #19
 80115ee:	d93b      	bls.n	8011668 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80115f0:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 80115f4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80115f8:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80115fa:	6833      	ldr	r3, [r6, #0]
 80115fc:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80115fe:	2345      	movs	r3, #69	; 0x45
 8011600:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8011602:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011606:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011608:	8920      	ldrh	r0, [r4, #8]
 801160a:	f7f9 fd83 	bl	800b114 <lwip_htons>
 801160e:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011610:	2300      	movs	r3, #0
 8011612:	71ab      	strb	r3, [r5, #6]
 8011614:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011616:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80116bc <ip4_output_if_src+0xfc>
 801161a:	f8b9 0000 	ldrh.w	r0, [r9]
 801161e:	f7f9 fd79 	bl	800b114 <lwip_htons>
 8011622:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011624:	f8b9 3000 	ldrh.w	r3, [r9]
 8011628:	3301      	adds	r3, #1
 801162a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 801162e:	b31f      	cbz	r7, 8011678 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011634:	2300      	movs	r3, #0
 8011636:	72ab      	strb	r3, [r5, #10]
 8011638:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801163a:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 801163e:	b113      	cbz	r3, 8011646 <ip4_output_if_src+0x86>
 8011640:	8922      	ldrh	r2, [r4, #8]
 8011642:	429a      	cmp	r2, r3
 8011644:	d823      	bhi.n	801168e <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011646:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801164a:	4632      	mov	r2, r6
 801164c:	4621      	mov	r1, r4
 801164e:	4640      	mov	r0, r8
 8011650:	4798      	blx	r3
}
 8011652:	b003      	add	sp, #12
 8011654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011658:	4b13      	ldr	r3, [pc, #76]	; (80116a8 <ip4_output_if_src+0xe8>)
 801165a:	f44f 7255 	mov.w	r2, #852	; 0x354
 801165e:	4913      	ldr	r1, [pc, #76]	; (80116ac <ip4_output_if_src+0xec>)
 8011660:	4813      	ldr	r0, [pc, #76]	; (80116b0 <ip4_output_if_src+0xf0>)
 8011662:	f000 ffd7 	bl	8012614 <iprintf>
 8011666:	e7b7      	b.n	80115d8 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011668:	4b0f      	ldr	r3, [pc, #60]	; (80116a8 <ip4_output_if_src+0xe8>)
 801166a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801166e:	4911      	ldr	r1, [pc, #68]	; (80116b4 <ip4_output_if_src+0xf4>)
 8011670:	480f      	ldr	r0, [pc, #60]	; (80116b0 <ip4_output_if_src+0xf0>)
 8011672:	f000 ffcf 	bl	8012614 <iprintf>
 8011676:	e7bb      	b.n	80115f0 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011678:	4b0f      	ldr	r3, [pc, #60]	; (80116b8 <ip4_output_if_src+0xf8>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	e7d9      	b.n	8011632 <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 801167e:	8963      	ldrh	r3, [r4, #10]
 8011680:	2b13      	cmp	r3, #19
 8011682:	d90d      	bls.n	80116a0 <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011684:	6863      	ldr	r3, [r4, #4]
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 801168a:	ae01      	add	r6, sp, #4
 801168c:	e7d5      	b.n	801163a <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 801168e:	4632      	mov	r2, r6
 8011690:	4641      	mov	r1, r8
 8011692:	4620      	mov	r0, r4
 8011694:	f000 fba4 	bl	8011de0 <ip4_frag>
 8011698:	e7db      	b.n	8011652 <ip4_output_if_src+0x92>
      return ERR_BUF;
 801169a:	f06f 0001 	mvn.w	r0, #1
 801169e:	e7d8      	b.n	8011652 <ip4_output_if_src+0x92>
      return ERR_BUF;
 80116a0:	f06f 0001 	mvn.w	r0, #1
 80116a4:	e7d5      	b.n	8011652 <ip4_output_if_src+0x92>
 80116a6:	bf00      	nop
 80116a8:	08015f90 	.word	0x08015f90
 80116ac:	08015fc4 	.word	0x08015fc4
 80116b0:	0801397c 	.word	0x0801397c
 80116b4:	08015fd0 	.word	0x08015fd0
 80116b8:	08016000 	.word	0x08016000
 80116bc:	20012cf6 	.word	0x20012cf6

080116c0 <ip4_output_if>:
{
 80116c0:	b530      	push	{r4, r5, lr}
 80116c2:	b085      	sub	sp, #20
 80116c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 80116c6:	4615      	mov	r5, r2
 80116c8:	b11a      	cbz	r2, 80116d2 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 80116ca:	b109      	cbz	r1, 80116d0 <ip4_output_if+0x10>
 80116cc:	680a      	ldr	r2, [r1, #0]
 80116ce:	b902      	cbnz	r2, 80116d2 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 80116d0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80116d2:	9402      	str	r4, [sp, #8]
 80116d4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80116d8:	9201      	str	r2, [sp, #4]
 80116da:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80116de:	9200      	str	r2, [sp, #0]
 80116e0:	462a      	mov	r2, r5
 80116e2:	f7ff ff6d 	bl	80115c0 <ip4_output_if_src>
}
 80116e6:	b005      	add	sp, #20
 80116e8:	bd30      	pop	{r4, r5, pc}

080116ea <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80116ea:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80116ec:	1e42      	subs	r2, r0, #1
 80116ee:	f112 0f03 	cmn.w	r2, #3
 80116f2:	d813      	bhi.n	801171c <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80116f4:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 80116f8:	f010 0002 	ands.w	r0, r0, #2
 80116fc:	d013      	beq.n	8011726 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80116fe:	684a      	ldr	r2, [r1, #4]
 8011700:	429a      	cmp	r2, r3
 8011702:	d00d      	beq.n	8011720 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011704:	6889      	ldr	r1, [r1, #8]
 8011706:	405a      	eors	r2, r3
 8011708:	420a      	tst	r2, r1
 801170a:	d10b      	bne.n	8011724 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801170c:	43c8      	mvns	r0, r1
 801170e:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8011712:	4283      	cmp	r3, r0
 8011714:	bf14      	ite	ne
 8011716:	2000      	movne	r0, #0
 8011718:	2001      	moveq	r0, #1
 801171a:	4770      	bx	lr
    return 1;
 801171c:	2001      	movs	r0, #1
 801171e:	4770      	bx	lr
    return 0;
 8011720:	2000      	movs	r0, #0
 8011722:	4770      	bx	lr
    return 0;
 8011724:	2000      	movs	r0, #0
  }
}
 8011726:	4770      	bx	lr

08011728 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011728:	b538      	push	{r3, r4, r5, lr}
 801172a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801172c:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <ip_reass_dequeue_datagram+0x38>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4283      	cmp	r3, r0
 8011732:	d008      	beq.n	8011746 <ip_reass_dequeue_datagram+0x1e>
 8011734:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011736:	b151      	cbz	r1, 801174e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8011738:	6823      	ldr	r3, [r4, #0]
 801173a:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801173c:	4621      	mov	r1, r4
 801173e:	2004      	movs	r0, #4
 8011740:	f7fa f836 	bl	800b7b0 <memp_free>
}
 8011744:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8011746:	6802      	ldr	r2, [r0, #0]
 8011748:	4b05      	ldr	r3, [pc, #20]	; (8011760 <ip_reass_dequeue_datagram+0x38>)
 801174a:	601a      	str	r2, [r3, #0]
 801174c:	e7f6      	b.n	801173c <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801174e:	4b05      	ldr	r3, [pc, #20]	; (8011764 <ip_reass_dequeue_datagram+0x3c>)
 8011750:	f240 1245 	movw	r2, #325	; 0x145
 8011754:	4904      	ldr	r1, [pc, #16]	; (8011768 <ip_reass_dequeue_datagram+0x40>)
 8011756:	4805      	ldr	r0, [pc, #20]	; (801176c <ip_reass_dequeue_datagram+0x44>)
 8011758:	f000 ff5c 	bl	8012614 <iprintf>
 801175c:	e7ec      	b.n	8011738 <ip_reass_dequeue_datagram+0x10>
 801175e:	bf00      	nop
 8011760:	20012cfc 	.word	0x20012cfc
 8011764:	08016004 	.word	0x08016004
 8011768:	08016040 	.word	0x08016040
 801176c:	0801397c 	.word	0x0801397c

08011770 <ip_reass_free_complete_datagram>:
{
 8011770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	4680      	mov	r8, r0
 8011776:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011778:	4281      	cmp	r1, r0
 801177a:	d017      	beq.n	80117ac <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 801177c:	f1b9 0f00 	cmp.w	r9, #0
 8011780:	d009      	beq.n	8011796 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011782:	f8d9 3000 	ldr.w	r3, [r9]
 8011786:	4543      	cmp	r3, r8
 8011788:	d005      	beq.n	8011796 <ip_reass_free_complete_datagram+0x26>
 801178a:	4b33      	ldr	r3, [pc, #204]	; (8011858 <ip_reass_free_complete_datagram+0xe8>)
 801178c:	22ad      	movs	r2, #173	; 0xad
 801178e:	4933      	ldr	r1, [pc, #204]	; (801185c <ip_reass_free_complete_datagram+0xec>)
 8011790:	4833      	ldr	r0, [pc, #204]	; (8011860 <ip_reass_free_complete_datagram+0xf0>)
 8011792:	f000 ff3f 	bl	8012614 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011796:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801179a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 801179c:	889a      	ldrh	r2, [r3, #4]
 801179e:	b162      	cbz	r2, 80117ba <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 80117a0:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80117a2:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8011858 <ip_reass_free_complete_datagram+0xe8>
 80117a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011870 <ip_reass_free_complete_datagram+0x100>
 80117aa:	e041      	b.n	8011830 <ip_reass_free_complete_datagram+0xc0>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80117ac:	4b2a      	ldr	r3, [pc, #168]	; (8011858 <ip_reass_free_complete_datagram+0xe8>)
 80117ae:	22ab      	movs	r2, #171	; 0xab
 80117b0:	492c      	ldr	r1, [pc, #176]	; (8011864 <ip_reass_free_complete_datagram+0xf4>)
 80117b2:	482b      	ldr	r0, [pc, #172]	; (8011860 <ip_reass_free_complete_datagram+0xf0>)
 80117b4:	f000 ff2e 	bl	8012614 <iprintf>
 80117b8:	e7e0      	b.n	801177c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80117c0:	6872      	ldr	r2, [r6, #4]
 80117c2:	4643      	mov	r3, r8
 80117c4:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80117c8:	685d      	ldr	r5, [r3, #4]
 80117ca:	689c      	ldr	r4, [r3, #8]
 80117cc:	68d8      	ldr	r0, [r3, #12]
 80117ce:	6011      	str	r1, [r2, #0]
 80117d0:	6055      	str	r5, [r2, #4]
 80117d2:	6094      	str	r4, [r2, #8]
 80117d4:	60d0      	str	r0, [r2, #12]
 80117d6:	6919      	ldr	r1, [r3, #16]
 80117d8:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80117da:	2101      	movs	r1, #1
 80117dc:	4630      	mov	r0, r6
 80117de:	f7ff fdc5 	bl	801136c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80117e2:	4630      	mov	r0, r6
 80117e4:	f7fa fc1c 	bl	800c020 <pbuf_clen>
 80117e8:	4604      	mov	r4, r0
    pbuf_free(p);
 80117ea:	4630      	mov	r0, r6
 80117ec:	f7fa faa0 	bl	800bd30 <pbuf_free>
  p = ipr->p;
 80117f0:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 80117f4:	2e00      	cmp	r6, #0
 80117f6:	d1d4      	bne.n	80117a2 <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 80117f8:	4649      	mov	r1, r9
 80117fa:	4640      	mov	r0, r8
 80117fc:	f7ff ff94 	bl	8011728 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011800:	4b19      	ldr	r3, [pc, #100]	; (8011868 <ip_reass_free_complete_datagram+0xf8>)
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	42a3      	cmp	r3, r4
 8011806:	d31f      	bcc.n	8011848 <ip_reass_free_complete_datagram+0xd8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011808:	4a17      	ldr	r2, [pc, #92]	; (8011868 <ip_reass_free_complete_datagram+0xf8>)
 801180a:	8813      	ldrh	r3, [r2, #0]
 801180c:	1b1b      	subs	r3, r3, r4
 801180e:	8013      	strh	r3, [r2, #0]
}
 8011810:	4620      	mov	r0, r4
 8011812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011816:	465b      	mov	r3, fp
 8011818:	22cc      	movs	r2, #204	; 0xcc
 801181a:	4651      	mov	r1, sl
 801181c:	4810      	ldr	r0, [pc, #64]	; (8011860 <ip_reass_free_complete_datagram+0xf0>)
 801181e:	f000 fef9 	bl	8012614 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011822:	4425      	add	r5, r4
 8011824:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 8011826:	4638      	mov	r0, r7
 8011828:	f7fa fa82 	bl	800bd30 <pbuf_free>
  while (p != NULL) {
 801182c:	2e00      	cmp	r6, #0
 801182e:	d0e3      	beq.n	80117f8 <ip_reass_free_complete_datagram+0x88>
    iprh = (struct ip_reass_helper *)p->payload;
 8011830:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 8011832:	4637      	mov	r7, r6
 8011834:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 8011836:	4638      	mov	r0, r7
 8011838:	f7fa fbf2 	bl	800c020 <pbuf_clen>
 801183c:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801183e:	1823      	adds	r3, r4, r0
 8011840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011844:	dbed      	blt.n	8011822 <ip_reass_free_complete_datagram+0xb2>
 8011846:	e7e6      	b.n	8011816 <ip_reass_free_complete_datagram+0xa6>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011848:	4b03      	ldr	r3, [pc, #12]	; (8011858 <ip_reass_free_complete_datagram+0xe8>)
 801184a:	22d2      	movs	r2, #210	; 0xd2
 801184c:	4907      	ldr	r1, [pc, #28]	; (801186c <ip_reass_free_complete_datagram+0xfc>)
 801184e:	4804      	ldr	r0, [pc, #16]	; (8011860 <ip_reass_free_complete_datagram+0xf0>)
 8011850:	f000 fee0 	bl	8012614 <iprintf>
 8011854:	e7d8      	b.n	8011808 <ip_reass_free_complete_datagram+0x98>
 8011856:	bf00      	nop
 8011858:	08016004 	.word	0x08016004
 801185c:	08016068 	.word	0x08016068
 8011860:	0801397c 	.word	0x0801397c
 8011864:	0801605c 	.word	0x0801605c
 8011868:	20012cf8 	.word	0x20012cf8
 801186c:	0801609c 	.word	0x0801609c
 8011870:	0801607c 	.word	0x0801607c

08011874 <ip_reass_remove_oldest_datagram>:
{
 8011874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011878:	4605      	mov	r5, r0
 801187a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801187c:	2600      	movs	r6, #0
    r = reassdatagrams;
 801187e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80118ec <ip_reass_remove_oldest_datagram+0x78>
 8011882:	e026      	b.n	80118d2 <ip_reass_remove_oldest_datagram+0x5e>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011884:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8011888:	699a      	ldr	r2, [r3, #24]
 801188a:	454a      	cmp	r2, r9
 801188c:	d10e      	bne.n	80118ac <ip_reass_remove_oldest_datagram+0x38>
 801188e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8011892:	88aa      	ldrh	r2, [r5, #4]
 8011894:	4591      	cmp	r9, r2
 8011896:	d109      	bne.n	80118ac <ip_reass_remove_oldest_datagram+0x38>
 8011898:	e001      	b.n	801189e <ip_reass_remove_oldest_datagram+0x2a>
 801189a:	4661      	mov	r1, ip
 801189c:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	469c      	mov	ip, r3
 80118a2:	b172      	cbz	r2, 80118c2 <ip_reass_remove_oldest_datagram+0x4e>
 80118a4:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80118a6:	695a      	ldr	r2, [r3, #20]
 80118a8:	4572      	cmp	r2, lr
 80118aa:	d0eb      	beq.n	8011884 <ip_reass_remove_oldest_datagram+0x10>
        other_datagrams++;
 80118ac:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d0f3      	beq.n	801189a <ip_reass_remove_oldest_datagram+0x26>
        } else if (r->timer <= oldest->timer) {
 80118b2:	f893 901f 	ldrb.w	r9, [r3, #31]
 80118b6:	7fc2      	ldrb	r2, [r0, #31]
 80118b8:	4591      	cmp	r9, r2
 80118ba:	d8f0      	bhi.n	801189e <ip_reass_remove_oldest_datagram+0x2a>
 80118bc:	4661      	mov	r1, ip
 80118be:	4618      	mov	r0, r3
 80118c0:	e7ed      	b.n	801189e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80118c2:	b110      	cbz	r0, 80118ca <ip_reass_remove_oldest_datagram+0x56>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80118c4:	f7ff ff54 	bl	8011770 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80118c8:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80118ca:	42be      	cmp	r6, r7
 80118cc:	da0b      	bge.n	80118e6 <ip_reass_remove_oldest_datagram+0x72>
 80118ce:	2c01      	cmp	r4, #1
 80118d0:	dd09      	ble.n	80118e6 <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 80118d2:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 80118d6:	b133      	cbz	r3, 80118e6 <ip_reass_remove_oldest_datagram+0x72>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80118d8:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 80118dc:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80118de:	4621      	mov	r1, r4
    prev = NULL;
 80118e0:	46a4      	mov	ip, r4
    oldest = NULL;
 80118e2:	4620      	mov	r0, r4
 80118e4:	e7df      	b.n	80118a6 <ip_reass_remove_oldest_datagram+0x32>
}
 80118e6:	4630      	mov	r0, r6
 80118e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118ec:	20012cfc 	.word	0x20012cfc

080118f0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80118f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80118f2:	4604      	mov	r4, r0
 80118f4:	b120      	cbz	r0, 8011900 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80118f6:	4621      	mov	r1, r4
 80118f8:	2005      	movs	r0, #5
 80118fa:	f7f9 ff59 	bl	800b7b0 <memp_free>
}
 80118fe:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8011900:	4b03      	ldr	r3, [pc, #12]	; (8011910 <ip_frag_free_pbuf_custom_ref+0x20>)
 8011902:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011906:	4903      	ldr	r1, [pc, #12]	; (8011914 <ip_frag_free_pbuf_custom_ref+0x24>)
 8011908:	4803      	ldr	r0, [pc, #12]	; (8011918 <ip_frag_free_pbuf_custom_ref+0x28>)
 801190a:	f000 fe83 	bl	8012614 <iprintf>
 801190e:	e7f2      	b.n	80118f6 <ip_frag_free_pbuf_custom_ref+0x6>
 8011910:	08016004 	.word	0x08016004
 8011914:	08013d14 	.word	0x08013d14
 8011918:	0801397c 	.word	0x0801397c

0801191c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801191c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801191e:	4604      	mov	r4, r0
 8011920:	b138      	cbz	r0, 8011932 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8011922:	6960      	ldr	r0, [r4, #20]
 8011924:	b108      	cbz	r0, 801192a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8011926:	f7fa fa03 	bl	800bd30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801192a:	4620      	mov	r0, r4
 801192c:	f7ff ffe0 	bl	80118f0 <ip_frag_free_pbuf_custom_ref>
}
 8011930:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011932:	4b04      	ldr	r3, [pc, #16]	; (8011944 <ipfrag_free_pbuf_custom+0x28>)
 8011934:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011938:	4903      	ldr	r1, [pc, #12]	; (8011948 <ipfrag_free_pbuf_custom+0x2c>)
 801193a:	4804      	ldr	r0, [pc, #16]	; (801194c <ipfrag_free_pbuf_custom+0x30>)
 801193c:	f000 fe6a 	bl	8012614 <iprintf>
 8011940:	e7ef      	b.n	8011922 <ipfrag_free_pbuf_custom+0x6>
 8011942:	bf00      	nop
 8011944:	08016004 	.word	0x08016004
 8011948:	080160c0 	.word	0x080160c0
 801194c:	0801397c 	.word	0x0801397c

08011950 <ip_reass_tmr>:
{
 8011950:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8011952:	4b0a      	ldr	r3, [pc, #40]	; (801197c <ip_reass_tmr+0x2c>)
 8011954:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8011956:	b178      	cbz	r0, 8011978 <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 8011958:	2400      	movs	r4, #0
 801195a:	e005      	b.n	8011968 <ip_reass_tmr+0x18>
      r = r->next;
 801195c:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 801195e:	4621      	mov	r1, r4
 8011960:	f7ff ff06 	bl	8011770 <ip_reass_free_complete_datagram>
      r = r->next;
 8011964:	4628      	mov	r0, r5
  while (r != NULL) {
 8011966:	b138      	cbz	r0, 8011978 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 8011968:	7fc3      	ldrb	r3, [r0, #31]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d0f6      	beq.n	801195c <ip_reass_tmr+0xc>
      r->timer--;
 801196e:	3b01      	subs	r3, #1
 8011970:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8011972:	4604      	mov	r4, r0
 8011974:	6800      	ldr	r0, [r0, #0]
 8011976:	e7f6      	b.n	8011966 <ip_reass_tmr+0x16>
}
 8011978:	bd38      	pop	{r3, r4, r5, pc}
 801197a:	bf00      	nop
 801197c:	20012cfc 	.word	0x20012cfc

08011980 <ip4_reass>:
{
 8011980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	b083      	sub	sp, #12
 8011986:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 8011988:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801198c:	f899 3000 	ldrb.w	r3, [r9]
 8011990:	f003 030f 	and.w	r3, r3, #15
 8011994:	2b05      	cmp	r3, #5
 8011996:	d16e      	bne.n	8011a76 <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011998:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 801199c:	f7f9 fbba 	bl	800b114 <lwip_htons>
 80119a0:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80119a2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80119a6:	f7f9 fbb5 	bl	800b114 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80119aa:	f899 3000 	ldrb.w	r3, [r9]
 80119ae:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80119b2:	009e      	lsls	r6, r3, #2
 80119b4:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80119b8:	d35d      	bcc.n	8011a76 <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 80119ba:	1b80      	subs	r0, r0, r6
 80119bc:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 80119be:	4628      	mov	r0, r5
 80119c0:	f7fa fb2e 	bl	800c020 <pbuf_clen>
 80119c4:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80119c6:	4bbf      	ldr	r3, [pc, #764]	; (8011cc4 <ip4_reass+0x344>)
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	4403      	add	r3, r0
 80119cc:	2b0a      	cmp	r3, #10
 80119ce:	dc07      	bgt.n	80119e0 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80119d0:	4bbd      	ldr	r3, [pc, #756]	; (8011cc8 <ip4_reass+0x348>)
 80119d2:	681c      	ldr	r4, [r3, #0]
 80119d4:	2c00      	cmp	r4, #0
 80119d6:	f000 81cc 	beq.w	8011d72 <ip4_reass+0x3f2>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80119da:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80119de:	e00f      	b.n	8011a00 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80119e0:	4601      	mov	r1, r0
 80119e2:	4648      	mov	r0, r9
 80119e4:	f7ff ff46 	bl	8011874 <ip_reass_remove_oldest_datagram>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d044      	beq.n	8011a76 <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80119ec:	4bb5      	ldr	r3, [pc, #724]	; (8011cc4 <ip4_reass+0x344>)
 80119ee:	881b      	ldrh	r3, [r3, #0]
 80119f0:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80119f2:	2b0a      	cmp	r3, #10
 80119f4:	ddec      	ble.n	80119d0 <ip4_reass+0x50>
 80119f6:	e03e      	b.n	8011a76 <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80119f8:	6824      	ldr	r4, [r4, #0]
 80119fa:	2c00      	cmp	r4, #0
 80119fc:	f000 81b9 	beq.w	8011d72 <ip4_reass+0x3f2>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011a00:	6963      	ldr	r3, [r4, #20]
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d1f8      	bne.n	80119f8 <ip4_reass+0x78>
 8011a06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a0a:	69a1      	ldr	r1, [r4, #24]
 8011a0c:	4299      	cmp	r1, r3
 8011a0e:	d1f3      	bne.n	80119f8 <ip4_reass+0x78>
 8011a10:	89a1      	ldrh	r1, [r4, #12]
 8011a12:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8011a16:	4299      	cmp	r1, r3
 8011a18:	d1ee      	bne.n	80119f8 <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011a1a:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8011a1e:	f7f9 fb79 	bl	800b114 <lwip_htons>
 8011a22:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d03b      	beq.n	8011aa2 <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011a2a:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8011a2e:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011a30:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 8011a34:	f019 0920 	ands.w	r9, r9, #32
 8011a38:	d107      	bne.n	8011a4a <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8011a3a:	19bb      	adds	r3, r7, r6
 8011a3c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011a3e:	429f      	cmp	r7, r3
 8011a40:	d812      	bhi.n	8011a68 <ip4_reass+0xe8>
 8011a42:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d80e      	bhi.n	8011a68 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011a4a:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011a4e:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8011a52:	f7f9 fb5f 	bl	800b114 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8011a56:	f89a 3000 	ldrb.w	r3, [sl]
 8011a5a:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8011a5e:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8011a62:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8011a66:	d233      	bcs.n	8011ad0 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011a68:	2c00      	cmp	r4, #0
 8011a6a:	f000 8150 	beq.w	8011d0e <ip4_reass+0x38e>
  if (ipr->p == NULL) {
 8011a6e:	6863      	ldr	r3, [r4, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f000 8154 	beq.w	8011d1e <ip4_reass+0x39e>
  pbuf_free(p);
 8011a76:	4628      	mov	r0, r5
 8011a78:	f7fa f95a 	bl	800bd30 <pbuf_free>
  return NULL;
 8011a7c:	2600      	movs	r6, #0
}
 8011a7e:	4630      	mov	r0, r6
 8011a80:	b003      	add	sp, #12
 8011a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011a86:	4641      	mov	r1, r8
 8011a88:	4648      	mov	r0, r9
 8011a8a:	f7ff fef3 	bl	8011874 <ip_reass_remove_oldest_datagram>
 8011a8e:	4580      	cmp	r8, r0
 8011a90:	dcf1      	bgt.n	8011a76 <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a92:	2004      	movs	r0, #4
 8011a94:	f7f9 fe72 	bl	800b77c <memp_malloc>
    if (ipr == NULL)
 8011a98:	4604      	mov	r4, r0
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	f040 8170 	bne.w	8011d80 <ip4_reass+0x400>
 8011aa0:	e7e9      	b.n	8011a76 <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011aa2:	89e0      	ldrh	r0, [r4, #14]
 8011aa4:	f7f9 fb36 	bl	800b114 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011aa8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d0bc      	beq.n	8011a2a <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011ab0:	f8d9 3000 	ldr.w	r3, [r9]
 8011ab4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8011ab8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011abc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8011ac0:	60a3      	str	r3, [r4, #8]
 8011ac2:	60e0      	str	r0, [r4, #12]
 8011ac4:	6121      	str	r1, [r4, #16]
 8011ac6:	6162      	str	r2, [r4, #20]
 8011ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011acc:	61a3      	str	r3, [r4, #24]
 8011ace:	e7ac      	b.n	8011a2a <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 8011ad0:	eba0 000b 	sub.w	r0, r0, fp
 8011ad4:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011ad8:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8011adc:	f7f9 fb1a 	bl	800b114 <lwip_htons>
 8011ae0:	f3c0 020c 	ubfx	r2, r0, #0, #13
 8011ae4:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011ae6:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 8011aea:	2300      	movs	r3, #0
 8011aec:	f88a 3000 	strb.w	r3, [sl]
 8011af0:	f88a 3001 	strb.w	r3, [sl, #1]
 8011af4:	f88a 3002 	strb.w	r3, [sl, #2]
 8011af8:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 8011afc:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 8011b00:	4493      	add	fp, r2
 8011b02:	fa1f f38b 	uxth.w	r3, fp
 8011b06:	9301      	str	r3, [sp, #4]
 8011b08:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d8ab      	bhi.n	8011a68 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8011b10:	6860      	ldr	r0, [r4, #4]
 8011b12:	2800      	cmp	r0, #0
 8011b14:	f000 8113 	beq.w	8011d3e <ip4_reass+0x3be>
  int valid = 1;
 8011b18:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	e030      	b.n	8011b82 <ip4_reass+0x202>
      iprh->next_pbuf = q;
 8011b20:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 8011b24:	f1bc 0f00 	cmp.w	ip, #0
 8011b28:	d020      	beq.n	8011b6c <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011b2a:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 8011b2e:	428a      	cmp	r2, r1
 8011b30:	d39d      	bcc.n	8011a6e <ip4_reass+0xee>
 8011b32:	889b      	ldrh	r3, [r3, #4]
 8011b34:	9a01      	ldr	r2, [sp, #4]
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d399      	bcc.n	8011a6e <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 8011b3a:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8011b3e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 8011b42:	428b      	cmp	r3, r1
 8011b44:	bf18      	it	ne
 8011b46:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011b4a:	f1b9 0f00 	cmp.w	r9, #0
 8011b4e:	d02f      	beq.n	8011bb0 <ip4_reass+0x230>
 8011b50:	7fa3      	ldrb	r3, [r4, #30]
 8011b52:	f013 0f01 	tst.w	r3, #1
 8011b56:	d12b      	bne.n	8011bb0 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011b58:	4a5a      	ldr	r2, [pc, #360]	; (8011cc4 <ip4_reass+0x344>)
 8011b5a:	8813      	ldrh	r3, [r2, #0]
 8011b5c:	4498      	add	r8, r3
 8011b5e:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 8011b62:	f1b9 0f00 	cmp.w	r9, #0
 8011b66:	d074      	beq.n	8011c52 <ip4_reass+0x2d2>
  return NULL;
 8011b68:	2600      	movs	r6, #0
 8011b6a:	e788      	b.n	8011a7e <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 8011b6c:	889b      	ldrh	r3, [r3, #4]
 8011b6e:	9a01      	ldr	r2, [sp, #4]
 8011b70:	4293      	cmp	r3, r2
 8011b72:	f4ff af7c 	bcc.w	8011a6e <ip4_reass+0xee>
        ipr->p = new_p;
 8011b76:	6065      	str	r5, [r4, #4]
 8011b78:	e7e7      	b.n	8011b4a <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 8011b7a:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	f000 80e6 	beq.w	8011d4e <ip4_reass+0x3ce>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011b82:	469c      	mov	ip, r3
 8011b84:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 8011b86:	8899      	ldrh	r1, [r3, #4]
 8011b88:	428a      	cmp	r2, r1
 8011b8a:	d3c9      	bcc.n	8011b20 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 8011b8c:	428a      	cmp	r2, r1
 8011b8e:	f43f af6e 	beq.w	8011a6e <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 8011b92:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8011b96:	455a      	cmp	r2, fp
 8011b98:	f4ff af69 	bcc.w	8011a6e <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 8011b9c:	f1bc 0f00 	cmp.w	ip, #0
 8011ba0:	d0eb      	beq.n	8011b7a <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 8011ba2:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 8011ba6:	4288      	cmp	r0, r1
 8011ba8:	bf18      	it	ne
 8011baa:	f04f 0e00 	movne.w	lr, #0
 8011bae:	e7e4      	b.n	8011b7a <ip4_reass+0x1fa>
    if (valid) {
 8011bb0:	f1be 0f00 	cmp.w	lr, #0
 8011bb4:	d02f      	beq.n	8011c16 <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011bb6:	6863      	ldr	r3, [r4, #4]
 8011bb8:	b343      	cbz	r3, 8011c0c <ip4_reass+0x28c>
 8011bba:	6859      	ldr	r1, [r3, #4]
 8011bbc:	888b      	ldrh	r3, [r1, #4]
 8011bbe:	bb43      	cbnz	r3, 8011c12 <ip4_reass+0x292>
        q = iprh->next_pbuf;
 8011bc0:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 8011bc4:	b15b      	cbz	r3, 8011bde <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 8011bc6:	4652      	mov	r2, sl
 8011bc8:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8011bcc:	88d2      	ldrh	r2, [r2, #6]
 8011bce:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d134      	bne.n	8011c40 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 8011bd6:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1f3      	bne.n	8011bc6 <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 8011bde:	458a      	cmp	sl, r1
 8011be0:	f040 80ec 	bne.w	8011dbc <ip4_reass+0x43c>
 8011be4:	4b39      	ldr	r3, [pc, #228]	; (8011ccc <ip4_reass+0x34c>)
 8011be6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011bea:	4939      	ldr	r1, [pc, #228]	; (8011cd0 <ip4_reass+0x350>)
 8011bec:	4839      	ldr	r0, [pc, #228]	; (8011cd4 <ip4_reass+0x354>)
 8011bee:	f000 fd11 	bl	8012614 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011bf2:	f8da 3000 	ldr.w	r3, [sl]
 8011bf6:	b333      	cbz	r3, 8011c46 <ip4_reass+0x2c6>
 8011bf8:	4b34      	ldr	r3, [pc, #208]	; (8011ccc <ip4_reass+0x34c>)
 8011bfa:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011bfe:	4936      	ldr	r1, [pc, #216]	; (8011cd8 <ip4_reass+0x358>)
 8011c00:	4834      	ldr	r0, [pc, #208]	; (8011cd4 <ip4_reass+0x354>)
 8011c02:	f000 fd07 	bl	8012614 <iprintf>
 8011c06:	f04f 0e01 	mov.w	lr, #1
 8011c0a:	e004      	b.n	8011c16 <ip4_reass+0x296>
        valid = 0;
 8011c0c:	f04f 0e00 	mov.w	lr, #0
 8011c10:	e001      	b.n	8011c16 <ip4_reass+0x296>
 8011c12:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011c16:	f1be 0100 	subs.w	r1, lr, #0
 8011c1a:	bf18      	it	ne
 8011c1c:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011c1e:	4a29      	ldr	r2, [pc, #164]	; (8011cc4 <ip4_reass+0x344>)
 8011c20:	8813      	ldrh	r3, [r2, #0]
 8011c22:	4498      	add	r8, r3
 8011c24:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 8011c28:	f1b9 0f00 	cmp.w	r9, #0
 8011c2c:	d105      	bne.n	8011c3a <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 8011c2e:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8011c30:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011c32:	7fa3      	ldrb	r3, [r4, #30]
 8011c34:	f043 0301 	orr.w	r3, r3, #1
 8011c38:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011c3a:	b961      	cbnz	r1, 8011c56 <ip4_reass+0x2d6>
  return NULL;
 8011c3c:	2600      	movs	r6, #0
 8011c3e:	e71e      	b.n	8011a7e <ip4_reass+0xfe>
 8011c40:	f04f 0e00 	mov.w	lr, #0
 8011c44:	e7e7      	b.n	8011c16 <ip4_reass+0x296>
 8011c46:	f04f 0e01 	mov.w	lr, #1
 8011c4a:	e7e4      	b.n	8011c16 <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011c4c:	f04f 0e00 	mov.w	lr, #0
 8011c50:	e7e1      	b.n	8011c16 <ip4_reass+0x296>
  if (is_last) {
 8011c52:	2100      	movs	r1, #0
 8011c54:	e7eb      	b.n	8011c2e <ip4_reass+0x2ae>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011c56:	8ba0      	ldrh	r0, [r4, #28]
 8011c58:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011c5a:	6863      	ldr	r3, [r4, #4]
 8011c5c:	685e      	ldr	r6, [r3, #4]
 8011c5e:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011c60:	4623      	mov	r3, r4
 8011c62:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8011c66:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8011c6a:	689f      	ldr	r7, [r3, #8]
 8011c6c:	68d9      	ldr	r1, [r3, #12]
 8011c6e:	6032      	str	r2, [r6, #0]
 8011c70:	f8c6 c004 	str.w	ip, [r6, #4]
 8011c74:	60b7      	str	r7, [r6, #8]
 8011c76:	60f1      	str	r1, [r6, #12]
 8011c78:	691a      	ldr	r2, [r3, #16]
 8011c7a:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011c7c:	b280      	uxth	r0, r0
 8011c7e:	f7f9 fa49 	bl	800b114 <lwip_htons>
 8011c82:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011c84:	2300      	movs	r3, #0
 8011c86:	71b3      	strb	r3, [r6, #6]
 8011c88:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011c8a:	72b3      	strb	r3, [r6, #10]
 8011c8c:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8011c8e:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8011c90:	b16d      	cbz	r5, 8011cae <ip4_reass+0x32e>
      pbuf_remove_header(r, IP_HLEN);
 8011c92:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 8011c96:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8011c98:	4641      	mov	r1, r8
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	f7fa f808 	bl	800bcb0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f7fa f9e4 	bl	800c070 <pbuf_cat>
      r = iprh->next_pbuf;
 8011ca8:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8011caa:	2d00      	cmp	r5, #0
 8011cac:	d1f3      	bne.n	8011c96 <ip4_reass+0x316>
    if (ipr == reassdatagrams) {
 8011cae:	4b06      	ldr	r3, [pc, #24]	; (8011cc8 <ip4_reass+0x348>)
 8011cb0:	6819      	ldr	r1, [r3, #0]
 8011cb2:	42a1      	cmp	r1, r4
 8011cb4:	d012      	beq.n	8011cdc <ip4_reass+0x35c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011cb6:	b191      	cbz	r1, 8011cde <ip4_reass+0x35e>
        if (ipr_prev->next == ipr) {
 8011cb8:	680b      	ldr	r3, [r1, #0]
 8011cba:	42a3      	cmp	r3, r4
 8011cbc:	d00f      	beq.n	8011cde <ip4_reass+0x35e>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	e7f9      	b.n	8011cb6 <ip4_reass+0x336>
 8011cc2:	bf00      	nop
 8011cc4:	20012cf8 	.word	0x20012cf8
 8011cc8:	20012cfc 	.word	0x20012cfc
 8011ccc:	08016004 	.word	0x08016004
 8011cd0:	080160cc 	.word	0x080160cc
 8011cd4:	0801397c 	.word	0x0801397c
 8011cd8:	080160dc 	.word	0x080160dc
      ipr_prev = NULL;
 8011cdc:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f7ff fd22 	bl	8011728 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	f7fa f99b 	bl	800c020 <pbuf_clen>
 8011cea:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011cec:	4b35      	ldr	r3, [pc, #212]	; (8011dc4 <ip4_reass+0x444>)
 8011cee:	881b      	ldrh	r3, [r3, #0]
 8011cf0:	4283      	cmp	r3, r0
 8011cf2:	d304      	bcc.n	8011cfe <ip4_reass+0x37e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011cf4:	4a33      	ldr	r2, [pc, #204]	; (8011dc4 <ip4_reass+0x444>)
 8011cf6:	8813      	ldrh	r3, [r2, #0]
 8011cf8:	1b1c      	subs	r4, r3, r4
 8011cfa:	8014      	strh	r4, [r2, #0]
    return p;
 8011cfc:	e6bf      	b.n	8011a7e <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011cfe:	4b32      	ldr	r3, [pc, #200]	; (8011dc8 <ip4_reass+0x448>)
 8011d00:	f240 229b 	movw	r2, #667	; 0x29b
 8011d04:	4931      	ldr	r1, [pc, #196]	; (8011dcc <ip4_reass+0x44c>)
 8011d06:	4832      	ldr	r0, [pc, #200]	; (8011dd0 <ip4_reass+0x450>)
 8011d08:	f000 fc84 	bl	8012614 <iprintf>
 8011d0c:	e7f2      	b.n	8011cf4 <ip4_reass+0x374>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011d0e:	4b2e      	ldr	r3, [pc, #184]	; (8011dc8 <ip4_reass+0x448>)
 8011d10:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011d14:	492f      	ldr	r1, [pc, #188]	; (8011dd4 <ip4_reass+0x454>)
 8011d16:	482e      	ldr	r0, [pc, #184]	; (8011dd0 <ip4_reass+0x450>)
 8011d18:	f000 fc7c 	bl	8012614 <iprintf>
 8011d1c:	e6a7      	b.n	8011a6e <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011d1e:	4b2e      	ldr	r3, [pc, #184]	; (8011dd8 <ip4_reass+0x458>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	42a3      	cmp	r3, r4
 8011d24:	d006      	beq.n	8011d34 <ip4_reass+0x3b4>
 8011d26:	4b28      	ldr	r3, [pc, #160]	; (8011dc8 <ip4_reass+0x448>)
 8011d28:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011d2c:	492b      	ldr	r1, [pc, #172]	; (8011ddc <ip4_reass+0x45c>)
 8011d2e:	4828      	ldr	r0, [pc, #160]	; (8011dd0 <ip4_reass+0x450>)
 8011d30:	f000 fc70 	bl	8012614 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011d34:	2100      	movs	r1, #0
 8011d36:	4620      	mov	r0, r4
 8011d38:	f7ff fcf6 	bl	8011728 <ip_reass_dequeue_datagram>
 8011d3c:	e69b      	b.n	8011a76 <ip4_reass+0xf6>
      ipr->p = new_p;
 8011d3e:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011d40:	f1b9 0f00 	cmp.w	r9, #0
 8011d44:	f43f af37 	beq.w	8011bb6 <ip4_reass+0x236>
  int valid = 1;
 8011d48:	f04f 0e01 	mov.w	lr, #1
 8011d4c:	e700      	b.n	8011b50 <ip4_reass+0x1d0>
      iprh_prev->next_pbuf = new_p;
 8011d4e:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011d50:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011d54:	455b      	cmp	r3, fp
 8011d56:	f43f aef8 	beq.w	8011b4a <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011d5a:	f1b9 0f00 	cmp.w	r9, #0
 8011d5e:	f43f af75 	beq.w	8011c4c <ip4_reass+0x2cc>
 8011d62:	7fa3      	ldrb	r3, [r4, #30]
 8011d64:	f013 0f01 	tst.w	r3, #1
 8011d68:	f43f aef6 	beq.w	8011b58 <ip4_reass+0x1d8>
 8011d6c:	f04f 0e00 	mov.w	lr, #0
 8011d70:	e751      	b.n	8011c16 <ip4_reass+0x296>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011d72:	2004      	movs	r0, #4
 8011d74:	f7f9 fd02 	bl	800b77c <memp_malloc>
  if (ipr == NULL) {
 8011d78:	4604      	mov	r4, r0
 8011d7a:	2800      	cmp	r0, #0
 8011d7c:	f43f ae83 	beq.w	8011a86 <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011d80:	2300      	movs	r3, #0
 8011d82:	6063      	str	r3, [r4, #4]
 8011d84:	60a3      	str	r3, [r4, #8]
 8011d86:	60e3      	str	r3, [r4, #12]
 8011d88:	6123      	str	r3, [r4, #16]
 8011d8a:	6163      	str	r3, [r4, #20]
 8011d8c:	61a3      	str	r3, [r4, #24]
 8011d8e:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 8011d90:	230f      	movs	r3, #15
 8011d92:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8011d94:	4b10      	ldr	r3, [pc, #64]	; (8011dd8 <ip4_reass+0x458>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8011d9a:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011d9c:	f8d9 3000 	ldr.w	r3, [r9]
 8011da0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8011da4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011da8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8011dac:	60a3      	str	r3, [r4, #8]
 8011dae:	60e0      	str	r0, [r4, #12]
 8011db0:	6121      	str	r1, [r4, #16]
 8011db2:	6162      	str	r2, [r4, #20]
 8011db4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011db8:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 8011dba:	e636      	b.n	8011a2a <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 8011dbc:	f04f 0e01 	mov.w	lr, #1
 8011dc0:	e729      	b.n	8011c16 <ip4_reass+0x296>
 8011dc2:	bf00      	nop
 8011dc4:	20012cf8 	.word	0x20012cf8
 8011dc8:	08016004 	.word	0x08016004
 8011dcc:	08016100 	.word	0x08016100
 8011dd0:	0801397c 	.word	0x0801397c
 8011dd4:	0801611c 	.word	0x0801611c
 8011dd8:	20012cfc 	.word	0x20012cfc
 8011ddc:	08016128 	.word	0x08016128

08011de0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de4:	b08d      	sub	sp, #52	; 0x34
 8011de6:	4605      	mov	r5, r0
 8011de8:	9107      	str	r1, [sp, #28]
 8011dea:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011dec:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8011dee:	3b14      	subs	r3, #20
 8011df0:	bf48      	it	mi
 8011df2:	3307      	addmi	r3, #7
 8011df4:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 8011df8:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011dfa:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8011e02:	f003 030f 	and.w	r3, r3, #15
 8011e06:	2b05      	cmp	r3, #5
 8011e08:	f040 80db 	bne.w	8011fc2 <ip4_frag+0x1e2>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011e0c:	8943      	ldrh	r3, [r0, #10]
 8011e0e:	2b13      	cmp	r3, #19
 8011e10:	d943      	bls.n	8011e9a <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011e12:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8011e16:	f7f9 f97d 	bl	800b114 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8011e1a:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8011e1e:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011e20:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 8011e24:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011e26:	892b      	ldrh	r3, [r5, #8]
 8011e28:	3b14      	subs	r3, #20
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	9303      	str	r3, [sp, #12]

  while (left) {
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f000 80ca 	beq.w	8011fc8 <ip4_frag+0x1e8>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011e34:	9b06      	ldr	r3, [sp, #24]
 8011e36:	00db      	lsls	r3, r3, #3
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 8011e3c:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 8011e40:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011e42:	9b08      	ldr	r3, [sp, #32]
 8011e44:	9a03      	ldr	r2, [sp, #12]
 8011e46:	4293      	cmp	r3, r2
 8011e48:	bf28      	it	cs
 8011e4a:	4613      	movcs	r3, r2
 8011e4c:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011e4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e52:	2114      	movs	r1, #20
 8011e54:	200e      	movs	r0, #14
 8011e56:	f7f9 ffdb 	bl	800be10 <pbuf_alloc>
    if (rambuf == NULL) {
 8011e5a:	4683      	mov	fp, r0
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	f000 80b5 	beq.w	8011fcc <ip4_frag+0x1ec>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011e62:	8943      	ldrh	r3, [r0, #10]
 8011e64:	2b13      	cmp	r3, #19
 8011e66:	d922      	bls.n	8011eae <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011e68:	f8db 3004 	ldr.w	r3, [fp, #4]
 8011e6c:	f8da 2000 	ldr.w	r2, [sl]
 8011e70:	f8da 6004 	ldr.w	r6, [sl, #4]
 8011e74:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011e78:	f8da 100c 	ldr.w	r1, [sl, #12]
 8011e7c:	601a      	str	r2, [r3, #0]
 8011e7e:	605e      	str	r6, [r3, #4]
 8011e80:	6098      	str	r0, [r3, #8]
 8011e82:	60d9      	str	r1, [r3, #12]
 8011e84:	f8da 2010 	ldr.w	r2, [sl, #16]
 8011e88:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011e8a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8011e8e:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 8011e90:	9b04      	ldr	r3, [sp, #16]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d04e      	beq.n	8011f34 <ip4_frag+0x154>
    left_to_copy = fragsize;
 8011e96:	461e      	mov	r6, r3
 8011e98:	e01d      	b.n	8011ed6 <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011e9a:	4b4e      	ldr	r3, [pc, #312]	; (8011fd4 <ip4_frag+0x1f4>)
 8011e9c:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011ea0:	494d      	ldr	r1, [pc, #308]	; (8011fd8 <ip4_frag+0x1f8>)
 8011ea2:	484e      	ldr	r0, [pc, #312]	; (8011fdc <ip4_frag+0x1fc>)
 8011ea4:	f000 fbb6 	bl	8012614 <iprintf>
 8011ea8:	f06f 0005 	mvn.w	r0, #5
 8011eac:	e07a      	b.n	8011fa4 <ip4_frag+0x1c4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011eae:	4b49      	ldr	r3, [pc, #292]	; (8011fd4 <ip4_frag+0x1f4>)
 8011eb0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011eb4:	494a      	ldr	r1, [pc, #296]	; (8011fe0 <ip4_frag+0x200>)
 8011eb6:	4849      	ldr	r0, [pc, #292]	; (8011fdc <ip4_frag+0x1fc>)
 8011eb8:	f000 fbac 	bl	8012614 <iprintf>
 8011ebc:	e7d4      	b.n	8011e68 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011ebe:	4b45      	ldr	r3, [pc, #276]	; (8011fd4 <ip4_frag+0x1f4>)
 8011ec0:	f240 322d 	movw	r2, #813	; 0x32d
 8011ec4:	4947      	ldr	r1, [pc, #284]	; (8011fe4 <ip4_frag+0x204>)
 8011ec6:	4845      	ldr	r0, [pc, #276]	; (8011fdc <ip4_frag+0x1fc>)
 8011ec8:	f000 fba4 	bl	8012614 <iprintf>
 8011ecc:	e009      	b.n	8011ee2 <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 8011ece:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 8011ed0:	b376      	cbz	r6, 8011f30 <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 8011ed2:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 8011ed6:	896b      	ldrh	r3, [r5, #10]
 8011ed8:	eba3 0409 	sub.w	r4, r3, r9
 8011edc:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011ede:	454b      	cmp	r3, r9
 8011ee0:	d3ed      	bcc.n	8011ebe <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011ee2:	42b4      	cmp	r4, r6
 8011ee4:	bf28      	it	cs
 8011ee6:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8011ee8:	2c00      	cmp	r4, #0
 8011eea:	d0f0      	beq.n	8011ece <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011eec:	2005      	movs	r0, #5
 8011eee:	f7f9 fc45 	bl	800b77c <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 8011ef2:	4607      	mov	r7, r0
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d050      	beq.n	8011f9a <ip4_frag+0x1ba>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011ef8:	9401      	str	r4, [sp, #4]
 8011efa:	686b      	ldr	r3, [r5, #4]
 8011efc:	444b      	add	r3, r9
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	4603      	mov	r3, r0
 8011f02:	2241      	movs	r2, #65	; 0x41
 8011f04:	4621      	mov	r1, r4
 8011f06:	2000      	movs	r0, #0
 8011f08:	f7f9 feb0 	bl	800bc6c <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 8011f0c:	4680      	mov	r8, r0
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	d04b      	beq.n	8011faa <ip4_frag+0x1ca>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8011f12:	4628      	mov	r0, r5
 8011f14:	f7fa f890 	bl	800c038 <pbuf_ref>
      pcr->original = p;
 8011f18:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011f1a:	4b33      	ldr	r3, [pc, #204]	; (8011fe8 <ip4_frag+0x208>)
 8011f1c:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011f1e:	4641      	mov	r1, r8
 8011f20:	4658      	mov	r0, fp
 8011f22:	f7fa f8a5 	bl	800c070 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011f26:	1b36      	subs	r6, r6, r4
 8011f28:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8011f2a:	b11e      	cbz	r6, 8011f34 <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 8011f2c:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 8011f2e:	e7d0      	b.n	8011ed2 <ip4_frag+0xf2>
        poff = 0;
 8011f30:	46b1      	mov	r9, r6
 8011f32:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011f34:	44a1      	add	r9, r4
 8011f36:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011f3a:	9b05      	ldr	r3, [sp, #20]
 8011f3c:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8011f40:	9b07      	ldr	r3, [sp, #28]
 8011f42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011f44:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8011f46:	9a03      	ldr	r2, [sp, #12]
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	dd37      	ble.n	8011fbc <ip4_frag+0x1dc>
 8011f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d134      	bne.n	8011fbc <ip4_frag+0x1dc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011f52:	f7f9 f8df 	bl	800b114 <lwip_htons>
 8011f56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011f58:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011f5a:	9f04      	ldr	r7, [sp, #16]
 8011f5c:	f107 0014 	add.w	r0, r7, #20
 8011f60:	b280      	uxth	r0, r0
 8011f62:	f7f9 f8d7 	bl	800b114 <lwip_htons>
 8011f66:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011f68:	2300      	movs	r3, #0
 8011f6a:	72b3      	strb	r3, [r6, #10]
 8011f6c:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011f6e:	9807      	ldr	r0, [sp, #28]
 8011f70:	6943      	ldr	r3, [r0, #20]
 8011f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f74:	4659      	mov	r1, fp
 8011f76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011f78:	4658      	mov	r0, fp
 8011f7a:	f7f9 fed9 	bl	800bd30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011f7e:	9b03      	ldr	r3, [sp, #12]
 8011f80:	1bdb      	subs	r3, r3, r7
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 8011f86:	9b05      	ldr	r3, [sp, #20]
 8011f88:	9906      	ldr	r1, [sp, #24]
 8011f8a:	440b      	add	r3, r1
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	9305      	str	r3, [sp, #20]
  while (left) {
 8011f90:	2a00      	cmp	r2, #0
 8011f92:	f47f af56 	bne.w	8011e42 <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011f96:	2000      	movs	r0, #0
 8011f98:	e004      	b.n	8011fa4 <ip4_frag+0x1c4>
        pbuf_free(rambuf);
 8011f9a:	4658      	mov	r0, fp
 8011f9c:	f7f9 fec8 	bl	800bd30 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011fa0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011fa4:	b00d      	add	sp, #52	; 0x34
 8011fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8011faa:	4638      	mov	r0, r7
 8011fac:	f7ff fca0 	bl	80118f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011fb0:	4658      	mov	r0, fp
 8011fb2:	f7f9 febd 	bl	800bd30 <pbuf_free>
  return ERR_MEM;
 8011fb6:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8011fba:	e7f3      	b.n	8011fa4 <ip4_frag+0x1c4>
      tmp = tmp | IP_MF;
 8011fbc:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8011fc0:	e7c7      	b.n	8011f52 <ip4_frag+0x172>
    return ERR_VAL;
 8011fc2:	f06f 0005 	mvn.w	r0, #5
 8011fc6:	e7ed      	b.n	8011fa4 <ip4_frag+0x1c4>
  return ERR_OK;
 8011fc8:	2000      	movs	r0, #0
 8011fca:	e7eb      	b.n	8011fa4 <ip4_frag+0x1c4>
  return ERR_MEM;
 8011fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd0:	e7e8      	b.n	8011fa4 <ip4_frag+0x1c4>
 8011fd2:	bf00      	nop
 8011fd4:	08016004 	.word	0x08016004
 8011fd8:	08016148 	.word	0x08016148
 8011fdc:	0801397c 	.word	0x0801397c
 8011fe0:	08016164 	.word	0x08016164
 8011fe4:	08016184 	.word	0x08016184
 8011fe8:	0801191d 	.word	0x0801191d

08011fec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011ff0:	8943      	ldrh	r3, [r0, #10]
 8011ff2:	2b0e      	cmp	r3, #14
 8011ff4:	d91c      	bls.n	8012030 <ethernet_input+0x44>
 8011ff6:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011ff8:	7bc3      	ldrb	r3, [r0, #15]
 8011ffa:	b91b      	cbnz	r3, 8012004 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8011ffc:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8012000:	3301      	adds	r3, #1
 8012002:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012004:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012006:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012008:	7803      	ldrb	r3, [r0, #0]
 801200a:	f013 0f01 	tst.w	r3, #1
 801200e:	d00a      	beq.n	8012026 <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012010:	2b01      	cmp	r3, #1
 8012012:	d012      	beq.n	801203a <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012014:	2206      	movs	r2, #6
 8012016:	491e      	ldr	r1, [pc, #120]	; (8012090 <ethernet_input+0xa4>)
 8012018:	f000 fa7d 	bl	8012516 <memcmp>
 801201c:	b918      	cbnz	r0, 8012026 <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801201e:	7b63      	ldrb	r3, [r4, #13]
 8012020:	f043 0308 	orr.w	r3, r3, #8
 8012024:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8012026:	2e08      	cmp	r6, #8
 8012028:	d012      	beq.n	8012050 <ethernet_input+0x64>
 801202a:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801202e:	d01f      	beq.n	8012070 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8012030:	4620      	mov	r0, r4
 8012032:	f7f9 fe7d 	bl	800bd30 <pbuf_free>
  return ERR_OK;
}
 8012036:	2000      	movs	r0, #0
 8012038:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801203a:	7843      	ldrb	r3, [r0, #1]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1f2      	bne.n	8012026 <ethernet_input+0x3a>
 8012040:	7883      	ldrb	r3, [r0, #2]
 8012042:	2b5e      	cmp	r3, #94	; 0x5e
 8012044:	d1ef      	bne.n	8012026 <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 8012046:	7b63      	ldrb	r3, [r4, #13]
 8012048:	f043 0310 	orr.w	r3, r3, #16
 801204c:	7363      	strb	r3, [r4, #13]
 801204e:	e7ea      	b.n	8012026 <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012050:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8012054:	f013 0f08 	tst.w	r3, #8
 8012058:	d0ea      	beq.n	8012030 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801205a:	210e      	movs	r1, #14
 801205c:	4620      	mov	r0, r4
 801205e:	f7f9 fe27 	bl	800bcb0 <pbuf_remove_header>
 8012062:	2800      	cmp	r0, #0
 8012064:	d1e4      	bne.n	8012030 <ethernet_input+0x44>
        ip4_input(p, netif);
 8012066:	4629      	mov	r1, r5
 8012068:	4620      	mov	r0, r4
 801206a:	f7ff f9d9 	bl	8011420 <ip4_input>
      break;
 801206e:	e7e2      	b.n	8012036 <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012070:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8012074:	f013 0f08 	tst.w	r3, #8
 8012078:	d0da      	beq.n	8012030 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801207a:	210e      	movs	r1, #14
 801207c:	4620      	mov	r0, r4
 801207e:	f7f9 fe17 	bl	800bcb0 <pbuf_remove_header>
 8012082:	2800      	cmp	r0, #0
 8012084:	d1d4      	bne.n	8012030 <ethernet_input+0x44>
        etharp_input(p, netif);
 8012086:	4629      	mov	r1, r5
 8012088:	4620      	mov	r0, r4
 801208a:	f7fe fd9d 	bl	8010bc8 <etharp_input>
      break;
 801208e:	e7d2      	b.n	8012036 <ethernet_input+0x4a>
 8012090:	08016200 	.word	0x08016200

08012094 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012098:	4605      	mov	r5, r0
 801209a:	460c      	mov	r4, r1
 801209c:	4616      	mov	r6, r2
 801209e:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80120a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80120a4:	f7f9 f836 	bl	800b114 <lwip_htons>
 80120a8:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80120aa:	210e      	movs	r1, #14
 80120ac:	4620      	mov	r0, r4
 80120ae:	f7f9 fdf9 	bl	800bca4 <pbuf_add_header>
 80120b2:	b9e8      	cbnz	r0, 80120f0 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80120b4:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80120b6:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	600b      	str	r3, [r1, #0]
 80120be:	88bb      	ldrh	r3, [r7, #4]
 80120c0:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80120c2:	6833      	ldr	r3, [r6, #0]
 80120c4:	f8c1 3006 	str.w	r3, [r1, #6]
 80120c8:	88b3      	ldrh	r3, [r6, #4]
 80120ca:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80120cc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80120d0:	2b06      	cmp	r3, #6
 80120d2:	d105      	bne.n	80120e0 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80120d4:	69ab      	ldr	r3, [r5, #24]
 80120d6:	4621      	mov	r1, r4
 80120d8:	4628      	mov	r0, r5
 80120da:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80120dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80120e0:	4b05      	ldr	r3, [pc, #20]	; (80120f8 <ethernet_output+0x64>)
 80120e2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80120e6:	4905      	ldr	r1, [pc, #20]	; (80120fc <ethernet_output+0x68>)
 80120e8:	4805      	ldr	r0, [pc, #20]	; (8012100 <ethernet_output+0x6c>)
 80120ea:	f000 fa93 	bl	8012614 <iprintf>
 80120ee:	e7f1      	b.n	80120d4 <ethernet_output+0x40>
  return ERR_BUF;
 80120f0:	f06f 0001 	mvn.w	r0, #1
 80120f4:	e7f2      	b.n	80120dc <ethernet_output+0x48>
 80120f6:	bf00      	nop
 80120f8:	08016194 	.word	0x08016194
 80120fc:	080161cc 	.word	0x080161cc
 8012100:	0801397c 	.word	0x0801397c

08012104 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012104:	b510      	push	{r4, lr}
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801210a:	2200      	movs	r2, #0
 801210c:	2104      	movs	r1, #4
 801210e:	f7f5 f821 	bl	8007154 <osMessageQueueNew>
 8012112:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012114:	fab0 f080 	clz	r0, r0
 8012118:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 801211a:	4240      	negs	r0, r0
 801211c:	bd10      	pop	{r4, pc}

0801211e <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801211e:	b510      	push	{r4, lr}
 8012120:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8012122:	6800      	ldr	r0, [r0, #0]
 8012124:	f7f5 f900 	bl	8007328 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8012128:	6820      	ldr	r0, [r4, #0]
 801212a:	f7f5 f919 	bl	8007360 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801212e:	bd10      	pop	{r4, pc}

08012130 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012130:	b500      	push	{lr}
 8012132:	b083      	sub	sp, #12
 8012134:	9101      	str	r1, [sp, #4]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012136:	2300      	movs	r3, #0
 8012138:	461a      	mov	r2, r3
 801213a:	a901      	add	r1, sp, #4
 801213c:	6800      	ldr	r0, [r0, #0]
 801213e:	f7f5 f85f 	bl	8007200 <osMessageQueuePut>
 8012142:	3800      	subs	r0, #0
 8012144:	bf18      	it	ne
 8012146:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8012148:	4240      	negs	r0, r0
 801214a:	b003      	add	sp, #12
 801214c:	f85d fb04 	ldr.w	pc, [sp], #4

08012150 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	4606      	mov	r6, r0
 8012154:	460f      	mov	r7, r1
 8012156:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8012158:	f7f4 fda6 	bl	8006ca8 <osKernelGetTickCount>
 801215c:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 801215e:	b16d      	cbz	r5, 801217c <sys_arch_mbox_fetch+0x2c>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8012160:	462b      	mov	r3, r5
 8012162:	2200      	movs	r2, #0
 8012164:	4639      	mov	r1, r7
 8012166:	6830      	ldr	r0, [r6, #0]
 8012168:	f7f5 f894 	bl	8007294 <osMessageQueueGet>
    if (status == osOK)
 801216c:	b110      	cbz	r0, 8012174 <sys_arch_mbox_fetch+0x24>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801216e:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (osKernelGetTickCount() - starttime);
 8012174:	f7f4 fd98 	bl	8006ca8 <osKernelGetTickCount>
 8012178:	1b00      	subs	r0, r0, r4
 801217a:	e7fa      	b.n	8012172 <sys_arch_mbox_fetch+0x22>
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801217c:	f04f 33ff 	mov.w	r3, #4294967295
 8012180:	2200      	movs	r2, #0
 8012182:	4639      	mov	r1, r7
 8012184:	6830      	ldr	r0, [r6, #0]
 8012186:	f7f5 f885 	bl	8007294 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801218a:	f7f4 fd8d 	bl	8006ca8 <osKernelGetTickCount>
 801218e:	1b00      	subs	r0, r0, r4
 8012190:	e7ef      	b.n	8012172 <sys_arch_mbox_fetch+0x22>

08012192 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8012192:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8012194:	2300      	movs	r3, #0
 8012196:	461a      	mov	r2, r3
 8012198:	6800      	ldr	r0, [r0, #0]
 801219a:	f7f5 f87b 	bl	8007294 <osMessageQueueGet>
 801219e:	3800      	subs	r0, #0
 80121a0:	bf18      	it	ne
 80121a2:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 80121a4:	4240      	negs	r0, r0
 80121a6:	bd08      	pop	{r3, pc}

080121a8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 80121a8:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 80121aa:	3800      	subs	r0, #0
 80121ac:	bf18      	it	ne
 80121ae:	2001      	movne	r0, #1
 80121b0:	4770      	bx	lr

080121b2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 80121b2:	2300      	movs	r3, #0
 80121b4:	6003      	str	r3, [r0, #0]
}
 80121b6:	4770      	bx	lr

080121b8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4604      	mov	r4, r0
 80121bc:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80121be:	2200      	movs	r2, #0
 80121c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80121c4:	f7f4 febe 	bl	8006f44 <osSemaphoreNew>
 80121c8:	6020      	str	r0, [r4, #0]
#endif

  if(*sem == NULL)
 80121ca:	b138      	cbz	r0, 80121dc <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 80121cc:	b10d      	cbz	r5, 80121d2 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80121ce:	2000      	movs	r0, #0
}
 80121d0:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 80121d2:	2100      	movs	r1, #0
 80121d4:	f7f4 ff18 	bl	8007008 <osSemaphoreAcquire>
  return ERR_OK;
 80121d8:	2000      	movs	r0, #0
 80121da:	e7f9      	b.n	80121d0 <sys_sem_new+0x18>
    return ERR_MEM;
 80121dc:	f04f 30ff 	mov.w	r0, #4294967295
 80121e0:	e7f6      	b.n	80121d0 <sys_sem_new+0x18>

080121e2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80121e2:	b570      	push	{r4, r5, r6, lr}
 80121e4:	4604      	mov	r4, r0
 80121e6:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80121e8:	f7f4 fd5e 	bl	8006ca8 <osKernelGetTickCount>
 80121ec:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 80121ee:	b95e      	cbnz	r6, 8012208 <sys_arch_sem_wait+0x26>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80121f0:	f04f 36ff 	mov.w	r6, #4294967295
 80121f4:	4631      	mov	r1, r6
 80121f6:	6820      	ldr	r0, [r4, #0]
 80121f8:	f7f4 ff06 	bl	8007008 <osSemaphoreAcquire>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d1f9      	bne.n	80121f4 <sys_arch_sem_wait+0x12>
    return (osKernelGetTickCount() - starttime);
 8012200:	f7f4 fd52 	bl	8006ca8 <osKernelGetTickCount>
 8012204:	1b40      	subs	r0, r0, r5
#endif
  }
}
 8012206:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8012208:	4631      	mov	r1, r6
 801220a:	6820      	ldr	r0, [r4, #0]
 801220c:	f7f4 fefc 	bl	8007008 <osSemaphoreAcquire>
 8012210:	b110      	cbz	r0, 8012218 <sys_arch_sem_wait+0x36>
      return SYS_ARCH_TIMEOUT;
 8012212:	f04f 30ff 	mov.w	r0, #4294967295
 8012216:	e7f6      	b.n	8012206 <sys_arch_sem_wait+0x24>
        return (osKernelGetTickCount() - starttime);
 8012218:	f7f4 fd46 	bl	8006ca8 <osKernelGetTickCount>
 801221c:	1b40      	subs	r0, r0, r5
 801221e:	e7f2      	b.n	8012206 <sys_arch_sem_wait+0x24>

08012220 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8012220:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 8012222:	6800      	ldr	r0, [r0, #0]
 8012224:	f7f4 ff34 	bl	8007090 <osSemaphoreRelease>
}
 8012228:	bd08      	pop	{r3, pc}

0801222a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801222a:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801222c:	6800      	ldr	r0, [r0, #0]
 801222e:	f7f4 ff6d 	bl	800710c <osSemaphoreDelete>
}
 8012232:	bd08      	pop	{r3, pc}

08012234 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8012234:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 8012236:	3800      	subs	r0, #0
 8012238:	bf18      	it	ne
 801223a:	2001      	movne	r0, #1
 801223c:	4770      	bx	lr

0801223e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 801223e:	2300      	movs	r3, #0
 8012240:	6003      	str	r3, [r0, #0]
}
 8012242:	4770      	bx	lr

08012244 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012244:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8012246:	2000      	movs	r0, #0
 8012248:	f7f4 fdba 	bl	8006dc0 <osMutexNew>
 801224c:	4b01      	ldr	r3, [pc, #4]	; (8012254 <sys_init+0x10>)
 801224e:	6018      	str	r0, [r3, #0]
#endif
}
 8012250:	bd08      	pop	{r3, pc}
 8012252:	bf00      	nop
 8012254:	2001b62c 	.word	0x2001b62c

08012258 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012258:	b510      	push	{r4, lr}
 801225a:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801225c:	2000      	movs	r0, #0
 801225e:	f7f4 fdaf 	bl	8006dc0 <osMutexNew>
 8012262:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
 8012264:	fab0 f080 	clz	r0, r0
 8012268:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 801226a:	4240      	negs	r0, r0
 801226c:	bd10      	pop	{r4, pc}

0801226e <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801226e:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8012270:	f04f 31ff 	mov.w	r1, #4294967295
 8012274:	6800      	ldr	r0, [r0, #0]
 8012276:	f7f4 fdf3 	bl	8006e60 <osMutexAcquire>
#endif
}
 801227a:	bd08      	pop	{r3, pc}

0801227c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801227c:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 801227e:	6800      	ldr	r0, [r0, #0]
 8012280:	f7f4 fe2c 	bl	8006edc <osMutexRelease>
}
 8012284:	bd08      	pop	{r3, pc}

08012286 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012288:	b08b      	sub	sp, #44	; 0x2c
 801228a:	4607      	mov	r7, r0
 801228c:	460c      	mov	r4, r1
 801228e:	4615      	mov	r5, r2
 8012290:	461e      	mov	r6, r3
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8012292:	2220      	movs	r2, #32
 8012294:	2100      	movs	r1, #0
 8012296:	a802      	add	r0, sp, #8
 8012298:	f000 f959 	bl	801254e <memset>
 801229c:	9701      	str	r7, [sp, #4]
 801229e:	9606      	str	r6, [sp, #24]
 80122a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122a2:	9307      	str	r3, [sp, #28]
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80122a4:	aa01      	add	r2, sp, #4
 80122a6:	4629      	mov	r1, r5
 80122a8:	4620      	mov	r0, r4
 80122aa:	f7f4 fd13 	bl	8006cd4 <osThreadNew>
#endif
}
 80122ae:	b00b      	add	sp, #44	; 0x2c
 80122b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080122b4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80122b4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80122b6:	f04f 31ff 	mov.w	r1, #4294967295
 80122ba:	4b03      	ldr	r3, [pc, #12]	; (80122c8 <sys_arch_protect+0x14>)
 80122bc:	6818      	ldr	r0, [r3, #0]
 80122be:	f7f4 fdcf 	bl	8006e60 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 80122c2:	2001      	movs	r0, #1
 80122c4:	bd08      	pop	{r3, pc}
 80122c6:	bf00      	nop
 80122c8:	2001b62c 	.word	0x2001b62c

080122cc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80122cc:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80122ce:	4b02      	ldr	r3, [pc, #8]	; (80122d8 <sys_arch_unprotect+0xc>)
 80122d0:	6818      	ldr	r0, [r3, #0]
 80122d2:	f7f4 fe03 	bl	8006edc <osMutexRelease>
}
 80122d6:	bd08      	pop	{r3, pc}
 80122d8:	2001b62c 	.word	0x2001b62c

080122dc <std>:
 80122dc:	2300      	movs	r3, #0
 80122de:	b510      	push	{r4, lr}
 80122e0:	4604      	mov	r4, r0
 80122e2:	e9c0 3300 	strd	r3, r3, [r0]
 80122e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122ea:	6083      	str	r3, [r0, #8]
 80122ec:	8181      	strh	r1, [r0, #12]
 80122ee:	6643      	str	r3, [r0, #100]	; 0x64
 80122f0:	81c2      	strh	r2, [r0, #14]
 80122f2:	6183      	str	r3, [r0, #24]
 80122f4:	4619      	mov	r1, r3
 80122f6:	2208      	movs	r2, #8
 80122f8:	305c      	adds	r0, #92	; 0x5c
 80122fa:	f000 f928 	bl	801254e <memset>
 80122fe:	4b05      	ldr	r3, [pc, #20]	; (8012314 <std+0x38>)
 8012300:	6263      	str	r3, [r4, #36]	; 0x24
 8012302:	4b05      	ldr	r3, [pc, #20]	; (8012318 <std+0x3c>)
 8012304:	62a3      	str	r3, [r4, #40]	; 0x28
 8012306:	4b05      	ldr	r3, [pc, #20]	; (801231c <std+0x40>)
 8012308:	62e3      	str	r3, [r4, #44]	; 0x2c
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <std+0x44>)
 801230c:	6224      	str	r4, [r4, #32]
 801230e:	6323      	str	r3, [r4, #48]	; 0x30
 8012310:	bd10      	pop	{r4, pc}
 8012312:	bf00      	nop
 8012314:	080127b9 	.word	0x080127b9
 8012318:	080127db 	.word	0x080127db
 801231c:	08012813 	.word	0x08012813
 8012320:	08012837 	.word	0x08012837

08012324 <_cleanup_r>:
 8012324:	4901      	ldr	r1, [pc, #4]	; (801232c <_cleanup_r+0x8>)
 8012326:	f000 b8af 	b.w	8012488 <_fwalk_reent>
 801232a:	bf00      	nop
 801232c:	080129cd 	.word	0x080129cd

08012330 <__sfmoreglue>:
 8012330:	b570      	push	{r4, r5, r6, lr}
 8012332:	1e4a      	subs	r2, r1, #1
 8012334:	2568      	movs	r5, #104	; 0x68
 8012336:	4355      	muls	r5, r2
 8012338:	460e      	mov	r6, r1
 801233a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801233e:	f000 f90f 	bl	8012560 <_malloc_r>
 8012342:	4604      	mov	r4, r0
 8012344:	b140      	cbz	r0, 8012358 <__sfmoreglue+0x28>
 8012346:	2100      	movs	r1, #0
 8012348:	e9c0 1600 	strd	r1, r6, [r0]
 801234c:	300c      	adds	r0, #12
 801234e:	60a0      	str	r0, [r4, #8]
 8012350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012354:	f000 f8fb 	bl	801254e <memset>
 8012358:	4620      	mov	r0, r4
 801235a:	bd70      	pop	{r4, r5, r6, pc}

0801235c <__sfp_lock_acquire>:
 801235c:	4801      	ldr	r0, [pc, #4]	; (8012364 <__sfp_lock_acquire+0x8>)
 801235e:	f000 b8d8 	b.w	8012512 <__retarget_lock_acquire_recursive>
 8012362:	bf00      	nop
 8012364:	2001b638 	.word	0x2001b638

08012368 <__sfp_lock_release>:
 8012368:	4801      	ldr	r0, [pc, #4]	; (8012370 <__sfp_lock_release+0x8>)
 801236a:	f000 b8d3 	b.w	8012514 <__retarget_lock_release_recursive>
 801236e:	bf00      	nop
 8012370:	2001b638 	.word	0x2001b638

08012374 <__sinit_lock_acquire>:
 8012374:	4801      	ldr	r0, [pc, #4]	; (801237c <__sinit_lock_acquire+0x8>)
 8012376:	f000 b8cc 	b.w	8012512 <__retarget_lock_acquire_recursive>
 801237a:	bf00      	nop
 801237c:	2001b633 	.word	0x2001b633

08012380 <__sinit_lock_release>:
 8012380:	4801      	ldr	r0, [pc, #4]	; (8012388 <__sinit_lock_release+0x8>)
 8012382:	f000 b8c7 	b.w	8012514 <__retarget_lock_release_recursive>
 8012386:	bf00      	nop
 8012388:	2001b633 	.word	0x2001b633

0801238c <__sinit>:
 801238c:	b510      	push	{r4, lr}
 801238e:	4604      	mov	r4, r0
 8012390:	f7ff fff0 	bl	8012374 <__sinit_lock_acquire>
 8012394:	69a3      	ldr	r3, [r4, #24]
 8012396:	b11b      	cbz	r3, 80123a0 <__sinit+0x14>
 8012398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801239c:	f7ff bff0 	b.w	8012380 <__sinit_lock_release>
 80123a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80123a4:	6523      	str	r3, [r4, #80]	; 0x50
 80123a6:	4b13      	ldr	r3, [pc, #76]	; (80123f4 <__sinit+0x68>)
 80123a8:	4a13      	ldr	r2, [pc, #76]	; (80123f8 <__sinit+0x6c>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80123ae:	42a3      	cmp	r3, r4
 80123b0:	bf04      	itt	eq
 80123b2:	2301      	moveq	r3, #1
 80123b4:	61a3      	streq	r3, [r4, #24]
 80123b6:	4620      	mov	r0, r4
 80123b8:	f000 f820 	bl	80123fc <__sfp>
 80123bc:	6060      	str	r0, [r4, #4]
 80123be:	4620      	mov	r0, r4
 80123c0:	f000 f81c 	bl	80123fc <__sfp>
 80123c4:	60a0      	str	r0, [r4, #8]
 80123c6:	4620      	mov	r0, r4
 80123c8:	f000 f818 	bl	80123fc <__sfp>
 80123cc:	2200      	movs	r2, #0
 80123ce:	60e0      	str	r0, [r4, #12]
 80123d0:	2104      	movs	r1, #4
 80123d2:	6860      	ldr	r0, [r4, #4]
 80123d4:	f7ff ff82 	bl	80122dc <std>
 80123d8:	68a0      	ldr	r0, [r4, #8]
 80123da:	2201      	movs	r2, #1
 80123dc:	2109      	movs	r1, #9
 80123de:	f7ff ff7d 	bl	80122dc <std>
 80123e2:	68e0      	ldr	r0, [r4, #12]
 80123e4:	2202      	movs	r2, #2
 80123e6:	2112      	movs	r1, #18
 80123e8:	f7ff ff78 	bl	80122dc <std>
 80123ec:	2301      	movs	r3, #1
 80123ee:	61a3      	str	r3, [r4, #24]
 80123f0:	e7d2      	b.n	8012398 <__sinit+0xc>
 80123f2:	bf00      	nop
 80123f4:	08016270 	.word	0x08016270
 80123f8:	08012325 	.word	0x08012325

080123fc <__sfp>:
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	4607      	mov	r7, r0
 8012400:	f7ff ffac 	bl	801235c <__sfp_lock_acquire>
 8012404:	4b1e      	ldr	r3, [pc, #120]	; (8012480 <__sfp+0x84>)
 8012406:	681e      	ldr	r6, [r3, #0]
 8012408:	69b3      	ldr	r3, [r6, #24]
 801240a:	b913      	cbnz	r3, 8012412 <__sfp+0x16>
 801240c:	4630      	mov	r0, r6
 801240e:	f7ff ffbd 	bl	801238c <__sinit>
 8012412:	3648      	adds	r6, #72	; 0x48
 8012414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012418:	3b01      	subs	r3, #1
 801241a:	d503      	bpl.n	8012424 <__sfp+0x28>
 801241c:	6833      	ldr	r3, [r6, #0]
 801241e:	b30b      	cbz	r3, 8012464 <__sfp+0x68>
 8012420:	6836      	ldr	r6, [r6, #0]
 8012422:	e7f7      	b.n	8012414 <__sfp+0x18>
 8012424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012428:	b9d5      	cbnz	r5, 8012460 <__sfp+0x64>
 801242a:	4b16      	ldr	r3, [pc, #88]	; (8012484 <__sfp+0x88>)
 801242c:	60e3      	str	r3, [r4, #12]
 801242e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012432:	6665      	str	r5, [r4, #100]	; 0x64
 8012434:	f000 f86c 	bl	8012510 <__retarget_lock_init_recursive>
 8012438:	f7ff ff96 	bl	8012368 <__sfp_lock_release>
 801243c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012444:	6025      	str	r5, [r4, #0]
 8012446:	61a5      	str	r5, [r4, #24]
 8012448:	2208      	movs	r2, #8
 801244a:	4629      	mov	r1, r5
 801244c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012450:	f000 f87d 	bl	801254e <memset>
 8012454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801245c:	4620      	mov	r0, r4
 801245e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012460:	3468      	adds	r4, #104	; 0x68
 8012462:	e7d9      	b.n	8012418 <__sfp+0x1c>
 8012464:	2104      	movs	r1, #4
 8012466:	4638      	mov	r0, r7
 8012468:	f7ff ff62 	bl	8012330 <__sfmoreglue>
 801246c:	4604      	mov	r4, r0
 801246e:	6030      	str	r0, [r6, #0]
 8012470:	2800      	cmp	r0, #0
 8012472:	d1d5      	bne.n	8012420 <__sfp+0x24>
 8012474:	f7ff ff78 	bl	8012368 <__sfp_lock_release>
 8012478:	230c      	movs	r3, #12
 801247a:	603b      	str	r3, [r7, #0]
 801247c:	e7ee      	b.n	801245c <__sfp+0x60>
 801247e:	bf00      	nop
 8012480:	08016270 	.word	0x08016270
 8012484:	ffff0001 	.word	0xffff0001

08012488 <_fwalk_reent>:
 8012488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801248c:	4606      	mov	r6, r0
 801248e:	4688      	mov	r8, r1
 8012490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012494:	2700      	movs	r7, #0
 8012496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801249a:	f1b9 0901 	subs.w	r9, r9, #1
 801249e:	d505      	bpl.n	80124ac <_fwalk_reent+0x24>
 80124a0:	6824      	ldr	r4, [r4, #0]
 80124a2:	2c00      	cmp	r4, #0
 80124a4:	d1f7      	bne.n	8012496 <_fwalk_reent+0xe>
 80124a6:	4638      	mov	r0, r7
 80124a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ac:	89ab      	ldrh	r3, [r5, #12]
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	d907      	bls.n	80124c2 <_fwalk_reent+0x3a>
 80124b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124b6:	3301      	adds	r3, #1
 80124b8:	d003      	beq.n	80124c2 <_fwalk_reent+0x3a>
 80124ba:	4629      	mov	r1, r5
 80124bc:	4630      	mov	r0, r6
 80124be:	47c0      	blx	r8
 80124c0:	4307      	orrs	r7, r0
 80124c2:	3568      	adds	r5, #104	; 0x68
 80124c4:	e7e9      	b.n	801249a <_fwalk_reent+0x12>
	...

080124c8 <__libc_init_array>:
 80124c8:	b570      	push	{r4, r5, r6, lr}
 80124ca:	4d0d      	ldr	r5, [pc, #52]	; (8012500 <__libc_init_array+0x38>)
 80124cc:	4c0d      	ldr	r4, [pc, #52]	; (8012504 <__libc_init_array+0x3c>)
 80124ce:	1b64      	subs	r4, r4, r5
 80124d0:	10a4      	asrs	r4, r4, #2
 80124d2:	2600      	movs	r6, #0
 80124d4:	42a6      	cmp	r6, r4
 80124d6:	d109      	bne.n	80124ec <__libc_init_array+0x24>
 80124d8:	4d0b      	ldr	r5, [pc, #44]	; (8012508 <__libc_init_array+0x40>)
 80124da:	4c0c      	ldr	r4, [pc, #48]	; (801250c <__libc_init_array+0x44>)
 80124dc:	f000 ffcc 	bl	8013478 <_init>
 80124e0:	1b64      	subs	r4, r4, r5
 80124e2:	10a4      	asrs	r4, r4, #2
 80124e4:	2600      	movs	r6, #0
 80124e6:	42a6      	cmp	r6, r4
 80124e8:	d105      	bne.n	80124f6 <__libc_init_array+0x2e>
 80124ea:	bd70      	pop	{r4, r5, r6, pc}
 80124ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80124f0:	4798      	blx	r3
 80124f2:	3601      	adds	r6, #1
 80124f4:	e7ee      	b.n	80124d4 <__libc_init_array+0xc>
 80124f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80124fa:	4798      	blx	r3
 80124fc:	3601      	adds	r6, #1
 80124fe:	e7f2      	b.n	80124e6 <__libc_init_array+0x1e>
 8012500:	08016364 	.word	0x08016364
 8012504:	08016364 	.word	0x08016364
 8012508:	08016364 	.word	0x08016364
 801250c:	08016368 	.word	0x08016368

08012510 <__retarget_lock_init_recursive>:
 8012510:	4770      	bx	lr

08012512 <__retarget_lock_acquire_recursive>:
 8012512:	4770      	bx	lr

08012514 <__retarget_lock_release_recursive>:
 8012514:	4770      	bx	lr

08012516 <memcmp>:
 8012516:	b530      	push	{r4, r5, lr}
 8012518:	3901      	subs	r1, #1
 801251a:	2400      	movs	r4, #0
 801251c:	42a2      	cmp	r2, r4
 801251e:	d101      	bne.n	8012524 <memcmp+0xe>
 8012520:	2000      	movs	r0, #0
 8012522:	e005      	b.n	8012530 <memcmp+0x1a>
 8012524:	5d03      	ldrb	r3, [r0, r4]
 8012526:	3401      	adds	r4, #1
 8012528:	5d0d      	ldrb	r5, [r1, r4]
 801252a:	42ab      	cmp	r3, r5
 801252c:	d0f6      	beq.n	801251c <memcmp+0x6>
 801252e:	1b58      	subs	r0, r3, r5
 8012530:	bd30      	pop	{r4, r5, pc}

08012532 <memcpy>:
 8012532:	440a      	add	r2, r1
 8012534:	4291      	cmp	r1, r2
 8012536:	f100 33ff 	add.w	r3, r0, #4294967295
 801253a:	d100      	bne.n	801253e <memcpy+0xc>
 801253c:	4770      	bx	lr
 801253e:	b510      	push	{r4, lr}
 8012540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012548:	4291      	cmp	r1, r2
 801254a:	d1f9      	bne.n	8012540 <memcpy+0xe>
 801254c:	bd10      	pop	{r4, pc}

0801254e <memset>:
 801254e:	4402      	add	r2, r0
 8012550:	4603      	mov	r3, r0
 8012552:	4293      	cmp	r3, r2
 8012554:	d100      	bne.n	8012558 <memset+0xa>
 8012556:	4770      	bx	lr
 8012558:	f803 1b01 	strb.w	r1, [r3], #1
 801255c:	e7f9      	b.n	8012552 <memset+0x4>
	...

08012560 <_malloc_r>:
 8012560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012562:	1ccd      	adds	r5, r1, #3
 8012564:	f025 0503 	bic.w	r5, r5, #3
 8012568:	3508      	adds	r5, #8
 801256a:	2d0c      	cmp	r5, #12
 801256c:	bf38      	it	cc
 801256e:	250c      	movcc	r5, #12
 8012570:	2d00      	cmp	r5, #0
 8012572:	4606      	mov	r6, r0
 8012574:	db01      	blt.n	801257a <_malloc_r+0x1a>
 8012576:	42a9      	cmp	r1, r5
 8012578:	d903      	bls.n	8012582 <_malloc_r+0x22>
 801257a:	230c      	movs	r3, #12
 801257c:	6033      	str	r3, [r6, #0]
 801257e:	2000      	movs	r0, #0
 8012580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012582:	f000 fa8b 	bl	8012a9c <__malloc_lock>
 8012586:	4921      	ldr	r1, [pc, #132]	; (801260c <_malloc_r+0xac>)
 8012588:	680a      	ldr	r2, [r1, #0]
 801258a:	4614      	mov	r4, r2
 801258c:	b99c      	cbnz	r4, 80125b6 <_malloc_r+0x56>
 801258e:	4f20      	ldr	r7, [pc, #128]	; (8012610 <_malloc_r+0xb0>)
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	b923      	cbnz	r3, 801259e <_malloc_r+0x3e>
 8012594:	4621      	mov	r1, r4
 8012596:	4630      	mov	r0, r6
 8012598:	f000 f8fe 	bl	8012798 <_sbrk_r>
 801259c:	6038      	str	r0, [r7, #0]
 801259e:	4629      	mov	r1, r5
 80125a0:	4630      	mov	r0, r6
 80125a2:	f000 f8f9 	bl	8012798 <_sbrk_r>
 80125a6:	1c43      	adds	r3, r0, #1
 80125a8:	d123      	bne.n	80125f2 <_malloc_r+0x92>
 80125aa:	230c      	movs	r3, #12
 80125ac:	6033      	str	r3, [r6, #0]
 80125ae:	4630      	mov	r0, r6
 80125b0:	f000 fa7a 	bl	8012aa8 <__malloc_unlock>
 80125b4:	e7e3      	b.n	801257e <_malloc_r+0x1e>
 80125b6:	6823      	ldr	r3, [r4, #0]
 80125b8:	1b5b      	subs	r3, r3, r5
 80125ba:	d417      	bmi.n	80125ec <_malloc_r+0x8c>
 80125bc:	2b0b      	cmp	r3, #11
 80125be:	d903      	bls.n	80125c8 <_malloc_r+0x68>
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	441c      	add	r4, r3
 80125c4:	6025      	str	r5, [r4, #0]
 80125c6:	e004      	b.n	80125d2 <_malloc_r+0x72>
 80125c8:	6863      	ldr	r3, [r4, #4]
 80125ca:	42a2      	cmp	r2, r4
 80125cc:	bf0c      	ite	eq
 80125ce:	600b      	streq	r3, [r1, #0]
 80125d0:	6053      	strne	r3, [r2, #4]
 80125d2:	4630      	mov	r0, r6
 80125d4:	f000 fa68 	bl	8012aa8 <__malloc_unlock>
 80125d8:	f104 000b 	add.w	r0, r4, #11
 80125dc:	1d23      	adds	r3, r4, #4
 80125de:	f020 0007 	bic.w	r0, r0, #7
 80125e2:	1ac2      	subs	r2, r0, r3
 80125e4:	d0cc      	beq.n	8012580 <_malloc_r+0x20>
 80125e6:	1a1b      	subs	r3, r3, r0
 80125e8:	50a3      	str	r3, [r4, r2]
 80125ea:	e7c9      	b.n	8012580 <_malloc_r+0x20>
 80125ec:	4622      	mov	r2, r4
 80125ee:	6864      	ldr	r4, [r4, #4]
 80125f0:	e7cc      	b.n	801258c <_malloc_r+0x2c>
 80125f2:	1cc4      	adds	r4, r0, #3
 80125f4:	f024 0403 	bic.w	r4, r4, #3
 80125f8:	42a0      	cmp	r0, r4
 80125fa:	d0e3      	beq.n	80125c4 <_malloc_r+0x64>
 80125fc:	1a21      	subs	r1, r4, r0
 80125fe:	4630      	mov	r0, r6
 8012600:	f000 f8ca 	bl	8012798 <_sbrk_r>
 8012604:	3001      	adds	r0, #1
 8012606:	d1dd      	bne.n	80125c4 <_malloc_r+0x64>
 8012608:	e7cf      	b.n	80125aa <_malloc_r+0x4a>
 801260a:	bf00      	nop
 801260c:	20012d00 	.word	0x20012d00
 8012610:	20012d04 	.word	0x20012d04

08012614 <iprintf>:
 8012614:	b40f      	push	{r0, r1, r2, r3}
 8012616:	4b0a      	ldr	r3, [pc, #40]	; (8012640 <iprintf+0x2c>)
 8012618:	b513      	push	{r0, r1, r4, lr}
 801261a:	681c      	ldr	r4, [r3, #0]
 801261c:	b124      	cbz	r4, 8012628 <iprintf+0x14>
 801261e:	69a3      	ldr	r3, [r4, #24]
 8012620:	b913      	cbnz	r3, 8012628 <iprintf+0x14>
 8012622:	4620      	mov	r0, r4
 8012624:	f7ff feb2 	bl	801238c <__sinit>
 8012628:	ab05      	add	r3, sp, #20
 801262a:	9a04      	ldr	r2, [sp, #16]
 801262c:	68a1      	ldr	r1, [r4, #8]
 801262e:	9301      	str	r3, [sp, #4]
 8012630:	4620      	mov	r0, r4
 8012632:	f000 fab9 	bl	8012ba8 <_vfiprintf_r>
 8012636:	b002      	add	sp, #8
 8012638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801263c:	b004      	add	sp, #16
 801263e:	4770      	bx	lr
 8012640:	20000018 	.word	0x20000018

08012644 <rand>:
 8012644:	4b17      	ldr	r3, [pc, #92]	; (80126a4 <rand+0x60>)
 8012646:	b510      	push	{r4, lr}
 8012648:	681c      	ldr	r4, [r3, #0]
 801264a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801264c:	b9b3      	cbnz	r3, 801267c <rand+0x38>
 801264e:	2018      	movs	r0, #24
 8012650:	f000 fa1c 	bl	8012a8c <malloc>
 8012654:	63a0      	str	r0, [r4, #56]	; 0x38
 8012656:	b928      	cbnz	r0, 8012664 <rand+0x20>
 8012658:	4602      	mov	r2, r0
 801265a:	4b13      	ldr	r3, [pc, #76]	; (80126a8 <rand+0x64>)
 801265c:	4813      	ldr	r0, [pc, #76]	; (80126ac <rand+0x68>)
 801265e:	214e      	movs	r1, #78	; 0x4e
 8012660:	f000 f900 	bl	8012864 <__assert_func>
 8012664:	4a12      	ldr	r2, [pc, #72]	; (80126b0 <rand+0x6c>)
 8012666:	4b13      	ldr	r3, [pc, #76]	; (80126b4 <rand+0x70>)
 8012668:	e9c0 2300 	strd	r2, r3, [r0]
 801266c:	4b12      	ldr	r3, [pc, #72]	; (80126b8 <rand+0x74>)
 801266e:	6083      	str	r3, [r0, #8]
 8012670:	230b      	movs	r3, #11
 8012672:	8183      	strh	r3, [r0, #12]
 8012674:	2201      	movs	r2, #1
 8012676:	2300      	movs	r3, #0
 8012678:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801267c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801267e:	480f      	ldr	r0, [pc, #60]	; (80126bc <rand+0x78>)
 8012680:	690a      	ldr	r2, [r1, #16]
 8012682:	694b      	ldr	r3, [r1, #20]
 8012684:	4c0e      	ldr	r4, [pc, #56]	; (80126c0 <rand+0x7c>)
 8012686:	4350      	muls	r0, r2
 8012688:	fb04 0003 	mla	r0, r4, r3, r0
 801268c:	fba2 3404 	umull	r3, r4, r2, r4
 8012690:	1c5a      	adds	r2, r3, #1
 8012692:	4404      	add	r4, r0
 8012694:	f144 0000 	adc.w	r0, r4, #0
 8012698:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801269c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80126a0:	bd10      	pop	{r4, pc}
 80126a2:	bf00      	nop
 80126a4:	20000018 	.word	0x20000018
 80126a8:	08016274 	.word	0x08016274
 80126ac:	0801628b 	.word	0x0801628b
 80126b0:	abcd330e 	.word	0xabcd330e
 80126b4:	e66d1234 	.word	0xe66d1234
 80126b8:	0005deec 	.word	0x0005deec
 80126bc:	5851f42d 	.word	0x5851f42d
 80126c0:	4c957f2d 	.word	0x4c957f2d

080126c4 <cleanup_glue>:
 80126c4:	b538      	push	{r3, r4, r5, lr}
 80126c6:	460c      	mov	r4, r1
 80126c8:	6809      	ldr	r1, [r1, #0]
 80126ca:	4605      	mov	r5, r0
 80126cc:	b109      	cbz	r1, 80126d2 <cleanup_glue+0xe>
 80126ce:	f7ff fff9 	bl	80126c4 <cleanup_glue>
 80126d2:	4621      	mov	r1, r4
 80126d4:	4628      	mov	r0, r5
 80126d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126da:	f000 b9eb 	b.w	8012ab4 <_free_r>
	...

080126e0 <_reclaim_reent>:
 80126e0:	4b2c      	ldr	r3, [pc, #176]	; (8012794 <_reclaim_reent+0xb4>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4283      	cmp	r3, r0
 80126e6:	b570      	push	{r4, r5, r6, lr}
 80126e8:	4604      	mov	r4, r0
 80126ea:	d051      	beq.n	8012790 <_reclaim_reent+0xb0>
 80126ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80126ee:	b143      	cbz	r3, 8012702 <_reclaim_reent+0x22>
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d14a      	bne.n	801278c <_reclaim_reent+0xac>
 80126f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126f8:	6819      	ldr	r1, [r3, #0]
 80126fa:	b111      	cbz	r1, 8012702 <_reclaim_reent+0x22>
 80126fc:	4620      	mov	r0, r4
 80126fe:	f000 f9d9 	bl	8012ab4 <_free_r>
 8012702:	6961      	ldr	r1, [r4, #20]
 8012704:	b111      	cbz	r1, 801270c <_reclaim_reent+0x2c>
 8012706:	4620      	mov	r0, r4
 8012708:	f000 f9d4 	bl	8012ab4 <_free_r>
 801270c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801270e:	b111      	cbz	r1, 8012716 <_reclaim_reent+0x36>
 8012710:	4620      	mov	r0, r4
 8012712:	f000 f9cf 	bl	8012ab4 <_free_r>
 8012716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012718:	b111      	cbz	r1, 8012720 <_reclaim_reent+0x40>
 801271a:	4620      	mov	r0, r4
 801271c:	f000 f9ca 	bl	8012ab4 <_free_r>
 8012720:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012722:	b111      	cbz	r1, 801272a <_reclaim_reent+0x4a>
 8012724:	4620      	mov	r0, r4
 8012726:	f000 f9c5 	bl	8012ab4 <_free_r>
 801272a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801272c:	b111      	cbz	r1, 8012734 <_reclaim_reent+0x54>
 801272e:	4620      	mov	r0, r4
 8012730:	f000 f9c0 	bl	8012ab4 <_free_r>
 8012734:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012736:	b111      	cbz	r1, 801273e <_reclaim_reent+0x5e>
 8012738:	4620      	mov	r0, r4
 801273a:	f000 f9bb 	bl	8012ab4 <_free_r>
 801273e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012740:	b111      	cbz	r1, 8012748 <_reclaim_reent+0x68>
 8012742:	4620      	mov	r0, r4
 8012744:	f000 f9b6 	bl	8012ab4 <_free_r>
 8012748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801274a:	b111      	cbz	r1, 8012752 <_reclaim_reent+0x72>
 801274c:	4620      	mov	r0, r4
 801274e:	f000 f9b1 	bl	8012ab4 <_free_r>
 8012752:	69a3      	ldr	r3, [r4, #24]
 8012754:	b1e3      	cbz	r3, 8012790 <_reclaim_reent+0xb0>
 8012756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012758:	4620      	mov	r0, r4
 801275a:	4798      	blx	r3
 801275c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801275e:	b1b9      	cbz	r1, 8012790 <_reclaim_reent+0xb0>
 8012760:	4620      	mov	r0, r4
 8012762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012766:	f7ff bfad 	b.w	80126c4 <cleanup_glue>
 801276a:	5949      	ldr	r1, [r1, r5]
 801276c:	b941      	cbnz	r1, 8012780 <_reclaim_reent+0xa0>
 801276e:	3504      	adds	r5, #4
 8012770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012772:	2d80      	cmp	r5, #128	; 0x80
 8012774:	68d9      	ldr	r1, [r3, #12]
 8012776:	d1f8      	bne.n	801276a <_reclaim_reent+0x8a>
 8012778:	4620      	mov	r0, r4
 801277a:	f000 f99b 	bl	8012ab4 <_free_r>
 801277e:	e7ba      	b.n	80126f6 <_reclaim_reent+0x16>
 8012780:	680e      	ldr	r6, [r1, #0]
 8012782:	4620      	mov	r0, r4
 8012784:	f000 f996 	bl	8012ab4 <_free_r>
 8012788:	4631      	mov	r1, r6
 801278a:	e7ef      	b.n	801276c <_reclaim_reent+0x8c>
 801278c:	2500      	movs	r5, #0
 801278e:	e7ef      	b.n	8012770 <_reclaim_reent+0x90>
 8012790:	bd70      	pop	{r4, r5, r6, pc}
 8012792:	bf00      	nop
 8012794:	20000018 	.word	0x20000018

08012798 <_sbrk_r>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	4d06      	ldr	r5, [pc, #24]	; (80127b4 <_sbrk_r+0x1c>)
 801279c:	2300      	movs	r3, #0
 801279e:	4604      	mov	r4, r0
 80127a0:	4608      	mov	r0, r1
 80127a2:	602b      	str	r3, [r5, #0]
 80127a4:	f7ef f91a 	bl	80019dc <_sbrk>
 80127a8:	1c43      	adds	r3, r0, #1
 80127aa:	d102      	bne.n	80127b2 <_sbrk_r+0x1a>
 80127ac:	682b      	ldr	r3, [r5, #0]
 80127ae:	b103      	cbz	r3, 80127b2 <_sbrk_r+0x1a>
 80127b0:	6023      	str	r3, [r4, #0]
 80127b2:	bd38      	pop	{r3, r4, r5, pc}
 80127b4:	2001b628 	.word	0x2001b628

080127b8 <__sread>:
 80127b8:	b510      	push	{r4, lr}
 80127ba:	460c      	mov	r4, r1
 80127bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127c0:	f000 fcb6 	bl	8013130 <_read_r>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	bfab      	itete	ge
 80127c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80127ca:	89a3      	ldrhlt	r3, [r4, #12]
 80127cc:	181b      	addge	r3, r3, r0
 80127ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80127d2:	bfac      	ite	ge
 80127d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80127d6:	81a3      	strhlt	r3, [r4, #12]
 80127d8:	bd10      	pop	{r4, pc}

080127da <__swrite>:
 80127da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127de:	461f      	mov	r7, r3
 80127e0:	898b      	ldrh	r3, [r1, #12]
 80127e2:	05db      	lsls	r3, r3, #23
 80127e4:	4605      	mov	r5, r0
 80127e6:	460c      	mov	r4, r1
 80127e8:	4616      	mov	r6, r2
 80127ea:	d505      	bpl.n	80127f8 <__swrite+0x1e>
 80127ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127f0:	2302      	movs	r3, #2
 80127f2:	2200      	movs	r2, #0
 80127f4:	f000 f938 	bl	8012a68 <_lseek_r>
 80127f8:	89a3      	ldrh	r3, [r4, #12]
 80127fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012802:	81a3      	strh	r3, [r4, #12]
 8012804:	4632      	mov	r2, r6
 8012806:	463b      	mov	r3, r7
 8012808:	4628      	mov	r0, r5
 801280a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801280e:	f000 b817 	b.w	8012840 <_write_r>

08012812 <__sseek>:
 8012812:	b510      	push	{r4, lr}
 8012814:	460c      	mov	r4, r1
 8012816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801281a:	f000 f925 	bl	8012a68 <_lseek_r>
 801281e:	1c43      	adds	r3, r0, #1
 8012820:	89a3      	ldrh	r3, [r4, #12]
 8012822:	bf15      	itete	ne
 8012824:	6560      	strne	r0, [r4, #84]	; 0x54
 8012826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801282a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801282e:	81a3      	strheq	r3, [r4, #12]
 8012830:	bf18      	it	ne
 8012832:	81a3      	strhne	r3, [r4, #12]
 8012834:	bd10      	pop	{r4, pc}

08012836 <__sclose>:
 8012836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801283a:	f000 b831 	b.w	80128a0 <_close_r>
	...

08012840 <_write_r>:
 8012840:	b538      	push	{r3, r4, r5, lr}
 8012842:	4d07      	ldr	r5, [pc, #28]	; (8012860 <_write_r+0x20>)
 8012844:	4604      	mov	r4, r0
 8012846:	4608      	mov	r0, r1
 8012848:	4611      	mov	r1, r2
 801284a:	2200      	movs	r2, #0
 801284c:	602a      	str	r2, [r5, #0]
 801284e:	461a      	mov	r2, r3
 8012850:	f7ef f8ab 	bl	80019aa <_write>
 8012854:	1c43      	adds	r3, r0, #1
 8012856:	d102      	bne.n	801285e <_write_r+0x1e>
 8012858:	682b      	ldr	r3, [r5, #0]
 801285a:	b103      	cbz	r3, 801285e <_write_r+0x1e>
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	bd38      	pop	{r3, r4, r5, pc}
 8012860:	2001b628 	.word	0x2001b628

08012864 <__assert_func>:
 8012864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012866:	4614      	mov	r4, r2
 8012868:	461a      	mov	r2, r3
 801286a:	4b09      	ldr	r3, [pc, #36]	; (8012890 <__assert_func+0x2c>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	4605      	mov	r5, r0
 8012870:	68d8      	ldr	r0, [r3, #12]
 8012872:	b14c      	cbz	r4, 8012888 <__assert_func+0x24>
 8012874:	4b07      	ldr	r3, [pc, #28]	; (8012894 <__assert_func+0x30>)
 8012876:	9100      	str	r1, [sp, #0]
 8012878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801287c:	4906      	ldr	r1, [pc, #24]	; (8012898 <__assert_func+0x34>)
 801287e:	462b      	mov	r3, r5
 8012880:	f000 f8e0 	bl	8012a44 <fiprintf>
 8012884:	f000 fd26 	bl	80132d4 <abort>
 8012888:	4b04      	ldr	r3, [pc, #16]	; (801289c <__assert_func+0x38>)
 801288a:	461c      	mov	r4, r3
 801288c:	e7f3      	b.n	8012876 <__assert_func+0x12>
 801288e:	bf00      	nop
 8012890:	20000018 	.word	0x20000018
 8012894:	080162ea 	.word	0x080162ea
 8012898:	080162f7 	.word	0x080162f7
 801289c:	08016325 	.word	0x08016325

080128a0 <_close_r>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	4d06      	ldr	r5, [pc, #24]	; (80128bc <_close_r+0x1c>)
 80128a4:	2300      	movs	r3, #0
 80128a6:	4604      	mov	r4, r0
 80128a8:	4608      	mov	r0, r1
 80128aa:	602b      	str	r3, [r5, #0]
 80128ac:	f7ef f88a 	bl	80019c4 <_close>
 80128b0:	1c43      	adds	r3, r0, #1
 80128b2:	d102      	bne.n	80128ba <_close_r+0x1a>
 80128b4:	682b      	ldr	r3, [r5, #0]
 80128b6:	b103      	cbz	r3, 80128ba <_close_r+0x1a>
 80128b8:	6023      	str	r3, [r4, #0]
 80128ba:	bd38      	pop	{r3, r4, r5, pc}
 80128bc:	2001b628 	.word	0x2001b628

080128c0 <__sflush_r>:
 80128c0:	898a      	ldrh	r2, [r1, #12]
 80128c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128c6:	4605      	mov	r5, r0
 80128c8:	0710      	lsls	r0, r2, #28
 80128ca:	460c      	mov	r4, r1
 80128cc:	d458      	bmi.n	8012980 <__sflush_r+0xc0>
 80128ce:	684b      	ldr	r3, [r1, #4]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	dc05      	bgt.n	80128e0 <__sflush_r+0x20>
 80128d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	dc02      	bgt.n	80128e0 <__sflush_r+0x20>
 80128da:	2000      	movs	r0, #0
 80128dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128e2:	2e00      	cmp	r6, #0
 80128e4:	d0f9      	beq.n	80128da <__sflush_r+0x1a>
 80128e6:	2300      	movs	r3, #0
 80128e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128ec:	682f      	ldr	r7, [r5, #0]
 80128ee:	602b      	str	r3, [r5, #0]
 80128f0:	d032      	beq.n	8012958 <__sflush_r+0x98>
 80128f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128f4:	89a3      	ldrh	r3, [r4, #12]
 80128f6:	075a      	lsls	r2, r3, #29
 80128f8:	d505      	bpl.n	8012906 <__sflush_r+0x46>
 80128fa:	6863      	ldr	r3, [r4, #4]
 80128fc:	1ac0      	subs	r0, r0, r3
 80128fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012900:	b10b      	cbz	r3, 8012906 <__sflush_r+0x46>
 8012902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012904:	1ac0      	subs	r0, r0, r3
 8012906:	2300      	movs	r3, #0
 8012908:	4602      	mov	r2, r0
 801290a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801290c:	6a21      	ldr	r1, [r4, #32]
 801290e:	4628      	mov	r0, r5
 8012910:	47b0      	blx	r6
 8012912:	1c43      	adds	r3, r0, #1
 8012914:	89a3      	ldrh	r3, [r4, #12]
 8012916:	d106      	bne.n	8012926 <__sflush_r+0x66>
 8012918:	6829      	ldr	r1, [r5, #0]
 801291a:	291d      	cmp	r1, #29
 801291c:	d82c      	bhi.n	8012978 <__sflush_r+0xb8>
 801291e:	4a2a      	ldr	r2, [pc, #168]	; (80129c8 <__sflush_r+0x108>)
 8012920:	40ca      	lsrs	r2, r1
 8012922:	07d6      	lsls	r6, r2, #31
 8012924:	d528      	bpl.n	8012978 <__sflush_r+0xb8>
 8012926:	2200      	movs	r2, #0
 8012928:	6062      	str	r2, [r4, #4]
 801292a:	04d9      	lsls	r1, r3, #19
 801292c:	6922      	ldr	r2, [r4, #16]
 801292e:	6022      	str	r2, [r4, #0]
 8012930:	d504      	bpl.n	801293c <__sflush_r+0x7c>
 8012932:	1c42      	adds	r2, r0, #1
 8012934:	d101      	bne.n	801293a <__sflush_r+0x7a>
 8012936:	682b      	ldr	r3, [r5, #0]
 8012938:	b903      	cbnz	r3, 801293c <__sflush_r+0x7c>
 801293a:	6560      	str	r0, [r4, #84]	; 0x54
 801293c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801293e:	602f      	str	r7, [r5, #0]
 8012940:	2900      	cmp	r1, #0
 8012942:	d0ca      	beq.n	80128da <__sflush_r+0x1a>
 8012944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012948:	4299      	cmp	r1, r3
 801294a:	d002      	beq.n	8012952 <__sflush_r+0x92>
 801294c:	4628      	mov	r0, r5
 801294e:	f000 f8b1 	bl	8012ab4 <_free_r>
 8012952:	2000      	movs	r0, #0
 8012954:	6360      	str	r0, [r4, #52]	; 0x34
 8012956:	e7c1      	b.n	80128dc <__sflush_r+0x1c>
 8012958:	6a21      	ldr	r1, [r4, #32]
 801295a:	2301      	movs	r3, #1
 801295c:	4628      	mov	r0, r5
 801295e:	47b0      	blx	r6
 8012960:	1c41      	adds	r1, r0, #1
 8012962:	d1c7      	bne.n	80128f4 <__sflush_r+0x34>
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d0c4      	beq.n	80128f4 <__sflush_r+0x34>
 801296a:	2b1d      	cmp	r3, #29
 801296c:	d001      	beq.n	8012972 <__sflush_r+0xb2>
 801296e:	2b16      	cmp	r3, #22
 8012970:	d101      	bne.n	8012976 <__sflush_r+0xb6>
 8012972:	602f      	str	r7, [r5, #0]
 8012974:	e7b1      	b.n	80128da <__sflush_r+0x1a>
 8012976:	89a3      	ldrh	r3, [r4, #12]
 8012978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801297c:	81a3      	strh	r3, [r4, #12]
 801297e:	e7ad      	b.n	80128dc <__sflush_r+0x1c>
 8012980:	690f      	ldr	r7, [r1, #16]
 8012982:	2f00      	cmp	r7, #0
 8012984:	d0a9      	beq.n	80128da <__sflush_r+0x1a>
 8012986:	0793      	lsls	r3, r2, #30
 8012988:	680e      	ldr	r6, [r1, #0]
 801298a:	bf08      	it	eq
 801298c:	694b      	ldreq	r3, [r1, #20]
 801298e:	600f      	str	r7, [r1, #0]
 8012990:	bf18      	it	ne
 8012992:	2300      	movne	r3, #0
 8012994:	eba6 0807 	sub.w	r8, r6, r7
 8012998:	608b      	str	r3, [r1, #8]
 801299a:	f1b8 0f00 	cmp.w	r8, #0
 801299e:	dd9c      	ble.n	80128da <__sflush_r+0x1a>
 80129a0:	6a21      	ldr	r1, [r4, #32]
 80129a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129a4:	4643      	mov	r3, r8
 80129a6:	463a      	mov	r2, r7
 80129a8:	4628      	mov	r0, r5
 80129aa:	47b0      	blx	r6
 80129ac:	2800      	cmp	r0, #0
 80129ae:	dc06      	bgt.n	80129be <__sflush_r+0xfe>
 80129b0:	89a3      	ldrh	r3, [r4, #12]
 80129b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129b6:	81a3      	strh	r3, [r4, #12]
 80129b8:	f04f 30ff 	mov.w	r0, #4294967295
 80129bc:	e78e      	b.n	80128dc <__sflush_r+0x1c>
 80129be:	4407      	add	r7, r0
 80129c0:	eba8 0800 	sub.w	r8, r8, r0
 80129c4:	e7e9      	b.n	801299a <__sflush_r+0xda>
 80129c6:	bf00      	nop
 80129c8:	20400001 	.word	0x20400001

080129cc <_fflush_r>:
 80129cc:	b538      	push	{r3, r4, r5, lr}
 80129ce:	690b      	ldr	r3, [r1, #16]
 80129d0:	4605      	mov	r5, r0
 80129d2:	460c      	mov	r4, r1
 80129d4:	b913      	cbnz	r3, 80129dc <_fflush_r+0x10>
 80129d6:	2500      	movs	r5, #0
 80129d8:	4628      	mov	r0, r5
 80129da:	bd38      	pop	{r3, r4, r5, pc}
 80129dc:	b118      	cbz	r0, 80129e6 <_fflush_r+0x1a>
 80129de:	6983      	ldr	r3, [r0, #24]
 80129e0:	b90b      	cbnz	r3, 80129e6 <_fflush_r+0x1a>
 80129e2:	f7ff fcd3 	bl	801238c <__sinit>
 80129e6:	4b14      	ldr	r3, [pc, #80]	; (8012a38 <_fflush_r+0x6c>)
 80129e8:	429c      	cmp	r4, r3
 80129ea:	d11b      	bne.n	8012a24 <_fflush_r+0x58>
 80129ec:	686c      	ldr	r4, [r5, #4]
 80129ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0ef      	beq.n	80129d6 <_fflush_r+0xa>
 80129f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129f8:	07d0      	lsls	r0, r2, #31
 80129fa:	d404      	bmi.n	8012a06 <_fflush_r+0x3a>
 80129fc:	0599      	lsls	r1, r3, #22
 80129fe:	d402      	bmi.n	8012a06 <_fflush_r+0x3a>
 8012a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a02:	f7ff fd86 	bl	8012512 <__retarget_lock_acquire_recursive>
 8012a06:	4628      	mov	r0, r5
 8012a08:	4621      	mov	r1, r4
 8012a0a:	f7ff ff59 	bl	80128c0 <__sflush_r>
 8012a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a10:	07da      	lsls	r2, r3, #31
 8012a12:	4605      	mov	r5, r0
 8012a14:	d4e0      	bmi.n	80129d8 <_fflush_r+0xc>
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	059b      	lsls	r3, r3, #22
 8012a1a:	d4dd      	bmi.n	80129d8 <_fflush_r+0xc>
 8012a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a1e:	f7ff fd79 	bl	8012514 <__retarget_lock_release_recursive>
 8012a22:	e7d9      	b.n	80129d8 <_fflush_r+0xc>
 8012a24:	4b05      	ldr	r3, [pc, #20]	; (8012a3c <_fflush_r+0x70>)
 8012a26:	429c      	cmp	r4, r3
 8012a28:	d101      	bne.n	8012a2e <_fflush_r+0x62>
 8012a2a:	68ac      	ldr	r4, [r5, #8]
 8012a2c:	e7df      	b.n	80129ee <_fflush_r+0x22>
 8012a2e:	4b04      	ldr	r3, [pc, #16]	; (8012a40 <_fflush_r+0x74>)
 8012a30:	429c      	cmp	r4, r3
 8012a32:	bf08      	it	eq
 8012a34:	68ec      	ldreq	r4, [r5, #12]
 8012a36:	e7da      	b.n	80129ee <_fflush_r+0x22>
 8012a38:	08016230 	.word	0x08016230
 8012a3c:	08016250 	.word	0x08016250
 8012a40:	08016210 	.word	0x08016210

08012a44 <fiprintf>:
 8012a44:	b40e      	push	{r1, r2, r3}
 8012a46:	b503      	push	{r0, r1, lr}
 8012a48:	4601      	mov	r1, r0
 8012a4a:	ab03      	add	r3, sp, #12
 8012a4c:	4805      	ldr	r0, [pc, #20]	; (8012a64 <fiprintf+0x20>)
 8012a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a52:	6800      	ldr	r0, [r0, #0]
 8012a54:	9301      	str	r3, [sp, #4]
 8012a56:	f000 f8a7 	bl	8012ba8 <_vfiprintf_r>
 8012a5a:	b002      	add	sp, #8
 8012a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a60:	b003      	add	sp, #12
 8012a62:	4770      	bx	lr
 8012a64:	20000018 	.word	0x20000018

08012a68 <_lseek_r>:
 8012a68:	b538      	push	{r3, r4, r5, lr}
 8012a6a:	4d07      	ldr	r5, [pc, #28]	; (8012a88 <_lseek_r+0x20>)
 8012a6c:	4604      	mov	r4, r0
 8012a6e:	4608      	mov	r0, r1
 8012a70:	4611      	mov	r1, r2
 8012a72:	2200      	movs	r2, #0
 8012a74:	602a      	str	r2, [r5, #0]
 8012a76:	461a      	mov	r2, r3
 8012a78:	f7ee ffae 	bl	80019d8 <_lseek>
 8012a7c:	1c43      	adds	r3, r0, #1
 8012a7e:	d102      	bne.n	8012a86 <_lseek_r+0x1e>
 8012a80:	682b      	ldr	r3, [r5, #0]
 8012a82:	b103      	cbz	r3, 8012a86 <_lseek_r+0x1e>
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	bd38      	pop	{r3, r4, r5, pc}
 8012a88:	2001b628 	.word	0x2001b628

08012a8c <malloc>:
 8012a8c:	4b02      	ldr	r3, [pc, #8]	; (8012a98 <malloc+0xc>)
 8012a8e:	4601      	mov	r1, r0
 8012a90:	6818      	ldr	r0, [r3, #0]
 8012a92:	f7ff bd65 	b.w	8012560 <_malloc_r>
 8012a96:	bf00      	nop
 8012a98:	20000018 	.word	0x20000018

08012a9c <__malloc_lock>:
 8012a9c:	4801      	ldr	r0, [pc, #4]	; (8012aa4 <__malloc_lock+0x8>)
 8012a9e:	f7ff bd38 	b.w	8012512 <__retarget_lock_acquire_recursive>
 8012aa2:	bf00      	nop
 8012aa4:	2001b634 	.word	0x2001b634

08012aa8 <__malloc_unlock>:
 8012aa8:	4801      	ldr	r0, [pc, #4]	; (8012ab0 <__malloc_unlock+0x8>)
 8012aaa:	f7ff bd33 	b.w	8012514 <__retarget_lock_release_recursive>
 8012aae:	bf00      	nop
 8012ab0:	2001b634 	.word	0x2001b634

08012ab4 <_free_r>:
 8012ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ab6:	2900      	cmp	r1, #0
 8012ab8:	d048      	beq.n	8012b4c <_free_r+0x98>
 8012aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012abe:	9001      	str	r0, [sp, #4]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8012ac6:	bfb8      	it	lt
 8012ac8:	18e4      	addlt	r4, r4, r3
 8012aca:	f7ff ffe7 	bl	8012a9c <__malloc_lock>
 8012ace:	4a20      	ldr	r2, [pc, #128]	; (8012b50 <_free_r+0x9c>)
 8012ad0:	9801      	ldr	r0, [sp, #4]
 8012ad2:	6813      	ldr	r3, [r2, #0]
 8012ad4:	4615      	mov	r5, r2
 8012ad6:	b933      	cbnz	r3, 8012ae6 <_free_r+0x32>
 8012ad8:	6063      	str	r3, [r4, #4]
 8012ada:	6014      	str	r4, [r2, #0]
 8012adc:	b003      	add	sp, #12
 8012ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ae2:	f7ff bfe1 	b.w	8012aa8 <__malloc_unlock>
 8012ae6:	42a3      	cmp	r3, r4
 8012ae8:	d90b      	bls.n	8012b02 <_free_r+0x4e>
 8012aea:	6821      	ldr	r1, [r4, #0]
 8012aec:	1862      	adds	r2, r4, r1
 8012aee:	4293      	cmp	r3, r2
 8012af0:	bf04      	itt	eq
 8012af2:	681a      	ldreq	r2, [r3, #0]
 8012af4:	685b      	ldreq	r3, [r3, #4]
 8012af6:	6063      	str	r3, [r4, #4]
 8012af8:	bf04      	itt	eq
 8012afa:	1852      	addeq	r2, r2, r1
 8012afc:	6022      	streq	r2, [r4, #0]
 8012afe:	602c      	str	r4, [r5, #0]
 8012b00:	e7ec      	b.n	8012adc <_free_r+0x28>
 8012b02:	461a      	mov	r2, r3
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	b10b      	cbz	r3, 8012b0c <_free_r+0x58>
 8012b08:	42a3      	cmp	r3, r4
 8012b0a:	d9fa      	bls.n	8012b02 <_free_r+0x4e>
 8012b0c:	6811      	ldr	r1, [r2, #0]
 8012b0e:	1855      	adds	r5, r2, r1
 8012b10:	42a5      	cmp	r5, r4
 8012b12:	d10b      	bne.n	8012b2c <_free_r+0x78>
 8012b14:	6824      	ldr	r4, [r4, #0]
 8012b16:	4421      	add	r1, r4
 8012b18:	1854      	adds	r4, r2, r1
 8012b1a:	42a3      	cmp	r3, r4
 8012b1c:	6011      	str	r1, [r2, #0]
 8012b1e:	d1dd      	bne.n	8012adc <_free_r+0x28>
 8012b20:	681c      	ldr	r4, [r3, #0]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	6053      	str	r3, [r2, #4]
 8012b26:	4421      	add	r1, r4
 8012b28:	6011      	str	r1, [r2, #0]
 8012b2a:	e7d7      	b.n	8012adc <_free_r+0x28>
 8012b2c:	d902      	bls.n	8012b34 <_free_r+0x80>
 8012b2e:	230c      	movs	r3, #12
 8012b30:	6003      	str	r3, [r0, #0]
 8012b32:	e7d3      	b.n	8012adc <_free_r+0x28>
 8012b34:	6825      	ldr	r5, [r4, #0]
 8012b36:	1961      	adds	r1, r4, r5
 8012b38:	428b      	cmp	r3, r1
 8012b3a:	bf04      	itt	eq
 8012b3c:	6819      	ldreq	r1, [r3, #0]
 8012b3e:	685b      	ldreq	r3, [r3, #4]
 8012b40:	6063      	str	r3, [r4, #4]
 8012b42:	bf04      	itt	eq
 8012b44:	1949      	addeq	r1, r1, r5
 8012b46:	6021      	streq	r1, [r4, #0]
 8012b48:	6054      	str	r4, [r2, #4]
 8012b4a:	e7c7      	b.n	8012adc <_free_r+0x28>
 8012b4c:	b003      	add	sp, #12
 8012b4e:	bd30      	pop	{r4, r5, pc}
 8012b50:	20012d00 	.word	0x20012d00

08012b54 <__sfputc_r>:
 8012b54:	6893      	ldr	r3, [r2, #8]
 8012b56:	3b01      	subs	r3, #1
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	b410      	push	{r4}
 8012b5c:	6093      	str	r3, [r2, #8]
 8012b5e:	da08      	bge.n	8012b72 <__sfputc_r+0x1e>
 8012b60:	6994      	ldr	r4, [r2, #24]
 8012b62:	42a3      	cmp	r3, r4
 8012b64:	db01      	blt.n	8012b6a <__sfputc_r+0x16>
 8012b66:	290a      	cmp	r1, #10
 8012b68:	d103      	bne.n	8012b72 <__sfputc_r+0x1e>
 8012b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b6e:	f000 baf1 	b.w	8013154 <__swbuf_r>
 8012b72:	6813      	ldr	r3, [r2, #0]
 8012b74:	1c58      	adds	r0, r3, #1
 8012b76:	6010      	str	r0, [r2, #0]
 8012b78:	7019      	strb	r1, [r3, #0]
 8012b7a:	4608      	mov	r0, r1
 8012b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b80:	4770      	bx	lr

08012b82 <__sfputs_r>:
 8012b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b84:	4606      	mov	r6, r0
 8012b86:	460f      	mov	r7, r1
 8012b88:	4614      	mov	r4, r2
 8012b8a:	18d5      	adds	r5, r2, r3
 8012b8c:	42ac      	cmp	r4, r5
 8012b8e:	d101      	bne.n	8012b94 <__sfputs_r+0x12>
 8012b90:	2000      	movs	r0, #0
 8012b92:	e007      	b.n	8012ba4 <__sfputs_r+0x22>
 8012b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b98:	463a      	mov	r2, r7
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f7ff ffda 	bl	8012b54 <__sfputc_r>
 8012ba0:	1c43      	adds	r3, r0, #1
 8012ba2:	d1f3      	bne.n	8012b8c <__sfputs_r+0xa>
 8012ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ba8 <_vfiprintf_r>:
 8012ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bac:	460d      	mov	r5, r1
 8012bae:	b09d      	sub	sp, #116	; 0x74
 8012bb0:	4614      	mov	r4, r2
 8012bb2:	4698      	mov	r8, r3
 8012bb4:	4606      	mov	r6, r0
 8012bb6:	b118      	cbz	r0, 8012bc0 <_vfiprintf_r+0x18>
 8012bb8:	6983      	ldr	r3, [r0, #24]
 8012bba:	b90b      	cbnz	r3, 8012bc0 <_vfiprintf_r+0x18>
 8012bbc:	f7ff fbe6 	bl	801238c <__sinit>
 8012bc0:	4b89      	ldr	r3, [pc, #548]	; (8012de8 <_vfiprintf_r+0x240>)
 8012bc2:	429d      	cmp	r5, r3
 8012bc4:	d11b      	bne.n	8012bfe <_vfiprintf_r+0x56>
 8012bc6:	6875      	ldr	r5, [r6, #4]
 8012bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bca:	07d9      	lsls	r1, r3, #31
 8012bcc:	d405      	bmi.n	8012bda <_vfiprintf_r+0x32>
 8012bce:	89ab      	ldrh	r3, [r5, #12]
 8012bd0:	059a      	lsls	r2, r3, #22
 8012bd2:	d402      	bmi.n	8012bda <_vfiprintf_r+0x32>
 8012bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bd6:	f7ff fc9c 	bl	8012512 <__retarget_lock_acquire_recursive>
 8012bda:	89ab      	ldrh	r3, [r5, #12]
 8012bdc:	071b      	lsls	r3, r3, #28
 8012bde:	d501      	bpl.n	8012be4 <_vfiprintf_r+0x3c>
 8012be0:	692b      	ldr	r3, [r5, #16]
 8012be2:	b9eb      	cbnz	r3, 8012c20 <_vfiprintf_r+0x78>
 8012be4:	4629      	mov	r1, r5
 8012be6:	4630      	mov	r0, r6
 8012be8:	f000 fb06 	bl	80131f8 <__swsetup_r>
 8012bec:	b1c0      	cbz	r0, 8012c20 <_vfiprintf_r+0x78>
 8012bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bf0:	07dc      	lsls	r4, r3, #31
 8012bf2:	d50e      	bpl.n	8012c12 <_vfiprintf_r+0x6a>
 8012bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf8:	b01d      	add	sp, #116	; 0x74
 8012bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfe:	4b7b      	ldr	r3, [pc, #492]	; (8012dec <_vfiprintf_r+0x244>)
 8012c00:	429d      	cmp	r5, r3
 8012c02:	d101      	bne.n	8012c08 <_vfiprintf_r+0x60>
 8012c04:	68b5      	ldr	r5, [r6, #8]
 8012c06:	e7df      	b.n	8012bc8 <_vfiprintf_r+0x20>
 8012c08:	4b79      	ldr	r3, [pc, #484]	; (8012df0 <_vfiprintf_r+0x248>)
 8012c0a:	429d      	cmp	r5, r3
 8012c0c:	bf08      	it	eq
 8012c0e:	68f5      	ldreq	r5, [r6, #12]
 8012c10:	e7da      	b.n	8012bc8 <_vfiprintf_r+0x20>
 8012c12:	89ab      	ldrh	r3, [r5, #12]
 8012c14:	0598      	lsls	r0, r3, #22
 8012c16:	d4ed      	bmi.n	8012bf4 <_vfiprintf_r+0x4c>
 8012c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c1a:	f7ff fc7b 	bl	8012514 <__retarget_lock_release_recursive>
 8012c1e:	e7e9      	b.n	8012bf4 <_vfiprintf_r+0x4c>
 8012c20:	2300      	movs	r3, #0
 8012c22:	9309      	str	r3, [sp, #36]	; 0x24
 8012c24:	2320      	movs	r3, #32
 8012c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c2e:	2330      	movs	r3, #48	; 0x30
 8012c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012df4 <_vfiprintf_r+0x24c>
 8012c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c38:	f04f 0901 	mov.w	r9, #1
 8012c3c:	4623      	mov	r3, r4
 8012c3e:	469a      	mov	sl, r3
 8012c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c44:	b10a      	cbz	r2, 8012c4a <_vfiprintf_r+0xa2>
 8012c46:	2a25      	cmp	r2, #37	; 0x25
 8012c48:	d1f9      	bne.n	8012c3e <_vfiprintf_r+0x96>
 8012c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8012c4e:	d00b      	beq.n	8012c68 <_vfiprintf_r+0xc0>
 8012c50:	465b      	mov	r3, fp
 8012c52:	4622      	mov	r2, r4
 8012c54:	4629      	mov	r1, r5
 8012c56:	4630      	mov	r0, r6
 8012c58:	f7ff ff93 	bl	8012b82 <__sfputs_r>
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	f000 80aa 	beq.w	8012db6 <_vfiprintf_r+0x20e>
 8012c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c64:	445a      	add	r2, fp
 8012c66:	9209      	str	r2, [sp, #36]	; 0x24
 8012c68:	f89a 3000 	ldrb.w	r3, [sl]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	f000 80a2 	beq.w	8012db6 <_vfiprintf_r+0x20e>
 8012c72:	2300      	movs	r3, #0
 8012c74:	f04f 32ff 	mov.w	r2, #4294967295
 8012c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c7c:	f10a 0a01 	add.w	sl, sl, #1
 8012c80:	9304      	str	r3, [sp, #16]
 8012c82:	9307      	str	r3, [sp, #28]
 8012c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c88:	931a      	str	r3, [sp, #104]	; 0x68
 8012c8a:	4654      	mov	r4, sl
 8012c8c:	2205      	movs	r2, #5
 8012c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c92:	4858      	ldr	r0, [pc, #352]	; (8012df4 <_vfiprintf_r+0x24c>)
 8012c94:	f7ed fabc 	bl	8000210 <memchr>
 8012c98:	9a04      	ldr	r2, [sp, #16]
 8012c9a:	b9d8      	cbnz	r0, 8012cd4 <_vfiprintf_r+0x12c>
 8012c9c:	06d1      	lsls	r1, r2, #27
 8012c9e:	bf44      	itt	mi
 8012ca0:	2320      	movmi	r3, #32
 8012ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ca6:	0713      	lsls	r3, r2, #28
 8012ca8:	bf44      	itt	mi
 8012caa:	232b      	movmi	r3, #43	; 0x2b
 8012cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8012cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8012cb6:	d015      	beq.n	8012ce4 <_vfiprintf_r+0x13c>
 8012cb8:	9a07      	ldr	r2, [sp, #28]
 8012cba:	4654      	mov	r4, sl
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	f04f 0c0a 	mov.w	ip, #10
 8012cc2:	4621      	mov	r1, r4
 8012cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cc8:	3b30      	subs	r3, #48	; 0x30
 8012cca:	2b09      	cmp	r3, #9
 8012ccc:	d94e      	bls.n	8012d6c <_vfiprintf_r+0x1c4>
 8012cce:	b1b0      	cbz	r0, 8012cfe <_vfiprintf_r+0x156>
 8012cd0:	9207      	str	r2, [sp, #28]
 8012cd2:	e014      	b.n	8012cfe <_vfiprintf_r+0x156>
 8012cd4:	eba0 0308 	sub.w	r3, r0, r8
 8012cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	9304      	str	r3, [sp, #16]
 8012ce0:	46a2      	mov	sl, r4
 8012ce2:	e7d2      	b.n	8012c8a <_vfiprintf_r+0xe2>
 8012ce4:	9b03      	ldr	r3, [sp, #12]
 8012ce6:	1d19      	adds	r1, r3, #4
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	9103      	str	r1, [sp, #12]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	bfbb      	ittet	lt
 8012cf0:	425b      	neglt	r3, r3
 8012cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8012cf6:	9307      	strge	r3, [sp, #28]
 8012cf8:	9307      	strlt	r3, [sp, #28]
 8012cfa:	bfb8      	it	lt
 8012cfc:	9204      	strlt	r2, [sp, #16]
 8012cfe:	7823      	ldrb	r3, [r4, #0]
 8012d00:	2b2e      	cmp	r3, #46	; 0x2e
 8012d02:	d10c      	bne.n	8012d1e <_vfiprintf_r+0x176>
 8012d04:	7863      	ldrb	r3, [r4, #1]
 8012d06:	2b2a      	cmp	r3, #42	; 0x2a
 8012d08:	d135      	bne.n	8012d76 <_vfiprintf_r+0x1ce>
 8012d0a:	9b03      	ldr	r3, [sp, #12]
 8012d0c:	1d1a      	adds	r2, r3, #4
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	9203      	str	r2, [sp, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	bfb8      	it	lt
 8012d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d1a:	3402      	adds	r4, #2
 8012d1c:	9305      	str	r3, [sp, #20]
 8012d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e04 <_vfiprintf_r+0x25c>
 8012d22:	7821      	ldrb	r1, [r4, #0]
 8012d24:	2203      	movs	r2, #3
 8012d26:	4650      	mov	r0, sl
 8012d28:	f7ed fa72 	bl	8000210 <memchr>
 8012d2c:	b140      	cbz	r0, 8012d40 <_vfiprintf_r+0x198>
 8012d2e:	2340      	movs	r3, #64	; 0x40
 8012d30:	eba0 000a 	sub.w	r0, r0, sl
 8012d34:	fa03 f000 	lsl.w	r0, r3, r0
 8012d38:	9b04      	ldr	r3, [sp, #16]
 8012d3a:	4303      	orrs	r3, r0
 8012d3c:	3401      	adds	r4, #1
 8012d3e:	9304      	str	r3, [sp, #16]
 8012d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d44:	482c      	ldr	r0, [pc, #176]	; (8012df8 <_vfiprintf_r+0x250>)
 8012d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d4a:	2206      	movs	r2, #6
 8012d4c:	f7ed fa60 	bl	8000210 <memchr>
 8012d50:	2800      	cmp	r0, #0
 8012d52:	d03f      	beq.n	8012dd4 <_vfiprintf_r+0x22c>
 8012d54:	4b29      	ldr	r3, [pc, #164]	; (8012dfc <_vfiprintf_r+0x254>)
 8012d56:	bb1b      	cbnz	r3, 8012da0 <_vfiprintf_r+0x1f8>
 8012d58:	9b03      	ldr	r3, [sp, #12]
 8012d5a:	3307      	adds	r3, #7
 8012d5c:	f023 0307 	bic.w	r3, r3, #7
 8012d60:	3308      	adds	r3, #8
 8012d62:	9303      	str	r3, [sp, #12]
 8012d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d66:	443b      	add	r3, r7
 8012d68:	9309      	str	r3, [sp, #36]	; 0x24
 8012d6a:	e767      	b.n	8012c3c <_vfiprintf_r+0x94>
 8012d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d70:	460c      	mov	r4, r1
 8012d72:	2001      	movs	r0, #1
 8012d74:	e7a5      	b.n	8012cc2 <_vfiprintf_r+0x11a>
 8012d76:	2300      	movs	r3, #0
 8012d78:	3401      	adds	r4, #1
 8012d7a:	9305      	str	r3, [sp, #20]
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	f04f 0c0a 	mov.w	ip, #10
 8012d82:	4620      	mov	r0, r4
 8012d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d88:	3a30      	subs	r2, #48	; 0x30
 8012d8a:	2a09      	cmp	r2, #9
 8012d8c:	d903      	bls.n	8012d96 <_vfiprintf_r+0x1ee>
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d0c5      	beq.n	8012d1e <_vfiprintf_r+0x176>
 8012d92:	9105      	str	r1, [sp, #20]
 8012d94:	e7c3      	b.n	8012d1e <_vfiprintf_r+0x176>
 8012d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e7f0      	b.n	8012d82 <_vfiprintf_r+0x1da>
 8012da0:	ab03      	add	r3, sp, #12
 8012da2:	9300      	str	r3, [sp, #0]
 8012da4:	462a      	mov	r2, r5
 8012da6:	4b16      	ldr	r3, [pc, #88]	; (8012e00 <_vfiprintf_r+0x258>)
 8012da8:	a904      	add	r1, sp, #16
 8012daa:	4630      	mov	r0, r6
 8012dac:	f3af 8000 	nop.w
 8012db0:	4607      	mov	r7, r0
 8012db2:	1c78      	adds	r0, r7, #1
 8012db4:	d1d6      	bne.n	8012d64 <_vfiprintf_r+0x1bc>
 8012db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012db8:	07d9      	lsls	r1, r3, #31
 8012dba:	d405      	bmi.n	8012dc8 <_vfiprintf_r+0x220>
 8012dbc:	89ab      	ldrh	r3, [r5, #12]
 8012dbe:	059a      	lsls	r2, r3, #22
 8012dc0:	d402      	bmi.n	8012dc8 <_vfiprintf_r+0x220>
 8012dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dc4:	f7ff fba6 	bl	8012514 <__retarget_lock_release_recursive>
 8012dc8:	89ab      	ldrh	r3, [r5, #12]
 8012dca:	065b      	lsls	r3, r3, #25
 8012dcc:	f53f af12 	bmi.w	8012bf4 <_vfiprintf_r+0x4c>
 8012dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dd2:	e711      	b.n	8012bf8 <_vfiprintf_r+0x50>
 8012dd4:	ab03      	add	r3, sp, #12
 8012dd6:	9300      	str	r3, [sp, #0]
 8012dd8:	462a      	mov	r2, r5
 8012dda:	4b09      	ldr	r3, [pc, #36]	; (8012e00 <_vfiprintf_r+0x258>)
 8012ddc:	a904      	add	r1, sp, #16
 8012dde:	4630      	mov	r0, r6
 8012de0:	f000 f880 	bl	8012ee4 <_printf_i>
 8012de4:	e7e4      	b.n	8012db0 <_vfiprintf_r+0x208>
 8012de6:	bf00      	nop
 8012de8:	08016230 	.word	0x08016230
 8012dec:	08016250 	.word	0x08016250
 8012df0:	08016210 	.word	0x08016210
 8012df4:	08016326 	.word	0x08016326
 8012df8:	08016330 	.word	0x08016330
 8012dfc:	00000000 	.word	0x00000000
 8012e00:	08012b83 	.word	0x08012b83
 8012e04:	0801632c 	.word	0x0801632c

08012e08 <_printf_common>:
 8012e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e0c:	4616      	mov	r6, r2
 8012e0e:	4699      	mov	r9, r3
 8012e10:	688a      	ldr	r2, [r1, #8]
 8012e12:	690b      	ldr	r3, [r1, #16]
 8012e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	bfb8      	it	lt
 8012e1c:	4613      	movlt	r3, r2
 8012e1e:	6033      	str	r3, [r6, #0]
 8012e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e24:	4607      	mov	r7, r0
 8012e26:	460c      	mov	r4, r1
 8012e28:	b10a      	cbz	r2, 8012e2e <_printf_common+0x26>
 8012e2a:	3301      	adds	r3, #1
 8012e2c:	6033      	str	r3, [r6, #0]
 8012e2e:	6823      	ldr	r3, [r4, #0]
 8012e30:	0699      	lsls	r1, r3, #26
 8012e32:	bf42      	ittt	mi
 8012e34:	6833      	ldrmi	r3, [r6, #0]
 8012e36:	3302      	addmi	r3, #2
 8012e38:	6033      	strmi	r3, [r6, #0]
 8012e3a:	6825      	ldr	r5, [r4, #0]
 8012e3c:	f015 0506 	ands.w	r5, r5, #6
 8012e40:	d106      	bne.n	8012e50 <_printf_common+0x48>
 8012e42:	f104 0a19 	add.w	sl, r4, #25
 8012e46:	68e3      	ldr	r3, [r4, #12]
 8012e48:	6832      	ldr	r2, [r6, #0]
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	42ab      	cmp	r3, r5
 8012e4e:	dc26      	bgt.n	8012e9e <_printf_common+0x96>
 8012e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e54:	1e13      	subs	r3, r2, #0
 8012e56:	6822      	ldr	r2, [r4, #0]
 8012e58:	bf18      	it	ne
 8012e5a:	2301      	movne	r3, #1
 8012e5c:	0692      	lsls	r2, r2, #26
 8012e5e:	d42b      	bmi.n	8012eb8 <_printf_common+0xb0>
 8012e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e64:	4649      	mov	r1, r9
 8012e66:	4638      	mov	r0, r7
 8012e68:	47c0      	blx	r8
 8012e6a:	3001      	adds	r0, #1
 8012e6c:	d01e      	beq.n	8012eac <_printf_common+0xa4>
 8012e6e:	6823      	ldr	r3, [r4, #0]
 8012e70:	68e5      	ldr	r5, [r4, #12]
 8012e72:	6832      	ldr	r2, [r6, #0]
 8012e74:	f003 0306 	and.w	r3, r3, #6
 8012e78:	2b04      	cmp	r3, #4
 8012e7a:	bf08      	it	eq
 8012e7c:	1aad      	subeq	r5, r5, r2
 8012e7e:	68a3      	ldr	r3, [r4, #8]
 8012e80:	6922      	ldr	r2, [r4, #16]
 8012e82:	bf0c      	ite	eq
 8012e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e88:	2500      	movne	r5, #0
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	bfc4      	itt	gt
 8012e8e:	1a9b      	subgt	r3, r3, r2
 8012e90:	18ed      	addgt	r5, r5, r3
 8012e92:	2600      	movs	r6, #0
 8012e94:	341a      	adds	r4, #26
 8012e96:	42b5      	cmp	r5, r6
 8012e98:	d11a      	bne.n	8012ed0 <_printf_common+0xc8>
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	e008      	b.n	8012eb0 <_printf_common+0xa8>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	4652      	mov	r2, sl
 8012ea2:	4649      	mov	r1, r9
 8012ea4:	4638      	mov	r0, r7
 8012ea6:	47c0      	blx	r8
 8012ea8:	3001      	adds	r0, #1
 8012eaa:	d103      	bne.n	8012eb4 <_printf_common+0xac>
 8012eac:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb4:	3501      	adds	r5, #1
 8012eb6:	e7c6      	b.n	8012e46 <_printf_common+0x3e>
 8012eb8:	18e1      	adds	r1, r4, r3
 8012eba:	1c5a      	adds	r2, r3, #1
 8012ebc:	2030      	movs	r0, #48	; 0x30
 8012ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ec2:	4422      	add	r2, r4
 8012ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ecc:	3302      	adds	r3, #2
 8012ece:	e7c7      	b.n	8012e60 <_printf_common+0x58>
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	4622      	mov	r2, r4
 8012ed4:	4649      	mov	r1, r9
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	47c0      	blx	r8
 8012eda:	3001      	adds	r0, #1
 8012edc:	d0e6      	beq.n	8012eac <_printf_common+0xa4>
 8012ede:	3601      	adds	r6, #1
 8012ee0:	e7d9      	b.n	8012e96 <_printf_common+0x8e>
	...

08012ee4 <_printf_i>:
 8012ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ee8:	460c      	mov	r4, r1
 8012eea:	4691      	mov	r9, r2
 8012eec:	7e27      	ldrb	r7, [r4, #24]
 8012eee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012ef0:	2f78      	cmp	r7, #120	; 0x78
 8012ef2:	4680      	mov	r8, r0
 8012ef4:	469a      	mov	sl, r3
 8012ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012efa:	d807      	bhi.n	8012f0c <_printf_i+0x28>
 8012efc:	2f62      	cmp	r7, #98	; 0x62
 8012efe:	d80a      	bhi.n	8012f16 <_printf_i+0x32>
 8012f00:	2f00      	cmp	r7, #0
 8012f02:	f000 80d8 	beq.w	80130b6 <_printf_i+0x1d2>
 8012f06:	2f58      	cmp	r7, #88	; 0x58
 8012f08:	f000 80a3 	beq.w	8013052 <_printf_i+0x16e>
 8012f0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f14:	e03a      	b.n	8012f8c <_printf_i+0xa8>
 8012f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f1a:	2b15      	cmp	r3, #21
 8012f1c:	d8f6      	bhi.n	8012f0c <_printf_i+0x28>
 8012f1e:	a001      	add	r0, pc, #4	; (adr r0, 8012f24 <_printf_i+0x40>)
 8012f20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012f24:	08012f7d 	.word	0x08012f7d
 8012f28:	08012f91 	.word	0x08012f91
 8012f2c:	08012f0d 	.word	0x08012f0d
 8012f30:	08012f0d 	.word	0x08012f0d
 8012f34:	08012f0d 	.word	0x08012f0d
 8012f38:	08012f0d 	.word	0x08012f0d
 8012f3c:	08012f91 	.word	0x08012f91
 8012f40:	08012f0d 	.word	0x08012f0d
 8012f44:	08012f0d 	.word	0x08012f0d
 8012f48:	08012f0d 	.word	0x08012f0d
 8012f4c:	08012f0d 	.word	0x08012f0d
 8012f50:	0801309d 	.word	0x0801309d
 8012f54:	08012fc1 	.word	0x08012fc1
 8012f58:	0801307f 	.word	0x0801307f
 8012f5c:	08012f0d 	.word	0x08012f0d
 8012f60:	08012f0d 	.word	0x08012f0d
 8012f64:	080130bf 	.word	0x080130bf
 8012f68:	08012f0d 	.word	0x08012f0d
 8012f6c:	08012fc1 	.word	0x08012fc1
 8012f70:	08012f0d 	.word	0x08012f0d
 8012f74:	08012f0d 	.word	0x08012f0d
 8012f78:	08013087 	.word	0x08013087
 8012f7c:	680b      	ldr	r3, [r1, #0]
 8012f7e:	1d1a      	adds	r2, r3, #4
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	600a      	str	r2, [r1, #0]
 8012f84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e0a3      	b.n	80130d8 <_printf_i+0x1f4>
 8012f90:	6825      	ldr	r5, [r4, #0]
 8012f92:	6808      	ldr	r0, [r1, #0]
 8012f94:	062e      	lsls	r6, r5, #24
 8012f96:	f100 0304 	add.w	r3, r0, #4
 8012f9a:	d50a      	bpl.n	8012fb2 <_printf_i+0xce>
 8012f9c:	6805      	ldr	r5, [r0, #0]
 8012f9e:	600b      	str	r3, [r1, #0]
 8012fa0:	2d00      	cmp	r5, #0
 8012fa2:	da03      	bge.n	8012fac <_printf_i+0xc8>
 8012fa4:	232d      	movs	r3, #45	; 0x2d
 8012fa6:	426d      	negs	r5, r5
 8012fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fac:	485e      	ldr	r0, [pc, #376]	; (8013128 <_printf_i+0x244>)
 8012fae:	230a      	movs	r3, #10
 8012fb0:	e019      	b.n	8012fe6 <_printf_i+0x102>
 8012fb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012fb6:	6805      	ldr	r5, [r0, #0]
 8012fb8:	600b      	str	r3, [r1, #0]
 8012fba:	bf18      	it	ne
 8012fbc:	b22d      	sxthne	r5, r5
 8012fbe:	e7ef      	b.n	8012fa0 <_printf_i+0xbc>
 8012fc0:	680b      	ldr	r3, [r1, #0]
 8012fc2:	6825      	ldr	r5, [r4, #0]
 8012fc4:	1d18      	adds	r0, r3, #4
 8012fc6:	6008      	str	r0, [r1, #0]
 8012fc8:	0628      	lsls	r0, r5, #24
 8012fca:	d501      	bpl.n	8012fd0 <_printf_i+0xec>
 8012fcc:	681d      	ldr	r5, [r3, #0]
 8012fce:	e002      	b.n	8012fd6 <_printf_i+0xf2>
 8012fd0:	0669      	lsls	r1, r5, #25
 8012fd2:	d5fb      	bpl.n	8012fcc <_printf_i+0xe8>
 8012fd4:	881d      	ldrh	r5, [r3, #0]
 8012fd6:	4854      	ldr	r0, [pc, #336]	; (8013128 <_printf_i+0x244>)
 8012fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8012fda:	bf0c      	ite	eq
 8012fdc:	2308      	moveq	r3, #8
 8012fde:	230a      	movne	r3, #10
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fe6:	6866      	ldr	r6, [r4, #4]
 8012fe8:	60a6      	str	r6, [r4, #8]
 8012fea:	2e00      	cmp	r6, #0
 8012fec:	bfa2      	ittt	ge
 8012fee:	6821      	ldrge	r1, [r4, #0]
 8012ff0:	f021 0104 	bicge.w	r1, r1, #4
 8012ff4:	6021      	strge	r1, [r4, #0]
 8012ff6:	b90d      	cbnz	r5, 8012ffc <_printf_i+0x118>
 8012ff8:	2e00      	cmp	r6, #0
 8012ffa:	d04d      	beq.n	8013098 <_printf_i+0x1b4>
 8012ffc:	4616      	mov	r6, r2
 8012ffe:	fbb5 f1f3 	udiv	r1, r5, r3
 8013002:	fb03 5711 	mls	r7, r3, r1, r5
 8013006:	5dc7      	ldrb	r7, [r0, r7]
 8013008:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801300c:	462f      	mov	r7, r5
 801300e:	42bb      	cmp	r3, r7
 8013010:	460d      	mov	r5, r1
 8013012:	d9f4      	bls.n	8012ffe <_printf_i+0x11a>
 8013014:	2b08      	cmp	r3, #8
 8013016:	d10b      	bne.n	8013030 <_printf_i+0x14c>
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	07df      	lsls	r7, r3, #31
 801301c:	d508      	bpl.n	8013030 <_printf_i+0x14c>
 801301e:	6923      	ldr	r3, [r4, #16]
 8013020:	6861      	ldr	r1, [r4, #4]
 8013022:	4299      	cmp	r1, r3
 8013024:	bfde      	ittt	le
 8013026:	2330      	movle	r3, #48	; 0x30
 8013028:	f806 3c01 	strble.w	r3, [r6, #-1]
 801302c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013030:	1b92      	subs	r2, r2, r6
 8013032:	6122      	str	r2, [r4, #16]
 8013034:	f8cd a000 	str.w	sl, [sp]
 8013038:	464b      	mov	r3, r9
 801303a:	aa03      	add	r2, sp, #12
 801303c:	4621      	mov	r1, r4
 801303e:	4640      	mov	r0, r8
 8013040:	f7ff fee2 	bl	8012e08 <_printf_common>
 8013044:	3001      	adds	r0, #1
 8013046:	d14c      	bne.n	80130e2 <_printf_i+0x1fe>
 8013048:	f04f 30ff 	mov.w	r0, #4294967295
 801304c:	b004      	add	sp, #16
 801304e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013052:	4835      	ldr	r0, [pc, #212]	; (8013128 <_printf_i+0x244>)
 8013054:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013058:	6823      	ldr	r3, [r4, #0]
 801305a:	680e      	ldr	r6, [r1, #0]
 801305c:	061f      	lsls	r7, r3, #24
 801305e:	f856 5b04 	ldr.w	r5, [r6], #4
 8013062:	600e      	str	r6, [r1, #0]
 8013064:	d514      	bpl.n	8013090 <_printf_i+0x1ac>
 8013066:	07d9      	lsls	r1, r3, #31
 8013068:	bf44      	itt	mi
 801306a:	f043 0320 	orrmi.w	r3, r3, #32
 801306e:	6023      	strmi	r3, [r4, #0]
 8013070:	b91d      	cbnz	r5, 801307a <_printf_i+0x196>
 8013072:	6823      	ldr	r3, [r4, #0]
 8013074:	f023 0320 	bic.w	r3, r3, #32
 8013078:	6023      	str	r3, [r4, #0]
 801307a:	2310      	movs	r3, #16
 801307c:	e7b0      	b.n	8012fe0 <_printf_i+0xfc>
 801307e:	6823      	ldr	r3, [r4, #0]
 8013080:	f043 0320 	orr.w	r3, r3, #32
 8013084:	6023      	str	r3, [r4, #0]
 8013086:	2378      	movs	r3, #120	; 0x78
 8013088:	4828      	ldr	r0, [pc, #160]	; (801312c <_printf_i+0x248>)
 801308a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801308e:	e7e3      	b.n	8013058 <_printf_i+0x174>
 8013090:	065e      	lsls	r6, r3, #25
 8013092:	bf48      	it	mi
 8013094:	b2ad      	uxthmi	r5, r5
 8013096:	e7e6      	b.n	8013066 <_printf_i+0x182>
 8013098:	4616      	mov	r6, r2
 801309a:	e7bb      	b.n	8013014 <_printf_i+0x130>
 801309c:	680b      	ldr	r3, [r1, #0]
 801309e:	6826      	ldr	r6, [r4, #0]
 80130a0:	6960      	ldr	r0, [r4, #20]
 80130a2:	1d1d      	adds	r5, r3, #4
 80130a4:	600d      	str	r5, [r1, #0]
 80130a6:	0635      	lsls	r5, r6, #24
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	d501      	bpl.n	80130b0 <_printf_i+0x1cc>
 80130ac:	6018      	str	r0, [r3, #0]
 80130ae:	e002      	b.n	80130b6 <_printf_i+0x1d2>
 80130b0:	0671      	lsls	r1, r6, #25
 80130b2:	d5fb      	bpl.n	80130ac <_printf_i+0x1c8>
 80130b4:	8018      	strh	r0, [r3, #0]
 80130b6:	2300      	movs	r3, #0
 80130b8:	6123      	str	r3, [r4, #16]
 80130ba:	4616      	mov	r6, r2
 80130bc:	e7ba      	b.n	8013034 <_printf_i+0x150>
 80130be:	680b      	ldr	r3, [r1, #0]
 80130c0:	1d1a      	adds	r2, r3, #4
 80130c2:	600a      	str	r2, [r1, #0]
 80130c4:	681e      	ldr	r6, [r3, #0]
 80130c6:	6862      	ldr	r2, [r4, #4]
 80130c8:	2100      	movs	r1, #0
 80130ca:	4630      	mov	r0, r6
 80130cc:	f7ed f8a0 	bl	8000210 <memchr>
 80130d0:	b108      	cbz	r0, 80130d6 <_printf_i+0x1f2>
 80130d2:	1b80      	subs	r0, r0, r6
 80130d4:	6060      	str	r0, [r4, #4]
 80130d6:	6863      	ldr	r3, [r4, #4]
 80130d8:	6123      	str	r3, [r4, #16]
 80130da:	2300      	movs	r3, #0
 80130dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130e0:	e7a8      	b.n	8013034 <_printf_i+0x150>
 80130e2:	6923      	ldr	r3, [r4, #16]
 80130e4:	4632      	mov	r2, r6
 80130e6:	4649      	mov	r1, r9
 80130e8:	4640      	mov	r0, r8
 80130ea:	47d0      	blx	sl
 80130ec:	3001      	adds	r0, #1
 80130ee:	d0ab      	beq.n	8013048 <_printf_i+0x164>
 80130f0:	6823      	ldr	r3, [r4, #0]
 80130f2:	079b      	lsls	r3, r3, #30
 80130f4:	d413      	bmi.n	801311e <_printf_i+0x23a>
 80130f6:	68e0      	ldr	r0, [r4, #12]
 80130f8:	9b03      	ldr	r3, [sp, #12]
 80130fa:	4298      	cmp	r0, r3
 80130fc:	bfb8      	it	lt
 80130fe:	4618      	movlt	r0, r3
 8013100:	e7a4      	b.n	801304c <_printf_i+0x168>
 8013102:	2301      	movs	r3, #1
 8013104:	4632      	mov	r2, r6
 8013106:	4649      	mov	r1, r9
 8013108:	4640      	mov	r0, r8
 801310a:	47d0      	blx	sl
 801310c:	3001      	adds	r0, #1
 801310e:	d09b      	beq.n	8013048 <_printf_i+0x164>
 8013110:	3501      	adds	r5, #1
 8013112:	68e3      	ldr	r3, [r4, #12]
 8013114:	9903      	ldr	r1, [sp, #12]
 8013116:	1a5b      	subs	r3, r3, r1
 8013118:	42ab      	cmp	r3, r5
 801311a:	dcf2      	bgt.n	8013102 <_printf_i+0x21e>
 801311c:	e7eb      	b.n	80130f6 <_printf_i+0x212>
 801311e:	2500      	movs	r5, #0
 8013120:	f104 0619 	add.w	r6, r4, #25
 8013124:	e7f5      	b.n	8013112 <_printf_i+0x22e>
 8013126:	bf00      	nop
 8013128:	08016337 	.word	0x08016337
 801312c:	08016348 	.word	0x08016348

08013130 <_read_r>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4d07      	ldr	r5, [pc, #28]	; (8013150 <_read_r+0x20>)
 8013134:	4604      	mov	r4, r0
 8013136:	4608      	mov	r0, r1
 8013138:	4611      	mov	r1, r2
 801313a:	2200      	movs	r2, #0
 801313c:	602a      	str	r2, [r5, #0]
 801313e:	461a      	mov	r2, r3
 8013140:	f7ee fc26 	bl	8001990 <_read>
 8013144:	1c43      	adds	r3, r0, #1
 8013146:	d102      	bne.n	801314e <_read_r+0x1e>
 8013148:	682b      	ldr	r3, [r5, #0]
 801314a:	b103      	cbz	r3, 801314e <_read_r+0x1e>
 801314c:	6023      	str	r3, [r4, #0]
 801314e:	bd38      	pop	{r3, r4, r5, pc}
 8013150:	2001b628 	.word	0x2001b628

08013154 <__swbuf_r>:
 8013154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013156:	460e      	mov	r6, r1
 8013158:	4614      	mov	r4, r2
 801315a:	4605      	mov	r5, r0
 801315c:	b118      	cbz	r0, 8013166 <__swbuf_r+0x12>
 801315e:	6983      	ldr	r3, [r0, #24]
 8013160:	b90b      	cbnz	r3, 8013166 <__swbuf_r+0x12>
 8013162:	f7ff f913 	bl	801238c <__sinit>
 8013166:	4b21      	ldr	r3, [pc, #132]	; (80131ec <__swbuf_r+0x98>)
 8013168:	429c      	cmp	r4, r3
 801316a:	d12b      	bne.n	80131c4 <__swbuf_r+0x70>
 801316c:	686c      	ldr	r4, [r5, #4]
 801316e:	69a3      	ldr	r3, [r4, #24]
 8013170:	60a3      	str	r3, [r4, #8]
 8013172:	89a3      	ldrh	r3, [r4, #12]
 8013174:	071a      	lsls	r2, r3, #28
 8013176:	d52f      	bpl.n	80131d8 <__swbuf_r+0x84>
 8013178:	6923      	ldr	r3, [r4, #16]
 801317a:	b36b      	cbz	r3, 80131d8 <__swbuf_r+0x84>
 801317c:	6923      	ldr	r3, [r4, #16]
 801317e:	6820      	ldr	r0, [r4, #0]
 8013180:	1ac0      	subs	r0, r0, r3
 8013182:	6963      	ldr	r3, [r4, #20]
 8013184:	b2f6      	uxtb	r6, r6
 8013186:	4283      	cmp	r3, r0
 8013188:	4637      	mov	r7, r6
 801318a:	dc04      	bgt.n	8013196 <__swbuf_r+0x42>
 801318c:	4621      	mov	r1, r4
 801318e:	4628      	mov	r0, r5
 8013190:	f7ff fc1c 	bl	80129cc <_fflush_r>
 8013194:	bb30      	cbnz	r0, 80131e4 <__swbuf_r+0x90>
 8013196:	68a3      	ldr	r3, [r4, #8]
 8013198:	3b01      	subs	r3, #1
 801319a:	60a3      	str	r3, [r4, #8]
 801319c:	6823      	ldr	r3, [r4, #0]
 801319e:	1c5a      	adds	r2, r3, #1
 80131a0:	6022      	str	r2, [r4, #0]
 80131a2:	701e      	strb	r6, [r3, #0]
 80131a4:	6963      	ldr	r3, [r4, #20]
 80131a6:	3001      	adds	r0, #1
 80131a8:	4283      	cmp	r3, r0
 80131aa:	d004      	beq.n	80131b6 <__swbuf_r+0x62>
 80131ac:	89a3      	ldrh	r3, [r4, #12]
 80131ae:	07db      	lsls	r3, r3, #31
 80131b0:	d506      	bpl.n	80131c0 <__swbuf_r+0x6c>
 80131b2:	2e0a      	cmp	r6, #10
 80131b4:	d104      	bne.n	80131c0 <__swbuf_r+0x6c>
 80131b6:	4621      	mov	r1, r4
 80131b8:	4628      	mov	r0, r5
 80131ba:	f7ff fc07 	bl	80129cc <_fflush_r>
 80131be:	b988      	cbnz	r0, 80131e4 <__swbuf_r+0x90>
 80131c0:	4638      	mov	r0, r7
 80131c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c4:	4b0a      	ldr	r3, [pc, #40]	; (80131f0 <__swbuf_r+0x9c>)
 80131c6:	429c      	cmp	r4, r3
 80131c8:	d101      	bne.n	80131ce <__swbuf_r+0x7a>
 80131ca:	68ac      	ldr	r4, [r5, #8]
 80131cc:	e7cf      	b.n	801316e <__swbuf_r+0x1a>
 80131ce:	4b09      	ldr	r3, [pc, #36]	; (80131f4 <__swbuf_r+0xa0>)
 80131d0:	429c      	cmp	r4, r3
 80131d2:	bf08      	it	eq
 80131d4:	68ec      	ldreq	r4, [r5, #12]
 80131d6:	e7ca      	b.n	801316e <__swbuf_r+0x1a>
 80131d8:	4621      	mov	r1, r4
 80131da:	4628      	mov	r0, r5
 80131dc:	f000 f80c 	bl	80131f8 <__swsetup_r>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d0cb      	beq.n	801317c <__swbuf_r+0x28>
 80131e4:	f04f 37ff 	mov.w	r7, #4294967295
 80131e8:	e7ea      	b.n	80131c0 <__swbuf_r+0x6c>
 80131ea:	bf00      	nop
 80131ec:	08016230 	.word	0x08016230
 80131f0:	08016250 	.word	0x08016250
 80131f4:	08016210 	.word	0x08016210

080131f8 <__swsetup_r>:
 80131f8:	4b32      	ldr	r3, [pc, #200]	; (80132c4 <__swsetup_r+0xcc>)
 80131fa:	b570      	push	{r4, r5, r6, lr}
 80131fc:	681d      	ldr	r5, [r3, #0]
 80131fe:	4606      	mov	r6, r0
 8013200:	460c      	mov	r4, r1
 8013202:	b125      	cbz	r5, 801320e <__swsetup_r+0x16>
 8013204:	69ab      	ldr	r3, [r5, #24]
 8013206:	b913      	cbnz	r3, 801320e <__swsetup_r+0x16>
 8013208:	4628      	mov	r0, r5
 801320a:	f7ff f8bf 	bl	801238c <__sinit>
 801320e:	4b2e      	ldr	r3, [pc, #184]	; (80132c8 <__swsetup_r+0xd0>)
 8013210:	429c      	cmp	r4, r3
 8013212:	d10f      	bne.n	8013234 <__swsetup_r+0x3c>
 8013214:	686c      	ldr	r4, [r5, #4]
 8013216:	89a3      	ldrh	r3, [r4, #12]
 8013218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801321c:	0719      	lsls	r1, r3, #28
 801321e:	d42c      	bmi.n	801327a <__swsetup_r+0x82>
 8013220:	06dd      	lsls	r5, r3, #27
 8013222:	d411      	bmi.n	8013248 <__swsetup_r+0x50>
 8013224:	2309      	movs	r3, #9
 8013226:	6033      	str	r3, [r6, #0]
 8013228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801322c:	81a3      	strh	r3, [r4, #12]
 801322e:	f04f 30ff 	mov.w	r0, #4294967295
 8013232:	e03e      	b.n	80132b2 <__swsetup_r+0xba>
 8013234:	4b25      	ldr	r3, [pc, #148]	; (80132cc <__swsetup_r+0xd4>)
 8013236:	429c      	cmp	r4, r3
 8013238:	d101      	bne.n	801323e <__swsetup_r+0x46>
 801323a:	68ac      	ldr	r4, [r5, #8]
 801323c:	e7eb      	b.n	8013216 <__swsetup_r+0x1e>
 801323e:	4b24      	ldr	r3, [pc, #144]	; (80132d0 <__swsetup_r+0xd8>)
 8013240:	429c      	cmp	r4, r3
 8013242:	bf08      	it	eq
 8013244:	68ec      	ldreq	r4, [r5, #12]
 8013246:	e7e6      	b.n	8013216 <__swsetup_r+0x1e>
 8013248:	0758      	lsls	r0, r3, #29
 801324a:	d512      	bpl.n	8013272 <__swsetup_r+0x7a>
 801324c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801324e:	b141      	cbz	r1, 8013262 <__swsetup_r+0x6a>
 8013250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013254:	4299      	cmp	r1, r3
 8013256:	d002      	beq.n	801325e <__swsetup_r+0x66>
 8013258:	4630      	mov	r0, r6
 801325a:	f7ff fc2b 	bl	8012ab4 <_free_r>
 801325e:	2300      	movs	r3, #0
 8013260:	6363      	str	r3, [r4, #52]	; 0x34
 8013262:	89a3      	ldrh	r3, [r4, #12]
 8013264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013268:	81a3      	strh	r3, [r4, #12]
 801326a:	2300      	movs	r3, #0
 801326c:	6063      	str	r3, [r4, #4]
 801326e:	6923      	ldr	r3, [r4, #16]
 8013270:	6023      	str	r3, [r4, #0]
 8013272:	89a3      	ldrh	r3, [r4, #12]
 8013274:	f043 0308 	orr.w	r3, r3, #8
 8013278:	81a3      	strh	r3, [r4, #12]
 801327a:	6923      	ldr	r3, [r4, #16]
 801327c:	b94b      	cbnz	r3, 8013292 <__swsetup_r+0x9a>
 801327e:	89a3      	ldrh	r3, [r4, #12]
 8013280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013288:	d003      	beq.n	8013292 <__swsetup_r+0x9a>
 801328a:	4621      	mov	r1, r4
 801328c:	4630      	mov	r0, r6
 801328e:	f000 f84d 	bl	801332c <__smakebuf_r>
 8013292:	89a0      	ldrh	r0, [r4, #12]
 8013294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013298:	f010 0301 	ands.w	r3, r0, #1
 801329c:	d00a      	beq.n	80132b4 <__swsetup_r+0xbc>
 801329e:	2300      	movs	r3, #0
 80132a0:	60a3      	str	r3, [r4, #8]
 80132a2:	6963      	ldr	r3, [r4, #20]
 80132a4:	425b      	negs	r3, r3
 80132a6:	61a3      	str	r3, [r4, #24]
 80132a8:	6923      	ldr	r3, [r4, #16]
 80132aa:	b943      	cbnz	r3, 80132be <__swsetup_r+0xc6>
 80132ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132b0:	d1ba      	bne.n	8013228 <__swsetup_r+0x30>
 80132b2:	bd70      	pop	{r4, r5, r6, pc}
 80132b4:	0781      	lsls	r1, r0, #30
 80132b6:	bf58      	it	pl
 80132b8:	6963      	ldrpl	r3, [r4, #20]
 80132ba:	60a3      	str	r3, [r4, #8]
 80132bc:	e7f4      	b.n	80132a8 <__swsetup_r+0xb0>
 80132be:	2000      	movs	r0, #0
 80132c0:	e7f7      	b.n	80132b2 <__swsetup_r+0xba>
 80132c2:	bf00      	nop
 80132c4:	20000018 	.word	0x20000018
 80132c8:	08016230 	.word	0x08016230
 80132cc:	08016250 	.word	0x08016250
 80132d0:	08016210 	.word	0x08016210

080132d4 <abort>:
 80132d4:	b508      	push	{r3, lr}
 80132d6:	2006      	movs	r0, #6
 80132d8:	f000 f890 	bl	80133fc <raise>
 80132dc:	2001      	movs	r0, #1
 80132de:	f7ee fb51 	bl	8001984 <_exit>

080132e2 <__swhatbuf_r>:
 80132e2:	b570      	push	{r4, r5, r6, lr}
 80132e4:	460e      	mov	r6, r1
 80132e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132ea:	2900      	cmp	r1, #0
 80132ec:	b096      	sub	sp, #88	; 0x58
 80132ee:	4614      	mov	r4, r2
 80132f0:	461d      	mov	r5, r3
 80132f2:	da07      	bge.n	8013304 <__swhatbuf_r+0x22>
 80132f4:	2300      	movs	r3, #0
 80132f6:	602b      	str	r3, [r5, #0]
 80132f8:	89b3      	ldrh	r3, [r6, #12]
 80132fa:	061a      	lsls	r2, r3, #24
 80132fc:	d410      	bmi.n	8013320 <__swhatbuf_r+0x3e>
 80132fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013302:	e00e      	b.n	8013322 <__swhatbuf_r+0x40>
 8013304:	466a      	mov	r2, sp
 8013306:	f000 f895 	bl	8013434 <_fstat_r>
 801330a:	2800      	cmp	r0, #0
 801330c:	dbf2      	blt.n	80132f4 <__swhatbuf_r+0x12>
 801330e:	9a01      	ldr	r2, [sp, #4]
 8013310:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013314:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013318:	425a      	negs	r2, r3
 801331a:	415a      	adcs	r2, r3
 801331c:	602a      	str	r2, [r5, #0]
 801331e:	e7ee      	b.n	80132fe <__swhatbuf_r+0x1c>
 8013320:	2340      	movs	r3, #64	; 0x40
 8013322:	2000      	movs	r0, #0
 8013324:	6023      	str	r3, [r4, #0]
 8013326:	b016      	add	sp, #88	; 0x58
 8013328:	bd70      	pop	{r4, r5, r6, pc}
	...

0801332c <__smakebuf_r>:
 801332c:	898b      	ldrh	r3, [r1, #12]
 801332e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013330:	079d      	lsls	r5, r3, #30
 8013332:	4606      	mov	r6, r0
 8013334:	460c      	mov	r4, r1
 8013336:	d507      	bpl.n	8013348 <__smakebuf_r+0x1c>
 8013338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801333c:	6023      	str	r3, [r4, #0]
 801333e:	6123      	str	r3, [r4, #16]
 8013340:	2301      	movs	r3, #1
 8013342:	6163      	str	r3, [r4, #20]
 8013344:	b002      	add	sp, #8
 8013346:	bd70      	pop	{r4, r5, r6, pc}
 8013348:	ab01      	add	r3, sp, #4
 801334a:	466a      	mov	r2, sp
 801334c:	f7ff ffc9 	bl	80132e2 <__swhatbuf_r>
 8013350:	9900      	ldr	r1, [sp, #0]
 8013352:	4605      	mov	r5, r0
 8013354:	4630      	mov	r0, r6
 8013356:	f7ff f903 	bl	8012560 <_malloc_r>
 801335a:	b948      	cbnz	r0, 8013370 <__smakebuf_r+0x44>
 801335c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013360:	059a      	lsls	r2, r3, #22
 8013362:	d4ef      	bmi.n	8013344 <__smakebuf_r+0x18>
 8013364:	f023 0303 	bic.w	r3, r3, #3
 8013368:	f043 0302 	orr.w	r3, r3, #2
 801336c:	81a3      	strh	r3, [r4, #12]
 801336e:	e7e3      	b.n	8013338 <__smakebuf_r+0xc>
 8013370:	4b0d      	ldr	r3, [pc, #52]	; (80133a8 <__smakebuf_r+0x7c>)
 8013372:	62b3      	str	r3, [r6, #40]	; 0x28
 8013374:	89a3      	ldrh	r3, [r4, #12]
 8013376:	6020      	str	r0, [r4, #0]
 8013378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801337c:	81a3      	strh	r3, [r4, #12]
 801337e:	9b00      	ldr	r3, [sp, #0]
 8013380:	6163      	str	r3, [r4, #20]
 8013382:	9b01      	ldr	r3, [sp, #4]
 8013384:	6120      	str	r0, [r4, #16]
 8013386:	b15b      	cbz	r3, 80133a0 <__smakebuf_r+0x74>
 8013388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801338c:	4630      	mov	r0, r6
 801338e:	f000 f863 	bl	8013458 <_isatty_r>
 8013392:	b128      	cbz	r0, 80133a0 <__smakebuf_r+0x74>
 8013394:	89a3      	ldrh	r3, [r4, #12]
 8013396:	f023 0303 	bic.w	r3, r3, #3
 801339a:	f043 0301 	orr.w	r3, r3, #1
 801339e:	81a3      	strh	r3, [r4, #12]
 80133a0:	89a0      	ldrh	r0, [r4, #12]
 80133a2:	4305      	orrs	r5, r0
 80133a4:	81a5      	strh	r5, [r4, #12]
 80133a6:	e7cd      	b.n	8013344 <__smakebuf_r+0x18>
 80133a8:	08012325 	.word	0x08012325

080133ac <_raise_r>:
 80133ac:	291f      	cmp	r1, #31
 80133ae:	b538      	push	{r3, r4, r5, lr}
 80133b0:	4604      	mov	r4, r0
 80133b2:	460d      	mov	r5, r1
 80133b4:	d904      	bls.n	80133c0 <_raise_r+0x14>
 80133b6:	2316      	movs	r3, #22
 80133b8:	6003      	str	r3, [r0, #0]
 80133ba:	f04f 30ff 	mov.w	r0, #4294967295
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80133c2:	b112      	cbz	r2, 80133ca <_raise_r+0x1e>
 80133c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133c8:	b94b      	cbnz	r3, 80133de <_raise_r+0x32>
 80133ca:	4620      	mov	r0, r4
 80133cc:	f000 f830 	bl	8013430 <_getpid_r>
 80133d0:	462a      	mov	r2, r5
 80133d2:	4601      	mov	r1, r0
 80133d4:	4620      	mov	r0, r4
 80133d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133da:	f000 b817 	b.w	801340c <_kill_r>
 80133de:	2b01      	cmp	r3, #1
 80133e0:	d00a      	beq.n	80133f8 <_raise_r+0x4c>
 80133e2:	1c59      	adds	r1, r3, #1
 80133e4:	d103      	bne.n	80133ee <_raise_r+0x42>
 80133e6:	2316      	movs	r3, #22
 80133e8:	6003      	str	r3, [r0, #0]
 80133ea:	2001      	movs	r0, #1
 80133ec:	e7e7      	b.n	80133be <_raise_r+0x12>
 80133ee:	2400      	movs	r4, #0
 80133f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133f4:	4628      	mov	r0, r5
 80133f6:	4798      	blx	r3
 80133f8:	2000      	movs	r0, #0
 80133fa:	e7e0      	b.n	80133be <_raise_r+0x12>

080133fc <raise>:
 80133fc:	4b02      	ldr	r3, [pc, #8]	; (8013408 <raise+0xc>)
 80133fe:	4601      	mov	r1, r0
 8013400:	6818      	ldr	r0, [r3, #0]
 8013402:	f7ff bfd3 	b.w	80133ac <_raise_r>
 8013406:	bf00      	nop
 8013408:	20000018 	.word	0x20000018

0801340c <_kill_r>:
 801340c:	b538      	push	{r3, r4, r5, lr}
 801340e:	4d07      	ldr	r5, [pc, #28]	; (801342c <_kill_r+0x20>)
 8013410:	2300      	movs	r3, #0
 8013412:	4604      	mov	r4, r0
 8013414:	4608      	mov	r0, r1
 8013416:	4611      	mov	r1, r2
 8013418:	602b      	str	r3, [r5, #0]
 801341a:	f7ee faab 	bl	8001974 <_kill>
 801341e:	1c43      	adds	r3, r0, #1
 8013420:	d102      	bne.n	8013428 <_kill_r+0x1c>
 8013422:	682b      	ldr	r3, [r5, #0]
 8013424:	b103      	cbz	r3, 8013428 <_kill_r+0x1c>
 8013426:	6023      	str	r3, [r4, #0]
 8013428:	bd38      	pop	{r3, r4, r5, pc}
 801342a:	bf00      	nop
 801342c:	2001b628 	.word	0x2001b628

08013430 <_getpid_r>:
 8013430:	f7ee ba9e 	b.w	8001970 <_getpid>

08013434 <_fstat_r>:
 8013434:	b538      	push	{r3, r4, r5, lr}
 8013436:	4d07      	ldr	r5, [pc, #28]	; (8013454 <_fstat_r+0x20>)
 8013438:	2300      	movs	r3, #0
 801343a:	4604      	mov	r4, r0
 801343c:	4608      	mov	r0, r1
 801343e:	4611      	mov	r1, r2
 8013440:	602b      	str	r3, [r5, #0]
 8013442:	f7ee fac2 	bl	80019ca <_fstat>
 8013446:	1c43      	adds	r3, r0, #1
 8013448:	d102      	bne.n	8013450 <_fstat_r+0x1c>
 801344a:	682b      	ldr	r3, [r5, #0]
 801344c:	b103      	cbz	r3, 8013450 <_fstat_r+0x1c>
 801344e:	6023      	str	r3, [r4, #0]
 8013450:	bd38      	pop	{r3, r4, r5, pc}
 8013452:	bf00      	nop
 8013454:	2001b628 	.word	0x2001b628

08013458 <_isatty_r>:
 8013458:	b538      	push	{r3, r4, r5, lr}
 801345a:	4d06      	ldr	r5, [pc, #24]	; (8013474 <_isatty_r+0x1c>)
 801345c:	2300      	movs	r3, #0
 801345e:	4604      	mov	r4, r0
 8013460:	4608      	mov	r0, r1
 8013462:	602b      	str	r3, [r5, #0]
 8013464:	f7ee fab6 	bl	80019d4 <_isatty>
 8013468:	1c43      	adds	r3, r0, #1
 801346a:	d102      	bne.n	8013472 <_isatty_r+0x1a>
 801346c:	682b      	ldr	r3, [r5, #0]
 801346e:	b103      	cbz	r3, 8013472 <_isatty_r+0x1a>
 8013470:	6023      	str	r3, [r4, #0]
 8013472:	bd38      	pop	{r3, r4, r5, pc}
 8013474:	2001b628 	.word	0x2001b628

08013478 <_init>:
 8013478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347a:	bf00      	nop
 801347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801347e:	bc08      	pop	{r3}
 8013480:	469e      	mov	lr, r3
 8013482:	4770      	bx	lr

08013484 <_fini>:
 8013484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013486:	bf00      	nop
 8013488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801348a:	bc08      	pop	{r3}
 801348c:	469e      	mov	lr, r3
 801348e:	4770      	bx	lr
