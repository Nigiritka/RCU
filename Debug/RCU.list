
RCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003818  08019028  08019028  00029028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c840  0801c840  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801c840  0801c840  0002c840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c848  0801c848  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c848  0801c848  0002c848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c84c  0801c84c  0002c84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801c850  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7d8  20000134  0801c984  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000d90c  0801c984  0003d90c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d66f  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000895e  00000000  00000000  0007d7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024b0  00000000  00000000  00086138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002340  00000000  00000000  000885e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012785  00000000  00000000  0008a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003aff7  00000000  00000000  0009d0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011989d  00000000  00000000  000d80a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f1941  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fe0  00000000  00000000  001f1994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000134 	.word	0x20000134
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019010 	.word	0x08019010

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000138 	.word	0x20000138
 800020c:	08019010 	.word	0x08019010

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <SCB_EnableICache+0x48>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SCB_EnableDCache+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <SCB_EnableDCache+0x84>)
 800060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800060e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0b5b      	lsrs	r3, r3, #13
 8000614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000618:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000622:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800062c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	4911      	ldr	r1, [pc, #68]	; (8000678 <SCB_EnableDCache+0x84>)
 8000634:	4313      	orrs	r3, r2
 8000636:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1ef      	bne.n	8000624 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	60fa      	str	r2, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e5      	bne.n	800061a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x84>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x84>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000680:	f7ff ff92 	bl	80005a8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000684:	f7ff ffb6 	bl	80005f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f001 f902 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f824 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f928 	bl	80008e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000694:	f000 f8c4 	bl	8000820 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000698:	f000 f8f2 	bl	8000880 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800069c:	f000 f88a 	bl	80007b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  tcpecho_init();
 80006a0:	f001 f8b8 	bl	8001814 <tcpecho_init>
  //tcp_echoserver_init();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006a4:	f006 f8ee 	bl	8006884 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <main+0x4c>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0x50>)
 80006ae:	f006 f97b 	bl	80069a8 <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <main+0x54>)
 80006b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b8:	f006 f918 	bl	80068ec <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <main+0x58>)
 80006be:	f005 ffb1 	bl	8006624 <ethernetif_input>
	  sys_check_timeouts();
 80006c2:	f014 fbef 	bl	8014ea4 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006c6:	e7f9      	b.n	80006bc <main+0x40>
 80006c8:	0801c590 	.word	0x0801c590
 80006cc:	080011a9 	.word	0x080011a9
 80006d0:	20004cbc 	.word	0x20004cbc
 80006d4:	20004e94 	.word	0x20004e94

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f017 fcfd 	bl	80180e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <SystemClock_Config+0xd4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <SystemClock_Config+0xd4>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemClock_Config+0xd4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <SystemClock_Config+0xd8>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xd8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000740:	2319      	movs	r3, #25
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000744:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074a:	2302      	movs	r3, #2
 800074c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fe34 	bl	80033c4 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000762:	f000 fd45 	bl	80011f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000766:	f002 fddd 	bl	8003324 <HAL_PWREx_EnableOverDrive>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000770:	f000 fd3e 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2107      	movs	r1, #7
 8000792:	4618      	mov	r0, r3
 8000794:	f003 f8ba 	bl	800390c <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800079e:	f000 fd27 	bl	80011f0 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_TIM6_Init+0x64>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_TIM6_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_TIM6_Init+0x64>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_TIM6_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_TIM6_Init+0x64>)
 80007d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80007dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_TIM6_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_TIM6_Init+0x64>)
 80007e6:	f003 fe89 	bl	80044fc <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007f0:	f000 fcfe 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_TIM6_Init+0x64>)
 8000802:	f004 f933 	bl	8004a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 fcf0 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20004d44 	.word	0x20004d44
 800081c:	40001000 	.word	0x40001000

08000820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_USART1_UART_Init+0x54>)
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_USART1_UART_Init+0x5c>)
 800082e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_USART1_UART_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000844:	220c      	movs	r2, #12
 8000846:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_USART1_UART_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART1_UART_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000862:	f004 f9af 	bl	8004bc4 <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800086c:	f000 fcc0 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20004cc0 	.word	0x20004cc0
 8000878:	40011000 	.word	0x40011000
 800087c:	001e8480 	.word	0x001e8480

08000880 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_USART6_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 2962900;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <MX_USART6_UART_Init+0x60>)
 800088e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 80008a4:	220c      	movs	r2, #12
 80008a6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 80008b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008b4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART6_UART_Init+0x58>)
 80008c4:	f004 f97e 	bl	8004bc4 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 fc8f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20004d90 	.word	0x20004d90
 80008dc:	40011400 	.word	0x40011400
 80008e0:	002d35d4 	.word	0x002d35d4

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b090      	sub	sp, #64	; 0x40
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	4bad      	ldr	r3, [pc, #692]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4aac      	ldr	r2, [pc, #688]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4baa      	ldr	r3, [pc, #680]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000910:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4ba7      	ldr	r3, [pc, #668]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4aa6      	ldr	r2, [pc, #664]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4ba4      	ldr	r3, [pc, #656]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4ba1      	ldr	r3, [pc, #644]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4aa0      	ldr	r2, [pc, #640]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b9e      	ldr	r3, [pc, #632]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b9b      	ldr	r3, [pc, #620]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a9a      	ldr	r2, [pc, #616]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b98      	ldr	r3, [pc, #608]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b95      	ldr	r3, [pc, #596]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a94      	ldr	r2, [pc, #592]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b92      	ldr	r3, [pc, #584]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b8f      	ldr	r3, [pc, #572]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a8e      	ldr	r2, [pc, #568]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b8c      	ldr	r3, [pc, #560]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800098a:	4b89      	ldr	r3, [pc, #548]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a88      	ldr	r2, [pc, #544]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b86      	ldr	r3, [pc, #536]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009a2:	4b83      	ldr	r3, [pc, #524]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a82      	ldr	r2, [pc, #520]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b80      	ldr	r3, [pc, #512]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009ba:	4b7d      	ldr	r3, [pc, #500]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a7c      	ldr	r2, [pc, #496]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b7a      	ldr	r3, [pc, #488]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a76      	ldr	r2, [pc, #472]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b74      	ldr	r3, [pc, #464]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a70      	ldr	r2, [pc, #448]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <MX_GPIO_Init+0x2cc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2120      	movs	r1, #32
 8000a06:	486b      	ldr	r0, [pc, #428]	; (8000bb4 <MX_GPIO_Init+0x2d0>)
 8000a08:	f002 fc40 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD1_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f241 010e 	movw	r1, #4110	; 0x100e
 8000a12:	4869      	ldr	r0, [pc, #420]	; (8000bb8 <MX_GPIO_Init+0x2d4>)
 8000a14:	f002 fc3a 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	4867      	ldr	r0, [pc, #412]	; (8000bbc <MX_GPIO_Init+0x2d8>)
 8000a1e:	f002 fc35 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a28:	4865      	ldr	r0, [pc, #404]	; (8000bc0 <MX_GPIO_Init+0x2dc>)
 8000a2a:	f002 fc2f 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	21c8      	movs	r1, #200	; 0xc8
 8000a32:	4864      	ldr	r0, [pc, #400]	; (8000bc4 <MX_GPIO_Init+0x2e0>)
 8000a34:	f002 fc2a 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a48:	230e      	movs	r3, #14
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a50:	4619      	mov	r1, r3
 8000a52:	485d      	ldr	r0, [pc, #372]	; (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000a54:	f002 fa6e 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4857      	ldr	r0, [pc, #348]	; (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000a6c:	f002 fa62 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000a70:	2304      	movs	r3, #4
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a80:	2309      	movs	r3, #9
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	484f      	ldr	r0, [pc, #316]	; (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000a8c:	f002 fa52 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4846      	ldr	r0, [pc, #280]	; (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000aae:	f002 fa41 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000ab2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000acc:	4619      	mov	r1, r3
 8000ace:	483f      	ldr	r0, [pc, #252]	; (8000bcc <MX_GPIO_Init+0x2e8>)
 8000ad0:	f002 fa30 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000ad4:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4836      	ldr	r0, [pc, #216]	; (8000bcc <MX_GPIO_Init+0x2e8>)
 8000af2:	f002 fa1f 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000af6:	2310      	movs	r3, #16
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b06:	2302      	movs	r3, #2
 8000b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x2e8>)
 8000b12:	f002 fa0f 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000b26:	2308      	movs	r3, #8
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4820      	ldr	r0, [pc, #128]	; (8000bb4 <MX_GPIO_Init+0x2d0>)
 8000b32:	f002 f9ff 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000b36:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0x2ec>)
 8000b54:	f002 f9ee 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b72:	4619      	mov	r1, r3
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <MX_GPIO_Init+0x2f0>)
 8000b76:	f002 f9dd 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000b7a:	2360      	movs	r3, #96	; 0x60
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b8a:	230d      	movs	r3, #13
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000b96:	f002 f9cd 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000baa:	230a      	movs	r3, #10
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bae:	e013      	b.n	8000bd8 <MX_GPIO_Init+0x2f4>
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	40022800 	.word	0x40022800
 8000bc0:	40021c00 	.word	0x40021c00
 8000bc4:	40021800 	.word	0x40021800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48bc      	ldr	r0, [pc, #752]	; (8000ed0 <MX_GPIO_Init+0x5ec>)
 8000be0:	f002 f9a8 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000be4:	f248 1333 	movw	r3, #33075	; 0x8133
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	48b4      	ldr	r0, [pc, #720]	; (8000ed4 <MX_GPIO_Init+0x5f0>)
 8000c02:	f002 f997 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000c06:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c18:	230e      	movs	r3, #14
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	48ad      	ldr	r0, [pc, #692]	; (8000ed8 <MX_GPIO_Init+0x5f4>)
 8000c24:	f002 f986 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	48a6      	ldr	r0, [pc, #664]	; (8000ed8 <MX_GPIO_Init+0x5f4>)
 8000c3e:	f002 f979 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c42:	2340      	movs	r3, #64	; 0x40
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c54:	4619      	mov	r1, r3
 8000c56:	48a1      	ldr	r0, [pc, #644]	; (8000edc <MX_GPIO_Init+0x5f8>)
 8000c58:	f002 f96c 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c5c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	4898      	ldr	r0, [pc, #608]	; (8000edc <MX_GPIO_Init+0x5f8>)
 8000c7a:	f002 f95b 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000c7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c90:	230a      	movs	r3, #10
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4891      	ldr	r0, [pc, #580]	; (8000ee0 <MX_GPIO_Init+0x5fc>)
 8000c9c:	f002 f94a 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000ca0:	23f0      	movs	r3, #240	; 0xf0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	488a      	ldr	r0, [pc, #552]	; (8000ee4 <MX_GPIO_Init+0x600>)
 8000cbc:	f002 f93a 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000cc0:	23f7      	movs	r3, #247	; 0xf7
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cd0:	230e      	movs	r3, #14
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4883      	ldr	r0, [pc, #524]	; (8000ee8 <MX_GPIO_Init+0x604>)
 8000cdc:	f002 f92a 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cf2:	2309      	movs	r3, #9
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4875      	ldr	r0, [pc, #468]	; (8000ed4 <MX_GPIO_Init+0x5f0>)
 8000cfe:	f002 f919 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d14:	230a      	movs	r3, #10
 8000d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	486d      	ldr	r0, [pc, #436]	; (8000ed4 <MX_GPIO_Init+0x5f0>)
 8000d20:	f002 f908 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d24:	2320      	movs	r3, #32
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4868      	ldr	r0, [pc, #416]	; (8000edc <MX_GPIO_Init+0x5f8>)
 8000d3c:	f002 f8fa 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000d40:	2308      	movs	r3, #8
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d50:	230d      	movs	r3, #13
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4860      	ldr	r0, [pc, #384]	; (8000edc <MX_GPIO_Init+0x5f8>)
 8000d5c:	f002 f8ea 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000d60:	f241 030c 	movw	r3, #4108	; 0x100c
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <MX_GPIO_Init+0x600>)
 8000d7a:	f002 f8db 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	4856      	ldr	r0, [pc, #344]	; (8000eec <MX_GPIO_Init+0x608>)
 8000d94:	f002 f8ce 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000d98:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000daa:	230c      	movs	r3, #12
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	484e      	ldr	r0, [pc, #312]	; (8000ef0 <MX_GPIO_Init+0x60c>)
 8000db6:	f002 f8bd 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000dba:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dcc:	230e      	movs	r3, #14
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4843      	ldr	r0, [pc, #268]	; (8000ee4 <MX_GPIO_Init+0x600>)
 8000dd8:	f002 f8ac 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	483d      	ldr	r0, [pc, #244]	; (8000ee8 <MX_GPIO_Init+0x604>)
 8000df4:	f002 f89e 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e0a:	230d      	movs	r3, #13
 8000e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	482f      	ldr	r0, [pc, #188]	; (8000ed4 <MX_GPIO_Init+0x5f0>)
 8000e16:	f002 f88d 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	482b      	ldr	r0, [pc, #172]	; (8000edc <MX_GPIO_Init+0x5f8>)
 8000e2e:	f002 f881 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000e32:	2304      	movs	r3, #4
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e42:	230c      	movs	r3, #12
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4823      	ldr	r0, [pc, #140]	; (8000edc <MX_GPIO_Init+0x5f8>)
 8000e4e:	f002 f871 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000e52:	f248 0304 	movw	r3, #32772	; 0x8004
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <MX_GPIO_Init+0x610>)
 8000e68:	f002 f864 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <MX_GPIO_Init+0x600>)
 8000e84:	f002 f856 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_GPIO_Init+0x610>)
 8000ea2:	f002 f847 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000ea6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb8:	230d      	movs	r3, #13
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <MX_GPIO_Init+0x610>)
 8000ec4:	f002 f836 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e013      	b.n	8000ef8 <MX_GPIO_Init+0x614>
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40021800 	.word	0x40021800
 8000ed8:	40022400 	.word	0x40022400
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40022800 	.word	0x40022800
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40021400 	.word	0x40021400
 8000ef4:	40021c00 	.word	0x40021c00
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f02:	2302      	movs	r3, #2
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4890      	ldr	r0, [pc, #576]	; (8001150 <MX_GPIO_Init+0x86c>)
 8000f0e:	f002 f811 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	4889      	ldr	r0, [pc, #548]	; (8001150 <MX_GPIO_Init+0x86c>)
 8000f2a:	f002 f803 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4882      	ldr	r0, [pc, #520]	; (8001154 <MX_GPIO_Init+0x870>)
 8000f4c:	f001 fff2 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f64:	4619      	mov	r1, r3
 8000f66:	487a      	ldr	r0, [pc, #488]	; (8001150 <MX_GPIO_Init+0x86c>)
 8000f68:	f001 ffe4 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	4619      	mov	r1, r3
 8000f86:	4874      	ldr	r0, [pc, #464]	; (8001158 <MX_GPIO_Init+0x874>)
 8000f88:	f001 ffd4 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000f8c:	2328      	movs	r3, #40	; 0x28
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	486c      	ldr	r0, [pc, #432]	; (8001158 <MX_GPIO_Init+0x874>)
 8000fa8:	f001 ffc4 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000fac:	23c8      	movs	r3, #200	; 0xc8
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4866      	ldr	r0, [pc, #408]	; (800115c <MX_GPIO_Init+0x878>)
 8000fc4:	f001 ffb6 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000fc8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4860      	ldr	r0, [pc, #384]	; (8001160 <MX_GPIO_Init+0x87c>)
 8000fde:	f001 ffa9 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4859      	ldr	r0, [pc, #356]	; (8001164 <MX_GPIO_Init+0x880>)
 8000ffe:	f001 ff99 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001002:	2305      	movs	r3, #5
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001012:	230a      	movs	r3, #10
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	4619      	mov	r1, r3
 800101c:	4851      	ldr	r0, [pc, #324]	; (8001164 <MX_GPIO_Init+0x880>)
 800101e:	f001 ff89 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001022:	2304      	movs	r3, #4
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001032:	2309      	movs	r3, #9
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	484a      	ldr	r0, [pc, #296]	; (8001168 <MX_GPIO_Init+0x884>)
 800103e:	f001 ff79 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001042:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001054:	2309      	movs	r3, #9
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105c:	4619      	mov	r1, r3
 800105e:	4843      	ldr	r0, [pc, #268]	; (800116c <MX_GPIO_Init+0x888>)
 8001060:	f001 ff68 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001064:	2304      	movs	r3, #4
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	4839      	ldr	r0, [pc, #228]	; (800115c <MX_GPIO_Init+0x878>)
 8001078:	f001 ff5c 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800107c:	2301      	movs	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001080:	2303      	movs	r3, #3
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108c:	4619      	mov	r1, r3
 800108e:	4831      	ldr	r0, [pc, #196]	; (8001154 <MX_GPIO_Init+0x870>)
 8001090:	f001 ff50 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001094:	2350      	movs	r3, #80	; 0x50
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010a4:	230d      	movs	r3, #13
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4829      	ldr	r0, [pc, #164]	; (8001154 <MX_GPIO_Init+0x870>)
 80010b0:	f001 ff40 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80010b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ba:	2312      	movs	r3, #18
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010c6:	2304      	movs	r3, #4
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ce:	4619      	mov	r1, r3
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <MX_GPIO_Init+0x874>)
 80010d2:	f001 ff2f 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010d6:	2328      	movs	r3, #40	; 0x28
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010e6:	230a      	movs	r3, #10
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ee:	4619      	mov	r1, r3
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_GPIO_Init+0x870>)
 80010f2:	f001 ff1f 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80010f6:	2340      	movs	r3, #64	; 0x40
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001106:	2309      	movs	r3, #9
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <MX_GPIO_Init+0x874>)
 8001112:	f001 ff0f 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001116:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001128:	2305      	movs	r3, #5
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_GPIO_Init+0x884>)
 8001134:	f001 fefe 	bl	8002f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2105      	movs	r1, #5
 800113c:	2028      	movs	r0, #40	; 0x28
 800113e:	f000 fcb9 	bl	8001ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001142:	2028      	movs	r0, #40	; 0x28
 8001144:	f000 fcd2 	bl	8001aec <HAL_NVIC_EnableIRQ>

}
 8001148:	bf00      	nop
 800114a:	3740      	adds	r7, #64	; 0x40
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40022000 	.word	0x40022000
 8001154:	40020000 	.word	0x40020000
 8001158:	40021c00 	.word	0x40021c00
 800115c:	40021800 	.word	0x40021800
 8001160:	40021400 	.word	0x40021400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020400 	.word	0x40020400
 800116c:	40020c00 	.word	0x40020c00

08001170 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit_IT(&huart6, TxData, 8);
 800117a:	2208      	movs	r2, #8
 800117c:	4903      	ldr	r1, [pc, #12]	; (800118c <HAL_GPIO_EXTI_Callback+0x1c>)
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <HAL_GPIO_EXTI_Callback+0x20>)
 8001180:	f003 fd6e 	bl	8004c60 <HAL_UART_Transmit_IT>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20004d90 	.word	0x20004d90

08001194 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

	//HAL_UART_Receive_IT(&huart6, RxData, 15);
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80011b0:	f004 fdfe 	bl	8005db0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80011b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b8:	f005 fc9c 	bl	8006af4 <osDelay>
    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80011bc:	2102      	movs	r1, #2
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <StartDefaultTask+0x20>)
 80011c0:	f002 f87d 	bl	80032be <HAL_GPIO_TogglePin>
    osDelay(1000);
 80011c4:	e7f6      	b.n	80011b4 <StartDefaultTask+0xc>
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011de:	f000 fb6d 	bl	80018bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40002000 	.word	0x40002000

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_MspInit+0x4c>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	210f      	movs	r1, #15
 8001236:	f06f 0001 	mvn.w	r0, #1
 800123a:	f000 fc3b 	bl	8001ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_TIM_Base_MspInit+0x44>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d113      	bne.n	8001286 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_TIM_Base_MspInit+0x48>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_TIM_Base_MspInit+0x48>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_TIM_Base_MspInit+0x48>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2105      	movs	r1, #5
 800127a:	2036      	movs	r0, #54	; 0x36
 800127c:	f000 fc1a 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001280:	2036      	movs	r0, #54	; 0x36
 8001282:	f000 fc33 	bl	8001aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40001000 	.word	0x40001000
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ae      	sub	sp, #184	; 0xb8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	2284      	movs	r2, #132	; 0x84
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f016 ff14 	bl	80180e6 <memset>
  if(huart->Instance==USART1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a5b      	ldr	r2, [pc, #364]	; (8001430 <HAL_UART_MspInit+0x198>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d165      	bne.n	8001394 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012c8:	2340      	movs	r3, #64	; 0x40
 80012ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012cc:	2300      	movs	r3, #0
 80012ce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fd21 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e0:	f7ff ff86 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6453      	str	r3, [r2, #68]	; 0x44
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b4d      	ldr	r3, [pc, #308]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a4c      	ldr	r2, [pc, #304]	; (8001434 <HAL_UART_MspInit+0x19c>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_UART_MspInit+0x19c>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_UART_MspInit+0x19c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a46      	ldr	r2, [pc, #280]	; (8001434 <HAL_UART_MspInit+0x19c>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_UART_MspInit+0x19c>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001344:	2307      	movs	r3, #7
 8001346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800134e:	4619      	mov	r1, r3
 8001350:	4839      	ldr	r0, [pc, #228]	; (8001438 <HAL_UART_MspInit+0x1a0>)
 8001352:	f001 fdef 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001370:	2307      	movs	r3, #7
 8001372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800137a:	4619      	mov	r1, r3
 800137c:	482f      	ldr	r0, [pc, #188]	; (800143c <HAL_UART_MspInit+0x1a4>)
 800137e:	f001 fdd9 	bl	8002f34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2105      	movs	r1, #5
 8001386:	2025      	movs	r0, #37	; 0x25
 8001388:	f000 fb94 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800138c:	2025      	movs	r0, #37	; 0x25
 800138e:	f000 fbad 	bl	8001aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001392:	e048      	b.n	8001426 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a29      	ldr	r2, [pc, #164]	; (8001440 <HAL_UART_MspInit+0x1a8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d143      	bne.n	8001426 <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800139e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80013a4:	2300      	movs	r3, #0
 80013a6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fcb5 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_UART_MspInit+0x124>
      Error_Handler();
 80013b8:	f7ff ff1a 	bl	80011f0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80013c2:	f043 0320 	orr.w	r3, r3, #32
 80013c6:	6453      	str	r3, [r2, #68]	; 0x44
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_UART_MspInit+0x19c>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80013ec:	23c0      	movs	r3, #192	; 0xc0
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001404:	2308      	movs	r3, #8
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_UART_MspInit+0x1ac>)
 8001412:	f001 fd8f 	bl	8002f34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2105      	movs	r1, #5
 800141a:	2047      	movs	r0, #71	; 0x47
 800141c:	f000 fb4a 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001420:	2047      	movs	r0, #71	; 0x47
 8001422:	f000 fb63 	bl	8001aec <HAL_NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	37b8      	adds	r7, #184	; 0xb8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40011000 	.word	0x40011000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020400 	.word	0x40020400
 800143c:	40020000 	.word	0x40020000
 8001440:	40011400 	.word	0x40011400
 8001444:	40020800 	.word	0x40020800

08001448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	202d      	movs	r0, #45	; 0x2d
 800145e:	f000 fb29 	bl	8001ab4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001462:	202d      	movs	r0, #45	; 0x2d
 8001464:	f000 fb42 	bl	8001aec <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_InitTick+0xa0>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <HAL_InitTick+0xa0>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_InitTick+0xa0>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001480:	f107 0210 	add.w	r2, r7, #16
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fc14 	bl	8003cb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001490:	f002 fbea 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 8001494:	4603      	mov	r3, r0
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_InitTick+0xa4>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	3b01      	subs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_InitTick+0xa8>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <HAL_InitTick+0xac>)
 80014ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_InitTick+0xa8>)
 80014b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_InitTick+0xa8>)
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_InitTick+0xa8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_InitTick+0xa8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <HAL_InitTick+0xa8>)
 80014ca:	f003 f817 	bl	80044fc <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d104      	bne.n	80014de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <HAL_InitTick+0xa8>)
 80014d6:	f003 f869 	bl	80045ac <HAL_TIM_Base_Start_IT>
 80014da:	4603      	mov	r3, r0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	20004e14 	.word	0x20004e14
 80014f4:	40002000 	.word	0x40002000

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler+0x4>

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <USART1_IRQHandler+0x10>)
 800152a:	f003 fc07 	bl	8004d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20004cc0 	.word	0x20004cc0

08001538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDMMC_D3_Pin);
 800153c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001540:	f001 fed8 	bl	80032f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800154e:	f003 f8a5 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20004e14 	.word	0x20004e14

0800155c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM6_DAC_IRQHandler+0x10>)
 8001562:	f003 f89b 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20004d44 	.word	0x20004d44

08001570 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <ETH_IRQHandler+0x10>)
 8001576:	f000 ff3b 	bl	80023f0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200067ac 	.word	0x200067ac

08001584 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <USART6_IRQHandler+0x10>)
 800158a:	f003 fbd7 	bl	8004d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20004d90 	.word	0x20004d90

08001598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_kill>:

int _kill(int pid, int sig)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <_kill+0x20>)
 80015b4:	2216      	movs	r2, #22
 80015b6:	601a      	str	r2, [r3, #0]
	return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	2000d8f8 	.word	0x2000d8f8

080015cc <_exit>:

void _exit (int status)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ffe5 	bl	80015a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015de:	e7fe      	b.n	80015de <_exit+0x12>

080015e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015f2:	f3af 8000 	nop.w
 80015f6:	4601      	mov	r1, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_read+0x12>
	}

return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e009      	b.n	8001640 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf1      	blt.n	800162c <_write+0x12>
	}
	return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_close>:

int _close(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
	return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	605a      	str	r2, [r3, #4]
	return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d205      	bcs.n	80016f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <_sbrk+0x6c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	20050000 	.word	0x20050000
 800171c:	00004000 	.word	0x00004000
 8001720:	20000150 	.word	0x20000150
 8001724:	2000d910 	.word	0x2000d910
 8001728:	2000d8f8 	.word	0x2000d8f8

0800172c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <tcpecho_thread>:
char TxBuf [] = "Hello Hello!sdlkfjskljdf;klsjdflksajdflkjsadfkjsa;lkdjf;lsadkjf;lsakdjf;lkdsajf;sadj"
		";lskdjf;lsakjdf;laksdjf;lksadjfl;ksadjfl;ksadjf;lksadjfsad;lkfjsad;kljfsd;kljfsad;lkjf";

/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2010      	movs	r0, #16
 800175e:	f009 f8e3 	bl	800a928 <netconn_new_with_proto_and_callback>
 8001762:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d04d      	beq.n	8001806 <tcpecho_thread+0xb6>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 800176a:	2207      	movs	r2, #7
 800176c:	2100      	movs	r1, #0
 800176e:	69f8      	ldr	r0, [r7, #28]
 8001770:	f009 f994 	bl	800aa9c <netconn_bind>
 8001774:	4603      	mov	r3, r0
 8001776:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8001778:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d13e      	bne.n	80017fe <tcpecho_thread+0xae>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8001780:	21ff      	movs	r1, #255	; 0xff
 8001782:	69f8      	ldr	r0, [r7, #28]
 8001784:	f009 f9c2 	bl	800ab0c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	69f8      	ldr	r0, [r7, #28]
 8001790:	f009 f9e8 	bl	800ab64 <netconn_accept>
 8001794:	4603      	mov	r3, r0
 8001796:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8001798:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f3      	bne.n	8001788 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80017a0:	e01a      	b.n	80017d8 <tcpecho_thread+0x88>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f107 020a 	add.w	r2, r7, #10
 80017a8:	f107 010c 	add.w	r1, r7, #12
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00b f977 	bl	800caa0 <netbuf_data>
              //netconn_write(newconn, data, len, NETCONN_COPY);
              netconn_write(newconn, TxBuf, sizeof(TxBuf), NETCONN_COPY);
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2301      	movs	r3, #1
 80017ba:	22ab      	movs	r2, #171	; 0xab
 80017bc:	4914      	ldr	r1, [pc, #80]	; (8001810 <tcpecho_thread+0xc0>)
 80017be:	f009 fc53 	bl	800b068 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00b f9b5 	bl	800cb34 <netbuf_next>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dae8      	bge.n	80017a2 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00b f944 	bl	800ca60 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f107 0210 	add.w	r2, r7, #16
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f009 fbc7 	bl	800af74 <netconn_recv>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0da      	beq.n	80017a2 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f009 fd3c 	bl	800b26c <netconn_close>
          netconn_delete(newconn);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f009 f934 	bl	800aa64 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 80017fc:	e7c4      	b.n	8001788 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4618      	mov	r0, r3
 8001802:	f009 f92f 	bl	800aa64 <netconn_delete>
    }
  }
}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000000c 	.word	0x2000000c

08001814 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 800181a:	2304      	movs	r3, #4
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	2200      	movs	r2, #0
 8001824:	4903      	ldr	r1, [pc, #12]	; (8001834 <tcpecho_init+0x20>)
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <tcpecho_init+0x24>)
 8001828:	f016 fae6 	bl	8017df8 <sys_thread_new>
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	08001751 	.word	0x08001751
 8001838:	08019034 	.word	0x08019034

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001858:	4c0b      	ldr	r4, [pc, #44]	; (8001888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001866:	f7ff ff61 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f016 fbf9 	bl	8018060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7fe ff05 	bl	800067c <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8001880:	0801c850 	.word	0x0801c850
  ldr r2, =_sbss
 8001884:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001888:	2000d90c 	.word	0x2000d90c

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x28>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f8fc 	bl	8001a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f7ff fdce 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fca6 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200000bc 	.word	0x200000bc
 80018e0:	20004e60 	.word	0x20004e60

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20004e60 	.word	0x20004e60

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000bc 	.word	0x200000bc

08001944 <__NVIC_SetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	4313      	orrs	r3, r2
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	05fa0000 	.word	0x05fa0000

0800198c <__NVIC_GetPriorityGrouping>:
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff4c 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac6:	f7ff ff61 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001aca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f7ff ffb1 	bl	8001a38 <NVIC_EncodePriority>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff80 	bl	80019e4 <__NVIC_SetPriority>
}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff54 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b16:	f7ff fee5 	bl	80018e4 <HAL_GetTick>
 8001b1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d008      	beq.n	8001b3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e052      	b.n	8001be0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0216 	bic.w	r2, r2, #22
 8001b48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <HAL_DMA_Abort+0x62>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8a:	e013      	b.n	8001bb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8c:	f7ff feaa 	bl	80018e4 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d90c      	bls.n	8001bb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e015      	b.n	8001be0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1e4      	bne.n	8001b8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	223f      	movs	r2, #63	; 0x3f
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d004      	beq.n	8001c06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00c      	b.n	8001c20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2205      	movs	r2, #5
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0201 	bic.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001c3c:	4ba9      	ldr	r3, [pc, #676]	; (8001ee4 <HAL_ETH_Init+0x2b8>)
 8001c3e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e181      	b.n	8001f56 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f004 fa04 	bl	8006074 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ee8 <HAL_ETH_Init+0x2bc>)
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	4a9d      	ldr	r2, [pc, #628]	; (8001ee8 <HAL_ETH_Init+0x2bc>)
 8001c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c76:	6453      	str	r3, [r2, #68]	; 0x44
 8001c78:	4b9b      	ldr	r3, [pc, #620]	; (8001ee8 <HAL_ETH_Init+0x2bc>)
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c84:	4b99      	ldr	r3, [pc, #612]	; (8001eec <HAL_ETH_Init+0x2c0>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a98      	ldr	r2, [pc, #608]	; (8001eec <HAL_ETH_Init+0x2c0>)
 8001c8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c8e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c90:	4b96      	ldr	r3, [pc, #600]	; (8001eec <HAL_ETH_Init+0x2c0>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4994      	ldr	r1, [pc, #592]	; (8001eec <HAL_ETH_Init+0x2c0>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb6:	f7ff fe15 	bl	80018e4 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001cbc:	e011      	b.n	8001ce2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001cbe:	f7ff fe11 	bl	80018e4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ccc:	d909      	bls.n	8001ce2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e139      	b.n	8001f56 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e4      	bne.n	8001cbe <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f023 031c 	bic.w	r3, r3, #28
 8001d02:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d04:	f001 ffa4 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8001d08:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4a78      	ldr	r2, [pc, #480]	; (8001ef0 <HAL_ETH_Init+0x2c4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d908      	bls.n	8001d24 <HAL_ETH_Init+0xf8>
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <HAL_ETH_Init+0x2c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d804      	bhi.n	8001d24 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e027      	b.n	8001d74 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4a73      	ldr	r2, [pc, #460]	; (8001ef4 <HAL_ETH_Init+0x2c8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d908      	bls.n	8001d3e <HAL_ETH_Init+0x112>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	4a6d      	ldr	r2, [pc, #436]	; (8001ee4 <HAL_ETH_Init+0x2b8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d204      	bcs.n	8001d3e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f043 030c 	orr.w	r3, r3, #12
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	e01a      	b.n	8001d74 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4a68      	ldr	r2, [pc, #416]	; (8001ee4 <HAL_ETH_Init+0x2b8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d303      	bcc.n	8001d4e <HAL_ETH_Init+0x122>
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4a6b      	ldr	r2, [pc, #428]	; (8001ef8 <HAL_ETH_Init+0x2cc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d911      	bls.n	8001d72 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4a69      	ldr	r2, [pc, #420]	; (8001ef8 <HAL_ETH_Init+0x2cc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d908      	bls.n	8001d68 <HAL_ETH_Init+0x13c>
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4a68      	ldr	r2, [pc, #416]	; (8001efc <HAL_ETH_Init+0x2d0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d804      	bhi.n	8001d68 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e005      	b.n	8001d74 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	e000      	b.n	8001d74 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d72:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001d7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d80:	2100      	movs	r1, #0
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fc17 	bl	80025b6 <HAL_ETH_WritePHYRegister>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d92:	6939      	ldr	r1, [r7, #16]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fdcd 	bl	8002934 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0d7      	b.n	8001f56 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001da6:	20ff      	movs	r0, #255	; 0xff
 8001da8:	f7ff fda8 	bl	80018fc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80a5 	beq.w	8001f00 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001db6:	f7ff fd95 	bl	80018e4 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fb8e 	bl	80024e6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001dca:	f7ff fd8b 	bl	80018e4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d90f      	bls.n	8001dfc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001de0:	6939      	ldr	r1, [r7, #16]
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fda6 	bl	8002934 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0ac      	b.n	8001f56 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0da      	beq.n	8001dbc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fbd2 	bl	80025b6 <HAL_ETH_WritePHYRegister>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e1c:	6939      	ldr	r1, [r7, #16]
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fd88 	bl	8002934 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e092      	b.n	8001f56 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff fd58 	bl	80018e4 <HAL_GetTick>
 8001e34:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fb51 	bl	80024e6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001e44:	f7ff fd4e 	bl	80018e4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d90f      	bls.n	8001e76 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e5a:	6939      	ldr	r1, [r7, #16]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fd69 	bl	8002934 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e06f      	b.n	8001f56 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0da      	beq.n	8001e36 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	461a      	mov	r2, r3
 8001e86:	2110      	movs	r1, #16
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fb2c 	bl	80024e6 <HAL_ETH_ReadPHYRegister>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fd4a 	bl	8002934 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e054      	b.n	8001f56 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	e002      	b.n	8001ec6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	e035      	b.n	8001f44 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e030      	b.n	8001f44 <HAL_ETH_Init+0x318>
 8001ee2:	bf00      	nop
 8001ee4:	03938700 	.word	0x03938700
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	01312cff 	.word	0x01312cff
 8001ef4:	02160ebf 	.word	0x02160ebf
 8001ef8:	05f5e0ff 	.word	0x05f5e0ff
 8001efc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	2100      	movs	r1, #0
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fb4c 	bl	80025b6 <HAL_ETH_WritePHYRegister>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fd02 	bl	8002934 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e00c      	b.n	8001f56 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001f3c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001f40:	f7ff fcdc 	bl	80018fc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001f44:	6939      	ldr	r1, [r7, #16]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fcf4 	bl	8002934 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop

08001f60 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ETH_DMATxDescListInit+0x20>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e052      	b.n	8002026 <HAL_ETH_DMATxDescListInit+0xc6>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e030      	b.n	8001ffe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	015b      	lsls	r3, r3, #5
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d208      	bcs.n	8001ff2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4413      	add	r3, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	e002      	b.n	8001ff8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d3ca      	bcc.n	8001f9c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6819      	ldr	r1, [r3, #0]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f241 0310 	movw	r3, #4112	; 0x1010
 8002010:	440b      	add	r3, r1
 8002012:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ETH_DMARxDescListInit+0x20>
 800204e:	2302      	movs	r3, #2
 8002050:	e056      	b.n	8002100 <HAL_ETH_DMARxDescListInit+0xce>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e034      	b.n	80020d8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4413      	add	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800207e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002086:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	461a      	mov	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d208      	bcs.n	80020cc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	015b      	lsls	r3, r3, #5
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	e002      	b.n	80020d2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d3c6      	bcc.n	800206e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80020ea:	440b      	add	r3, r1
 80020ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_ETH_TransmitFrame+0x24>
 800212c:	2302      	movs	r3, #2
 800212e:	e0cd      	b.n	80022cc <HAL_ETH_TransmitFrame+0x1c0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002156:	2301      	movs	r3, #1
 8002158:	e0b8      	b.n	80022cc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da09      	bge.n	8002178 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2212      	movs	r2, #18
 8002168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0a9      	b.n	80022cc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800217e:	4293      	cmp	r3, r2
 8002180:	d915      	bls.n	80021ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0a9b      	lsrs	r3, r3, #10
 800218c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002192:	fba3 1302 	umull	r1, r3, r3, r2
 8002196:	0a9b      	lsrs	r3, r3, #10
 8002198:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e001      	b.n	80021b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d11c      	bne.n	80021f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80021c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80021d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80021f0:	e04b      	b.n	800228a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e044      	b.n	8002282 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002206:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800221c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002226:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3b01      	subs	r3, #1
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	429a      	cmp	r2, r3
 8002230:	d116      	bne.n	8002260 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002240:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a25      	ldr	r2, [pc, #148]	; (80022dc <HAL_ETH_TransmitFrame+0x1d0>)
 8002246:	fb02 f203 	mul.w	r2, r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4413      	add	r3, r2
 800224e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002252:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800225e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800226e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	3301      	adds	r3, #1
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3b6      	bcc.n	80021f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002292:	4413      	add	r3, r2
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80022a6:	4413      	add	r3, r2
 80022a8:	2204      	movs	r2, #4
 80022aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f241 0304 	movw	r3, #4100	; 0x1004
 80022b4:	4413      	add	r3, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	ac02b00b 	.word	0xac02b00b
 80022dc:	fffffa0c 	.word	0xfffffa0c

080022e0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e074      	b.n	80023e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800230a:	e05a      	b.n	80023c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3301      	adds	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002320:	d10d      	bne.n	800233e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
 800233c:	e041      	b.n	80023c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	461a      	mov	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
 8002362:	e02e      	b.n	80023c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	2b01      	cmp	r3, #1
 800237c:	d103      	bne.n	8002386 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002392:	1f1a      	subs	r2, r3, #4
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	461a      	mov	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e010      	b.n	80023e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db02      	blt.n	80023d2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d99c      	bls.n	800230c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8002400:	4413      	add	r3, r2
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d112      	bne.n	8002432 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f003 fed3 	bl	80061b8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f241 0314 	movw	r3, #4116	; 0x1014
 800241a:	4413      	add	r3, r2
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002430:	e01b      	b.n	800246a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f241 0314 	movw	r3, #4116	; 0x1014
 800243a:	4413      	add	r3, r2
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d111      	bne.n	800246a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f839 	bl	80024be <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	f241 0314 	movw	r3, #4116	; 0x1014
 8002454:	4413      	add	r3, r2
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002472:	4413      	add	r3, r2
 8002474:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002478:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002482:	4413      	add	r3, r2
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800248e:	d112      	bne.n	80024b6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f81e 	bl	80024d2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f241 0314 	movw	r3, #4116	; 0x1014
 800249e:	4413      	add	r3, r2
 80024a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024a4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	460b      	mov	r3, r1
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b82      	cmp	r3, #130	; 0x82
 8002506:	d101      	bne.n	800250c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
 800250a:	e050      	b.n	80025ae <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2282      	movs	r2, #130	; 0x82
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 031c 	and.w	r3, r3, #28
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8a1b      	ldrh	r3, [r3, #16]
 8002528:	02db      	lsls	r3, r3, #11
 800252a:	b29b      	uxth	r3, r3
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002532:	897b      	ldrh	r3, [r7, #10]
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0302 	bic.w	r3, r3, #2
 8002546:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002558:	f7ff f9c4 	bl	80018e4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800255e:	e015      	b.n	800258c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002560:	f7ff f9c0 	bl	80018e4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256e:	d309      	bcc.n	8002584 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e014      	b.n	80025ae <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e4      	bne.n	8002560 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	460b      	mov	r3, r1
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b42      	cmp	r3, #66	; 0x42
 80025d6:	d101      	bne.n	80025dc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
 80025da:	e04e      	b.n	800267a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2242      	movs	r2, #66	; 0x42
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 031c 	and.w	r3, r3, #28
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8a1b      	ldrh	r3, [r3, #16]
 80025f8:	02db      	lsls	r3, r3, #11
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002632:	f7ff f957 	bl	80018e4 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002638:	e015      	b.n	8002666 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800263a:	f7ff f953 	bl	80018e4 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d309      	bcc.n	800265e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e00d      	b.n	800267a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e4      	bne.n	800263a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_ETH_Start+0x16>
 8002694:	2302      	movs	r3, #2
 8002696:	e01f      	b.n	80026d8 <HAL_ETH_Start+0x56>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fb45 	bl	8002d38 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fb7c 	bl	8002dac <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fc13 	bl	8002ee0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fbb0 	bl	8002e20 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fbdd 	bl	8002e80 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ETH_Stop+0x16>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e01f      	b.n	8002736 <HAL_ETH_Stop+0x56>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fba2 	bl	8002e50 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fbcf 	bl	8002eb0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fb67 	bl	8002de6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fbe1 	bl	8002ee0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fb27 	bl	8002d72 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_ETH_ConfigMAC+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0e4      	b.n	8002926 <HAL_ETH_ConfigMAC+0x1e6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80b1 	beq.w	80028d6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_ETH_ConfigMAC+0x1f0>)
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800278c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002792:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002798:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800279e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80027a4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80027aa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80027b0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80027b6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80027bc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80027c2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80027c8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80027ce:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7ff f888 	bl	80018fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027fc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002802:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002808:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800280e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002814:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800281a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002826:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002828:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002832:	2001      	movs	r0, #1
 8002834:	f7ff f862 	bl	80018fc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002848:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002852:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002870:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002876:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800287c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002882:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002888:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7ff f82b 	bl	80018fc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff f818 	bl	80018fc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	61da      	str	r2, [r3, #28]
 80028d4:	e01e      	b.n	8002914 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80028e4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002906:	2001      	movs	r0, #1
 8002908:	f7fe fff8 	bl	80018fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	ff20810f 	.word	0xff20810f

08002934 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0b0      	sub	sp, #192	; 0xc0
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002950:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002958:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002962:	2300      	movs	r3, #0
 8002964:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800297a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297e:	663b      	str	r3, [r7, #96]	; 0x60
 8002980:	e001      	b.n	8002986 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002990:	2300      	movs	r3, #0
 8002992:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80029a0:	2340      	movs	r3, #64	; 0x40
 80029a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a0c:	4bab      	ldr	r3, [pc, #684]	; (8002cbc <ETH_MACDMAConfig+0x388>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a18:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002a1c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002a20:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002a26:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002a2a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002a2e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002a34:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002a38:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002a3c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002a40:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002a44:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002a48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a5c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7fe ff47 	bl	80018fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a76:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a7c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002a80:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002a86:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002a8c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002a92:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002a98:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002a9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002aa4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002aa6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7fe ff22 	bl	80018fc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ac0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002aca:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ad4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002ae0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ae4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ae8:	4013      	ands	r3, r2
 8002aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002aee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002af4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002af8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002afe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002b04:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002b0a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002b0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002b10:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002b12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b24:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7fe fee3 	bl	80018fc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b3e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b40:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002b44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f7fe fece 	bl	80018fc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b68:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b72:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b7c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002bc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bca:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <ETH_MACDMAConfig+0x38c>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bd2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bd6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002bd8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002bda:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002bdc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002bde:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002be0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002be2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002be4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002be6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002be8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002bea:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002bee:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002bf2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c06:	4413      	add	r3, r2
 8002c08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c0c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c16:	4413      	add	r3, r2
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fe fe6c 	bl	80018fc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c32:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c38:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002c3c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c40:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002c44:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c48:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002c4a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002c4e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7fe fe45 	bl	80018fc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c7e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10d      	bne.n	8002ca4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002c90:	4413      	add	r3, r2
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6811      	ldr	r1, [r2, #0]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <ETH_MACDMAConfig+0x390>)
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002ca0:	440b      	add	r3, r1
 8002ca2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f80b 	bl	8002cc8 <ETH_MACAddressConfig>
}
 8002cb2:	bf00      	nop
 8002cb4:	37c0      	adds	r7, #192	; 0xc0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	ff20810f 	.word	0xff20810f
 8002cc0:	f8de3f23 	.word	0xf8de3f23
 8002cc4:	00010040 	.word	0x00010040

08002cc8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3305      	adds	r3, #5
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	3204      	adds	r2, #4
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <ETH_MACAddressConfig+0x68>)
 8002cea:	4413      	add	r3, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	061a      	lsls	r2, r3, #24
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3301      	adds	r3, #1
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <ETH_MACAddressConfig+0x6c>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6013      	str	r3, [r2, #0]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40028040 	.word	0x40028040
 8002d34:	40028044 	.word	0x40028044

08002d38 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0208 	orr.w	r2, r2, #8
 8002d52:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f7fe fdcd 	bl	80018fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0208 	bic.w	r2, r2, #8
 8002d8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fe fdb0 	bl	80018fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0204 	orr.w	r2, r2, #4
 8002dc6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7fe fd93 	bl	80018fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0204 	bic.w	r2, r2, #4
 8002e00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f7fe fd76 	bl	80018fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e30:	4413      	add	r3, r2
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6811      	ldr	r1, [r2, #0]
 8002e38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e40:	440b      	add	r3, r1
 8002e42:	601a      	str	r2, [r3, #0]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e60:	4413      	add	r3, r2
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6811      	ldr	r1, [r2, #0]
 8002e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e6c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e70:	440b      	add	r3, r1
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e90:	4413      	add	r3, r2
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6811      	ldr	r1, [r2, #0]
 8002e98:	f043 0202 	orr.w	r2, r3, #2
 8002e9c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ea0:	440b      	add	r3, r1
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ec0:	4413      	add	r3, r2
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6811      	ldr	r1, [r2, #0]
 8002ec8:	f023 0202 	bic.w	r2, r3, #2
 8002ecc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ed0:	440b      	add	r3, r1
 8002ed2:	601a      	str	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ef4:	4413      	add	r3, r2
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6811      	ldr	r1, [r2, #0]
 8002efc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f00:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f04:	440b      	add	r3, r1
 8002f06:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f10:	4413      	add	r3, r2
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7fe fcf0 	bl	80018fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6819      	ldr	r1, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f26:	440b      	add	r3, r1
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e175      	b.n	8003240 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f54:	2201      	movs	r2, #1
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	f040 8164 	bne.w	800323a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d005      	beq.n	8002f8a <HAL_GPIO_Init+0x56>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d130      	bne.n	8002fec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 0201 	and.w	r2, r3, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d017      	beq.n	8003028 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d123      	bne.n	800307c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	08da      	lsrs	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3208      	adds	r2, #8
 800303c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	220f      	movs	r2, #15
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3208      	adds	r2, #8
 8003076:	69b9      	ldr	r1, [r7, #24]
 8003078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	2203      	movs	r2, #3
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0203 	and.w	r2, r3, #3
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80be 	beq.w	800323a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030be:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_GPIO_Init+0x324>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_GPIO_Init+0x324>)
 80030c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_GPIO_Init+0x324>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030d6:	4a61      	ldr	r2, [pc, #388]	; (800325c <HAL_GPIO_Init+0x328>)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	3302      	adds	r3, #2
 80030de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	220f      	movs	r2, #15
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_GPIO_Init+0x32c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d037      	beq.n	8003172 <HAL_GPIO_Init+0x23e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_GPIO_Init+0x330>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d031      	beq.n	800316e <HAL_GPIO_Init+0x23a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a56      	ldr	r2, [pc, #344]	; (8003268 <HAL_GPIO_Init+0x334>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d02b      	beq.n	800316a <HAL_GPIO_Init+0x236>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a55      	ldr	r2, [pc, #340]	; (800326c <HAL_GPIO_Init+0x338>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d025      	beq.n	8003166 <HAL_GPIO_Init+0x232>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a54      	ldr	r2, [pc, #336]	; (8003270 <HAL_GPIO_Init+0x33c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01f      	beq.n	8003162 <HAL_GPIO_Init+0x22e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a53      	ldr	r2, [pc, #332]	; (8003274 <HAL_GPIO_Init+0x340>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d019      	beq.n	800315e <HAL_GPIO_Init+0x22a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a52      	ldr	r2, [pc, #328]	; (8003278 <HAL_GPIO_Init+0x344>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0x226>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a51      	ldr	r2, [pc, #324]	; (800327c <HAL_GPIO_Init+0x348>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00d      	beq.n	8003156 <HAL_GPIO_Init+0x222>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <HAL_GPIO_Init+0x34c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x21e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4f      	ldr	r2, [pc, #316]	; (8003284 <HAL_GPIO_Init+0x350>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_GPIO_Init+0x21a>
 800314a:	2309      	movs	r3, #9
 800314c:	e012      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800314e:	230a      	movs	r3, #10
 8003150:	e010      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003152:	2308      	movs	r3, #8
 8003154:	e00e      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003156:	2307      	movs	r3, #7
 8003158:	e00c      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800315a:	2306      	movs	r3, #6
 800315c:	e00a      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800315e:	2305      	movs	r3, #5
 8003160:	e008      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003162:	2304      	movs	r3, #4
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003166:	2303      	movs	r3, #3
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003172:	2300      	movs	r3, #0
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003184:	4935      	ldr	r1, [pc, #212]	; (800325c <HAL_GPIO_Init+0x328>)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <HAL_GPIO_Init+0x354>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a34      	ldr	r2, [pc, #208]	; (8003288 <HAL_GPIO_Init+0x354>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b32      	ldr	r3, [pc, #200]	; (8003288 <HAL_GPIO_Init+0x354>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a29      	ldr	r2, [pc, #164]	; (8003288 <HAL_GPIO_Init+0x354>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e6:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_GPIO_Init+0x354>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320a:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_GPIO_Init+0x354>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_GPIO_Init+0x354>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_GPIO_Init+0x354>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f ae86 	bls.w	8002f54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40013800 	.word	0x40013800
 8003260:	40020000 	.word	0x40020000
 8003264:	40020400 	.word	0x40020400
 8003268:	40020800 	.word	0x40020800
 800326c:	40020c00 	.word	0x40020c00
 8003270:	40021000 	.word	0x40021000
 8003274:	40021400 	.word	0x40021400
 8003278:	40021800 	.word	0x40021800
 800327c:	40021c00 	.word	0x40021c00
 8003280:	40022000 	.word	0x40022000
 8003284:	40022400 	.word	0x40022400
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032d0:	887a      	ldrh	r2, [r7, #2]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	041a      	lsls	r2, r3, #16
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43d9      	mvns	r1, r3
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	400b      	ands	r3, r1
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd ff2c 	bl	8001170 <HAL_GPIO_EXTI_Callback>
  }
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40013c00 	.word	0x40013c00

08003324 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_PWREx_EnableOverDrive+0x98>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003352:	f7fe fac7 	bl	80018e4 <HAL_GetTick>
 8003356:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003358:	e009      	b.n	800336e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800335a:	f7fe fac3 	bl	80018e4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003368:	d901      	bls.n	800336e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e022      	b.n	80033b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337a:	d1ee      	bne.n	800335a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003388:	f7fe faac 	bl	80018e4 <HAL_GetTick>
 800338c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800338e:	e009      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003390:	f7fe faa8 	bl	80018e4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339e:	d901      	bls.n	80033a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e007      	b.n	80033b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b0:	d1ee      	bne.n	8003390 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40007000 	.word	0x40007000

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e291      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8087 	beq.w	80034f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e8:	4b96      	ldr	r3, [pc, #600]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d00c      	beq.n	800340e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f4:	4b93      	ldr	r3, [pc, #588]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d112      	bne.n	8003426 <HAL_RCC_OscConfig+0x62>
 8003400:	4b90      	ldr	r3, [pc, #576]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d10b      	bne.n	8003426 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340e:	4b8d      	ldr	r3, [pc, #564]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d06c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x130>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d168      	bne.n	80034f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e26b      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x7a>
 8003430:	4b84      	ldr	r3, [pc, #528]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a83      	ldr	r2, [pc, #524]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e02e      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x9c>
 8003446:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7e      	ldr	r2, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b7c      	ldr	r3, [pc, #496]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7b      	ldr	r2, [pc, #492]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e01d      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0xc0>
 800346a:	4b76      	ldr	r3, [pc, #472]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b73      	ldr	r3, [pc, #460]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a72      	ldr	r2, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 8003484:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6e      	ldr	r2, [pc, #440]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800348a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6b      	ldr	r2, [pc, #428]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fa1e 	bl	80018e4 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe fa1a 	bl	80018e4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e21f      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b61      	ldr	r3, [pc, #388]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0xe8>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe fa0a 	bl	80018e4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fa06 	bl	80018e4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e20b      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x110>
 80034f2:	e000      	b.n	80034f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d069      	beq.n	80035d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003502:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b08      	cmp	r3, #8
 8003518:	d11c      	bne.n	8003554 <HAL_RCC_OscConfig+0x190>
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_RCC_OscConfig+0x17a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1df      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	493d      	ldr	r1, [pc, #244]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	e040      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355c:	4b39      	ldr	r3, [pc, #228]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a38      	ldr	r2, [pc, #224]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe f9bc 	bl	80018e4 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003570:	f7fe f9b8 	bl	80018e4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1bd      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4929      	ldr	r1, [pc, #164]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	e018      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a4:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe f998 	bl	80018e4 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe f994 	bl	80018e4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e199      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d038      	beq.n	8003654 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe f975 	bl	80018e4 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fe f971 	bl	80018e4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e176      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x23a>
 800361c:	e01a      	b.n	8003654 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fe f95b 	bl	80018e4 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003632:	f7fe f957 	bl	80018e4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d903      	bls.n	8003648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e15c      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
 8003644:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	4b91      	ldr	r3, [pc, #580]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ee      	bne.n	8003632 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a4 	beq.w	80037aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003662:	4b8b      	ldr	r3, [pc, #556]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	4b88      	ldr	r3, [pc, #544]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a87      	ldr	r2, [pc, #540]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b85      	ldr	r3, [pc, #532]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368a:	4b82      	ldr	r3, [pc, #520]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003696:	4b7f      	ldr	r3, [pc, #508]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7e      	ldr	r2, [pc, #504]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe f91f 	bl	80018e4 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe f91b 	bl	80018e4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	; 0x64
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e120      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036bc:	4b75      	ldr	r3, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x31a>
 80036d0:	4b6f      	ldr	r3, [pc, #444]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a6e      	ldr	r2, [pc, #440]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e02d      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x33c>
 80036e6:	4b6a      	ldr	r3, [pc, #424]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a69      	ldr	r2, [pc, #420]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	4b67      	ldr	r3, [pc, #412]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a66      	ldr	r2, [pc, #408]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	e01c      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b05      	cmp	r3, #5
 8003706:	d10c      	bne.n	8003722 <HAL_RCC_OscConfig+0x35e>
 8003708:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a60      	ldr	r2, [pc, #384]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
 8003714:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	4a5d      	ldr	r2, [pc, #372]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	; 0x70
 8003720:	e00b      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 8003722:	4b5b      	ldr	r3, [pc, #364]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a5a      	ldr	r2, [pc, #360]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	4b58      	ldr	r3, [pc, #352]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	4a57      	ldr	r2, [pc, #348]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d015      	beq.n	800376e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe f8cf 	bl	80018e4 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe f8cb 	bl	80018e4 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0ce      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ee      	beq.n	800374a <HAL_RCC_OscConfig+0x386>
 800376c:	e014      	b.n	8003798 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe f8b9 	bl	80018e4 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fe f8b5 	bl	80018e4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	; 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0b8      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378c:	4b40      	ldr	r3, [pc, #256]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ee      	bne.n	8003776 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379e:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a3b      	ldr	r2, [pc, #236]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80037a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80a4 	beq.w	80038fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b4:	4b36      	ldr	r3, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d06b      	beq.n	8003898 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d149      	bne.n	800385c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe f886 	bl	80018e4 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe f882 	bl	80018e4 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e087      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	3b01      	subs	r3, #1
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	4313      	orrs	r3, r2
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003826:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe f856 	bl	80018e4 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe f852 	bl	80018e4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e057      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x478>
 800385a:	e04f      	b.n	80038fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fe f83c 	bl	80018e4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7fe f838 	bl	80018e4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e03d      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003882:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_OscConfig+0x4cc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x4ac>
 800388e:	e035      	b.n	80038fc <HAL_RCC_OscConfig+0x538>
 8003890:	40023800 	.word	0x40023800
 8003894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x544>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d028      	beq.n	80038f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d121      	bne.n	80038f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d11a      	bne.n	80038f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	3b01      	subs	r3, #1
 80038e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800

0800390c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0d0      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d910      	bls.n	8003954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 020f 	bic.w	r2, r3, #15
 800393a:	4965      	ldr	r1, [pc, #404]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b8      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003976:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d040      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d115      	bne.n	80039ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e073      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06b      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4936      	ldr	r1, [pc, #216]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fd ff70 	bl	80018e4 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd ff6c 	bl	80018e4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e053      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d210      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 020f 	bic.w	r2, r3, #15
 8003a46:	4922      	ldr	r1, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e032      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9e:	f000 f821 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1d0>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1d4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fcc2 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023c00 	.word	0x40023c00
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	0801c5b4 	.word	0x0801c5b4
 8003adc:	20000008 	.word	0x20000008
 8003ae0:	200000b8 	.word	0x200000b8

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b5b0      	push	{r4, r5, r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003aea:	2100      	movs	r1, #0
 8003aec:	6079      	str	r1, [r7, #4]
 8003aee:	2100      	movs	r1, #0
 8003af0:	60f9      	str	r1, [r7, #12]
 8003af2:	2100      	movs	r1, #0
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003af6:	2100      	movs	r1, #0
 8003af8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003afa:	4952      	ldr	r1, [pc, #328]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003afc:	6889      	ldr	r1, [r1, #8]
 8003afe:	f001 010c 	and.w	r1, r1, #12
 8003b02:	2908      	cmp	r1, #8
 8003b04:	d00d      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b06:	2908      	cmp	r1, #8
 8003b08:	f200 8094 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x150>
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x32>
 8003b10:	2904      	cmp	r1, #4
 8003b12:	d003      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x38>
 8003b14:	e08e      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b16:	4b4c      	ldr	r3, [pc, #304]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b18:	60bb      	str	r3, [r7, #8]
      break;
 8003b1a:	e08e      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b1e:	60bb      	str	r3, [r7, #8]
      break;
 8003b20:	e08b      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b22:	4948      	ldr	r1, [pc, #288]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b24:	6849      	ldr	r1, [r1, #4]
 8003b26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b2a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b2c:	4945      	ldr	r1, [pc, #276]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b2e:	6849      	ldr	r1, [r1, #4]
 8003b30:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b34:	2900      	cmp	r1, #0
 8003b36:	d024      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b38:	4942      	ldr	r1, [pc, #264]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b3a:	6849      	ldr	r1, [r1, #4]
 8003b3c:	0989      	lsrs	r1, r1, #6
 8003b3e:	4608      	mov	r0, r1
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b48:	f04f 0500 	mov.w	r5, #0
 8003b4c:	ea00 0204 	and.w	r2, r0, r4
 8003b50:	ea01 0305 	and.w	r3, r1, r5
 8003b54:	493d      	ldr	r1, [pc, #244]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b56:	fb01 f003 	mul.w	r0, r1, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	fb01 f102 	mul.w	r1, r1, r2
 8003b60:	1844      	adds	r4, r0, r1
 8003b62:	493a      	ldr	r1, [pc, #232]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b64:	fba2 0101 	umull	r0, r1, r2, r1
 8003b68:	1863      	adds	r3, r4, r1
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	f7fc fb9c 	bl	80002b0 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e04a      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b30      	ldr	r3, [pc, #192]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	ea02 0400 	and.w	r4, r2, r0
 8003b9a:	ea03 0501 	and.w	r5, r3, r1
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	014b      	lsls	r3, r1, #5
 8003bac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bb0:	0142      	lsls	r2, r0, #5
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	1b00      	subs	r0, r0, r4
 8003bb8:	eb61 0105 	sbc.w	r1, r1, r5
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	018b      	lsls	r3, r1, #6
 8003bc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bca:	0182      	lsls	r2, r0, #6
 8003bcc:	1a12      	subs	r2, r2, r0
 8003bce:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f04f 0100 	mov.w	r1, #0
 8003bda:	00d9      	lsls	r1, r3, #3
 8003bdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be0:	00d0      	lsls	r0, r2, #3
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	1912      	adds	r2, r2, r4
 8003be8:	eb45 0303 	adc.w	r3, r5, r3
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	0299      	lsls	r1, r3, #10
 8003bf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bfa:	0290      	lsls	r0, r2, #10
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	f7fc fb50 	bl	80002b0 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	60bb      	str	r3, [r7, #8]
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c36:	60bb      	str	r3, [r7, #8]
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bdb0      	pop	{r4, r5, r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	017d7840 	.word	0x017d7840

08003c50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000008 	.word	0x20000008

08003c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c6c:	f7ff fff0 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0a9b      	lsrs	r3, r3, #10
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	0801c5c4 	.word	0x0801c5c4

08003c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c94:	f7ff ffdc 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0b5b      	lsrs	r3, r3, #13
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	0801c5c4 	.word	0x0801c5c4

08003cb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	08db      	lsrs	r3, r3, #3
 8003cf2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_RCC_GetClockConfig+0x60>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 020f 	and.w	r2, r3, #15
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	601a      	str	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40023c00 	.word	0x40023c00

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d012      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d44:	4b69      	ldr	r3, [pc, #420]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a68      	ldr	r2, [pc, #416]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d4e:	6093      	str	r3, [r2, #8]
 8003d50:	4b66      	ldr	r3, [pc, #408]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	4964      	ldr	r1, [pc, #400]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d017      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d76:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	4959      	ldr	r1, [pc, #356]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d94:	d101      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003db2:	4b4e      	ldr	r3, [pc, #312]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	494a      	ldr	r1, [pc, #296]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 808b 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b3a      	ldr	r3, [pc, #232]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	4a39      	ldr	r2, [pc, #228]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0c:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e18:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e24:	f7fd fd5e 	bl	80018e4 <HAL_GetTick>
 8003e28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fd fd5a 	bl	80018e4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e357      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e4a:	4b28      	ldr	r3, [pc, #160]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d035      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d02e      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e68:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e8a:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d114      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fd22 	bl	80018e4 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fd fd1e 	bl	80018e4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e319      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ee      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed2:	d111      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	4901      	ldr	r1, [pc, #4]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	0ffffcff 	.word	0x0ffffcff
 8003ef8:	4bb1      	ldr	r3, [pc, #708]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4ab0      	ldr	r2, [pc, #704]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003efe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f02:	6093      	str	r3, [r2, #8]
 8003f04:	4bae      	ldr	r3, [pc, #696]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f10:	49ab      	ldr	r1, [pc, #684]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d010      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f22:	4ba7      	ldr	r3, [pc, #668]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	4aa5      	ldr	r2, [pc, #660]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f32:	4ba3      	ldr	r3, [pc, #652]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	49a0      	ldr	r1, [pc, #640]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f50:	4b9b      	ldr	r3, [pc, #620]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5e:	4998      	ldr	r1, [pc, #608]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f72:	4b93      	ldr	r3, [pc, #588]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f80:	498f      	ldr	r1, [pc, #572]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f94:	4b8a      	ldr	r3, [pc, #552]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa2:	4987      	ldr	r1, [pc, #540]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb6:	4b82      	ldr	r3, [pc, #520]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	497e      	ldr	r1, [pc, #504]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd8:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	4976      	ldr	r1, [pc, #472]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ffa:	4b71      	ldr	r3, [pc, #452]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f023 020c 	bic.w	r2, r3, #12
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004008:	496d      	ldr	r1, [pc, #436]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	4965      	ldr	r1, [pc, #404]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800403e:	4b60      	ldr	r3, [pc, #384]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	495c      	ldr	r1, [pc, #368]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004060:	4b57      	ldr	r3, [pc, #348]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	4954      	ldr	r1, [pc, #336]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004082:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	494b      	ldr	r1, [pc, #300]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040a4:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	4943      	ldr	r1, [pc, #268]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	493a      	ldr	r1, [pc, #232]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f6:	4932      	ldr	r1, [pc, #200]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d011      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004118:	4929      	ldr	r1, [pc, #164]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	4919      	ldr	r1, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417c:	4910      	ldr	r1, [pc, #64]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d006      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80d9 	beq.w	800434a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800419e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a4:	f7fd fb9e 	bl	80018e4 <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041aa:	e00b      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041ac:	f7fd fb9a 	bl	80018e4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d904      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e197      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c4:	4b6c      	ldr	r3, [pc, #432]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ed      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d021      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11d      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041f2:	4b61      	ldr	r3, [pc, #388]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	019a      	lsls	r2, r3, #6
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	431a      	orrs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	071b      	lsls	r3, r3, #28
 8004218:	4957      	ldr	r1, [pc, #348]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800423e:	2b00      	cmp	r3, #0
 8004240:	d02e      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424a:	d129      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800424c:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800425a:	4b47      	ldr	r3, [pc, #284]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800425c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004260:	0f1b      	lsrs	r3, r3, #28
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	019a      	lsls	r2, r3, #6
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	431a      	orrs	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	071b      	lsls	r3, r3, #28
 8004280:	493d      	ldr	r1, [pc, #244]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004288:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800428e:	f023 021f 	bic.w	r2, r3, #31
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	3b01      	subs	r3, #1
 8004298:	4937      	ldr	r1, [pc, #220]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01d      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ac:	4b32      	ldr	r3, [pc, #200]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	0e1b      	lsrs	r3, r3, #24
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ba:	4b2f      	ldr	r3, [pc, #188]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c0:	0f1b      	lsrs	r3, r3, #28
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	019a      	lsls	r2, r3, #6
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	431a      	orrs	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	431a      	orrs	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	071b      	lsls	r3, r3, #28
 80042e0:	4925      	ldr	r1, [pc, #148]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d011      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	019a      	lsls	r2, r3, #6
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	071b      	lsls	r3, r3, #28
 8004310:	4919      	ldr	r1, [pc, #100]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004324:	f7fd fade 	bl	80018e4 <HAL_GetTick>
 8004328:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800432a:	e008      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800432c:	f7fd fada 	bl	80018e4 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0d7      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 80cd 	bne.w	80044ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435e:	f7fd fac1 	bl	80018e4 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004366:	f7fd fabd 	bl	80018e4 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b64      	cmp	r3, #100	; 0x64
 8004372:	d903      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e0ba      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004378:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800437c:	4b5e      	ldr	r3, [pc, #376]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004388:	d0ed      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02e      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d12a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043b2:	4b51      	ldr	r3, [pc, #324]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043c0:	4b4d      	ldr	r3, [pc, #308]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	0f1b      	lsrs	r3, r3, #28
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	019a      	lsls	r2, r3, #6
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	041b      	lsls	r3, r3, #16
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	061b      	lsls	r3, r3, #24
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	071b      	lsls	r3, r3, #28
 80043e6:	4944      	ldr	r1, [pc, #272]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043ee:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	493d      	ldr	r1, [pc, #244]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d022      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800441c:	d11d      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004424:	0e1b      	lsrs	r3, r3, #24
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	0f1b      	lsrs	r3, r3, #28
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	071b      	lsls	r3, r3, #28
 8004452:	4929      	ldr	r1, [pc, #164]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d028      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004474:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	071b      	lsls	r3, r3, #28
 800449a:	4917      	ldr	r1, [pc, #92]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4911      	ldr	r1, [pc, #68]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c4:	f7fd fa0e 	bl	80018e4 <HAL_GetTick>
 80044c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044cc:	f7fd fa0a 	bl	80018e4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e007      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ea:	d1ef      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e049      	b.n	80045a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fc fe92 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 f9f6 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d001      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e054      	b.n	800466e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a26      	ldr	r2, [pc, #152]	; (800467c <HAL_TIM_Base_Start_IT+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d01d      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a22      	ldr	r2, [pc, #136]	; (8004680 <HAL_TIM_Base_Start_IT+0xd4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a21      	ldr	r2, [pc, #132]	; (8004684 <HAL_TIM_Base_Start_IT+0xd8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <HAL_TIM_Base_Start_IT+0xdc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <HAL_TIM_Base_Start_IT+0xe0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <HAL_TIM_Base_Start_IT+0xe4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_TIM_Base_Start_IT+0xe8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d115      	bne.n	8004658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_TIM_Base_Start_IT+0xec>)
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d015      	beq.n	800466a <HAL_TIM_Base_Start_IT+0xbe>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d011      	beq.n	800466a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	e008      	b.n	800466a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e000      	b.n	800466c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40010400 	.word	0x40010400
 8004690:	40014000 	.word	0x40014000
 8004694:	40001800 	.word	0x40001800
 8004698:	00010007 	.word	0x00010007

0800469c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f905 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8f7 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f908 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0204 	mvn.w	r2, #4
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8db 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8cd 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f8de 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0208 	mvn.w	r2, #8
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8b1 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8a3 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f8b4 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0210 	mvn.w	r2, #16
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2208      	movs	r2, #8
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f887 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f879 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f88a 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0201 	mvn.w	r2, #1
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc fcd6 	bl	80011cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9a8 	bl	8004b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	d10e      	bne.n	800487a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d107      	bne.n	800487a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f99b 	bl	8004bb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d10e      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f838 	bl	8004916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d10e      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d107      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0220 	mvn.w	r2, #32
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f95b 	bl	8004b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d00f      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3d      	ldr	r2, [pc, #244]	; (8004a44 <TIM_Base_SetConfig+0x118>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3a      	ldr	r2, [pc, #232]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2f      	ldr	r2, [pc, #188]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d02b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d027      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <TIM_Base_SetConfig+0x118>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d023      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01f      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a29      	ldr	r2, [pc, #164]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d017      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <TIM_Base_SetConfig+0x128>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <TIM_Base_SetConfig+0x12c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00f      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <TIM_Base_SetConfig+0x130>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <TIM_Base_SetConfig+0x134>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <TIM_Base_SetConfig+0x138>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <TIM_Base_SetConfig+0x13c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0xf8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a0c      	ldr	r2, [pc, #48]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d103      	bne.n	8004a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	615a      	str	r2, [r3, #20]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	40001800 	.word	0x40001800
 8004a64:	40001c00 	.word	0x40001c00
 8004a68:	40002000 	.word	0x40002000

08004a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e06d      	b.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a30      	ldr	r2, [pc, #192]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004abe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d022      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d01d      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d018      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00e      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d009      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10c      	bne.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40010400 	.word	0x40010400
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40001800 	.word	0x40001800

08004b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e040      	b.n	8004c58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc fb56 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fb7a 	bl	80052fc <UART_SetConfig>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e022      	b.n	8004c58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fdd0 	bl	80057c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fe57 	bl	8005904 <UART_CheckIdleState>
 8004c56:	4603      	mov	r3, r0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b08b      	sub	sp, #44	; 0x2c
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d156      	bne.n	8004d24 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_UART_Transmit_IT+0x22>
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e04f      	b.n	8004d26 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_UART_Transmit_IT+0x34>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e048      	b.n	8004d26 <HAL_UART_Transmit_IT+0xc6>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2221      	movs	r2, #33	; 0x21
 8004cc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	d107      	bne.n	8004ce0 <HAL_UART_Transmit_IT+0x80>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <HAL_UART_Transmit_IT+0xd4>)
 8004cdc:	669a      	str	r2, [r3, #104]	; 0x68
 8004cde:	e002      	b.n	8004ce6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <HAL_UART_Transmit_IT+0xd8>)
 8004ce4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	69f9      	ldr	r1, [r7, #28]
 8004d12:	6a3a      	ldr	r2, [r7, #32]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e6      	bne.n	8004cee <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e000      	b.n	8004d26 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	372c      	adds	r7, #44	; 0x2c
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	08005c9b 	.word	0x08005c9b
 8004d38:	08005be5 	.word	0x08005be5

08004d3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b0ba      	sub	sp, #232	; 0xe8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d115      	bne.n	8004da4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 828f 	beq.w	80052b8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
      }
      return;
 8004da2:	e289      	b.n	80052b8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8117 	beq.w	8004fdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004dbe:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_UART_IRQHandler+0x298>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 810a 	beq.w	8004fdc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d011      	beq.n	8004df8 <HAL_UART_IRQHandler+0xbc>
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2201      	movs	r2, #1
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dee:	f043 0201 	orr.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d011      	beq.n	8004e28 <HAL_UART_IRQHandler+0xec>
 8004e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2202      	movs	r2, #2
 8004e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1e:	f043 0204 	orr.w	r2, r3, #4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d011      	beq.n	8004e58 <HAL_UART_IRQHandler+0x11c>
 8004e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2204      	movs	r2, #4
 8004e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e4e:	f043 0202 	orr.w	r2, r3, #2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d017      	beq.n	8004e94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2208      	movs	r2, #8
 8004e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8a:	f043 0208 	orr.w	r2, r3, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d012      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x18a>
 8004ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00c      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ebc:	f043 0220 	orr.w	r2, r3, #32
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 81f5 	beq.w	80052bc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00d      	beq.n	8004efa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d005      	beq.n	8004f1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d04f      	beq.n	8004fbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fde7 	bl	8005af2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d141      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1d9      	bne.n	8004f32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d013      	beq.n	8004fae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <HAL_UART_IRQHandler+0x29c>)
 8004f8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fc fe28 	bl	8001be8 <HAL_DMA_Abort_IT>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d017      	beq.n	8004fce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	e00f      	b.n	8004fce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f98e 	bl	80052d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	e00b      	b.n	8004fce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f98a 	bl	80052d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	e007      	b.n	8004fce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f986 	bl	80052d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004fcc:	e176      	b.n	80052bc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fce:	bf00      	nop
    return;
 8004fd0:	e174      	b.n	80052bc <HAL_UART_IRQHandler+0x580>
 8004fd2:	bf00      	nop
 8004fd4:	04000120 	.word	0x04000120
 8004fd8:	08005bb9 	.word	0x08005bb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f040 8144 	bne.w	800526e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 813d 	beq.w	800526e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8136 	beq.w	800526e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2210      	movs	r2, #16
 8005008:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	f040 80b2 	bne.w	800517e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005026:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 8148 	beq.w	80052c0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800503a:	429a      	cmp	r2, r3
 800503c:	f080 8140 	bcs.w	80052c0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005046:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005054:	f000 8085 	beq.w	8005162 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800506c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005086:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800508e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800509a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1da      	bne.n	8005058 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3308      	adds	r3, #8
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3308      	adds	r3, #8
 80050c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e1      	bne.n	80050a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3308      	adds	r3, #8
 80050fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005102:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005104:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e3      	bne.n	80050de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005132:	f023 0310 	bic.w	r3, r3, #16
 8005136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005144:	65bb      	str	r3, [r7, #88]	; 0x58
 8005146:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800514a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e4      	bne.n	8005122 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4618      	mov	r0, r3
 800515e:	f7fc fcd3 	bl	8001b08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800516e:	b29b      	uxth	r3, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	b29b      	uxth	r3, r3
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f8b4 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800517c:	e0a0      	b.n	80052c0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800518a:	b29b      	uxth	r3, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8092 	beq.w	80052c4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80051a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 808d 	beq.w	80052c4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051cc:	647b      	str	r3, [r7, #68]	; 0x44
 80051ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e4      	bne.n	80051aa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	623b      	str	r3, [r7, #32]
   return(result);
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005204:	633a      	str	r2, [r7, #48]	; 0x30
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800520a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e3      	bne.n	80051e0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	60fb      	str	r3, [r7, #12]
   return(result);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0310 	bic.w	r3, r3, #16
 800523e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	69b9      	ldr	r1, [r7, #24]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	617b      	str	r3, [r7, #20]
   return(result);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e4      	bne.n	800522a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f83c 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800526c:	e02a      	b.n	80052c4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00e      	beq.n	8005298 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800527a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01c      	beq.n	80052c8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
    }
    return;
 8005296:	e017      	b.n	80052c8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d012      	beq.n	80052ca <HAL_UART_IRQHandler+0x58e>
 80052a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00c      	beq.n	80052ca <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fd52 	bl	8005d5a <UART_EndTransmit_IT>
    return;
 80052b6:	e008      	b.n	80052ca <HAL_UART_IRQHandler+0x58e>
      return;
 80052b8:	bf00      	nop
 80052ba:	e006      	b.n	80052ca <HAL_UART_IRQHandler+0x58e>
    return;
 80052bc:	bf00      	nop
 80052be:	e004      	b.n	80052ca <HAL_UART_IRQHandler+0x58e>
      return;
 80052c0:	bf00      	nop
 80052c2:	e002      	b.n	80052ca <HAL_UART_IRQHandler+0x58e>
      return;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <HAL_UART_IRQHandler+0x58e>
    return;
 80052c8:	bf00      	nop
  }

}
 80052ca:	37e8      	adds	r7, #232	; 0xe8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4ba7      	ldr	r3, [pc, #668]	; (80055c4 <UART_SetConfig+0x2c8>)
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	430b      	orrs	r3, r1
 8005332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a95      	ldr	r2, [pc, #596]	; (80055c8 <UART_SetConfig+0x2cc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d120      	bne.n	80053ba <UART_SetConfig+0xbe>
 8005378:	4b94      	ldr	r3, [pc, #592]	; (80055cc <UART_SetConfig+0x2d0>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b03      	cmp	r3, #3
 8005384:	d816      	bhi.n	80053b4 <UART_SetConfig+0xb8>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0x90>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053a9 	.word	0x080053a9
 8005394:	080053a3 	.word	0x080053a3
 8005398:	080053af 	.word	0x080053af
 800539c:	2301      	movs	r3, #1
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e14f      	b.n	8005642 <UART_SetConfig+0x346>
 80053a2:	2302      	movs	r3, #2
 80053a4:	77fb      	strb	r3, [r7, #31]
 80053a6:	e14c      	b.n	8005642 <UART_SetConfig+0x346>
 80053a8:	2304      	movs	r3, #4
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	e149      	b.n	8005642 <UART_SetConfig+0x346>
 80053ae:	2308      	movs	r3, #8
 80053b0:	77fb      	strb	r3, [r7, #31]
 80053b2:	e146      	b.n	8005642 <UART_SetConfig+0x346>
 80053b4:	2310      	movs	r3, #16
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e143      	b.n	8005642 <UART_SetConfig+0x346>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a84      	ldr	r2, [pc, #528]	; (80055d0 <UART_SetConfig+0x2d4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d132      	bne.n	800542a <UART_SetConfig+0x12e>
 80053c4:	4b81      	ldr	r3, [pc, #516]	; (80055cc <UART_SetConfig+0x2d0>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d828      	bhi.n	8005424 <UART_SetConfig+0x128>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0xdc>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	0800540d 	.word	0x0800540d
 80053dc:	08005425 	.word	0x08005425
 80053e0:	08005425 	.word	0x08005425
 80053e4:	08005425 	.word	0x08005425
 80053e8:	08005419 	.word	0x08005419
 80053ec:	08005425 	.word	0x08005425
 80053f0:	08005425 	.word	0x08005425
 80053f4:	08005425 	.word	0x08005425
 80053f8:	08005413 	.word	0x08005413
 80053fc:	08005425 	.word	0x08005425
 8005400:	08005425 	.word	0x08005425
 8005404:	08005425 	.word	0x08005425
 8005408:	0800541f 	.word	0x0800541f
 800540c:	2300      	movs	r3, #0
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e117      	b.n	8005642 <UART_SetConfig+0x346>
 8005412:	2302      	movs	r3, #2
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e114      	b.n	8005642 <UART_SetConfig+0x346>
 8005418:	2304      	movs	r3, #4
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e111      	b.n	8005642 <UART_SetConfig+0x346>
 800541e:	2308      	movs	r3, #8
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e10e      	b.n	8005642 <UART_SetConfig+0x346>
 8005424:	2310      	movs	r3, #16
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e10b      	b.n	8005642 <UART_SetConfig+0x346>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a69      	ldr	r2, [pc, #420]	; (80055d4 <UART_SetConfig+0x2d8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d120      	bne.n	8005476 <UART_SetConfig+0x17a>
 8005434:	4b65      	ldr	r3, [pc, #404]	; (80055cc <UART_SetConfig+0x2d0>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800543e:	2b30      	cmp	r3, #48	; 0x30
 8005440:	d013      	beq.n	800546a <UART_SetConfig+0x16e>
 8005442:	2b30      	cmp	r3, #48	; 0x30
 8005444:	d814      	bhi.n	8005470 <UART_SetConfig+0x174>
 8005446:	2b20      	cmp	r3, #32
 8005448:	d009      	beq.n	800545e <UART_SetConfig+0x162>
 800544a:	2b20      	cmp	r3, #32
 800544c:	d810      	bhi.n	8005470 <UART_SetConfig+0x174>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <UART_SetConfig+0x15c>
 8005452:	2b10      	cmp	r3, #16
 8005454:	d006      	beq.n	8005464 <UART_SetConfig+0x168>
 8005456:	e00b      	b.n	8005470 <UART_SetConfig+0x174>
 8005458:	2300      	movs	r3, #0
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e0f1      	b.n	8005642 <UART_SetConfig+0x346>
 800545e:	2302      	movs	r3, #2
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e0ee      	b.n	8005642 <UART_SetConfig+0x346>
 8005464:	2304      	movs	r3, #4
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e0eb      	b.n	8005642 <UART_SetConfig+0x346>
 800546a:	2308      	movs	r3, #8
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e0e8      	b.n	8005642 <UART_SetConfig+0x346>
 8005470:	2310      	movs	r3, #16
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e0e5      	b.n	8005642 <UART_SetConfig+0x346>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a57      	ldr	r2, [pc, #348]	; (80055d8 <UART_SetConfig+0x2dc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d120      	bne.n	80054c2 <UART_SetConfig+0x1c6>
 8005480:	4b52      	ldr	r3, [pc, #328]	; (80055cc <UART_SetConfig+0x2d0>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800548a:	2bc0      	cmp	r3, #192	; 0xc0
 800548c:	d013      	beq.n	80054b6 <UART_SetConfig+0x1ba>
 800548e:	2bc0      	cmp	r3, #192	; 0xc0
 8005490:	d814      	bhi.n	80054bc <UART_SetConfig+0x1c0>
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d009      	beq.n	80054aa <UART_SetConfig+0x1ae>
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d810      	bhi.n	80054bc <UART_SetConfig+0x1c0>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <UART_SetConfig+0x1a8>
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d006      	beq.n	80054b0 <UART_SetConfig+0x1b4>
 80054a2:	e00b      	b.n	80054bc <UART_SetConfig+0x1c0>
 80054a4:	2300      	movs	r3, #0
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e0cb      	b.n	8005642 <UART_SetConfig+0x346>
 80054aa:	2302      	movs	r3, #2
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e0c8      	b.n	8005642 <UART_SetConfig+0x346>
 80054b0:	2304      	movs	r3, #4
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e0c5      	b.n	8005642 <UART_SetConfig+0x346>
 80054b6:	2308      	movs	r3, #8
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e0c2      	b.n	8005642 <UART_SetConfig+0x346>
 80054bc:	2310      	movs	r3, #16
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e0bf      	b.n	8005642 <UART_SetConfig+0x346>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a45      	ldr	r2, [pc, #276]	; (80055dc <UART_SetConfig+0x2e0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d125      	bne.n	8005518 <UART_SetConfig+0x21c>
 80054cc:	4b3f      	ldr	r3, [pc, #252]	; (80055cc <UART_SetConfig+0x2d0>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054da:	d017      	beq.n	800550c <UART_SetConfig+0x210>
 80054dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e0:	d817      	bhi.n	8005512 <UART_SetConfig+0x216>
 80054e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e6:	d00b      	beq.n	8005500 <UART_SetConfig+0x204>
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ec:	d811      	bhi.n	8005512 <UART_SetConfig+0x216>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <UART_SetConfig+0x1fe>
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d006      	beq.n	8005506 <UART_SetConfig+0x20a>
 80054f8:	e00b      	b.n	8005512 <UART_SetConfig+0x216>
 80054fa:	2300      	movs	r3, #0
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e0a0      	b.n	8005642 <UART_SetConfig+0x346>
 8005500:	2302      	movs	r3, #2
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e09d      	b.n	8005642 <UART_SetConfig+0x346>
 8005506:	2304      	movs	r3, #4
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e09a      	b.n	8005642 <UART_SetConfig+0x346>
 800550c:	2308      	movs	r3, #8
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e097      	b.n	8005642 <UART_SetConfig+0x346>
 8005512:	2310      	movs	r3, #16
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e094      	b.n	8005642 <UART_SetConfig+0x346>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a30      	ldr	r2, [pc, #192]	; (80055e0 <UART_SetConfig+0x2e4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d125      	bne.n	800556e <UART_SetConfig+0x272>
 8005522:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <UART_SetConfig+0x2d0>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800552c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005530:	d017      	beq.n	8005562 <UART_SetConfig+0x266>
 8005532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005536:	d817      	bhi.n	8005568 <UART_SetConfig+0x26c>
 8005538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553c:	d00b      	beq.n	8005556 <UART_SetConfig+0x25a>
 800553e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005542:	d811      	bhi.n	8005568 <UART_SetConfig+0x26c>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <UART_SetConfig+0x254>
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d006      	beq.n	800555c <UART_SetConfig+0x260>
 800554e:	e00b      	b.n	8005568 <UART_SetConfig+0x26c>
 8005550:	2301      	movs	r3, #1
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e075      	b.n	8005642 <UART_SetConfig+0x346>
 8005556:	2302      	movs	r3, #2
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e072      	b.n	8005642 <UART_SetConfig+0x346>
 800555c:	2304      	movs	r3, #4
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e06f      	b.n	8005642 <UART_SetConfig+0x346>
 8005562:	2308      	movs	r3, #8
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e06c      	b.n	8005642 <UART_SetConfig+0x346>
 8005568:	2310      	movs	r3, #16
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e069      	b.n	8005642 <UART_SetConfig+0x346>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <UART_SetConfig+0x2e8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d137      	bne.n	80055e8 <UART_SetConfig+0x2ec>
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <UART_SetConfig+0x2d0>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005582:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005586:	d017      	beq.n	80055b8 <UART_SetConfig+0x2bc>
 8005588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800558c:	d817      	bhi.n	80055be <UART_SetConfig+0x2c2>
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005592:	d00b      	beq.n	80055ac <UART_SetConfig+0x2b0>
 8005594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005598:	d811      	bhi.n	80055be <UART_SetConfig+0x2c2>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <UART_SetConfig+0x2aa>
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a2:	d006      	beq.n	80055b2 <UART_SetConfig+0x2b6>
 80055a4:	e00b      	b.n	80055be <UART_SetConfig+0x2c2>
 80055a6:	2300      	movs	r3, #0
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e04a      	b.n	8005642 <UART_SetConfig+0x346>
 80055ac:	2302      	movs	r3, #2
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e047      	b.n	8005642 <UART_SetConfig+0x346>
 80055b2:	2304      	movs	r3, #4
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e044      	b.n	8005642 <UART_SetConfig+0x346>
 80055b8:	2308      	movs	r3, #8
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e041      	b.n	8005642 <UART_SetConfig+0x346>
 80055be:	2310      	movs	r3, #16
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e03e      	b.n	8005642 <UART_SetConfig+0x346>
 80055c4:	efff69f3 	.word	0xefff69f3
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40004400 	.word	0x40004400
 80055d4:	40004800 	.word	0x40004800
 80055d8:	40004c00 	.word	0x40004c00
 80055dc:	40005000 	.word	0x40005000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	40007800 	.word	0x40007800
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a71      	ldr	r2, [pc, #452]	; (80057b4 <UART_SetConfig+0x4b8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d125      	bne.n	800563e <UART_SetConfig+0x342>
 80055f2:	4b71      	ldr	r3, [pc, #452]	; (80057b8 <UART_SetConfig+0x4bc>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005600:	d017      	beq.n	8005632 <UART_SetConfig+0x336>
 8005602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005606:	d817      	bhi.n	8005638 <UART_SetConfig+0x33c>
 8005608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560c:	d00b      	beq.n	8005626 <UART_SetConfig+0x32a>
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005612:	d811      	bhi.n	8005638 <UART_SetConfig+0x33c>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <UART_SetConfig+0x324>
 8005618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800561c:	d006      	beq.n	800562c <UART_SetConfig+0x330>
 800561e:	e00b      	b.n	8005638 <UART_SetConfig+0x33c>
 8005620:	2300      	movs	r3, #0
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e00d      	b.n	8005642 <UART_SetConfig+0x346>
 8005626:	2302      	movs	r3, #2
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e00a      	b.n	8005642 <UART_SetConfig+0x346>
 800562c:	2304      	movs	r3, #4
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e007      	b.n	8005642 <UART_SetConfig+0x346>
 8005632:	2308      	movs	r3, #8
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e004      	b.n	8005642 <UART_SetConfig+0x346>
 8005638:	2310      	movs	r3, #16
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e001      	b.n	8005642 <UART_SetConfig+0x346>
 800563e:	2310      	movs	r3, #16
 8005640:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564a:	d15a      	bne.n	8005702 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800564c:	7ffb      	ldrb	r3, [r7, #31]
 800564e:	2b08      	cmp	r3, #8
 8005650:	d827      	bhi.n	80056a2 <UART_SetConfig+0x3a6>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x35c>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	080056a3 	.word	0x080056a3
 8005668:	08005693 	.word	0x08005693
 800566c:	080056a3 	.word	0x080056a3
 8005670:	080056a3 	.word	0x080056a3
 8005674:	080056a3 	.word	0x080056a3
 8005678:	0800569b 	.word	0x0800569b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7fe faf4 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 8005680:	61b8      	str	r0, [r7, #24]
        break;
 8005682:	e013      	b.n	80056ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe fb04 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 8005688:	61b8      	str	r0, [r7, #24]
        break;
 800568a:	e00f      	b.n	80056ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800568c:	4b4b      	ldr	r3, [pc, #300]	; (80057bc <UART_SetConfig+0x4c0>)
 800568e:	61bb      	str	r3, [r7, #24]
        break;
 8005690:	e00c      	b.n	80056ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005692:	f7fe fa27 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8005696:	61b8      	str	r0, [r7, #24]
        break;
 8005698:	e008      	b.n	80056ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569e:	61bb      	str	r3, [r7, #24]
        break;
 80056a0:	e004      	b.n	80056ac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	77bb      	strb	r3, [r7, #30]
        break;
 80056aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d074      	beq.n	800579c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	005a      	lsls	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d916      	bls.n	80056fc <UART_SetConfig+0x400>
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d212      	bcs.n	80056fc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f023 030f 	bic.w	r3, r3, #15
 80056de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	89fb      	ldrh	r3, [r7, #14]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	89fa      	ldrh	r2, [r7, #14]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	e04f      	b.n	800579c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	77bb      	strb	r3, [r7, #30]
 8005700:	e04c      	b.n	800579c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005702:	7ffb      	ldrb	r3, [r7, #31]
 8005704:	2b08      	cmp	r3, #8
 8005706:	d828      	bhi.n	800575a <UART_SetConfig+0x45e>
 8005708:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x414>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	0800575b 	.word	0x0800575b
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800575b 	.word	0x0800575b
 8005728:	0800575b 	.word	0x0800575b
 800572c:	0800575b 	.word	0x0800575b
 8005730:	08005753 	.word	0x08005753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe fa98 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 8005738:	61b8      	str	r0, [r7, #24]
        break;
 800573a:	e013      	b.n	8005764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573c:	f7fe faa8 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 8005740:	61b8      	str	r0, [r7, #24]
        break;
 8005742:	e00f      	b.n	8005764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <UART_SetConfig+0x4c0>)
 8005746:	61bb      	str	r3, [r7, #24]
        break;
 8005748:	e00c      	b.n	8005764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574a:	f7fe f9cb 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 800574e:	61b8      	str	r0, [r7, #24]
        break;
 8005750:	e008      	b.n	8005764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005756:	61bb      	str	r3, [r7, #24]
        break;
 8005758:	e004      	b.n	8005764 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	77bb      	strb	r3, [r7, #30]
        break;
 8005762:	bf00      	nop
    }

    if (pclk != 0U)
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d018      	beq.n	800579c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	085a      	lsrs	r2, r3, #1
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	441a      	add	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b0f      	cmp	r3, #15
 8005782:	d909      	bls.n	8005798 <UART_SetConfig+0x49c>
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578a:	d205      	bcs.n	8005798 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e001      	b.n	800579c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3720      	adds	r7, #32
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40007c00 	.word	0x40007c00
 80057b8:	40023800 	.word	0x40023800
 80057bc:	00f42400 	.word	0x00f42400

080057c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01a      	beq.n	80058d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058be:	d10a      	bne.n	80058d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af02      	add	r7, sp, #8
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005914:	f7fb ffe6 	bl	80018e4 <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d10e      	bne.n	8005946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f817 	bl	800596a <UART_WaitOnFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e00d      	b.n	8005962 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b09c      	sub	sp, #112	; 0x70
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597a:	e0a5      	b.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	f000 80a1 	beq.w	8005ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fb ffad 	bl	80018e4 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <UART_WaitOnFlagUntilTimeout+0x32>
 8005996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005998:	2b00      	cmp	r3, #0
 800599a:	d13e      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059b0:	667b      	str	r3, [r7, #100]	; 0x64
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e6      	bne.n	800599c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3308      	adds	r3, #8
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	663b      	str	r3, [r7, #96]	; 0x60
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e5      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e067      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d04f      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a36:	d147      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
 8005a62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	613b      	str	r3, [r7, #16]
   return(result);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a94:	623a      	str	r2, [r7, #32]
 8005a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e010      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69da      	ldr	r2, [r3, #28]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	f43f af4a 	beq.w	800597c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3770      	adds	r7, #112	; 0x70
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b095      	sub	sp, #84	; 0x54
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e6      	bne.n	8005afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d118      	bne.n	8005b9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f023 0310 	bic.w	r3, r3, #16
 8005b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6979      	ldr	r1, [r7, #20]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	613b      	str	r3, [r7, #16]
   return(result);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e6      	bne.n	8005b68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005bac:	bf00      	nop
 8005bae:	3754      	adds	r7, #84	; 0x54
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff fb7a 	bl	80052d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b08f      	sub	sp, #60	; 0x3c
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf0:	2b21      	cmp	r3, #33	; 0x21
 8005bf2:	d14c      	bne.n	8005c8e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d132      	bne.n	8005c66 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c46:	633b      	str	r3, [r7, #48]	; 0x30
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6979      	ldr	r1, [r7, #20]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e6      	bne.n	8005c32 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005c64:	e013      	b.n	8005c8e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c8e:	bf00      	nop
 8005c90:	373c      	adds	r7, #60	; 0x3c
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b091      	sub	sp, #68	; 0x44
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca6:	2b21      	cmp	r3, #33	; 0x21
 8005ca8:	d151      	bne.n	8005d4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d132      	bne.n	8005d1c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	69b9      	ldr	r1, [r7, #24]
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	617b      	str	r3, [r7, #20]
   return(result);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e6      	bne.n	8005ce8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005d1a:	e018      	b.n	8005d4e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d30:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	1c9a      	adds	r2, r3, #2
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d4e:	bf00      	nop
 8005d50:	3744      	adds	r7, #68	; 0x44
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b088      	sub	sp, #32
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6979      	ldr	r1, [r7, #20]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e6      	bne.n	8005d62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fb f9f7 	bl	8001194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da6:	bf00      	nop
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005db6:	4ba0      	ldr	r3, [pc, #640]	; (8006038 <MX_LWIP_Init+0x288>)
 8005db8:	22c0      	movs	r2, #192	; 0xc0
 8005dba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005dbc:	4b9e      	ldr	r3, [pc, #632]	; (8006038 <MX_LWIP_Init+0x288>)
 8005dbe:	22a8      	movs	r2, #168	; 0xa8
 8005dc0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005dc2:	4b9d      	ldr	r3, [pc, #628]	; (8006038 <MX_LWIP_Init+0x288>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8005dc8:	4b9b      	ldr	r3, [pc, #620]	; (8006038 <MX_LWIP_Init+0x288>)
 8005dca:	226f      	movs	r2, #111	; 0x6f
 8005dcc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005dce:	4b9b      	ldr	r3, [pc, #620]	; (800603c <MX_LWIP_Init+0x28c>)
 8005dd0:	22ff      	movs	r2, #255	; 0xff
 8005dd2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005dd4:	4b99      	ldr	r3, [pc, #612]	; (800603c <MX_LWIP_Init+0x28c>)
 8005dd6:	22ff      	movs	r2, #255	; 0xff
 8005dd8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005dda:	4b98      	ldr	r3, [pc, #608]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ddc:	22ff      	movs	r2, #255	; 0xff
 8005dde:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005de0:	4b96      	ldr	r3, [pc, #600]	; (800603c <MX_LWIP_Init+0x28c>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005de6:	4b96      	ldr	r3, [pc, #600]	; (8006040 <MX_LWIP_Init+0x290>)
 8005de8:	22c0      	movs	r2, #192	; 0xc0
 8005dea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005dec:	4b94      	ldr	r3, [pc, #592]	; (8006040 <MX_LWIP_Init+0x290>)
 8005dee:	22a8      	movs	r2, #168	; 0xa8
 8005df0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005df2:	4b93      	ldr	r3, [pc, #588]	; (8006040 <MX_LWIP_Init+0x290>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005df8:	4b91      	ldr	r3, [pc, #580]	; (8006040 <MX_LWIP_Init+0x290>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005dfe:	2100      	movs	r1, #0
 8005e00:	2000      	movs	r0, #0
 8005e02:	f007 f835 	bl	800ce70 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005e06:	4b8c      	ldr	r3, [pc, #560]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	061a      	lsls	r2, r3, #24
 8005e0c:	4b8a      	ldr	r3, [pc, #552]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	431a      	orrs	r2, r3
 8005e14:	4b88      	ldr	r3, [pc, #544]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e16:	789b      	ldrb	r3, [r3, #2]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	4a86      	ldr	r2, [pc, #536]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e1e:	78d2      	ldrb	r2, [r2, #3]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	061a      	lsls	r2, r3, #24
 8005e24:	4b84      	ldr	r3, [pc, #528]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	0619      	lsls	r1, r3, #24
 8005e2a:	4b83      	ldr	r3, [pc, #524]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	4319      	orrs	r1, r3
 8005e32:	4b81      	ldr	r3, [pc, #516]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e34:	789b      	ldrb	r3, [r3, #2]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	497f      	ldr	r1, [pc, #508]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e3c:	78c9      	ldrb	r1, [r1, #3]
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e46:	431a      	orrs	r2, r3
 8005e48:	4b7b      	ldr	r3, [pc, #492]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	0619      	lsls	r1, r3, #24
 8005e4e:	4b7a      	ldr	r3, [pc, #488]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	4319      	orrs	r1, r3
 8005e56:	4b78      	ldr	r3, [pc, #480]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e58:	789b      	ldrb	r3, [r3, #2]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	4976      	ldr	r1, [pc, #472]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e60:	78c9      	ldrb	r1, [r1, #3]
 8005e62:	430b      	orrs	r3, r1
 8005e64:	0a1b      	lsrs	r3, r3, #8
 8005e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	4b72      	ldr	r3, [pc, #456]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	0619      	lsls	r1, r3, #24
 8005e72:	4b71      	ldr	r3, [pc, #452]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	4319      	orrs	r1, r3
 8005e7a:	4b6f      	ldr	r3, [pc, #444]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e7c:	789b      	ldrb	r3, [r3, #2]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	430b      	orrs	r3, r1
 8005e82:	496d      	ldr	r1, [pc, #436]	; (8006038 <MX_LWIP_Init+0x288>)
 8005e84:	78c9      	ldrb	r1, [r1, #3]
 8005e86:	430b      	orrs	r3, r1
 8005e88:	0e1b      	lsrs	r3, r3, #24
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	4a6d      	ldr	r2, [pc, #436]	; (8006044 <MX_LWIP_Init+0x294>)
 8005e8e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005e90:	4b6a      	ldr	r3, [pc, #424]	; (800603c <MX_LWIP_Init+0x28c>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	061a      	lsls	r2, r3, #24
 8005e96:	4b69      	ldr	r3, [pc, #420]	; (800603c <MX_LWIP_Init+0x28c>)
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	4b67      	ldr	r3, [pc, #412]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ea0:	789b      	ldrb	r3, [r3, #2]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	4a65      	ldr	r2, [pc, #404]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ea8:	78d2      	ldrb	r2, [r2, #3]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	061a      	lsls	r2, r3, #24
 8005eae:	4b63      	ldr	r3, [pc, #396]	; (800603c <MX_LWIP_Init+0x28c>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	0619      	lsls	r1, r3, #24
 8005eb4:	4b61      	ldr	r3, [pc, #388]	; (800603c <MX_LWIP_Init+0x28c>)
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	041b      	lsls	r3, r3, #16
 8005eba:	4319      	orrs	r1, r3
 8005ebc:	4b5f      	ldr	r3, [pc, #380]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ebe:	789b      	ldrb	r3, [r3, #2]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	495d      	ldr	r1, [pc, #372]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ec6:	78c9      	ldrb	r1, [r1, #3]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	4b5a      	ldr	r3, [pc, #360]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	0619      	lsls	r1, r3, #24
 8005ed8:	4b58      	ldr	r3, [pc, #352]	; (800603c <MX_LWIP_Init+0x28c>)
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	041b      	lsls	r3, r3, #16
 8005ede:	4319      	orrs	r1, r3
 8005ee0:	4b56      	ldr	r3, [pc, #344]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ee2:	789b      	ldrb	r3, [r3, #2]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	4954      	ldr	r1, [pc, #336]	; (800603c <MX_LWIP_Init+0x28c>)
 8005eea:	78c9      	ldrb	r1, [r1, #3]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	4b51      	ldr	r3, [pc, #324]	; (800603c <MX_LWIP_Init+0x28c>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	0619      	lsls	r1, r3, #24
 8005efc:	4b4f      	ldr	r3, [pc, #316]	; (800603c <MX_LWIP_Init+0x28c>)
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	4319      	orrs	r1, r3
 8005f04:	4b4d      	ldr	r3, [pc, #308]	; (800603c <MX_LWIP_Init+0x28c>)
 8005f06:	789b      	ldrb	r3, [r3, #2]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	494b      	ldr	r1, [pc, #300]	; (800603c <MX_LWIP_Init+0x28c>)
 8005f0e:	78c9      	ldrb	r1, [r1, #3]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	0e1b      	lsrs	r3, r3, #24
 8005f14:	4313      	orrs	r3, r2
 8005f16:	4a4c      	ldr	r2, [pc, #304]	; (8006048 <MX_LWIP_Init+0x298>)
 8005f18:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005f1a:	4b49      	ldr	r3, [pc, #292]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	061a      	lsls	r2, r3, #24
 8005f20:	4b47      	ldr	r3, [pc, #284]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	431a      	orrs	r2, r3
 8005f28:	4b45      	ldr	r3, [pc, #276]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f2a:	789b      	ldrb	r3, [r3, #2]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	4a43      	ldr	r2, [pc, #268]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f32:	78d2      	ldrb	r2, [r2, #3]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	061a      	lsls	r2, r3, #24
 8005f38:	4b41      	ldr	r3, [pc, #260]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	0619      	lsls	r1, r3, #24
 8005f3e:	4b40      	ldr	r3, [pc, #256]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	041b      	lsls	r3, r3, #16
 8005f44:	4319      	orrs	r1, r3
 8005f46:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	493c      	ldr	r1, [pc, #240]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f50:	78c9      	ldrb	r1, [r1, #3]
 8005f52:	430b      	orrs	r3, r1
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	4b38      	ldr	r3, [pc, #224]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	0619      	lsls	r1, r3, #24
 8005f62:	4b37      	ldr	r3, [pc, #220]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	4319      	orrs	r1, r3
 8005f6a:	4b35      	ldr	r3, [pc, #212]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f6c:	789b      	ldrb	r3, [r3, #2]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	430b      	orrs	r3, r1
 8005f72:	4933      	ldr	r1, [pc, #204]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f74:	78c9      	ldrb	r1, [r1, #3]
 8005f76:	430b      	orrs	r3, r1
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	0619      	lsls	r1, r3, #24
 8005f86:	4b2e      	ldr	r3, [pc, #184]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	4319      	orrs	r1, r3
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f90:	789b      	ldrb	r3, [r3, #2]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	430b      	orrs	r3, r1
 8005f96:	492a      	ldr	r1, [pc, #168]	; (8006040 <MX_LWIP_Init+0x290>)
 8005f98:	78c9      	ldrb	r1, [r1, #3]
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	0e1b      	lsrs	r3, r3, #24
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	; (800604c <MX_LWIP_Init+0x29c>)
 8005fa2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005fa4:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <MX_LWIP_Init+0x2a0>)
 8005fa6:	9302      	str	r3, [sp, #8]
 8005fa8:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <MX_LWIP_Init+0x2a4>)
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	4b26      	ldr	r3, [pc, #152]	; (800604c <MX_LWIP_Init+0x29c>)
 8005fb2:	4a25      	ldr	r2, [pc, #148]	; (8006048 <MX_LWIP_Init+0x298>)
 8005fb4:	4923      	ldr	r1, [pc, #140]	; (8006044 <MX_LWIP_Init+0x294>)
 8005fb6:	4828      	ldr	r0, [pc, #160]	; (8006058 <MX_LWIP_Init+0x2a8>)
 8005fb8:	f007 fcde 	bl	800d978 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005fbc:	4826      	ldr	r0, [pc, #152]	; (8006058 <MX_LWIP_Init+0x2a8>)
 8005fbe:	f007 fe8d 	bl	800dcdc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005fc2:	4b25      	ldr	r3, [pc, #148]	; (8006058 <MX_LWIP_Init+0x2a8>)
 8005fc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005fd4:	4820      	ldr	r0, [pc, #128]	; (8006058 <MX_LWIP_Init+0x2a8>)
 8005fd6:	f007 fe91 	bl	800dcfc <netif_set_up>
 8005fda:	e002      	b.n	8005fe2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005fdc:	481e      	ldr	r0, [pc, #120]	; (8006058 <MX_LWIP_Init+0x2a8>)
 8005fde:	f007 fef9 	bl	800ddd4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005fe2:	491e      	ldr	r1, [pc, #120]	; (800605c <MX_LWIP_Init+0x2ac>)
 8005fe4:	481c      	ldr	r0, [pc, #112]	; (8006058 <MX_LWIP_Init+0x2a8>)
 8005fe6:	f007 ff8b 	bl	800df00 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005fea:	2200      	movs	r2, #0
 8005fec:	2101      	movs	r1, #1
 8005fee:	2001      	movs	r0, #1
 8005ff0:	f000 fef6 	bl	8006de0 <osSemaphoreNew>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4a1a      	ldr	r2, [pc, #104]	; (8006060 <MX_LWIP_Init+0x2b0>)
 8005ff8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005ffa:	4b1a      	ldr	r3, [pc, #104]	; (8006064 <MX_LWIP_Init+0x2b4>)
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <MX_LWIP_Init+0x2a8>)
 8005ffe:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006000:	4b17      	ldr	r3, [pc, #92]	; (8006060 <MX_LWIP_Init+0x2b0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <MX_LWIP_Init+0x2b4>)
 8006006:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006008:	2224      	movs	r2, #36	; 0x24
 800600a:	2100      	movs	r1, #0
 800600c:	4816      	ldr	r0, [pc, #88]	; (8006068 <MX_LWIP_Init+0x2b8>)
 800600e:	f012 f86a 	bl	80180e6 <memset>
  attributes.name = "LinkThr";
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <MX_LWIP_Init+0x2b8>)
 8006014:	4a15      	ldr	r2, [pc, #84]	; (800606c <MX_LWIP_Init+0x2bc>)
 8006016:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006018:	4b13      	ldr	r3, [pc, #76]	; (8006068 <MX_LWIP_Init+0x2b8>)
 800601a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800601e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <MX_LWIP_Init+0x2b8>)
 8006022:	2210      	movs	r2, #16
 8006024:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <MX_LWIP_Init+0x2b8>)
 8006028:	490e      	ldr	r1, [pc, #56]	; (8006064 <MX_LWIP_Init+0x2b4>)
 800602a:	4811      	ldr	r0, [pc, #68]	; (8006070 <MX_LWIP_Init+0x2c0>)
 800602c:	f000 fcbc 	bl	80069a8 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006030:	bf00      	nop
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20004ed0 	.word	0x20004ed0
 800603c:	20004ecc 	.word	0x20004ecc
 8006040:	20004e6c 	.word	0x20004e6c
 8006044:	20004ec8 	.word	0x20004ec8
 8006048:	20004ed4 	.word	0x20004ed4
 800604c:	20004ed8 	.word	0x20004ed8
 8006050:	0800cd81 	.word	0x0800cd81
 8006054:	08006685 	.word	0x08006685
 8006058:	20004e94 	.word	0x20004e94
 800605c:	08006769 	.word	0x08006769
 8006060:	20000154 	.word	0x20000154
 8006064:	20004e64 	.word	0x20004e64
 8006068:	20004e70 	.word	0x20004e70
 800606c:	08019044 	.word	0x08019044
 8006070:	080066f1 	.word	0x080066f1

08006074 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08e      	sub	sp, #56	; 0x38
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800607c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	605a      	str	r2, [r3, #4]
 8006086:	609a      	str	r2, [r3, #8]
 8006088:	60da      	str	r2, [r3, #12]
 800608a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a44      	ldr	r2, [pc, #272]	; (80061a4 <HAL_ETH_MspInit+0x130>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f040 8081 	bne.w	800619a <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006098:	4b43      	ldr	r3, [pc, #268]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	4a42      	ldr	r2, [pc, #264]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 800609e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060a2:	6313      	str	r3, [r2, #48]	; 0x30
 80060a4:	4b40      	ldr	r3, [pc, #256]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ac:	623b      	str	r3, [r7, #32]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	4b3d      	ldr	r3, [pc, #244]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ba:	6313      	str	r3, [r2, #48]	; 0x30
 80060bc:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4b37      	ldr	r3, [pc, #220]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	4a36      	ldr	r2, [pc, #216]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060d2:	6313      	str	r3, [r2, #48]	; 0x30
 80060d4:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060e0:	4b31      	ldr	r3, [pc, #196]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	4a30      	ldr	r2, [pc, #192]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ea:	6313      	str	r3, [r2, #48]	; 0x30
 80060ec:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060f8:	4b2b      	ldr	r3, [pc, #172]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 80060fe:	f043 0304 	orr.w	r3, r3, #4
 8006102:	6313      	str	r3, [r2, #48]	; 0x30
 8006104:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	6313      	str	r3, [r2, #48]	; 0x30
 800611c:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <HAL_ETH_MspInit+0x134>)
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8006128:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612e:	2302      	movs	r3, #2
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006132:	2300      	movs	r3, #0
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006136:	2303      	movs	r3, #3
 8006138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800613a:	230b      	movs	r3, #11
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800613e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006142:	4619      	mov	r1, r3
 8006144:	4819      	ldr	r0, [pc, #100]	; (80061ac <HAL_ETH_MspInit+0x138>)
 8006146:	f7fc fef5 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800614a:	2332      	movs	r3, #50	; 0x32
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614e:	2302      	movs	r3, #2
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006156:	2303      	movs	r3, #3
 8006158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800615a:	230b      	movs	r3, #11
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800615e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006162:	4619      	mov	r1, r3
 8006164:	4812      	ldr	r0, [pc, #72]	; (80061b0 <HAL_ETH_MspInit+0x13c>)
 8006166:	f7fc fee5 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800616a:	2386      	movs	r3, #134	; 0x86
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616e:	2302      	movs	r3, #2
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006176:	2303      	movs	r3, #3
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800617a:	230b      	movs	r3, #11
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800617e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006182:	4619      	mov	r1, r3
 8006184:	480b      	ldr	r0, [pc, #44]	; (80061b4 <HAL_ETH_MspInit+0x140>)
 8006186:	f7fc fed5 	bl	8002f34 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	2105      	movs	r1, #5
 800618e:	203d      	movs	r0, #61	; 0x3d
 8006190:	f7fb fc90 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006194:	203d      	movs	r0, #61	; 0x3d
 8006196:	f7fb fca9 	bl	8001aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800619a:	bf00      	nop
 800619c:	3738      	adds	r7, #56	; 0x38
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40028000 	.word	0x40028000
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40021800 	.word	0x40021800
 80061b0:	40020800 	.word	0x40020800
 80061b4:	40020000 	.word	0x40020000

080061b8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <HAL_ETH_RxCpltCallback+0x1c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 ff0d 	bl	8006fe4 <osSemaphoreRelease>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000158 	.word	0x20000158

080061d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b090      	sub	sp, #64	; 0x40
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80061e4:	4b5d      	ldr	r3, [pc, #372]	; (800635c <low_level_init+0x184>)
 80061e6:	4a5e      	ldr	r2, [pc, #376]	; (8006360 <low_level_init+0x188>)
 80061e8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80061ea:	4b5c      	ldr	r3, [pc, #368]	; (800635c <low_level_init+0x184>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80061f0:	4b5a      	ldr	r3, [pc, #360]	; (800635c <low_level_init+0x184>)
 80061f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061f6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80061f8:	4b58      	ldr	r3, [pc, #352]	; (800635c <low_level_init+0x184>)
 80061fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061fe:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006200:	4b56      	ldr	r3, [pc, #344]	; (800635c <low_level_init+0x184>)
 8006202:	2200      	movs	r2, #0
 8006204:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006206:	2300      	movs	r3, #0
 8006208:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800620e:	23e1      	movs	r3, #225	; 0xe1
 8006210:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8006216:	2300      	movs	r3, #0
 8006218:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800621a:	2300      	movs	r3, #0
 800621c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800621e:	4a4f      	ldr	r2, [pc, #316]	; (800635c <low_level_init+0x184>)
 8006220:	f107 030c 	add.w	r3, r7, #12
 8006224:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006226:	4b4d      	ldr	r3, [pc, #308]	; (800635c <low_level_init+0x184>)
 8006228:	2201      	movs	r2, #1
 800622a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800622c:	4b4b      	ldr	r3, [pc, #300]	; (800635c <low_level_init+0x184>)
 800622e:	2200      	movs	r2, #0
 8006230:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006232:	4b4a      	ldr	r3, [pc, #296]	; (800635c <low_level_init+0x184>)
 8006234:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006238:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800623a:	4848      	ldr	r0, [pc, #288]	; (800635c <low_level_init+0x184>)
 800623c:	f7fb fcf6 	bl	8001c2c <HAL_ETH_Init>
 8006240:	4603      	mov	r3, r0
 8006242:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006246:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800624a:	2b00      	cmp	r3, #0
 800624c:	d108      	bne.n	8006260 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006254:	f043 0304 	orr.w	r3, r3, #4
 8006258:	b2da      	uxtb	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006260:	2304      	movs	r3, #4
 8006262:	4a40      	ldr	r2, [pc, #256]	; (8006364 <low_level_init+0x18c>)
 8006264:	4940      	ldr	r1, [pc, #256]	; (8006368 <low_level_init+0x190>)
 8006266:	483d      	ldr	r0, [pc, #244]	; (800635c <low_level_init+0x184>)
 8006268:	f7fb fe7a 	bl	8001f60 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800626c:	2304      	movs	r3, #4
 800626e:	4a3f      	ldr	r2, [pc, #252]	; (800636c <low_level_init+0x194>)
 8006270:	493f      	ldr	r1, [pc, #252]	; (8006370 <low_level_init+0x198>)
 8006272:	483a      	ldr	r0, [pc, #232]	; (800635c <low_level_init+0x184>)
 8006274:	f7fb fedd 	bl	8002032 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2206      	movs	r2, #6
 800627c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006280:	4b36      	ldr	r3, [pc, #216]	; (800635c <low_level_init+0x184>)
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	781a      	ldrb	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800628c:	4b33      	ldr	r3, [pc, #204]	; (800635c <low_level_init+0x184>)
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	785a      	ldrb	r2, [r3, #1]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006298:	4b30      	ldr	r3, [pc, #192]	; (800635c <low_level_init+0x184>)
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	789a      	ldrb	r2, [r3, #2]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80062a4:	4b2d      	ldr	r3, [pc, #180]	; (800635c <low_level_init+0x184>)
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	78da      	ldrb	r2, [r3, #3]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80062b0:	4b2a      	ldr	r3, [pc, #168]	; (800635c <low_level_init+0x184>)
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	791a      	ldrb	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80062bc:	4b27      	ldr	r3, [pc, #156]	; (800635c <low_level_init+0x184>)
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	795a      	ldrb	r2, [r3, #5]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80062ce:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062d6:	f043 030a 	orr.w	r3, r3, #10
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2101      	movs	r1, #1
 80062e6:	2001      	movs	r0, #1
 80062e8:	f000 fd7a 	bl	8006de0 <osSemaphoreNew>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4a21      	ldr	r2, [pc, #132]	; (8006374 <low_level_init+0x19c>)
 80062f0:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80062f2:	f107 0314 	add.w	r3, r7, #20
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f011 fef3 	bl	80180e6 <memset>
  attributes.name = "EthIf";
 8006300:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <low_level_init+0x1a0>)
 8006302:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006304:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800630a:	2330      	movs	r3, #48	; 0x30
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800630e:	f107 0314 	add.w	r3, r7, #20
 8006312:	461a      	mov	r2, r3
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4819      	ldr	r0, [pc, #100]	; (800637c <low_level_init+0x1a4>)
 8006318:	f000 fb46 	bl	80069a8 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800631c:	480f      	ldr	r0, [pc, #60]	; (800635c <low_level_init+0x184>)
 800631e:	f7fc f9b0 	bl	8002682 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006322:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006326:	461a      	mov	r2, r3
 8006328:	211d      	movs	r1, #29
 800632a:	480c      	ldr	r0, [pc, #48]	; (800635c <low_level_init+0x184>)
 800632c:	f7fc f8db 	bl	80024e6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	f043 030b 	orr.w	r3, r3, #11
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	461a      	mov	r2, r3
 800633c:	211d      	movs	r1, #29
 800633e:	4807      	ldr	r0, [pc, #28]	; (800635c <low_level_init+0x184>)
 8006340:	f7fc f939 	bl	80025b6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006344:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006348:	461a      	mov	r2, r3
 800634a:	211d      	movs	r1, #29
 800634c:	4803      	ldr	r0, [pc, #12]	; (800635c <low_level_init+0x184>)
 800634e:	f7fc f8ca 	bl	80024e6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006352:	bf00      	nop
 8006354:	3740      	adds	r7, #64	; 0x40
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	200067ac 	.word	0x200067ac
 8006360:	40028000 	.word	0x40028000
 8006364:	200067f4 	.word	0x200067f4
 8006368:	20004edc 	.word	0x20004edc
 800636c:	20004f5c 	.word	0x20004f5c
 8006370:	2000672c 	.word	0x2000672c
 8006374:	20000158 	.word	0x20000158
 8006378:	0801904c 	.word	0x0801904c
 800637c:	08006625 	.word	0x08006625

08006380 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800638a:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <low_level_output+0x138>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80063a2:	4b45      	ldr	r3, [pc, #276]	; (80064b8 <low_level_output+0x138>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	e05a      	b.n	8006468 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da03      	bge.n	80063c2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80063ba:	23f8      	movs	r3, #248	; 0xf8
 80063bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80063c0:	e05c      	b.n	800647c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	895b      	ldrh	r3, [r3, #10]
 80063c6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80063cc:	e02f      	b.n	800642e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	18d0      	adds	r0, r2, r3
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	18d1      	adds	r1, r2, r3
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	f011 fe70 	bl	80180ca <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da03      	bge.n	8006400 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80063f8:	23f8      	movs	r3, #248	; 0xf8
 80063fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80063fe:	e03d      	b.n	800647c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006410:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800641c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006428:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006438:	4293      	cmp	r3, r2
 800643a:	d8c8      	bhi.n	80063ce <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	18d0      	adds	r0, r2, r3
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4413      	add	r3, r2
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4619      	mov	r1, r3
 800644e:	f011 fe3c 	bl	80180ca <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	623b      	str	r3, [r7, #32]
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1a1      	bne.n	80063b2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800646e:	6979      	ldr	r1, [r7, #20]
 8006470:	4811      	ldr	r0, [pc, #68]	; (80064b8 <low_level_output+0x138>)
 8006472:	f7fb fe4b 	bl	800210c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <low_level_output+0x138>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	f241 0314 	movw	r3, #4116	; 0x1014
 8006484:	4413      	add	r3, r2
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00d      	beq.n	80064ac <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <low_level_output+0x138>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f241 0314 	movw	r3, #4116	; 0x1014
 8006498:	4413      	add	r3, r2
 800649a:	2220      	movs	r2, #32
 800649c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <low_level_output+0x138>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80064a6:	4413      	add	r3, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80064ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3728      	adds	r7, #40	; 0x28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200067ac 	.word	0x200067ac

080064bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80064e0:	484f      	ldr	r0, [pc, #316]	; (8006620 <low_level_input+0x164>)
 80064e2:	f7fb fefd 	bl	80022e0 <HAL_ETH_GetReceivedFrame_IT>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <low_level_input+0x34>

    return NULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e092      	b.n	8006616 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80064f0:	4b4b      	ldr	r3, [pc, #300]	; (8006620 <low_level_input+0x164>)
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80064f6:	4b4a      	ldr	r3, [pc, #296]	; (8006620 <low_level_input+0x164>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80064fc:	89fb      	ldrh	r3, [r7, #14]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006502:	89fb      	ldrh	r3, [r7, #14]
 8006504:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006508:	4619      	mov	r1, r3
 800650a:	2000      	movs	r0, #0
 800650c:	f007 fdc2 	bl	800e094 <pbuf_alloc>
 8006510:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d04b      	beq.n	80065b0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006518:	4b41      	ldr	r3, [pc, #260]	; (8006620 <low_level_input+0x164>)
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
 8006526:	e040      	b.n	80065aa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	895b      	ldrh	r3, [r3, #10]
 800652c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006532:	e021      	b.n	8006578 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	18d0      	adds	r0, r2, r3
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	18d1      	adds	r1, r2, r3
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	461a      	mov	r2, r3
 800654c:	f011 fdbd 	bl	80180ca <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4413      	add	r3, r2
 8006562:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006566:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006572:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006582:	4293      	cmp	r3, r2
 8006584:	d8d6      	bhi.n	8006534 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	18d0      	adds	r0, r2, r3
 800658e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4619      	mov	r1, r3
 8006598:	f011 fd97 	bl	80180ca <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1bb      	bne.n	8006528 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <low_level_input+0x164>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	e00b      	b.n	80065d4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3301      	adds	r3, #1
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	4b12      	ldr	r3, [pc, #72]	; (8006620 <low_level_input+0x164>)
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d3ee      	bcc.n	80065bc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <low_level_input+0x164>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <low_level_input+0x164>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80065ec:	4413      	add	r3, r2
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00d      	beq.n	8006614 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <low_level_input+0x164>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8006600:	4413      	add	r3, r2
 8006602:	2280      	movs	r2, #128	; 0x80
 8006604:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <low_level_input+0x164>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	f241 0308 	movw	r3, #4104	; 0x1008
 800660e:	4413      	add	r3, r2
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006616:	4618      	mov	r0, r3
 8006618:	3730      	adds	r7, #48	; 0x30
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200067ac 	.word	0x200067ac

08006624 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006630:	4b12      	ldr	r3, [pc, #72]	; (800667c <ethernetif_input+0x58>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f04f 31ff 	mov.w	r1, #4294967295
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fc6d 	bl	8006f18 <osSemaphoreAcquire>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f5      	bne.n	8006630 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006644:	480e      	ldr	r0, [pc, #56]	; (8006680 <ethernetif_input+0x5c>)
 8006646:	f011 fbbb 	bl	8017dc0 <sys_mutex_lock>
        p = low_level_input( netif );
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff ff36 	bl	80064bc <low_level_input>
 8006650:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	68f9      	ldr	r1, [r7, #12]
 800665e:	68b8      	ldr	r0, [r7, #8]
 8006660:	4798      	blx	r3
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006668:	68b8      	ldr	r0, [r7, #8]
 800666a:	f007 fff7 	bl	800e65c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800666e:	4804      	ldr	r0, [pc, #16]	; (8006680 <ethernetif_input+0x5c>)
 8006670:	f011 fbb5 	bl	8017dde <sys_mutex_unlock>
      } while(p!=NULL);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e4      	bne.n	8006644 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800667a:	e7d9      	b.n	8006630 <ethernetif_input+0xc>
 800667c:	20000158 	.word	0x20000158
 8006680:	20008004 	.word	0x20008004

08006684 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <ethernetif_init+0x1c>
 8006692:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <ethernetif_init+0x48>)
 8006694:	f240 2231 	movw	r2, #561	; 0x231
 8006698:	490d      	ldr	r1, [pc, #52]	; (80066d0 <ethernetif_init+0x4c>)
 800669a:	480e      	ldr	r0, [pc, #56]	; (80066d4 <ethernetif_init+0x50>)
 800669c:	f011 fd86 	bl	80181ac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2273      	movs	r2, #115	; 0x73
 80066a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2274      	movs	r2, #116	; 0x74
 80066ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a09      	ldr	r2, [pc, #36]	; (80066d8 <ethernetif_init+0x54>)
 80066b4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a08      	ldr	r2, [pc, #32]	; (80066dc <ethernetif_init+0x58>)
 80066ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fd8b 	bl	80061d8 <low_level_init>

  return ERR_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	08019054 	.word	0x08019054
 80066d0:	08019070 	.word	0x08019070
 80066d4:	08019080 	.word	0x08019080
 80066d8:	08015e21 	.word	0x08015e21
 80066dc:	08006381 	.word	0x08006381

080066e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80066e4:	f7fb f8fe 	bl	80018e4 <HAL_GetTick>
 80066e8:	4603      	mov	r3, r0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	461a      	mov	r2, r3
 8006706:	2101      	movs	r1, #1
 8006708:	4816      	ldr	r0, [pc, #88]	; (8006764 <ethernetif_set_link+0x74>)
 800670a:	f7fb feec 	bl	80024e6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d108      	bne.n	8006738 <ethernetif_set_link+0x48>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f007 fb81 	bl	800de38 <netif_set_link_up>
 8006736:	e011      	b.n	800675c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006740:	089b      	lsrs	r3, r3, #2
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <ethernetif_set_link+0x6c>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d104      	bne.n	800675c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f007 fba2 	bl	800dea0 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800675c:	20c8      	movs	r0, #200	; 0xc8
 800675e:	f000 f9c9 	bl	8006af4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006762:	e7cd      	b.n	8006700 <ethernetif_set_link+0x10>
 8006764:	200067ac 	.word	0x200067ac

08006768 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800677e:	089b      	lsrs	r3, r3, #2
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d05d      	beq.n	8006846 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800678a:	4b34      	ldr	r3, [pc, #208]	; (800685c <ethernetif_update_config+0xf4>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d03f      	beq.n	8006812 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006792:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006796:	2100      	movs	r1, #0
 8006798:	4830      	ldr	r0, [pc, #192]	; (800685c <ethernetif_update_config+0xf4>)
 800679a:	f7fb ff0c 	bl	80025b6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800679e:	f7fb f8a1 	bl	80018e4 <HAL_GetTick>
 80067a2:	4603      	mov	r3, r0
 80067a4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80067a6:	f107 0308 	add.w	r3, r7, #8
 80067aa:	461a      	mov	r2, r3
 80067ac:	2101      	movs	r1, #1
 80067ae:	482b      	ldr	r0, [pc, #172]	; (800685c <ethernetif_update_config+0xf4>)
 80067b0:	f7fb fe99 	bl	80024e6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80067b4:	f7fb f896 	bl	80018e4 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c2:	d828      	bhi.n	8006816 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0eb      	beq.n	80067a6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80067ce:	f107 0308 	add.w	r3, r7, #8
 80067d2:	461a      	mov	r2, r3
 80067d4:	2110      	movs	r1, #16
 80067d6:	4821      	ldr	r0, [pc, #132]	; (800685c <ethernetif_update_config+0xf4>)
 80067d8:	f7fb fe85 	bl	80024e6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80067e6:	4b1d      	ldr	r3, [pc, #116]	; (800685c <ethernetif_update_config+0xf4>)
 80067e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	e002      	b.n	80067f6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80067f0:	4b1a      	ldr	r3, [pc, #104]	; (800685c <ethernetif_update_config+0xf4>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006800:	4b16      	ldr	r3, [pc, #88]	; (800685c <ethernetif_update_config+0xf4>)
 8006802:	2200      	movs	r2, #0
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	e016      	b.n	8006836 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006808:	4b14      	ldr	r3, [pc, #80]	; (800685c <ethernetif_update_config+0xf4>)
 800680a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800680e:	609a      	str	r2, [r3, #8]
 8006810:	e011      	b.n	8006836 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006812:	bf00      	nop
 8006814:	e000      	b.n	8006818 <ethernetif_update_config+0xb0>
          goto error;
 8006816:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <ethernetif_update_config+0xf4>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	08db      	lsrs	r3, r3, #3
 800681e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006820:	4b0e      	ldr	r3, [pc, #56]	; (800685c <ethernetif_update_config+0xf4>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	085b      	lsrs	r3, r3, #1
 8006826:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006828:	4313      	orrs	r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	2100      	movs	r1, #0
 8006830:	480a      	ldr	r0, [pc, #40]	; (800685c <ethernetif_update_config+0xf4>)
 8006832:	f7fb fec0 	bl	80025b6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006836:	2100      	movs	r1, #0
 8006838:	4808      	ldr	r0, [pc, #32]	; (800685c <ethernetif_update_config+0xf4>)
 800683a:	f7fb ff81 	bl	8002740 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800683e:	4807      	ldr	r0, [pc, #28]	; (800685c <ethernetif_update_config+0xf4>)
 8006840:	f7fb ff1f 	bl	8002682 <HAL_ETH_Start>
 8006844:	e002      	b.n	800684c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006846:	4805      	ldr	r0, [pc, #20]	; (800685c <ethernetif_update_config+0xf4>)
 8006848:	f7fb ff4a 	bl	80026e0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f807 	bl	8006860 <ethernetif_notify_conn_changed>
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200067ac 	.word	0x200067ac

08006860 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006878:	bf00      	nop
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800688a:	f3ef 8305 	mrs	r3, IPSR
 800688e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006890:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10f      	bne.n	80068b6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006896:	f3ef 8310 	mrs	r3, PRIMASK
 800689a:	607b      	str	r3, [r7, #4]
  return(result);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068a2:	f3ef 8311 	mrs	r3, BASEPRI
 80068a6:	603b      	str	r3, [r7, #0]
  return(result);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <osKernelInitialize+0x3a>
 80068ae:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <osKernelInitialize+0x64>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d103      	bne.n	80068be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80068b6:	f06f 0305 	mvn.w	r3, #5
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e00c      	b.n	80068d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068be:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <osKernelInitialize+0x64>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d105      	bne.n	80068d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068c6:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <osKernelInitialize+0x64>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e002      	b.n	80068d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80068d2:	f04f 33ff 	mov.w	r3, #4294967295
 80068d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	2000015c 	.word	0x2000015c

080068ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068f2:	f3ef 8305 	mrs	r3, IPSR
 80068f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10f      	bne.n	800691e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006902:	607b      	str	r3, [r7, #4]
  return(result);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800690a:	f3ef 8311 	mrs	r3, BASEPRI
 800690e:	603b      	str	r3, [r7, #0]
  return(result);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <osKernelStart+0x3a>
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <osKernelStart+0x68>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d103      	bne.n	8006926 <osKernelStart+0x3a>
    stat = osErrorISR;
 800691e:	f06f 0305 	mvn.w	r3, #5
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	e010      	b.n	8006948 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <osKernelStart+0x68>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d109      	bne.n	8006942 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800692e:	f7ff ffa1 	bl	8006874 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <osKernelStart+0x68>)
 8006934:	2202      	movs	r2, #2
 8006936:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006938:	f002 f9e4 	bl	8008d04 <vTaskStartScheduler>
      stat = osOK;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e002      	b.n	8006948 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006942:	f04f 33ff 	mov.w	r3, #4294967295
 8006946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006948:	68fb      	ldr	r3, [r7, #12]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	2000015c 	.word	0x2000015c

08006958 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800695e:	f3ef 8305 	mrs	r3, IPSR
 8006962:	60bb      	str	r3, [r7, #8]
  return(result);
 8006964:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10f      	bne.n	800698a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696a:	f3ef 8310 	mrs	r3, PRIMASK
 800696e:	607b      	str	r3, [r7, #4]
  return(result);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d105      	bne.n	8006982 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006976:	f3ef 8311 	mrs	r3, BASEPRI
 800697a:	603b      	str	r3, [r7, #0]
  return(result);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <osKernelGetTickCount+0x3a>
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <osKernelGetTickCount+0x4c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d103      	bne.n	8006992 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800698a:	f002 faed 	bl	8008f68 <xTaskGetTickCountFromISR>
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	e002      	b.n	8006998 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006992:	f002 fad9 	bl	8008f48 <xTaskGetTickCount>
 8006996:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006998:	68fb      	ldr	r3, [r7, #12]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	2000015c 	.word	0x2000015c

080069a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b090      	sub	sp, #64	; 0x40
 80069ac:	af04      	add	r7, sp, #16
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b8:	f3ef 8305 	mrs	r3, IPSR
 80069bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80069be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 808f 	bne.w	8006ae4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c6:	f3ef 8310 	mrs	r3, PRIMASK
 80069ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069d2:	f3ef 8311 	mrs	r3, BASEPRI
 80069d6:	617b      	str	r3, [r7, #20]
  return(result);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <osThreadNew+0x3e>
 80069de:	4b44      	ldr	r3, [pc, #272]	; (8006af0 <osThreadNew+0x148>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d07e      	beq.n	8006ae4 <osThreadNew+0x13c>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d07b      	beq.n	8006ae4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80069ec:	2380      	movs	r3, #128	; 0x80
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80069f0:	2318      	movs	r3, #24
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295
 80069fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d045      	beq.n	8006a90 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <osThreadNew+0x6a>
        name = attr->name;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <osThreadNew+0x90>
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	2b38      	cmp	r3, #56	; 0x38
 8006a2a:	d805      	bhi.n	8006a38 <osThreadNew+0x90>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <osThreadNew+0x94>
        return (NULL);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e054      	b.n	8006ae6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	089b      	lsrs	r3, r3, #2
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <osThreadNew+0xca>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2bbb      	cmp	r3, #187	; 0xbb
 8006a5a:	d90a      	bls.n	8006a72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d006      	beq.n	8006a72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <osThreadNew+0xca>
        mem = 1;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	623b      	str	r3, [r7, #32]
 8006a70:	e010      	b.n	8006a94 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10c      	bne.n	8006a94 <osThreadNew+0xec>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d108      	bne.n	8006a94 <osThreadNew+0xec>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <osThreadNew+0xec>
          mem = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	e001      	b.n	8006a94 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d110      	bne.n	8006abc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006aa2:	9202      	str	r2, [sp, #8]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f001 ff31 	bl	8008918 <xTaskCreateStatic>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	e013      	b.n	8006ae4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d110      	bne.n	8006ae4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f107 0310 	add.w	r3, r7, #16
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 ff82 	bl	80089de <xTaskCreate>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d001      	beq.n	8006ae4 <osThreadNew+0x13c>
          hTask = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ae4:	693b      	ldr	r3, [r7, #16]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3730      	adds	r7, #48	; 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2000015c 	.word	0x2000015c

08006af4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006afc:	f3ef 8305 	mrs	r3, IPSR
 8006b00:	613b      	str	r3, [r7, #16]
  return(result);
 8006b02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10f      	bne.n	8006b28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b08:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b14:	f3ef 8311 	mrs	r3, BASEPRI
 8006b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <osDelay+0x3c>
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <osDelay+0x58>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d103      	bne.n	8006b30 <osDelay+0x3c>
    stat = osErrorISR;
 8006b28:	f06f 0305 	mvn.w	r3, #5
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e007      	b.n	8006b40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f002 f8ac 	bl	8008c98 <vTaskDelay>
    }
  }

  return (stat);
 8006b40:	697b      	ldr	r3, [r7, #20]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2000015c 	.word	0x2000015c

08006b50 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	; 0x28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5c:	f3ef 8305 	mrs	r3, IPSR
 8006b60:	613b      	str	r3, [r7, #16]
  return(result);
 8006b62:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 8085 	bne.w	8006c74 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b76:	f3ef 8311 	mrs	r3, BASEPRI
 8006b7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <osMutexNew+0x3a>
 8006b82:	4b3f      	ldr	r3, [pc, #252]	; (8006c80 <osMutexNew+0x130>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d074      	beq.n	8006c74 <osMutexNew+0x124>
    if (attr != NULL) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	e001      	b.n	8006b9c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <osMutexNew+0x5c>
      rmtx = 1U;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	e001      	b.n	8006bb0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d15c      	bne.n	8006c74 <osMutexNew+0x124>
      mem = -1;
 8006bba:	f04f 33ff 	mov.w	r3, #4294967295
 8006bbe:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d015      	beq.n	8006bf2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <osMutexNew+0x8c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2b4f      	cmp	r3, #79	; 0x4f
 8006bd4:	d902      	bls.n	8006bdc <osMutexNew+0x8c>
          mem = 1;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	e00c      	b.n	8006bf6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <osMutexNew+0xa6>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <osMutexNew+0xa6>
            mem = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e001      	b.n	8006bf6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d112      	bne.n	8006c22 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	4619      	mov	r1, r3
 8006c08:	2004      	movs	r0, #4
 8006c0a:	f000 feb8 	bl	800797e <xQueueCreateMutexStatic>
 8006c0e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c10:	e016      	b.n	8006c40 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	4619      	mov	r1, r3
 8006c18:	2001      	movs	r0, #1
 8006c1a:	f000 feb0 	bl	800797e <xQueueCreateMutexStatic>
 8006c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c20:	e00e      	b.n	8006c40 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d004      	beq.n	8006c38 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006c2e:	2004      	movs	r0, #4
 8006c30:	f000 fe8d 	bl	800794e <xQueueCreateMutex>
 8006c34:	6278      	str	r0, [r7, #36]	; 0x24
 8006c36:	e003      	b.n	8006c40 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006c38:	2001      	movs	r0, #1
 8006c3a:	f000 fe88 	bl	800794e <xQueueCreateMutex>
 8006c3e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <osMutexNew+0x110>
        if (attr != NULL) {
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <osMutexNew+0x104>
          name = attr->name;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e001      	b.n	8006c58 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c5c:	f001 fdd4 	bl	8008808 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d006      	beq.n	8006c74 <osMutexNew+0x124>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3728      	adds	r7, #40	; 0x28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	2000015c 	.word	0x2000015c

08006c84 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca2:	f3ef 8305 	mrs	r3, IPSR
 8006ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ca8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10f      	bne.n	8006cce <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cae:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d105      	bne.n	8006cc6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cba:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <osMutexAcquire+0x52>
 8006cc6:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <osMutexAcquire+0xb8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d103      	bne.n	8006cd6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006cce:	f06f 0305 	mvn.w	r3, #5
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e02c      	b.n	8006d30 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d103      	bne.n	8006ce4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006cdc:	f06f 0303 	mvn.w	r3, #3
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	e025      	b.n	8006d30 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d011      	beq.n	8006d0e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f000 fe97 	bl	8007a20 <xQueueTakeMutexRecursive>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d01b      	beq.n	8006d30 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006cfe:	f06f 0301 	mvn.w	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	e014      	b.n	8006d30 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006d06:	f06f 0302 	mvn.w	r3, #2
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e010      	b.n	8006d30 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	69b8      	ldr	r0, [r7, #24]
 8006d12:	f001 fa51 	bl	80081b8 <xQueueSemaphoreTake>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d009      	beq.n	8006d30 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006d22:	f06f 0301 	mvn.w	r3, #1
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	e002      	b.n	8006d30 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006d2a:	f06f 0302 	mvn.w	r3, #2
 8006d2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006d30:	69fb      	ldr	r3, [r7, #28]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3720      	adds	r7, #32
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	2000015c 	.word	0x2000015c

08006d40 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5c:	f3ef 8305 	mrs	r3, IPSR
 8006d60:	613b      	str	r3, [r7, #16]
  return(result);
 8006d62:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10f      	bne.n	8006d88 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d68:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d74:	f3ef 8311 	mrs	r3, BASEPRI
 8006d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <osMutexRelease+0x50>
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <osMutexRelease+0x9c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d103      	bne.n	8006d90 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006d88:	f06f 0305 	mvn.w	r3, #5
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e01f      	b.n	8006dd0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006d96:	f06f 0303 	mvn.w	r3, #3
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	e018      	b.n	8006dd0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006da4:	69b8      	ldr	r0, [r7, #24]
 8006da6:	f000 fe05 	bl	80079b4 <xQueueGiveMutexRecursive>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d00f      	beq.n	8006dd0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006db0:	f06f 0302 	mvn.w	r3, #2
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e00b      	b.n	8006dd0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006db8:	2300      	movs	r3, #0
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	69b8      	ldr	r0, [r7, #24]
 8006dc0:	f000 fed8 	bl	8007b74 <xQueueGenericSend>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d002      	beq.n	8006dd0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006dca:	f06f 0302 	mvn.w	r3, #2
 8006dce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	2000015c 	.word	0x2000015c

08006de0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df0:	f3ef 8305 	mrs	r3, IPSR
 8006df4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006df6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 8086 	bne.w	8006f0a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8006e02:	617b      	str	r3, [r7, #20]
  return(result);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e0e:	613b      	str	r3, [r7, #16]
  return(result);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <osSemaphoreNew+0x3e>
 8006e16:	4b3f      	ldr	r3, [pc, #252]	; (8006f14 <osSemaphoreNew+0x134>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d075      	beq.n	8006f0a <osSemaphoreNew+0x12a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d072      	beq.n	8006f0a <osSemaphoreNew+0x12a>
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d86e      	bhi.n	8006f0a <osSemaphoreNew+0x12a>
    mem = -1;
 8006e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d015      	beq.n	8006e64 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d006      	beq.n	8006e4e <osSemaphoreNew+0x6e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b4f      	cmp	r3, #79	; 0x4f
 8006e46:	d902      	bls.n	8006e4e <osSemaphoreNew+0x6e>
        mem = 1;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	623b      	str	r3, [r7, #32]
 8006e4c:	e00c      	b.n	8006e68 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d108      	bne.n	8006e68 <osSemaphoreNew+0x88>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <osSemaphoreNew+0x88>
          mem = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	623b      	str	r3, [r7, #32]
 8006e62:	e001      	b.n	8006e68 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d04c      	beq.n	8006f0a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d128      	bne.n	8006ec8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10a      	bne.n	8006e92 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2203      	movs	r2, #3
 8006e82:	9200      	str	r2, [sp, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f000 fc5f 	bl	800774c <xQueueGenericCreateStatic>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e90:	e005      	b.n	8006e9e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006e92:	2203      	movs	r2, #3
 8006e94:	2100      	movs	r1, #0
 8006e96:	2001      	movs	r0, #1
 8006e98:	f000 fcda 	bl	8007850 <xQueueGenericCreate>
 8006e9c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d022      	beq.n	8006eea <osSemaphoreNew+0x10a>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01f      	beq.n	8006eea <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eb2:	f000 fe5f 	bl	8007b74 <xQueueGenericSend>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d016      	beq.n	8006eea <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ebe:	f001 fb55 	bl	800856c <vQueueDelete>
            hSemaphore = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec6:	e010      	b.n	8006eea <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d108      	bne.n	8006ee0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fdda 	bl	8007a90 <xQueueCreateCountingSemaphoreStatic>
 8006edc:	6278      	str	r0, [r7, #36]	; 0x24
 8006ede:	e004      	b.n	8006eea <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 fe0f 	bl	8007b06 <xQueueCreateCountingSemaphore>
 8006ee8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00c      	beq.n	8006f0a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <osSemaphoreNew+0x11e>
          name = attr->name;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	e001      	b.n	8006f02 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006f02:	69f9      	ldr	r1, [r7, #28]
 8006f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f06:	f001 fc7f 	bl	8008808 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3728      	adds	r7, #40	; 0x28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	2000015c 	.word	0x2000015c

08006f18 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006f30:	f06f 0303 	mvn.w	r3, #3
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	e04b      	b.n	8006fd0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f38:	f3ef 8305 	mrs	r3, IPSR
 8006f3c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f3e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10f      	bne.n	8006f64 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
 8006f48:	613b      	str	r3, [r7, #16]
  return(result);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f50:	f3ef 8311 	mrs	r3, BASEPRI
 8006f54:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d026      	beq.n	8006faa <osSemaphoreAcquire+0x92>
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <osSemaphoreAcquire+0xc4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d122      	bne.n	8006faa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006f6a:	f06f 0303 	mvn.w	r3, #3
 8006f6e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006f70:	e02d      	b.n	8006fce <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	69b8      	ldr	r0, [r7, #24]
 8006f80:	f001 fa2e 	bl	80083e0 <xQueueReceiveFromISR>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d003      	beq.n	8006f92 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006f8a:	f06f 0302 	mvn.w	r3, #2
 8006f8e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006f90:	e01d      	b.n	8006fce <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01a      	beq.n	8006fce <osSemaphoreAcquire+0xb6>
 8006f98:	4b11      	ldr	r3, [pc, #68]	; (8006fe0 <osSemaphoreAcquire+0xc8>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006fa8:	e011      	b.n	8006fce <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	69b8      	ldr	r0, [r7, #24]
 8006fae:	f001 f903 	bl	80081b8 <xQueueSemaphoreTake>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d00b      	beq.n	8006fd0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006fbe:	f06f 0301 	mvn.w	r3, #1
 8006fc2:	61fb      	str	r3, [r7, #28]
 8006fc4:	e004      	b.n	8006fd0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006fc6:	f06f 0302 	mvn.w	r3, #2
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e000      	b.n	8006fd0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006fce:	bf00      	nop
      }
    }
  }

  return (stat);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3720      	adds	r7, #32
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2000015c 	.word	0x2000015c
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d103      	bne.n	8007002 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006ffa:	f06f 0303 	mvn.w	r3, #3
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e03e      	b.n	8007080 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007002:	f3ef 8305 	mrs	r3, IPSR
 8007006:	617b      	str	r3, [r7, #20]
  return(result);
 8007008:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10f      	bne.n	800702e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700e:	f3ef 8310 	mrs	r3, PRIMASK
 8007012:	613b      	str	r3, [r7, #16]
  return(result);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800701a:	f3ef 8311 	mrs	r3, BASEPRI
 800701e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01e      	beq.n	8007064 <osSemaphoreRelease+0x80>
 8007026:	4b19      	ldr	r3, [pc, #100]	; (800708c <osSemaphoreRelease+0xa8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d11a      	bne.n	8007064 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007032:	f107 0308 	add.w	r3, r7, #8
 8007036:	4619      	mov	r1, r3
 8007038:	69b8      	ldr	r0, [r7, #24]
 800703a:	f000 ff41 	bl	8007ec0 <xQueueGiveFromISR>
 800703e:	4603      	mov	r3, r0
 8007040:	2b01      	cmp	r3, #1
 8007042:	d003      	beq.n	800704c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007044:	f06f 0302 	mvn.w	r3, #2
 8007048:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800704a:	e018      	b.n	800707e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d015      	beq.n	800707e <osSemaphoreRelease+0x9a>
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <osSemaphoreRelease+0xac>)
 8007054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007062:	e00c      	b.n	800707e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007064:	2300      	movs	r3, #0
 8007066:	2200      	movs	r2, #0
 8007068:	2100      	movs	r1, #0
 800706a:	69b8      	ldr	r0, [r7, #24]
 800706c:	f000 fd82 	bl	8007b74 <xQueueGenericSend>
 8007070:	4603      	mov	r3, r0
 8007072:	2b01      	cmp	r3, #1
 8007074:	d004      	beq.n	8007080 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007076:	f06f 0302 	mvn.w	r3, #2
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	e000      	b.n	8007080 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800707e:	bf00      	nop
    }
  }

  return (stat);
 8007080:	69fb      	ldr	r3, [r7, #28]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	2000015c 	.word	0x2000015c
 8007090:	e000ed04 	.word	0xe000ed04

08007094 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a0:	f3ef 8305 	mrs	r3, IPSR
 80070a4:	617b      	str	r3, [r7, #20]
  return(result);
 80070a6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10f      	bne.n	80070cc <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ac:	f3ef 8310 	mrs	r3, PRIMASK
 80070b0:	613b      	str	r3, [r7, #16]
  return(result);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d105      	bne.n	80070c4 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070b8:	f3ef 8311 	mrs	r3, BASEPRI
 80070bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <osSemaphoreDelete+0x40>
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <osSemaphoreDelete+0x68>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d103      	bne.n	80070d4 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80070cc:	f06f 0305 	mvn.w	r3, #5
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e00e      	b.n	80070f2 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80070da:	f06f 0303 	mvn.w	r3, #3
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e007      	b.n	80070f2 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80070e2:	69b8      	ldr	r0, [r7, #24]
 80070e4:	f001 fbba 	bl	800885c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80070ec:	69b8      	ldr	r0, [r7, #24]
 80070ee:	f001 fa3d 	bl	800856c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80070f2:	69fb      	ldr	r3, [r7, #28]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	2000015c 	.word	0x2000015c

08007100 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	; 0x30
 8007104:	af02      	add	r7, sp, #8
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007110:	f3ef 8305 	mrs	r3, IPSR
 8007114:	61bb      	str	r3, [r7, #24]
  return(result);
 8007116:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007118:	2b00      	cmp	r3, #0
 800711a:	d16f      	bne.n	80071fc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800711c:	f3ef 8310 	mrs	r3, PRIMASK
 8007120:	617b      	str	r3, [r7, #20]
  return(result);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007128:	f3ef 8311 	mrs	r3, BASEPRI
 800712c:	613b      	str	r3, [r7, #16]
  return(result);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <osMessageQueueNew+0x3c>
 8007134:	4b34      	ldr	r3, [pc, #208]	; (8007208 <osMessageQueueNew+0x108>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d05f      	beq.n	80071fc <osMessageQueueNew+0xfc>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d05c      	beq.n	80071fc <osMessageQueueNew+0xfc>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d059      	beq.n	80071fc <osMessageQueueNew+0xfc>
    mem = -1;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
 800714c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d029      	beq.n	80071a8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d012      	beq.n	8007182 <osMessageQueueNew+0x82>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b4f      	cmp	r3, #79	; 0x4f
 8007162:	d90e      	bls.n	8007182 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	429a      	cmp	r2, r3
 800717a:	d302      	bcc.n	8007182 <osMessageQueueNew+0x82>
        mem = 1;
 800717c:	2301      	movs	r3, #1
 800717e:	623b      	str	r3, [r7, #32]
 8007180:	e014      	b.n	80071ac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d110      	bne.n	80071ac <osMessageQueueNew+0xac>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10c      	bne.n	80071ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007196:	2b00      	cmp	r3, #0
 8007198:	d108      	bne.n	80071ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <osMessageQueueNew+0xac>
          mem = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	e001      	b.n	80071ac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10b      	bne.n	80071ca <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2100      	movs	r1, #0
 80071bc:	9100      	str	r1, [sp, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fac3 	bl	800774c <xQueueGenericCreateStatic>
 80071c6:	6278      	str	r0, [r7, #36]	; 0x24
 80071c8:	e008      	b.n	80071dc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80071d0:	2200      	movs	r2, #0
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fb3b 	bl	8007850 <xQueueGenericCreate>
 80071da:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e001      	b.n	80071f4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80071f4:	69f9      	ldr	r1, [r7, #28]
 80071f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071f8:	f001 fb06 	bl	8008808 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3728      	adds	r7, #40	; 0x28
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	2000015c 	.word	0x2000015c

0800720c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	; 0x28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007220:	2300      	movs	r3, #0
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007224:	f3ef 8305 	mrs	r3, IPSR
 8007228:	61fb      	str	r3, [r7, #28]
  return(result);
 800722a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10f      	bne.n	8007250 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007230:	f3ef 8310 	mrs	r3, PRIMASK
 8007234:	61bb      	str	r3, [r7, #24]
  return(result);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800723c:	f3ef 8311 	mrs	r3, BASEPRI
 8007240:	617b      	str	r3, [r7, #20]
  return(result);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d02c      	beq.n	80072a2 <osMessageQueuePut+0x96>
 8007248:	4b28      	ldr	r3, [pc, #160]	; (80072ec <osMessageQueuePut+0xe0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d128      	bne.n	80072a2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <osMessageQueuePut+0x56>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <osMessageQueuePut+0x56>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007262:	f06f 0303 	mvn.w	r3, #3
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007268:	e039      	b.n	80072de <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800726a:	2300      	movs	r3, #0
 800726c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800726e:	f107 0210 	add.w	r2, r7, #16
 8007272:	2300      	movs	r3, #0
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	6a38      	ldr	r0, [r7, #32]
 8007278:	f000 fd82 	bl	8007d80 <xQueueGenericSendFromISR>
 800727c:	4603      	mov	r3, r0
 800727e:	2b01      	cmp	r3, #1
 8007280:	d003      	beq.n	800728a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007282:	f06f 0302 	mvn.w	r3, #2
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007288:	e029      	b.n	80072de <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d026      	beq.n	80072de <osMessageQueuePut+0xd2>
 8007290:	4b17      	ldr	r3, [pc, #92]	; (80072f0 <osMessageQueuePut+0xe4>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072a0:	e01d      	b.n	80072de <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <osMessageQueuePut+0xa2>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80072ae:	f06f 0303 	mvn.w	r3, #3
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
 80072b4:	e014      	b.n	80072e0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072b6:	2300      	movs	r3, #0
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	6a38      	ldr	r0, [r7, #32]
 80072be:	f000 fc59 	bl	8007b74 <xQueueGenericSend>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d00b      	beq.n	80072e0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80072ce:	f06f 0301 	mvn.w	r3, #1
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
 80072d4:	e004      	b.n	80072e0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80072d6:	f06f 0302 	mvn.w	r3, #2
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
 80072dc:	e000      	b.n	80072e0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3728      	adds	r7, #40	; 0x28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	2000015c 	.word	0x2000015c
 80072f0:	e000ed04 	.word	0xe000ed04

080072f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	; 0x28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007306:	2300      	movs	r3, #0
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800730a:	f3ef 8305 	mrs	r3, IPSR
 800730e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007310:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007316:	f3ef 8310 	mrs	r3, PRIMASK
 800731a:	61bb      	str	r3, [r7, #24]
  return(result);
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007322:	f3ef 8311 	mrs	r3, BASEPRI
 8007326:	617b      	str	r3, [r7, #20]
  return(result);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d02c      	beq.n	8007388 <osMessageQueueGet+0x94>
 800732e:	4b28      	ldr	r3, [pc, #160]	; (80073d0 <osMessageQueueGet+0xdc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d128      	bne.n	8007388 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <osMessageQueueGet+0x54>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <osMessageQueueGet+0x54>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007348:	f06f 0303 	mvn.w	r3, #3
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800734e:	e038      	b.n	80073c2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007354:	f107 0310 	add.w	r3, r7, #16
 8007358:	461a      	mov	r2, r3
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	6a38      	ldr	r0, [r7, #32]
 800735e:	f001 f83f 	bl	80083e0 <xQueueReceiveFromISR>
 8007362:	4603      	mov	r3, r0
 8007364:	2b01      	cmp	r3, #1
 8007366:	d003      	beq.n	8007370 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007368:	f06f 0302 	mvn.w	r3, #2
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800736e:	e028      	b.n	80073c2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d025      	beq.n	80073c2 <osMessageQueueGet+0xce>
 8007376:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <osMessageQueueGet+0xe0>)
 8007378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007386:	e01c      	b.n	80073c2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <osMessageQueueGet+0xa0>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007394:	f06f 0303 	mvn.w	r3, #3
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
 800739a:	e013      	b.n	80073c4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	6a38      	ldr	r0, [r7, #32]
 80073a2:	f000 fe23 	bl	8007fec <xQueueReceive>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d00b      	beq.n	80073c4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80073b2:	f06f 0301 	mvn.w	r3, #1
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
 80073b8:	e004      	b.n	80073c4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80073ba:	f06f 0302 	mvn.w	r3, #2
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
 80073c0:	e000      	b.n	80073c4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073c2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3728      	adds	r7, #40	; 0x28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	2000015c 	.word	0x2000015c
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d102      	bne.n	80073f0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	e01e      	b.n	800742e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f0:	f3ef 8305 	mrs	r3, IPSR
 80073f4:	617b      	str	r3, [r7, #20]
  return(result);
 80073f6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10f      	bne.n	800741c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007400:	613b      	str	r3, [r7, #16]
  return(result);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007408:	f3ef 8311 	mrs	r3, BASEPRI
 800740c:	60fb      	str	r3, [r7, #12]
  return(result);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <osMessageQueueGetCount+0x4e>
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <osMessageQueueGetCount+0x60>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d104      	bne.n	8007426 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800741c:	69b8      	ldr	r0, [r7, #24]
 800741e:	f001 f885 	bl	800852c <uxQueueMessagesWaitingFromISR>
 8007422:	61f8      	str	r0, [r7, #28]
 8007424:	e003      	b.n	800742e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007426:	69b8      	ldr	r0, [r7, #24]
 8007428:	f001 f860 	bl	80084ec <uxQueueMessagesWaiting>
 800742c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800742e:	69fb      	ldr	r3, [r7, #28]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	2000015c 	.word	0x2000015c

0800743c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007448:	f3ef 8305 	mrs	r3, IPSR
 800744c:	617b      	str	r3, [r7, #20]
  return(result);
 800744e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10f      	bne.n	8007474 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007454:	f3ef 8310 	mrs	r3, PRIMASK
 8007458:	613b      	str	r3, [r7, #16]
  return(result);
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d105      	bne.n	800746c <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007460:	f3ef 8311 	mrs	r3, BASEPRI
 8007464:	60fb      	str	r3, [r7, #12]
  return(result);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d007      	beq.n	800747c <osMessageQueueDelete+0x40>
 800746c:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <osMessageQueueDelete+0x68>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d103      	bne.n	800747c <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8007474:	f06f 0305 	mvn.w	r3, #5
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	e00e      	b.n	800749a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d103      	bne.n	800748a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8007482:	f06f 0303 	mvn.w	r3, #3
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e007      	b.n	800749a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800748a:	69b8      	ldr	r0, [r7, #24]
 800748c:	f001 f9e6 	bl	800885c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007494:	69b8      	ldr	r0, [r7, #24]
 8007496:	f001 f869 	bl	800856c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800749a:	69fb      	ldr	r3, [r7, #28]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	2000015c 	.word	0x2000015c

080074a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a07      	ldr	r2, [pc, #28]	; (80074d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80074b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	4a06      	ldr	r2, [pc, #24]	; (80074d8 <vApplicationGetIdleTaskMemory+0x30>)
 80074be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2280      	movs	r2, #128	; 0x80
 80074c4:	601a      	str	r2, [r3, #0]
}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000160 	.word	0x20000160
 80074d8:	2000021c 	.word	0x2000021c

080074dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4a07      	ldr	r2, [pc, #28]	; (8007508 <vApplicationGetTimerTaskMemory+0x2c>)
 80074ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	4a06      	ldr	r2, [pc, #24]	; (800750c <vApplicationGetTimerTaskMemory+0x30>)
 80074f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074fa:	601a      	str	r2, [r3, #0]
}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	2000041c 	.word	0x2000041c
 800750c:	200004d8 	.word	0x200004d8

08007510 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f103 0208 	add.w	r2, r3, #8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f04f 32ff 	mov.w	r2, #4294967295
 8007528:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f103 0208 	add.w	r2, r3, #8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f103 0208 	add.w	r2, r3, #8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d103      	bne.n	80075d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e00c      	b.n	80075ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3308      	adds	r3, #8
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e002      	b.n	80075e0 <vListInsert+0x2e>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d2f6      	bcs.n	80075da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	601a      	str	r2, [r3, #0]
}
 8007618:	bf00      	nop
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6892      	ldr	r2, [r2, #8]
 800763a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6852      	ldr	r2, [r2, #4]
 8007644:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	429a      	cmp	r2, r3
 800764e:	d103      	bne.n	8007658 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	1e5a      	subs	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10c      	bne.n	80076a6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	b672      	cpsid	i
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	b662      	cpsie	i
 80076a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80076a6:	f002 fe11 	bl	800a2cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	441a      	add	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	3b01      	subs	r3, #1
 80076d8:	68f9      	ldr	r1, [r7, #12]
 80076da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	22ff      	movs	r2, #255	; 0xff
 80076ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	22ff      	movs	r2, #255	; 0xff
 80076f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d114      	bne.n	8007726 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01a      	beq.n	800773a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3310      	adds	r3, #16
 8007708:	4618      	mov	r0, r3
 800770a:	f001 fdb5 	bl	8009278 <xTaskRemoveFromEventList>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d012      	beq.n	800773a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <xQueueGenericReset+0xd0>)
 8007716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	e009      	b.n	800773a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3310      	adds	r3, #16
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fef0 	bl	8007510 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3324      	adds	r3, #36	; 0x24
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff feeb 	bl	8007510 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800773a:	f002 fdfb 	bl	800a334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800773e:	2301      	movs	r3, #1
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08e      	sub	sp, #56	; 0x38
 8007750:	af02      	add	r7, sp, #8
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10c      	bne.n	800777a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	b672      	cpsid	i
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	b662      	cpsie	i
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	b672      	cpsid	i
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	b662      	cpsie	i
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007796:	bf00      	nop
 8007798:	e7fe      	b.n	8007798 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <xQueueGenericCreateStatic+0x5a>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <xQueueGenericCreateStatic+0x5e>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <xQueueGenericCreateStatic+0x60>
 80077aa:	2300      	movs	r3, #0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10c      	bne.n	80077ca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	b672      	cpsid	i
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	b662      	cpsie	i
 80077c4:	623b      	str	r3, [r7, #32]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <xQueueGenericCreateStatic+0x8a>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <xQueueGenericCreateStatic+0x8e>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <xQueueGenericCreateStatic+0x90>
 80077da:	2300      	movs	r3, #0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10c      	bne.n	80077fa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	b672      	cpsid	i
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	b662      	cpsie	i
 80077f4:	61fb      	str	r3, [r7, #28]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077fa:	2350      	movs	r3, #80	; 0x50
 80077fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b50      	cmp	r3, #80	; 0x50
 8007802:	d00c      	beq.n	800781e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	61bb      	str	r3, [r7, #24]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800781e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00d      	beq.n	8007846 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007832:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	4613      	mov	r3, r2
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f847 	bl	80078d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007848:	4618      	mov	r0, r3
 800784a:	3730      	adds	r7, #48	; 0x30
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af02      	add	r7, sp, #8
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10c      	bne.n	800787e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	b672      	cpsid	i
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	b662      	cpsie	i
 8007878:	613b      	str	r3, [r7, #16]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007884:	2300      	movs	r3, #0
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	e004      	b.n	8007894 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	3350      	adds	r3, #80	; 0x50
 8007898:	4618      	mov	r0, r3
 800789a:	f002 fe43 	bl	800a524 <pvPortMalloc>
 800789e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d011      	beq.n	80078ca <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	3350      	adds	r3, #80	; 0x50
 80078ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078b8:	79fa      	ldrb	r2, [r7, #7]
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4613      	mov	r3, r2
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 f805 	bl	80078d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078ca:	69bb      	ldr	r3, [r7, #24]
	}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e002      	b.n	80078f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007902:	2101      	movs	r1, #1
 8007904:	69b8      	ldr	r0, [r7, #24]
 8007906:	f7ff feb7 	bl	8007678 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00e      	beq.n	8007946 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800793a:	2300      	movs	r3, #0
 800793c:	2200      	movs	r2, #0
 800793e:	2100      	movs	r1, #0
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f917 	bl	8007b74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af00      	add	r7, sp, #0
 8007954:	4603      	mov	r3, r0
 8007956:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007958:	2301      	movs	r3, #1
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	461a      	mov	r2, r3
 8007964:	6939      	ldr	r1, [r7, #16]
 8007966:	6978      	ldr	r0, [r7, #20]
 8007968:	f7ff ff72 	bl	8007850 <xQueueGenericCreate>
 800796c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff ffd3 	bl	800791a <prvInitialiseMutex>

		return xNewQueue;
 8007974:	68fb      	ldr	r3, [r7, #12]
	}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800797e:	b580      	push	{r7, lr}
 8007980:	b088      	sub	sp, #32
 8007982:	af02      	add	r7, sp, #8
 8007984:	4603      	mov	r3, r0
 8007986:	6039      	str	r1, [r7, #0]
 8007988:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800798a:	2301      	movs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	2300      	movs	r3, #0
 8007990:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2200      	movs	r2, #0
 800799a:	6939      	ldr	r1, [r7, #16]
 800799c:	6978      	ldr	r0, [r7, #20]
 800799e:	f7ff fed5 	bl	800774c <xQueueGenericCreateStatic>
 80079a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff ffb8 	bl	800791a <prvInitialiseMutex>

		return xNewQueue;
 80079aa:	68fb      	ldr	r3, [r7, #12]
	}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10c      	bne.n	80079e0 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	b672      	cpsid	i
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	b662      	cpsie	i
 80079da:	60fb      	str	r3, [r7, #12]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	689c      	ldr	r4, [r3, #8]
 80079e4:	f001 fe12 	bl	800960c <xTaskGetCurrentTaskHandle>
 80079e8:	4603      	mov	r3, r0
 80079ea:	429c      	cmp	r4, r3
 80079ec:	d111      	bne.n	8007a12 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	1e5a      	subs	r2, r3, #1
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d105      	bne.n	8007a0c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007a00:	2300      	movs	r3, #0
 8007a02:	2200      	movs	r2, #0
 8007a04:	2100      	movs	r1, #0
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f000 f8b4 	bl	8007b74 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	e001      	b.n	8007a16 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007a16:	697b      	ldr	r3, [r7, #20]
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd90      	pop	{r4, r7, pc}

08007a20 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10c      	bne.n	8007a4e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	b672      	cpsid	i
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	b662      	cpsie	i
 8007a48:	60fb      	str	r3, [r7, #12]
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	689c      	ldr	r4, [r3, #8]
 8007a52:	f001 fddb 	bl	800960c <xTaskGetCurrentTaskHandle>
 8007a56:	4603      	mov	r3, r0
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	d107      	bne.n	8007a6c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007a66:	2301      	movs	r3, #1
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	e00c      	b.n	8007a86 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6938      	ldr	r0, [r7, #16]
 8007a70:	f000 fba2 	bl	80081b8 <xQueueSemaphoreTake>
 8007a74:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007a86:	697b      	ldr	r3, [r7, #20]
	}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd90      	pop	{r4, r7, pc}

08007a90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	; 0x28
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10c      	bne.n	8007abc <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	b672      	cpsid	i
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	b662      	cpsie	i
 8007ab6:	61bb      	str	r3, [r7, #24]
}
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d90c      	bls.n	8007ade <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	b672      	cpsid	i
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	b662      	cpsie	i
 8007ad8:	617b      	str	r3, [r7, #20]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ade:	2302      	movs	r3, #2
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fe2f 	bl	800774c <xQueueGenericCreateStatic>
 8007aee:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007afc:	69fb      	ldr	r3, [r7, #28]
	}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b086      	sub	sp, #24
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10c      	bne.n	8007b30 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	b672      	cpsid	i
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	b662      	cpsie	i
 8007b2a:	613b      	str	r3, [r7, #16]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d90c      	bls.n	8007b52 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	b672      	cpsid	i
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	b662      	cpsie	i
 8007b4c:	60fb      	str	r3, [r7, #12]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b52:	2202      	movs	r2, #2
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff fe7a 	bl	8007850 <xQueueGenericCreate>
 8007b5c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007b6a:	697b      	ldr	r3, [r7, #20]
	}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08e      	sub	sp, #56	; 0x38
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b82:	2300      	movs	r3, #0
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10c      	bne.n	8007baa <xQueueGenericSend+0x36>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	b672      	cpsid	i
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	b662      	cpsie	i
 8007ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d103      	bne.n	8007bb8 <xQueueGenericSend+0x44>
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <xQueueGenericSend+0x48>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <xQueueGenericSend+0x4a>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10c      	bne.n	8007bdc <xQueueGenericSend+0x68>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	b672      	cpsid	i
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	b662      	cpsie	i
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d103      	bne.n	8007bea <xQueueGenericSend+0x76>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d101      	bne.n	8007bee <xQueueGenericSend+0x7a>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <xQueueGenericSend+0x7c>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <xQueueGenericSend+0x9a>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	b672      	cpsid	i
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	b662      	cpsie	i
 8007c08:	623b      	str	r3, [r7, #32]
}
 8007c0a:	bf00      	nop
 8007c0c:	e7fe      	b.n	8007c0c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c0e:	f001 fd0d 	bl	800962c <xTaskGetSchedulerState>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <xQueueGenericSend+0xaa>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <xQueueGenericSend+0xae>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <xQueueGenericSend+0xb0>
 8007c22:	2300      	movs	r3, #0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10c      	bne.n	8007c42 <xQueueGenericSend+0xce>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	b672      	cpsid	i
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	b662      	cpsie	i
 8007c3c:	61fb      	str	r3, [r7, #28]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c42:	f002 fb43 	bl	800a2cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d302      	bcc.n	8007c58 <xQueueGenericSend+0xe4>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d129      	bne.n	8007cac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c5e:	f000 fcc2 	bl	80085e6 <prvCopyDataToQueue>
 8007c62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d010      	beq.n	8007c8e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	3324      	adds	r3, #36	; 0x24
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fb01 	bl	8009278 <xTaskRemoveFromEventList>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d013      	beq.n	8007ca4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c7c:	4b3f      	ldr	r3, [pc, #252]	; (8007d7c <xQueueGenericSend+0x208>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	e00a      	b.n	8007ca4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d007      	beq.n	8007ca4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c94:	4b39      	ldr	r3, [pc, #228]	; (8007d7c <xQueueGenericSend+0x208>)
 8007c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ca4:	f002 fb46 	bl	800a334 <vPortExitCritical>
				return pdPASS;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e063      	b.n	8007d74 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cb2:	f002 fb3f 	bl	800a334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e05c      	b.n	8007d74 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cc0:	f107 0314 	add.w	r3, r7, #20
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 fb3d 	bl	8009344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cce:	f002 fb31 	bl	800a334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cd2:	f001 f88b 	bl	8008dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cd6:	f002 faf9 	bl	800a2cc <vPortEnterCritical>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ce0:	b25b      	sxtb	r3, r3
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce6:	d103      	bne.n	8007cf0 <xQueueGenericSend+0x17c>
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cf6:	b25b      	sxtb	r3, r3
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d103      	bne.n	8007d06 <xQueueGenericSend+0x192>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d06:	f002 fb15 	bl	800a334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d0a:	1d3a      	adds	r2, r7, #4
 8007d0c:	f107 0314 	add.w	r3, r7, #20
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 fb2c 	bl	8009370 <xTaskCheckForTimeOut>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d124      	bne.n	8007d68 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d20:	f000 fd59 	bl	80087d6 <prvIsQueueFull>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d018      	beq.n	8007d5c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	3310      	adds	r3, #16
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 fa4c 	bl	80091d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d3a:	f000 fce4 	bl	8008706 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d3e:	f001 f863 	bl	8008e08 <xTaskResumeAll>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f47f af7c 	bne.w	8007c42 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <xQueueGenericSend+0x208>)
 8007d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	e772      	b.n	8007c42 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d5e:	f000 fcd2 	bl	8008706 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d62:	f001 f851 	bl	8008e08 <xTaskResumeAll>
 8007d66:	e76c      	b.n	8007c42 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d6a:	f000 fccc 	bl	8008706 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d6e:	f001 f84b 	bl	8008e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3738      	adds	r7, #56	; 0x38
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08e      	sub	sp, #56	; 0x38
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d103      	bne.n	8007dc0 <xQueueGenericSendFromISR+0x40>
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <xQueueGenericSendFromISR+0x44>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e000      	b.n	8007dc6 <xQueueGenericSendFromISR+0x46>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10c      	bne.n	8007de4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	b672      	cpsid	i
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	b662      	cpsie	i
 8007dde:	623b      	str	r3, [r7, #32]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d103      	bne.n	8007df2 <xQueueGenericSendFromISR+0x72>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericSendFromISR+0x76>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericSendFromISR+0x78>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10c      	bne.n	8007e16 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	b672      	cpsid	i
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	b662      	cpsie	i
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e16:	f002 fb41 	bl	800a49c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e1a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	b672      	cpsid	i
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	b662      	cpsie	i
 8007e32:	61ba      	str	r2, [r7, #24]
 8007e34:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e36:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d302      	bcc.n	8007e4c <xQueueGenericSendFromISR+0xcc>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d12c      	bne.n	8007ea6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e5c:	f000 fbc3 	bl	80085e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e60:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e68:	d112      	bne.n	8007e90 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d016      	beq.n	8007ea0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	3324      	adds	r3, #36	; 0x24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 f9fe 	bl	8009278 <xTaskRemoveFromEventList>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e007      	b.n	8007ea0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	b25a      	sxtb	r2, r3
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ea4:	e001      	b.n	8007eaa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007eb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3738      	adds	r7, #56	; 0x38
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	; 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10c      	bne.n	8007eee <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	b672      	cpsid	i
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	b662      	cpsie	i
 8007ee8:	623b      	str	r3, [r7, #32]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00c      	beq.n	8007f10 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	b672      	cpsid	i
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	b662      	cpsie	i
 8007f0a:	61fb      	str	r3, [r7, #28]
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <xQueueGiveFromISR+0x60>
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <xQueueGiveFromISR+0x64>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <xQueueGiveFromISR+0x66>
 8007f24:	2300      	movs	r3, #0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10c      	bne.n	8007f44 <xQueueGiveFromISR+0x84>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	b672      	cpsid	i
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	b662      	cpsie	i
 8007f3e:	61bb      	str	r3, [r7, #24]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f44:	f002 faaa 	bl	800a49c <vPortValidateInterruptPriority>
	__asm volatile
 8007f48:	f3ef 8211 	mrs	r2, BASEPRI
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	b672      	cpsid	i
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	b662      	cpsie	i
 8007f60:	617a      	str	r2, [r7, #20]
 8007f62:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007f64:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d22b      	bcs.n	8007fd0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d112      	bne.n	8007fba <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d016      	beq.n	8007fca <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	3324      	adds	r3, #36	; 0x24
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 f969 	bl	8009278 <xTaskRemoveFromEventList>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00e      	beq.n	8007fca <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00b      	beq.n	8007fca <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	e007      	b.n	8007fca <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	b25a      	sxtb	r2, r3
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fce:	e001      	b.n	8007fd4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f383 8811 	msr	BASEPRI, r3
}
 8007fde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3738      	adds	r7, #56	; 0x38
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08c      	sub	sp, #48	; 0x30
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10c      	bne.n	8008020 <xQueueReceive+0x34>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800a:	b672      	cpsid	i
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	b662      	cpsie	i
 800801a:	623b      	str	r3, [r7, #32]
}
 800801c:	bf00      	nop
 800801e:	e7fe      	b.n	800801e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d103      	bne.n	800802e <xQueueReceive+0x42>
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <xQueueReceive+0x46>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <xQueueReceive+0x48>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10c      	bne.n	8008052 <xQueueReceive+0x66>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	b672      	cpsid	i
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	b662      	cpsie	i
 800804c:	61fb      	str	r3, [r7, #28]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008052:	f001 faeb 	bl	800962c <xTaskGetSchedulerState>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <xQueueReceive+0x76>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <xQueueReceive+0x7a>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <xQueueReceive+0x7c>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10c      	bne.n	8008086 <xQueueReceive+0x9a>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	b672      	cpsid	i
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	b662      	cpsie	i
 8008080:	61bb      	str	r3, [r7, #24]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008086:	f002 f921 	bl	800a2cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01f      	beq.n	80080d6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809a:	f000 fb0e 	bl	80086ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	1e5a      	subs	r2, r3, #1
 80080a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00f      	beq.n	80080ce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	3310      	adds	r3, #16
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 f8e0 	bl	8009278 <xTaskRemoveFromEventList>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d007      	beq.n	80080ce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080be:	4b3d      	ldr	r3, [pc, #244]	; (80081b4 <xQueueReceive+0x1c8>)
 80080c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080ce:	f002 f931 	bl	800a334 <vPortExitCritical>
				return pdPASS;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e069      	b.n	80081aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d103      	bne.n	80080e4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080dc:	f002 f92a 	bl	800a334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e062      	b.n	80081aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080ea:	f107 0310 	add.w	r3, r7, #16
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 f928 	bl	8009344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080f8:	f002 f91c 	bl	800a334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080fc:	f000 fe76 	bl	8008dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008100:	f002 f8e4 	bl	800a2cc <vPortEnterCritical>
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800810a:	b25b      	sxtb	r3, r3
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d103      	bne.n	800811a <xQueueReceive+0x12e>
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008120:	b25b      	sxtb	r3, r3
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d103      	bne.n	8008130 <xQueueReceive+0x144>
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008130:	f002 f900 	bl	800a334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008134:	1d3a      	adds	r2, r7, #4
 8008136:	f107 0310 	add.w	r3, r7, #16
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f001 f917 	bl	8009370 <xTaskCheckForTimeOut>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d123      	bne.n	8008190 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800814a:	f000 fb2e 	bl	80087aa <prvIsQueueEmpty>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d017      	beq.n	8008184 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	3324      	adds	r3, #36	; 0x24
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f001 f837 	bl	80091d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008164:	f000 facf 	bl	8008706 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008168:	f000 fe4e 	bl	8008e08 <xTaskResumeAll>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d189      	bne.n	8008086 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008172:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <xQueueReceive+0x1c8>)
 8008174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	e780      	b.n	8008086 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008186:	f000 fabe 	bl	8008706 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800818a:	f000 fe3d 	bl	8008e08 <xTaskResumeAll>
 800818e:	e77a      	b.n	8008086 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008192:	f000 fab8 	bl	8008706 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008196:	f000 fe37 	bl	8008e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800819a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800819c:	f000 fb05 	bl	80087aa <prvIsQueueEmpty>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f43f af6f 	beq.w	8008086 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3730      	adds	r7, #48	; 0x30
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08e      	sub	sp, #56	; 0x38
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10c      	bne.n	80081ee <xQueueSemaphoreTake+0x36>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	b672      	cpsid	i
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	b662      	cpsie	i
 80081e8:	623b      	str	r3, [r7, #32]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	b672      	cpsid	i
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	b662      	cpsie	i
 800820a:	61fb      	str	r3, [r7, #28]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008210:	f001 fa0c 	bl	800962c <xTaskGetSchedulerState>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <xQueueSemaphoreTake+0x68>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <xQueueSemaphoreTake+0x6c>
 8008220:	2301      	movs	r3, #1
 8008222:	e000      	b.n	8008226 <xQueueSemaphoreTake+0x6e>
 8008224:	2300      	movs	r3, #0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10c      	bne.n	8008244 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	b672      	cpsid	i
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	b662      	cpsie	i
 800823e:	61bb      	str	r3, [r7, #24]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008244:	f002 f842 	bl	800a2cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	2b00      	cmp	r3, #0
 8008252:	d024      	beq.n	800829e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	1e5a      	subs	r2, r3, #1
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d104      	bne.n	800826e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008264:	f001 fb60 	bl	8009928 <pvTaskIncrementMutexHeldCount>
 8008268:	4602      	mov	r2, r0
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00f      	beq.n	8008296 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	3310      	adds	r3, #16
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fffc 	bl	8009278 <xTaskRemoveFromEventList>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008286:	4b55      	ldr	r3, [pc, #340]	; (80083dc <xQueueSemaphoreTake+0x224>)
 8008288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008296:	f002 f84d 	bl	800a334 <vPortExitCritical>
				return pdPASS;
 800829a:	2301      	movs	r3, #1
 800829c:	e099      	b.n	80083d2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d113      	bne.n	80082cc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00c      	beq.n	80082c4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	b672      	cpsid	i
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	b662      	cpsie	i
 80082be:	617b      	str	r3, [r7, #20]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80082c4:	f002 f836 	bl	800a334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e082      	b.n	80083d2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082d2:	f107 030c 	add.w	r3, r7, #12
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 f834 	bl	8009344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082dc:	2301      	movs	r3, #1
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082e0:	f002 f828 	bl	800a334 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082e4:	f000 fd82 	bl	8008dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082e8:	f001 fff0 	bl	800a2cc <vPortEnterCritical>
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d103      	bne.n	8008302 <xQueueSemaphoreTake+0x14a>
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008308:	b25b      	sxtb	r3, r3
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d103      	bne.n	8008318 <xQueueSemaphoreTake+0x160>
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008318:	f002 f80c 	bl	800a334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800831c:	463a      	mov	r2, r7
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	4611      	mov	r1, r2
 8008324:	4618      	mov	r0, r3
 8008326:	f001 f823 	bl	8009370 <xTaskCheckForTimeOut>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d132      	bne.n	8008396 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008332:	f000 fa3a 	bl	80087aa <prvIsQueueEmpty>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d026      	beq.n	800838a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008344:	f001 ffc2 	bl	800a2cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4618      	mov	r0, r3
 800834e:	f001 f98b 	bl	8009668 <xTaskPriorityInherit>
 8008352:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008354:	f001 ffee 	bl	800a334 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	3324      	adds	r3, #36	; 0x24
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f000 ff35 	bl	80091d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008368:	f000 f9cd 	bl	8008706 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800836c:	f000 fd4c 	bl	8008e08 <xTaskResumeAll>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	f47f af66 	bne.w	8008244 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008378:	4b18      	ldr	r3, [pc, #96]	; (80083dc <xQueueSemaphoreTake+0x224>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	e75c      	b.n	8008244 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800838a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800838c:	f000 f9bb 	bl	8008706 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008390:	f000 fd3a 	bl	8008e08 <xTaskResumeAll>
 8008394:	e756      	b.n	8008244 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008398:	f000 f9b5 	bl	8008706 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800839c:	f000 fd34 	bl	8008e08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083a2:	f000 fa02 	bl	80087aa <prvIsQueueEmpty>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f43f af4b 	beq.w	8008244 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00d      	beq.n	80083d0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80083b4:	f001 ff8a 	bl	800a2cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80083b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ba:	f000 f8fc 	bl	80085b6 <prvGetDisinheritPriorityAfterTimeout>
 80083be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fa28 	bl	800981c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80083cc:	f001 ffb2 	bl	800a334 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3738      	adds	r7, #56	; 0x38
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	; 0x38
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10c      	bne.n	8008410 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	b672      	cpsid	i
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	b662      	cpsie	i
 800840a:	623b      	str	r3, [r7, #32]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d103      	bne.n	800841e <xQueueReceiveFromISR+0x3e>
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <xQueueReceiveFromISR+0x42>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <xQueueReceiveFromISR+0x44>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10c      	bne.n	8008442 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	b672      	cpsid	i
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	b662      	cpsie	i
 800843c:	61fb      	str	r3, [r7, #28]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008442:	f002 f82b 	bl	800a49c <vPortValidateInterruptPriority>
	__asm volatile
 8008446:	f3ef 8211 	mrs	r2, BASEPRI
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	b672      	cpsid	i
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	b662      	cpsie	i
 800845e:	61ba      	str	r2, [r7, #24]
 8008460:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008462:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008464:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	d02f      	beq.n	80084d2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008480:	f000 f91b 	bl	80086ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	1e5a      	subs	r2, r3, #1
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800848c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008494:	d112      	bne.n	80084bc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d016      	beq.n	80084cc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	3310      	adds	r3, #16
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fee8 	bl	8009278 <xTaskRemoveFromEventList>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00e      	beq.n	80084cc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	e007      	b.n	80084cc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c0:	3301      	adds	r3, #1
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	b25a      	sxtb	r2, r3
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80084cc:	2301      	movs	r3, #1
 80084ce:	637b      	str	r3, [r7, #52]	; 0x34
 80084d0:	e001      	b.n	80084d6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f383 8811 	msr	BASEPRI, r3
}
 80084e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3738      	adds	r7, #56	; 0x38
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10c      	bne.n	8008514 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	b672      	cpsid	i
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	b662      	cpsie	i
 800850e:	60bb      	str	r3, [r7, #8]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8008514:	f001 feda 	bl	800a2cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800851e:	f001 ff09 	bl	800a334 <vPortExitCritical>

	return uxReturn;
 8008522:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	60fb      	str	r3, [r7, #12]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800855e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008560:	4618      	mov	r0, r3
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10c      	bne.n	8008598 <vQueueDelete+0x2c>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	b672      	cpsid	i
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	b662      	cpsie	i
 8008592:	60bb      	str	r3, [r7, #8]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f95f 	bl	800885c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f002 f885 	bl	800a6b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d006      	beq.n	80085d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e001      	b.n	80085d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085d8:	68fb      	ldr	r3, [r7, #12]
	}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b086      	sub	sp, #24
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10d      	bne.n	8008620 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d14d      	bne.n	80086a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	4618      	mov	r0, r3
 8008612:	f001 f891 	bl	8009738 <xTaskPriorityDisinherit>
 8008616:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	609a      	str	r2, [r3, #8]
 800861e:	e043      	b.n	80086a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d119      	bne.n	800865a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6858      	ldr	r0, [r3, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	461a      	mov	r2, r3
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	f00f fd4a 	bl	80180ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	441a      	add	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	429a      	cmp	r2, r3
 800864e:	d32b      	bcc.n	80086a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	605a      	str	r2, [r3, #4]
 8008658:	e026      	b.n	80086a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68d8      	ldr	r0, [r3, #12]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	461a      	mov	r2, r3
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	f00f fd30 	bl	80180ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	425b      	negs	r3, r3
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d207      	bcs.n	8008696 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	425b      	negs	r3, r3
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d105      	bne.n	80086a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086b0:	697b      	ldr	r3, [r7, #20]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d018      	beq.n	80086fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	441a      	add	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d303      	bcc.n	80086ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68d9      	ldr	r1, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	461a      	mov	r2, r3
 80086f8:	6838      	ldr	r0, [r7, #0]
 80086fa:	f00f fce6 	bl	80180ca <memcpy>
	}
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800870e:	f001 fddd 	bl	800a2cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008718:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800871a:	e011      	b.n	8008740 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d012      	beq.n	800874a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fda5 	bl	8009278 <xTaskRemoveFromEventList>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008734:	f000 fe82 	bl	800943c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	3b01      	subs	r3, #1
 800873c:	b2db      	uxtb	r3, r3
 800873e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dce9      	bgt.n	800871c <prvUnlockQueue+0x16>
 8008748:	e000      	b.n	800874c <prvUnlockQueue+0x46>
					break;
 800874a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	22ff      	movs	r2, #255	; 0xff
 8008750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008754:	f001 fdee 	bl	800a334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008758:	f001 fdb8 	bl	800a2cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008762:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008764:	e011      	b.n	800878a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d012      	beq.n	8008794 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3310      	adds	r3, #16
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fd80 	bl	8009278 <xTaskRemoveFromEventList>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800877e:	f000 fe5d 	bl	800943c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	3b01      	subs	r3, #1
 8008786:	b2db      	uxtb	r3, r3
 8008788:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800878a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878e:	2b00      	cmp	r3, #0
 8008790:	dce9      	bgt.n	8008766 <prvUnlockQueue+0x60>
 8008792:	e000      	b.n	8008796 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008794:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	22ff      	movs	r2, #255	; 0xff
 800879a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800879e:	f001 fdc9 	bl	800a334 <vPortExitCritical>
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087b2:	f001 fd8b 	bl	800a2cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087be:	2301      	movs	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
 80087c2:	e001      	b.n	80087c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087c8:	f001 fdb4 	bl	800a334 <vPortExitCritical>

	return xReturn;
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087de:	f001 fd75 	bl	800a2cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d102      	bne.n	80087f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087ee:	2301      	movs	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	e001      	b.n	80087f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087f8:	f001 fd9c 	bl	800a334 <vPortExitCritical>

	return xReturn;
 80087fc:	68fb      	ldr	r3, [r7, #12]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e014      	b.n	8008842 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008818:	4a0f      	ldr	r2, [pc, #60]	; (8008858 <vQueueAddToRegistry+0x50>)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10b      	bne.n	800883c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008824:	490c      	ldr	r1, [pc, #48]	; (8008858 <vQueueAddToRegistry+0x50>)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800882e:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <vQueueAddToRegistry+0x50>)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	4413      	add	r3, r2
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800883a:	e006      	b.n	800884a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b07      	cmp	r3, #7
 8008846:	d9e7      	bls.n	8008818 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	20007fc4 	.word	0x20007fc4

0800885c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	e016      	b.n	8008898 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800886a:	4a10      	ldr	r2, [pc, #64]	; (80088ac <vQueueUnregisterQueue+0x50>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d10b      	bne.n	8008892 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800887a:	4a0c      	ldr	r2, [pc, #48]	; (80088ac <vQueueUnregisterQueue+0x50>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2100      	movs	r1, #0
 8008880:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008884:	4a09      	ldr	r2, [pc, #36]	; (80088ac <vQueueUnregisterQueue+0x50>)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4413      	add	r3, r2
 800888c:	2200      	movs	r2, #0
 800888e:	605a      	str	r2, [r3, #4]
				break;
 8008890:	e006      	b.n	80088a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b07      	cmp	r3, #7
 800889c:	d9e5      	bls.n	800886a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	20007fc4 	.word	0x20007fc4

080088b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088c0:	f001 fd04 	bl	800a2cc <vPortEnterCritical>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ca:	b25b      	sxtb	r3, r3
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d103      	bne.n	80088da <vQueueWaitForMessageRestricted+0x2a>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e0:	b25b      	sxtb	r3, r3
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d103      	bne.n	80088f0 <vQueueWaitForMessageRestricted+0x40>
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088f0:	f001 fd20 	bl	800a334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	3324      	adds	r3, #36	; 0x24
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fc89 	bl	800921c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800890a:	6978      	ldr	r0, [r7, #20]
 800890c:	f7ff fefb 	bl	8008706 <prvUnlockQueue>
	}
 8008910:	bf00      	nop
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08e      	sub	sp, #56	; 0x38
 800891c:	af04      	add	r7, sp, #16
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <xTaskCreateStatic+0x2e>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	b672      	cpsid	i
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	b662      	cpsie	i
 8008940:	623b      	str	r3, [r7, #32]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10c      	bne.n	8008966 <xTaskCreateStatic+0x4e>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	b672      	cpsid	i
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	b662      	cpsie	i
 8008960:	61fb      	str	r3, [r7, #28]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008966:	23bc      	movs	r3, #188	; 0xbc
 8008968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2bbc      	cmp	r3, #188	; 0xbc
 800896e:	d00c      	beq.n	800898a <xTaskCreateStatic+0x72>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	b672      	cpsid	i
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	b662      	cpsie	i
 8008984:	61bb      	str	r3, [r7, #24]
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800898a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	2b00      	cmp	r3, #0
 8008990:	d01e      	beq.n	80089d0 <xTaskCreateStatic+0xb8>
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01b      	beq.n	80089d0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	2202      	movs	r2, #2
 80089a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089aa:	2300      	movs	r3, #0
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	9302      	str	r3, [sp, #8]
 80089b2:	f107 0314 	add.w	r3, r7, #20
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f850 	bl	8008a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ca:	f000 f8f5 	bl	8008bb8 <prvAddNewTaskToReadyList>
 80089ce:	e001      	b.n	80089d4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089d4:	697b      	ldr	r3, [r7, #20]
	}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3728      	adds	r7, #40	; 0x28
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b08c      	sub	sp, #48	; 0x30
 80089e2:	af04      	add	r7, sp, #16
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 fd96 	bl	800a524 <pvPortMalloc>
 80089f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00e      	beq.n	8008a1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a00:	20bc      	movs	r0, #188	; 0xbc
 8008a02:	f001 fd8f 	bl	800a524 <pvPortMalloc>
 8008a06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
 8008a14:	e005      	b.n	8008a22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a16:	6978      	ldr	r0, [r7, #20]
 8008a18:	f001 fe4e 	bl	800a6b8 <vPortFree>
 8008a1c:	e001      	b.n	8008a22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d017      	beq.n	8008a58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a30:	88fa      	ldrh	r2, [r7, #6]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9303      	str	r3, [sp, #12]
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	9302      	str	r3, [sp, #8]
 8008a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f80e 	bl	8008a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a4c:	69f8      	ldr	r0, [r7, #28]
 8008a4e:	f000 f8b3 	bl	8008bb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a52:	2301      	movs	r3, #1
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e002      	b.n	8008a5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	461a      	mov	r2, r3
 8008a80:	21a5      	movs	r1, #165	; 0xa5
 8008a82:	f00f fb30 	bl	80180e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008a90:	440b      	add	r3, r1
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	f023 0307 	bic.w	r3, r3, #7
 8008a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f003 0307 	and.w	r3, r3, #7
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	b672      	cpsid	i
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	b662      	cpsie	i
 8008abe:	617b      	str	r3, [r7, #20]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01f      	beq.n	8008b0a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	e012      	b.n	8008af6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	7819      	ldrb	r1, [r3, #0]
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4413      	add	r3, r2
 8008ade:	3334      	adds	r3, #52	; 0x34
 8008ae0:	460a      	mov	r2, r1
 8008ae2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d006      	beq.n	8008afe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	3301      	adds	r3, #1
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b0f      	cmp	r3, #15
 8008afa:	d9e9      	bls.n	8008ad0 <prvInitialiseNewTask+0x68>
 8008afc:	e000      	b.n	8008b00 <prvInitialiseNewTask+0x98>
			{
				break;
 8008afe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b08:	e003      	b.n	8008b12 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	2b37      	cmp	r3, #55	; 0x37
 8008b16:	d901      	bls.n	8008b1c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b18:	2337      	movs	r3, #55	; 0x37
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	3304      	adds	r3, #4
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fd0c 	bl	8007550 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	3318      	adds	r3, #24
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fd07 	bl	8007550 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	3354      	adds	r3, #84	; 0x54
 8008b6c:	2260      	movs	r2, #96	; 0x60
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f00f fab8 	bl	80180e6 <memset>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	4a0c      	ldr	r2, [pc, #48]	; (8008bac <prvInitialiseNewTask+0x144>)
 8008b7a:	659a      	str	r2, [r3, #88]	; 0x58
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	4a0c      	ldr	r2, [pc, #48]	; (8008bb0 <prvInitialiseNewTask+0x148>)
 8008b80:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	4a0b      	ldr	r2, [pc, #44]	; (8008bb4 <prvInitialiseNewTask+0x14c>)
 8008b86:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	68f9      	ldr	r1, [r7, #12]
 8008b8c:	69b8      	ldr	r0, [r7, #24]
 8008b8e:	f001 fa8f 	bl	800a0b0 <pxPortInitialiseStack>
 8008b92:	4602      	mov	r2, r0
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ba4:	bf00      	nop
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	0801c714 	.word	0x0801c714
 8008bb0:	0801c734 	.word	0x0801c734
 8008bb4:	0801c6f4 	.word	0x0801c6f4

08008bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bc0:	f001 fb84 	bl	800a2cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bc4:	4b2d      	ldr	r3, [pc, #180]	; (8008c7c <prvAddNewTaskToReadyList+0xc4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	4a2c      	ldr	r2, [pc, #176]	; (8008c7c <prvAddNewTaskToReadyList+0xc4>)
 8008bcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bce:	4b2c      	ldr	r3, [pc, #176]	; (8008c80 <prvAddNewTaskToReadyList+0xc8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bd6:	4a2a      	ldr	r2, [pc, #168]	; (8008c80 <prvAddNewTaskToReadyList+0xc8>)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bdc:	4b27      	ldr	r3, [pc, #156]	; (8008c7c <prvAddNewTaskToReadyList+0xc4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d110      	bne.n	8008c06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008be4:	f000 fc4e 	bl	8009484 <prvInitialiseTaskLists>
 8008be8:	e00d      	b.n	8008c06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bea:	4b26      	ldr	r3, [pc, #152]	; (8008c84 <prvAddNewTaskToReadyList+0xcc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d109      	bne.n	8008c06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bf2:	4b23      	ldr	r3, [pc, #140]	; (8008c80 <prvAddNewTaskToReadyList+0xc8>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d802      	bhi.n	8008c06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c00:	4a1f      	ldr	r2, [pc, #124]	; (8008c80 <prvAddNewTaskToReadyList+0xc8>)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c06:	4b20      	ldr	r3, [pc, #128]	; (8008c88 <prvAddNewTaskToReadyList+0xd0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	4a1e      	ldr	r2, [pc, #120]	; (8008c88 <prvAddNewTaskToReadyList+0xd0>)
 8008c0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c10:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <prvAddNewTaskToReadyList+0xd0>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4b1b      	ldr	r3, [pc, #108]	; (8008c8c <prvAddNewTaskToReadyList+0xd4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d903      	bls.n	8008c2c <prvAddNewTaskToReadyList+0x74>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	4a18      	ldr	r2, [pc, #96]	; (8008c8c <prvAddNewTaskToReadyList+0xd4>)
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4a15      	ldr	r2, [pc, #84]	; (8008c90 <prvAddNewTaskToReadyList+0xd8>)
 8008c3a:	441a      	add	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7fe fc91 	bl	800756a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c48:	f001 fb74 	bl	800a334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <prvAddNewTaskToReadyList+0xcc>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00e      	beq.n	8008c72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c54:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <prvAddNewTaskToReadyList+0xc8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d207      	bcs.n	8008c72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <prvAddNewTaskToReadyList+0xdc>)
 8008c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000dac 	.word	0x20000dac
 8008c80:	200008d8 	.word	0x200008d8
 8008c84:	20000db8 	.word	0x20000db8
 8008c88:	20000dc8 	.word	0x20000dc8
 8008c8c:	20000db4 	.word	0x20000db4
 8008c90:	200008dc 	.word	0x200008dc
 8008c94:	e000ed04 	.word	0xe000ed04

08008c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d019      	beq.n	8008cde <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <vTaskDelay+0x64>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00c      	beq.n	8008ccc <vTaskDelay+0x34>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	b672      	cpsid	i
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	b662      	cpsie	i
 8008cc6:	60bb      	str	r3, [r7, #8]
}
 8008cc8:	bf00      	nop
 8008cca:	e7fe      	b.n	8008cca <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008ccc:	f000 f88e 	bl	8008dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fe3c 	bl	8009950 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cd8:	f000 f896 	bl	8008e08 <xTaskResumeAll>
 8008cdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d107      	bne.n	8008cf4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <vTaskDelay+0x68>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cf4:	bf00      	nop
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000dd4 	.word	0x20000dd4
 8008d00:	e000ed04 	.word	0xe000ed04

08008d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	; 0x28
 8008d08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d12:	463a      	mov	r2, r7
 8008d14:	1d39      	adds	r1, r7, #4
 8008d16:	f107 0308 	add.w	r3, r7, #8
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe fbc4 	bl	80074a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	9202      	str	r2, [sp, #8]
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	460a      	mov	r2, r1
 8008d32:	4926      	ldr	r1, [pc, #152]	; (8008dcc <vTaskStartScheduler+0xc8>)
 8008d34:	4826      	ldr	r0, [pc, #152]	; (8008dd0 <vTaskStartScheduler+0xcc>)
 8008d36:	f7ff fdef 	bl	8008918 <xTaskCreateStatic>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4a25      	ldr	r2, [pc, #148]	; (8008dd4 <vTaskStartScheduler+0xd0>)
 8008d3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d40:	4b24      	ldr	r3, [pc, #144]	; (8008dd4 <vTaskStartScheduler+0xd0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	e001      	b.n	8008d52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d102      	bne.n	8008d5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d58:	f000 fe4e 	bl	80099f8 <xTimerCreateTimerTask>
 8008d5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d11d      	bne.n	8008da0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	b672      	cpsid	i
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	b662      	cpsie	i
 8008d78:	613b      	str	r3, [r7, #16]
}
 8008d7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d7c:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <vTaskStartScheduler+0xd4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3354      	adds	r3, #84	; 0x54
 8008d82:	4a16      	ldr	r2, [pc, #88]	; (8008ddc <vTaskStartScheduler+0xd8>)
 8008d84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d86:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <vTaskStartScheduler+0xdc>)
 8008d88:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d8e:	4b15      	ldr	r3, [pc, #84]	; (8008de4 <vTaskStartScheduler+0xe0>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d94:	4b14      	ldr	r3, [pc, #80]	; (8008de8 <vTaskStartScheduler+0xe4>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d9a:	f001 fa19 	bl	800a1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d9e:	e010      	b.n	8008dc2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d10c      	bne.n	8008dc2 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	b672      	cpsid	i
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	b662      	cpsie	i
 8008dbc:	60fb      	str	r3, [r7, #12]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <vTaskStartScheduler+0xbc>
}
 8008dc2:	bf00      	nop
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	080190a8 	.word	0x080190a8
 8008dd0:	08009455 	.word	0x08009455
 8008dd4:	20000dd0 	.word	0x20000dd0
 8008dd8:	200008d8 	.word	0x200008d8
 8008ddc:	200000d0 	.word	0x200000d0
 8008de0:	20000dcc 	.word	0x20000dcc
 8008de4:	20000db8 	.word	0x20000db8
 8008de8:	20000db0 	.word	0x20000db0

08008dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <vTaskSuspendAll+0x18>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	4a03      	ldr	r2, [pc, #12]	; (8008e04 <vTaskSuspendAll+0x18>)
 8008df8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008dfa:	bf00      	nop
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	20000dd4 	.word	0x20000dd4

08008e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e16:	4b43      	ldr	r3, [pc, #268]	; (8008f24 <xTaskResumeAll+0x11c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10c      	bne.n	8008e38 <xTaskResumeAll+0x30>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	b672      	cpsid	i
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	b662      	cpsie	i
 8008e32:	603b      	str	r3, [r7, #0]
}
 8008e34:	bf00      	nop
 8008e36:	e7fe      	b.n	8008e36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e38:	f001 fa48 	bl	800a2cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e3c:	4b39      	ldr	r3, [pc, #228]	; (8008f24 <xTaskResumeAll+0x11c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	4a38      	ldr	r2, [pc, #224]	; (8008f24 <xTaskResumeAll+0x11c>)
 8008e44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e46:	4b37      	ldr	r3, [pc, #220]	; (8008f24 <xTaskResumeAll+0x11c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d162      	bne.n	8008f14 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e4e:	4b36      	ldr	r3, [pc, #216]	; (8008f28 <xTaskResumeAll+0x120>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d05e      	beq.n	8008f14 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e56:	e02f      	b.n	8008eb8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e58:	4b34      	ldr	r3, [pc, #208]	; (8008f2c <xTaskResumeAll+0x124>)
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3318      	adds	r3, #24
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fbdd 	bl	8007624 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fbd8 	bl	8007624 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e78:	4b2d      	ldr	r3, [pc, #180]	; (8008f30 <xTaskResumeAll+0x128>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d903      	bls.n	8008e88 <xTaskResumeAll+0x80>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a2a      	ldr	r2, [pc, #168]	; (8008f30 <xTaskResumeAll+0x128>)
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4a27      	ldr	r2, [pc, #156]	; (8008f34 <xTaskResumeAll+0x12c>)
 8008e96:	441a      	add	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f7fe fb63 	bl	800756a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	4b23      	ldr	r3, [pc, #140]	; (8008f38 <xTaskResumeAll+0x130>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d302      	bcc.n	8008eb8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008eb2:	4b22      	ldr	r3, [pc, #136]	; (8008f3c <xTaskResumeAll+0x134>)
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eb8:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <xTaskResumeAll+0x124>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1cb      	bne.n	8008e58 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ec6:	f000 fb81 	bl	80095cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008eca:	4b1d      	ldr	r3, [pc, #116]	; (8008f40 <xTaskResumeAll+0x138>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d010      	beq.n	8008ef8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ed6:	f000 f859 	bl	8008f8c <xTaskIncrementTick>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008ee0:	4b16      	ldr	r3, [pc, #88]	; (8008f3c <xTaskResumeAll+0x134>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f1      	bne.n	8008ed6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008ef2:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <xTaskResumeAll+0x138>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ef8:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <xTaskResumeAll+0x134>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f00:	2301      	movs	r3, #1
 8008f02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f04:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <xTaskResumeAll+0x13c>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f14:	f001 fa0e 	bl	800a334 <vPortExitCritical>

	return xAlreadyYielded;
 8008f18:	68bb      	ldr	r3, [r7, #8]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000dd4 	.word	0x20000dd4
 8008f28:	20000dac 	.word	0x20000dac
 8008f2c:	20000d6c 	.word	0x20000d6c
 8008f30:	20000db4 	.word	0x20000db4
 8008f34:	200008dc 	.word	0x200008dc
 8008f38:	200008d8 	.word	0x200008d8
 8008f3c:	20000dc0 	.word	0x20000dc0
 8008f40:	20000dbc 	.word	0x20000dbc
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <xTaskGetTickCount+0x1c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f54:	687b      	ldr	r3, [r7, #4]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000db0 	.word	0x20000db0

08008f68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f6e:	f001 fa95 	bl	800a49c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008f72:	2300      	movs	r3, #0
 8008f74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008f76:	4b04      	ldr	r3, [pc, #16]	; (8008f88 <xTaskGetTickCountFromISR+0x20>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f7c:	683b      	ldr	r3, [r7, #0]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000db0 	.word	0x20000db0

08008f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f96:	4b50      	ldr	r3, [pc, #320]	; (80090d8 <xTaskIncrementTick+0x14c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f040 808b 	bne.w	80090b6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fa0:	4b4e      	ldr	r3, [pc, #312]	; (80090dc <xTaskIncrementTick+0x150>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fa8:	4a4c      	ldr	r2, [pc, #304]	; (80090dc <xTaskIncrementTick+0x150>)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d122      	bne.n	8008ffa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fb4:	4b4a      	ldr	r3, [pc, #296]	; (80090e0 <xTaskIncrementTick+0x154>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00c      	beq.n	8008fd8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	b672      	cpsid	i
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	b662      	cpsie	i
 8008fd2:	603b      	str	r3, [r7, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <xTaskIncrementTick+0x4a>
 8008fd8:	4b41      	ldr	r3, [pc, #260]	; (80090e0 <xTaskIncrementTick+0x154>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	4b41      	ldr	r3, [pc, #260]	; (80090e4 <xTaskIncrementTick+0x158>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a3f      	ldr	r2, [pc, #252]	; (80090e0 <xTaskIncrementTick+0x154>)
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	4a3f      	ldr	r2, [pc, #252]	; (80090e4 <xTaskIncrementTick+0x158>)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	4b3e      	ldr	r3, [pc, #248]	; (80090e8 <xTaskIncrementTick+0x15c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	4a3d      	ldr	r2, [pc, #244]	; (80090e8 <xTaskIncrementTick+0x15c>)
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	f000 fae9 	bl	80095cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ffa:	4b3c      	ldr	r3, [pc, #240]	; (80090ec <xTaskIncrementTick+0x160>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	429a      	cmp	r2, r3
 8009002:	d349      	bcc.n	8009098 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009004:	4b36      	ldr	r3, [pc, #216]	; (80090e0 <xTaskIncrementTick+0x154>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d104      	bne.n	8009018 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800900e:	4b37      	ldr	r3, [pc, #220]	; (80090ec <xTaskIncrementTick+0x160>)
 8009010:	f04f 32ff 	mov.w	r2, #4294967295
 8009014:	601a      	str	r2, [r3, #0]
					break;
 8009016:	e03f      	b.n	8009098 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009018:	4b31      	ldr	r3, [pc, #196]	; (80090e0 <xTaskIncrementTick+0x154>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	d203      	bcs.n	8009038 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009030:	4a2e      	ldr	r2, [pc, #184]	; (80090ec <xTaskIncrementTick+0x160>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009036:	e02f      	b.n	8009098 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	3304      	adds	r3, #4
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe faf1 	bl	8007624 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	3318      	adds	r3, #24
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fae8 	bl	8007624 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <xTaskIncrementTick+0x164>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d903      	bls.n	8009068 <xTaskIncrementTick+0xdc>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	4a22      	ldr	r2, [pc, #136]	; (80090f0 <xTaskIncrementTick+0x164>)
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4a1f      	ldr	r2, [pc, #124]	; (80090f4 <xTaskIncrementTick+0x168>)
 8009076:	441a      	add	r2, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe fa73 	bl	800756a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009088:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <xTaskIncrementTick+0x16c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	429a      	cmp	r2, r3
 8009090:	d3b8      	bcc.n	8009004 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009092:	2301      	movs	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009096:	e7b5      	b.n	8009004 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009098:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <xTaskIncrementTick+0x16c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909e:	4915      	ldr	r1, [pc, #84]	; (80090f4 <xTaskIncrementTick+0x168>)
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	440b      	add	r3, r1
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d907      	bls.n	80090c0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80090b0:	2301      	movs	r3, #1
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	e004      	b.n	80090c0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80090b6:	4b11      	ldr	r3, [pc, #68]	; (80090fc <xTaskIncrementTick+0x170>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	4a0f      	ldr	r2, [pc, #60]	; (80090fc <xTaskIncrementTick+0x170>)
 80090be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80090c0:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <xTaskIncrementTick+0x174>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80090c8:	2301      	movs	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80090cc:	697b      	ldr	r3, [r7, #20]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000dd4 	.word	0x20000dd4
 80090dc:	20000db0 	.word	0x20000db0
 80090e0:	20000d64 	.word	0x20000d64
 80090e4:	20000d68 	.word	0x20000d68
 80090e8:	20000dc4 	.word	0x20000dc4
 80090ec:	20000dcc 	.word	0x20000dcc
 80090f0:	20000db4 	.word	0x20000db4
 80090f4:	200008dc 	.word	0x200008dc
 80090f8:	200008d8 	.word	0x200008d8
 80090fc:	20000dbc 	.word	0x20000dbc
 8009100:	20000dc0 	.word	0x20000dc0

08009104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800910a:	4b2b      	ldr	r3, [pc, #172]	; (80091b8 <vTaskSwitchContext+0xb4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009112:	4b2a      	ldr	r3, [pc, #168]	; (80091bc <vTaskSwitchContext+0xb8>)
 8009114:	2201      	movs	r2, #1
 8009116:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009118:	e048      	b.n	80091ac <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800911a:	4b28      	ldr	r3, [pc, #160]	; (80091bc <vTaskSwitchContext+0xb8>)
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009120:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <vTaskSwitchContext+0xbc>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e012      	b.n	800914e <vTaskSwitchContext+0x4a>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10c      	bne.n	8009148 <vTaskSwitchContext+0x44>
	__asm volatile
 800912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009132:	b672      	cpsid	i
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	b662      	cpsie	i
 8009142:	607b      	str	r3, [r7, #4]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <vTaskSwitchContext+0x42>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3b01      	subs	r3, #1
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	491d      	ldr	r1, [pc, #116]	; (80091c4 <vTaskSwitchContext+0xc0>)
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	4613      	mov	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	440b      	add	r3, r1
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0e2      	beq.n	8009128 <vTaskSwitchContext+0x24>
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4a15      	ldr	r2, [pc, #84]	; (80091c4 <vTaskSwitchContext+0xc0>)
 800916e:	4413      	add	r3, r2
 8009170:	60bb      	str	r3, [r7, #8]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	605a      	str	r2, [r3, #4]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	3308      	adds	r3, #8
 8009184:	429a      	cmp	r2, r3
 8009186:	d104      	bne.n	8009192 <vTaskSwitchContext+0x8e>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	605a      	str	r2, [r3, #4]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	4a0b      	ldr	r2, [pc, #44]	; (80091c8 <vTaskSwitchContext+0xc4>)
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <vTaskSwitchContext+0xbc>)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091a2:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <vTaskSwitchContext+0xc4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3354      	adds	r3, #84	; 0x54
 80091a8:	4a08      	ldr	r2, [pc, #32]	; (80091cc <vTaskSwitchContext+0xc8>)
 80091aa:	6013      	str	r3, [r2, #0]
}
 80091ac:	bf00      	nop
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	20000dd4 	.word	0x20000dd4
 80091bc:	20000dc0 	.word	0x20000dc0
 80091c0:	20000db4 	.word	0x20000db4
 80091c4:	200008dc 	.word	0x200008dc
 80091c8:	200008d8 	.word	0x200008d8
 80091cc:	200000d0 	.word	0x200000d0

080091d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10c      	bne.n	80091fa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	b672      	cpsid	i
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	b662      	cpsie	i
 80091f4:	60fb      	str	r3, [r7, #12]
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091fa:	4b07      	ldr	r3, [pc, #28]	; (8009218 <vTaskPlaceOnEventList+0x48>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3318      	adds	r3, #24
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7fe f9d5 	bl	80075b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009208:	2101      	movs	r1, #1
 800920a:	6838      	ldr	r0, [r7, #0]
 800920c:	f000 fba0 	bl	8009950 <prvAddCurrentTaskToDelayedList>
}
 8009210:	bf00      	nop
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	200008d8 	.word	0x200008d8

0800921c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10c      	bne.n	8009248 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	b672      	cpsid	i
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	b662      	cpsie	i
 8009242:	617b      	str	r3, [r7, #20]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <vTaskPlaceOnEventListRestricted+0x58>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3318      	adds	r3, #24
 800924e:	4619      	mov	r1, r3
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f7fe f98a 	bl	800756a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800925c:	f04f 33ff 	mov.w	r3, #4294967295
 8009260:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	68b8      	ldr	r0, [r7, #8]
 8009266:	f000 fb73 	bl	8009950 <prvAddCurrentTaskToDelayedList>
	}
 800926a:	bf00      	nop
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	200008d8 	.word	0x200008d8

08009278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10c      	bne.n	80092a8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	b672      	cpsid	i
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	b662      	cpsie	i
 80092a2:	60fb      	str	r3, [r7, #12]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	3318      	adds	r3, #24
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe f9b9 	bl	8007624 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092b2:	4b1e      	ldr	r3, [pc, #120]	; (800932c <xTaskRemoveFromEventList+0xb4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d11d      	bne.n	80092f6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe f9b0 	bl	8007624 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4b19      	ldr	r3, [pc, #100]	; (8009330 <xTaskRemoveFromEventList+0xb8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d903      	bls.n	80092d8 <xTaskRemoveFromEventList+0x60>
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d4:	4a16      	ldr	r2, [pc, #88]	; (8009330 <xTaskRemoveFromEventList+0xb8>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a13      	ldr	r2, [pc, #76]	; (8009334 <xTaskRemoveFromEventList+0xbc>)
 80092e6:	441a      	add	r2, r3
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fe f93b 	bl	800756a <vListInsertEnd>
 80092f4:	e005      	b.n	8009302 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3318      	adds	r3, #24
 80092fa:	4619      	mov	r1, r3
 80092fc:	480e      	ldr	r0, [pc, #56]	; (8009338 <xTaskRemoveFromEventList+0xc0>)
 80092fe:	f7fe f934 	bl	800756a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009306:	4b0d      	ldr	r3, [pc, #52]	; (800933c <xTaskRemoveFromEventList+0xc4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	429a      	cmp	r2, r3
 800930e:	d905      	bls.n	800931c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009314:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <xTaskRemoveFromEventList+0xc8>)
 8009316:	2201      	movs	r2, #1
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e001      	b.n	8009320 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800931c:	2300      	movs	r3, #0
 800931e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009320:	697b      	ldr	r3, [r7, #20]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000dd4 	.word	0x20000dd4
 8009330:	20000db4 	.word	0x20000db4
 8009334:	200008dc 	.word	0x200008dc
 8009338:	20000d6c 	.word	0x20000d6c
 800933c:	200008d8 	.word	0x200008d8
 8009340:	20000dc0 	.word	0x20000dc0

08009344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <vTaskInternalSetTimeOutState+0x24>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009354:	4b05      	ldr	r3, [pc, #20]	; (800936c <vTaskInternalSetTimeOutState+0x28>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	605a      	str	r2, [r3, #4]
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	20000dc4 	.word	0x20000dc4
 800936c:	20000db0 	.word	0x20000db0

08009370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10c      	bne.n	800939a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	b672      	cpsid	i
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	b662      	cpsie	i
 8009394:	613b      	str	r3, [r7, #16]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10c      	bne.n	80093ba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	b672      	cpsid	i
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	b662      	cpsie	i
 80093b4:	60fb      	str	r3, [r7, #12]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80093ba:	f000 ff87 	bl	800a2cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093be:	4b1d      	ldr	r3, [pc, #116]	; (8009434 <xTaskCheckForTimeOut+0xc4>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d6:	d102      	bne.n	80093de <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093d8:	2300      	movs	r3, #0
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	e023      	b.n	8009426 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	4b15      	ldr	r3, [pc, #84]	; (8009438 <xTaskCheckForTimeOut+0xc8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d007      	beq.n	80093fa <xTaskCheckForTimeOut+0x8a>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d302      	bcc.n	80093fa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093f4:	2301      	movs	r3, #1
 80093f6:	61fb      	str	r3, [r7, #28]
 80093f8:	e015      	b.n	8009426 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	429a      	cmp	r2, r3
 8009402:	d20b      	bcs.n	800941c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	1ad2      	subs	r2, r2, r3
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff ff97 	bl	8009344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009416:	2300      	movs	r3, #0
 8009418:	61fb      	str	r3, [r7, #28]
 800941a:	e004      	b.n	8009426 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009422:	2301      	movs	r3, #1
 8009424:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009426:	f000 ff85 	bl	800a334 <vPortExitCritical>

	return xReturn;
 800942a:	69fb      	ldr	r3, [r7, #28]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20000db0 	.word	0x20000db0
 8009438:	20000dc4 	.word	0x20000dc4

0800943c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009440:	4b03      	ldr	r3, [pc, #12]	; (8009450 <vTaskMissedYield+0x14>)
 8009442:	2201      	movs	r2, #1
 8009444:	601a      	str	r2, [r3, #0]
}
 8009446:	bf00      	nop
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	20000dc0 	.word	0x20000dc0

08009454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800945c:	f000 f852 	bl	8009504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009460:	4b06      	ldr	r3, [pc, #24]	; (800947c <prvIdleTask+0x28>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d9f9      	bls.n	800945c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009468:	4b05      	ldr	r3, [pc, #20]	; (8009480 <prvIdleTask+0x2c>)
 800946a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009478:	e7f0      	b.n	800945c <prvIdleTask+0x8>
 800947a:	bf00      	nop
 800947c:	200008dc 	.word	0x200008dc
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800948a:	2300      	movs	r3, #0
 800948c:	607b      	str	r3, [r7, #4]
 800948e:	e00c      	b.n	80094aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <prvInitialiseTaskLists+0x60>)
 800949c:	4413      	add	r3, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe f836 	bl	8007510 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3301      	adds	r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b37      	cmp	r3, #55	; 0x37
 80094ae:	d9ef      	bls.n	8009490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094b0:	480d      	ldr	r0, [pc, #52]	; (80094e8 <prvInitialiseTaskLists+0x64>)
 80094b2:	f7fe f82d 	bl	8007510 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094b6:	480d      	ldr	r0, [pc, #52]	; (80094ec <prvInitialiseTaskLists+0x68>)
 80094b8:	f7fe f82a 	bl	8007510 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094bc:	480c      	ldr	r0, [pc, #48]	; (80094f0 <prvInitialiseTaskLists+0x6c>)
 80094be:	f7fe f827 	bl	8007510 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094c2:	480c      	ldr	r0, [pc, #48]	; (80094f4 <prvInitialiseTaskLists+0x70>)
 80094c4:	f7fe f824 	bl	8007510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094c8:	480b      	ldr	r0, [pc, #44]	; (80094f8 <prvInitialiseTaskLists+0x74>)
 80094ca:	f7fe f821 	bl	8007510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094ce:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <prvInitialiseTaskLists+0x78>)
 80094d0:	4a05      	ldr	r2, [pc, #20]	; (80094e8 <prvInitialiseTaskLists+0x64>)
 80094d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094d4:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <prvInitialiseTaskLists+0x7c>)
 80094d6:	4a05      	ldr	r2, [pc, #20]	; (80094ec <prvInitialiseTaskLists+0x68>)
 80094d8:	601a      	str	r2, [r3, #0]
}
 80094da:	bf00      	nop
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	200008dc 	.word	0x200008dc
 80094e8:	20000d3c 	.word	0x20000d3c
 80094ec:	20000d50 	.word	0x20000d50
 80094f0:	20000d6c 	.word	0x20000d6c
 80094f4:	20000d80 	.word	0x20000d80
 80094f8:	20000d98 	.word	0x20000d98
 80094fc:	20000d64 	.word	0x20000d64
 8009500:	20000d68 	.word	0x20000d68

08009504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800950a:	e019      	b.n	8009540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800950c:	f000 fede 	bl	800a2cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009510:	4b10      	ldr	r3, [pc, #64]	; (8009554 <prvCheckTasksWaitingTermination+0x50>)
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3304      	adds	r3, #4
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe f881 	bl	8007624 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009522:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <prvCheckTasksWaitingTermination+0x54>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3b01      	subs	r3, #1
 8009528:	4a0b      	ldr	r2, [pc, #44]	; (8009558 <prvCheckTasksWaitingTermination+0x54>)
 800952a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800952c:	4b0b      	ldr	r3, [pc, #44]	; (800955c <prvCheckTasksWaitingTermination+0x58>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	4a0a      	ldr	r2, [pc, #40]	; (800955c <prvCheckTasksWaitingTermination+0x58>)
 8009534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009536:	f000 fefd 	bl	800a334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f810 	bl	8009560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009540:	4b06      	ldr	r3, [pc, #24]	; (800955c <prvCheckTasksWaitingTermination+0x58>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e1      	bne.n	800950c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000d80 	.word	0x20000d80
 8009558:	20000dac 	.word	0x20000dac
 800955c:	20000d94 	.word	0x20000d94

08009560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3354      	adds	r3, #84	; 0x54
 800956c:	4618      	mov	r0, r3
 800956e:	f00e fe83 	bl	8018278 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009578:	2b00      	cmp	r3, #0
 800957a:	d108      	bne.n	800958e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009580:	4618      	mov	r0, r3
 8009582:	f001 f899 	bl	800a6b8 <vPortFree>
				vPortFree( pxTCB );
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 f896 	bl	800a6b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800958c:	e01a      	b.n	80095c4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009594:	2b01      	cmp	r3, #1
 8009596:	d103      	bne.n	80095a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f88d 	bl	800a6b8 <vPortFree>
	}
 800959e:	e011      	b.n	80095c4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d00c      	beq.n	80095c4 <prvDeleteTCB+0x64>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	b672      	cpsid	i
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	b662      	cpsie	i
 80095be:	60fb      	str	r3, [r7, #12]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <prvDeleteTCB+0x62>
	}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095d2:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <prvResetNextTaskUnblockTime+0x38>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095dc:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <prvResetNextTaskUnblockTime+0x3c>)
 80095de:	f04f 32ff 	mov.w	r2, #4294967295
 80095e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095e4:	e008      	b.n	80095f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e6:	4b07      	ldr	r3, [pc, #28]	; (8009604 <prvResetNextTaskUnblockTime+0x38>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	4a04      	ldr	r2, [pc, #16]	; (8009608 <prvResetNextTaskUnblockTime+0x3c>)
 80095f6:	6013      	str	r3, [r2, #0]
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	20000d64 	.word	0x20000d64
 8009608:	20000dcc 	.word	0x20000dcc

0800960c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <xTaskGetCurrentTaskHandle+0x1c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009618:	687b      	ldr	r3, [r7, #4]
	}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	200008d8 	.word	0x200008d8

0800962c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009632:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <xTaskGetSchedulerState+0x34>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800963a:	2301      	movs	r3, #1
 800963c:	607b      	str	r3, [r7, #4]
 800963e:	e008      	b.n	8009652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009640:	4b08      	ldr	r3, [pc, #32]	; (8009664 <xTaskGetSchedulerState+0x38>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009648:	2302      	movs	r3, #2
 800964a:	607b      	str	r3, [r7, #4]
 800964c:	e001      	b.n	8009652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800964e:	2300      	movs	r3, #0
 8009650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009652:	687b      	ldr	r3, [r7, #4]
	}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000db8 	.word	0x20000db8
 8009664:	20000dd4 	.word	0x20000dd4

08009668 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d051      	beq.n	8009722 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4b2a      	ldr	r3, [pc, #168]	; (800972c <xTaskPriorityInherit+0xc4>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	429a      	cmp	r2, r3
 800968a:	d241      	bcs.n	8009710 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	db06      	blt.n	80096a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009694:	4b25      	ldr	r3, [pc, #148]	; (800972c <xTaskPriorityInherit+0xc4>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6959      	ldr	r1, [r3, #20]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4a1f      	ldr	r2, [pc, #124]	; (8009730 <xTaskPriorityInherit+0xc8>)
 80096b4:	4413      	add	r3, r2
 80096b6:	4299      	cmp	r1, r3
 80096b8:	d122      	bne.n	8009700 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	3304      	adds	r3, #4
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fd ffb0 	bl	8007624 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096c4:	4b19      	ldr	r3, [pc, #100]	; (800972c <xTaskPriorityInherit+0xc4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d2:	4b18      	ldr	r3, [pc, #96]	; (8009734 <xTaskPriorityInherit+0xcc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d903      	bls.n	80096e2 <xTaskPriorityInherit+0x7a>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096de:	4a15      	ldr	r2, [pc, #84]	; (8009734 <xTaskPriorityInherit+0xcc>)
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4a10      	ldr	r2, [pc, #64]	; (8009730 <xTaskPriorityInherit+0xc8>)
 80096f0:	441a      	add	r2, r3
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	3304      	adds	r3, #4
 80096f6:	4619      	mov	r1, r3
 80096f8:	4610      	mov	r0, r2
 80096fa:	f7fd ff36 	bl	800756a <vListInsertEnd>
 80096fe:	e004      	b.n	800970a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009700:	4b0a      	ldr	r3, [pc, #40]	; (800972c <xTaskPriorityInherit+0xc4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800970a:	2301      	movs	r3, #1
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	e008      	b.n	8009722 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <xTaskPriorityInherit+0xc4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971a:	429a      	cmp	r2, r3
 800971c:	d201      	bcs.n	8009722 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800971e:	2301      	movs	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009722:	68fb      	ldr	r3, [r7, #12]
	}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	200008d8 	.word	0x200008d8
 8009730:	200008dc 	.word	0x200008dc
 8009734:	20000db4 	.word	0x20000db4

08009738 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d05a      	beq.n	8009804 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800974e:	4b30      	ldr	r3, [pc, #192]	; (8009810 <xTaskPriorityDisinherit+0xd8>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	429a      	cmp	r2, r3
 8009756:	d00c      	beq.n	8009772 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	b672      	cpsid	i
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	b662      	cpsie	i
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10c      	bne.n	8009794 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	b672      	cpsid	i
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	b662      	cpsie	i
 800978e:	60bb      	str	r3, [r7, #8]
}
 8009790:	bf00      	nop
 8009792:	e7fe      	b.n	8009792 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009798:	1e5a      	subs	r2, r3, #1
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d02c      	beq.n	8009804 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d128      	bne.n	8009804 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fd ff34 	bl	8007624 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d4:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <xTaskPriorityDisinherit+0xdc>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d903      	bls.n	80097e4 <xTaskPriorityDisinherit+0xac>
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <xTaskPriorityDisinherit+0xdc>)
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4a09      	ldr	r2, [pc, #36]	; (8009818 <xTaskPriorityDisinherit+0xe0>)
 80097f2:	441a      	add	r2, r3
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fd feb5 	bl	800756a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009804:	697b      	ldr	r3, [r7, #20]
	}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	200008d8 	.word	0x200008d8
 8009814:	20000db4 	.word	0x20000db4
 8009818:	200008dc 	.word	0x200008dc

0800981c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800982a:	2301      	movs	r3, #1
 800982c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d06e      	beq.n	8009912 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10c      	bne.n	8009856 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	b672      	cpsid	i
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	b662      	cpsie	i
 8009850:	60fb      	str	r3, [r7, #12]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	d902      	bls.n	8009866 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	e002      	b.n	800986c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	429a      	cmp	r2, r3
 8009874:	d04d      	beq.n	8009912 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	429a      	cmp	r2, r3
 800987e:	d148      	bne.n	8009912 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009880:	4b26      	ldr	r3, [pc, #152]	; (800991c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	429a      	cmp	r2, r3
 8009888:	d10c      	bne.n	80098a4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	b672      	cpsid	i
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	b662      	cpsie	i
 800989e:	60bb      	str	r3, [r7, #8]
}
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	db04      	blt.n	80098c2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	6959      	ldr	r1, [r3, #20]
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4a13      	ldr	r2, [pc, #76]	; (8009920 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80098d2:	4413      	add	r3, r2
 80098d4:	4299      	cmp	r1, r3
 80098d6:	d11c      	bne.n	8009912 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	3304      	adds	r3, #4
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fd fea1 	bl	8007624 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d903      	bls.n	80098f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f2:	4a0c      	ldr	r2, [pc, #48]	; (8009924 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4a07      	ldr	r2, [pc, #28]	; (8009920 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009904:	441a      	add	r2, r3
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	3304      	adds	r3, #4
 800990a:	4619      	mov	r1, r3
 800990c:	4610      	mov	r0, r2
 800990e:	f7fd fe2c 	bl	800756a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009912:	bf00      	nop
 8009914:	3720      	adds	r7, #32
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200008d8 	.word	0x200008d8
 8009920:	200008dc 	.word	0x200008dc
 8009924:	20000db4 	.word	0x20000db4

08009928 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800992c:	4b07      	ldr	r3, [pc, #28]	; (800994c <pvTaskIncrementMutexHeldCount+0x24>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d004      	beq.n	800993e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <pvTaskIncrementMutexHeldCount+0x24>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800993a:	3201      	adds	r2, #1
 800993c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800993e:	4b03      	ldr	r3, [pc, #12]	; (800994c <pvTaskIncrementMutexHeldCount+0x24>)
 8009940:	681b      	ldr	r3, [r3, #0]
	}
 8009942:	4618      	mov	r0, r3
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	200008d8 	.word	0x200008d8

08009950 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800995a:	4b21      	ldr	r3, [pc, #132]	; (80099e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009960:	4b20      	ldr	r3, [pc, #128]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3304      	adds	r3, #4
 8009966:	4618      	mov	r0, r3
 8009968:	f7fd fe5c 	bl	8007624 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009972:	d10a      	bne.n	800998a <prvAddCurrentTaskToDelayedList+0x3a>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d007      	beq.n	800998a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997a:	4b1a      	ldr	r3, [pc, #104]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3304      	adds	r3, #4
 8009980:	4619      	mov	r1, r3
 8009982:	4819      	ldr	r0, [pc, #100]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009984:	f7fd fdf1 	bl	800756a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009988:	e026      	b.n	80099d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4413      	add	r3, r2
 8009990:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009992:	4b14      	ldr	r3, [pc, #80]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d209      	bcs.n	80099b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099a2:	4b12      	ldr	r3, [pc, #72]	; (80099ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	4b0f      	ldr	r3, [pc, #60]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f7fd fdff 	bl	80075b2 <vListInsert>
}
 80099b4:	e010      	b.n	80099d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099b6:	4b0e      	ldr	r3, [pc, #56]	; (80099f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3304      	adds	r3, #4
 80099c0:	4619      	mov	r1, r3
 80099c2:	4610      	mov	r0, r2
 80099c4:	f7fd fdf5 	bl	80075b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099c8:	4b0a      	ldr	r3, [pc, #40]	; (80099f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d202      	bcs.n	80099d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099d2:	4a08      	ldr	r2, [pc, #32]	; (80099f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	6013      	str	r3, [r2, #0]
}
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000db0 	.word	0x20000db0
 80099e4:	200008d8 	.word	0x200008d8
 80099e8:	20000d98 	.word	0x20000d98
 80099ec:	20000d68 	.word	0x20000d68
 80099f0:	20000d64 	.word	0x20000d64
 80099f4:	20000dcc 	.word	0x20000dcc

080099f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08a      	sub	sp, #40	; 0x28
 80099fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a02:	f000 fb15 	bl	800a030 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a06:	4b1d      	ldr	r3, [pc, #116]	; (8009a7c <xTimerCreateTimerTask+0x84>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d021      	beq.n	8009a52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a16:	1d3a      	adds	r2, r7, #4
 8009a18:	f107 0108 	add.w	r1, r7, #8
 8009a1c:	f107 030c 	add.w	r3, r7, #12
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fd fd5b 	bl	80074dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	9202      	str	r2, [sp, #8]
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	2302      	movs	r3, #2
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	2300      	movs	r3, #0
 8009a36:	460a      	mov	r2, r1
 8009a38:	4911      	ldr	r1, [pc, #68]	; (8009a80 <xTimerCreateTimerTask+0x88>)
 8009a3a:	4812      	ldr	r0, [pc, #72]	; (8009a84 <xTimerCreateTimerTask+0x8c>)
 8009a3c:	f7fe ff6c 	bl	8008918 <xTaskCreateStatic>
 8009a40:	4603      	mov	r3, r0
 8009a42:	4a11      	ldr	r2, [pc, #68]	; (8009a88 <xTimerCreateTimerTask+0x90>)
 8009a44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a46:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <xTimerCreateTimerTask+0x90>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10c      	bne.n	8009a72 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	b672      	cpsid	i
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	b662      	cpsie	i
 8009a6c:	613b      	str	r3, [r7, #16]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009a72:	697b      	ldr	r3, [r7, #20]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20000e08 	.word	0x20000e08
 8009a80:	080190b0 	.word	0x080190b0
 8009a84:	08009bc9 	.word	0x08009bc9
 8009a88:	20000e0c 	.word	0x20000e0c

08009a8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08a      	sub	sp, #40	; 0x28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10c      	bne.n	8009abe <xTimerGenericCommand+0x32>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	b672      	cpsid	i
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	b662      	cpsie	i
 8009ab8:	623b      	str	r3, [r7, #32]
}
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009abe:	4b1a      	ldr	r3, [pc, #104]	; (8009b28 <xTimerGenericCommand+0x9c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d02a      	beq.n	8009b1c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2b05      	cmp	r3, #5
 8009ad6:	dc18      	bgt.n	8009b0a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ad8:	f7ff fda8 	bl	800962c <xTaskGetSchedulerState>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d109      	bne.n	8009af6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ae2:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <xTimerGenericCommand+0x9c>)
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	f107 0110 	add.w	r1, r7, #16
 8009aea:	2300      	movs	r3, #0
 8009aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aee:	f7fe f841 	bl	8007b74 <xQueueGenericSend>
 8009af2:	6278      	str	r0, [r7, #36]	; 0x24
 8009af4:	e012      	b.n	8009b1c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009af6:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <xTimerGenericCommand+0x9c>)
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f107 0110 	add.w	r1, r7, #16
 8009afe:	2300      	movs	r3, #0
 8009b00:	2200      	movs	r2, #0
 8009b02:	f7fe f837 	bl	8007b74 <xQueueGenericSend>
 8009b06:	6278      	str	r0, [r7, #36]	; 0x24
 8009b08:	e008      	b.n	8009b1c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b0a:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <xTimerGenericCommand+0x9c>)
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	f107 0110 	add.w	r1, r7, #16
 8009b12:	2300      	movs	r3, #0
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	f7fe f933 	bl	8007d80 <xQueueGenericSendFromISR>
 8009b1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3728      	adds	r7, #40	; 0x28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20000e08 	.word	0x20000e08

08009b2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b36:	4b23      	ldr	r3, [pc, #140]	; (8009bc4 <prvProcessExpiredTimer+0x98>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	3304      	adds	r3, #4
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd fd6d 	bl	8007624 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d024      	beq.n	8009ba2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	18d1      	adds	r1, r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	6978      	ldr	r0, [r7, #20]
 8009b66:	f000 f8d3 	bl	8009d10 <prvInsertTimerInActiveList>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d021      	beq.n	8009bb4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b70:	2300      	movs	r3, #0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	6978      	ldr	r0, [r7, #20]
 8009b7c:	f7ff ff86 	bl	8009a8c <xTimerGenericCommand>
 8009b80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d115      	bne.n	8009bb4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	b672      	cpsid	i
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	b662      	cpsie	i
 8009b9c:	60fb      	str	r3, [r7, #12]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ba8:	f023 0301 	bic.w	r3, r3, #1
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	6978      	ldr	r0, [r7, #20]
 8009bba:	4798      	blx	r3
}
 8009bbc:	bf00      	nop
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000e00 	.word	0x20000e00

08009bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bd0:	f107 0308 	add.w	r3, r7, #8
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 f857 	bl	8009c88 <prvGetNextExpireTime>
 8009bda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	4619      	mov	r1, r3
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 f803 	bl	8009bec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009be6:	f000 f8d5 	bl	8009d94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bea:	e7f1      	b.n	8009bd0 <prvTimerTask+0x8>

08009bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bf6:	f7ff f8f9 	bl	8008dec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bfa:	f107 0308 	add.w	r3, r7, #8
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f866 	bl	8009cd0 <prvSampleTimeNow>
 8009c04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d130      	bne.n	8009c6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <prvProcessTimerOrBlockTask+0x3c>
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d806      	bhi.n	8009c28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c1a:	f7ff f8f5 	bl	8008e08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ff83 	bl	8009b2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c26:	e024      	b.n	8009c72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <prvProcessTimerOrBlockTask+0x90>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <prvProcessTimerOrBlockTask+0x50>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <prvProcessTimerOrBlockTask+0x52>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c40:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <prvProcessTimerOrBlockTask+0x94>)
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	f7fe fe2f 	bl	80088b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c52:	f7ff f8d9 	bl	8008e08 <xTaskResumeAll>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c5c:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <prvProcessTimerOrBlockTask+0x98>)
 8009c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	f3bf 8f6f 	isb	sy
}
 8009c6c:	e001      	b.n	8009c72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c6e:	f7ff f8cb 	bl	8008e08 <xTaskResumeAll>
}
 8009c72:	bf00      	nop
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000e04 	.word	0x20000e04
 8009c80:	20000e08 	.word	0x20000e08
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c90:	4b0e      	ldr	r3, [pc, #56]	; (8009ccc <prvGetNextExpireTime+0x44>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <prvGetNextExpireTime+0x16>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	e000      	b.n	8009ca0 <prvGetNextExpireTime+0x18>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d105      	bne.n	8009cb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cac:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <prvGetNextExpireTime+0x44>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	e001      	b.n	8009cbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	20000e00 	.word	0x20000e00

08009cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cd8:	f7ff f936 	bl	8008f48 <xTaskGetTickCount>
 8009cdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cde:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <prvSampleTimeNow+0x3c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d205      	bcs.n	8009cf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ce8:	f000 f93c 	bl	8009f64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	e002      	b.n	8009cfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cfa:	4a04      	ldr	r2, [pc, #16]	; (8009d0c <prvSampleTimeNow+0x3c>)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d00:	68fb      	ldr	r3, [r7, #12]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000e10 	.word	0x20000e10

08009d10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d812      	bhi.n	8009d5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	1ad2      	subs	r2, r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d302      	bcc.n	8009d4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d44:	2301      	movs	r3, #1
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e01b      	b.n	8009d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d4a:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <prvInsertTimerInActiveList+0x7c>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3304      	adds	r3, #4
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f7fd fc2c 	bl	80075b2 <vListInsert>
 8009d5a:	e012      	b.n	8009d82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d206      	bcs.n	8009d72 <prvInsertTimerInActiveList+0x62>
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d302      	bcc.n	8009d72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	e007      	b.n	8009d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d72:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <prvInsertTimerInActiveList+0x80>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	f7fd fc18 	bl	80075b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d82:	697b      	ldr	r3, [r7, #20]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20000e04 	.word	0x20000e04
 8009d90:	20000e00 	.word	0x20000e00

08009d94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08e      	sub	sp, #56	; 0x38
 8009d98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d9a:	e0d0      	b.n	8009f3e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	da1a      	bge.n	8009dd8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009da2:	1d3b      	adds	r3, r7, #4
 8009da4:	3304      	adds	r3, #4
 8009da6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10c      	bne.n	8009dc8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	b672      	cpsid	i
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	b662      	cpsie	i
 8009dc2:	61fb      	str	r3, [r7, #28]
}
 8009dc4:	bf00      	nop
 8009dc6:	e7fe      	b.n	8009dc6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dce:	6850      	ldr	r0, [r2, #4]
 8009dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dd2:	6892      	ldr	r2, [r2, #8]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f2c0 80ae 	blt.w	8009f3c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	3304      	adds	r3, #4
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fd fc17 	bl	8007624 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009df6:	463b      	mov	r3, r7
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff ff69 	bl	8009cd0 <prvSampleTimeNow>
 8009dfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b09      	cmp	r3, #9
 8009e04:	f200 809b 	bhi.w	8009f3e <prvProcessReceivedCommands+0x1aa>
 8009e08:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <prvProcessReceivedCommands+0x7c>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e39 	.word	0x08009e39
 8009e14:	08009e39 	.word	0x08009e39
 8009e18:	08009e39 	.word	0x08009e39
 8009e1c:	08009eb1 	.word	0x08009eb1
 8009e20:	08009ec5 	.word	0x08009ec5
 8009e24:	08009f13 	.word	0x08009f13
 8009e28:	08009e39 	.word	0x08009e39
 8009e2c:	08009e39 	.word	0x08009e39
 8009e30:	08009eb1 	.word	0x08009eb1
 8009e34:	08009ec5 	.word	0x08009ec5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e3e:	f043 0301 	orr.w	r3, r3, #1
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	18d1      	adds	r1, r2, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e58:	f7ff ff5a 	bl	8009d10 <prvInsertTimerInActiveList>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d06d      	beq.n	8009f3e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d062      	beq.n	8009f3e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	441a      	add	r2, r3
 8009e80:	2300      	movs	r3, #0
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	2100      	movs	r1, #0
 8009e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e8a:	f7ff fdff 	bl	8009a8c <xTimerGenericCommand>
 8009e8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d153      	bne.n	8009f3e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	61bb      	str	r3, [r7, #24]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eb6:	f023 0301 	bic.w	r3, r3, #1
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ec2:	e03c      	b.n	8009f3e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eca:	f043 0301 	orr.w	r3, r3, #1
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10c      	bne.n	8009efe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	b672      	cpsid	i
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	b662      	cpsie	i
 8009ef8:	617b      	str	r3, [r7, #20]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	699a      	ldr	r2, [r3, #24]
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	18d1      	adds	r1, r2, r3
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f0c:	f7ff ff00 	bl	8009d10 <prvInsertTimerInActiveList>
					break;
 8009f10:	e015      	b.n	8009f3e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f18:	f003 0302 	and.w	r3, r3, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d103      	bne.n	8009f28 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f22:	f000 fbc9 	bl	800a6b8 <vPortFree>
 8009f26:	e00a      	b.n	8009f3e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f2e:	f023 0301 	bic.w	r3, r3, #1
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f3a:	e000      	b.n	8009f3e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f3e:	4b08      	ldr	r3, [pc, #32]	; (8009f60 <prvProcessReceivedCommands+0x1cc>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	1d39      	adds	r1, r7, #4
 8009f44:	2200      	movs	r2, #0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe f850 	bl	8007fec <xQueueReceive>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f47f af24 	bne.w	8009d9c <prvProcessReceivedCommands+0x8>
	}
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	3730      	adds	r7, #48	; 0x30
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000e08 	.word	0x20000e08

08009f64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f6a:	e04a      	b.n	800a002 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f6c:	4b2e      	ldr	r3, [pc, #184]	; (800a028 <prvSwitchTimerLists+0xc4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f76:	4b2c      	ldr	r3, [pc, #176]	; (800a028 <prvSwitchTimerLists+0xc4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fd fb4d 	bl	8007624 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d030      	beq.n	800a002 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d90e      	bls.n	8009fd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <prvSwitchTimerLists+0xc4>)
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7fd faf2 	bl	80075b2 <vListInsert>
 8009fce:	e018      	b.n	800a002 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7ff fd56 	bl	8009a8c <xTimerGenericCommand>
 8009fe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10c      	bne.n	800a002 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	b672      	cpsid	i
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	b662      	cpsie	i
 8009ffc:	603b      	str	r3, [r7, #0]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a002:	4b09      	ldr	r3, [pc, #36]	; (800a028 <prvSwitchTimerLists+0xc4>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1af      	bne.n	8009f6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a00c:	4b06      	ldr	r3, [pc, #24]	; (800a028 <prvSwitchTimerLists+0xc4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a012:	4b06      	ldr	r3, [pc, #24]	; (800a02c <prvSwitchTimerLists+0xc8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a04      	ldr	r2, [pc, #16]	; (800a028 <prvSwitchTimerLists+0xc4>)
 800a018:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a01a:	4a04      	ldr	r2, [pc, #16]	; (800a02c <prvSwitchTimerLists+0xc8>)
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	6013      	str	r3, [r2, #0]
}
 800a020:	bf00      	nop
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000e00 	.word	0x20000e00
 800a02c:	20000e04 	.word	0x20000e04

0800a030 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a036:	f000 f949 	bl	800a2cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a03a:	4b15      	ldr	r3, [pc, #84]	; (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d120      	bne.n	800a084 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a042:	4814      	ldr	r0, [pc, #80]	; (800a094 <prvCheckForValidListAndQueue+0x64>)
 800a044:	f7fd fa64 	bl	8007510 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a048:	4813      	ldr	r0, [pc, #76]	; (800a098 <prvCheckForValidListAndQueue+0x68>)
 800a04a:	f7fd fa61 	bl	8007510 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a04e:	4b13      	ldr	r3, [pc, #76]	; (800a09c <prvCheckForValidListAndQueue+0x6c>)
 800a050:	4a10      	ldr	r2, [pc, #64]	; (800a094 <prvCheckForValidListAndQueue+0x64>)
 800a052:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a054:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <prvCheckForValidListAndQueue+0x70>)
 800a056:	4a10      	ldr	r2, [pc, #64]	; (800a098 <prvCheckForValidListAndQueue+0x68>)
 800a058:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a05a:	2300      	movs	r3, #0
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	4b11      	ldr	r3, [pc, #68]	; (800a0a4 <prvCheckForValidListAndQueue+0x74>)
 800a060:	4a11      	ldr	r2, [pc, #68]	; (800a0a8 <prvCheckForValidListAndQueue+0x78>)
 800a062:	2110      	movs	r1, #16
 800a064:	200a      	movs	r0, #10
 800a066:	f7fd fb71 	bl	800774c <xQueueGenericCreateStatic>
 800a06a:	4603      	mov	r3, r0
 800a06c:	4a08      	ldr	r2, [pc, #32]	; (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a06e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d005      	beq.n	800a084 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	490b      	ldr	r1, [pc, #44]	; (800a0ac <prvCheckForValidListAndQueue+0x7c>)
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fbc2 	bl	8008808 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a084:	f000 f956 	bl	800a334 <vPortExitCritical>
}
 800a088:	bf00      	nop
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000e08 	.word	0x20000e08
 800a094:	20000dd8 	.word	0x20000dd8
 800a098:	20000dec 	.word	0x20000dec
 800a09c:	20000e00 	.word	0x20000e00
 800a0a0:	20000e04 	.word	0x20000e04
 800a0a4:	20000eb4 	.word	0x20000eb4
 800a0a8:	20000e14 	.word	0x20000e14
 800a0ac:	080190b8 	.word	0x080190b8

0800a0b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3b04      	subs	r3, #4
 800a0c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3b04      	subs	r3, #4
 800a0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f023 0201 	bic.w	r2, r3, #1
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0e0:	4a0c      	ldr	r2, [pc, #48]	; (800a114 <pxPortInitialiseStack+0x64>)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3b14      	subs	r3, #20
 800a0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b04      	subs	r3, #4
 800a0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f06f 0202 	mvn.w	r2, #2
 800a0fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3b20      	subs	r3, #32
 800a104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a106:	68fb      	ldr	r3, [r7, #12]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	0800a119 	.word	0x0800a119

0800a118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a122:	4b14      	ldr	r3, [pc, #80]	; (800a174 <prvTaskExitError+0x5c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d00c      	beq.n	800a146 <prvTaskExitError+0x2e>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	b672      	cpsid	i
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	b662      	cpsie	i
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <prvTaskExitError+0x2c>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	b672      	cpsid	i
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	b662      	cpsie	i
 800a15a:	60bb      	str	r3, [r7, #8]
}
 800a15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a15e:	bf00      	nop
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0fc      	beq.n	800a160 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a166:	bf00      	nop
 800a168:	bf00      	nop
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	200000c0 	.word	0x200000c0
	...

0800a180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <pxCurrentTCBConst2>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	f380 8809 	msr	PSP, r0
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	4770      	bx	lr
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst2>:
 800a1a0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1a8:	4808      	ldr	r0, [pc, #32]	; (800a1cc <prvPortStartFirstTask+0x24>)
 800a1aa:	6800      	ldr	r0, [r0, #0]
 800a1ac:	6800      	ldr	r0, [r0, #0]
 800a1ae:	f380 8808 	msr	MSP, r0
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8814 	msr	CONTROL, r0
 800a1ba:	b662      	cpsie	i
 800a1bc:	b661      	cpsie	f
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	df00      	svc	0
 800a1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed08 	.word	0xe000ed08

0800a1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1d6:	4b37      	ldr	r3, [pc, #220]	; (800a2b4 <xPortStartScheduler+0xe4>)
 800a1d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	22ff      	movs	r2, #255	; 0xff
 800a1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	4b2f      	ldr	r3, [pc, #188]	; (800a2b8 <xPortStartScheduler+0xe8>)
 800a1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1fe:	4b2f      	ldr	r3, [pc, #188]	; (800a2bc <xPortStartScheduler+0xec>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a204:	e009      	b.n	800a21a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a206:	4b2d      	ldr	r3, [pc, #180]	; (800a2bc <xPortStartScheduler+0xec>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	4a2b      	ldr	r2, [pc, #172]	; (800a2bc <xPortStartScheduler+0xec>)
 800a20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	b2db      	uxtb	r3, r3
 800a218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a222:	2b80      	cmp	r3, #128	; 0x80
 800a224:	d0ef      	beq.n	800a206 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a226:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <xPortStartScheduler+0xec>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f1c3 0307 	rsb	r3, r3, #7
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d00c      	beq.n	800a24c <xPortStartScheduler+0x7c>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	b672      	cpsid	i
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	b662      	cpsie	i
 800a246:	60bb      	str	r3, [r7, #8]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a24c:	4b1b      	ldr	r3, [pc, #108]	; (800a2bc <xPortStartScheduler+0xec>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	4a1a      	ldr	r2, [pc, #104]	; (800a2bc <xPortStartScheduler+0xec>)
 800a254:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a256:	4b19      	ldr	r3, [pc, #100]	; (800a2bc <xPortStartScheduler+0xec>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a25e:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <xPortStartScheduler+0xec>)
 800a260:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	b2da      	uxtb	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a14      	ldr	r2, [pc, #80]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a274:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a276:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a11      	ldr	r2, [pc, #68]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a27c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a280:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a282:	f000 f8dd 	bl	800a440 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a286:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <xPortStartScheduler+0xf4>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a28c:	f000 f8fc 	bl	800a488 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a290:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <xPortStartScheduler+0xf8>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <xPortStartScheduler+0xf8>)
 800a296:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a29a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a29c:	f7ff ff84 	bl	800a1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2a0:	f7fe ff30 	bl	8009104 <vTaskSwitchContext>
	prvTaskExitError();
 800a2a4:	f7ff ff38 	bl	800a118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	e000e400 	.word	0xe000e400
 800a2b8:	20000f04 	.word	0x20000f04
 800a2bc:	20000f08 	.word	0x20000f08
 800a2c0:	e000ed20 	.word	0xe000ed20
 800a2c4:	200000c0 	.word	0x200000c0
 800a2c8:	e000ef34 	.word	0xe000ef34

0800a2cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	b672      	cpsid	i
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	b662      	cpsie	i
 800a2e6:	607b      	str	r3, [r7, #4]
}
 800a2e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2ea:	4b10      	ldr	r3, [pc, #64]	; (800a32c <vPortEnterCritical+0x60>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	4a0e      	ldr	r2, [pc, #56]	; (800a32c <vPortEnterCritical+0x60>)
 800a2f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2f4:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <vPortEnterCritical+0x60>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d111      	bne.n	800a320 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2fc:	4b0c      	ldr	r3, [pc, #48]	; (800a330 <vPortEnterCritical+0x64>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <vPortEnterCritical+0x54>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	b672      	cpsid	i
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	b662      	cpsie	i
 800a31a:	603b      	str	r3, [r7, #0]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <vPortEnterCritical+0x52>
	}
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	200000c0 	.word	0x200000c0
 800a330:	e000ed04 	.word	0xe000ed04

0800a334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <vPortExitCritical+0x54>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10c      	bne.n	800a35c <vPortExitCritical+0x28>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	b672      	cpsid	i
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	b662      	cpsie	i
 800a356:	607b      	str	r3, [r7, #4]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a35c:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <vPortExitCritical+0x54>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3b01      	subs	r3, #1
 800a362:	4a09      	ldr	r2, [pc, #36]	; (800a388 <vPortExitCritical+0x54>)
 800a364:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a366:	4b08      	ldr	r3, [pc, #32]	; (800a388 <vPortExitCritical+0x54>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d105      	bne.n	800a37a <vPortExitCritical+0x46>
 800a36e:	2300      	movs	r3, #0
 800a370:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	f383 8811 	msr	BASEPRI, r3
}
 800a378:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a37a:	bf00      	nop
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	200000c0 	.word	0x200000c0
 800a38c:	00000000 	.word	0x00000000

0800a390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a390:	f3ef 8009 	mrs	r0, PSP
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <pxCurrentTCBConst>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f01e 0f10 	tst.w	lr, #16
 800a3a0:	bf08      	it	eq
 800a3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3b4:	b672      	cpsid	i
 800a3b6:	f380 8811 	msr	BASEPRI, r0
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	b662      	cpsie	i
 800a3c4:	f7fe fe9e 	bl	8009104 <vTaskSwitchContext>
 800a3c8:	f04f 0000 	mov.w	r0, #0
 800a3cc:	f380 8811 	msr	BASEPRI, r0
 800a3d0:	bc09      	pop	{r0, r3}
 800a3d2:	6819      	ldr	r1, [r3, #0]
 800a3d4:	6808      	ldr	r0, [r1, #0]
 800a3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3da:	f01e 0f10 	tst.w	lr, #16
 800a3de:	bf08      	it	eq
 800a3e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3e4:	f380 8809 	msr	PSP, r0
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop

0800a3f0 <pxCurrentTCBConst>:
 800a3f0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	b672      	cpsid	i
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	b662      	cpsie	i
 800a412:	607b      	str	r3, [r7, #4]
}
 800a414:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a416:	f7fe fdb9 	bl	8008f8c <xTaskIncrementTick>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <SysTick_Handler+0x44>)
 800a422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	2300      	movs	r3, #0
 800a42a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	f383 8811 	msr	BASEPRI, r3
}
 800a432:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	e000ed04 	.word	0xe000ed04

0800a440 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a444:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <vPortSetupTimerInterrupt+0x34>)
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <vPortSetupTimerInterrupt+0x38>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <vPortSetupTimerInterrupt+0x3c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a0a      	ldr	r2, [pc, #40]	; (800a480 <vPortSetupTimerInterrupt+0x40>)
 800a456:	fba2 2303 	umull	r2, r3, r2, r3
 800a45a:	099b      	lsrs	r3, r3, #6
 800a45c:	4a09      	ldr	r2, [pc, #36]	; (800a484 <vPortSetupTimerInterrupt+0x44>)
 800a45e:	3b01      	subs	r3, #1
 800a460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a462:	4b04      	ldr	r3, [pc, #16]	; (800a474 <vPortSetupTimerInterrupt+0x34>)
 800a464:	2207      	movs	r2, #7
 800a466:	601a      	str	r2, [r3, #0]
}
 800a468:	bf00      	nop
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	e000e010 	.word	0xe000e010
 800a478:	e000e018 	.word	0xe000e018
 800a47c:	20000008 	.word	0x20000008
 800a480:	10624dd3 	.word	0x10624dd3
 800a484:	e000e014 	.word	0xe000e014

0800a488 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a488:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a498 <vPortEnableVFP+0x10>
 800a48c:	6801      	ldr	r1, [r0, #0]
 800a48e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a492:	6001      	str	r1, [r0, #0]
 800a494:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a496:	bf00      	nop
 800a498:	e000ed88 	.word	0xe000ed88

0800a49c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4a2:	f3ef 8305 	mrs	r3, IPSR
 800a4a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b0f      	cmp	r3, #15
 800a4ac:	d916      	bls.n	800a4dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ae:	4a19      	ldr	r2, [pc, #100]	; (800a514 <vPortValidateInterruptPriority+0x78>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4b8:	4b17      	ldr	r3, [pc, #92]	; (800a518 <vPortValidateInterruptPriority+0x7c>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	7afa      	ldrb	r2, [r7, #11]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d20c      	bcs.n	800a4dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	b672      	cpsid	i
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	b662      	cpsie	i
 800a4d6:	607b      	str	r3, [r7, #4]
}
 800a4d8:	bf00      	nop
 800a4da:	e7fe      	b.n	800a4da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4dc:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <vPortValidateInterruptPriority+0x80>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <vPortValidateInterruptPriority+0x84>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d90c      	bls.n	800a506 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	b672      	cpsid	i
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	b662      	cpsie	i
 800a500:	603b      	str	r3, [r7, #0]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <vPortValidateInterruptPriority+0x68>
	}
 800a506:	bf00      	nop
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	e000e3f0 	.word	0xe000e3f0
 800a518:	20000f04 	.word	0x20000f04
 800a51c:	e000ed0c 	.word	0xe000ed0c
 800a520:	20000f08 	.word	0x20000f08

0800a524 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08a      	sub	sp, #40	; 0x28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a530:	f7fe fc5c 	bl	8008dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a534:	4b5b      	ldr	r3, [pc, #364]	; (800a6a4 <pvPortMalloc+0x180>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a53c:	f000 f91a 	bl	800a774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a540:	4b59      	ldr	r3, [pc, #356]	; (800a6a8 <pvPortMalloc+0x184>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4013      	ands	r3, r2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f040 8092 	bne.w	800a672 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01f      	beq.n	800a594 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a554:	2208      	movs	r2, #8
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4413      	add	r3, r2
 800a55a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	2b00      	cmp	r3, #0
 800a564:	d016      	beq.n	800a594 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f023 0307 	bic.w	r3, r3, #7
 800a56c:	3308      	adds	r3, #8
 800a56e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00c      	beq.n	800a594 <pvPortMalloc+0x70>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	b672      	cpsid	i
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	b662      	cpsie	i
 800a58e:	617b      	str	r3, [r7, #20]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d06b      	beq.n	800a672 <pvPortMalloc+0x14e>
 800a59a:	4b44      	ldr	r3, [pc, #272]	; (800a6ac <pvPortMalloc+0x188>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d866      	bhi.n	800a672 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5a4:	4b42      	ldr	r3, [pc, #264]	; (800a6b0 <pvPortMalloc+0x18c>)
 800a5a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5a8:	4b41      	ldr	r3, [pc, #260]	; (800a6b0 <pvPortMalloc+0x18c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ae:	e004      	b.n	800a5ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d903      	bls.n	800a5cc <pvPortMalloc+0xa8>
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1f1      	bne.n	800a5b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5cc:	4b35      	ldr	r3, [pc, #212]	; (800a6a4 <pvPortMalloc+0x180>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d04d      	beq.n	800a672 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2208      	movs	r2, #8
 800a5dc:	4413      	add	r3, r2
 800a5de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	2308      	movs	r3, #8
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d921      	bls.n	800a63c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00c      	beq.n	800a624 <pvPortMalloc+0x100>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	b672      	cpsid	i
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	b662      	cpsie	i
 800a61e:	613b      	str	r3, [r7, #16]
}
 800a620:	bf00      	nop
 800a622:	e7fe      	b.n	800a622 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	1ad2      	subs	r2, r2, r3
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a636:	69b8      	ldr	r0, [r7, #24]
 800a638:	f000 f8fe 	bl	800a838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a63c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <pvPortMalloc+0x188>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <pvPortMalloc+0x188>)
 800a648:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a64a:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <pvPortMalloc+0x188>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b19      	ldr	r3, [pc, #100]	; (800a6b4 <pvPortMalloc+0x190>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d203      	bcs.n	800a65e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <pvPortMalloc+0x188>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a16      	ldr	r2, [pc, #88]	; (800a6b4 <pvPortMalloc+0x190>)
 800a65c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	4b11      	ldr	r3, [pc, #68]	; (800a6a8 <pvPortMalloc+0x184>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	431a      	orrs	r2, r3
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a672:	f7fe fbc9 	bl	8008e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00c      	beq.n	800a69a <pvPortMalloc+0x176>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	b672      	cpsid	i
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	b662      	cpsie	i
 800a694:	60fb      	str	r3, [r7, #12]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <pvPortMalloc+0x174>
	return pvReturn;
 800a69a:	69fb      	ldr	r3, [r7, #28]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3728      	adds	r7, #40	; 0x28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	20004b14 	.word	0x20004b14
 800a6a8:	20004b20 	.word	0x20004b20
 800a6ac:	20004b18 	.word	0x20004b18
 800a6b0:	20004b0c 	.word	0x20004b0c
 800a6b4:	20004b1c 	.word	0x20004b1c

0800a6b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d04c      	beq.n	800a764 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	425b      	negs	r3, r3
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4b23      	ldr	r3, [pc, #140]	; (800a76c <vPortFree+0xb4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10c      	bne.n	800a700 <vPortFree+0x48>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	b672      	cpsid	i
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	b662      	cpsie	i
 800a6fa:	60fb      	str	r3, [r7, #12]
}
 800a6fc:	bf00      	nop
 800a6fe:	e7fe      	b.n	800a6fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00c      	beq.n	800a722 <vPortFree+0x6a>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	b672      	cpsid	i
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	b662      	cpsie	i
 800a71c:	60bb      	str	r3, [r7, #8]
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	4b11      	ldr	r3, [pc, #68]	; (800a76c <vPortFree+0xb4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4013      	ands	r3, r2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d019      	beq.n	800a764 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d115      	bne.n	800a764 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <vPortFree+0xb4>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	43db      	mvns	r3, r3
 800a742:	401a      	ands	r2, r3
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a748:	f7fe fb50 	bl	8008dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	4b07      	ldr	r3, [pc, #28]	; (800a770 <vPortFree+0xb8>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4413      	add	r3, r2
 800a756:	4a06      	ldr	r2, [pc, #24]	; (800a770 <vPortFree+0xb8>)
 800a758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a75a:	6938      	ldr	r0, [r7, #16]
 800a75c:	f000 f86c 	bl	800a838 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a760:	f7fe fb52 	bl	8008e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	20004b20 	.word	0x20004b20
 800a770:	20004b18 	.word	0x20004b18

0800a774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a77a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a77e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a780:	4b27      	ldr	r3, [pc, #156]	; (800a820 <prvHeapInit+0xac>)
 800a782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3307      	adds	r3, #7
 800a792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	4a1f      	ldr	r2, [pc, #124]	; (800a820 <prvHeapInit+0xac>)
 800a7a4:	4413      	add	r3, r2
 800a7a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7ac:	4a1d      	ldr	r2, [pc, #116]	; (800a824 <prvHeapInit+0xb0>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7b2:	4b1c      	ldr	r3, [pc, #112]	; (800a824 <prvHeapInit+0xb0>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0307 	bic.w	r3, r3, #7
 800a7ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a15      	ldr	r2, [pc, #84]	; (800a828 <prvHeapInit+0xb4>)
 800a7d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <prvHeapInit+0xb4>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7de:	4b12      	ldr	r3, [pc, #72]	; (800a828 <prvHeapInit+0xb4>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	1ad2      	subs	r2, r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <prvHeapInit+0xb4>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4a0a      	ldr	r2, [pc, #40]	; (800a82c <prvHeapInit+0xb8>)
 800a802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4a09      	ldr	r2, [pc, #36]	; (800a830 <prvHeapInit+0xbc>)
 800a80a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a80c:	4b09      	ldr	r3, [pc, #36]	; (800a834 <prvHeapInit+0xc0>)
 800a80e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	20000f0c 	.word	0x20000f0c
 800a824:	20004b0c 	.word	0x20004b0c
 800a828:	20004b14 	.word	0x20004b14
 800a82c:	20004b1c 	.word	0x20004b1c
 800a830:	20004b18 	.word	0x20004b18
 800a834:	20004b20 	.word	0x20004b20

0800a838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a840:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <prvInsertBlockIntoFreeList+0xac>)
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	e002      	b.n	800a84c <prvInsertBlockIntoFreeList+0x14>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d8f7      	bhi.n	800a846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	4413      	add	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	429a      	cmp	r2, r3
 800a866:	d108      	bne.n	800a87a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	441a      	add	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	441a      	add	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d118      	bne.n	800a8c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d00d      	beq.n	800a8b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	441a      	add	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	e008      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	e003      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d002      	beq.n	800a8d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8d6:	bf00      	nop
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20004b0c 	.word	0x20004b0c
 800a8e8:	20004b14 	.word	0x20004b14

0800a8ec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	330c      	adds	r3, #12
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f002 fa9f 	bl	800ce44 <tcpip_send_msg_wait_sem>
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d103      	bne.n	800a91a <netconn_apimsg+0x2e>
    return apimsg->err;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a918:	e001      	b.n	800a91e <netconn_apimsg+0x32>
  }
  return err;
 800a91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08c      	sub	sp, #48	; 0x30
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	4603      	mov	r3, r0
 800a930:	603a      	str	r2, [r7, #0]
 800a932:	71fb      	strb	r3, [r7, #7]
 800a934:	460b      	mov	r3, r1
 800a936:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f001 f923 	bl	800bb88 <netconn_alloc>
 800a942:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d054      	beq.n	800a9f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a94a:	79bb      	ldrb	r3, [r7, #6]
 800a94c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a952:	f107 0308 	add.w	r3, r7, #8
 800a956:	4619      	mov	r1, r3
 800a958:	4829      	ldr	r0, [pc, #164]	; (800aa00 <netconn_new_with_proto_and_callback+0xd8>)
 800a95a:	f7ff ffc7 	bl	800a8ec <netconn_apimsg>
 800a95e:	4603      	mov	r3, r0
 800a960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a964:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d043      	beq.n	800a9f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <netconn_new_with_proto_and_callback+0x58>
 800a974:	4b23      	ldr	r3, [pc, #140]	; (800aa04 <netconn_new_with_proto_and_callback+0xdc>)
 800a976:	22a3      	movs	r2, #163	; 0xa3
 800a978:	4923      	ldr	r1, [pc, #140]	; (800aa08 <netconn_new_with_proto_and_callback+0xe0>)
 800a97a:	4824      	ldr	r0, [pc, #144]	; (800aa0c <netconn_new_with_proto_and_callback+0xe4>)
 800a97c:	f00d fc16 	bl	80181ac <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a982:	3310      	adds	r3, #16
 800a984:	4618      	mov	r0, r3
 800a986:	f00d f94d 	bl	8017c24 <sys_mbox_valid>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d105      	bne.n	800a99c <netconn_new_with_proto_and_callback+0x74>
 800a990:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <netconn_new_with_proto_and_callback+0xdc>)
 800a992:	22a4      	movs	r2, #164	; 0xa4
 800a994:	491e      	ldr	r1, [pc, #120]	; (800aa10 <netconn_new_with_proto_and_callback+0xe8>)
 800a996:	481d      	ldr	r0, [pc, #116]	; (800aa0c <netconn_new_with_proto_and_callback+0xe4>)
 800a998:	f00d fc08 	bl	80181ac <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	3314      	adds	r3, #20
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f00d f93f 	bl	8017c24 <sys_mbox_valid>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d005      	beq.n	800a9b8 <netconn_new_with_proto_and_callback+0x90>
 800a9ac:	4b15      	ldr	r3, [pc, #84]	; (800aa04 <netconn_new_with_proto_and_callback+0xdc>)
 800a9ae:	22a6      	movs	r2, #166	; 0xa6
 800a9b0:	4918      	ldr	r1, [pc, #96]	; (800aa14 <netconn_new_with_proto_and_callback+0xec>)
 800a9b2:	4816      	ldr	r0, [pc, #88]	; (800aa0c <netconn_new_with_proto_and_callback+0xe4>)
 800a9b4:	f00d fbfa 	bl	80181ac <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	330c      	adds	r3, #12
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f00d f9bf 	bl	8017d40 <sys_sem_valid>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d105      	bne.n	800a9d4 <netconn_new_with_proto_and_callback+0xac>
 800a9c8:	4b0e      	ldr	r3, [pc, #56]	; (800aa04 <netconn_new_with_proto_and_callback+0xdc>)
 800a9ca:	22a9      	movs	r2, #169	; 0xa9
 800a9cc:	4912      	ldr	r1, [pc, #72]	; (800aa18 <netconn_new_with_proto_and_callback+0xf0>)
 800a9ce:	480f      	ldr	r0, [pc, #60]	; (800aa0c <netconn_new_with_proto_and_callback+0xe4>)
 800a9d0:	f00d fbec 	bl	80181ac <iprintf>
      sys_sem_free(&conn->op_completed);
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	330c      	adds	r3, #12
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f00d f9a4 	bl	8017d26 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e0:	3310      	adds	r3, #16
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f00d f8aa 	bl	8017b3c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a9e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9ea:	2007      	movs	r0, #7
 800a9ec:	f002 ff92 	bl	800d914 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	e000      	b.n	800a9f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3730      	adds	r7, #48	; 0x30
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	0800bb5d 	.word	0x0800bb5d
 800aa04:	080190c0 	.word	0x080190c0
 800aa08:	080190f4 	.word	0x080190f4
 800aa0c:	08019118 	.word	0x08019118
 800aa10:	08019140 	.word	0x08019140
 800aa14:	08019158 	.word	0x08019158
 800aa18:	0801917c 	.word	0x0801917c

0800aa1c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08c      	sub	sp, #48	; 0x30
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e014      	b.n	800aa58 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800aa32:	2329      	movs	r3, #41	; 0x29
 800aa34:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800aa36:	f107 030c 	add.w	r3, r7, #12
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	4808      	ldr	r0, [pc, #32]	; (800aa60 <netconn_prepare_delete+0x44>)
 800aa3e:	f7ff ff55 	bl	800a8ec <netconn_apimsg>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800aa48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <netconn_prepare_delete+0x3a>
    return err;
 800aa50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa54:	e000      	b.n	800aa58 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3730      	adds	r7, #48	; 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	0800c0c1 	.word	0x0800c0c1

0800aa64 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <netconn_delete+0x12>
    return ERR_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	e00d      	b.n	800aa92 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff ffd0 	bl	800aa1c <netconn_prepare_delete>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800aa80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <netconn_delete+0x2a>
    netconn_free(conn);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 f8eb 	bl	800bc64 <netconn_free>
  }
  return err;
 800aa8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b08e      	sub	sp, #56	; 0x38
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d109      	bne.n	800aac4 <netconn_bind+0x28>
 800aab0:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <netconn_bind+0x5c>)
 800aab2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800aab6:	4911      	ldr	r1, [pc, #68]	; (800aafc <netconn_bind+0x60>)
 800aab8:	4811      	ldr	r0, [pc, #68]	; (800ab00 <netconn_bind+0x64>)
 800aaba:	f00d fb77 	bl	80181ac <iprintf>
 800aabe:	f06f 030f 	mvn.w	r3, #15
 800aac2:	e015      	b.n	800aaf0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800aaca:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <netconn_bind+0x68>)
 800aacc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800aad6:	88fb      	ldrh	r3, [r7, #6]
 800aad8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800aada:	f107 0314 	add.w	r3, r7, #20
 800aade:	4619      	mov	r1, r3
 800aae0:	4809      	ldr	r0, [pc, #36]	; (800ab08 <netconn_bind+0x6c>)
 800aae2:	f7ff ff03 	bl	800a8ec <netconn_apimsg>
 800aae6:	4603      	mov	r3, r0
 800aae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800aaec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3738      	adds	r7, #56	; 0x38
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	080190c0 	.word	0x080190c0
 800aafc:	080191f8 	.word	0x080191f8
 800ab00:	08019118 	.word	0x08019118
 800ab04:	0801c6e0 	.word	0x0801c6e0
 800ab08:	0800c289 	.word	0x0800c289

0800ab0c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08c      	sub	sp, #48	; 0x30
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d109      	bne.n	800ab32 <netconn_listen_with_backlog+0x26>
 800ab1e:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <netconn_listen_with_backlog+0x48>)
 800ab20:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ab24:	490c      	ldr	r1, [pc, #48]	; (800ab58 <netconn_listen_with_backlog+0x4c>)
 800ab26:	480d      	ldr	r0, [pc, #52]	; (800ab5c <netconn_listen_with_backlog+0x50>)
 800ab28:	f00d fb40 	bl	80181ac <iprintf>
 800ab2c:	f06f 030f 	mvn.w	r3, #15
 800ab30:	e00c      	b.n	800ab4c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ab36:	f107 030c 	add.w	r3, r7, #12
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4808      	ldr	r0, [pc, #32]	; (800ab60 <netconn_listen_with_backlog+0x54>)
 800ab3e:	f7ff fed5 	bl	800a8ec <netconn_apimsg>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ab48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3730      	adds	r7, #48	; 0x30
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	080190c0 	.word	0x080190c0
 800ab58:	08019278 	.word	0x08019278
 800ab5c:	08019118 	.word	0x08019118
 800ab60:	0800c2fd 	.word	0x0800c2fd

0800ab64 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d109      	bne.n	800ab88 <netconn_accept+0x24>
 800ab74:	4b3d      	ldr	r3, [pc, #244]	; (800ac6c <netconn_accept+0x108>)
 800ab76:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ab7a:	493d      	ldr	r1, [pc, #244]	; (800ac70 <netconn_accept+0x10c>)
 800ab7c:	483d      	ldr	r0, [pc, #244]	; (800ac74 <netconn_accept+0x110>)
 800ab7e:	f00d fb15 	bl	80181ac <iprintf>
 800ab82:	f06f 030f 	mvn.w	r3, #15
 800ab86:	e06c      	b.n	800ac62 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d109      	bne.n	800aba8 <netconn_accept+0x44>
 800ab94:	4b35      	ldr	r3, [pc, #212]	; (800ac6c <netconn_accept+0x108>)
 800ab96:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ab9a:	4937      	ldr	r1, [pc, #220]	; (800ac78 <netconn_accept+0x114>)
 800ab9c:	4835      	ldr	r0, [pc, #212]	; (800ac74 <netconn_accept+0x110>)
 800ab9e:	f00d fb05 	bl	80181ac <iprintf>
 800aba2:	f06f 030f 	mvn.w	r3, #15
 800aba6:	e05c      	b.n	800ac62 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fb6c 	bl	800b286 <netconn_err>
 800abae:	4603      	mov	r3, r0
 800abb0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800abb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800abba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abbe:	e050      	b.n	800ac62 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3314      	adds	r3, #20
 800abc4:	4618      	mov	r0, r3
 800abc6:	f00d f82d 	bl	8017c24 <sys_mbox_valid>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <netconn_accept+0x78>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7f1b      	ldrb	r3, [r3, #28]
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800abdc:	f06f 030e 	mvn.w	r3, #14
 800abe0:	e03f      	b.n	800ac62 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	7f1b      	ldrb	r3, [r3, #28]
 800abe6:	f003 0302 	and.w	r3, r3, #2
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00e      	beq.n	800ac0c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3314      	adds	r3, #20
 800abf2:	f107 020c 	add.w	r2, r7, #12
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f00c fffc 	bl	8017bf6 <sys_arch_mbox_tryfetch>
 800abfe:	4603      	mov	r3, r0
 800ac00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac04:	d10a      	bne.n	800ac1c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ac06:	f06f 0306 	mvn.w	r3, #6
 800ac0a:	e02a      	b.n	800ac62 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3314      	adds	r3, #20
 800ac10:	f107 010c 	add.w	r1, r7, #12
 800ac14:	2200      	movs	r2, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f00c ffbc 	bl	8017b94 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <netconn_accept+0xcc>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f107 0213 	add.w	r2, r7, #19
 800ac36:	4611      	mov	r1, r2
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 fb75 	bl	800b328 <lwip_netconn_is_err_msg>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ac44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac48:	e00b      	b.n	800ac62 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ac50:	f06f 030e 	mvn.w	r3, #14
 800ac54:	e005      	b.n	800ac62 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ac60:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	080190c0 	.word	0x080190c0
 800ac70:	08019298 	.word	0x08019298
 800ac74:	08019118 	.word	0x08019118
 800ac78:	080192b8 	.word	0x080192b8

0800ac7c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	4613      	mov	r3, r2
 800ac88:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d109      	bne.n	800aca8 <netconn_recv_data+0x2c>
 800ac94:	4b58      	ldr	r3, [pc, #352]	; (800adf8 <netconn_recv_data+0x17c>)
 800ac96:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ac9a:	4958      	ldr	r1, [pc, #352]	; (800adfc <netconn_recv_data+0x180>)
 800ac9c:	4858      	ldr	r0, [pc, #352]	; (800ae00 <netconn_recv_data+0x184>)
 800ac9e:	f00d fa85 	bl	80181ac <iprintf>
 800aca2:	f06f 030f 	mvn.w	r3, #15
 800aca6:	e0a2      	b.n	800adee <netconn_recv_data+0x172>
  *new_buf = NULL;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d109      	bne.n	800acc8 <netconn_recv_data+0x4c>
 800acb4:	4b50      	ldr	r3, [pc, #320]	; (800adf8 <netconn_recv_data+0x17c>)
 800acb6:	f240 224a 	movw	r2, #586	; 0x24a
 800acba:	4952      	ldr	r1, [pc, #328]	; (800ae04 <netconn_recv_data+0x188>)
 800acbc:	4850      	ldr	r0, [pc, #320]	; (800ae00 <netconn_recv_data+0x184>)
 800acbe:	f00d fa75 	bl	80181ac <iprintf>
 800acc2:	f06f 030f 	mvn.w	r3, #15
 800acc6:	e092      	b.n	800adee <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	3310      	adds	r3, #16
 800accc:	4618      	mov	r0, r3
 800acce:	f00c ffa9 	bl	8017c24 <sys_mbox_valid>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10e      	bne.n	800acf6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 fad4 	bl	800b286 <netconn_err>
 800acde:	4603      	mov	r3, r0
 800ace0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ace2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800acea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800acee:	e07e      	b.n	800adee <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800acf0:	f06f 030a 	mvn.w	r3, #10
 800acf4:	e07b      	b.n	800adee <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	7f1b      	ldrb	r3, [r3, #28]
 800acfa:	f003 0302 	and.w	r3, r3, #2
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10f      	bne.n	800ad22 <netconn_recv_data+0xa6>
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	7f1b      	ldrb	r3, [r3, #28]
 800ad10:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d023      	beq.n	800ad6a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3310      	adds	r3, #16
 800ad26:	f107 0218 	add.w	r2, r7, #24
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f00c ff62 	bl	8017bf6 <sys_arch_mbox_tryfetch>
 800ad32:	4603      	mov	r3, r0
 800ad34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad38:	d11f      	bne.n	800ad7a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 faa3 	bl	800b286 <netconn_err>
 800ad40:	4603      	mov	r3, r0
 800ad42:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800ad44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ad4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ad50:	e04d      	b.n	800adee <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	7f1b      	ldrb	r3, [r3, #28]
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ad5e:	f06f 030a 	mvn.w	r3, #10
 800ad62:	e044      	b.n	800adee <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ad64:	f06f 0306 	mvn.w	r3, #6
 800ad68:	e041      	b.n	800adee <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3310      	adds	r3, #16
 800ad6e:	f107 0118 	add.w	r1, r7, #24
 800ad72:	2200      	movs	r2, #0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f00c ff0d 	bl	8017b94 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad82:	2b10      	cmp	r3, #16
 800ad84:	d117      	bne.n	800adb6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	f107 0217 	add.w	r2, r7, #23
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 faca 	bl	800b328 <lwip_netconn_is_err_msg>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ad9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad9e:	f113 0f0f 	cmn.w	r3, #15
 800ada2:	d101      	bne.n	800ada8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	e022      	b.n	800adee <netconn_recv_data+0x172>
      }
      return err;
 800ada8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adac:	e01f      	b.n	800adee <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	891b      	ldrh	r3, [r3, #8]
 800adb2:	83fb      	strh	r3, [r7, #30]
 800adb4:	e00d      	b.n	800add2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d106      	bne.n	800adca <netconn_recv_data+0x14e>
 800adbc:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <netconn_recv_data+0x17c>)
 800adbe:	f240 2291 	movw	r2, #657	; 0x291
 800adc2:	4911      	ldr	r1, [pc, #68]	; (800ae08 <netconn_recv_data+0x18c>)
 800adc4:	480e      	ldr	r0, [pc, #56]	; (800ae00 <netconn_recv_data+0x184>)
 800adc6:	f00d f9f1 	bl	80181ac <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	891b      	ldrh	r3, [r3, #8]
 800add0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <netconn_recv_data+0x16a>
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	8bfa      	ldrh	r2, [r7, #30]
 800ade0:	2101      	movs	r1, #1
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	080190c0 	.word	0x080190c0
 800adfc:	080192d8 	.word	0x080192d8
 800ae00:	08019118 	.word	0x08019118
 800ae04:	080192f8 	.word	0x080192f8
 800ae08:	08019314 	.word	0x08019314

0800ae0c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d005      	beq.n	800ae2a <netconn_tcp_recvd_msg+0x1e>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d009      	beq.n	800ae3e <netconn_tcp_recvd_msg+0x32>
 800ae2a:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <netconn_tcp_recvd_msg+0x50>)
 800ae2c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800ae30:	490b      	ldr	r1, [pc, #44]	; (800ae60 <netconn_tcp_recvd_msg+0x54>)
 800ae32:	480c      	ldr	r0, [pc, #48]	; (800ae64 <netconn_tcp_recvd_msg+0x58>)
 800ae34:	f00d f9ba 	bl	80181ac <iprintf>
 800ae38:	f06f 030f 	mvn.w	r3, #15
 800ae3c:	e00a      	b.n	800ae54 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4806      	ldr	r0, [pc, #24]	; (800ae68 <netconn_tcp_recvd_msg+0x5c>)
 800ae4e:	f7ff fd4d 	bl	800a8ec <netconn_apimsg>
 800ae52:	4603      	mov	r3, r0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	080190c0 	.word	0x080190c0
 800ae60:	08019320 	.word	0x08019320
 800ae64:	08019118 	.word	0x08019118
 800ae68:	0800c42d 	.word	0x0800c42d

0800ae6c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b090      	sub	sp, #64	; 0x40
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	4613      	mov	r3, r2
 800ae78:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3310      	adds	r3, #16
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f00c fed0 	bl	8017c24 <sys_mbox_valid>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ae8a:	f06f 030a 	mvn.w	r3, #10
 800ae8e:	e06d      	b.n	800af6c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	7f1b      	ldrb	r3, [r3, #28]
 800ae94:	b25b      	sxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	da07      	bge.n	800aeaa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	7f1b      	ldrb	r3, [r3, #28]
 800ae9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800aea8:	e039      	b.n	800af1e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	461a      	mov	r2, r3
 800aeae:	68b9      	ldr	r1, [r7, #8]
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7ff fee3 	bl	800ac7c <netconn_recv_data>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800aebc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800aec4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aec8:	e050      	b.n	800af6c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	f003 0308 	and.w	r3, r3, #8
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10e      	bne.n	800aef8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <netconn_recv_data_tcp+0x7a>
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	891b      	ldrh	r3, [r3, #8]
 800aee4:	e000      	b.n	800aee8 <netconn_recv_data_tcp+0x7c>
 800aee6:	2301      	movs	r3, #1
 800aee8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800aeea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aeec:	f107 0214 	add.w	r2, r7, #20
 800aef0:	4619      	mov	r1, r3
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff ff8a 	bl	800ae0c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800aef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d134      	bne.n	800af68 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	f003 0310 	and.w	r3, r3, #16
 800af04:	2b00      	cmp	r3, #0
 800af06:	d009      	beq.n	800af1c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	7f1b      	ldrb	r3, [r3, #28]
 800af0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af10:	b2da      	uxtb	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800af16:	f06f 0306 	mvn.w	r3, #6
 800af1a:	e027      	b.n	800af6c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800af1c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <netconn_recv_data_tcp+0xc6>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	2200      	movs	r2, #0
 800af2c:	2101      	movs	r1, #1
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10f      	bne.n	800af5a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 f9a3 	bl	800b286 <netconn_err>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800af46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d002      	beq.n	800af54 <netconn_recv_data_tcp+0xe8>
          return err;
 800af4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af52:	e00b      	b.n	800af6c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800af54:	f06f 030d 	mvn.w	r3, #13
 800af58:	e008      	b.n	800af6c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800af5a:	2101      	movs	r1, #1
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f000 f955 	bl	800b20c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800af62:	f06f 030e 	mvn.w	r3, #14
 800af66:	e001      	b.n	800af6c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800af68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3740      	adds	r7, #64	; 0x40
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d109      	bne.n	800af9c <netconn_recv+0x28>
 800af88:	4b32      	ldr	r3, [pc, #200]	; (800b054 <netconn_recv+0xe0>)
 800af8a:	f240 3263 	movw	r2, #867	; 0x363
 800af8e:	4932      	ldr	r1, [pc, #200]	; (800b058 <netconn_recv+0xe4>)
 800af90:	4832      	ldr	r0, [pc, #200]	; (800b05c <netconn_recv+0xe8>)
 800af92:	f00d f90b 	bl	80181ac <iprintf>
 800af96:	f06f 030f 	mvn.w	r3, #15
 800af9a:	e056      	b.n	800b04a <netconn_recv+0xd6>
  *new_buf = NULL;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d109      	bne.n	800afbc <netconn_recv+0x48>
 800afa8:	4b2a      	ldr	r3, [pc, #168]	; (800b054 <netconn_recv+0xe0>)
 800afaa:	f240 3265 	movw	r2, #869	; 0x365
 800afae:	492c      	ldr	r1, [pc, #176]	; (800b060 <netconn_recv+0xec>)
 800afb0:	482a      	ldr	r0, [pc, #168]	; (800b05c <netconn_recv+0xe8>)
 800afb2:	f00d f8fb 	bl	80181ac <iprintf>
 800afb6:	f06f 030f 	mvn.w	r3, #15
 800afba:	e046      	b.n	800b04a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afc4:	2b10      	cmp	r3, #16
 800afc6:	d13a      	bne.n	800b03e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800afcc:	2006      	movs	r0, #6
 800afce:	f002 fc4f 	bl	800d870 <memp_malloc>
 800afd2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d102      	bne.n	800afe0 <netconn_recv+0x6c>
      return ERR_MEM;
 800afda:	f04f 33ff 	mov.w	r3, #4294967295
 800afde:	e034      	b.n	800b04a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800afe0:	f107 030c 	add.w	r3, r7, #12
 800afe4:	2200      	movs	r2, #0
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff ff3f 	bl	800ae6c <netconn_recv_data_tcp>
 800afee:	4603      	mov	r3, r0
 800aff0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800aff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d006      	beq.n	800b008 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800affa:	6979      	ldr	r1, [r7, #20]
 800affc:	2006      	movs	r0, #6
 800affe:	f002 fc89 	bl	800d914 <memp_free>
      return err;
 800b002:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b006:	e020      	b.n	800b04a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <netconn_recv+0xa8>
 800b00e:	4b11      	ldr	r3, [pc, #68]	; (800b054 <netconn_recv+0xe0>)
 800b010:	f240 3279 	movw	r2, #889	; 0x379
 800b014:	4913      	ldr	r1, [pc, #76]	; (800b064 <netconn_recv+0xf0>)
 800b016:	4811      	ldr	r0, [pc, #68]	; (800b05c <netconn_recv+0xe8>)
 800b018:	f00d f8c8 	bl	80181ac <iprintf>

    buf->p = p;
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2200      	movs	r2, #0
 800b02c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2200      	movs	r2, #0
 800b032:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	e005      	b.n	800b04a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b03e:	2200      	movs	r2, #0
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff fe1a 	bl	800ac7c <netconn_recv_data>
 800b048:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	080190c0 	.word	0x080190c0
 800b058:	080192d8 	.word	0x080192d8
 800b05c:	08019118 	.word	0x08019118
 800b060:	080192f8 	.word	0x080192f8
 800b064:	08019370 	.word	0x08019370

0800b068 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b088      	sub	sp, #32
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b07e:	78fa      	ldrb	r2, [r7, #3]
 800b080:	f107 0110 	add.w	r1, r7, #16
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	4613      	mov	r3, r2
 800b08a:	2201      	movs	r2, #1
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 f805 	bl	800b09c <netconn_write_vectors_partly>
 800b092:	4603      	mov	r3, r0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b092      	sub	sp, #72	; 0x48
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	80fb      	strh	r3, [r7, #6]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d109      	bne.n	800b0cc <netconn_write_vectors_partly+0x30>
 800b0b8:	4b4e      	ldr	r3, [pc, #312]	; (800b1f4 <netconn_write_vectors_partly+0x158>)
 800b0ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b0be:	494e      	ldr	r1, [pc, #312]	; (800b1f8 <netconn_write_vectors_partly+0x15c>)
 800b0c0:	484e      	ldr	r0, [pc, #312]	; (800b1fc <netconn_write_vectors_partly+0x160>)
 800b0c2:	f00d f873 	bl	80181ac <iprintf>
 800b0c6:	f06f 030f 	mvn.w	r3, #15
 800b0ca:	e08e      	b.n	800b1ea <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0d4:	2b10      	cmp	r3, #16
 800b0d6:	d009      	beq.n	800b0ec <netconn_write_vectors_partly+0x50>
 800b0d8:	4b46      	ldr	r3, [pc, #280]	; (800b1f4 <netconn_write_vectors_partly+0x158>)
 800b0da:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b0de:	4948      	ldr	r1, [pc, #288]	; (800b200 <netconn_write_vectors_partly+0x164>)
 800b0e0:	4846      	ldr	r0, [pc, #280]	; (800b1fc <netconn_write_vectors_partly+0x160>)
 800b0e2:	f00d f863 	bl	80181ac <iprintf>
 800b0e6:	f06f 0305 	mvn.w	r3, #5
 800b0ea:	e07e      	b.n	800b1ea <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	7f1b      	ldrb	r3, [r3, #28]
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <netconn_write_vectors_partly+0x66>
 800b0f8:	797b      	ldrb	r3, [r7, #5]
 800b0fa:	f003 0304 	and.w	r3, r3, #4
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <netconn_write_vectors_partly+0x6a>
 800b102:	2301      	movs	r3, #1
 800b104:	e000      	b.n	800b108 <netconn_write_vectors_partly+0x6c>
 800b106:	2300      	movs	r3, #0
 800b108:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b10c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b110:	2b00      	cmp	r3, #0
 800b112:	d005      	beq.n	800b120 <netconn_write_vectors_partly+0x84>
 800b114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b116:	2b00      	cmp	r3, #0
 800b118:	d102      	bne.n	800b120 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b11a:	f06f 0305 	mvn.w	r3, #5
 800b11e:	e064      	b.n	800b1ea <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b124:	2300      	movs	r3, #0
 800b126:	643b      	str	r3, [r7, #64]	; 0x40
 800b128:	e015      	b.n	800b156 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12c:	00db      	lsls	r3, r3, #3
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	4413      	add	r3, r2
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b136:	4413      	add	r3, r2
 800b138:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	4413      	add	r3, r2
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b146:	429a      	cmp	r2, r3
 800b148:	d202      	bcs.n	800b150 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b14a:	f06f 0305 	mvn.w	r3, #5
 800b14e:	e04c      	b.n	800b1ea <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b152:	3301      	adds	r3, #1
 800b154:	643b      	str	r3, [r7, #64]	; 0x40
 800b156:	88fb      	ldrh	r3, [r7, #6]
 800b158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b15a:	429a      	cmp	r2, r3
 800b15c:	dbe5      	blt.n	800b12a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	e040      	b.n	800b1ea <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	da0a      	bge.n	800b184 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b174:	f06f 0305 	mvn.w	r3, #5
 800b178:	e037      	b.n	800b1ea <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b17a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b17e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b18c:	88fb      	ldrh	r3, [r7, #6]
 800b18e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b194:	797b      	ldrb	r3, [r7, #5]
 800b196:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b19a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b19c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b1a2:	f107 0314 	add.w	r3, r7, #20
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4816      	ldr	r0, [pc, #88]	; (800b204 <netconn_write_vectors_partly+0x168>)
 800b1aa:	f7ff fb9f 	bl	800a8ec <netconn_apimsg>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b1b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d114      	bne.n	800b1e6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d002      	beq.n	800b1c8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b1c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d006      	beq.n	800b1e6 <netconn_write_vectors_partly+0x14a>
 800b1d8:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <netconn_write_vectors_partly+0x158>)
 800b1da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b1de:	490a      	ldr	r1, [pc, #40]	; (800b208 <netconn_write_vectors_partly+0x16c>)
 800b1e0:	4806      	ldr	r0, [pc, #24]	; (800b1fc <netconn_write_vectors_partly+0x160>)
 800b1e2:	f00c ffe3 	bl	80181ac <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b1e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3748      	adds	r7, #72	; 0x48
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	080190c0 	.word	0x080190c0
 800b1f8:	08019398 	.word	0x08019398
 800b1fc:	08019118 	.word	0x08019118
 800b200:	080193b4 	.word	0x080193b4
 800b204:	0800c831 	.word	0x0800c831
 800b208:	080193d8 	.word	0x080193d8

0800b20c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08c      	sub	sp, #48	; 0x30
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d109      	bne.n	800b232 <netconn_close_shutdown+0x26>
 800b21e:	4b0f      	ldr	r3, [pc, #60]	; (800b25c <netconn_close_shutdown+0x50>)
 800b220:	f240 4247 	movw	r2, #1095	; 0x447
 800b224:	490e      	ldr	r1, [pc, #56]	; (800b260 <netconn_close_shutdown+0x54>)
 800b226:	480f      	ldr	r0, [pc, #60]	; (800b264 <netconn_close_shutdown+0x58>)
 800b228:	f00c ffc0 	bl	80181ac <iprintf>
 800b22c:	f06f 030f 	mvn.w	r3, #15
 800b230:	e010      	b.n	800b254 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b236:	78fb      	ldrb	r3, [r7, #3]
 800b238:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b23a:	2329      	movs	r3, #41	; 0x29
 800b23c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b23e:	f107 030c 	add.w	r3, r7, #12
 800b242:	4619      	mov	r1, r3
 800b244:	4808      	ldr	r0, [pc, #32]	; (800b268 <netconn_close_shutdown+0x5c>)
 800b246:	f7ff fb51 	bl	800a8ec <netconn_apimsg>
 800b24a:	4603      	mov	r3, r0
 800b24c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b250:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b254:	4618      	mov	r0, r3
 800b256:	3730      	adds	r7, #48	; 0x30
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	080190c0 	.word	0x080190c0
 800b260:	080193fc 	.word	0x080193fc
 800b264:	08019118 	.word	0x08019118
 800b268:	0800c949 	.word	0x0800c949

0800b26c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b274:	2103      	movs	r1, #3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff ffc8 	bl	800b20c <netconn_close_shutdown>
 800b27c:	4603      	mov	r3, r0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <netconn_err+0x12>
    return ERR_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	e00d      	b.n	800b2b4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b298:	f00c fdce 	bl	8017e38 <sys_arch_protect>
 800b29c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7a1b      	ldrb	r3, [r3, #8]
 800b2a2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f00c fdd2 	bl	8017e54 <sys_arch_unprotect>
  return err;
 800b2b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b2c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2ca:	f113 0f0d 	cmn.w	r3, #13
 800b2ce:	d009      	beq.n	800b2e4 <lwip_netconn_err_to_msg+0x28>
 800b2d0:	f113 0f0d 	cmn.w	r3, #13
 800b2d4:	dc0c      	bgt.n	800b2f0 <lwip_netconn_err_to_msg+0x34>
 800b2d6:	f113 0f0f 	cmn.w	r3, #15
 800b2da:	d007      	beq.n	800b2ec <lwip_netconn_err_to_msg+0x30>
 800b2dc:	f113 0f0e 	cmn.w	r3, #14
 800b2e0:	d002      	beq.n	800b2e8 <lwip_netconn_err_to_msg+0x2c>
 800b2e2:	e005      	b.n	800b2f0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b2e4:	4b0a      	ldr	r3, [pc, #40]	; (800b310 <lwip_netconn_err_to_msg+0x54>)
 800b2e6:	e00e      	b.n	800b306 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <lwip_netconn_err_to_msg+0x58>)
 800b2ea:	e00c      	b.n	800b306 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b2ec:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <lwip_netconn_err_to_msg+0x5c>)
 800b2ee:	e00a      	b.n	800b306 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b2f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d005      	beq.n	800b304 <lwip_netconn_err_to_msg+0x48>
 800b2f8:	4b08      	ldr	r3, [pc, #32]	; (800b31c <lwip_netconn_err_to_msg+0x60>)
 800b2fa:	227d      	movs	r2, #125	; 0x7d
 800b2fc:	4908      	ldr	r1, [pc, #32]	; (800b320 <lwip_netconn_err_to_msg+0x64>)
 800b2fe:	4809      	ldr	r0, [pc, #36]	; (800b324 <lwip_netconn_err_to_msg+0x68>)
 800b300:	f00c ff54 	bl	80181ac <iprintf>
      return NULL;
 800b304:	2300      	movs	r3, #0
  }
}
 800b306:	4618      	mov	r0, r3
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	0801c5cc 	.word	0x0801c5cc
 800b314:	0801c5cd 	.word	0x0801c5cd
 800b318:	0801c5ce 	.word	0x0801c5ce
 800b31c:	08019418 	.word	0x08019418
 800b320:	0801944c 	.word	0x0801944c
 800b324:	0801945c 	.word	0x0801945c

0800b328 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d105      	bne.n	800b344 <lwip_netconn_is_err_msg+0x1c>
 800b338:	4b12      	ldr	r3, [pc, #72]	; (800b384 <lwip_netconn_is_err_msg+0x5c>)
 800b33a:	2285      	movs	r2, #133	; 0x85
 800b33c:	4912      	ldr	r1, [pc, #72]	; (800b388 <lwip_netconn_is_err_msg+0x60>)
 800b33e:	4813      	ldr	r0, [pc, #76]	; (800b38c <lwip_netconn_is_err_msg+0x64>)
 800b340:	f00c ff34 	bl	80181ac <iprintf>

  if (msg == &netconn_aborted) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a12      	ldr	r2, [pc, #72]	; (800b390 <lwip_netconn_is_err_msg+0x68>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d104      	bne.n	800b356 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	22f3      	movs	r2, #243	; 0xf3
 800b350:	701a      	strb	r2, [r3, #0]
    return 1;
 800b352:	2301      	movs	r3, #1
 800b354:	e012      	b.n	800b37c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a0e      	ldr	r2, [pc, #56]	; (800b394 <lwip_netconn_is_err_msg+0x6c>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d104      	bne.n	800b368 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	22f2      	movs	r2, #242	; 0xf2
 800b362:	701a      	strb	r2, [r3, #0]
    return 1;
 800b364:	2301      	movs	r3, #1
 800b366:	e009      	b.n	800b37c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a0b      	ldr	r2, [pc, #44]	; (800b398 <lwip_netconn_is_err_msg+0x70>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d104      	bne.n	800b37a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	22f1      	movs	r2, #241	; 0xf1
 800b374:	701a      	strb	r2, [r3, #0]
    return 1;
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	08019418 	.word	0x08019418
 800b388:	08019484 	.word	0x08019484
 800b38c:	0801945c 	.word	0x0801945c
 800b390:	0801c5cc 	.word	0x0801c5cc
 800b394:	0801c5cd 	.word	0x0801c5cd
 800b398:	0801c5ce 	.word	0x0801c5ce

0800b39c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d105      	bne.n	800b3bc <recv_udp+0x20>
 800b3b0:	4b34      	ldr	r3, [pc, #208]	; (800b484 <recv_udp+0xe8>)
 800b3b2:	22e5      	movs	r2, #229	; 0xe5
 800b3b4:	4934      	ldr	r1, [pc, #208]	; (800b488 <recv_udp+0xec>)
 800b3b6:	4835      	ldr	r0, [pc, #212]	; (800b48c <recv_udp+0xf0>)
 800b3b8:	f00c fef8 	bl	80181ac <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d105      	bne.n	800b3ce <recv_udp+0x32>
 800b3c2:	4b30      	ldr	r3, [pc, #192]	; (800b484 <recv_udp+0xe8>)
 800b3c4:	22e6      	movs	r2, #230	; 0xe6
 800b3c6:	4932      	ldr	r1, [pc, #200]	; (800b490 <recv_udp+0xf4>)
 800b3c8:	4830      	ldr	r0, [pc, #192]	; (800b48c <recv_udp+0xf0>)
 800b3ca:	f00c feef 	bl	80181ac <iprintf>
  conn = (struct netconn *)arg;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d103      	bne.n	800b3e0 <recv_udp+0x44>
    pbuf_free(p);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f003 f93f 	bl	800e65c <pbuf_free>
    return;
 800b3de:	e04d      	b.n	800b47c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d005      	beq.n	800b3f6 <recv_udp+0x5a>
 800b3ea:	4b26      	ldr	r3, [pc, #152]	; (800b484 <recv_udp+0xe8>)
 800b3ec:	22ee      	movs	r2, #238	; 0xee
 800b3ee:	4929      	ldr	r1, [pc, #164]	; (800b494 <recv_udp+0xf8>)
 800b3f0:	4826      	ldr	r0, [pc, #152]	; (800b48c <recv_udp+0xf0>)
 800b3f2:	f00c fedb 	bl	80181ac <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	3310      	adds	r3, #16
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f00c fc12 	bl	8017c24 <sys_mbox_valid>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d103      	bne.n	800b40e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f003 f928 	bl	800e65c <pbuf_free>
    return;
 800b40c:	e036      	b.n	800b47c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b40e:	2006      	movs	r0, #6
 800b410:	f002 fa2e 	bl	800d870 <memp_malloc>
 800b414:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d103      	bne.n	800b424 <recv_udp+0x88>
    pbuf_free(p);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f003 f91d 	bl	800e65c <pbuf_free>
    return;
 800b422:	e02b      	b.n	800b47c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <recv_udp+0xa0>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	e000      	b.n	800b43e <recv_udp+0xa2>
 800b43c:	2300      	movs	r3, #0
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b446:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	891b      	ldrh	r3, [r3, #8]
 800b44c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	3310      	adds	r3, #16
 800b452:	69b9      	ldr	r1, [r7, #24]
 800b454:	4618      	mov	r0, r3
 800b456:	f00c fb83 	bl	8017b60 <sys_mbox_trypost>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d003      	beq.n	800b468 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b460:	69b8      	ldr	r0, [r7, #24]
 800b462:	f001 fafd 	bl	800ca60 <netbuf_delete>
    return;
 800b466:	e009      	b.n	800b47c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <recv_udp+0xe0>
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	8afa      	ldrh	r2, [r7, #22]
 800b476:	2100      	movs	r1, #0
 800b478:	69f8      	ldr	r0, [r7, #28]
 800b47a:	4798      	blx	r3
  }
}
 800b47c:	3720      	adds	r7, #32
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	08019418 	.word	0x08019418
 800b488:	08019490 	.word	0x08019490
 800b48c:	0801945c 	.word	0x0801945c
 800b490:	080194b4 	.word	0x080194b4
 800b494:	080194d4 	.word	0x080194d4

0800b498 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d106      	bne.n	800b4ba <recv_tcp+0x22>
 800b4ac:	4b36      	ldr	r3, [pc, #216]	; (800b588 <recv_tcp+0xf0>)
 800b4ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b4b2:	4936      	ldr	r1, [pc, #216]	; (800b58c <recv_tcp+0xf4>)
 800b4b4:	4836      	ldr	r0, [pc, #216]	; (800b590 <recv_tcp+0xf8>)
 800b4b6:	f00c fe79 	bl	80181ac <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d106      	bne.n	800b4ce <recv_tcp+0x36>
 800b4c0:	4b31      	ldr	r3, [pc, #196]	; (800b588 <recv_tcp+0xf0>)
 800b4c2:	f240 122d 	movw	r2, #301	; 0x12d
 800b4c6:	4933      	ldr	r1, [pc, #204]	; (800b594 <recv_tcp+0xfc>)
 800b4c8:	4831      	ldr	r0, [pc, #196]	; (800b590 <recv_tcp+0xf8>)
 800b4ca:	f00c fe6f 	bl	80181ac <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b4ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <recv_tcp+0x4c>
 800b4d6:	4b2c      	ldr	r3, [pc, #176]	; (800b588 <recv_tcp+0xf0>)
 800b4d8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b4dc:	492e      	ldr	r1, [pc, #184]	; (800b598 <recv_tcp+0x100>)
 800b4de:	482c      	ldr	r0, [pc, #176]	; (800b590 <recv_tcp+0xf8>)
 800b4e0:	f00c fe64 	bl	80181ac <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <recv_tcp+0x5c>
    return ERR_VAL;
 800b4ee:	f06f 0305 	mvn.w	r3, #5
 800b4f2:	e045      	b.n	800b580 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d006      	beq.n	800b50c <recv_tcp+0x74>
 800b4fe:	4b22      	ldr	r3, [pc, #136]	; (800b588 <recv_tcp+0xf0>)
 800b500:	f240 1235 	movw	r2, #309	; 0x135
 800b504:	4925      	ldr	r1, [pc, #148]	; (800b59c <recv_tcp+0x104>)
 800b506:	4822      	ldr	r0, [pc, #136]	; (800b590 <recv_tcp+0xf8>)
 800b508:	f00c fe50 	bl	80181ac <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	3310      	adds	r3, #16
 800b510:	4618      	mov	r0, r3
 800b512:	f00c fb87 	bl	8017c24 <sys_mbox_valid>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10d      	bne.n	800b538 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d008      	beq.n	800b534 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	891b      	ldrh	r3, [r3, #8]
 800b526:	4619      	mov	r1, r3
 800b528:	68b8      	ldr	r0, [r7, #8]
 800b52a:	f004 f84f 	bl	800f5cc <tcp_recved>
      pbuf_free(p);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f003 f894 	bl	800e65c <pbuf_free>
    }
    return ERR_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	e023      	b.n	800b580 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <recv_tcp+0xb2>
    msg = p;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	891b      	ldrh	r3, [r3, #8]
 800b546:	83fb      	strh	r3, [r7, #30]
 800b548:	e003      	b.n	800b552 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b54a:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <recv_tcp+0x108>)
 800b54c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	3310      	adds	r3, #16
 800b556:	69b9      	ldr	r1, [r7, #24]
 800b558:	4618      	mov	r0, r3
 800b55a:	f00c fb01 	bl	8017b60 <sys_mbox_trypost>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b564:	f04f 33ff 	mov.w	r3, #4294967295
 800b568:	e00a      	b.n	800b580 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <recv_tcp+0xe6>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b576:	8bfa      	ldrh	r2, [r7, #30]
 800b578:	2100      	movs	r1, #0
 800b57a:	6978      	ldr	r0, [r7, #20]
 800b57c:	4798      	blx	r3
  }

  return ERR_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3720      	adds	r7, #32
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	08019418 	.word	0x08019418
 800b58c:	080194f4 	.word	0x080194f4
 800b590:	0801945c 	.word	0x0801945c
 800b594:	08019518 	.word	0x08019518
 800b598:	08019538 	.word	0x08019538
 800b59c:	08019550 	.word	0x08019550
 800b5a0:	0801c5ce 	.word	0x0801c5ce

0800b5a4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d106      	bne.n	800b5c6 <poll_tcp+0x22>
 800b5b8:	4b29      	ldr	r3, [pc, #164]	; (800b660 <poll_tcp+0xbc>)
 800b5ba:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b5be:	4929      	ldr	r1, [pc, #164]	; (800b664 <poll_tcp+0xc0>)
 800b5c0:	4829      	ldr	r0, [pc, #164]	; (800b668 <poll_tcp+0xc4>)
 800b5c2:	f00c fdf3 	bl	80181ac <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	785b      	ldrb	r3, [r3, #1]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d104      	bne.n	800b5d8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 ff61 	bl	800c498 <lwip_netconn_do_writemore>
 800b5d6:	e016      	b.n	800b606 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	785b      	ldrb	r3, [r3, #1]
 800b5dc:	2b04      	cmp	r3, #4
 800b5de:	d112      	bne.n	800b606 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a1b      	ldr	r3, [r3, #32]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00a      	beq.n	800b5fe <poll_tcp+0x5a>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	7a5b      	ldrb	r3, [r3, #9]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d005      	beq.n	800b5fe <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	7a5a      	ldrb	r2, [r3, #9]
 800b5f8:	3a01      	subs	r2, #1
 800b5fa:	b2d2      	uxtb	r2, r2
 800b5fc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b5fe:	2101      	movs	r1, #1
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f000 fbf7 	bl	800bdf4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	7f1b      	ldrb	r3, [r3, #28]
 800b60a:	f003 0310 	and.w	r3, r3, #16
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d021      	beq.n	800b656 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d01d      	beq.n	800b656 <poll_tcp+0xb2>
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b622:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b626:	d316      	bcc.n	800b656 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b630:	2b04      	cmp	r3, #4
 800b632:	d810      	bhi.n	800b656 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	7f1b      	ldrb	r3, [r3, #28]
 800b638:	f023 0310 	bic.w	r3, r3, #16
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b646:	2b00      	cmp	r3, #0
 800b648:	d005      	beq.n	800b656 <poll_tcp+0xb2>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	2200      	movs	r2, #0
 800b650:	2102      	movs	r1, #2
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	08019418 	.word	0x08019418
 800b664:	08019570 	.word	0x08019570
 800b668:	0801945c 	.word	0x0801945c

0800b66c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	4613      	mov	r3, r2
 800b678:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d106      	bne.n	800b692 <sent_tcp+0x26>
 800b684:	4b20      	ldr	r3, [pc, #128]	; (800b708 <sent_tcp+0x9c>)
 800b686:	f240 1293 	movw	r2, #403	; 0x193
 800b68a:	4920      	ldr	r1, [pc, #128]	; (800b70c <sent_tcp+0xa0>)
 800b68c:	4820      	ldr	r0, [pc, #128]	; (800b710 <sent_tcp+0xa4>)
 800b68e:	f00c fd8d 	bl	80181ac <iprintf>

  if (conn) {
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d032      	beq.n	800b6fe <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	785b      	ldrb	r3, [r3, #1]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d104      	bne.n	800b6aa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	6978      	ldr	r0, [r7, #20]
 800b6a4:	f000 fef8 	bl	800c498 <lwip_netconn_do_writemore>
 800b6a8:	e007      	b.n	800b6ba <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	785b      	ldrb	r3, [r3, #1]
 800b6ae:	2b04      	cmp	r3, #4
 800b6b0:	d103      	bne.n	800b6ba <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6978      	ldr	r0, [r7, #20]
 800b6b6:	f000 fb9d 	bl	800bdf4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d01d      	beq.n	800b6fe <sent_tcp+0x92>
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b6ca:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b6ce:	d316      	bcc.n	800b6fe <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d810      	bhi.n	800b6fe <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	7f1b      	ldrb	r3, [r3, #28]
 800b6e0:	f023 0310 	bic.w	r3, r3, #16
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d005      	beq.n	800b6fe <sent_tcp+0x92>
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	88fa      	ldrh	r2, [r7, #6]
 800b6f8:	2102      	movs	r1, #2
 800b6fa:	6978      	ldr	r0, [r7, #20]
 800b6fc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	08019418 	.word	0x08019418
 800b70c:	08019570 	.word	0x08019570
 800b710:	0801945c 	.word	0x0801945c

0800b714 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d106      	bne.n	800b738 <err_tcp+0x24>
 800b72a:	4b5f      	ldr	r3, [pc, #380]	; (800b8a8 <err_tcp+0x194>)
 800b72c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b730:	495e      	ldr	r1, [pc, #376]	; (800b8ac <err_tcp+0x198>)
 800b732:	485f      	ldr	r0, [pc, #380]	; (800b8b0 <err_tcp+0x19c>)
 800b734:	f00c fd3a 	bl	80181ac <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b738:	f00c fb7e 	bl	8017e38 <sys_arch_protect>
 800b73c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	2200      	movs	r2, #0
 800b742:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	78fa      	ldrb	r2, [r7, #3]
 800b748:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	7f1b      	ldrb	r3, [r3, #28]
 800b74e:	f043 0301 	orr.w	r3, r3, #1
 800b752:	b2da      	uxtb	r2, r3
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	785b      	ldrb	r3, [r3, #1]
 800b75c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	2200      	movs	r2, #0
 800b762:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b764:	69b8      	ldr	r0, [r7, #24]
 800b766:	f00c fb75 	bl	8017e54 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d005      	beq.n	800b77e <err_tcp+0x6a>
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	2200      	movs	r2, #0
 800b778:	2104      	movs	r1, #4
 800b77a:	69f8      	ldr	r0, [r7, #28]
 800b77c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d005      	beq.n	800b792 <err_tcp+0x7e>
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	2200      	movs	r2, #0
 800b78c:	2100      	movs	r1, #0
 800b78e:	69f8      	ldr	r0, [r7, #28]
 800b790:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d005      	beq.n	800b7a6 <err_tcp+0x92>
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2102      	movs	r1, #2
 800b7a2:	69f8      	ldr	r0, [r7, #28]
 800b7a4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b7a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff fd86 	bl	800b2bc <lwip_netconn_err_to_msg>
 800b7b0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	3310      	adds	r3, #16
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f00c fa34 	bl	8017c24 <sys_mbox_valid>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d005      	beq.n	800b7ce <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	3310      	adds	r3, #16
 800b7c6:	6939      	ldr	r1, [r7, #16]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f00c f9c9 	bl	8017b60 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	3314      	adds	r3, #20
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f00c fa26 	bl	8017c24 <sys_mbox_valid>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d005      	beq.n	800b7ea <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	3314      	adds	r3, #20
 800b7e2:	6939      	ldr	r1, [r7, #16]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f00c f9bb 	bl	8017b60 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d005      	beq.n	800b7fc <err_tcp+0xe8>
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	d002      	beq.n	800b7fc <err_tcp+0xe8>
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d143      	bne.n	800b884 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	7f1b      	ldrb	r3, [r3, #28]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	bf14      	ite	ne
 800b808:	2301      	movne	r3, #1
 800b80a:	2300      	moveq	r3, #0
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	7f1b      	ldrb	r3, [r3, #28]
 800b814:	f023 0304 	bic.w	r3, r3, #4
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d13b      	bne.n	800b89c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <err_tcp+0x126>
 800b82c:	4b1e      	ldr	r3, [pc, #120]	; (800b8a8 <err_tcp+0x194>)
 800b82e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b832:	4920      	ldr	r1, [pc, #128]	; (800b8b4 <err_tcp+0x1a0>)
 800b834:	481e      	ldr	r0, [pc, #120]	; (800b8b0 <err_tcp+0x19c>)
 800b836:	f00c fcb9 	bl	80181ac <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d104      	bne.n	800b84a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	2200      	movs	r2, #0
 800b846:	711a      	strb	r2, [r3, #4]
 800b848:	e003      	b.n	800b852 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	78fa      	ldrb	r2, [r7, #3]
 800b850:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	330c      	adds	r3, #12
 800b85a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b85c:	68b8      	ldr	r0, [r7, #8]
 800b85e:	f00c fa6f 	bl	8017d40 <sys_sem_valid>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d106      	bne.n	800b876 <err_tcp+0x162>
 800b868:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <err_tcp+0x194>)
 800b86a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b86e:	4912      	ldr	r1, [pc, #72]	; (800b8b8 <err_tcp+0x1a4>)
 800b870:	480f      	ldr	r0, [pc, #60]	; (800b8b0 <err_tcp+0x19c>)
 800b872:	f00c fc9b 	bl	80181ac <iprintf>
      conn->current_msg = NULL;
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	2200      	movs	r2, #0
 800b87a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b87c:	68b8      	ldr	r0, [r7, #8]
 800b87e:	f00c fa45 	bl	8017d0c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b882:	e00b      	b.n	800b89c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	6a1b      	ldr	r3, [r3, #32]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d008      	beq.n	800b89e <err_tcp+0x18a>
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <err_tcp+0x194>)
 800b88e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b892:	490a      	ldr	r1, [pc, #40]	; (800b8bc <err_tcp+0x1a8>)
 800b894:	4806      	ldr	r0, [pc, #24]	; (800b8b0 <err_tcp+0x19c>)
 800b896:	f00c fc89 	bl	80181ac <iprintf>
  }
}
 800b89a:	e000      	b.n	800b89e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b89c:	bf00      	nop
}
 800b89e:	bf00      	nop
 800b8a0:	3720      	adds	r7, #32
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	08019418 	.word	0x08019418
 800b8ac:	08019570 	.word	0x08019570
 800b8b0:	0801945c 	.word	0x0801945c
 800b8b4:	08019580 	.word	0x08019580
 800b8b8:	0801959c 	.word	0x0801959c
 800b8bc:	080195b8 	.word	0x080195b8

0800b8c0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f004 fd41 	bl	8010358 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b8d6:	490a      	ldr	r1, [pc, #40]	; (800b900 <setup_tcp+0x40>)
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f004 fd4f 	bl	801037c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b8de:	4909      	ldr	r1, [pc, #36]	; (800b904 <setup_tcp+0x44>)
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f004 fd6d 	bl	80103c0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	4907      	ldr	r1, [pc, #28]	; (800b908 <setup_tcp+0x48>)
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f004 fdc4 	bl	8010478 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b8f0:	4906      	ldr	r1, [pc, #24]	; (800b90c <setup_tcp+0x4c>)
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f004 fd86 	bl	8010404 <tcp_err>
}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	0800b499 	.word	0x0800b499
 800b904:	0800b66d 	.word	0x0800b66d
 800b908:	0800b5a5 	.word	0x0800b5a5
 800b90c:	0800b715 	.word	0x0800b715

0800b910 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b910:	b590      	push	{r4, r7, lr}
 800b912:	b089      	sub	sp, #36	; 0x24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	4613      	mov	r3, r2
 800b91c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <accept_function+0x1e>
    return ERR_VAL;
 800b928:	f06f 0305 	mvn.w	r3, #5
 800b92c:	e0a1      	b.n	800ba72 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	3314      	adds	r3, #20
 800b932:	4618      	mov	r0, r3
 800b934:	f00c f976 	bl	8017c24 <sys_mbox_valid>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d102      	bne.n	800b944 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b93e:	f06f 0305 	mvn.w	r3, #5
 800b942:	e096      	b.n	800ba72 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d11b      	bne.n	800b982 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	f103 0414 	add.w	r4, r3, #20
 800b950:	f06f 000c 	mvn.w	r0, #12
 800b954:	f7ff fcb2 	bl	800b2bc <lwip_netconn_err_to_msg>
 800b958:	4603      	mov	r3, r0
 800b95a:	4619      	mov	r1, r3
 800b95c:	4620      	mov	r0, r4
 800b95e:	f00c f8ff 	bl	8017b60 <sys_mbox_trypost>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d109      	bne.n	800b97c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <accept_function+0x6c>
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2200      	movs	r2, #0
 800b976:	2100      	movs	r1, #0
 800b978:	69f8      	ldr	r0, [r7, #28]
 800b97a:	4798      	blx	r3
    }
    return ERR_VAL;
 800b97c:	f06f 0305 	mvn.w	r3, #5
 800b980:	e077      	b.n	800ba72 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d006      	beq.n	800b998 <accept_function+0x88>
 800b98a:	4b3c      	ldr	r3, [pc, #240]	; (800ba7c <accept_function+0x16c>)
 800b98c:	f240 222a 	movw	r2, #554	; 0x22a
 800b990:	493b      	ldr	r1, [pc, #236]	; (800ba80 <accept_function+0x170>)
 800b992:	483c      	ldr	r0, [pc, #240]	; (800ba84 <accept_function+0x174>)
 800b994:	f00c fc0a 	bl	80181ac <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	781a      	ldrb	r2, [r3, #0]
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f000 f8f0 	bl	800bb88 <netconn_alloc>
 800b9a8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d11b      	bne.n	800b9e8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	f103 0414 	add.w	r4, r3, #20
 800b9b6:	f06f 000c 	mvn.w	r0, #12
 800b9ba:	f7ff fc7f 	bl	800b2bc <lwip_netconn_err_to_msg>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f00c f8cc 	bl	8017b60 <sys_mbox_trypost>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d109      	bne.n	800b9e2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d005      	beq.n	800b9e2 <accept_function+0xd2>
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2100      	movs	r1, #0
 800b9de:	69f8      	ldr	r0, [r7, #28]
 800b9e0:	4798      	blx	r3
    }
    return ERR_MEM;
 800b9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e6:	e044      	b.n	800ba72 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b9ee:	69b8      	ldr	r0, [r7, #24]
 800b9f0:	f7ff ff66 	bl	800b8c0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	3314      	adds	r3, #20
 800b9f8:	69b9      	ldr	r1, [r7, #24]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f00c f8b0 	bl	8017b60 <sys_mbox_trypost>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d02a      	beq.n	800ba5c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6978      	ldr	r0, [r7, #20]
 800ba10:	f004 fca2 	bl	8010358 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ba14:	2100      	movs	r1, #0
 800ba16:	6978      	ldr	r0, [r7, #20]
 800ba18:	f004 fcb0 	bl	801037c <tcp_recv>
    tcp_sent(pcb, NULL);
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	6978      	ldr	r0, [r7, #20]
 800ba20:	f004 fcce 	bl	80103c0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ba24:	2200      	movs	r2, #0
 800ba26:	2100      	movs	r1, #0
 800ba28:	6978      	ldr	r0, [r7, #20]
 800ba2a:	f004 fd25 	bl	8010478 <tcp_poll>
    tcp_err(pcb, NULL);
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6978      	ldr	r0, [r7, #20]
 800ba32:	f004 fce7 	bl	8010404 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	3310      	adds	r3, #16
 800ba40:	4618      	mov	r0, r3
 800ba42:	f00c f87b 	bl	8017b3c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	3310      	adds	r3, #16
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f00c f8fb 	bl	8017c46 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ba50:	69b8      	ldr	r0, [r7, #24]
 800ba52:	f000 f907 	bl	800bc64 <netconn_free>
    return ERR_MEM;
 800ba56:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5a:	e00a      	b.n	800ba72 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d005      	beq.n	800ba70 <accept_function+0x160>
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	2200      	movs	r2, #0
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	69f8      	ldr	r0, [r7, #28]
 800ba6e:	4798      	blx	r3
  }

  return ERR_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3724      	adds	r7, #36	; 0x24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd90      	pop	{r4, r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	08019418 	.word	0x08019418
 800ba80:	080195d4 	.word	0x080195d4
 800ba84:	0801945c 	.word	0x0801945c

0800ba88 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ba88:	b590      	push	{r4, r7, lr}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d006      	beq.n	800baac <pcb_new+0x24>
 800ba9e:	4b2b      	ldr	r3, [pc, #172]	; (800bb4c <pcb_new+0xc4>)
 800baa0:	f240 2265 	movw	r2, #613	; 0x265
 800baa4:	492a      	ldr	r1, [pc, #168]	; (800bb50 <pcb_new+0xc8>)
 800baa6:	482b      	ldr	r0, [pc, #172]	; (800bb54 <pcb_new+0xcc>)
 800baa8:	f00c fb80 	bl	80181ac <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bab6:	2b10      	cmp	r3, #16
 800bab8:	d022      	beq.n	800bb00 <pcb_new+0x78>
 800baba:	2b20      	cmp	r3, #32
 800babc:	d133      	bne.n	800bb26 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681c      	ldr	r4, [r3, #0]
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f009 fd22 	bl	801550e <udp_new_ip_type>
 800baca:	4603      	mov	r3, r0
 800bacc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d02a      	beq.n	800bb2e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b22      	cmp	r3, #34	; 0x22
 800bae0:	d104      	bne.n	800baec <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6858      	ldr	r0, [r3, #4]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	4917      	ldr	r1, [pc, #92]	; (800bb58 <pcb_new+0xd0>)
 800bafa:	f009 fc8f 	bl	801541c <udp_recv>
      }
      break;
 800bafe:	e016      	b.n	800bb2e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681c      	ldr	r4, [r3, #0]
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f004 fc18 	bl	801033c <tcp_new_ip_type>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00b      	beq.n	800bb32 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff fece 	bl	800b8c0 <setup_tcp>
      }
      break;
 800bb24:	e005      	b.n	800bb32 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	22fa      	movs	r2, #250	; 0xfa
 800bb2a:	711a      	strb	r2, [r3, #4]
      return;
 800bb2c:	e00a      	b.n	800bb44 <pcb_new+0xbc>
      break;
 800bb2e:	bf00      	nop
 800bb30:	e000      	b.n	800bb34 <pcb_new+0xac>
      break;
 800bb32:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	22ff      	movs	r2, #255	; 0xff
 800bb42:	711a      	strb	r2, [r3, #4]
  }
}
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd90      	pop	{r4, r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	08019418 	.word	0x08019418
 800bb50:	080195fc 	.word	0x080195fc
 800bb54:	0801945c 	.word	0x0801945c
 800bb58:	0800b39d 	.word	0x0800b39d

0800bb5c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f7ff ff85 	bl	800ba88 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bb7e:	bf00      	nop
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	6039      	str	r1, [r7, #0]
 800bb92:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bb98:	2007      	movs	r0, #7
 800bb9a:	f001 fe69 	bl	800d870 <memp_malloc>
 800bb9e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <netconn_alloc+0x22>
    return NULL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	e052      	b.n	800bc50 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	79fa      	ldrb	r2, [r7, #7]
 800bbb4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bbbc:	79fb      	ldrb	r3, [r7, #7]
 800bbbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbc2:	2b10      	cmp	r3, #16
 800bbc4:	d004      	beq.n	800bbd0 <netconn_alloc+0x48>
 800bbc6:	2b20      	cmp	r3, #32
 800bbc8:	d105      	bne.n	800bbd6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bbca:	2306      	movs	r3, #6
 800bbcc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bbce:	e00a      	b.n	800bbe6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bbd0:	2306      	movs	r3, #6
 800bbd2:	617b      	str	r3, [r7, #20]
      break;
 800bbd4:	e007      	b.n	800bbe6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bbd6:	4b20      	ldr	r3, [pc, #128]	; (800bc58 <netconn_alloc+0xd0>)
 800bbd8:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bbdc:	491f      	ldr	r1, [pc, #124]	; (800bc5c <netconn_alloc+0xd4>)
 800bbde:	4820      	ldr	r0, [pc, #128]	; (800bc60 <netconn_alloc+0xd8>)
 800bbe0:	f00c fae4 	bl	80181ac <iprintf>
      goto free_and_return;
 800bbe4:	e02f      	b.n	800bc46 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3310      	adds	r3, #16
 800bbea:	6979      	ldr	r1, [r7, #20]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f00b ff8b 	bl	8017b08 <sys_mbox_new>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d125      	bne.n	800bc44 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	330c      	adds	r3, #12
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f00c f82e 	bl	8017c60 <sys_sem_new>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d005      	beq.n	800bc16 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	3310      	adds	r3, #16
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f00b ff94 	bl	8017b3c <sys_mbox_free>
    goto free_and_return;
 800bc14:	e017      	b.n	800bc46 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3314      	adds	r3, #20
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f00c f813 	bl	8017c46 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	7cfa      	ldrb	r2, [r7, #19]
 800bc3e:	771a      	strb	r2, [r3, #28]
  return conn;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	e005      	b.n	800bc50 <netconn_alloc+0xc8>
    goto free_and_return;
 800bc44:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800bc46:	68f9      	ldr	r1, [r7, #12]
 800bc48:	2007      	movs	r0, #7
 800bc4a:	f001 fe63 	bl	800d914 <memp_free>
  return NULL;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3718      	adds	r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	08019418 	.word	0x08019418
 800bc5c:	0801961c 	.word	0x0801961c
 800bc60:	0801945c 	.word	0x0801945c

0800bc64 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d006      	beq.n	800bc82 <netconn_free+0x1e>
 800bc74:	4b1b      	ldr	r3, [pc, #108]	; (800bce4 <netconn_free+0x80>)
 800bc76:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bc7a:	491b      	ldr	r1, [pc, #108]	; (800bce8 <netconn_free+0x84>)
 800bc7c:	481b      	ldr	r0, [pc, #108]	; (800bcec <netconn_free+0x88>)
 800bc7e:	f00c fa95 	bl	80181ac <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3310      	adds	r3, #16
 800bc86:	4618      	mov	r0, r3
 800bc88:	f00b ffcc 	bl	8017c24 <sys_mbox_valid>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d006      	beq.n	800bca0 <netconn_free+0x3c>
 800bc92:	4b14      	ldr	r3, [pc, #80]	; (800bce4 <netconn_free+0x80>)
 800bc94:	f240 3223 	movw	r2, #803	; 0x323
 800bc98:	4915      	ldr	r1, [pc, #84]	; (800bcf0 <netconn_free+0x8c>)
 800bc9a:	4814      	ldr	r0, [pc, #80]	; (800bcec <netconn_free+0x88>)
 800bc9c:	f00c fa86 	bl	80181ac <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3314      	adds	r3, #20
 800bca4:	4618      	mov	r0, r3
 800bca6:	f00b ffbd 	bl	8017c24 <sys_mbox_valid>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d006      	beq.n	800bcbe <netconn_free+0x5a>
 800bcb0:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <netconn_free+0x80>)
 800bcb2:	f240 3226 	movw	r2, #806	; 0x326
 800bcb6:	490f      	ldr	r1, [pc, #60]	; (800bcf4 <netconn_free+0x90>)
 800bcb8:	480c      	ldr	r0, [pc, #48]	; (800bcec <netconn_free+0x88>)
 800bcba:	f00c fa77 	bl	80181ac <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	330c      	adds	r3, #12
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f00c f82f 	bl	8017d26 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	330c      	adds	r3, #12
 800bccc:	4618      	mov	r0, r3
 800bcce:	f00c f848 	bl	8017d62 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	2007      	movs	r0, #7
 800bcd6:	f001 fe1d 	bl	800d914 <memp_free>
}
 800bcda:	bf00      	nop
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	08019418 	.word	0x08019418
 800bce8:	08019644 	.word	0x08019644
 800bcec:	0801945c 	.word	0x0801945c
 800bcf0:	08019674 	.word	0x08019674
 800bcf4:	080196b0 	.word	0x080196b0

0800bcf8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3310      	adds	r3, #16
 800bd04:	4618      	mov	r0, r3
 800bd06:	f00b ff8d 	bl	8017c24 <sys_mbox_valid>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d02f      	beq.n	800bd70 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bd10:	e018      	b.n	800bd44 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd1a:	2b10      	cmp	r3, #16
 800bd1c:	d10e      	bne.n	800bd3c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	f107 020f 	add.w	r2, r7, #15
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7ff fafe 	bl	800b328 <lwip_netconn_is_err_msg>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d108      	bne.n	800bd44 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f002 fc91 	bl	800e65c <pbuf_free>
 800bd3a:	e003      	b.n	800bd44 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 fe8e 	bl	800ca60 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3310      	adds	r3, #16
 800bd48:	f107 0210 	add.w	r2, r7, #16
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f00b ff51 	bl	8017bf6 <sys_arch_mbox_tryfetch>
 800bd54:	4603      	mov	r3, r0
 800bd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5a:	d1da      	bne.n	800bd12 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3310      	adds	r3, #16
 800bd60:	4618      	mov	r0, r3
 800bd62:	f00b feeb 	bl	8017b3c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3310      	adds	r3, #16
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f00b ff6b 	bl	8017c46 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3314      	adds	r3, #20
 800bd74:	4618      	mov	r0, r3
 800bd76:	f00b ff55 	bl	8017c24 <sys_mbox_valid>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d034      	beq.n	800bdea <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bd80:	e01d      	b.n	800bdbe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f107 020e 	add.w	r2, r7, #14
 800bd88:	4611      	mov	r1, r2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff facc 	bl	800b328 <lwip_netconn_is_err_msg>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d113      	bne.n	800bdbe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800bd9a:	6978      	ldr	r0, [r7, #20]
 800bd9c:	f7ff ffac 	bl	800bcf8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d007      	beq.n	800bdb8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f003 fa45 	bl	800f23c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800bdb8:	6978      	ldr	r0, [r7, #20]
 800bdba:	f7ff ff53 	bl	800bc64 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3314      	adds	r3, #20
 800bdc2:	f107 0210 	add.w	r2, r7, #16
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f00b ff14 	bl	8017bf6 <sys_arch_mbox_tryfetch>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d1d5      	bne.n	800bd82 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3314      	adds	r3, #20
 800bdda:	4618      	mov	r0, r3
 800bddc:	f00b feae 	bl	8017b3c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3314      	adds	r3, #20
 800bde4:	4618      	mov	r0, r3
 800bde6:	f00b ff2e 	bl	8017c46 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800bdea:	bf00      	nop
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d106      	bne.n	800be18 <lwip_netconn_do_close_internal+0x24>
 800be0a:	4ba1      	ldr	r3, [pc, #644]	; (800c090 <lwip_netconn_do_close_internal+0x29c>)
 800be0c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800be10:	49a0      	ldr	r1, [pc, #640]	; (800c094 <lwip_netconn_do_close_internal+0x2a0>)
 800be12:	48a1      	ldr	r0, [pc, #644]	; (800c098 <lwip_netconn_do_close_internal+0x2a4>)
 800be14:	f00c f9ca 	bl	80181ac <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be20:	2b10      	cmp	r3, #16
 800be22:	d006      	beq.n	800be32 <lwip_netconn_do_close_internal+0x3e>
 800be24:	4b9a      	ldr	r3, [pc, #616]	; (800c090 <lwip_netconn_do_close_internal+0x29c>)
 800be26:	f240 32a3 	movw	r2, #931	; 0x3a3
 800be2a:	499c      	ldr	r1, [pc, #624]	; (800c09c <lwip_netconn_do_close_internal+0x2a8>)
 800be2c:	489a      	ldr	r0, [pc, #616]	; (800c098 <lwip_netconn_do_close_internal+0x2a4>)
 800be2e:	f00c f9bd 	bl	80181ac <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	785b      	ldrb	r3, [r3, #1]
 800be36:	2b04      	cmp	r3, #4
 800be38:	d006      	beq.n	800be48 <lwip_netconn_do_close_internal+0x54>
 800be3a:	4b95      	ldr	r3, [pc, #596]	; (800c090 <lwip_netconn_do_close_internal+0x29c>)
 800be3c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800be40:	4997      	ldr	r1, [pc, #604]	; (800c0a0 <lwip_netconn_do_close_internal+0x2ac>)
 800be42:	4895      	ldr	r0, [pc, #596]	; (800c098 <lwip_netconn_do_close_internal+0x2a4>)
 800be44:	f00c f9b2 	bl	80181ac <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d106      	bne.n	800be5e <lwip_netconn_do_close_internal+0x6a>
 800be50:	4b8f      	ldr	r3, [pc, #572]	; (800c090 <lwip_netconn_do_close_internal+0x29c>)
 800be52:	f240 32a5 	movw	r2, #933	; 0x3a5
 800be56:	4993      	ldr	r1, [pc, #588]	; (800c0a4 <lwip_netconn_do_close_internal+0x2b0>)
 800be58:	488f      	ldr	r0, [pc, #572]	; (800c098 <lwip_netconn_do_close_internal+0x2a4>)
 800be5a:	f00c f9a7 	bl	80181ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d106      	bne.n	800be74 <lwip_netconn_do_close_internal+0x80>
 800be66:	4b8a      	ldr	r3, [pc, #552]	; (800c090 <lwip_netconn_do_close_internal+0x29c>)
 800be68:	f240 32a6 	movw	r2, #934	; 0x3a6
 800be6c:	498e      	ldr	r1, [pc, #568]	; (800c0a8 <lwip_netconn_do_close_internal+0x2b4>)
 800be6e:	488a      	ldr	r0, [pc, #552]	; (800c098 <lwip_netconn_do_close_internal+0x2a4>)
 800be70:	f00c f99c 	bl	80181ac <iprintf>

  tpcb = conn->pcb.tcp;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	7a1b      	ldrb	r3, [r3, #8]
 800be80:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	2b03      	cmp	r3, #3
 800be96:	d102      	bne.n	800be9e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800be98:	2301      	movs	r3, #1
 800be9a:	75bb      	strb	r3, [r7, #22]
 800be9c:	e01f      	b.n	800bede <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00e      	beq.n	800bec2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800bea8:	2b05      	cmp	r3, #5
 800beaa:	d007      	beq.n	800bebc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800beb0:	2b06      	cmp	r3, #6
 800beb2:	d003      	beq.n	800bebc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d102      	bne.n	800bec2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800bebc:	2301      	movs	r3, #1
 800bebe:	75bb      	strb	r3, [r7, #22]
 800bec0:	e00d      	b.n	800bede <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800bec2:	7b7b      	ldrb	r3, [r7, #13]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d008      	beq.n	800beda <lwip_netconn_do_close_internal+0xe6>
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	8b5b      	ldrh	r3, [r3, #26]
 800becc:	f003 0310 	and.w	r3, r3, #16
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800bed4:	2301      	movs	r3, #1
 800bed6:	75bb      	strb	r3, [r7, #22]
 800bed8:	e001      	b.n	800bede <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800beda:	2300      	movs	r3, #0
 800bedc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800bede:	7dbb      	ldrb	r3, [r7, #22]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800bee4:	2100      	movs	r1, #0
 800bee6:	6938      	ldr	r0, [r7, #16]
 800bee8:	f004 fa36 	bl	8010358 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	7d1b      	ldrb	r3, [r3, #20]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d104      	bne.n	800befe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800bef4:	2100      	movs	r1, #0
 800bef6:	6938      	ldr	r0, [r7, #16]
 800bef8:	f004 faa6 	bl	8010448 <tcp_accept>
 800befc:	e01d      	b.n	800bf3a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800befe:	7bbb      	ldrb	r3, [r7, #14]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d007      	beq.n	800bf14 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800bf04:	2100      	movs	r1, #0
 800bf06:	6938      	ldr	r0, [r7, #16]
 800bf08:	f004 fa38 	bl	801037c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	6938      	ldr	r0, [r7, #16]
 800bf10:	f004 fa9a 	bl	8010448 <tcp_accept>
    }
    if (shut_tx) {
 800bf14:	7b7b      	ldrb	r3, [r7, #13]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	6938      	ldr	r0, [r7, #16]
 800bf1e:	f004 fa4f 	bl	80103c0 <tcp_sent>
    }
    if (shut_close) {
 800bf22:	7dbb      	ldrb	r3, [r7, #22]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d008      	beq.n	800bf3a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	6938      	ldr	r0, [r7, #16]
 800bf2e:	f004 faa3 	bl	8010478 <tcp_poll>
      tcp_err(tpcb, NULL);
 800bf32:	2100      	movs	r1, #0
 800bf34:	6938      	ldr	r0, [r7, #16]
 800bf36:	f004 fa65 	bl	8010404 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800bf3a:	7dbb      	ldrb	r3, [r7, #22]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d005      	beq.n	800bf4c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800bf40:	6938      	ldr	r0, [r7, #16]
 800bf42:	f003 f835 	bl	800efb0 <tcp_close>
 800bf46:	4603      	mov	r3, r0
 800bf48:	75fb      	strb	r3, [r7, #23]
 800bf4a:	e007      	b.n	800bf5c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	7b7a      	ldrb	r2, [r7, #13]
 800bf50:	4619      	mov	r1, r3
 800bf52:	6938      	ldr	r0, [r7, #16]
 800bf54:	f003 f858 	bl	800f008 <tcp_shutdown>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800bf5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800bf64:	2301      	movs	r3, #1
 800bf66:	757b      	strb	r3, [r7, #21]
 800bf68:	e016      	b.n	800bf98 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800bf6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d10f      	bne.n	800bf94 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	7a5b      	ldrb	r3, [r3, #9]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10c      	bne.n	800bf98 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800bf82:	7dbb      	ldrb	r3, [r7, #22]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d007      	beq.n	800bf98 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800bf88:	6938      	ldr	r0, [r7, #16]
 800bf8a:	f003 f957 	bl	800f23c <tcp_abort>
          err = ERR_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	75fb      	strb	r3, [r7, #23]
 800bf92:	e001      	b.n	800bf98 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800bf94:	2301      	movs	r3, #1
 800bf96:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bf98:	7d7b      	ldrb	r3, [r7, #21]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d044      	beq.n	800c028 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a1b      	ldr	r3, [r3, #32]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	7dfa      	ldrb	r2, [r7, #23]
 800bfae:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800bfbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d129      	bne.n	800c018 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800bfc4:	7dbb      	ldrb	r3, [r7, #22]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00c      	beq.n	800bfe4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d005      	beq.n	800bfe4 <lwip_netconn_do_close_internal+0x1f0>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2104      	movs	r1, #4
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	4798      	blx	r3
      }
      if (shut_rx) {
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d009      	beq.n	800bffe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d005      	beq.n	800bffe <lwip_netconn_do_close_internal+0x20a>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff6:	2200      	movs	r2, #0
 800bff8:	2100      	movs	r1, #0
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	4798      	blx	r3
      }
      if (shut_tx) {
 800bffe:	7b7b      	ldrb	r3, [r7, #13]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d009      	beq.n	800c018 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <lwip_netconn_do_close_internal+0x224>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c010:	2200      	movs	r2, #0
 800c012:	2102      	movs	r1, #2
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c01e:	68b8      	ldr	r0, [r7, #8]
 800c020:	f00b fe74 	bl	8017d0c <sys_sem_signal>
    }
    return ERR_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	e02e      	b.n	800c086 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800c028:	7d7b      	ldrb	r3, [r7, #21]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d11e      	bne.n	800c06c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	7d1b      	ldrb	r3, [r3, #20]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d106      	bne.n	800c044 <lwip_netconn_do_close_internal+0x250>
 800c036:	4b16      	ldr	r3, [pc, #88]	; (800c090 <lwip_netconn_do_close_internal+0x29c>)
 800c038:	f240 4241 	movw	r2, #1089	; 0x441
 800c03c:	491b      	ldr	r1, [pc, #108]	; (800c0ac <lwip_netconn_do_close_internal+0x2b8>)
 800c03e:	4816      	ldr	r0, [pc, #88]	; (800c098 <lwip_netconn_do_close_internal+0x2a4>)
 800c040:	f00c f8b4 	bl	80181ac <iprintf>
    if (shut_tx) {
 800c044:	7b7b      	ldrb	r3, [r7, #13]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800c04a:	4919      	ldr	r1, [pc, #100]	; (800c0b0 <lwip_netconn_do_close_internal+0x2bc>)
 800c04c:	6938      	ldr	r0, [r7, #16]
 800c04e:	f004 f9b7 	bl	80103c0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c052:	2201      	movs	r2, #1
 800c054:	4917      	ldr	r1, [pc, #92]	; (800c0b4 <lwip_netconn_do_close_internal+0x2c0>)
 800c056:	6938      	ldr	r0, [r7, #16]
 800c058:	f004 fa0e 	bl	8010478 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c05c:	4916      	ldr	r1, [pc, #88]	; (800c0b8 <lwip_netconn_do_close_internal+0x2c4>)
 800c05e:	6938      	ldr	r0, [r7, #16]
 800c060:	f004 f9d0 	bl	8010404 <tcp_err>
    tcp_arg(tpcb, conn);
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	6938      	ldr	r0, [r7, #16]
 800c068:	f004 f976 	bl	8010358 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c06c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <lwip_netconn_do_close_internal+0x28e>
 800c074:	4b06      	ldr	r3, [pc, #24]	; (800c090 <lwip_netconn_do_close_internal+0x29c>)
 800c076:	f240 424d 	movw	r2, #1101	; 0x44d
 800c07a:	4910      	ldr	r1, [pc, #64]	; (800c0bc <lwip_netconn_do_close_internal+0x2c8>)
 800c07c:	4806      	ldr	r0, [pc, #24]	; (800c098 <lwip_netconn_do_close_internal+0x2a4>)
 800c07e:	f00c f895 	bl	80181ac <iprintf>
  return err;
 800c082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	08019418 	.word	0x08019418
 800c094:	080196ec 	.word	0x080196ec
 800c098:	0801945c 	.word	0x0801945c
 800c09c:	080196fc 	.word	0x080196fc
 800c0a0:	0801971c 	.word	0x0801971c
 800c0a4:	08019740 	.word	0x08019740
 800c0a8:	08019580 	.word	0x08019580
 800c0ac:	08019754 	.word	0x08019754
 800c0b0:	0800b66d 	.word	0x0800b66d
 800c0b4:	0800b5a5 	.word	0x0800b5a5
 800c0b8:	0800b715 	.word	0x0800b715
 800c0bc:	08019778 	.word	0x08019778

0800c0c0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	785b      	ldrb	r3, [r3, #1]
 800c0d2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00d      	beq.n	800c0f6 <lwip_netconn_do_delconn+0x36>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0e4:	2b10      	cmp	r3, #16
 800c0e6:	d006      	beq.n	800c0f6 <lwip_netconn_do_delconn+0x36>
 800c0e8:	4b60      	ldr	r3, [pc, #384]	; (800c26c <lwip_netconn_do_delconn+0x1ac>)
 800c0ea:	f240 425e 	movw	r2, #1118	; 0x45e
 800c0ee:	4960      	ldr	r1, [pc, #384]	; (800c270 <lwip_netconn_do_delconn+0x1b0>)
 800c0f0:	4860      	ldr	r0, [pc, #384]	; (800c274 <lwip_netconn_do_delconn+0x1b4>)
 800c0f2:	f00c f85b 	bl	80181ac <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c0f6:	7afb      	ldrb	r3, [r7, #11]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d005      	beq.n	800c108 <lwip_netconn_do_delconn+0x48>
 800c0fc:	7afb      	ldrb	r3, [r7, #11]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d002      	beq.n	800c108 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c102:	7afb      	ldrb	r3, [r7, #11]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d109      	bne.n	800c11c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c108:	7afb      	ldrb	r3, [r7, #11]
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d10a      	bne.n	800c124 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	7f1b      	ldrb	r3, [r3, #28]
 800c114:	f003 0304 	and.w	r3, r3, #4
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d103      	bne.n	800c124 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	22fb      	movs	r2, #251	; 0xfb
 800c120:	711a      	strb	r2, [r3, #4]
 800c122:	e097      	b.n	800c254 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	2b03      	cmp	r3, #3
 800c128:	d10d      	bne.n	800c146 <lwip_netconn_do_delconn+0x86>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	7f1b      	ldrb	r3, [r3, #28]
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <lwip_netconn_do_delconn+0x86>
 800c138:	4b4c      	ldr	r3, [pc, #304]	; (800c26c <lwip_netconn_do_delconn+0x1ac>)
 800c13a:	f240 427a 	movw	r2, #1146	; 0x47a
 800c13e:	494e      	ldr	r1, [pc, #312]	; (800c278 <lwip_netconn_do_delconn+0x1b8>)
 800c140:	484c      	ldr	r0, [pc, #304]	; (800c274 <lwip_netconn_do_delconn+0x1b4>)
 800c142:	f00c f833 	bl	80181ac <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff fdd1 	bl	800bcf8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d05f      	beq.n	800c220 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c16a:	2b10      	cmp	r3, #16
 800c16c:	d00d      	beq.n	800c18a <lwip_netconn_do_delconn+0xca>
 800c16e:	2b20      	cmp	r3, #32
 800c170:	d151      	bne.n	800c216 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	4618      	mov	r0, r3
 800c184:	f009 f96a 	bl	801545c <udp_remove>
          break;
 800c188:	e046      	b.n	800c218 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d006      	beq.n	800c1a2 <lwip_netconn_do_delconn+0xe2>
 800c194:	4b35      	ldr	r3, [pc, #212]	; (800c26c <lwip_netconn_do_delconn+0x1ac>)
 800c196:	f240 4294 	movw	r2, #1172	; 0x494
 800c19a:	4938      	ldr	r1, [pc, #224]	; (800c27c <lwip_netconn_do_delconn+0x1bc>)
 800c19c:	4835      	ldr	r0, [pc, #212]	; (800c274 <lwip_netconn_do_delconn+0x1b4>)
 800c19e:	f00c f805 	bl	80181ac <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2204      	movs	r2, #4
 800c1a8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2203      	movs	r2, #3
 800c1ae:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2100      	movs	r1, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff fe18 	bl	800bdf4 <lwip_netconn_do_close_internal>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d04b      	beq.n	800c262 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	785b      	ldrb	r3, [r3, #1]
 800c1d0:	2b04      	cmp	r3, #4
 800c1d2:	d006      	beq.n	800c1e2 <lwip_netconn_do_delconn+0x122>
 800c1d4:	4b25      	ldr	r3, [pc, #148]	; (800c26c <lwip_netconn_do_delconn+0x1ac>)
 800c1d6:	f240 429a 	movw	r2, #1178	; 0x49a
 800c1da:	4929      	ldr	r1, [pc, #164]	; (800c280 <lwip_netconn_do_delconn+0x1c0>)
 800c1dc:	4825      	ldr	r0, [pc, #148]	; (800c274 <lwip_netconn_do_delconn+0x1b4>)
 800c1de:	f00b ffe5 	bl	80181ac <iprintf>
            UNLOCK_TCPIP_CORE();
 800c1e2:	4828      	ldr	r0, [pc, #160]	; (800c284 <lwip_netconn_do_delconn+0x1c4>)
 800c1e4:	f00b fdfb 	bl	8017dde <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	330c      	adds	r3, #12
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f00b fd5a 	bl	8017caa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c1f6:	4823      	ldr	r0, [pc, #140]	; (800c284 <lwip_netconn_do_delconn+0x1c4>)
 800c1f8:	f00b fde2 	bl	8017dc0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	785b      	ldrb	r3, [r3, #1]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d02d      	beq.n	800c262 <lwip_netconn_do_delconn+0x1a2>
 800c206:	4b19      	ldr	r3, [pc, #100]	; (800c26c <lwip_netconn_do_delconn+0x1ac>)
 800c208:	f240 429e 	movw	r2, #1182	; 0x49e
 800c20c:	491c      	ldr	r1, [pc, #112]	; (800c280 <lwip_netconn_do_delconn+0x1c0>)
 800c20e:	4819      	ldr	r0, [pc, #100]	; (800c274 <lwip_netconn_do_delconn+0x1b4>)
 800c210:	f00b ffcc 	bl	80181ac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c214:	e025      	b.n	800c262 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c216:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2200      	movs	r2, #0
 800c21e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <lwip_netconn_do_delconn+0x17a>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	6810      	ldr	r0, [r2, #0]
 800c234:	2200      	movs	r2, #0
 800c236:	2100      	movs	r1, #0
 800c238:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	2b00      	cmp	r3, #0
 800c242:	d007      	beq.n	800c254 <lwip_netconn_do_delconn+0x194>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	6810      	ldr	r0, [r2, #0]
 800c24e:	2200      	movs	r2, #0
 800c250:	2102      	movs	r1, #2
 800c252:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	330c      	adds	r3, #12
 800c25a:	4618      	mov	r0, r3
 800c25c:	f00b fd70 	bl	8017d40 <sys_sem_valid>
 800c260:	e000      	b.n	800c264 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c262:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	08019418 	.word	0x08019418
 800c270:	08019788 	.word	0x08019788
 800c274:	0801945c 	.word	0x0801945c
 800c278:	0801979c 	.word	0x0801979c
 800c27c:	080197bc 	.word	0x080197bc
 800c280:	080197d8 	.word	0x080197d8
 800c284:	20008004 	.word	0x20008004

0800c288 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d025      	beq.n	800c2ea <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2a8:	2b10      	cmp	r3, #16
 800c2aa:	d00e      	beq.n	800c2ca <lwip_netconn_do_bind+0x42>
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	d119      	bne.n	800c2e4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6858      	ldr	r0, [r3, #4]
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	6899      	ldr	r1, [r3, #8]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	899b      	ldrh	r3, [r3, #12]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f009 f824 	bl	801530c <udp_bind>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
        break;
 800c2c8:	e011      	b.n	800c2ee <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6858      	ldr	r0, [r3, #4]
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	6899      	ldr	r1, [r3, #8]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	899b      	ldrh	r3, [r3, #12]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	f002 ffbb 	bl	800f254 <tcp_bind>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73fb      	strb	r3, [r7, #15]
        break;
 800c2e2:	e004      	b.n	800c2ee <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c2e4:	23fa      	movs	r3, #250	; 0xfa
 800c2e6:	73fb      	strb	r3, [r7, #15]
        break;
 800c2e8:	e001      	b.n	800c2ee <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c2ea:	23fa      	movs	r3, #250	; 0xfa
 800c2ec:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	7bfa      	ldrb	r2, [r7, #15]
 800c2f2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c2f4:	bf00      	nop
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d07f      	beq.n	800c412 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c31c:	2b10      	cmp	r3, #16
 800c31e:	d175      	bne.n	800c40c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	785b      	ldrb	r3, [r3, #1]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d165      	bne.n	800c3f6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	7d1b      	ldrb	r3, [r3, #20]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800c336:	23fa      	movs	r3, #250	; 0xfa
 800c338:	72fb      	strb	r3, [r7, #11]
 800c33a:	e06c      	b.n	800c416 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800c33c:	23ff      	movs	r3, #255	; 0xff
 800c33e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	f107 020b 	add.w	r2, r7, #11
 800c34a:	7cf9      	ldrb	r1, [r7, #19]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f003 f839 	bl	800f3c4 <tcp_listen_with_backlog_and_err>
 800c352:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d05d      	beq.n	800c416 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3310      	adds	r3, #16
 800c360:	4618      	mov	r0, r3
 800c362:	f00b fc5f 	bl	8017c24 <sys_mbox_valid>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00b      	beq.n	800c384 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	3310      	adds	r3, #16
 800c372:	4618      	mov	r0, r3
 800c374:	f00b fbe2 	bl	8017b3c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3310      	adds	r3, #16
 800c37e:	4618      	mov	r0, r3
 800c380:	f00b fc61 	bl	8017c46 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3314      	adds	r3, #20
 800c38e:	4618      	mov	r0, r3
 800c390:	f00b fc48 	bl	8017c24 <sys_mbox_valid>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d108      	bne.n	800c3ac <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	3314      	adds	r3, #20
 800c3a0:	2106      	movs	r1, #6
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f00b fbb0 	bl	8017b08 <sys_mbox_new>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800c3ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d118      	bne.n	800c3e6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685a      	ldr	r2, [r3, #4]
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f003 ffc1 	bl	8010358 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	4912      	ldr	r1, [pc, #72]	; (800c428 <lwip_netconn_do_listen+0x12c>)
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f004 f832 	bl	8010448 <tcp_accept>
 800c3e4:	e017      	b.n	800c416 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f002 fde2 	bl	800efb0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	605a      	str	r2, [r3, #4]
 800c3f4:	e00f      	b.n	800c416 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	785b      	ldrb	r3, [r3, #1]
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d102      	bne.n	800c406 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	72fb      	strb	r3, [r7, #11]
 800c404:	e007      	b.n	800c416 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800c406:	23f5      	movs	r3, #245	; 0xf5
 800c408:	72fb      	strb	r3, [r7, #11]
 800c40a:	e004      	b.n	800c416 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800c40c:	23f0      	movs	r3, #240	; 0xf0
 800c40e:	72fb      	strb	r3, [r7, #11]
 800c410:	e001      	b.n	800c416 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800c412:	23f5      	movs	r3, #245	; 0xf5
 800c414:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800c416:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c41e:	bf00      	nop
 800c420:	3718      	adds	r7, #24
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	0800b911 	.word	0x0800b911

0800c42c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	2200      	movs	r2, #0
 800c43c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d022      	beq.n	800c48e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c452:	2b10      	cmp	r3, #16
 800c454:	d11b      	bne.n	800c48e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c462:	d202      	bcs.n	800c46a <lwip_netconn_do_recv+0x3e>
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	b29b      	uxth	r3, r3
 800c468:	e001      	b.n	800c46e <lwip_netconn_do_recv+0x42>
 800c46a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c46e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	89fa      	ldrh	r2, [r7, #14]
 800c478:	4611      	mov	r1, r2
 800c47a:	4618      	mov	r0, r3
 800c47c:	f003 f8a6 	bl	800f5cc <tcp_recved>
        remaining -= recved;
 800c480:	89fb      	ldrh	r3, [r7, #14]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1e6      	bne.n	800c45c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c48e:	bf00      	nop
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
	...

0800c498 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d106      	bne.n	800c4bc <lwip_netconn_do_writemore+0x24>
 800c4ae:	4b96      	ldr	r3, [pc, #600]	; (800c708 <lwip_netconn_do_writemore+0x270>)
 800c4b0:	f240 6273 	movw	r2, #1651	; 0x673
 800c4b4:	4995      	ldr	r1, [pc, #596]	; (800c70c <lwip_netconn_do_writemore+0x274>)
 800c4b6:	4896      	ldr	r0, [pc, #600]	; (800c710 <lwip_netconn_do_writemore+0x278>)
 800c4b8:	f00b fe78 	bl	80181ac <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	785b      	ldrb	r3, [r3, #1]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d006      	beq.n	800c4d2 <lwip_netconn_do_writemore+0x3a>
 800c4c4:	4b90      	ldr	r3, [pc, #576]	; (800c708 <lwip_netconn_do_writemore+0x270>)
 800c4c6:	f240 6274 	movw	r2, #1652	; 0x674
 800c4ca:	4992      	ldr	r1, [pc, #584]	; (800c714 <lwip_netconn_do_writemore+0x27c>)
 800c4cc:	4890      	ldr	r0, [pc, #576]	; (800c710 <lwip_netconn_do_writemore+0x278>)
 800c4ce:	f00b fe6d 	bl	80181ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <lwip_netconn_do_writemore+0x50>
 800c4da:	4b8b      	ldr	r3, [pc, #556]	; (800c708 <lwip_netconn_do_writemore+0x270>)
 800c4dc:	f240 6275 	movw	r2, #1653	; 0x675
 800c4e0:	498d      	ldr	r1, [pc, #564]	; (800c718 <lwip_netconn_do_writemore+0x280>)
 800c4e2:	488b      	ldr	r0, [pc, #556]	; (800c710 <lwip_netconn_do_writemore+0x278>)
 800c4e4:	f00b fe62 	bl	80181ac <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <lwip_netconn_do_writemore+0x66>
 800c4f0:	4b85      	ldr	r3, [pc, #532]	; (800c708 <lwip_netconn_do_writemore+0x270>)
 800c4f2:	f240 6276 	movw	r2, #1654	; 0x676
 800c4f6:	4989      	ldr	r1, [pc, #548]	; (800c71c <lwip_netconn_do_writemore+0x284>)
 800c4f8:	4885      	ldr	r0, [pc, #532]	; (800c710 <lwip_netconn_do_writemore+0x278>)
 800c4fa:	f00b fe57 	bl	80181ac <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	699a      	ldr	r2, [r3, #24]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a1b      	ldr	r3, [r3, #32]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d306      	bcc.n	800c51c <lwip_netconn_do_writemore+0x84>
 800c50e:	4b7e      	ldr	r3, [pc, #504]	; (800c708 <lwip_netconn_do_writemore+0x270>)
 800c510:	f240 6277 	movw	r2, #1655	; 0x677
 800c514:	4982      	ldr	r1, [pc, #520]	; (800c720 <lwip_netconn_do_writemore+0x288>)
 800c516:	487e      	ldr	r0, [pc, #504]	; (800c710 <lwip_netconn_do_writemore+0x278>)
 800c518:	f00b fe48 	bl	80181ac <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	899b      	ldrh	r3, [r3, #12]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <lwip_netconn_do_writemore+0x9c>
 800c526:	4b78      	ldr	r3, [pc, #480]	; (800c708 <lwip_netconn_do_writemore+0x270>)
 800c528:	f240 6279 	movw	r2, #1657	; 0x679
 800c52c:	497d      	ldr	r1, [pc, #500]	; (800c724 <lwip_netconn_do_writemore+0x28c>)
 800c52e:	4878      	ldr	r0, [pc, #480]	; (800c710 <lwip_netconn_do_writemore+0x278>)
 800c530:	f00b fe3c 	bl	80181ac <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	7f1b      	ldrb	r3, [r3, #28]
 800c53a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7f1b      	ldrb	r3, [r3, #28]
 800c540:	f003 0302 	and.w	r3, r3, #2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d104      	bne.n	800c552 <lwip_netconn_do_writemore+0xba>
 800c548:	7ebb      	ldrb	r3, [r7, #26]
 800c54a:	f003 0304 	and.w	r3, r3, #4
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <lwip_netconn_do_writemore+0xbe>
 800c552:	2301      	movs	r3, #1
 800c554:	e000      	b.n	800c558 <lwip_netconn_do_writemore+0xc0>
 800c556:	2300      	movs	r3, #0
 800c558:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	4413      	add	r3, r2
 800c56a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c584:	d307      	bcc.n	800c596 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c58a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c58c:	7ebb      	ldrb	r3, [r7, #26]
 800c58e:	f043 0302 	orr.w	r3, r3, #2
 800c592:	76bb      	strb	r3, [r7, #26]
 800c594:	e001      	b.n	800c59a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c5a2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c5a4:	89fa      	ldrh	r2, [r7, #14]
 800c5a6:	8bbb      	ldrh	r3, [r7, #28]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d216      	bcs.n	800c5da <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c5ac:	89fb      	ldrh	r3, [r7, #14]
 800c5ae:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c5b0:	7e3b      	ldrb	r3, [r7, #24]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00d      	beq.n	800c5d2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c5b6:	8bbb      	ldrh	r3, [r7, #28]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10e      	bne.n	800c5da <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d102      	bne.n	800c5cc <lwip_netconn_do_writemore+0x134>
 800c5c6:	f06f 0306 	mvn.w	r3, #6
 800c5ca:	e000      	b.n	800c5ce <lwip_netconn_do_writemore+0x136>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c5d0:	e07d      	b.n	800c6ce <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c5d2:	7ebb      	ldrb	r3, [r7, #26]
 800c5d4:	f043 0302 	orr.w	r3, r3, #2
 800c5d8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a1b      	ldr	r3, [r3, #32]
 800c5de:	691a      	ldr	r2, [r3, #16]
 800c5e0:	8bbb      	ldrh	r3, [r7, #28]
 800c5e2:	441a      	add	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d906      	bls.n	800c5fe <lwip_netconn_do_writemore+0x166>
 800c5f0:	4b45      	ldr	r3, [pc, #276]	; (800c708 <lwip_netconn_do_writemore+0x270>)
 800c5f2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c5f6:	494c      	ldr	r1, [pc, #304]	; (800c728 <lwip_netconn_do_writemore+0x290>)
 800c5f8:	4845      	ldr	r0, [pc, #276]	; (800c710 <lwip_netconn_do_writemore+0x278>)
 800c5fa:	f00b fdd7 	bl	80181ac <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c5fe:	8bbb      	ldrh	r3, [r7, #28]
 800c600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c604:	4293      	cmp	r3, r2
 800c606:	d103      	bne.n	800c610 <lwip_netconn_do_writemore+0x178>
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c60e:	d209      	bcs.n	800c624 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c614:	8bba      	ldrh	r2, [r7, #28]
 800c616:	429a      	cmp	r2, r3
 800c618:	d10b      	bne.n	800c632 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	899b      	ldrh	r3, [r3, #12]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d906      	bls.n	800c632 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c624:	2301      	movs	r3, #1
 800c626:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c628:	7ebb      	ldrb	r3, [r7, #26]
 800c62a:	f043 0302 	orr.w	r3, r3, #2
 800c62e:	76bb      	strb	r3, [r7, #26]
 800c630:	e001      	b.n	800c636 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6858      	ldr	r0, [r3, #4]
 800c63a:	7ebb      	ldrb	r3, [r7, #26]
 800c63c:	8bba      	ldrh	r2, [r7, #28]
 800c63e:	6979      	ldr	r1, [r7, #20]
 800c640:	f006 fdc8 	bl	80131d4 <tcp_write>
 800c644:	4603      	mov	r3, r0
 800c646:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c648:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d12c      	bne.n	800c6aa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	6999      	ldr	r1, [r3, #24]
 800c656:	8bba      	ldrh	r2, [r7, #28]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	440a      	add	r2, r1
 800c65e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	6919      	ldr	r1, [r3, #16]
 800c666:	8bba      	ldrh	r2, [r7, #28]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	440a      	add	r2, r1
 800c66e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a1b      	ldr	r3, [r3, #32]
 800c674:	691a      	ldr	r2, [r3, #16]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d113      	bne.n	800c6aa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	899a      	ldrh	r2, [r3, #12]
 800c688:	3a01      	subs	r2, #1
 800c68a:	b292      	uxth	r2, r2
 800c68c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	899b      	ldrh	r3, [r3, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d008      	beq.n	800c6aa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a1b      	ldr	r3, [r3, #32]
 800c69c:	689a      	ldr	r2, [r3, #8]
 800c69e:	3208      	adds	r2, #8
 800c6a0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c6aa:	7e7b      	ldrb	r3, [r7, #25]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d004      	beq.n	800c6ba <lwip_netconn_do_writemore+0x222>
 800c6b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f43f af50 	beq.w	800c55a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c6ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d004      	beq.n	800c6cc <lwip_netconn_do_writemore+0x234>
 800c6c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ca:	d146      	bne.n	800c75a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c6cc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c6ce:	7e3b      	ldrb	r3, [r7, #24]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d02b      	beq.n	800c72c <lwip_netconn_do_writemore+0x294>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a1b      	ldr	r3, [r3, #32]
 800c6d8:	699a      	ldr	r2, [r3, #24]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a1b      	ldr	r3, [r3, #32]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d223      	bcs.n	800c72c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <lwip_netconn_do_writemore+0x260>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	2103      	movs	r1, #3
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7f1b      	ldrb	r3, [r3, #28]
 800c6fc:	f043 0310 	orr.w	r3, r3, #16
 800c700:	b2da      	uxtb	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	771a      	strb	r2, [r3, #28]
 800c706:	e028      	b.n	800c75a <lwip_netconn_do_writemore+0x2c2>
 800c708:	08019418 	.word	0x08019418
 800c70c:	08019570 	.word	0x08019570
 800c710:	0801945c 	.word	0x0801945c
 800c714:	08019878 	.word	0x08019878
 800c718:	08019580 	.word	0x08019580
 800c71c:	08019898 	.word	0x08019898
 800c720:	080198b0 	.word	0x080198b0
 800c724:	080198f0 	.word	0x080198f0
 800c728:	08019918 	.word	0x08019918
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c734:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c738:	d305      	bcc.n	800c746 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c742:	2b04      	cmp	r3, #4
 800c744:	d909      	bls.n	800c75a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d005      	beq.n	800c75a <lwip_netconn_do_writemore+0x2c2>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	2200      	movs	r2, #0
 800c754:	2103      	movs	r1, #3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c75a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d11d      	bne.n	800c79e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	699a      	ldr	r2, [r3, #24]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d002      	beq.n	800c778 <lwip_netconn_do_writemore+0x2e0>
 800c772:	7e3b      	ldrb	r3, [r7, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c778:	2301      	movs	r3, #1
 800c77a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4618      	mov	r0, r3
 800c782:	f007 fb11 	bl	8013da8 <tcp_output>
 800c786:	4603      	mov	r3, r0
 800c788:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c78a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c78e:	f113 0f04 	cmn.w	r3, #4
 800c792:	d12c      	bne.n	800c7ee <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c794:	7b3b      	ldrb	r3, [r7, #12]
 800c796:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c798:	2301      	movs	r3, #1
 800c79a:	76fb      	strb	r3, [r7, #27]
 800c79c:	e027      	b.n	800c7ee <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c79e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a6:	d120      	bne.n	800c7ea <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f007 fafb 	bl	8013da8 <tcp_output>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c7b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c7ba:	f113 0f04 	cmn.w	r3, #4
 800c7be:	d104      	bne.n	800c7ca <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c7c0:	7b7b      	ldrb	r3, [r7, #13]
 800c7c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	76fb      	strb	r3, [r7, #27]
 800c7c8:	e011      	b.n	800c7ee <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c7ca:	7e3b      	ldrb	r3, [r7, #24]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00e      	beq.n	800c7ee <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <lwip_netconn_do_writemore+0x348>
 800c7da:	f06f 0306 	mvn.w	r3, #6
 800c7de:	e000      	b.n	800c7e2 <lwip_netconn_do_writemore+0x34a>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	76fb      	strb	r3, [r7, #27]
 800c7e8:	e001      	b.n	800c7ee <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c7ee:	7efb      	ldrb	r3, [r7, #27]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d015      	beq.n	800c820 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	330c      	adds	r3, #12
 800c7fc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	7ffa      	ldrb	r2, [r7, #31]
 800c804:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d006      	beq.n	800c826 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c818:	68b8      	ldr	r0, [r7, #8]
 800c81a:	f00b fa77 	bl	8017d0c <sys_sem_signal>
 800c81e:	e002      	b.n	800c826 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c820:	f04f 33ff 	mov.w	r3, #4294967295
 800c824:	e000      	b.n	800c828 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3720      	adds	r7, #32
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4618      	mov	r0, r3
 800c842:	f7fe fd20 	bl	800b286 <netconn_err>
 800c846:	4603      	mov	r3, r0
 800c848:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d166      	bne.n	800c920 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c85c:	2b10      	cmp	r3, #16
 800c85e:	d15d      	bne.n	800c91c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	785b      	ldrb	r3, [r3, #1]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c86a:	23fb      	movs	r3, #251	; 0xfb
 800c86c:	73fb      	strb	r3, [r7, #15]
 800c86e:	e057      	b.n	800c920 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d04d      	beq.n	800c916 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2201      	movs	r2, #1
 800c880:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d006      	beq.n	800c89a <lwip_netconn_do_write+0x6a>
 800c88c:	4b28      	ldr	r3, [pc, #160]	; (800c930 <lwip_netconn_do_write+0x100>)
 800c88e:	f240 7223 	movw	r2, #1827	; 0x723
 800c892:	4928      	ldr	r1, [pc, #160]	; (800c934 <lwip_netconn_do_write+0x104>)
 800c894:	4828      	ldr	r0, [pc, #160]	; (800c938 <lwip_netconn_do_write+0x108>)
 800c896:	f00b fc89 	bl	80181ac <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d106      	bne.n	800c8b0 <lwip_netconn_do_write+0x80>
 800c8a2:	4b23      	ldr	r3, [pc, #140]	; (800c930 <lwip_netconn_do_write+0x100>)
 800c8a4:	f240 7224 	movw	r2, #1828	; 0x724
 800c8a8:	4924      	ldr	r1, [pc, #144]	; (800c93c <lwip_netconn_do_write+0x10c>)
 800c8aa:	4823      	ldr	r0, [pc, #140]	; (800c938 <lwip_netconn_do_write+0x108>)
 800c8ac:	f00b fc7e 	bl	80181ac <iprintf>
        msg->conn->current_msg = msg;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2100      	movs	r1, #0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff fdea 	bl	800c498 <lwip_netconn_do_writemore>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d02e      	beq.n	800c928 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	785b      	ldrb	r3, [r3, #1]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d006      	beq.n	800c8e2 <lwip_netconn_do_write+0xb2>
 800c8d4:	4b16      	ldr	r3, [pc, #88]	; (800c930 <lwip_netconn_do_write+0x100>)
 800c8d6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c8da:	4919      	ldr	r1, [pc, #100]	; (800c940 <lwip_netconn_do_write+0x110>)
 800c8dc:	4816      	ldr	r0, [pc, #88]	; (800c938 <lwip_netconn_do_write+0x108>)
 800c8de:	f00b fc65 	bl	80181ac <iprintf>
          UNLOCK_TCPIP_CORE();
 800c8e2:	4818      	ldr	r0, [pc, #96]	; (800c944 <lwip_netconn_do_write+0x114>)
 800c8e4:	f00b fa7b 	bl	8017dde <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	330c      	adds	r3, #12
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f00b f9da 	bl	8017caa <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c8f6:	4813      	ldr	r0, [pc, #76]	; (800c944 <lwip_netconn_do_write+0x114>)
 800c8f8:	f00b fa62 	bl	8017dc0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	785b      	ldrb	r3, [r3, #1]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d110      	bne.n	800c928 <lwip_netconn_do_write+0xf8>
 800c906:	4b0a      	ldr	r3, [pc, #40]	; (800c930 <lwip_netconn_do_write+0x100>)
 800c908:	f240 722c 	movw	r2, #1836	; 0x72c
 800c90c:	490c      	ldr	r1, [pc, #48]	; (800c940 <lwip_netconn_do_write+0x110>)
 800c90e:	480a      	ldr	r0, [pc, #40]	; (800c938 <lwip_netconn_do_write+0x108>)
 800c910:	f00b fc4c 	bl	80181ac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c914:	e008      	b.n	800c928 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c916:	23f5      	movs	r3, #245	; 0xf5
 800c918:	73fb      	strb	r3, [r7, #15]
 800c91a:	e001      	b.n	800c920 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c91c:	23fa      	movs	r3, #250	; 0xfa
 800c91e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	7bfa      	ldrb	r2, [r7, #15]
 800c924:	711a      	strb	r2, [r3, #4]
 800c926:	e000      	b.n	800c92a <lwip_netconn_do_write+0xfa>
        return;
 800c928:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	08019418 	.word	0x08019418
 800c934:	080197bc 	.word	0x080197bc
 800c938:	0801945c 	.word	0x0801945c
 800c93c:	08019944 	.word	0x08019944
 800c940:	080197d8 	.word	0x080197d8
 800c944:	20008004 	.word	0x20008004

0800c948 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	785b      	ldrb	r3, [r3, #1]
 800c95a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d069      	beq.n	800ca3a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c970:	2b10      	cmp	r3, #16
 800c972:	d162      	bne.n	800ca3a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c978:	2b03      	cmp	r3, #3
 800c97a:	d002      	beq.n	800c982 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c97c:	7afb      	ldrb	r3, [r7, #11]
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d05b      	beq.n	800ca3a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	2b03      	cmp	r3, #3
 800c986:	d103      	bne.n	800c990 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	22f5      	movs	r2, #245	; 0xf5
 800c98c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c98e:	e059      	b.n	800ca44 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d103      	bne.n	800c99e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	22fb      	movs	r2, #251	; 0xfb
 800c99a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c99c:	e052      	b.n	800ca44 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	7a1b      	ldrb	r3, [r3, #8]
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d004      	beq.n	800c9b4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7ff f9a2 	bl	800bcf8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d006      	beq.n	800c9cc <lwip_netconn_do_close+0x84>
 800c9be:	4b23      	ldr	r3, [pc, #140]	; (800ca4c <lwip_netconn_do_close+0x104>)
 800c9c0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c9c4:	4922      	ldr	r1, [pc, #136]	; (800ca50 <lwip_netconn_do_close+0x108>)
 800c9c6:	4823      	ldr	r0, [pc, #140]	; (800ca54 <lwip_netconn_do_close+0x10c>)
 800c9c8:	f00b fbf0 	bl	80181ac <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2204      	movs	r2, #4
 800c9d2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fa06 	bl	800bdf4 <lwip_netconn_do_close_internal>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d029      	beq.n	800ca42 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d006      	beq.n	800ca06 <lwip_netconn_do_close+0xbe>
 800c9f8:	4b14      	ldr	r3, [pc, #80]	; (800ca4c <lwip_netconn_do_close+0x104>)
 800c9fa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c9fe:	4916      	ldr	r1, [pc, #88]	; (800ca58 <lwip_netconn_do_close+0x110>)
 800ca00:	4814      	ldr	r0, [pc, #80]	; (800ca54 <lwip_netconn_do_close+0x10c>)
 800ca02:	f00b fbd3 	bl	80181ac <iprintf>
        UNLOCK_TCPIP_CORE();
 800ca06:	4815      	ldr	r0, [pc, #84]	; (800ca5c <lwip_netconn_do_close+0x114>)
 800ca08:	f00b f9e9 	bl	8017dde <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	330c      	adds	r3, #12
 800ca12:	2100      	movs	r1, #0
 800ca14:	4618      	mov	r0, r3
 800ca16:	f00b f948 	bl	8017caa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ca1a:	4810      	ldr	r0, [pc, #64]	; (800ca5c <lwip_netconn_do_close+0x114>)
 800ca1c:	f00b f9d0 	bl	8017dc0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	785b      	ldrb	r3, [r3, #1]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00b      	beq.n	800ca42 <lwip_netconn_do_close+0xfa>
 800ca2a:	4b08      	ldr	r3, [pc, #32]	; (800ca4c <lwip_netconn_do_close+0x104>)
 800ca2c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ca30:	4909      	ldr	r1, [pc, #36]	; (800ca58 <lwip_netconn_do_close+0x110>)
 800ca32:	4808      	ldr	r0, [pc, #32]	; (800ca54 <lwip_netconn_do_close+0x10c>)
 800ca34:	f00b fbba 	bl	80181ac <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ca38:	e003      	b.n	800ca42 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	22f5      	movs	r2, #245	; 0xf5
 800ca3e:	711a      	strb	r2, [r3, #4]
 800ca40:	e000      	b.n	800ca44 <lwip_netconn_do_close+0xfc>
      return;
 800ca42:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	08019418 	.word	0x08019418
 800ca50:	080197bc 	.word	0x080197bc
 800ca54:	0801945c 	.word	0x0801945c
 800ca58:	080197d8 	.word	0x080197d8
 800ca5c:	20008004 	.word	0x20008004

0800ca60 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d013      	beq.n	800ca96 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00b      	beq.n	800ca8e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f001 fdee 	bl	800e65c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	605a      	str	r2, [r3, #4]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	2006      	movs	r0, #6
 800ca92:	f000 ff3f 	bl	800d914 <memp_free>
  }
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
	...

0800caa0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d108      	bne.n	800cac4 <netbuf_data+0x24>
 800cab2:	4b1b      	ldr	r3, [pc, #108]	; (800cb20 <netbuf_data+0x80>)
 800cab4:	22c6      	movs	r2, #198	; 0xc6
 800cab6:	491b      	ldr	r1, [pc, #108]	; (800cb24 <netbuf_data+0x84>)
 800cab8:	481b      	ldr	r0, [pc, #108]	; (800cb28 <netbuf_data+0x88>)
 800caba:	f00b fb77 	bl	80181ac <iprintf>
 800cabe:	f06f 030f 	mvn.w	r3, #15
 800cac2:	e029      	b.n	800cb18 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d108      	bne.n	800cadc <netbuf_data+0x3c>
 800caca:	4b15      	ldr	r3, [pc, #84]	; (800cb20 <netbuf_data+0x80>)
 800cacc:	22c7      	movs	r2, #199	; 0xc7
 800cace:	4917      	ldr	r1, [pc, #92]	; (800cb2c <netbuf_data+0x8c>)
 800cad0:	4815      	ldr	r0, [pc, #84]	; (800cb28 <netbuf_data+0x88>)
 800cad2:	f00b fb6b 	bl	80181ac <iprintf>
 800cad6:	f06f 030f 	mvn.w	r3, #15
 800cada:	e01d      	b.n	800cb18 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d108      	bne.n	800caf4 <netbuf_data+0x54>
 800cae2:	4b0f      	ldr	r3, [pc, #60]	; (800cb20 <netbuf_data+0x80>)
 800cae4:	22c8      	movs	r2, #200	; 0xc8
 800cae6:	4912      	ldr	r1, [pc, #72]	; (800cb30 <netbuf_data+0x90>)
 800cae8:	480f      	ldr	r0, [pc, #60]	; (800cb28 <netbuf_data+0x88>)
 800caea:	f00b fb5f 	bl	80181ac <iprintf>
 800caee:	f06f 030f 	mvn.w	r3, #15
 800caf2:	e011      	b.n	800cb18 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d102      	bne.n	800cb02 <netbuf_data+0x62>
    return ERR_BUF;
 800cafc:	f06f 0301 	mvn.w	r3, #1
 800cb00:	e00a      	b.n	800cb18 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	895a      	ldrh	r2, [r3, #10]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	08019970 	.word	0x08019970
 800cb24:	08019a78 	.word	0x08019a78
 800cb28:	080199c0 	.word	0x080199c0
 800cb2c:	08019a94 	.word	0x08019a94
 800cb30:	08019ab4 	.word	0x08019ab4

0800cb34 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d108      	bne.n	800cb54 <netbuf_next+0x20>
 800cb42:	4b11      	ldr	r3, [pc, #68]	; (800cb88 <netbuf_next+0x54>)
 800cb44:	22e0      	movs	r2, #224	; 0xe0
 800cb46:	4911      	ldr	r1, [pc, #68]	; (800cb8c <netbuf_next+0x58>)
 800cb48:	4811      	ldr	r0, [pc, #68]	; (800cb90 <netbuf_next+0x5c>)
 800cb4a:	f00b fb2f 	bl	80181ac <iprintf>
 800cb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb52:	e014      	b.n	800cb7e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d102      	bne.n	800cb64 <netbuf_next+0x30>
    return -1;
 800cb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb62:	e00c      	b.n	800cb7e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <netbuf_next+0x48>
    return 1;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e000      	b.n	800cb7e <netbuf_next+0x4a>
  }
  return 0;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	08019970 	.word	0x08019970
 800cb8c:	08019ad0 	.word	0x08019ad0
 800cb90:	080199c0 	.word	0x080199c0

0800cb94 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cb9e:	f008 f9bb 	bl	8014f18 <sys_timeouts_sleeptime>
 800cba2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbaa:	d10b      	bne.n	800cbc4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cbac:	4813      	ldr	r0, [pc, #76]	; (800cbfc <tcpip_timeouts_mbox_fetch+0x68>)
 800cbae:	f00b f916 	bl	8017dde <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f00a ffec 	bl	8017b94 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cbbc:	480f      	ldr	r0, [pc, #60]	; (800cbfc <tcpip_timeouts_mbox_fetch+0x68>)
 800cbbe:	f00b f8ff 	bl	8017dc0 <sys_mutex_lock>
    return;
 800cbc2:	e018      	b.n	800cbf6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d102      	bne.n	800cbd0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cbca:	f008 f96b 	bl	8014ea4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cbce:	e7e6      	b.n	800cb9e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cbd0:	480a      	ldr	r0, [pc, #40]	; (800cbfc <tcpip_timeouts_mbox_fetch+0x68>)
 800cbd2:	f00b f904 	bl	8017dde <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f00a ffda 	bl	8017b94 <sys_arch_mbox_fetch>
 800cbe0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cbe2:	4806      	ldr	r0, [pc, #24]	; (800cbfc <tcpip_timeouts_mbox_fetch+0x68>)
 800cbe4:	f00b f8ec 	bl	8017dc0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbee:	d102      	bne.n	800cbf6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cbf0:	f008 f958 	bl	8014ea4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cbf4:	e7d3      	b.n	800cb9e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	20008004 	.word	0x20008004

0800cc00 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cc08:	4810      	ldr	r0, [pc, #64]	; (800cc4c <tcpip_thread+0x4c>)
 800cc0a:	f00b f8d9 	bl	8017dc0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cc0e:	4b10      	ldr	r3, [pc, #64]	; (800cc50 <tcpip_thread+0x50>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d005      	beq.n	800cc22 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cc16:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <tcpip_thread+0x50>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a0e      	ldr	r2, [pc, #56]	; (800cc54 <tcpip_thread+0x54>)
 800cc1c:	6812      	ldr	r2, [r2, #0]
 800cc1e:	4610      	mov	r0, r2
 800cc20:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cc22:	f107 030c 	add.w	r3, r7, #12
 800cc26:	4619      	mov	r1, r3
 800cc28:	480b      	ldr	r0, [pc, #44]	; (800cc58 <tcpip_thread+0x58>)
 800cc2a:	f7ff ffb3 	bl	800cb94 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cc34:	4b09      	ldr	r3, [pc, #36]	; (800cc5c <tcpip_thread+0x5c>)
 800cc36:	2291      	movs	r2, #145	; 0x91
 800cc38:	4909      	ldr	r1, [pc, #36]	; (800cc60 <tcpip_thread+0x60>)
 800cc3a:	480a      	ldr	r0, [pc, #40]	; (800cc64 <tcpip_thread+0x64>)
 800cc3c:	f00b fab6 	bl	80181ac <iprintf>
      continue;
 800cc40:	e003      	b.n	800cc4a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 f80f 	bl	800cc68 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cc4a:	e7ea      	b.n	800cc22 <tcpip_thread+0x22>
 800cc4c:	20008004 	.word	0x20008004
 800cc50:	20004b24 	.word	0x20004b24
 800cc54:	20004b28 	.word	0x20004b28
 800cc58:	20004b2c 	.word	0x20004b2c
 800cc5c:	08019b08 	.word	0x08019b08
 800cc60:	08019b38 	.word	0x08019b38
 800cc64:	08019b58 	.word	0x08019b58

0800cc68 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d026      	beq.n	800ccc6 <tcpip_thread_handle_msg+0x5e>
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	dc2b      	bgt.n	800ccd4 <tcpip_thread_handle_msg+0x6c>
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <tcpip_thread_handle_msg+0x1e>
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d015      	beq.n	800ccb0 <tcpip_thread_handle_msg+0x48>
 800cc84:	e026      	b.n	800ccd4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	6850      	ldr	r0, [r2, #4]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	6892      	ldr	r2, [r2, #8]
 800cc92:	4611      	mov	r1, r2
 800cc94:	4798      	blx	r3
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d004      	beq.n	800cca6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f001 fcdb 	bl	800e65c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cca6:	6879      	ldr	r1, [r7, #4]
 800cca8:	2009      	movs	r0, #9
 800ccaa:	f000 fe33 	bl	800d914 <memp_free>
      break;
 800ccae:	e018      	b.n	800cce2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	6892      	ldr	r2, [r2, #8]
 800ccb8:	4610      	mov	r0, r2
 800ccba:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	2008      	movs	r0, #8
 800ccc0:	f000 fe28 	bl	800d914 <memp_free>
      break;
 800ccc4:	e00d      	b.n	800cce2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	6892      	ldr	r2, [r2, #8]
 800ccce:	4610      	mov	r0, r2
 800ccd0:	4798      	blx	r3
      break;
 800ccd2:	e006      	b.n	800cce2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ccd4:	4b05      	ldr	r3, [pc, #20]	; (800ccec <tcpip_thread_handle_msg+0x84>)
 800ccd6:	22cf      	movs	r2, #207	; 0xcf
 800ccd8:	4905      	ldr	r1, [pc, #20]	; (800ccf0 <tcpip_thread_handle_msg+0x88>)
 800ccda:	4806      	ldr	r0, [pc, #24]	; (800ccf4 <tcpip_thread_handle_msg+0x8c>)
 800ccdc:	f00b fa66 	bl	80181ac <iprintf>
      break;
 800cce0:	bf00      	nop
  }
}
 800cce2:	bf00      	nop
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	08019b08 	.word	0x08019b08
 800ccf0:	08019b38 	.word	0x08019b38
 800ccf4:	08019b58 	.word	0x08019b58

0800ccf8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b086      	sub	sp, #24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cd04:	481a      	ldr	r0, [pc, #104]	; (800cd70 <tcpip_inpkt+0x78>)
 800cd06:	f00a ff8d 	bl	8017c24 <sys_mbox_valid>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d105      	bne.n	800cd1c <tcpip_inpkt+0x24>
 800cd10:	4b18      	ldr	r3, [pc, #96]	; (800cd74 <tcpip_inpkt+0x7c>)
 800cd12:	22fc      	movs	r2, #252	; 0xfc
 800cd14:	4918      	ldr	r1, [pc, #96]	; (800cd78 <tcpip_inpkt+0x80>)
 800cd16:	4819      	ldr	r0, [pc, #100]	; (800cd7c <tcpip_inpkt+0x84>)
 800cd18:	f00b fa48 	bl	80181ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cd1c:	2009      	movs	r0, #9
 800cd1e:	f000 fda7 	bl	800d870 <memp_malloc>
 800cd22:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d102      	bne.n	800cd30 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2e:	e01a      	b.n	800cd66 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	2200      	movs	r2, #0
 800cd34:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cd48:	6979      	ldr	r1, [r7, #20]
 800cd4a:	4809      	ldr	r0, [pc, #36]	; (800cd70 <tcpip_inpkt+0x78>)
 800cd4c:	f00a ff08 	bl	8017b60 <sys_mbox_trypost>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d006      	beq.n	800cd64 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cd56:	6979      	ldr	r1, [r7, #20]
 800cd58:	2009      	movs	r0, #9
 800cd5a:	f000 fddb 	bl	800d914 <memp_free>
    return ERR_MEM;
 800cd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd62:	e000      	b.n	800cd66 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cd64:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20004b2c 	.word	0x20004b2c
 800cd74:	08019b08 	.word	0x08019b08
 800cd78:	08019b80 	.word	0x08019b80
 800cd7c:	08019b58 	.word	0x08019b58

0800cd80 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd90:	f003 0318 	and.w	r3, r3, #24
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cd98:	4a08      	ldr	r2, [pc, #32]	; (800cdbc <tcpip_input+0x3c>)
 800cd9a:	6839      	ldr	r1, [r7, #0]
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7ff ffab 	bl	800ccf8 <tcpip_inpkt>
 800cda2:	4603      	mov	r3, r0
 800cda4:	e005      	b.n	800cdb2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cda6:	4a06      	ldr	r2, [pc, #24]	; (800cdc0 <tcpip_input+0x40>)
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7ff ffa4 	bl	800ccf8 <tcpip_inpkt>
 800cdb0:	4603      	mov	r3, r0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	0801795d 	.word	0x0801795d
 800cdc0:	08016871 	.word	0x08016871

0800cdc4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cdce:	4819      	ldr	r0, [pc, #100]	; (800ce34 <tcpip_try_callback+0x70>)
 800cdd0:	f00a ff28 	bl	8017c24 <sys_mbox_valid>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d106      	bne.n	800cde8 <tcpip_try_callback+0x24>
 800cdda:	4b17      	ldr	r3, [pc, #92]	; (800ce38 <tcpip_try_callback+0x74>)
 800cddc:	f240 125d 	movw	r2, #349	; 0x15d
 800cde0:	4916      	ldr	r1, [pc, #88]	; (800ce3c <tcpip_try_callback+0x78>)
 800cde2:	4817      	ldr	r0, [pc, #92]	; (800ce40 <tcpip_try_callback+0x7c>)
 800cde4:	f00b f9e2 	bl	80181ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cde8:	2008      	movs	r0, #8
 800cdea:	f000 fd41 	bl	800d870 <memp_malloc>
 800cdee:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d102      	bne.n	800cdfc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfa:	e017      	b.n	800ce2c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ce0e:	68f9      	ldr	r1, [r7, #12]
 800ce10:	4808      	ldr	r0, [pc, #32]	; (800ce34 <tcpip_try_callback+0x70>)
 800ce12:	f00a fea5 	bl	8017b60 <sys_mbox_trypost>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d006      	beq.n	800ce2a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ce1c:	68f9      	ldr	r1, [r7, #12]
 800ce1e:	2008      	movs	r0, #8
 800ce20:	f000 fd78 	bl	800d914 <memp_free>
    return ERR_MEM;
 800ce24:	f04f 33ff 	mov.w	r3, #4294967295
 800ce28:	e000      	b.n	800ce2c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ce2a:	2300      	movs	r3, #0
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	20004b2c 	.word	0x20004b2c
 800ce38:	08019b08 	.word	0x08019b08
 800ce3c:	08019b80 	.word	0x08019b80
 800ce40:	08019b58 	.word	0x08019b58

0800ce44 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ce50:	4806      	ldr	r0, [pc, #24]	; (800ce6c <tcpip_send_msg_wait_sem+0x28>)
 800ce52:	f00a ffb5 	bl	8017dc0 <sys_mutex_lock>
  fn(apimsg);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	68b8      	ldr	r0, [r7, #8]
 800ce5a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ce5c:	4803      	ldr	r0, [pc, #12]	; (800ce6c <tcpip_send_msg_wait_sem+0x28>)
 800ce5e:	f00a ffbe 	bl	8017dde <sys_mutex_unlock>
  return ERR_OK;
 800ce62:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20008004 	.word	0x20008004

0800ce70 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ce7a:	f000 f871 	bl	800cf60 <lwip_init>

  tcpip_init_done = initfunc;
 800ce7e:	4a17      	ldr	r2, [pc, #92]	; (800cedc <tcpip_init+0x6c>)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ce84:	4a16      	ldr	r2, [pc, #88]	; (800cee0 <tcpip_init+0x70>)
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ce8a:	2106      	movs	r1, #6
 800ce8c:	4815      	ldr	r0, [pc, #84]	; (800cee4 <tcpip_init+0x74>)
 800ce8e:	f00a fe3b 	bl	8017b08 <sys_mbox_new>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d006      	beq.n	800cea6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ce98:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <tcpip_init+0x78>)
 800ce9a:	f240 2261 	movw	r2, #609	; 0x261
 800ce9e:	4913      	ldr	r1, [pc, #76]	; (800ceec <tcpip_init+0x7c>)
 800cea0:	4813      	ldr	r0, [pc, #76]	; (800cef0 <tcpip_init+0x80>)
 800cea2:	f00b f983 	bl	80181ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cea6:	4813      	ldr	r0, [pc, #76]	; (800cef4 <tcpip_init+0x84>)
 800cea8:	f00a ff74 	bl	8017d94 <sys_mutex_new>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d006      	beq.n	800cec0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	; (800cee8 <tcpip_init+0x78>)
 800ceb4:	f240 2265 	movw	r2, #613	; 0x265
 800ceb8:	490f      	ldr	r1, [pc, #60]	; (800cef8 <tcpip_init+0x88>)
 800ceba:	480d      	ldr	r0, [pc, #52]	; (800cef0 <tcpip_init+0x80>)
 800cebc:	f00b f976 	bl	80181ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cec0:	2318      	movs	r3, #24
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cec8:	2200      	movs	r2, #0
 800ceca:	490c      	ldr	r1, [pc, #48]	; (800cefc <tcpip_init+0x8c>)
 800cecc:	480c      	ldr	r0, [pc, #48]	; (800cf00 <tcpip_init+0x90>)
 800cece:	f00a ff93 	bl	8017df8 <sys_thread_new>
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	20004b24 	.word	0x20004b24
 800cee0:	20004b28 	.word	0x20004b28
 800cee4:	20004b2c 	.word	0x20004b2c
 800cee8:	08019b08 	.word	0x08019b08
 800ceec:	08019b90 	.word	0x08019b90
 800cef0:	08019b58 	.word	0x08019b58
 800cef4:	20008004 	.word	0x20008004
 800cef8:	08019bb4 	.word	0x08019bb4
 800cefc:	0800cc01 	.word	0x0800cc01
 800cf00:	08019bd8 	.word	0x08019bd8

0800cf04 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cf0e:	88fb      	ldrh	r3, [r7, #6]
 800cf10:	021b      	lsls	r3, r3, #8
 800cf12:	b21a      	sxth	r2, r3
 800cf14:	88fb      	ldrh	r3, [r7, #6]
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	b21b      	sxth	r3, r3
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	b21b      	sxth	r3, r3
 800cf20:	b29b      	uxth	r3, r3
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cf2e:	b480      	push	{r7}
 800cf30:	b083      	sub	sp, #12
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	061a      	lsls	r2, r3, #24
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	021b      	lsls	r3, r3, #8
 800cf3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cf42:	431a      	orrs	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	0a1b      	lsrs	r3, r3, #8
 800cf48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	0e1b      	lsrs	r3, r3, #24
 800cf52:	4313      	orrs	r3, r2
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cf6a:	f00a ff07 	bl	8017d7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cf6e:	f000 f8d5 	bl	800d11c <mem_init>
  memp_init();
 800cf72:	f000 fc31 	bl	800d7d8 <memp_init>
  pbuf_init();
  netif_init();
 800cf76:	f000 fcf7 	bl	800d968 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cf7a:	f008 f805 	bl	8014f88 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cf7e:	f001 fe07 	bl	800eb90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cf82:	f007 ff47 	bl	8014e14 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
	...

0800cf90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	4603      	mov	r3, r0
 800cf98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cf9a:	4b05      	ldr	r3, [pc, #20]	; (800cfb0 <ptr_to_mem+0x20>)
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	88fb      	ldrh	r3, [r7, #6]
 800cfa0:	4413      	add	r3, r2
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	20004b30 	.word	0x20004b30

0800cfb4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cfbc:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <mem_to_ptr+0x20>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	b29b      	uxth	r3, r3
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	20004b30 	.word	0x20004b30

0800cfd8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cfe0:	4b45      	ldr	r3, [pc, #276]	; (800d0f8 <plug_holes+0x120>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d206      	bcs.n	800cff8 <plug_holes+0x20>
 800cfea:	4b44      	ldr	r3, [pc, #272]	; (800d0fc <plug_holes+0x124>)
 800cfec:	f240 12df 	movw	r2, #479	; 0x1df
 800cff0:	4943      	ldr	r1, [pc, #268]	; (800d100 <plug_holes+0x128>)
 800cff2:	4844      	ldr	r0, [pc, #272]	; (800d104 <plug_holes+0x12c>)
 800cff4:	f00b f8da 	bl	80181ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cff8:	4b43      	ldr	r3, [pc, #268]	; (800d108 <plug_holes+0x130>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d306      	bcc.n	800d010 <plug_holes+0x38>
 800d002:	4b3e      	ldr	r3, [pc, #248]	; (800d0fc <plug_holes+0x124>)
 800d004:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d008:	4940      	ldr	r1, [pc, #256]	; (800d10c <plug_holes+0x134>)
 800d00a:	483e      	ldr	r0, [pc, #248]	; (800d104 <plug_holes+0x12c>)
 800d00c:	f00b f8ce 	bl	80181ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	791b      	ldrb	r3, [r3, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d006      	beq.n	800d026 <plug_holes+0x4e>
 800d018:	4b38      	ldr	r3, [pc, #224]	; (800d0fc <plug_holes+0x124>)
 800d01a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d01e:	493c      	ldr	r1, [pc, #240]	; (800d110 <plug_holes+0x138>)
 800d020:	4838      	ldr	r0, [pc, #224]	; (800d104 <plug_holes+0x12c>)
 800d022:	f00b f8c3 	bl	80181ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	881b      	ldrh	r3, [r3, #0]
 800d02a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d02e:	d906      	bls.n	800d03e <plug_holes+0x66>
 800d030:	4b32      	ldr	r3, [pc, #200]	; (800d0fc <plug_holes+0x124>)
 800d032:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d036:	4937      	ldr	r1, [pc, #220]	; (800d114 <plug_holes+0x13c>)
 800d038:	4832      	ldr	r0, [pc, #200]	; (800d104 <plug_holes+0x12c>)
 800d03a:	f00b f8b7 	bl	80181ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	4618      	mov	r0, r3
 800d044:	f7ff ffa4 	bl	800cf90 <ptr_to_mem>
 800d048:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d024      	beq.n	800d09c <plug_holes+0xc4>
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	791b      	ldrb	r3, [r3, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d120      	bne.n	800d09c <plug_holes+0xc4>
 800d05a:	4b2b      	ldr	r3, [pc, #172]	; (800d108 <plug_holes+0x130>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	429a      	cmp	r2, r3
 800d062:	d01b      	beq.n	800d09c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d064:	4b2c      	ldr	r3, [pc, #176]	; (800d118 <plug_holes+0x140>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d102      	bne.n	800d074 <plug_holes+0x9c>
      lfree = mem;
 800d06e:	4a2a      	ldr	r2, [pc, #168]	; (800d118 <plug_holes+0x140>)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	881a      	ldrh	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d084:	d00a      	beq.n	800d09c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	881b      	ldrh	r3, [r3, #0]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7ff ff80 	bl	800cf90 <ptr_to_mem>
 800d090:	4604      	mov	r4, r0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff ff8e 	bl	800cfb4 <mem_to_ptr>
 800d098:	4603      	mov	r3, r0
 800d09a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	885b      	ldrh	r3, [r3, #2]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff ff75 	bl	800cf90 <ptr_to_mem>
 800d0a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d01f      	beq.n	800d0f0 <plug_holes+0x118>
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	791b      	ldrb	r3, [r3, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d11b      	bne.n	800d0f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d0b8:	4b17      	ldr	r3, [pc, #92]	; (800d118 <plug_holes+0x140>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d102      	bne.n	800d0c8 <plug_holes+0xf0>
      lfree = pmem;
 800d0c2:	4a15      	ldr	r2, [pc, #84]	; (800d118 <plug_holes+0x140>)
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	881a      	ldrh	r2, [r3, #0]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	881b      	ldrh	r3, [r3, #0]
 800d0d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d0d8:	d00a      	beq.n	800d0f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	881b      	ldrh	r3, [r3, #0]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7ff ff56 	bl	800cf90 <ptr_to_mem>
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	68b8      	ldr	r0, [r7, #8]
 800d0e8:	f7ff ff64 	bl	800cfb4 <mem_to_ptr>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d0f0:	bf00      	nop
 800d0f2:	3714      	adds	r7, #20
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd90      	pop	{r4, r7, pc}
 800d0f8:	20004b30 	.word	0x20004b30
 800d0fc:	08019be8 	.word	0x08019be8
 800d100:	08019c18 	.word	0x08019c18
 800d104:	08019c30 	.word	0x08019c30
 800d108:	20004b34 	.word	0x20004b34
 800d10c:	08019c58 	.word	0x08019c58
 800d110:	08019c74 	.word	0x08019c74
 800d114:	08019c90 	.word	0x08019c90
 800d118:	20004b3c 	.word	0x20004b3c

0800d11c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d122:	4b1f      	ldr	r3, [pc, #124]	; (800d1a0 <mem_init+0x84>)
 800d124:	3303      	adds	r3, #3
 800d126:	f023 0303 	bic.w	r3, r3, #3
 800d12a:	461a      	mov	r2, r3
 800d12c:	4b1d      	ldr	r3, [pc, #116]	; (800d1a4 <mem_init+0x88>)
 800d12e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d130:	4b1c      	ldr	r3, [pc, #112]	; (800d1a4 <mem_init+0x88>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d13c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d14a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800d14e:	f7ff ff1f 	bl	800cf90 <ptr_to_mem>
 800d152:	4603      	mov	r3, r0
 800d154:	4a14      	ldr	r2, [pc, #80]	; (800d1a8 <mem_init+0x8c>)
 800d156:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d158:	4b13      	ldr	r3, [pc, #76]	; (800d1a8 <mem_init+0x8c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2201      	movs	r2, #1
 800d15e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d160:	4b11      	ldr	r3, [pc, #68]	; (800d1a8 <mem_init+0x8c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d168:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d16a:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <mem_init+0x8c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d172:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d174:	4b0b      	ldr	r3, [pc, #44]	; (800d1a4 <mem_init+0x88>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a0c      	ldr	r2, [pc, #48]	; (800d1ac <mem_init+0x90>)
 800d17a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d17c:	480c      	ldr	r0, [pc, #48]	; (800d1b0 <mem_init+0x94>)
 800d17e:	f00a fe09 	bl	8017d94 <sys_mutex_new>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d006      	beq.n	800d196 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d188:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <mem_init+0x98>)
 800d18a:	f240 221f 	movw	r2, #543	; 0x21f
 800d18e:	490a      	ldr	r1, [pc, #40]	; (800d1b8 <mem_init+0x9c>)
 800d190:	480a      	ldr	r0, [pc, #40]	; (800d1bc <mem_init+0xa0>)
 800d192:	f00b f80b 	bl	80181ac <iprintf>
  }
}
 800d196:	bf00      	nop
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	20008020 	.word	0x20008020
 800d1a4:	20004b30 	.word	0x20004b30
 800d1a8:	20004b34 	.word	0x20004b34
 800d1ac:	20004b3c 	.word	0x20004b3c
 800d1b0:	20004b38 	.word	0x20004b38
 800d1b4:	08019be8 	.word	0x08019be8
 800d1b8:	08019cbc 	.word	0x08019cbc
 800d1bc:	08019c30 	.word	0x08019c30

0800d1c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff fef3 	bl	800cfb4 <mem_to_ptr>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7ff feda 	bl	800cf90 <ptr_to_mem>
 800d1dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	885b      	ldrh	r3, [r3, #2]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff fed4 	bl	800cf90 <ptr_to_mem>
 800d1e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	881b      	ldrh	r3, [r3, #0]
 800d1ee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d1f2:	d818      	bhi.n	800d226 <mem_link_valid+0x66>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	885b      	ldrh	r3, [r3, #2]
 800d1f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d1fc:	d813      	bhi.n	800d226 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d202:	8afa      	ldrh	r2, [r7, #22]
 800d204:	429a      	cmp	r2, r3
 800d206:	d004      	beq.n	800d212 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	881b      	ldrh	r3, [r3, #0]
 800d20c:	8afa      	ldrh	r2, [r7, #22]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d109      	bne.n	800d226 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d212:	4b08      	ldr	r3, [pc, #32]	; (800d234 <mem_link_valid+0x74>)
 800d214:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d216:	693a      	ldr	r2, [r7, #16]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d006      	beq.n	800d22a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	885b      	ldrh	r3, [r3, #2]
 800d220:	8afa      	ldrh	r2, [r7, #22]
 800d222:	429a      	cmp	r2, r3
 800d224:	d001      	beq.n	800d22a <mem_link_valid+0x6a>
    return 0;
 800d226:	2300      	movs	r3, #0
 800d228:	e000      	b.n	800d22c <mem_link_valid+0x6c>
  }
  return 1;
 800d22a:	2301      	movs	r3, #1
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3718      	adds	r7, #24
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	20004b34 	.word	0x20004b34

0800d238 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b088      	sub	sp, #32
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d070      	beq.n	800d328 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f003 0303 	and.w	r3, r3, #3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00d      	beq.n	800d26c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d250:	4b37      	ldr	r3, [pc, #220]	; (800d330 <mem_free+0xf8>)
 800d252:	f240 2273 	movw	r2, #627	; 0x273
 800d256:	4937      	ldr	r1, [pc, #220]	; (800d334 <mem_free+0xfc>)
 800d258:	4837      	ldr	r0, [pc, #220]	; (800d338 <mem_free+0x100>)
 800d25a:	f00a ffa7 	bl	80181ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d25e:	f00a fdeb 	bl	8017e38 <sys_arch_protect>
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f00a fdf5 	bl	8017e54 <sys_arch_unprotect>
    return;
 800d26a:	e05e      	b.n	800d32a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3b08      	subs	r3, #8
 800d270:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d272:	4b32      	ldr	r3, [pc, #200]	; (800d33c <mem_free+0x104>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	69fa      	ldr	r2, [r7, #28]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d306      	bcc.n	800d28a <mem_free+0x52>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f103 020c 	add.w	r2, r3, #12
 800d282:	4b2f      	ldr	r3, [pc, #188]	; (800d340 <mem_free+0x108>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	429a      	cmp	r2, r3
 800d288:	d90d      	bls.n	800d2a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d28a:	4b29      	ldr	r3, [pc, #164]	; (800d330 <mem_free+0xf8>)
 800d28c:	f240 227f 	movw	r2, #639	; 0x27f
 800d290:	492c      	ldr	r1, [pc, #176]	; (800d344 <mem_free+0x10c>)
 800d292:	4829      	ldr	r0, [pc, #164]	; (800d338 <mem_free+0x100>)
 800d294:	f00a ff8a 	bl	80181ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d298:	f00a fdce 	bl	8017e38 <sys_arch_protect>
 800d29c:	6138      	str	r0, [r7, #16]
 800d29e:	6938      	ldr	r0, [r7, #16]
 800d2a0:	f00a fdd8 	bl	8017e54 <sys_arch_unprotect>
    return;
 800d2a4:	e041      	b.n	800d32a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d2a6:	4828      	ldr	r0, [pc, #160]	; (800d348 <mem_free+0x110>)
 800d2a8:	f00a fd8a 	bl	8017dc0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	791b      	ldrb	r3, [r3, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d110      	bne.n	800d2d6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d2b4:	4b1e      	ldr	r3, [pc, #120]	; (800d330 <mem_free+0xf8>)
 800d2b6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d2ba:	4924      	ldr	r1, [pc, #144]	; (800d34c <mem_free+0x114>)
 800d2bc:	481e      	ldr	r0, [pc, #120]	; (800d338 <mem_free+0x100>)
 800d2be:	f00a ff75 	bl	80181ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d2c2:	4821      	ldr	r0, [pc, #132]	; (800d348 <mem_free+0x110>)
 800d2c4:	f00a fd8b 	bl	8017dde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2c8:	f00a fdb6 	bl	8017e38 <sys_arch_protect>
 800d2cc:	6178      	str	r0, [r7, #20]
 800d2ce:	6978      	ldr	r0, [r7, #20]
 800d2d0:	f00a fdc0 	bl	8017e54 <sys_arch_unprotect>
    return;
 800d2d4:	e029      	b.n	800d32a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d2d6:	69f8      	ldr	r0, [r7, #28]
 800d2d8:	f7ff ff72 	bl	800d1c0 <mem_link_valid>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d110      	bne.n	800d304 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d2e2:	4b13      	ldr	r3, [pc, #76]	; (800d330 <mem_free+0xf8>)
 800d2e4:	f240 2295 	movw	r2, #661	; 0x295
 800d2e8:	4919      	ldr	r1, [pc, #100]	; (800d350 <mem_free+0x118>)
 800d2ea:	4813      	ldr	r0, [pc, #76]	; (800d338 <mem_free+0x100>)
 800d2ec:	f00a ff5e 	bl	80181ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d2f0:	4815      	ldr	r0, [pc, #84]	; (800d348 <mem_free+0x110>)
 800d2f2:	f00a fd74 	bl	8017dde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2f6:	f00a fd9f 	bl	8017e38 <sys_arch_protect>
 800d2fa:	61b8      	str	r0, [r7, #24]
 800d2fc:	69b8      	ldr	r0, [r7, #24]
 800d2fe:	f00a fda9 	bl	8017e54 <sys_arch_unprotect>
    return;
 800d302:	e012      	b.n	800d32a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	2200      	movs	r2, #0
 800d308:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d30a:	4b12      	ldr	r3, [pc, #72]	; (800d354 <mem_free+0x11c>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	69fa      	ldr	r2, [r7, #28]
 800d310:	429a      	cmp	r2, r3
 800d312:	d202      	bcs.n	800d31a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d314:	4a0f      	ldr	r2, [pc, #60]	; (800d354 <mem_free+0x11c>)
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d31a:	69f8      	ldr	r0, [r7, #28]
 800d31c:	f7ff fe5c 	bl	800cfd8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d320:	4809      	ldr	r0, [pc, #36]	; (800d348 <mem_free+0x110>)
 800d322:	f00a fd5c 	bl	8017dde <sys_mutex_unlock>
 800d326:	e000      	b.n	800d32a <mem_free+0xf2>
    return;
 800d328:	bf00      	nop
}
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	08019be8 	.word	0x08019be8
 800d334:	08019cd8 	.word	0x08019cd8
 800d338:	08019c30 	.word	0x08019c30
 800d33c:	20004b30 	.word	0x20004b30
 800d340:	20004b34 	.word	0x20004b34
 800d344:	08019cfc 	.word	0x08019cfc
 800d348:	20004b38 	.word	0x20004b38
 800d34c:	08019d18 	.word	0x08019d18
 800d350:	08019d40 	.word	0x08019d40
 800d354:	20004b3c 	.word	0x20004b3c

0800d358 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d364:	887b      	ldrh	r3, [r7, #2]
 800d366:	3303      	adds	r3, #3
 800d368:	b29b      	uxth	r3, r3
 800d36a:	f023 0303 	bic.w	r3, r3, #3
 800d36e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d370:	8bfb      	ldrh	r3, [r7, #30]
 800d372:	2b0b      	cmp	r3, #11
 800d374:	d801      	bhi.n	800d37a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d376:	230c      	movs	r3, #12
 800d378:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d37a:	8bfb      	ldrh	r3, [r7, #30]
 800d37c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d380:	d803      	bhi.n	800d38a <mem_trim+0x32>
 800d382:	8bfa      	ldrh	r2, [r7, #30]
 800d384:	887b      	ldrh	r3, [r7, #2]
 800d386:	429a      	cmp	r2, r3
 800d388:	d201      	bcs.n	800d38e <mem_trim+0x36>
    return NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	e0d8      	b.n	800d540 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d38e:	4b6e      	ldr	r3, [pc, #440]	; (800d548 <mem_trim+0x1f0>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d304      	bcc.n	800d3a2 <mem_trim+0x4a>
 800d398:	4b6c      	ldr	r3, [pc, #432]	; (800d54c <mem_trim+0x1f4>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d306      	bcc.n	800d3b0 <mem_trim+0x58>
 800d3a2:	4b6b      	ldr	r3, [pc, #428]	; (800d550 <mem_trim+0x1f8>)
 800d3a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d3a8:	496a      	ldr	r1, [pc, #424]	; (800d554 <mem_trim+0x1fc>)
 800d3aa:	486b      	ldr	r0, [pc, #428]	; (800d558 <mem_trim+0x200>)
 800d3ac:	f00a fefe 	bl	80181ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d3b0:	4b65      	ldr	r3, [pc, #404]	; (800d548 <mem_trim+0x1f0>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d304      	bcc.n	800d3c4 <mem_trim+0x6c>
 800d3ba:	4b64      	ldr	r3, [pc, #400]	; (800d54c <mem_trim+0x1f4>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d307      	bcc.n	800d3d4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3c4:	f00a fd38 	bl	8017e38 <sys_arch_protect>
 800d3c8:	60b8      	str	r0, [r7, #8]
 800d3ca:	68b8      	ldr	r0, [r7, #8]
 800d3cc:	f00a fd42 	bl	8017e54 <sys_arch_unprotect>
    return rmem;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	e0b5      	b.n	800d540 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3b08      	subs	r3, #8
 800d3d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d3da:	69b8      	ldr	r0, [r7, #24]
 800d3dc:	f7ff fdea 	bl	800cfb4 <mem_to_ptr>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	881a      	ldrh	r2, [r3, #0]
 800d3e8:	8afb      	ldrh	r3, [r7, #22]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	3b08      	subs	r3, #8
 800d3f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d3f2:	8bfa      	ldrh	r2, [r7, #30]
 800d3f4:	8abb      	ldrh	r3, [r7, #20]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d906      	bls.n	800d408 <mem_trim+0xb0>
 800d3fa:	4b55      	ldr	r3, [pc, #340]	; (800d550 <mem_trim+0x1f8>)
 800d3fc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d400:	4956      	ldr	r1, [pc, #344]	; (800d55c <mem_trim+0x204>)
 800d402:	4855      	ldr	r0, [pc, #340]	; (800d558 <mem_trim+0x200>)
 800d404:	f00a fed2 	bl	80181ac <iprintf>
  if (newsize > size) {
 800d408:	8bfa      	ldrh	r2, [r7, #30]
 800d40a:	8abb      	ldrh	r3, [r7, #20]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d901      	bls.n	800d414 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d410:	2300      	movs	r3, #0
 800d412:	e095      	b.n	800d540 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d414:	8bfa      	ldrh	r2, [r7, #30]
 800d416:	8abb      	ldrh	r3, [r7, #20]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d101      	bne.n	800d420 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	e08f      	b.n	800d540 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d420:	484f      	ldr	r0, [pc, #316]	; (800d560 <mem_trim+0x208>)
 800d422:	f00a fccd 	bl	8017dc0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7ff fdb0 	bl	800cf90 <ptr_to_mem>
 800d430:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	791b      	ldrb	r3, [r3, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d13f      	bne.n	800d4ba <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d442:	d106      	bne.n	800d452 <mem_trim+0xfa>
 800d444:	4b42      	ldr	r3, [pc, #264]	; (800d550 <mem_trim+0x1f8>)
 800d446:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d44a:	4946      	ldr	r1, [pc, #280]	; (800d564 <mem_trim+0x20c>)
 800d44c:	4842      	ldr	r0, [pc, #264]	; (800d558 <mem_trim+0x200>)
 800d44e:	f00a fead 	bl	80181ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d458:	8afa      	ldrh	r2, [r7, #22]
 800d45a:	8bfb      	ldrh	r3, [r7, #30]
 800d45c:	4413      	add	r3, r2
 800d45e:	b29b      	uxth	r3, r3
 800d460:	3308      	adds	r3, #8
 800d462:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d464:	4b40      	ldr	r3, [pc, #256]	; (800d568 <mem_trim+0x210>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d106      	bne.n	800d47c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d46e:	89fb      	ldrh	r3, [r7, #14]
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fd8d 	bl	800cf90 <ptr_to_mem>
 800d476:	4603      	mov	r3, r0
 800d478:	4a3b      	ldr	r2, [pc, #236]	; (800d568 <mem_trim+0x210>)
 800d47a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d47c:	89fb      	ldrh	r3, [r7, #14]
 800d47e:	4618      	mov	r0, r3
 800d480:	f7ff fd86 	bl	800cf90 <ptr_to_mem>
 800d484:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2200      	movs	r2, #0
 800d48a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	89ba      	ldrh	r2, [r7, #12]
 800d490:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	8afa      	ldrh	r2, [r7, #22]
 800d496:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	89fa      	ldrh	r2, [r7, #14]
 800d49c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d4a6:	d047      	beq.n	800d538 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7ff fd6f 	bl	800cf90 <ptr_to_mem>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	89fb      	ldrh	r3, [r7, #14]
 800d4b6:	8053      	strh	r3, [r2, #2]
 800d4b8:	e03e      	b.n	800d538 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d4ba:	8bfb      	ldrh	r3, [r7, #30]
 800d4bc:	f103 0214 	add.w	r2, r3, #20
 800d4c0:	8abb      	ldrh	r3, [r7, #20]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d838      	bhi.n	800d538 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d4c6:	8afa      	ldrh	r2, [r7, #22]
 800d4c8:	8bfb      	ldrh	r3, [r7, #30]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d4da:	d106      	bne.n	800d4ea <mem_trim+0x192>
 800d4dc:	4b1c      	ldr	r3, [pc, #112]	; (800d550 <mem_trim+0x1f8>)
 800d4de:	f240 3216 	movw	r2, #790	; 0x316
 800d4e2:	4920      	ldr	r1, [pc, #128]	; (800d564 <mem_trim+0x20c>)
 800d4e4:	481c      	ldr	r0, [pc, #112]	; (800d558 <mem_trim+0x200>)
 800d4e6:	f00a fe61 	bl	80181ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d4ea:	89fb      	ldrh	r3, [r7, #14]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff fd4f 	bl	800cf90 <ptr_to_mem>
 800d4f2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d4f4:	4b1c      	ldr	r3, [pc, #112]	; (800d568 <mem_trim+0x210>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	693a      	ldr	r2, [r7, #16]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d202      	bcs.n	800d504 <mem_trim+0x1ac>
      lfree = mem2;
 800d4fe:	4a1a      	ldr	r2, [pc, #104]	; (800d568 <mem_trim+0x210>)
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2200      	movs	r2, #0
 800d508:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	881a      	ldrh	r2, [r3, #0]
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	8afa      	ldrh	r2, [r7, #22]
 800d516:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	89fa      	ldrh	r2, [r7, #14]
 800d51c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d526:	d007      	beq.n	800d538 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	881b      	ldrh	r3, [r3, #0]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff fd2f 	bl	800cf90 <ptr_to_mem>
 800d532:	4602      	mov	r2, r0
 800d534:	89fb      	ldrh	r3, [r7, #14]
 800d536:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d538:	4809      	ldr	r0, [pc, #36]	; (800d560 <mem_trim+0x208>)
 800d53a:	f00a fc50 	bl	8017dde <sys_mutex_unlock>
  return rmem;
 800d53e:	687b      	ldr	r3, [r7, #4]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3720      	adds	r7, #32
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20004b30 	.word	0x20004b30
 800d54c:	20004b34 	.word	0x20004b34
 800d550:	08019be8 	.word	0x08019be8
 800d554:	08019d74 	.word	0x08019d74
 800d558:	08019c30 	.word	0x08019c30
 800d55c:	08019d8c 	.word	0x08019d8c
 800d560:	20004b38 	.word	0x20004b38
 800d564:	08019dac 	.word	0x08019dac
 800d568:	20004b3c 	.word	0x20004b3c

0800d56c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d576:	88fb      	ldrh	r3, [r7, #6]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d101      	bne.n	800d580 <mem_malloc+0x14>
    return NULL;
 800d57c:	2300      	movs	r3, #0
 800d57e:	e0e2      	b.n	800d746 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d580:	88fb      	ldrh	r3, [r7, #6]
 800d582:	3303      	adds	r3, #3
 800d584:	b29b      	uxth	r3, r3
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d58c:	8bbb      	ldrh	r3, [r7, #28]
 800d58e:	2b0b      	cmp	r3, #11
 800d590:	d801      	bhi.n	800d596 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d592:	230c      	movs	r3, #12
 800d594:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d596:	8bbb      	ldrh	r3, [r7, #28]
 800d598:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d59c:	d803      	bhi.n	800d5a6 <mem_malloc+0x3a>
 800d59e:	8bba      	ldrh	r2, [r7, #28]
 800d5a0:	88fb      	ldrh	r3, [r7, #6]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d201      	bcs.n	800d5aa <mem_malloc+0x3e>
    return NULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e0cd      	b.n	800d746 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d5aa:	4869      	ldr	r0, [pc, #420]	; (800d750 <mem_malloc+0x1e4>)
 800d5ac:	f00a fc08 	bl	8017dc0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d5b0:	4b68      	ldr	r3, [pc, #416]	; (800d754 <mem_malloc+0x1e8>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7ff fcfd 	bl	800cfb4 <mem_to_ptr>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	83fb      	strh	r3, [r7, #30]
 800d5be:	e0b7      	b.n	800d730 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d5c0:	8bfb      	ldrh	r3, [r7, #30]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff fce4 	bl	800cf90 <ptr_to_mem>
 800d5c8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f040 80a7 	bne.w	800d722 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	8bfb      	ldrh	r3, [r7, #30]
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	f1a3 0208 	sub.w	r2, r3, #8
 800d5e2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	f0c0 809c 	bcc.w	800d722 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	8bfb      	ldrh	r3, [r7, #30]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	f1a3 0208 	sub.w	r2, r3, #8
 800d5f8:	8bbb      	ldrh	r3, [r7, #28]
 800d5fa:	3314      	adds	r3, #20
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d333      	bcc.n	800d668 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d600:	8bfa      	ldrh	r2, [r7, #30]
 800d602:	8bbb      	ldrh	r3, [r7, #28]
 800d604:	4413      	add	r3, r2
 800d606:	b29b      	uxth	r3, r3
 800d608:	3308      	adds	r3, #8
 800d60a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d60c:	8a7b      	ldrh	r3, [r7, #18]
 800d60e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d612:	d106      	bne.n	800d622 <mem_malloc+0xb6>
 800d614:	4b50      	ldr	r3, [pc, #320]	; (800d758 <mem_malloc+0x1ec>)
 800d616:	f240 3287 	movw	r2, #903	; 0x387
 800d61a:	4950      	ldr	r1, [pc, #320]	; (800d75c <mem_malloc+0x1f0>)
 800d61c:	4850      	ldr	r0, [pc, #320]	; (800d760 <mem_malloc+0x1f4>)
 800d61e:	f00a fdc5 	bl	80181ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d622:	8a7b      	ldrh	r3, [r7, #18]
 800d624:	4618      	mov	r0, r3
 800d626:	f7ff fcb3 	bl	800cf90 <ptr_to_mem>
 800d62a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	881a      	ldrh	r2, [r3, #0]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	8bfa      	ldrh	r2, [r7, #30]
 800d63e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	8a7a      	ldrh	r2, [r7, #18]
 800d644:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2201      	movs	r2, #1
 800d64a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d654:	d00b      	beq.n	800d66e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fc98 	bl	800cf90 <ptr_to_mem>
 800d660:	4602      	mov	r2, r0
 800d662:	8a7b      	ldrh	r3, [r7, #18]
 800d664:	8053      	strh	r3, [r2, #2]
 800d666:	e002      	b.n	800d66e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	2201      	movs	r2, #1
 800d66c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d66e:	4b39      	ldr	r3, [pc, #228]	; (800d754 <mem_malloc+0x1e8>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	697a      	ldr	r2, [r7, #20]
 800d674:	429a      	cmp	r2, r3
 800d676:	d127      	bne.n	800d6c8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d678:	4b36      	ldr	r3, [pc, #216]	; (800d754 <mem_malloc+0x1e8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d67e:	e005      	b.n	800d68c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	4618      	mov	r0, r3
 800d686:	f7ff fc83 	bl	800cf90 <ptr_to_mem>
 800d68a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	791b      	ldrb	r3, [r3, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d004      	beq.n	800d69e <mem_malloc+0x132>
 800d694:	4b33      	ldr	r3, [pc, #204]	; (800d764 <mem_malloc+0x1f8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	69ba      	ldr	r2, [r7, #24]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d1f0      	bne.n	800d680 <mem_malloc+0x114>
          }
          lfree = cur;
 800d69e:	4a2d      	ldr	r2, [pc, #180]	; (800d754 <mem_malloc+0x1e8>)
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d6a4:	4b2b      	ldr	r3, [pc, #172]	; (800d754 <mem_malloc+0x1e8>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	4b2e      	ldr	r3, [pc, #184]	; (800d764 <mem_malloc+0x1f8>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d00b      	beq.n	800d6c8 <mem_malloc+0x15c>
 800d6b0:	4b28      	ldr	r3, [pc, #160]	; (800d754 <mem_malloc+0x1e8>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	791b      	ldrb	r3, [r3, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d006      	beq.n	800d6c8 <mem_malloc+0x15c>
 800d6ba:	4b27      	ldr	r3, [pc, #156]	; (800d758 <mem_malloc+0x1ec>)
 800d6bc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d6c0:	4929      	ldr	r1, [pc, #164]	; (800d768 <mem_malloc+0x1fc>)
 800d6c2:	4827      	ldr	r0, [pc, #156]	; (800d760 <mem_malloc+0x1f4>)
 800d6c4:	f00a fd72 	bl	80181ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d6c8:	4821      	ldr	r0, [pc, #132]	; (800d750 <mem_malloc+0x1e4>)
 800d6ca:	f00a fb88 	bl	8017dde <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d6ce:	8bba      	ldrh	r2, [r7, #28]
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	4a23      	ldr	r2, [pc, #140]	; (800d764 <mem_malloc+0x1f8>)
 800d6d8:	6812      	ldr	r2, [r2, #0]
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d906      	bls.n	800d6ec <mem_malloc+0x180>
 800d6de:	4b1e      	ldr	r3, [pc, #120]	; (800d758 <mem_malloc+0x1ec>)
 800d6e0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d6e4:	4921      	ldr	r1, [pc, #132]	; (800d76c <mem_malloc+0x200>)
 800d6e6:	481e      	ldr	r0, [pc, #120]	; (800d760 <mem_malloc+0x1f4>)
 800d6e8:	f00a fd60 	bl	80181ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d006      	beq.n	800d704 <mem_malloc+0x198>
 800d6f6:	4b18      	ldr	r3, [pc, #96]	; (800d758 <mem_malloc+0x1ec>)
 800d6f8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d6fc:	491c      	ldr	r1, [pc, #112]	; (800d770 <mem_malloc+0x204>)
 800d6fe:	4818      	ldr	r0, [pc, #96]	; (800d760 <mem_malloc+0x1f4>)
 800d700:	f00a fd54 	bl	80181ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	f003 0303 	and.w	r3, r3, #3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d006      	beq.n	800d71c <mem_malloc+0x1b0>
 800d70e:	4b12      	ldr	r3, [pc, #72]	; (800d758 <mem_malloc+0x1ec>)
 800d710:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d714:	4917      	ldr	r1, [pc, #92]	; (800d774 <mem_malloc+0x208>)
 800d716:	4812      	ldr	r0, [pc, #72]	; (800d760 <mem_malloc+0x1f4>)
 800d718:	f00a fd48 	bl	80181ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	3308      	adds	r3, #8
 800d720:	e011      	b.n	800d746 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d722:	8bfb      	ldrh	r3, [r7, #30]
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff fc33 	bl	800cf90 <ptr_to_mem>
 800d72a:	4603      	mov	r3, r0
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d730:	8bfa      	ldrh	r2, [r7, #30]
 800d732:	8bbb      	ldrh	r3, [r7, #28]
 800d734:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800d738:	429a      	cmp	r2, r3
 800d73a:	f4ff af41 	bcc.w	800d5c0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d73e:	4804      	ldr	r0, [pc, #16]	; (800d750 <mem_malloc+0x1e4>)
 800d740:	f00a fb4d 	bl	8017dde <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3720      	adds	r7, #32
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	20004b38 	.word	0x20004b38
 800d754:	20004b3c 	.word	0x20004b3c
 800d758:	08019be8 	.word	0x08019be8
 800d75c:	08019dac 	.word	0x08019dac
 800d760:	08019c30 	.word	0x08019c30
 800d764:	20004b34 	.word	0x20004b34
 800d768:	08019dc0 	.word	0x08019dc0
 800d76c:	08019ddc 	.word	0x08019ddc
 800d770:	08019e0c 	.word	0x08019e0c
 800d774:	08019e3c 	.word	0x08019e3c

0800d778 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	2200      	movs	r2, #0
 800d786:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	3303      	adds	r3, #3
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d794:	2300      	movs	r3, #0
 800d796:	60fb      	str	r3, [r7, #12]
 800d798:	e011      	b.n	800d7be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	881b      	ldrh	r3, [r3, #0]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	60fb      	str	r3, [r7, #12]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	885b      	ldrh	r3, [r3, #2]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	dbe7      	blt.n	800d79a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d7ca:	bf00      	nop
 800d7cc:	bf00      	nop
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7de:	2300      	movs	r3, #0
 800d7e0:	80fb      	strh	r3, [r7, #6]
 800d7e2:	e009      	b.n	800d7f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d7e4:	88fb      	ldrh	r3, [r7, #6]
 800d7e6:	4a08      	ldr	r2, [pc, #32]	; (800d808 <memp_init+0x30>)
 800d7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7ff ffc3 	bl	800d778 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7f2:	88fb      	ldrh	r3, [r7, #6]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	80fb      	strh	r3, [r7, #6]
 800d7f8:	88fb      	ldrh	r3, [r7, #6]
 800d7fa:	2b0c      	cmp	r3, #12
 800d7fc:	d9f2      	bls.n	800d7e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d7fe:	bf00      	nop
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	0801c66c 	.word	0x0801c66c

0800d80c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d814:	f00a fb10 	bl	8017e38 <sys_arch_protect>
 800d818:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d015      	beq.n	800d854 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	6812      	ldr	r2, [r2, #0]
 800d830:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	f003 0303 	and.w	r3, r3, #3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d006      	beq.n	800d84a <do_memp_malloc_pool+0x3e>
 800d83c:	4b09      	ldr	r3, [pc, #36]	; (800d864 <do_memp_malloc_pool+0x58>)
 800d83e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d842:	4909      	ldr	r1, [pc, #36]	; (800d868 <do_memp_malloc_pool+0x5c>)
 800d844:	4809      	ldr	r0, [pc, #36]	; (800d86c <do_memp_malloc_pool+0x60>)
 800d846:	f00a fcb1 	bl	80181ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f00a fb02 	bl	8017e54 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	e003      	b.n	800d85c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f00a fafd 	bl	8017e54 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	08019e60 	.word	0x08019e60
 800d868:	08019e90 	.word	0x08019e90
 800d86c:	08019eb4 	.word	0x08019eb4

0800d870 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d87a:	79fb      	ldrb	r3, [r7, #7]
 800d87c:	2b0c      	cmp	r3, #12
 800d87e:	d908      	bls.n	800d892 <memp_malloc+0x22>
 800d880:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <memp_malloc+0x3c>)
 800d882:	f240 1257 	movw	r2, #343	; 0x157
 800d886:	490a      	ldr	r1, [pc, #40]	; (800d8b0 <memp_malloc+0x40>)
 800d888:	480a      	ldr	r0, [pc, #40]	; (800d8b4 <memp_malloc+0x44>)
 800d88a:	f00a fc8f 	bl	80181ac <iprintf>
 800d88e:	2300      	movs	r3, #0
 800d890:	e008      	b.n	800d8a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d892:	79fb      	ldrb	r3, [r7, #7]
 800d894:	4a08      	ldr	r2, [pc, #32]	; (800d8b8 <memp_malloc+0x48>)
 800d896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff ffb6 	bl	800d80c <do_memp_malloc_pool>
 800d8a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	08019e60 	.word	0x08019e60
 800d8b0:	08019ef0 	.word	0x08019ef0
 800d8b4:	08019eb4 	.word	0x08019eb4
 800d8b8:	0801c66c 	.word	0x0801c66c

0800d8bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	f003 0303 	and.w	r3, r3, #3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d006      	beq.n	800d8de <do_memp_free_pool+0x22>
 800d8d0:	4b0d      	ldr	r3, [pc, #52]	; (800d908 <do_memp_free_pool+0x4c>)
 800d8d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d8d6:	490d      	ldr	r1, [pc, #52]	; (800d90c <do_memp_free_pool+0x50>)
 800d8d8:	480d      	ldr	r0, [pc, #52]	; (800d910 <do_memp_free_pool+0x54>)
 800d8da:	f00a fc67 	bl	80181ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d8e2:	f00a faa9 	bl	8017e38 <sys_arch_protect>
 800d8e6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d8fa:	68b8      	ldr	r0, [r7, #8]
 800d8fc:	f00a faaa 	bl	8017e54 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d900:	bf00      	nop
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	08019e60 	.word	0x08019e60
 800d90c:	08019f10 	.word	0x08019f10
 800d910:	08019eb4 	.word	0x08019eb4

0800d914 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	4603      	mov	r3, r0
 800d91c:	6039      	str	r1, [r7, #0]
 800d91e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d920:	79fb      	ldrb	r3, [r7, #7]
 800d922:	2b0c      	cmp	r3, #12
 800d924:	d907      	bls.n	800d936 <memp_free+0x22>
 800d926:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <memp_free+0x44>)
 800d928:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d92c:	490b      	ldr	r1, [pc, #44]	; (800d95c <memp_free+0x48>)
 800d92e:	480c      	ldr	r0, [pc, #48]	; (800d960 <memp_free+0x4c>)
 800d930:	f00a fc3c 	bl	80181ac <iprintf>
 800d934:	e00c      	b.n	800d950 <memp_free+0x3c>

  if (mem == NULL) {
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d008      	beq.n	800d94e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d93c:	79fb      	ldrb	r3, [r7, #7]
 800d93e:	4a09      	ldr	r2, [pc, #36]	; (800d964 <memp_free+0x50>)
 800d940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff ffb8 	bl	800d8bc <do_memp_free_pool>
 800d94c:	e000      	b.n	800d950 <memp_free+0x3c>
    return;
 800d94e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	08019e60 	.word	0x08019e60
 800d95c:	08019f30 	.word	0x08019f30
 800d960:	08019eb4 	.word	0x08019eb4
 800d964:	0801c66c 	.word	0x0801c66c

0800d968 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d968:	b480      	push	{r7}
 800d96a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d96c:	bf00      	nop
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
	...

0800d978 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d108      	bne.n	800d99e <netif_add+0x26>
 800d98c:	4b57      	ldr	r3, [pc, #348]	; (800daec <netif_add+0x174>)
 800d98e:	f240 1227 	movw	r2, #295	; 0x127
 800d992:	4957      	ldr	r1, [pc, #348]	; (800daf0 <netif_add+0x178>)
 800d994:	4857      	ldr	r0, [pc, #348]	; (800daf4 <netif_add+0x17c>)
 800d996:	f00a fc09 	bl	80181ac <iprintf>
 800d99a:	2300      	movs	r3, #0
 800d99c:	e0a2      	b.n	800dae4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d108      	bne.n	800d9b6 <netif_add+0x3e>
 800d9a4:	4b51      	ldr	r3, [pc, #324]	; (800daec <netif_add+0x174>)
 800d9a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d9aa:	4953      	ldr	r1, [pc, #332]	; (800daf8 <netif_add+0x180>)
 800d9ac:	4851      	ldr	r0, [pc, #324]	; (800daf4 <netif_add+0x17c>)
 800d9ae:	f00a fbfd 	bl	80181ac <iprintf>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	e096      	b.n	800dae4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d9bc:	4b4f      	ldr	r3, [pc, #316]	; (800dafc <netif_add+0x184>)
 800d9be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d9c6:	4b4d      	ldr	r3, [pc, #308]	; (800dafc <netif_add+0x184>)
 800d9c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d101      	bne.n	800d9d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d9d0:	4b4a      	ldr	r3, [pc, #296]	; (800dafc <netif_add+0x184>)
 800d9d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	4a45      	ldr	r2, [pc, #276]	; (800db00 <netif_add+0x188>)
 800d9ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	6a3a      	ldr	r2, [r7, #32]
 800da04:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800da06:	4b3f      	ldr	r3, [pc, #252]	; (800db04 <netif_add+0x18c>)
 800da08:	781a      	ldrb	r2, [r3, #0]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da14:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 f913 	bl	800dc48 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	4798      	blx	r3
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <netif_add+0xba>
    return NULL;
 800da2e:	2300      	movs	r3, #0
 800da30:	e058      	b.n	800dae4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da38:	2bff      	cmp	r3, #255	; 0xff
 800da3a:	d103      	bne.n	800da44 <netif_add+0xcc>
        netif->num = 0;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da48:	4b2f      	ldr	r3, [pc, #188]	; (800db08 <netif_add+0x190>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	617b      	str	r3, [r7, #20]
 800da4e:	e02b      	b.n	800daa8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	429a      	cmp	r2, r3
 800da56:	d106      	bne.n	800da66 <netif_add+0xee>
 800da58:	4b24      	ldr	r3, [pc, #144]	; (800daec <netif_add+0x174>)
 800da5a:	f240 128b 	movw	r2, #395	; 0x18b
 800da5e:	492b      	ldr	r1, [pc, #172]	; (800db0c <netif_add+0x194>)
 800da60:	4824      	ldr	r0, [pc, #144]	; (800daf4 <netif_add+0x17c>)
 800da62:	f00a fba3 	bl	80181ac <iprintf>
        num_netifs++;
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	3301      	adds	r3, #1
 800da6a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2bff      	cmp	r3, #255	; 0xff
 800da70:	dd06      	ble.n	800da80 <netif_add+0x108>
 800da72:	4b1e      	ldr	r3, [pc, #120]	; (800daec <netif_add+0x174>)
 800da74:	f240 128d 	movw	r2, #397	; 0x18d
 800da78:	4925      	ldr	r1, [pc, #148]	; (800db10 <netif_add+0x198>)
 800da7a:	481e      	ldr	r0, [pc, #120]	; (800daf4 <netif_add+0x17c>)
 800da7c:	f00a fb96 	bl	80181ac <iprintf>
        if (netif2->num == netif->num) {
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d108      	bne.n	800daa2 <netif_add+0x12a>
          netif->num++;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da96:	3301      	adds	r3, #1
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800daa0:	e005      	b.n	800daae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1d0      	bne.n	800da50 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1be      	bne.n	800da32 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daba:	2bfe      	cmp	r3, #254	; 0xfe
 800dabc:	d103      	bne.n	800dac6 <netif_add+0x14e>
    netif_num = 0;
 800dabe:	4b11      	ldr	r3, [pc, #68]	; (800db04 <netif_add+0x18c>)
 800dac0:	2200      	movs	r2, #0
 800dac2:	701a      	strb	r2, [r3, #0]
 800dac4:	e006      	b.n	800dad4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dacc:	3301      	adds	r3, #1
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <netif_add+0x18c>)
 800dad2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dad4:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <netif_add+0x190>)
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dadc:	4a0a      	ldr	r2, [pc, #40]	; (800db08 <netif_add+0x190>)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dae2:	68fb      	ldr	r3, [r7, #12]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	08019f4c 	.word	0x08019f4c
 800daf0:	08019fe0 	.word	0x08019fe0
 800daf4:	08019f9c 	.word	0x08019f9c
 800daf8:	08019ffc 	.word	0x08019ffc
 800dafc:	0801c6e0 	.word	0x0801c6e0
 800db00:	0800df23 	.word	0x0800df23
 800db04:	20004b74 	.word	0x20004b74
 800db08:	2000d8cc 	.word	0x2000d8cc
 800db0c:	0801a020 	.word	0x0801a020
 800db10:	0801a034 	.word	0x0801a034

0800db14 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f002 fe4f 	bl	80107c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f007 fcfd 	bl	8015528 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800db2e:	bf00      	nop
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
	...

0800db38 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d106      	bne.n	800db58 <netif_do_set_ipaddr+0x20>
 800db4a:	4b1d      	ldr	r3, [pc, #116]	; (800dbc0 <netif_do_set_ipaddr+0x88>)
 800db4c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800db50:	491c      	ldr	r1, [pc, #112]	; (800dbc4 <netif_do_set_ipaddr+0x8c>)
 800db52:	481d      	ldr	r0, [pc, #116]	; (800dbc8 <netif_do_set_ipaddr+0x90>)
 800db54:	f00a fb2a 	bl	80181ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d106      	bne.n	800db6c <netif_do_set_ipaddr+0x34>
 800db5e:	4b18      	ldr	r3, [pc, #96]	; (800dbc0 <netif_do_set_ipaddr+0x88>)
 800db60:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800db64:	4917      	ldr	r1, [pc, #92]	; (800dbc4 <netif_do_set_ipaddr+0x8c>)
 800db66:	4818      	ldr	r0, [pc, #96]	; (800dbc8 <netif_do_set_ipaddr+0x90>)
 800db68:	f00a fb20 	bl	80181ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	3304      	adds	r3, #4
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d01c      	beq.n	800dbb4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	3304      	adds	r3, #4
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800db8a:	f107 0314 	add.w	r3, r7, #20
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff ffbf 	bl	800db14 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <netif_do_set_ipaddr+0x6a>
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	e000      	b.n	800dba4 <netif_do_set_ipaddr+0x6c>
 800dba2:	2300      	movs	r3, #0
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dba8:	2101      	movs	r1, #1
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 f8d2 	bl	800dd54 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e000      	b.n	800dbb6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	08019f4c 	.word	0x08019f4c
 800dbc4:	0801a064 	.word	0x0801a064
 800dbc8:	08019f9c 	.word	0x08019f9c

0800dbcc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3308      	adds	r3, #8
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d00a      	beq.n	800dbfc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d002      	beq.n	800dbf2 <netif_do_set_netmask+0x26>
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	e000      	b.n	800dbf4 <netif_do_set_netmask+0x28>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e000      	b.n	800dbfe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	60f8      	str	r0, [r7, #12]
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	330c      	adds	r3, #12
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d00a      	beq.n	800dc3a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <netif_do_set_gw+0x26>
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	e000      	b.n	800dc32 <netif_do_set_gw+0x28>
 800dc30:	2300      	movs	r3, #0
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dc36:	2301      	movs	r3, #1
 800dc38:	e000      	b.n	800dc3c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b088      	sub	sp, #32
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dc56:	2300      	movs	r3, #0
 800dc58:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dc64:	4b1c      	ldr	r3, [pc, #112]	; (800dcd8 <netif_set_addr+0x90>)
 800dc66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dc6e:	4b1a      	ldr	r3, [pc, #104]	; (800dcd8 <netif_set_addr+0x90>)
 800dc70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d101      	bne.n	800dc7c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dc78:	4b17      	ldr	r3, [pc, #92]	; (800dcd8 <netif_set_addr+0x90>)
 800dc7a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d003      	beq.n	800dc8a <netif_set_addr+0x42>
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <netif_set_addr+0x46>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e000      	b.n	800dc90 <netif_set_addr+0x48>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d006      	beq.n	800dca6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc98:	f107 0310 	add.w	r3, r7, #16
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	68b9      	ldr	r1, [r7, #8]
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f7ff ff49 	bl	800db38 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dca6:	69fa      	ldr	r2, [r7, #28]
 800dca8:	6879      	ldr	r1, [r7, #4]
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7ff ff8e 	bl	800dbcc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dcb0:	69ba      	ldr	r2, [r7, #24]
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff ffa8 	bl	800dc0a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d106      	bne.n	800dcce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dcc0:	f107 0310 	add.w	r3, r7, #16
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	68b9      	ldr	r1, [r7, #8]
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f7ff ff35 	bl	800db38 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dcce:	bf00      	nop
 800dcd0:	3720      	adds	r7, #32
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	0801c6e0 	.word	0x0801c6e0

0800dcdc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dce4:	4a04      	ldr	r2, [pc, #16]	; (800dcf8 <netif_set_default+0x1c>)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dcea:	bf00      	nop
 800dcec:	370c      	adds	r7, #12
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	2000d8d0 	.word	0x2000d8d0

0800dcfc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d107      	bne.n	800dd1a <netif_set_up+0x1e>
 800dd0a:	4b0f      	ldr	r3, [pc, #60]	; (800dd48 <netif_set_up+0x4c>)
 800dd0c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dd10:	490e      	ldr	r1, [pc, #56]	; (800dd4c <netif_set_up+0x50>)
 800dd12:	480f      	ldr	r0, [pc, #60]	; (800dd50 <netif_set_up+0x54>)
 800dd14:	f00a fa4a 	bl	80181ac <iprintf>
 800dd18:	e013      	b.n	800dd42 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10c      	bne.n	800dd42 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd2e:	f043 0301 	orr.w	r3, r3, #1
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dd3a:	2103      	movs	r1, #3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f809 	bl	800dd54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	08019f4c 	.word	0x08019f4c
 800dd4c:	0801a0d4 	.word	0x0801a0d4
 800dd50:	08019f9c 	.word	0x08019f9c

0800dd54 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <netif_issue_reports+0x20>
 800dd66:	4b18      	ldr	r3, [pc, #96]	; (800ddc8 <netif_issue_reports+0x74>)
 800dd68:	f240 326d 	movw	r2, #877	; 0x36d
 800dd6c:	4917      	ldr	r1, [pc, #92]	; (800ddcc <netif_issue_reports+0x78>)
 800dd6e:	4818      	ldr	r0, [pc, #96]	; (800ddd0 <netif_issue_reports+0x7c>)
 800dd70:	f00a fa1c 	bl	80181ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd7a:	f003 0304 	and.w	r3, r3, #4
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d01e      	beq.n	800ddc0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd88:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d017      	beq.n	800ddc0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd90:	78fb      	ldrb	r3, [r7, #3]
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d013      	beq.n	800ddc2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00e      	beq.n	800ddc2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddaa:	f003 0308 	and.w	r3, r3, #8
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d007      	beq.n	800ddc2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f008 fb1f 	bl	80163fc <etharp_request>
 800ddbe:	e000      	b.n	800ddc2 <netif_issue_reports+0x6e>
    return;
 800ddc0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	08019f4c 	.word	0x08019f4c
 800ddcc:	0801a0f0 	.word	0x0801a0f0
 800ddd0:	08019f9c 	.word	0x08019f9c

0800ddd4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d107      	bne.n	800ddf2 <netif_set_down+0x1e>
 800dde2:	4b12      	ldr	r3, [pc, #72]	; (800de2c <netif_set_down+0x58>)
 800dde4:	f240 329b 	movw	r2, #923	; 0x39b
 800dde8:	4911      	ldr	r1, [pc, #68]	; (800de30 <netif_set_down+0x5c>)
 800ddea:	4812      	ldr	r0, [pc, #72]	; (800de34 <netif_set_down+0x60>)
 800ddec:	f00a f9de 	bl	80181ac <iprintf>
 800ddf0:	e019      	b.n	800de26 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddf8:	f003 0301 	and.w	r3, r3, #1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d012      	beq.n	800de26 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de06:	f023 0301 	bic.w	r3, r3, #1
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d002      	beq.n	800de26 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f007 fea9 	bl	8015b78 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	08019f4c 	.word	0x08019f4c
 800de30:	0801a114 	.word	0x0801a114
 800de34:	08019f9c 	.word	0x08019f9c

0800de38 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d107      	bne.n	800de56 <netif_set_link_up+0x1e>
 800de46:	4b13      	ldr	r3, [pc, #76]	; (800de94 <netif_set_link_up+0x5c>)
 800de48:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800de4c:	4912      	ldr	r1, [pc, #72]	; (800de98 <netif_set_link_up+0x60>)
 800de4e:	4813      	ldr	r0, [pc, #76]	; (800de9c <netif_set_link_up+0x64>)
 800de50:	f00a f9ac 	bl	80181ac <iprintf>
 800de54:	e01b      	b.n	800de8e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de5c:	f003 0304 	and.w	r3, r3, #4
 800de60:	2b00      	cmp	r3, #0
 800de62:	d114      	bne.n	800de8e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de6a:	f043 0304 	orr.w	r3, r3, #4
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800de76:	2103      	movs	r1, #3
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff ff6b 	bl	800dd54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	69db      	ldr	r3, [r3, #28]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <netif_set_link_up+0x56>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	69db      	ldr	r3, [r3, #28]
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	08019f4c 	.word	0x08019f4c
 800de98:	0801a134 	.word	0x0801a134
 800de9c:	08019f9c 	.word	0x08019f9c

0800dea0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d107      	bne.n	800debe <netif_set_link_down+0x1e>
 800deae:	4b11      	ldr	r3, [pc, #68]	; (800def4 <netif_set_link_down+0x54>)
 800deb0:	f240 4206 	movw	r2, #1030	; 0x406
 800deb4:	4910      	ldr	r1, [pc, #64]	; (800def8 <netif_set_link_down+0x58>)
 800deb6:	4811      	ldr	r0, [pc, #68]	; (800defc <netif_set_link_down+0x5c>)
 800deb8:	f00a f978 	bl	80181ac <iprintf>
 800debc:	e017      	b.n	800deee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dec4:	f003 0304 	and.w	r3, r3, #4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d010      	beq.n	800deee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ded2:	f023 0304 	bic.w	r3, r3, #4
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <netif_set_link_down+0x4e>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	69db      	ldr	r3, [r3, #28]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	08019f4c 	.word	0x08019f4c
 800def8:	0801a158 	.word	0x0801a158
 800defc:	08019f9c 	.word	0x08019f9c

0800df00 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	61da      	str	r2, [r3, #28]
  }
}
 800df16:	bf00      	nop
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800df22:	b480      	push	{r7}
 800df24:	b085      	sub	sp, #20
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	60b9      	str	r1, [r7, #8]
 800df2c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800df2e:	f06f 030b 	mvn.w	r3, #11
}
 800df32:	4618      	mov	r0, r3
 800df34:	3714      	adds	r7, #20
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
	...

0800df40 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d013      	beq.n	800df78 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800df50:	4b0d      	ldr	r3, [pc, #52]	; (800df88 <netif_get_by_index+0x48>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	60fb      	str	r3, [r7, #12]
 800df56:	e00c      	b.n	800df72 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df5e:	3301      	adds	r3, #1
 800df60:	b2db      	uxtb	r3, r3
 800df62:	79fa      	ldrb	r2, [r7, #7]
 800df64:	429a      	cmp	r2, r3
 800df66:	d101      	bne.n	800df6c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	e006      	b.n	800df7a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	60fb      	str	r3, [r7, #12]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d1ef      	bne.n	800df58 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3714      	adds	r7, #20
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	2000d8cc 	.word	0x2000d8cc

0800df8c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800df92:	f009 ff51 	bl	8017e38 <sys_arch_protect>
 800df96:	6038      	str	r0, [r7, #0]
 800df98:	4b0d      	ldr	r3, [pc, #52]	; (800dfd0 <pbuf_free_ooseq+0x44>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	701a      	strb	r2, [r3, #0]
 800df9e:	6838      	ldr	r0, [r7, #0]
 800dfa0:	f009 ff58 	bl	8017e54 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dfa4:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <pbuf_free_ooseq+0x48>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	607b      	str	r3, [r7, #4]
 800dfaa:	e00a      	b.n	800dfc2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d003      	beq.n	800dfbc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f002 fc43 	bl	8010840 <tcp_free_ooseq>
      return;
 800dfba:	e005      	b.n	800dfc8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	607b      	str	r3, [r7, #4]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1f1      	bne.n	800dfac <pbuf_free_ooseq+0x20>
    }
  }
}
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	2000d8d4 	.word	0x2000d8d4
 800dfd4:	2000d8dc 	.word	0x2000d8dc

0800dfd8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800dfe0:	f7ff ffd4 	bl	800df8c <pbuf_free_ooseq>
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800dff2:	f009 ff21 	bl	8017e38 <sys_arch_protect>
 800dff6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800dff8:	4b0f      	ldr	r3, [pc, #60]	; (800e038 <pbuf_pool_is_empty+0x4c>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800dffe:	4b0e      	ldr	r3, [pc, #56]	; (800e038 <pbuf_pool_is_empty+0x4c>)
 800e000:	2201      	movs	r2, #1
 800e002:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f009 ff25 	bl	8017e54 <sys_arch_unprotect>

  if (!queued) {
 800e00a:	78fb      	ldrb	r3, [r7, #3]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d10f      	bne.n	800e030 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e010:	2100      	movs	r1, #0
 800e012:	480a      	ldr	r0, [pc, #40]	; (800e03c <pbuf_pool_is_empty+0x50>)
 800e014:	f7fe fed6 	bl	800cdc4 <tcpip_try_callback>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d008      	beq.n	800e030 <pbuf_pool_is_empty+0x44>
 800e01e:	f009 ff0b 	bl	8017e38 <sys_arch_protect>
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	4b04      	ldr	r3, [pc, #16]	; (800e038 <pbuf_pool_is_empty+0x4c>)
 800e026:	2200      	movs	r2, #0
 800e028:	701a      	strb	r2, [r3, #0]
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f009 ff12 	bl	8017e54 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	2000d8d4 	.word	0x2000d8d4
 800e03c:	0800dfd9 	.word	0x0800dfd9

0800e040 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	4611      	mov	r1, r2
 800e04c:	461a      	mov	r2, r3
 800e04e:	460b      	mov	r3, r1
 800e050:	80fb      	strh	r3, [r7, #6]
 800e052:	4613      	mov	r3, r2
 800e054:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	88fa      	ldrh	r2, [r7, #6]
 800e066:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	88ba      	ldrh	r2, [r7, #4]
 800e06c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e06e:	8b3b      	ldrh	r3, [r7, #24]
 800e070:	b2da      	uxtb	r2, r3
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	7f3a      	ldrb	r2, [r7, #28]
 800e07a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2201      	movs	r2, #1
 800e080:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	73da      	strb	r2, [r3, #15]
}
 800e088:	bf00      	nop
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b08c      	sub	sp, #48	; 0x30
 800e098:	af02      	add	r7, sp, #8
 800e09a:	4603      	mov	r3, r0
 800e09c:	71fb      	strb	r3, [r7, #7]
 800e09e:	460b      	mov	r3, r1
 800e0a0:	80bb      	strh	r3, [r7, #4]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e0a6:	79fb      	ldrb	r3, [r7, #7]
 800e0a8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e0aa:	887b      	ldrh	r3, [r7, #2]
 800e0ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e0b0:	d07f      	beq.n	800e1b2 <pbuf_alloc+0x11e>
 800e0b2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e0b6:	f300 80c8 	bgt.w	800e24a <pbuf_alloc+0x1b6>
 800e0ba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e0be:	d010      	beq.n	800e0e2 <pbuf_alloc+0x4e>
 800e0c0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e0c4:	f300 80c1 	bgt.w	800e24a <pbuf_alloc+0x1b6>
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d002      	beq.n	800e0d2 <pbuf_alloc+0x3e>
 800e0cc:	2b41      	cmp	r3, #65	; 0x41
 800e0ce:	f040 80bc 	bne.w	800e24a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e0d2:	887a      	ldrh	r2, [r7, #2]
 800e0d4:	88bb      	ldrh	r3, [r7, #4]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	2000      	movs	r0, #0
 800e0da:	f000 f8d1 	bl	800e280 <pbuf_alloc_reference>
 800e0de:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e0e0:	e0bd      	b.n	800e25e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e0ea:	88bb      	ldrh	r3, [r7, #4]
 800e0ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e0ee:	200c      	movs	r0, #12
 800e0f0:	f7ff fbbe 	bl	800d870 <memp_malloc>
 800e0f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d109      	bne.n	800e110 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e0fc:	f7ff ff76 	bl	800dfec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	2b00      	cmp	r3, #0
 800e104:	d002      	beq.n	800e10c <pbuf_alloc+0x78>
            pbuf_free(p);
 800e106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e108:	f000 faa8 	bl	800e65c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e10c:	2300      	movs	r3, #0
 800e10e:	e0a7      	b.n	800e260 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e112:	3303      	adds	r3, #3
 800e114:	b29b      	uxth	r3, r3
 800e116:	f023 0303 	bic.w	r3, r3, #3
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e120:	b29b      	uxth	r3, r3
 800e122:	8b7a      	ldrh	r2, [r7, #26]
 800e124:	4293      	cmp	r3, r2
 800e126:	bf28      	it	cs
 800e128:	4613      	movcs	r3, r2
 800e12a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e12c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e12e:	3310      	adds	r3, #16
 800e130:	693a      	ldr	r2, [r7, #16]
 800e132:	4413      	add	r3, r2
 800e134:	3303      	adds	r3, #3
 800e136:	f023 0303 	bic.w	r3, r3, #3
 800e13a:	4618      	mov	r0, r3
 800e13c:	89f9      	ldrh	r1, [r7, #14]
 800e13e:	8b7a      	ldrh	r2, [r7, #26]
 800e140:	2300      	movs	r3, #0
 800e142:	9301      	str	r3, [sp, #4]
 800e144:	887b      	ldrh	r3, [r7, #2]
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	460b      	mov	r3, r1
 800e14a:	4601      	mov	r1, r0
 800e14c:	6938      	ldr	r0, [r7, #16]
 800e14e:	f7ff ff77 	bl	800e040 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d006      	beq.n	800e16c <pbuf_alloc+0xd8>
 800e15e:	4b42      	ldr	r3, [pc, #264]	; (800e268 <pbuf_alloc+0x1d4>)
 800e160:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e164:	4941      	ldr	r1, [pc, #260]	; (800e26c <pbuf_alloc+0x1d8>)
 800e166:	4842      	ldr	r0, [pc, #264]	; (800e270 <pbuf_alloc+0x1dc>)
 800e168:	f00a f820 	bl	80181ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e16c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e16e:	3303      	adds	r3, #3
 800e170:	f023 0303 	bic.w	r3, r3, #3
 800e174:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e178:	d106      	bne.n	800e188 <pbuf_alloc+0xf4>
 800e17a:	4b3b      	ldr	r3, [pc, #236]	; (800e268 <pbuf_alloc+0x1d4>)
 800e17c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e180:	493c      	ldr	r1, [pc, #240]	; (800e274 <pbuf_alloc+0x1e0>)
 800e182:	483b      	ldr	r0, [pc, #236]	; (800e270 <pbuf_alloc+0x1dc>)
 800e184:	f00a f812 	bl	80181ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d102      	bne.n	800e194 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	627b      	str	r3, [r7, #36]	; 0x24
 800e192:	e002      	b.n	800e19a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e19e:	8b7a      	ldrh	r2, [r7, #26]
 800e1a0:	89fb      	ldrh	r3, [r7, #14]
 800e1a2:	1ad3      	subs	r3, r2, r3
 800e1a4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e1aa:	8b7b      	ldrh	r3, [r7, #26]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d19e      	bne.n	800e0ee <pbuf_alloc+0x5a>
      break;
 800e1b0:	e055      	b.n	800e25e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e1b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1b4:	3303      	adds	r3, #3
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	f023 0303 	bic.w	r3, r3, #3
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	88bb      	ldrh	r3, [r7, #4]
 800e1c0:	3303      	adds	r3, #3
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	f023 0303 	bic.w	r3, r3, #3
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	4413      	add	r3, r2
 800e1cc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e1ce:	8b3b      	ldrh	r3, [r7, #24]
 800e1d0:	3310      	adds	r3, #16
 800e1d2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e1d4:	8b3a      	ldrh	r2, [r7, #24]
 800e1d6:	88bb      	ldrh	r3, [r7, #4]
 800e1d8:	3303      	adds	r3, #3
 800e1da:	f023 0303 	bic.w	r3, r3, #3
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d306      	bcc.n	800e1f0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e1e2:	8afa      	ldrh	r2, [r7, #22]
 800e1e4:	88bb      	ldrh	r3, [r7, #4]
 800e1e6:	3303      	adds	r3, #3
 800e1e8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d201      	bcs.n	800e1f4 <pbuf_alloc+0x160>
        return NULL;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	e035      	b.n	800e260 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e1f4:	8afb      	ldrh	r3, [r7, #22]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7ff f9b8 	bl	800d56c <mem_malloc>
 800e1fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <pbuf_alloc+0x174>
        return NULL;
 800e204:	2300      	movs	r3, #0
 800e206:	e02b      	b.n	800e260 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e20a:	3310      	adds	r3, #16
 800e20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e20e:	4413      	add	r3, r2
 800e210:	3303      	adds	r3, #3
 800e212:	f023 0303 	bic.w	r3, r3, #3
 800e216:	4618      	mov	r0, r3
 800e218:	88b9      	ldrh	r1, [r7, #4]
 800e21a:	88ba      	ldrh	r2, [r7, #4]
 800e21c:	2300      	movs	r3, #0
 800e21e:	9301      	str	r3, [sp, #4]
 800e220:	887b      	ldrh	r3, [r7, #2]
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	460b      	mov	r3, r1
 800e226:	4601      	mov	r1, r0
 800e228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e22a:	f7ff ff09 	bl	800e040 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	f003 0303 	and.w	r3, r3, #3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d010      	beq.n	800e25c <pbuf_alloc+0x1c8>
 800e23a:	4b0b      	ldr	r3, [pc, #44]	; (800e268 <pbuf_alloc+0x1d4>)
 800e23c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e240:	490d      	ldr	r1, [pc, #52]	; (800e278 <pbuf_alloc+0x1e4>)
 800e242:	480b      	ldr	r0, [pc, #44]	; (800e270 <pbuf_alloc+0x1dc>)
 800e244:	f009 ffb2 	bl	80181ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e248:	e008      	b.n	800e25c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e24a:	4b07      	ldr	r3, [pc, #28]	; (800e268 <pbuf_alloc+0x1d4>)
 800e24c:	f240 1227 	movw	r2, #295	; 0x127
 800e250:	490a      	ldr	r1, [pc, #40]	; (800e27c <pbuf_alloc+0x1e8>)
 800e252:	4807      	ldr	r0, [pc, #28]	; (800e270 <pbuf_alloc+0x1dc>)
 800e254:	f009 ffaa 	bl	80181ac <iprintf>
      return NULL;
 800e258:	2300      	movs	r3, #0
 800e25a:	e001      	b.n	800e260 <pbuf_alloc+0x1cc>
      break;
 800e25c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e260:	4618      	mov	r0, r3
 800e262:	3728      	adds	r7, #40	; 0x28
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	0801a17c 	.word	0x0801a17c
 800e26c:	0801a1ac 	.word	0x0801a1ac
 800e270:	0801a1dc 	.word	0x0801a1dc
 800e274:	0801a204 	.word	0x0801a204
 800e278:	0801a238 	.word	0x0801a238
 800e27c:	0801a264 	.word	0x0801a264

0800e280 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af02      	add	r7, sp, #8
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	807b      	strh	r3, [r7, #2]
 800e28c:	4613      	mov	r3, r2
 800e28e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e290:	883b      	ldrh	r3, [r7, #0]
 800e292:	2b41      	cmp	r3, #65	; 0x41
 800e294:	d009      	beq.n	800e2aa <pbuf_alloc_reference+0x2a>
 800e296:	883b      	ldrh	r3, [r7, #0]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d006      	beq.n	800e2aa <pbuf_alloc_reference+0x2a>
 800e29c:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <pbuf_alloc_reference+0x5c>)
 800e29e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e2a2:	490f      	ldr	r1, [pc, #60]	; (800e2e0 <pbuf_alloc_reference+0x60>)
 800e2a4:	480f      	ldr	r0, [pc, #60]	; (800e2e4 <pbuf_alloc_reference+0x64>)
 800e2a6:	f009 ff81 	bl	80181ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e2aa:	200b      	movs	r0, #11
 800e2ac:	f7ff fae0 	bl	800d870 <memp_malloc>
 800e2b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d101      	bne.n	800e2bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e00b      	b.n	800e2d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e2bc:	8879      	ldrh	r1, [r7, #2]
 800e2be:	887a      	ldrh	r2, [r7, #2]
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	9301      	str	r3, [sp, #4]
 800e2c4:	883b      	ldrh	r3, [r7, #0]
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	6879      	ldr	r1, [r7, #4]
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f7ff feb7 	bl	800e040 <pbuf_init_alloced_pbuf>
  return p;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	0801a17c 	.word	0x0801a17c
 800e2e0:	0801a280 	.word	0x0801a280
 800e2e4:	0801a1dc 	.word	0x0801a1dc

0800e2e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b088      	sub	sp, #32
 800e2ec:	af02      	add	r7, sp, #8
 800e2ee:	607b      	str	r3, [r7, #4]
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	73fb      	strb	r3, [r7, #15]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	81bb      	strh	r3, [r7, #12]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e2fc:	7bfb      	ldrb	r3, [r7, #15]
 800e2fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e300:	8a7b      	ldrh	r3, [r7, #18]
 800e302:	3303      	adds	r3, #3
 800e304:	f023 0203 	bic.w	r2, r3, #3
 800e308:	89bb      	ldrh	r3, [r7, #12]
 800e30a:	441a      	add	r2, r3
 800e30c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e30e:	429a      	cmp	r2, r3
 800e310:	d901      	bls.n	800e316 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	e018      	b.n	800e348 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d007      	beq.n	800e32c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e31c:	8a7b      	ldrh	r3, [r7, #18]
 800e31e:	3303      	adds	r3, #3
 800e320:	f023 0303 	bic.w	r3, r3, #3
 800e324:	6a3a      	ldr	r2, [r7, #32]
 800e326:	4413      	add	r3, r2
 800e328:	617b      	str	r3, [r7, #20]
 800e32a:	e001      	b.n	800e330 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e32c:	2300      	movs	r3, #0
 800e32e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	89b9      	ldrh	r1, [r7, #12]
 800e334:	89ba      	ldrh	r2, [r7, #12]
 800e336:	2302      	movs	r3, #2
 800e338:	9301      	str	r3, [sp, #4]
 800e33a:	897b      	ldrh	r3, [r7, #10]
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	460b      	mov	r3, r1
 800e340:	6979      	ldr	r1, [r7, #20]
 800e342:	f7ff fe7d 	bl	800e040 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e346:	687b      	ldr	r3, [r7, #4]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	460b      	mov	r3, r1
 800e35a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d106      	bne.n	800e370 <pbuf_realloc+0x20>
 800e362:	4b3a      	ldr	r3, [pc, #232]	; (800e44c <pbuf_realloc+0xfc>)
 800e364:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e368:	4939      	ldr	r1, [pc, #228]	; (800e450 <pbuf_realloc+0x100>)
 800e36a:	483a      	ldr	r0, [pc, #232]	; (800e454 <pbuf_realloc+0x104>)
 800e36c:	f009 ff1e 	bl	80181ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	891b      	ldrh	r3, [r3, #8]
 800e374:	887a      	ldrh	r2, [r7, #2]
 800e376:	429a      	cmp	r2, r3
 800e378:	d263      	bcs.n	800e442 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	891a      	ldrh	r2, [r3, #8]
 800e37e:	887b      	ldrh	r3, [r7, #2]
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e384:	887b      	ldrh	r3, [r7, #2]
 800e386:	817b      	strh	r3, [r7, #10]
  q = p;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e38c:	e018      	b.n	800e3c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	895b      	ldrh	r3, [r3, #10]
 800e392:	897a      	ldrh	r2, [r7, #10]
 800e394:	1ad3      	subs	r3, r2, r3
 800e396:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	891a      	ldrh	r2, [r3, #8]
 800e39c:	893b      	ldrh	r3, [r7, #8]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <pbuf_realloc+0x70>
 800e3b2:	4b26      	ldr	r3, [pc, #152]	; (800e44c <pbuf_realloc+0xfc>)
 800e3b4:	f240 12af 	movw	r2, #431	; 0x1af
 800e3b8:	4927      	ldr	r1, [pc, #156]	; (800e458 <pbuf_realloc+0x108>)
 800e3ba:	4826      	ldr	r0, [pc, #152]	; (800e454 <pbuf_realloc+0x104>)
 800e3bc:	f009 fef6 	bl	80181ac <iprintf>
  while (rem_len > q->len) {
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	895b      	ldrh	r3, [r3, #10]
 800e3c4:	897a      	ldrh	r2, [r7, #10]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d8e1      	bhi.n	800e38e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	7b1b      	ldrb	r3, [r3, #12]
 800e3ce:	f003 030f 	and.w	r3, r3, #15
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d121      	bne.n	800e41a <pbuf_realloc+0xca>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	895b      	ldrh	r3, [r3, #10]
 800e3da:	897a      	ldrh	r2, [r7, #10]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d01c      	beq.n	800e41a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	7b5b      	ldrb	r3, [r3, #13]
 800e3e4:	f003 0302 	and.w	r3, r3, #2
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d116      	bne.n	800e41a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	685a      	ldr	r2, [r3, #4]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	897b      	ldrh	r3, [r7, #10]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	68f8      	ldr	r0, [r7, #12]
 800e400:	f7fe ffaa 	bl	800d358 <mem_trim>
 800e404:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d106      	bne.n	800e41a <pbuf_realloc+0xca>
 800e40c:	4b0f      	ldr	r3, [pc, #60]	; (800e44c <pbuf_realloc+0xfc>)
 800e40e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e412:	4912      	ldr	r1, [pc, #72]	; (800e45c <pbuf_realloc+0x10c>)
 800e414:	480f      	ldr	r0, [pc, #60]	; (800e454 <pbuf_realloc+0x104>)
 800e416:	f009 fec9 	bl	80181ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	897a      	ldrh	r2, [r7, #10]
 800e41e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	895a      	ldrh	r2, [r3, #10]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d004      	beq.n	800e43a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4618      	mov	r0, r3
 800e436:	f000 f911 	bl	800e65c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	e000      	b.n	800e444 <pbuf_realloc+0xf4>
    return;
 800e442:	bf00      	nop

}
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	0801a17c 	.word	0x0801a17c
 800e450:	0801a294 	.word	0x0801a294
 800e454:	0801a1dc 	.word	0x0801a1dc
 800e458:	0801a2ac 	.word	0x0801a2ac
 800e45c:	0801a2c4 	.word	0x0801a2c4

0800e460 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	4613      	mov	r3, r2
 800e46c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d106      	bne.n	800e482 <pbuf_add_header_impl+0x22>
 800e474:	4b2b      	ldr	r3, [pc, #172]	; (800e524 <pbuf_add_header_impl+0xc4>)
 800e476:	f240 12df 	movw	r2, #479	; 0x1df
 800e47a:	492b      	ldr	r1, [pc, #172]	; (800e528 <pbuf_add_header_impl+0xc8>)
 800e47c:	482b      	ldr	r0, [pc, #172]	; (800e52c <pbuf_add_header_impl+0xcc>)
 800e47e:	f009 fe95 	bl	80181ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d003      	beq.n	800e490 <pbuf_add_header_impl+0x30>
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e48e:	d301      	bcc.n	800e494 <pbuf_add_header_impl+0x34>
    return 1;
 800e490:	2301      	movs	r3, #1
 800e492:	e043      	b.n	800e51c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d101      	bne.n	800e49e <pbuf_add_header_impl+0x3e>
    return 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	e03e      	b.n	800e51c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	891a      	ldrh	r2, [r3, #8]
 800e4a6:	8a7b      	ldrh	r3, [r7, #18]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	8a7a      	ldrh	r2, [r7, #18]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d901      	bls.n	800e4b6 <pbuf_add_header_impl+0x56>
    return 1;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e032      	b.n	800e51c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	7b1b      	ldrb	r3, [r3, #12]
 800e4ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e4bc:	8a3b      	ldrh	r3, [r7, #16]
 800e4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00c      	beq.n	800e4e0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	685a      	ldr	r2, [r3, #4]
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	425b      	negs	r3, r3
 800e4ce:	4413      	add	r3, r2
 800e4d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	3310      	adds	r3, #16
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d20d      	bcs.n	800e4f8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e01d      	b.n	800e51c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e4e0:	79fb      	ldrb	r3, [r7, #7]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d006      	beq.n	800e4f4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	685a      	ldr	r2, [r3, #4]
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	425b      	negs	r3, r3
 800e4ee:	4413      	add	r3, r2
 800e4f0:	617b      	str	r3, [r7, #20]
 800e4f2:	e001      	b.n	800e4f8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e011      	b.n	800e51c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	697a      	ldr	r2, [r7, #20]
 800e4fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	895a      	ldrh	r2, [r3, #10]
 800e502:	8a7b      	ldrh	r3, [r7, #18]
 800e504:	4413      	add	r3, r2
 800e506:	b29a      	uxth	r2, r3
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	891a      	ldrh	r2, [r3, #8]
 800e510:	8a7b      	ldrh	r3, [r7, #18]
 800e512:	4413      	add	r3, r2
 800e514:	b29a      	uxth	r2, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	811a      	strh	r2, [r3, #8]


  return 0;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3718      	adds	r7, #24
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	0801a17c 	.word	0x0801a17c
 800e528:	0801a2e0 	.word	0x0801a2e0
 800e52c:	0801a1dc 	.word	0x0801a1dc

0800e530 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e53a:	2200      	movs	r2, #0
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7ff ff8e 	bl	800e460 <pbuf_add_header_impl>
 800e544:	4603      	mov	r3, r0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d106      	bne.n	800e56e <pbuf_remove_header+0x1e>
 800e560:	4b20      	ldr	r3, [pc, #128]	; (800e5e4 <pbuf_remove_header+0x94>)
 800e562:	f240 224b 	movw	r2, #587	; 0x24b
 800e566:	4920      	ldr	r1, [pc, #128]	; (800e5e8 <pbuf_remove_header+0x98>)
 800e568:	4820      	ldr	r0, [pc, #128]	; (800e5ec <pbuf_remove_header+0x9c>)
 800e56a:	f009 fe1f 	bl	80181ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d003      	beq.n	800e57c <pbuf_remove_header+0x2c>
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e57a:	d301      	bcc.n	800e580 <pbuf_remove_header+0x30>
    return 1;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e02c      	b.n	800e5da <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <pbuf_remove_header+0x3a>
    return 0;
 800e586:	2300      	movs	r3, #0
 800e588:	e027      	b.n	800e5da <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	895b      	ldrh	r3, [r3, #10]
 800e592:	89fa      	ldrh	r2, [r7, #14]
 800e594:	429a      	cmp	r2, r3
 800e596:	d908      	bls.n	800e5aa <pbuf_remove_header+0x5a>
 800e598:	4b12      	ldr	r3, [pc, #72]	; (800e5e4 <pbuf_remove_header+0x94>)
 800e59a:	f240 2255 	movw	r2, #597	; 0x255
 800e59e:	4914      	ldr	r1, [pc, #80]	; (800e5f0 <pbuf_remove_header+0xa0>)
 800e5a0:	4812      	ldr	r0, [pc, #72]	; (800e5ec <pbuf_remove_header+0x9c>)
 800e5a2:	f009 fe03 	bl	80181ac <iprintf>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e017      	b.n	800e5da <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685a      	ldr	r2, [r3, #4]
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	441a      	add	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	895a      	ldrh	r2, [r3, #10]
 800e5c0:	89fb      	ldrh	r3, [r7, #14]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	891a      	ldrh	r2, [r3, #8]
 800e5ce:	89fb      	ldrh	r3, [r7, #14]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	0801a17c 	.word	0x0801a17c
 800e5e8:	0801a2e0 	.word	0x0801a2e0
 800e5ec:	0801a1dc 	.word	0x0801a1dc
 800e5f0:	0801a2ec 	.word	0x0801a2ec

0800e5f4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	807b      	strh	r3, [r7, #2]
 800e600:	4613      	mov	r3, r2
 800e602:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da08      	bge.n	800e61e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e60c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e610:	425b      	negs	r3, r3
 800e612:	4619      	mov	r1, r3
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f7ff ff9b 	bl	800e550 <pbuf_remove_header>
 800e61a:	4603      	mov	r3, r0
 800e61c:	e007      	b.n	800e62e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e61e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e622:	787a      	ldrb	r2, [r7, #1]
 800e624:	4619      	mov	r1, r3
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f7ff ff1a 	bl	800e460 <pbuf_add_header_impl>
 800e62c:	4603      	mov	r3, r0
  }
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e646:	2201      	movs	r2, #1
 800e648:	4619      	mov	r1, r3
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7ff ffd2 	bl	800e5f4 <pbuf_header_impl>
 800e650:	4603      	mov	r3, r0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3708      	adds	r7, #8
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
	...

0800e65c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b088      	sub	sp, #32
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10b      	bne.n	800e682 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d106      	bne.n	800e67e <pbuf_free+0x22>
 800e670:	4b3b      	ldr	r3, [pc, #236]	; (800e760 <pbuf_free+0x104>)
 800e672:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e676:	493b      	ldr	r1, [pc, #236]	; (800e764 <pbuf_free+0x108>)
 800e678:	483b      	ldr	r0, [pc, #236]	; (800e768 <pbuf_free+0x10c>)
 800e67a:	f009 fd97 	bl	80181ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e67e:	2300      	movs	r3, #0
 800e680:	e069      	b.n	800e756 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e686:	e062      	b.n	800e74e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e688:	f009 fbd6 	bl	8017e38 <sys_arch_protect>
 800e68c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	7b9b      	ldrb	r3, [r3, #14]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d106      	bne.n	800e6a4 <pbuf_free+0x48>
 800e696:	4b32      	ldr	r3, [pc, #200]	; (800e760 <pbuf_free+0x104>)
 800e698:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e69c:	4933      	ldr	r1, [pc, #204]	; (800e76c <pbuf_free+0x110>)
 800e69e:	4832      	ldr	r0, [pc, #200]	; (800e768 <pbuf_free+0x10c>)
 800e6a0:	f009 fd84 	bl	80181ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	7b9b      	ldrb	r3, [r3, #14]
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	739a      	strb	r2, [r3, #14]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	7b9b      	ldrb	r3, [r3, #14]
 800e6b4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e6b6:	69b8      	ldr	r0, [r7, #24]
 800e6b8:	f009 fbcc 	bl	8017e54 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e6bc:	7dfb      	ldrb	r3, [r7, #23]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d143      	bne.n	800e74a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	7b1b      	ldrb	r3, [r3, #12]
 800e6cc:	f003 030f 	and.w	r3, r3, #15
 800e6d0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7b5b      	ldrb	r3, [r3, #13]
 800e6d6:	f003 0302 	and.w	r3, r3, #2
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d011      	beq.n	800e702 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d106      	bne.n	800e6f8 <pbuf_free+0x9c>
 800e6ea:	4b1d      	ldr	r3, [pc, #116]	; (800e760 <pbuf_free+0x104>)
 800e6ec:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e6f0:	491f      	ldr	r1, [pc, #124]	; (800e770 <pbuf_free+0x114>)
 800e6f2:	481d      	ldr	r0, [pc, #116]	; (800e768 <pbuf_free+0x10c>)
 800e6f4:	f009 fd5a 	bl	80181ac <iprintf>
        pc->custom_free_function(p);
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	691b      	ldr	r3, [r3, #16]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	4798      	blx	r3
 800e700:	e01d      	b.n	800e73e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e702:	7bfb      	ldrb	r3, [r7, #15]
 800e704:	2b02      	cmp	r3, #2
 800e706:	d104      	bne.n	800e712 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e708:	6879      	ldr	r1, [r7, #4]
 800e70a:	200c      	movs	r0, #12
 800e70c:	f7ff f902 	bl	800d914 <memp_free>
 800e710:	e015      	b.n	800e73e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e712:	7bfb      	ldrb	r3, [r7, #15]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d104      	bne.n	800e722 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e718:	6879      	ldr	r1, [r7, #4]
 800e71a:	200b      	movs	r0, #11
 800e71c:	f7ff f8fa 	bl	800d914 <memp_free>
 800e720:	e00d      	b.n	800e73e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e722:	7bfb      	ldrb	r3, [r7, #15]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d103      	bne.n	800e730 <pbuf_free+0xd4>
          mem_free(p);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7fe fd85 	bl	800d238 <mem_free>
 800e72e:	e006      	b.n	800e73e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e730:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <pbuf_free+0x104>)
 800e732:	f240 320f 	movw	r2, #783	; 0x30f
 800e736:	490f      	ldr	r1, [pc, #60]	; (800e774 <pbuf_free+0x118>)
 800e738:	480b      	ldr	r0, [pc, #44]	; (800e768 <pbuf_free+0x10c>)
 800e73a:	f009 fd37 	bl	80181ac <iprintf>
        }
      }
      count++;
 800e73e:	7ffb      	ldrb	r3, [r7, #31]
 800e740:	3301      	adds	r3, #1
 800e742:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	607b      	str	r3, [r7, #4]
 800e748:	e001      	b.n	800e74e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e74a:	2300      	movs	r3, #0
 800e74c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d199      	bne.n	800e688 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e754:	7ffb      	ldrb	r3, [r7, #31]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3720      	adds	r7, #32
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	0801a17c 	.word	0x0801a17c
 800e764:	0801a2e0 	.word	0x0801a2e0
 800e768:	0801a1dc 	.word	0x0801a1dc
 800e76c:	0801a30c 	.word	0x0801a30c
 800e770:	0801a324 	.word	0x0801a324
 800e774:	0801a348 	.word	0x0801a348

0800e778 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e780:	2300      	movs	r3, #0
 800e782:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e784:	e005      	b.n	800e792 <pbuf_clen+0x1a>
    ++len;
 800e786:	89fb      	ldrh	r3, [r7, #14]
 800e788:	3301      	adds	r3, #1
 800e78a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1f6      	bne.n	800e786 <pbuf_clen+0xe>
  }
  return len;
 800e798:	89fb      	ldrh	r3, [r7, #14]
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3714      	adds	r7, #20
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr
	...

0800e7a8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d016      	beq.n	800e7e4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e7b6:	f009 fb3f 	bl	8017e38 <sys_arch_protect>
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	7b9b      	ldrb	r3, [r3, #14]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	739a      	strb	r2, [r3, #14]
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f009 fb43 	bl	8017e54 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	7b9b      	ldrb	r3, [r3, #14]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d106      	bne.n	800e7e4 <pbuf_ref+0x3c>
 800e7d6:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <pbuf_ref+0x44>)
 800e7d8:	f240 3242 	movw	r2, #834	; 0x342
 800e7dc:	4904      	ldr	r1, [pc, #16]	; (800e7f0 <pbuf_ref+0x48>)
 800e7de:	4805      	ldr	r0, [pc, #20]	; (800e7f4 <pbuf_ref+0x4c>)
 800e7e0:	f009 fce4 	bl	80181ac <iprintf>
  }
}
 800e7e4:	bf00      	nop
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	0801a17c 	.word	0x0801a17c
 800e7f0:	0801a35c 	.word	0x0801a35c
 800e7f4:	0801a1dc 	.word	0x0801a1dc

0800e7f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d002      	beq.n	800e80e <pbuf_cat+0x16>
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d107      	bne.n	800e81e <pbuf_cat+0x26>
 800e80e:	4b20      	ldr	r3, [pc, #128]	; (800e890 <pbuf_cat+0x98>)
 800e810:	f240 3259 	movw	r2, #857	; 0x359
 800e814:	491f      	ldr	r1, [pc, #124]	; (800e894 <pbuf_cat+0x9c>)
 800e816:	4820      	ldr	r0, [pc, #128]	; (800e898 <pbuf_cat+0xa0>)
 800e818:	f009 fcc8 	bl	80181ac <iprintf>
 800e81c:	e034      	b.n	800e888 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	60fb      	str	r3, [r7, #12]
 800e822:	e00a      	b.n	800e83a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	891a      	ldrh	r2, [r3, #8]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	891b      	ldrh	r3, [r3, #8]
 800e82c:	4413      	add	r3, r2
 800e82e:	b29a      	uxth	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1f0      	bne.n	800e824 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	891a      	ldrh	r2, [r3, #8]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	895b      	ldrh	r3, [r3, #10]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d006      	beq.n	800e85c <pbuf_cat+0x64>
 800e84e:	4b10      	ldr	r3, [pc, #64]	; (800e890 <pbuf_cat+0x98>)
 800e850:	f240 3262 	movw	r2, #866	; 0x362
 800e854:	4911      	ldr	r1, [pc, #68]	; (800e89c <pbuf_cat+0xa4>)
 800e856:	4810      	ldr	r0, [pc, #64]	; (800e898 <pbuf_cat+0xa0>)
 800e858:	f009 fca8 	bl	80181ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d006      	beq.n	800e872 <pbuf_cat+0x7a>
 800e864:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <pbuf_cat+0x98>)
 800e866:	f240 3263 	movw	r2, #867	; 0x363
 800e86a:	490d      	ldr	r1, [pc, #52]	; (800e8a0 <pbuf_cat+0xa8>)
 800e86c:	480a      	ldr	r0, [pc, #40]	; (800e898 <pbuf_cat+0xa0>)
 800e86e:	f009 fc9d 	bl	80181ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	891a      	ldrh	r2, [r3, #8]
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	891b      	ldrh	r3, [r3, #8]
 800e87a:	4413      	add	r3, r2
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	683a      	ldr	r2, [r7, #0]
 800e886:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	0801a17c 	.word	0x0801a17c
 800e894:	0801a370 	.word	0x0801a370
 800e898:	0801a1dc 	.word	0x0801a1dc
 800e89c:	0801a3a8 	.word	0x0801a3a8
 800e8a0:	0801a3d8 	.word	0x0801a3d8

0800e8a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	617b      	str	r3, [r7, #20]
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d008      	beq.n	800e8ce <pbuf_copy+0x2a>
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d005      	beq.n	800e8ce <pbuf_copy+0x2a>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	891a      	ldrh	r2, [r3, #8]
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	891b      	ldrh	r3, [r3, #8]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d209      	bcs.n	800e8e2 <pbuf_copy+0x3e>
 800e8ce:	4b57      	ldr	r3, [pc, #348]	; (800ea2c <pbuf_copy+0x188>)
 800e8d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e8d4:	4956      	ldr	r1, [pc, #344]	; (800ea30 <pbuf_copy+0x18c>)
 800e8d6:	4857      	ldr	r0, [pc, #348]	; (800ea34 <pbuf_copy+0x190>)
 800e8d8:	f009 fc68 	bl	80181ac <iprintf>
 800e8dc:	f06f 030f 	mvn.w	r3, #15
 800e8e0:	e09f      	b.n	800ea22 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	895b      	ldrh	r3, [r3, #10]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	1ad2      	subs	r2, r2, r3
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	895b      	ldrh	r3, [r3, #10]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	1acb      	subs	r3, r1, r3
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d306      	bcc.n	800e908 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	895b      	ldrh	r3, [r3, #10]
 800e8fe:	461a      	mov	r2, r3
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	60fb      	str	r3, [r7, #12]
 800e906:	e005      	b.n	800e914 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	895b      	ldrh	r3, [r3, #10]
 800e90c:	461a      	mov	r2, r3
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685a      	ldr	r2, [r3, #4]
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	18d0      	adds	r0, r2, r3
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	4413      	add	r3, r2
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	4619      	mov	r1, r3
 800e928:	f009 fbcf 	bl	80180ca <memcpy>
    offset_to += len;
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	4413      	add	r3, r2
 800e932:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e934:	693a      	ldr	r2, [r7, #16]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	4413      	add	r3, r2
 800e93a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	895b      	ldrh	r3, [r3, #10]
 800e940:	461a      	mov	r2, r3
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	4293      	cmp	r3, r2
 800e946:	d906      	bls.n	800e956 <pbuf_copy+0xb2>
 800e948:	4b38      	ldr	r3, [pc, #224]	; (800ea2c <pbuf_copy+0x188>)
 800e94a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e94e:	493a      	ldr	r1, [pc, #232]	; (800ea38 <pbuf_copy+0x194>)
 800e950:	4838      	ldr	r0, [pc, #224]	; (800ea34 <pbuf_copy+0x190>)
 800e952:	f009 fc2b 	bl	80181ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	895b      	ldrh	r3, [r3, #10]
 800e95a:	461a      	mov	r2, r3
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	4293      	cmp	r3, r2
 800e960:	d906      	bls.n	800e970 <pbuf_copy+0xcc>
 800e962:	4b32      	ldr	r3, [pc, #200]	; (800ea2c <pbuf_copy+0x188>)
 800e964:	f240 32da 	movw	r2, #986	; 0x3da
 800e968:	4934      	ldr	r1, [pc, #208]	; (800ea3c <pbuf_copy+0x198>)
 800e96a:	4832      	ldr	r0, [pc, #200]	; (800ea34 <pbuf_copy+0x190>)
 800e96c:	f009 fc1e 	bl	80181ac <iprintf>
    if (offset_from >= p_from->len) {
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	895b      	ldrh	r3, [r3, #10]
 800e974:	461a      	mov	r2, r3
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	4293      	cmp	r3, r2
 800e97a:	d304      	bcc.n	800e986 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	895b      	ldrh	r3, [r3, #10]
 800e98a:	461a      	mov	r2, r3
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	4293      	cmp	r3, r2
 800e990:	d114      	bne.n	800e9bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10c      	bne.n	800e9bc <pbuf_copy+0x118>
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d009      	beq.n	800e9bc <pbuf_copy+0x118>
 800e9a8:	4b20      	ldr	r3, [pc, #128]	; (800ea2c <pbuf_copy+0x188>)
 800e9aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e9ae:	4924      	ldr	r1, [pc, #144]	; (800ea40 <pbuf_copy+0x19c>)
 800e9b0:	4820      	ldr	r0, [pc, #128]	; (800ea34 <pbuf_copy+0x190>)
 800e9b2:	f009 fbfb 	bl	80181ac <iprintf>
 800e9b6:	f06f 030f 	mvn.w	r3, #15
 800e9ba:	e032      	b.n	800ea22 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d013      	beq.n	800e9ea <pbuf_copy+0x146>
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	895a      	ldrh	r2, [r3, #10]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	891b      	ldrh	r3, [r3, #8]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d10d      	bne.n	800e9ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d009      	beq.n	800e9ea <pbuf_copy+0x146>
 800e9d6:	4b15      	ldr	r3, [pc, #84]	; (800ea2c <pbuf_copy+0x188>)
 800e9d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e9dc:	4919      	ldr	r1, [pc, #100]	; (800ea44 <pbuf_copy+0x1a0>)
 800e9de:	4815      	ldr	r0, [pc, #84]	; (800ea34 <pbuf_copy+0x190>)
 800e9e0:	f009 fbe4 	bl	80181ac <iprintf>
 800e9e4:	f06f 0305 	mvn.w	r3, #5
 800e9e8:	e01b      	b.n	800ea22 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d013      	beq.n	800ea18 <pbuf_copy+0x174>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	895a      	ldrh	r2, [r3, #10]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	891b      	ldrh	r3, [r3, #8]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d10d      	bne.n	800ea18 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d009      	beq.n	800ea18 <pbuf_copy+0x174>
 800ea04:	4b09      	ldr	r3, [pc, #36]	; (800ea2c <pbuf_copy+0x188>)
 800ea06:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ea0a:	490e      	ldr	r1, [pc, #56]	; (800ea44 <pbuf_copy+0x1a0>)
 800ea0c:	4809      	ldr	r0, [pc, #36]	; (800ea34 <pbuf_copy+0x190>)
 800ea0e:	f009 fbcd 	bl	80181ac <iprintf>
 800ea12:	f06f 0305 	mvn.w	r3, #5
 800ea16:	e004      	b.n	800ea22 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f47f af61 	bne.w	800e8e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3718      	adds	r7, #24
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	0801a17c 	.word	0x0801a17c
 800ea30:	0801a424 	.word	0x0801a424
 800ea34:	0801a1dc 	.word	0x0801a1dc
 800ea38:	0801a454 	.word	0x0801a454
 800ea3c:	0801a46c 	.word	0x0801a46c
 800ea40:	0801a488 	.word	0x0801a488
 800ea44:	0801a498 	.word	0x0801a498

0800ea48 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	4611      	mov	r1, r2
 800ea54:	461a      	mov	r2, r3
 800ea56:	460b      	mov	r3, r1
 800ea58:	80fb      	strh	r3, [r7, #6]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d108      	bne.n	800ea7e <pbuf_copy_partial+0x36>
 800ea6c:	4b2b      	ldr	r3, [pc, #172]	; (800eb1c <pbuf_copy_partial+0xd4>)
 800ea6e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ea72:	492b      	ldr	r1, [pc, #172]	; (800eb20 <pbuf_copy_partial+0xd8>)
 800ea74:	482b      	ldr	r0, [pc, #172]	; (800eb24 <pbuf_copy_partial+0xdc>)
 800ea76:	f009 fb99 	bl	80181ac <iprintf>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e04a      	b.n	800eb14 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d108      	bne.n	800ea96 <pbuf_copy_partial+0x4e>
 800ea84:	4b25      	ldr	r3, [pc, #148]	; (800eb1c <pbuf_copy_partial+0xd4>)
 800ea86:	f240 420b 	movw	r2, #1035	; 0x40b
 800ea8a:	4927      	ldr	r1, [pc, #156]	; (800eb28 <pbuf_copy_partial+0xe0>)
 800ea8c:	4825      	ldr	r0, [pc, #148]	; (800eb24 <pbuf_copy_partial+0xdc>)
 800ea8e:	f009 fb8d 	bl	80181ac <iprintf>
 800ea92:	2300      	movs	r3, #0
 800ea94:	e03e      	b.n	800eb14 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	61fb      	str	r3, [r7, #28]
 800ea9a:	e034      	b.n	800eb06 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ea9c:	88bb      	ldrh	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00a      	beq.n	800eab8 <pbuf_copy_partial+0x70>
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	895b      	ldrh	r3, [r3, #10]
 800eaa6:	88ba      	ldrh	r2, [r7, #4]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d305      	bcc.n	800eab8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	895b      	ldrh	r3, [r3, #10]
 800eab0:	88ba      	ldrh	r2, [r7, #4]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	80bb      	strh	r3, [r7, #4]
 800eab6:	e023      	b.n	800eb00 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	895a      	ldrh	r2, [r3, #10]
 800eabc:	88bb      	ldrh	r3, [r7, #4]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800eac2:	8b3a      	ldrh	r2, [r7, #24]
 800eac4:	88fb      	ldrh	r3, [r7, #6]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d901      	bls.n	800eace <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800eaca:	88fb      	ldrh	r3, [r7, #6]
 800eacc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800eace:	8b7b      	ldrh	r3, [r7, #26]
 800ead0:	68ba      	ldr	r2, [r7, #8]
 800ead2:	18d0      	adds	r0, r2, r3
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	685a      	ldr	r2, [r3, #4]
 800ead8:	88bb      	ldrh	r3, [r7, #4]
 800eada:	4413      	add	r3, r2
 800eadc:	8b3a      	ldrh	r2, [r7, #24]
 800eade:	4619      	mov	r1, r3
 800eae0:	f009 faf3 	bl	80180ca <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800eae4:	8afa      	ldrh	r2, [r7, #22]
 800eae6:	8b3b      	ldrh	r3, [r7, #24]
 800eae8:	4413      	add	r3, r2
 800eaea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eaec:	8b7a      	ldrh	r2, [r7, #26]
 800eaee:	8b3b      	ldrh	r3, [r7, #24]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eaf4:	88fa      	ldrh	r2, [r7, #6]
 800eaf6:	8b3b      	ldrh	r3, [r7, #24]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	61fb      	str	r3, [r7, #28]
 800eb06:	88fb      	ldrh	r3, [r7, #6]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <pbuf_copy_partial+0xca>
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1c4      	bne.n	800ea9c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800eb12:	8afb      	ldrh	r3, [r7, #22]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3720      	adds	r7, #32
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	0801a17c 	.word	0x0801a17c
 800eb20:	0801a4c4 	.word	0x0801a4c4
 800eb24:	0801a1dc 	.word	0x0801a1dc
 800eb28:	0801a4e4 	.word	0x0801a4e4

0800eb2c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	4603      	mov	r3, r0
 800eb34:	603a      	str	r2, [r7, #0]
 800eb36:	71fb      	strb	r3, [r7, #7]
 800eb38:	460b      	mov	r3, r1
 800eb3a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	8919      	ldrh	r1, [r3, #8]
 800eb40:	88ba      	ldrh	r2, [r7, #4]
 800eb42:	79fb      	ldrb	r3, [r7, #7]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff faa5 	bl	800e094 <pbuf_alloc>
 800eb4a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <pbuf_clone+0x2a>
    return NULL;
 800eb52:	2300      	movs	r3, #0
 800eb54:	e011      	b.n	800eb7a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eb56:	6839      	ldr	r1, [r7, #0]
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f7ff fea3 	bl	800e8a4 <pbuf_copy>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eb62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d006      	beq.n	800eb78 <pbuf_clone+0x4c>
 800eb6a:	4b06      	ldr	r3, [pc, #24]	; (800eb84 <pbuf_clone+0x58>)
 800eb6c:	f240 5224 	movw	r2, #1316	; 0x524
 800eb70:	4905      	ldr	r1, [pc, #20]	; (800eb88 <pbuf_clone+0x5c>)
 800eb72:	4806      	ldr	r0, [pc, #24]	; (800eb8c <pbuf_clone+0x60>)
 800eb74:	f009 fb1a 	bl	80181ac <iprintf>
  return q;
 800eb78:	68fb      	ldr	r3, [r7, #12]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	0801a17c 	.word	0x0801a17c
 800eb88:	0801a5f0 	.word	0x0801a5f0
 800eb8c:	0801a1dc 	.word	0x0801a1dc

0800eb90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eb94:	f009 fb22 	bl	80181dc <rand>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	4b01      	ldr	r3, [pc, #4]	; (800ebb0 <tcp_init+0x20>)
 800ebaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ebac:	bf00      	nop
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	200000c4 	.word	0x200000c4

0800ebb4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	7d1b      	ldrb	r3, [r3, #20]
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d105      	bne.n	800ebd0 <tcp_free+0x1c>
 800ebc4:	4b06      	ldr	r3, [pc, #24]	; (800ebe0 <tcp_free+0x2c>)
 800ebc6:	22d4      	movs	r2, #212	; 0xd4
 800ebc8:	4906      	ldr	r1, [pc, #24]	; (800ebe4 <tcp_free+0x30>)
 800ebca:	4807      	ldr	r0, [pc, #28]	; (800ebe8 <tcp_free+0x34>)
 800ebcc:	f009 faee 	bl	80181ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ebd0:	6879      	ldr	r1, [r7, #4]
 800ebd2:	2001      	movs	r0, #1
 800ebd4:	f7fe fe9e 	bl	800d914 <memp_free>
}
 800ebd8:	bf00      	nop
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	0801a67c 	.word	0x0801a67c
 800ebe4:	0801a6ac 	.word	0x0801a6ac
 800ebe8:	0801a6c0 	.word	0x0801a6c0

0800ebec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	7d1b      	ldrb	r3, [r3, #20]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d105      	bne.n	800ec08 <tcp_free_listen+0x1c>
 800ebfc:	4b06      	ldr	r3, [pc, #24]	; (800ec18 <tcp_free_listen+0x2c>)
 800ebfe:	22df      	movs	r2, #223	; 0xdf
 800ec00:	4906      	ldr	r1, [pc, #24]	; (800ec1c <tcp_free_listen+0x30>)
 800ec02:	4807      	ldr	r0, [pc, #28]	; (800ec20 <tcp_free_listen+0x34>)
 800ec04:	f009 fad2 	bl	80181ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ec08:	6879      	ldr	r1, [r7, #4]
 800ec0a:	2002      	movs	r0, #2
 800ec0c:	f7fe fe82 	bl	800d914 <memp_free>
}
 800ec10:	bf00      	nop
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	0801a67c 	.word	0x0801a67c
 800ec1c:	0801a6e8 	.word	0x0801a6e8
 800ec20:	0801a6c0 	.word	0x0801a6c0

0800ec24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ec28:	f001 f8a6 	bl	800fd78 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ec2c:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <tcp_tmr+0x28>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	3301      	adds	r3, #1
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	4b05      	ldr	r3, [pc, #20]	; (800ec4c <tcp_tmr+0x28>)
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	4b04      	ldr	r3, [pc, #16]	; (800ec4c <tcp_tmr+0x28>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	f003 0301 	and.w	r3, r3, #1
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ec44:	f000 fd58 	bl	800f6f8 <tcp_slowtmr>
  }
}
 800ec48:	bf00      	nop
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	20004b75 	.word	0x20004b75

0800ec50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d105      	bne.n	800ec6c <tcp_remove_listener+0x1c>
 800ec60:	4b0d      	ldr	r3, [pc, #52]	; (800ec98 <tcp_remove_listener+0x48>)
 800ec62:	22ff      	movs	r2, #255	; 0xff
 800ec64:	490d      	ldr	r1, [pc, #52]	; (800ec9c <tcp_remove_listener+0x4c>)
 800ec66:	480e      	ldr	r0, [pc, #56]	; (800eca0 <tcp_remove_listener+0x50>)
 800ec68:	f009 faa0 	bl	80181ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	e00a      	b.n	800ec88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d102      	bne.n	800ec82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	60fb      	str	r3, [r7, #12]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1f1      	bne.n	800ec72 <tcp_remove_listener+0x22>
    }
  }
}
 800ec8e:	bf00      	nop
 800ec90:	bf00      	nop
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	0801a67c 	.word	0x0801a67c
 800ec9c:	0801a704 	.word	0x0801a704
 800eca0:	0801a6c0 	.word	0x0801a6c0

0800eca4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <tcp_listen_closed+0x1c>
 800ecb2:	4b14      	ldr	r3, [pc, #80]	; (800ed04 <tcp_listen_closed+0x60>)
 800ecb4:	f240 1211 	movw	r2, #273	; 0x111
 800ecb8:	4913      	ldr	r1, [pc, #76]	; (800ed08 <tcp_listen_closed+0x64>)
 800ecba:	4814      	ldr	r0, [pc, #80]	; (800ed0c <tcp_listen_closed+0x68>)
 800ecbc:	f009 fa76 	bl	80181ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	7d1b      	ldrb	r3, [r3, #20]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d006      	beq.n	800ecd6 <tcp_listen_closed+0x32>
 800ecc8:	4b0e      	ldr	r3, [pc, #56]	; (800ed04 <tcp_listen_closed+0x60>)
 800ecca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ecce:	4910      	ldr	r1, [pc, #64]	; (800ed10 <tcp_listen_closed+0x6c>)
 800ecd0:	480e      	ldr	r0, [pc, #56]	; (800ed0c <tcp_listen_closed+0x68>)
 800ecd2:	f009 fa6b 	bl	80181ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	60fb      	str	r3, [r7, #12]
 800ecda:	e00b      	b.n	800ecf4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ecdc:	4a0d      	ldr	r2, [pc, #52]	; (800ed14 <tcp_listen_closed+0x70>)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	6879      	ldr	r1, [r7, #4]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7ff ffb1 	bl	800ec50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	60fb      	str	r3, [r7, #12]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2b03      	cmp	r3, #3
 800ecf8:	d9f0      	bls.n	800ecdc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ecfa:	bf00      	nop
 800ecfc:	bf00      	nop
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	0801a67c 	.word	0x0801a67c
 800ed08:	0801a72c 	.word	0x0801a72c
 800ed0c:	0801a6c0 	.word	0x0801a6c0
 800ed10:	0801a738 	.word	0x0801a738
 800ed14:	0801c6b8 	.word	0x0801c6b8

0800ed18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ed18:	b5b0      	push	{r4, r5, r7, lr}
 800ed1a:	b088      	sub	sp, #32
 800ed1c:	af04      	add	r7, sp, #16
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	460b      	mov	r3, r1
 800ed22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <tcp_close_shutdown+0x20>
 800ed2a:	4b63      	ldr	r3, [pc, #396]	; (800eeb8 <tcp_close_shutdown+0x1a0>)
 800ed2c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ed30:	4962      	ldr	r1, [pc, #392]	; (800eebc <tcp_close_shutdown+0x1a4>)
 800ed32:	4863      	ldr	r0, [pc, #396]	; (800eec0 <tcp_close_shutdown+0x1a8>)
 800ed34:	f009 fa3a 	bl	80181ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ed38:	78fb      	ldrb	r3, [r7, #3]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d066      	beq.n	800ee0c <tcp_close_shutdown+0xf4>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	7d1b      	ldrb	r3, [r3, #20]
 800ed42:	2b04      	cmp	r3, #4
 800ed44:	d003      	beq.n	800ed4e <tcp_close_shutdown+0x36>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	7d1b      	ldrb	r3, [r3, #20]
 800ed4a:	2b07      	cmp	r3, #7
 800ed4c:	d15e      	bne.n	800ee0c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d104      	bne.n	800ed60 <tcp_close_shutdown+0x48>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed5e:	d055      	beq.n	800ee0c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	8b5b      	ldrh	r3, [r3, #26]
 800ed64:	f003 0310 	and.w	r3, r3, #16
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <tcp_close_shutdown+0x62>
 800ed6c:	4b52      	ldr	r3, [pc, #328]	; (800eeb8 <tcp_close_shutdown+0x1a0>)
 800ed6e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ed72:	4954      	ldr	r1, [pc, #336]	; (800eec4 <tcp_close_shutdown+0x1ac>)
 800ed74:	4852      	ldr	r0, [pc, #328]	; (800eec0 <tcp_close_shutdown+0x1a8>)
 800ed76:	f009 fa19 	bl	80181ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ed82:	687d      	ldr	r5, [r7, #4]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	3304      	adds	r3, #4
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	8ad2      	ldrh	r2, [r2, #22]
 800ed8c:	6879      	ldr	r1, [r7, #4]
 800ed8e:	8b09      	ldrh	r1, [r1, #24]
 800ed90:	9102      	str	r1, [sp, #8]
 800ed92:	9201      	str	r2, [sp, #4]
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	462b      	mov	r3, r5
 800ed98:	4622      	mov	r2, r4
 800ed9a:	4601      	mov	r1, r0
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f005 fdb7 	bl	8014910 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f001 fb98 	bl	80104d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eda8:	4b47      	ldr	r3, [pc, #284]	; (800eec8 <tcp_close_shutdown+0x1b0>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d105      	bne.n	800edbe <tcp_close_shutdown+0xa6>
 800edb2:	4b45      	ldr	r3, [pc, #276]	; (800eec8 <tcp_close_shutdown+0x1b0>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	4a43      	ldr	r2, [pc, #268]	; (800eec8 <tcp_close_shutdown+0x1b0>)
 800edba:	6013      	str	r3, [r2, #0]
 800edbc:	e013      	b.n	800ede6 <tcp_close_shutdown+0xce>
 800edbe:	4b42      	ldr	r3, [pc, #264]	; (800eec8 <tcp_close_shutdown+0x1b0>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e00c      	b.n	800ede0 <tcp_close_shutdown+0xc8>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d104      	bne.n	800edda <tcp_close_shutdown+0xc2>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	68da      	ldr	r2, [r3, #12]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	60da      	str	r2, [r3, #12]
 800edd8:	e005      	b.n	800ede6 <tcp_close_shutdown+0xce>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	60fb      	str	r3, [r7, #12]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1ef      	bne.n	800edc6 <tcp_close_shutdown+0xae>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2200      	movs	r2, #0
 800edea:	60da      	str	r2, [r3, #12]
 800edec:	4b37      	ldr	r3, [pc, #220]	; (800eecc <tcp_close_shutdown+0x1b4>)
 800edee:	2201      	movs	r2, #1
 800edf0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800edf2:	4b37      	ldr	r3, [pc, #220]	; (800eed0 <tcp_close_shutdown+0x1b8>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d102      	bne.n	800ee02 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800edfc:	f004 f82c 	bl	8012e58 <tcp_trigger_input_pcb_close>
 800ee00:	e002      	b.n	800ee08 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff fed6 	bl	800ebb4 <tcp_free>
      }
      return ERR_OK;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	e050      	b.n	800eeae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7d1b      	ldrb	r3, [r3, #20]
 800ee10:	2b02      	cmp	r3, #2
 800ee12:	d03b      	beq.n	800ee8c <tcp_close_shutdown+0x174>
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	dc44      	bgt.n	800eea2 <tcp_close_shutdown+0x18a>
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <tcp_close_shutdown+0x10a>
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d02a      	beq.n	800ee76 <tcp_close_shutdown+0x15e>
 800ee20:	e03f      	b.n	800eea2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	8adb      	ldrh	r3, [r3, #22]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d021      	beq.n	800ee6e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ee2a:	4b2a      	ldr	r3, [pc, #168]	; (800eed4 <tcp_close_shutdown+0x1bc>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d105      	bne.n	800ee40 <tcp_close_shutdown+0x128>
 800ee34:	4b27      	ldr	r3, [pc, #156]	; (800eed4 <tcp_close_shutdown+0x1bc>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	4a26      	ldr	r2, [pc, #152]	; (800eed4 <tcp_close_shutdown+0x1bc>)
 800ee3c:	6013      	str	r3, [r2, #0]
 800ee3e:	e013      	b.n	800ee68 <tcp_close_shutdown+0x150>
 800ee40:	4b24      	ldr	r3, [pc, #144]	; (800eed4 <tcp_close_shutdown+0x1bc>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	60bb      	str	r3, [r7, #8]
 800ee46:	e00c      	b.n	800ee62 <tcp_close_shutdown+0x14a>
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d104      	bne.n	800ee5c <tcp_close_shutdown+0x144>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	68da      	ldr	r2, [r3, #12]
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	60da      	str	r2, [r3, #12]
 800ee5a:	e005      	b.n	800ee68 <tcp_close_shutdown+0x150>
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	60bb      	str	r3, [r7, #8]
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1ef      	bne.n	800ee48 <tcp_close_shutdown+0x130>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7ff fea0 	bl	800ebb4 <tcp_free>
      break;
 800ee74:	e01a      	b.n	800eeac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7ff ff14 	bl	800eca4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ee7c:	6879      	ldr	r1, [r7, #4]
 800ee7e:	4816      	ldr	r0, [pc, #88]	; (800eed8 <tcp_close_shutdown+0x1c0>)
 800ee80:	f001 fb7a 	bl	8010578 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff feb1 	bl	800ebec <tcp_free_listen>
      break;
 800ee8a:	e00f      	b.n	800eeac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee8c:	6879      	ldr	r1, [r7, #4]
 800ee8e:	480e      	ldr	r0, [pc, #56]	; (800eec8 <tcp_close_shutdown+0x1b0>)
 800ee90:	f001 fb72 	bl	8010578 <tcp_pcb_remove>
 800ee94:	4b0d      	ldr	r3, [pc, #52]	; (800eecc <tcp_close_shutdown+0x1b4>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff fe8a 	bl	800ebb4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800eea0:	e004      	b.n	800eeac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 f81a 	bl	800eedc <tcp_close_shutdown_fin>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	e000      	b.n	800eeae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bdb0      	pop	{r4, r5, r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	0801a67c 	.word	0x0801a67c
 800eebc:	0801a750 	.word	0x0801a750
 800eec0:	0801a6c0 	.word	0x0801a6c0
 800eec4:	0801a770 	.word	0x0801a770
 800eec8:	2000d8dc 	.word	0x2000d8dc
 800eecc:	2000d8d8 	.word	0x2000d8d8
 800eed0:	2000d8f0 	.word	0x2000d8f0
 800eed4:	2000d8e8 	.word	0x2000d8e8
 800eed8:	2000d8e4 	.word	0x2000d8e4

0800eedc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d106      	bne.n	800eef8 <tcp_close_shutdown_fin+0x1c>
 800eeea:	4b2e      	ldr	r3, [pc, #184]	; (800efa4 <tcp_close_shutdown_fin+0xc8>)
 800eeec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eef0:	492d      	ldr	r1, [pc, #180]	; (800efa8 <tcp_close_shutdown_fin+0xcc>)
 800eef2:	482e      	ldr	r0, [pc, #184]	; (800efac <tcp_close_shutdown_fin+0xd0>)
 800eef4:	f009 f95a 	bl	80181ac <iprintf>

  switch (pcb->state) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b07      	cmp	r3, #7
 800eefe:	d020      	beq.n	800ef42 <tcp_close_shutdown_fin+0x66>
 800ef00:	2b07      	cmp	r3, #7
 800ef02:	dc2b      	bgt.n	800ef5c <tcp_close_shutdown_fin+0x80>
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d002      	beq.n	800ef0e <tcp_close_shutdown_fin+0x32>
 800ef08:	2b04      	cmp	r3, #4
 800ef0a:	d00d      	beq.n	800ef28 <tcp_close_shutdown_fin+0x4c>
 800ef0c:	e026      	b.n	800ef5c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f004 fe0c 	bl	8013b2c <tcp_send_fin>
 800ef14:	4603      	mov	r3, r0
 800ef16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d11f      	bne.n	800ef60 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2205      	movs	r2, #5
 800ef24:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef26:	e01b      	b.n	800ef60 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f004 fdff 	bl	8013b2c <tcp_send_fin>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d114      	bne.n	800ef64 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2205      	movs	r2, #5
 800ef3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef40:	e010      	b.n	800ef64 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f004 fdf2 	bl	8013b2c <tcp_send_fin>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d109      	bne.n	800ef68 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2209      	movs	r2, #9
 800ef58:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef5a:	e005      	b.n	800ef68 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	e01c      	b.n	800ef9a <tcp_close_shutdown_fin+0xbe>
      break;
 800ef60:	bf00      	nop
 800ef62:	e002      	b.n	800ef6a <tcp_close_shutdown_fin+0x8e>
      break;
 800ef64:	bf00      	nop
 800ef66:	e000      	b.n	800ef6a <tcp_close_shutdown_fin+0x8e>
      break;
 800ef68:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ef6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d103      	bne.n	800ef7a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f004 ff18 	bl	8013da8 <tcp_output>
 800ef78:	e00d      	b.n	800ef96 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ef7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef82:	d108      	bne.n	800ef96 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	8b5b      	ldrh	r3, [r3, #26]
 800ef88:	f043 0308 	orr.w	r3, r3, #8
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ef92:	2300      	movs	r3, #0
 800ef94:	e001      	b.n	800ef9a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ef96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	0801a67c 	.word	0x0801a67c
 800efa8:	0801a72c 	.word	0x0801a72c
 800efac:	0801a6c0 	.word	0x0801a6c0

0800efb0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d109      	bne.n	800efd2 <tcp_close+0x22>
 800efbe:	4b0f      	ldr	r3, [pc, #60]	; (800effc <tcp_close+0x4c>)
 800efc0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800efc4:	490e      	ldr	r1, [pc, #56]	; (800f000 <tcp_close+0x50>)
 800efc6:	480f      	ldr	r0, [pc, #60]	; (800f004 <tcp_close+0x54>)
 800efc8:	f009 f8f0 	bl	80181ac <iprintf>
 800efcc:	f06f 030f 	mvn.w	r3, #15
 800efd0:	e00f      	b.n	800eff2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	7d1b      	ldrb	r3, [r3, #20]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d006      	beq.n	800efe8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	8b5b      	ldrh	r3, [r3, #26]
 800efde:	f043 0310 	orr.w	r3, r3, #16
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800efe8:	2101      	movs	r1, #1
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7ff fe94 	bl	800ed18 <tcp_close_shutdown>
 800eff0:	4603      	mov	r3, r0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	0801a67c 	.word	0x0801a67c
 800f000:	0801a78c 	.word	0x0801a78c
 800f004:	0801a6c0 	.word	0x0801a6c0

0800f008 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d109      	bne.n	800f02e <tcp_shutdown+0x26>
 800f01a:	4b26      	ldr	r3, [pc, #152]	; (800f0b4 <tcp_shutdown+0xac>)
 800f01c:	f240 2207 	movw	r2, #519	; 0x207
 800f020:	4925      	ldr	r1, [pc, #148]	; (800f0b8 <tcp_shutdown+0xb0>)
 800f022:	4826      	ldr	r0, [pc, #152]	; (800f0bc <tcp_shutdown+0xb4>)
 800f024:	f009 f8c2 	bl	80181ac <iprintf>
 800f028:	f06f 030f 	mvn.w	r3, #15
 800f02c:	e03d      	b.n	800f0aa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	7d1b      	ldrb	r3, [r3, #20]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d102      	bne.n	800f03c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f036:	f06f 030a 	mvn.w	r3, #10
 800f03a:	e036      	b.n	800f0aa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d01b      	beq.n	800f07a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	8b5b      	ldrh	r3, [r3, #26]
 800f046:	f043 0310 	orr.w	r3, r3, #16
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d005      	beq.n	800f062 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f056:	2101      	movs	r1, #1
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f7ff fe5d 	bl	800ed18 <tcp_close_shutdown>
 800f05e:	4603      	mov	r3, r0
 800f060:	e023      	b.n	800f0aa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f066:	2b00      	cmp	r3, #0
 800f068:	d007      	beq.n	800f07a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff faf4 	bl	800e65c <pbuf_free>
      pcb->refused_data = NULL;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d013      	beq.n	800f0a8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	7d1b      	ldrb	r3, [r3, #20]
 800f084:	2b04      	cmp	r3, #4
 800f086:	dc02      	bgt.n	800f08e <tcp_shutdown+0x86>
 800f088:	2b03      	cmp	r3, #3
 800f08a:	da02      	bge.n	800f092 <tcp_shutdown+0x8a>
 800f08c:	e009      	b.n	800f0a2 <tcp_shutdown+0x9a>
 800f08e:	2b07      	cmp	r3, #7
 800f090:	d107      	bne.n	800f0a2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	b2db      	uxtb	r3, r3
 800f096:	4619      	mov	r1, r3
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f7ff fe3d 	bl	800ed18 <tcp_close_shutdown>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	e003      	b.n	800f0aa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f0a2:	f06f 030a 	mvn.w	r3, #10
 800f0a6:	e000      	b.n	800f0aa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f0a8:	2300      	movs	r3, #0
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	0801a67c 	.word	0x0801a67c
 800f0b8:	0801a7a4 	.word	0x0801a7a4
 800f0bc:	0801a6c0 	.word	0x0801a6c0

0800f0c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b08e      	sub	sp, #56	; 0x38
 800f0c4:	af04      	add	r7, sp, #16
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d107      	bne.n	800f0e0 <tcp_abandon+0x20>
 800f0d0:	4b52      	ldr	r3, [pc, #328]	; (800f21c <tcp_abandon+0x15c>)
 800f0d2:	f240 223d 	movw	r2, #573	; 0x23d
 800f0d6:	4952      	ldr	r1, [pc, #328]	; (800f220 <tcp_abandon+0x160>)
 800f0d8:	4852      	ldr	r0, [pc, #328]	; (800f224 <tcp_abandon+0x164>)
 800f0da:	f009 f867 	bl	80181ac <iprintf>
 800f0de:	e099      	b.n	800f214 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7d1b      	ldrb	r3, [r3, #20]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d106      	bne.n	800f0f6 <tcp_abandon+0x36>
 800f0e8:	4b4c      	ldr	r3, [pc, #304]	; (800f21c <tcp_abandon+0x15c>)
 800f0ea:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f0ee:	494e      	ldr	r1, [pc, #312]	; (800f228 <tcp_abandon+0x168>)
 800f0f0:	484c      	ldr	r0, [pc, #304]	; (800f224 <tcp_abandon+0x164>)
 800f0f2:	f009 f85b 	bl	80181ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	7d1b      	ldrb	r3, [r3, #20]
 800f0fa:	2b0a      	cmp	r3, #10
 800f0fc:	d107      	bne.n	800f10e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f0fe:	6879      	ldr	r1, [r7, #4]
 800f100:	484a      	ldr	r0, [pc, #296]	; (800f22c <tcp_abandon+0x16c>)
 800f102:	f001 fa39 	bl	8010578 <tcp_pcb_remove>
    tcp_free(pcb);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7ff fd54 	bl	800ebb4 <tcp_free>
 800f10c:	e082      	b.n	800f214 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f11a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f120:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f128:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7d1b      	ldrb	r3, [r3, #20]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d126      	bne.n	800f186 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	8adb      	ldrh	r3, [r3, #22]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d02e      	beq.n	800f19e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f140:	4b3b      	ldr	r3, [pc, #236]	; (800f230 <tcp_abandon+0x170>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	429a      	cmp	r2, r3
 800f148:	d105      	bne.n	800f156 <tcp_abandon+0x96>
 800f14a:	4b39      	ldr	r3, [pc, #228]	; (800f230 <tcp_abandon+0x170>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	4a37      	ldr	r2, [pc, #220]	; (800f230 <tcp_abandon+0x170>)
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	e013      	b.n	800f17e <tcp_abandon+0xbe>
 800f156:	4b36      	ldr	r3, [pc, #216]	; (800f230 <tcp_abandon+0x170>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	61fb      	str	r3, [r7, #28]
 800f15c:	e00c      	b.n	800f178 <tcp_abandon+0xb8>
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	429a      	cmp	r2, r3
 800f166:	d104      	bne.n	800f172 <tcp_abandon+0xb2>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	68da      	ldr	r2, [r3, #12]
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	60da      	str	r2, [r3, #12]
 800f170:	e005      	b.n	800f17e <tcp_abandon+0xbe>
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d1ef      	bne.n	800f15e <tcp_abandon+0x9e>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	60da      	str	r2, [r3, #12]
 800f184:	e00b      	b.n	800f19e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	8adb      	ldrh	r3, [r3, #22]
 800f18e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f190:	6879      	ldr	r1, [r7, #4]
 800f192:	4828      	ldr	r0, [pc, #160]	; (800f234 <tcp_abandon+0x174>)
 800f194:	f001 f9f0 	bl	8010578 <tcp_pcb_remove>
 800f198:	4b27      	ldr	r3, [pc, #156]	; (800f238 <tcp_abandon+0x178>)
 800f19a:	2201      	movs	r2, #1
 800f19c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d004      	beq.n	800f1b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 fec4 	bl	800ff38 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d004      	beq.n	800f1c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f000 febb 	bl	800ff38 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d004      	beq.n	800f1d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f000 feb2 	bl	800ff38 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d00e      	beq.n	800f1f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f1da:	6879      	ldr	r1, [r7, #4]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	3304      	adds	r3, #4
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	8b12      	ldrh	r2, [r2, #24]
 800f1e4:	9202      	str	r2, [sp, #8]
 800f1e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f1e8:	9201      	str	r2, [sp, #4]
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	69b9      	ldr	r1, [r7, #24]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f005 fb8c 	bl	8014910 <tcp_rst>
    }
    last_state = pcb->state;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	7d1b      	ldrb	r3, [r3, #20]
 800f1fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7ff fcd8 	bl	800ebb4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d004      	beq.n	800f214 <tcp_abandon+0x154>
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	f06f 010c 	mvn.w	r1, #12
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	4798      	blx	r3
  }
}
 800f214:	3728      	adds	r7, #40	; 0x28
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	0801a67c 	.word	0x0801a67c
 800f220:	0801a7c0 	.word	0x0801a7c0
 800f224:	0801a6c0 	.word	0x0801a6c0
 800f228:	0801a7dc 	.word	0x0801a7dc
 800f22c:	2000d8ec 	.word	0x2000d8ec
 800f230:	2000d8e8 	.word	0x2000d8e8
 800f234:	2000d8dc 	.word	0x2000d8dc
 800f238:	2000d8d8 	.word	0x2000d8d8

0800f23c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f244:	2101      	movs	r1, #1
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7ff ff3a 	bl	800f0c0 <tcp_abandon>
}
 800f24c:	bf00      	nop
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b088      	sub	sp, #32
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	4613      	mov	r3, r2
 800f260:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f262:	2304      	movs	r3, #4
 800f264:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d101      	bne.n	800f270 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f26c:	4b3e      	ldr	r3, [pc, #248]	; (800f368 <tcp_bind+0x114>)
 800f26e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d109      	bne.n	800f28a <tcp_bind+0x36>
 800f276:	4b3d      	ldr	r3, [pc, #244]	; (800f36c <tcp_bind+0x118>)
 800f278:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f27c:	493c      	ldr	r1, [pc, #240]	; (800f370 <tcp_bind+0x11c>)
 800f27e:	483d      	ldr	r0, [pc, #244]	; (800f374 <tcp_bind+0x120>)
 800f280:	f008 ff94 	bl	80181ac <iprintf>
 800f284:	f06f 030f 	mvn.w	r3, #15
 800f288:	e06a      	b.n	800f360 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	7d1b      	ldrb	r3, [r3, #20]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d009      	beq.n	800f2a6 <tcp_bind+0x52>
 800f292:	4b36      	ldr	r3, [pc, #216]	; (800f36c <tcp_bind+0x118>)
 800f294:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f298:	4937      	ldr	r1, [pc, #220]	; (800f378 <tcp_bind+0x124>)
 800f29a:	4836      	ldr	r0, [pc, #216]	; (800f374 <tcp_bind+0x120>)
 800f29c:	f008 ff86 	bl	80181ac <iprintf>
 800f2a0:	f06f 0305 	mvn.w	r3, #5
 800f2a4:	e05c      	b.n	800f360 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f2a6:	88fb      	ldrh	r3, [r7, #6]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d109      	bne.n	800f2c0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f2ac:	f000 f9de 	bl	800f66c <tcp_new_port>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f2b4:	88fb      	ldrh	r3, [r7, #6]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d135      	bne.n	800f326 <tcp_bind+0xd2>
      return ERR_BUF;
 800f2ba:	f06f 0301 	mvn.w	r3, #1
 800f2be:	e04f      	b.n	800f360 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	61fb      	str	r3, [r7, #28]
 800f2c4:	e02b      	b.n	800f31e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f2c6:	4a2d      	ldr	r2, [pc, #180]	; (800f37c <tcp_bind+0x128>)
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	61bb      	str	r3, [r7, #24]
 800f2d2:	e01e      	b.n	800f312 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	8adb      	ldrh	r3, [r3, #22]
 800f2d8:	88fa      	ldrh	r2, [r7, #6]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d116      	bne.n	800f30c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f2de:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d010      	beq.n	800f306 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00c      	beq.n	800f306 <tcp_bind+0xb2>
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d009      	beq.n	800f306 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d005      	beq.n	800f306 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f302:	429a      	cmp	r2, r3
 800f304:	d102      	bne.n	800f30c <tcp_bind+0xb8>
              return ERR_USE;
 800f306:	f06f 0307 	mvn.w	r3, #7
 800f30a:	e029      	b.n	800f360 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	61bb      	str	r3, [r7, #24]
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1dd      	bne.n	800f2d4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	3301      	adds	r3, #1
 800f31c:	61fb      	str	r3, [r7, #28]
 800f31e:	69fa      	ldr	r2, [r7, #28]
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	429a      	cmp	r2, r3
 800f324:	dbcf      	blt.n	800f2c6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00c      	beq.n	800f346 <tcp_bind+0xf2>
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d008      	beq.n	800f346 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d002      	beq.n	800f340 <tcp_bind+0xec>
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	e000      	b.n	800f342 <tcp_bind+0xee>
 800f340:	2300      	movs	r3, #0
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	88fa      	ldrh	r2, [r7, #6]
 800f34a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f34c:	4b0c      	ldr	r3, [pc, #48]	; (800f380 <tcp_bind+0x12c>)
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	60da      	str	r2, [r3, #12]
 800f354:	4a0a      	ldr	r2, [pc, #40]	; (800f380 <tcp_bind+0x12c>)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6013      	str	r3, [r2, #0]
 800f35a:	f005 fc9b 	bl	8014c94 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3720      	adds	r7, #32
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	0801c6e0 	.word	0x0801c6e0
 800f36c:	0801a67c 	.word	0x0801a67c
 800f370:	0801a810 	.word	0x0801a810
 800f374:	0801a6c0 	.word	0x0801a6c0
 800f378:	0801a828 	.word	0x0801a828
 800f37c:	0801c6b8 	.word	0x0801c6b8
 800f380:	2000d8e8 	.word	0x2000d8e8

0800f384 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	4613      	mov	r3, r2
 800f390:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d106      	bne.n	800f3a6 <tcp_accept_null+0x22>
 800f398:	4b07      	ldr	r3, [pc, #28]	; (800f3b8 <tcp_accept_null+0x34>)
 800f39a:	f240 320f 	movw	r2, #783	; 0x30f
 800f39e:	4907      	ldr	r1, [pc, #28]	; (800f3bc <tcp_accept_null+0x38>)
 800f3a0:	4807      	ldr	r0, [pc, #28]	; (800f3c0 <tcp_accept_null+0x3c>)
 800f3a2:	f008 ff03 	bl	80181ac <iprintf>

  tcp_abort(pcb);
 800f3a6:	68b8      	ldr	r0, [r7, #8]
 800f3a8:	f7ff ff48 	bl	800f23c <tcp_abort>

  return ERR_ABRT;
 800f3ac:	f06f 030c 	mvn.w	r3, #12
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	0801a67c 	.word	0x0801a67c
 800f3bc:	0801a850 	.word	0x0801a850
 800f3c0:	0801a6c0 	.word	0x0801a6c0

0800f3c4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	607a      	str	r2, [r7, #4]
 800f3d0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d109      	bne.n	800f3f0 <tcp_listen_with_backlog_and_err+0x2c>
 800f3dc:	4b47      	ldr	r3, [pc, #284]	; (800f4fc <tcp_listen_with_backlog_and_err+0x138>)
 800f3de:	f240 3259 	movw	r2, #857	; 0x359
 800f3e2:	4947      	ldr	r1, [pc, #284]	; (800f500 <tcp_listen_with_backlog_and_err+0x13c>)
 800f3e4:	4847      	ldr	r0, [pc, #284]	; (800f504 <tcp_listen_with_backlog_and_err+0x140>)
 800f3e6:	f008 fee1 	bl	80181ac <iprintf>
 800f3ea:	23f0      	movs	r3, #240	; 0xf0
 800f3ec:	76fb      	strb	r3, [r7, #27]
 800f3ee:	e079      	b.n	800f4e4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	7d1b      	ldrb	r3, [r3, #20]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d009      	beq.n	800f40c <tcp_listen_with_backlog_and_err+0x48>
 800f3f8:	4b40      	ldr	r3, [pc, #256]	; (800f4fc <tcp_listen_with_backlog_and_err+0x138>)
 800f3fa:	f240 325a 	movw	r2, #858	; 0x35a
 800f3fe:	4942      	ldr	r1, [pc, #264]	; (800f508 <tcp_listen_with_backlog_and_err+0x144>)
 800f400:	4840      	ldr	r0, [pc, #256]	; (800f504 <tcp_listen_with_backlog_and_err+0x140>)
 800f402:	f008 fed3 	bl	80181ac <iprintf>
 800f406:	23f1      	movs	r3, #241	; 0xf1
 800f408:	76fb      	strb	r3, [r7, #27]
 800f40a:	e06b      	b.n	800f4e4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	7d1b      	ldrb	r3, [r3, #20]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d104      	bne.n	800f41e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f418:	23f7      	movs	r3, #247	; 0xf7
 800f41a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f41c:	e062      	b.n	800f4e4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f41e:	2002      	movs	r0, #2
 800f420:	f7fe fa26 	bl	800d870 <memp_malloc>
 800f424:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d102      	bne.n	800f432 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f42c:	23ff      	movs	r3, #255	; 0xff
 800f42e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f430:	e058      	b.n	800f4e4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	691a      	ldr	r2, [r3, #16]
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	8ada      	ldrh	r2, [r3, #22]
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	2201      	movs	r2, #1
 800f446:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	7d5a      	ldrb	r2, [r3, #21]
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	7a5a      	ldrb	r2, [r3, #9]
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	2200      	movs	r2, #0
 800f45c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	7ada      	ldrb	r2, [r3, #11]
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	7a9a      	ldrb	r2, [r3, #10]
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	8adb      	ldrh	r3, [r3, #22]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d021      	beq.n	800f4c2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f47e:	4b23      	ldr	r3, [pc, #140]	; (800f50c <tcp_listen_with_backlog_and_err+0x148>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	429a      	cmp	r2, r3
 800f486:	d105      	bne.n	800f494 <tcp_listen_with_backlog_and_err+0xd0>
 800f488:	4b20      	ldr	r3, [pc, #128]	; (800f50c <tcp_listen_with_backlog_and_err+0x148>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	4a1f      	ldr	r2, [pc, #124]	; (800f50c <tcp_listen_with_backlog_and_err+0x148>)
 800f490:	6013      	str	r3, [r2, #0]
 800f492:	e013      	b.n	800f4bc <tcp_listen_with_backlog_and_err+0xf8>
 800f494:	4b1d      	ldr	r3, [pc, #116]	; (800f50c <tcp_listen_with_backlog_and_err+0x148>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	617b      	str	r3, [r7, #20]
 800f49a:	e00c      	b.n	800f4b6 <tcp_listen_with_backlog_and_err+0xf2>
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d104      	bne.n	800f4b0 <tcp_listen_with_backlog_and_err+0xec>
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e005      	b.n	800f4bc <tcp_listen_with_backlog_and_err+0xf8>
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	617b      	str	r3, [r7, #20]
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1ef      	bne.n	800f49c <tcp_listen_with_backlog_and_err+0xd8>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f4c2:	68f8      	ldr	r0, [r7, #12]
 800f4c4:	f7ff fb76 	bl	800ebb4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	4a11      	ldr	r2, [pc, #68]	; (800f510 <tcp_listen_with_backlog_and_err+0x14c>)
 800f4cc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f4ce:	4b11      	ldr	r3, [pc, #68]	; (800f514 <tcp_listen_with_backlog_and_err+0x150>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	60da      	str	r2, [r3, #12]
 800f4d6:	4a0f      	ldr	r2, [pc, #60]	; (800f514 <tcp_listen_with_backlog_and_err+0x150>)
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	f005 fbda 	bl	8014c94 <tcp_timer_needed>
  res = ERR_OK;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d002      	beq.n	800f4f0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	7efa      	ldrb	r2, [r7, #27]
 800f4ee:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f4f0:	69fb      	ldr	r3, [r7, #28]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3720      	adds	r7, #32
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	0801a67c 	.word	0x0801a67c
 800f500:	0801a870 	.word	0x0801a870
 800f504:	0801a6c0 	.word	0x0801a6c0
 800f508:	0801a8a0 	.word	0x0801a8a0
 800f50c:	2000d8e8 	.word	0x2000d8e8
 800f510:	0800f385 	.word	0x0800f385
 800f514:	2000d8e4 	.word	0x2000d8e4

0800f518 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d106      	bne.n	800f534 <tcp_update_rcv_ann_wnd+0x1c>
 800f526:	4b25      	ldr	r3, [pc, #148]	; (800f5bc <tcp_update_rcv_ann_wnd+0xa4>)
 800f528:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f52c:	4924      	ldr	r1, [pc, #144]	; (800f5c0 <tcp_update_rcv_ann_wnd+0xa8>)
 800f52e:	4825      	ldr	r0, [pc, #148]	; (800f5c4 <tcp_update_rcv_ann_wnd+0xac>)
 800f530:	f008 fe3c 	bl	80181ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f53c:	4413      	add	r3, r2
 800f53e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f544:	687a      	ldr	r2, [r7, #4]
 800f546:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f548:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f54c:	bf28      	it	cs
 800f54e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f552:	b292      	uxth	r2, r2
 800f554:	4413      	add	r3, r2
 800f556:	68fa      	ldr	r2, [r7, #12]
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	db08      	blt.n	800f570 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	e020      	b.n	800f5b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	dd03      	ble.n	800f586 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f584:	e014      	b.n	800f5b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58e:	1ad3      	subs	r3, r2, r3
 800f590:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f598:	d306      	bcc.n	800f5a8 <tcp_update_rcv_ann_wnd+0x90>
 800f59a:	4b08      	ldr	r3, [pc, #32]	; (800f5bc <tcp_update_rcv_ann_wnd+0xa4>)
 800f59c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f5a0:	4909      	ldr	r1, [pc, #36]	; (800f5c8 <tcp_update_rcv_ann_wnd+0xb0>)
 800f5a2:	4808      	ldr	r0, [pc, #32]	; (800f5c4 <tcp_update_rcv_ann_wnd+0xac>)
 800f5a4:	f008 fe02 	bl	80181ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f5b0:	2300      	movs	r3, #0
  }
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	0801a67c 	.word	0x0801a67c
 800f5c0:	0801a8d8 	.word	0x0801a8d8
 800f5c4:	0801a6c0 	.word	0x0801a6c0
 800f5c8:	0801a8fc 	.word	0x0801a8fc

0800f5cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d107      	bne.n	800f5ee <tcp_recved+0x22>
 800f5de:	4b1f      	ldr	r3, [pc, #124]	; (800f65c <tcp_recved+0x90>)
 800f5e0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f5e4:	491e      	ldr	r1, [pc, #120]	; (800f660 <tcp_recved+0x94>)
 800f5e6:	481f      	ldr	r0, [pc, #124]	; (800f664 <tcp_recved+0x98>)
 800f5e8:	f008 fde0 	bl	80181ac <iprintf>
 800f5ec:	e032      	b.n	800f654 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	7d1b      	ldrb	r3, [r3, #20]
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d106      	bne.n	800f604 <tcp_recved+0x38>
 800f5f6:	4b19      	ldr	r3, [pc, #100]	; (800f65c <tcp_recved+0x90>)
 800f5f8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f5fc:	491a      	ldr	r1, [pc, #104]	; (800f668 <tcp_recved+0x9c>)
 800f5fe:	4819      	ldr	r0, [pc, #100]	; (800f664 <tcp_recved+0x98>)
 800f600:	f008 fdd4 	bl	80181ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f608:	887b      	ldrh	r3, [r7, #2]
 800f60a:	4413      	add	r3, r2
 800f60c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f60e:	89fb      	ldrh	r3, [r7, #14]
 800f610:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f614:	d804      	bhi.n	800f620 <tcp_recved+0x54>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f61a:	89fa      	ldrh	r2, [r7, #14]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d204      	bcs.n	800f62a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f626:	851a      	strh	r2, [r3, #40]	; 0x28
 800f628:	e002      	b.n	800f630 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	89fa      	ldrh	r2, [r7, #14]
 800f62e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f7ff ff71 	bl	800f518 <tcp_update_rcv_ann_wnd>
 800f636:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f63e:	d309      	bcc.n	800f654 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	8b5b      	ldrh	r3, [r3, #26]
 800f644:	f043 0302 	orr.w	r3, r3, #2
 800f648:	b29a      	uxth	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f004 fbaa 	bl	8013da8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	0801a67c 	.word	0x0801a67c
 800f660:	0801a918 	.word	0x0801a918
 800f664:	0801a6c0 	.word	0x0801a6c0
 800f668:	0801a930 	.word	0x0801a930

0800f66c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f672:	2300      	movs	r3, #0
 800f674:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f676:	4b1e      	ldr	r3, [pc, #120]	; (800f6f0 <tcp_new_port+0x84>)
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	3301      	adds	r3, #1
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	4b1c      	ldr	r3, [pc, #112]	; (800f6f0 <tcp_new_port+0x84>)
 800f680:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f682:	4b1b      	ldr	r3, [pc, #108]	; (800f6f0 <tcp_new_port+0x84>)
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d103      	bne.n	800f696 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f68e:	4b18      	ldr	r3, [pc, #96]	; (800f6f0 <tcp_new_port+0x84>)
 800f690:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f694:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f696:	2300      	movs	r3, #0
 800f698:	71fb      	strb	r3, [r7, #7]
 800f69a:	e01e      	b.n	800f6da <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f69c:	79fb      	ldrb	r3, [r7, #7]
 800f69e:	4a15      	ldr	r2, [pc, #84]	; (800f6f4 <tcp_new_port+0x88>)
 800f6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	603b      	str	r3, [r7, #0]
 800f6a8:	e011      	b.n	800f6ce <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	8ada      	ldrh	r2, [r3, #22]
 800f6ae:	4b10      	ldr	r3, [pc, #64]	; (800f6f0 <tcp_new_port+0x84>)
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d108      	bne.n	800f6c8 <tcp_new_port+0x5c>
        n++;
 800f6b6:	88bb      	ldrh	r3, [r7, #4]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f6bc:	88bb      	ldrh	r3, [r7, #4]
 800f6be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6c2:	d3d8      	bcc.n	800f676 <tcp_new_port+0xa>
          return 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	e00d      	b.n	800f6e4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	603b      	str	r3, [r7, #0]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1ea      	bne.n	800f6aa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6d4:	79fb      	ldrb	r3, [r7, #7]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	71fb      	strb	r3, [r7, #7]
 800f6da:	79fb      	ldrb	r3, [r7, #7]
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	d9dd      	bls.n	800f69c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f6e0:	4b03      	ldr	r3, [pc, #12]	; (800f6f0 <tcp_new_port+0x84>)
 800f6e2:	881b      	ldrh	r3, [r3, #0]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	200000c4 	.word	0x200000c4
 800f6f4:	0801c6b8 	.word	0x0801c6b8

0800f6f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f6f8:	b5b0      	push	{r4, r5, r7, lr}
 800f6fa:	b090      	sub	sp, #64	; 0x40
 800f6fc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f704:	4b94      	ldr	r3, [pc, #592]	; (800f958 <tcp_slowtmr+0x260>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	3301      	adds	r3, #1
 800f70a:	4a93      	ldr	r2, [pc, #588]	; (800f958 <tcp_slowtmr+0x260>)
 800f70c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f70e:	4b93      	ldr	r3, [pc, #588]	; (800f95c <tcp_slowtmr+0x264>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	3301      	adds	r3, #1
 800f714:	b2da      	uxtb	r2, r3
 800f716:	4b91      	ldr	r3, [pc, #580]	; (800f95c <tcp_slowtmr+0x264>)
 800f718:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f71a:	2300      	movs	r3, #0
 800f71c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f71e:	4b90      	ldr	r3, [pc, #576]	; (800f960 <tcp_slowtmr+0x268>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f724:	e29d      	b.n	800fc62 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	7d1b      	ldrb	r3, [r3, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d106      	bne.n	800f73c <tcp_slowtmr+0x44>
 800f72e:	4b8d      	ldr	r3, [pc, #564]	; (800f964 <tcp_slowtmr+0x26c>)
 800f730:	f240 42be 	movw	r2, #1214	; 0x4be
 800f734:	498c      	ldr	r1, [pc, #560]	; (800f968 <tcp_slowtmr+0x270>)
 800f736:	488d      	ldr	r0, [pc, #564]	; (800f96c <tcp_slowtmr+0x274>)
 800f738:	f008 fd38 	bl	80181ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	7d1b      	ldrb	r3, [r3, #20]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d106      	bne.n	800f752 <tcp_slowtmr+0x5a>
 800f744:	4b87      	ldr	r3, [pc, #540]	; (800f964 <tcp_slowtmr+0x26c>)
 800f746:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f74a:	4989      	ldr	r1, [pc, #548]	; (800f970 <tcp_slowtmr+0x278>)
 800f74c:	4887      	ldr	r0, [pc, #540]	; (800f96c <tcp_slowtmr+0x274>)
 800f74e:	f008 fd2d 	bl	80181ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	7d1b      	ldrb	r3, [r3, #20]
 800f756:	2b0a      	cmp	r3, #10
 800f758:	d106      	bne.n	800f768 <tcp_slowtmr+0x70>
 800f75a:	4b82      	ldr	r3, [pc, #520]	; (800f964 <tcp_slowtmr+0x26c>)
 800f75c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f760:	4984      	ldr	r1, [pc, #528]	; (800f974 <tcp_slowtmr+0x27c>)
 800f762:	4882      	ldr	r0, [pc, #520]	; (800f96c <tcp_slowtmr+0x274>)
 800f764:	f008 fd22 	bl	80181ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76a:	7f9a      	ldrb	r2, [r3, #30]
 800f76c:	4b7b      	ldr	r3, [pc, #492]	; (800f95c <tcp_slowtmr+0x264>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	429a      	cmp	r2, r3
 800f772:	d105      	bne.n	800f780 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f77e:	e270      	b.n	800fc62 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f780:	4b76      	ldr	r3, [pc, #472]	; (800f95c <tcp_slowtmr+0x264>)
 800f782:	781a      	ldrb	r2, [r3, #0]
 800f784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f786:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	7d1b      	ldrb	r3, [r3, #20]
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d10a      	bne.n	800f7b2 <tcp_slowtmr+0xba>
 800f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7a2:	2b05      	cmp	r3, #5
 800f7a4:	d905      	bls.n	800f7b2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f7a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7b0:	e11e      	b.n	800f9f0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7b8:	2b0b      	cmp	r3, #11
 800f7ba:	d905      	bls.n	800f7c8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7c6:	e113      	b.n	800f9f0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d075      	beq.n	800f8be <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d006      	beq.n	800f7e8 <tcp_slowtmr+0xf0>
 800f7da:	4b62      	ldr	r3, [pc, #392]	; (800f964 <tcp_slowtmr+0x26c>)
 800f7dc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f7e0:	4965      	ldr	r1, [pc, #404]	; (800f978 <tcp_slowtmr+0x280>)
 800f7e2:	4862      	ldr	r0, [pc, #392]	; (800f96c <tcp_slowtmr+0x274>)
 800f7e4:	f008 fce2 	bl	80181ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d106      	bne.n	800f7fe <tcp_slowtmr+0x106>
 800f7f0:	4b5c      	ldr	r3, [pc, #368]	; (800f964 <tcp_slowtmr+0x26c>)
 800f7f2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f7f6:	4961      	ldr	r1, [pc, #388]	; (800f97c <tcp_slowtmr+0x284>)
 800f7f8:	485c      	ldr	r0, [pc, #368]	; (800f96c <tcp_slowtmr+0x274>)
 800f7fa:	f008 fcd7 	bl	80181ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f804:	2b0b      	cmp	r3, #11
 800f806:	d905      	bls.n	800f814 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f80c:	3301      	adds	r3, #1
 800f80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f812:	e0ed      	b.n	800f9f0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f816:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f81a:	3b01      	subs	r3, #1
 800f81c:	4a58      	ldr	r2, [pc, #352]	; (800f980 <tcp_slowtmr+0x288>)
 800f81e:	5cd3      	ldrb	r3, [r2, r3]
 800f820:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f828:	7c7a      	ldrb	r2, [r7, #17]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d907      	bls.n	800f83e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f834:	3301      	adds	r3, #1
 800f836:	b2da      	uxtb	r2, r3
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f840:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f844:	7c7a      	ldrb	r2, [r7, #17]
 800f846:	429a      	cmp	r2, r3
 800f848:	f200 80d2 	bhi.w	800f9f0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f84c:	2301      	movs	r3, #1
 800f84e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f856:	2b00      	cmp	r3, #0
 800f858:	d108      	bne.n	800f86c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f85a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f85c:	f005 f94c 	bl	8014af8 <tcp_zero_window_probe>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d014      	beq.n	800f890 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f866:	2300      	movs	r3, #0
 800f868:	623b      	str	r3, [r7, #32]
 800f86a:	e011      	b.n	800f890 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f872:	4619      	mov	r1, r3
 800f874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f876:	f004 f811 	bl	801389c <tcp_split_unsent_seg>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d107      	bne.n	800f890 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f882:	f004 fa91 	bl	8013da8 <tcp_output>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d101      	bne.n	800f890 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f88c:	2300      	movs	r3, #0
 800f88e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f890:	6a3b      	ldr	r3, [r7, #32]
 800f892:	2b00      	cmp	r3, #0
 800f894:	f000 80ac 	beq.w	800f9f0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89a:	2200      	movs	r2, #0
 800f89c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f8a6:	2b06      	cmp	r3, #6
 800f8a8:	f200 80a2 	bhi.w	800f9f0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	b2da      	uxtb	r2, r3
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f8bc:	e098      	b.n	800f9f0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	db0f      	blt.n	800f8e8 <tcp_slowtmr+0x1f0>
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d008      	beq.n	800f8e8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	3301      	adds	r3, #1
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	b21a      	sxth	r2, r3
 800f8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	db7b      	blt.n	800f9f0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f8f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8fa:	f004 fd47 	bl	801438c <tcp_rexmit_rto_prepare>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d007      	beq.n	800f914 <tcp_slowtmr+0x21c>
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d171      	bne.n	800f9f0 <tcp_slowtmr+0x2f8>
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f910:	2b00      	cmp	r3, #0
 800f912:	d06d      	beq.n	800f9f0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	7d1b      	ldrb	r3, [r3, #20]
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d03a      	beq.n	800f992 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f922:	2b0c      	cmp	r3, #12
 800f924:	bf28      	it	cs
 800f926:	230c      	movcs	r3, #12
 800f928:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f930:	10db      	asrs	r3, r3, #3
 800f932:	b21b      	sxth	r3, r3
 800f934:	461a      	mov	r2, r3
 800f936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f938:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f93c:	4413      	add	r3, r2
 800f93e:	7efa      	ldrb	r2, [r7, #27]
 800f940:	4910      	ldr	r1, [pc, #64]	; (800f984 <tcp_slowtmr+0x28c>)
 800f942:	5c8a      	ldrb	r2, [r1, r2]
 800f944:	4093      	lsls	r3, r2
 800f946:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f94e:	4293      	cmp	r3, r2
 800f950:	dc1a      	bgt.n	800f988 <tcp_slowtmr+0x290>
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	b21a      	sxth	r2, r3
 800f956:	e019      	b.n	800f98c <tcp_slowtmr+0x294>
 800f958:	2000d8e0 	.word	0x2000d8e0
 800f95c:	20004b76 	.word	0x20004b76
 800f960:	2000d8dc 	.word	0x2000d8dc
 800f964:	0801a67c 	.word	0x0801a67c
 800f968:	0801a9c0 	.word	0x0801a9c0
 800f96c:	0801a6c0 	.word	0x0801a6c0
 800f970:	0801a9ec 	.word	0x0801a9ec
 800f974:	0801aa18 	.word	0x0801aa18
 800f978:	0801aa48 	.word	0x0801aa48
 800f97c:	0801aa7c 	.word	0x0801aa7c
 800f980:	0801c6b0 	.word	0x0801c6b0
 800f984:	0801c6a0 	.word	0x0801c6a0
 800f988:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	2200      	movs	r2, #0
 800f996:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	bf28      	it	cs
 800f9a8:	4613      	movcs	r3, r2
 800f9aa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f9ac:	8a7b      	ldrh	r3, [r7, #18]
 800f9ae:	085b      	lsrs	r3, r3, #1
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9c2:	005b      	lsls	r3, r3, #1
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d206      	bcs.n	800f9d8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9ce:	005b      	lsls	r3, r3, #1
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f9ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9ec:	f004 fd3e 	bl	801446c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f2:	7d1b      	ldrb	r3, [r3, #20]
 800f9f4:	2b06      	cmp	r3, #6
 800f9f6:	d111      	bne.n	800fa1c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fa:	8b5b      	ldrh	r3, [r3, #26]
 800f9fc:	f003 0310 	and.w	r3, r3, #16
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00b      	beq.n	800fa1c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa04:	4b9c      	ldr	r3, [pc, #624]	; (800fc78 <tcp_slowtmr+0x580>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0a:	6a1b      	ldr	r3, [r3, #32]
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	2b28      	cmp	r3, #40	; 0x28
 800fa10:	d904      	bls.n	800fa1c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fa12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa16:	3301      	adds	r3, #1
 800fa18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	7a5b      	ldrb	r3, [r3, #9]
 800fa20:	f003 0308 	and.w	r3, r3, #8
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d04a      	beq.n	800fabe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa2c:	2b04      	cmp	r3, #4
 800fa2e:	d003      	beq.n	800fa38 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa32:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fa34:	2b07      	cmp	r3, #7
 800fa36:	d142      	bne.n	800fabe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa38:	4b8f      	ldr	r3, [pc, #572]	; (800fc78 <tcp_slowtmr+0x580>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3e:	6a1b      	ldr	r3, [r3, #32]
 800fa40:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa44:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fa48:	4b8c      	ldr	r3, [pc, #560]	; (800fc7c <tcp_slowtmr+0x584>)
 800fa4a:	440b      	add	r3, r1
 800fa4c:	498c      	ldr	r1, [pc, #560]	; (800fc80 <tcp_slowtmr+0x588>)
 800fa4e:	fba1 1303 	umull	r1, r3, r1, r3
 800fa52:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d90a      	bls.n	800fa6e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fa58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fa62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa66:	3301      	adds	r3, #1
 800fa68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa6c:	e027      	b.n	800fabe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa6e:	4b82      	ldr	r3, [pc, #520]	; (800fc78 <tcp_slowtmr+0x580>)
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa74:	6a1b      	ldr	r3, [r3, #32]
 800fa76:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fa84:	4618      	mov	r0, r3
 800fa86:	4b7f      	ldr	r3, [pc, #508]	; (800fc84 <tcp_slowtmr+0x58c>)
 800fa88:	fb03 f300 	mul.w	r3, r3, r0
 800fa8c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fa8e:	497c      	ldr	r1, [pc, #496]	; (800fc80 <tcp_slowtmr+0x588>)
 800fa90:	fba1 1303 	umull	r1, r3, r1, r3
 800fa94:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d911      	bls.n	800fabe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fa9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa9c:	f004 ffec 	bl	8014a78 <tcp_keepalive>
 800faa0:	4603      	mov	r3, r0
 800faa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800faa6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d107      	bne.n	800fabe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800faae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fab4:	3301      	adds	r3, #1
 800fab6:	b2da      	uxtb	r2, r3
 800fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d011      	beq.n	800faea <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fac6:	4b6c      	ldr	r3, [pc, #432]	; (800fc78 <tcp_slowtmr+0x580>)
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	1ad2      	subs	r2, r2, r3
 800fad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fad6:	4619      	mov	r1, r3
 800fad8:	460b      	mov	r3, r1
 800fada:	005b      	lsls	r3, r3, #1
 800fadc:	440b      	add	r3, r1
 800fade:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d302      	bcc.n	800faea <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fae6:	f000 feab 	bl	8010840 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800faea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faec:	7d1b      	ldrb	r3, [r3, #20]
 800faee:	2b03      	cmp	r3, #3
 800faf0:	d10b      	bne.n	800fb0a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faf2:	4b61      	ldr	r3, [pc, #388]	; (800fc78 <tcp_slowtmr+0x580>)
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	6a1b      	ldr	r3, [r3, #32]
 800fafa:	1ad3      	subs	r3, r2, r3
 800fafc:	2b28      	cmp	r3, #40	; 0x28
 800fafe:	d904      	bls.n	800fb0a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb04:	3301      	adds	r3, #1
 800fb06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0c:	7d1b      	ldrb	r3, [r3, #20]
 800fb0e:	2b09      	cmp	r3, #9
 800fb10:	d10b      	bne.n	800fb2a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fb12:	4b59      	ldr	r3, [pc, #356]	; (800fc78 <tcp_slowtmr+0x580>)
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb18:	6a1b      	ldr	r3, [r3, #32]
 800fb1a:	1ad3      	subs	r3, r2, r3
 800fb1c:	2bf0      	cmp	r3, #240	; 0xf0
 800fb1e:	d904      	bls.n	800fb2a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fb20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb24:	3301      	adds	r3, #1
 800fb26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fb2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d060      	beq.n	800fbf4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb38:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fb3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb3c:	f000 fccc 	bl	80104d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d010      	beq.n	800fb68 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fb46:	4b50      	ldr	r3, [pc, #320]	; (800fc88 <tcp_slowtmr+0x590>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d106      	bne.n	800fb5e <tcp_slowtmr+0x466>
 800fb50:	4b4e      	ldr	r3, [pc, #312]	; (800fc8c <tcp_slowtmr+0x594>)
 800fb52:	f240 526d 	movw	r2, #1389	; 0x56d
 800fb56:	494e      	ldr	r1, [pc, #312]	; (800fc90 <tcp_slowtmr+0x598>)
 800fb58:	484e      	ldr	r0, [pc, #312]	; (800fc94 <tcp_slowtmr+0x59c>)
 800fb5a:	f008 fb27 	bl	80181ac <iprintf>
        prev->next = pcb->next;
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	68da      	ldr	r2, [r3, #12]
 800fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb64:	60da      	str	r2, [r3, #12]
 800fb66:	e00f      	b.n	800fb88 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fb68:	4b47      	ldr	r3, [pc, #284]	; (800fc88 <tcp_slowtmr+0x590>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d006      	beq.n	800fb80 <tcp_slowtmr+0x488>
 800fb72:	4b46      	ldr	r3, [pc, #280]	; (800fc8c <tcp_slowtmr+0x594>)
 800fb74:	f240 5271 	movw	r2, #1393	; 0x571
 800fb78:	4947      	ldr	r1, [pc, #284]	; (800fc98 <tcp_slowtmr+0x5a0>)
 800fb7a:	4846      	ldr	r0, [pc, #280]	; (800fc94 <tcp_slowtmr+0x59c>)
 800fb7c:	f008 fb16 	bl	80181ac <iprintf>
        tcp_active_pcbs = pcb->next;
 800fb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	4a40      	ldr	r2, [pc, #256]	; (800fc88 <tcp_slowtmr+0x590>)
 800fb86:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fb88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d013      	beq.n	800fbb8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb92:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fb98:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba0:	8ad2      	ldrh	r2, [r2, #22]
 800fba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fba4:	8b09      	ldrh	r1, [r1, #24]
 800fba6:	9102      	str	r1, [sp, #8]
 800fba8:	9201      	str	r2, [sp, #4]
 800fbaa:	9300      	str	r3, [sp, #0]
 800fbac:	462b      	mov	r3, r5
 800fbae:	4622      	mov	r2, r4
 800fbb0:	4601      	mov	r1, r0
 800fbb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbb4:	f004 feac 	bl	8014910 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc0:	7d1b      	ldrb	r3, [r3, #20]
 800fbc2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fbce:	6838      	ldr	r0, [r7, #0]
 800fbd0:	f7fe fff0 	bl	800ebb4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fbd4:	4b31      	ldr	r3, [pc, #196]	; (800fc9c <tcp_slowtmr+0x5a4>)
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d004      	beq.n	800fbea <tcp_slowtmr+0x4f2>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f06f 010c 	mvn.w	r1, #12
 800fbe6:	68b8      	ldr	r0, [r7, #8]
 800fbe8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fbea:	4b2c      	ldr	r3, [pc, #176]	; (800fc9c <tcp_slowtmr+0x5a4>)
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d037      	beq.n	800fc62 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fbf2:	e592      	b.n	800f71a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc00:	7f1b      	ldrb	r3, [r3, #28]
 800fc02:	3301      	adds	r3, #1
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc08:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0c:	7f1a      	ldrb	r2, [r3, #28]
 800fc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc10:	7f5b      	ldrb	r3, [r3, #29]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d325      	bcc.n	800fc62 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc18:	2200      	movs	r2, #0
 800fc1a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fc1c:	4b1f      	ldr	r3, [pc, #124]	; (800fc9c <tcp_slowtmr+0x5a4>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00b      	beq.n	800fc44 <tcp_slowtmr+0x54c>
 800fc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc34:	6912      	ldr	r2, [r2, #16]
 800fc36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc38:	4610      	mov	r0, r2
 800fc3a:	4798      	blx	r3
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fc42:	e002      	b.n	800fc4a <tcp_slowtmr+0x552>
 800fc44:	2300      	movs	r3, #0
 800fc46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fc4a:	4b14      	ldr	r3, [pc, #80]	; (800fc9c <tcp_slowtmr+0x5a4>)
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d000      	beq.n	800fc54 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fc52:	e562      	b.n	800f71a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fc54:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d102      	bne.n	800fc62 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fc5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc5e:	f004 f8a3 	bl	8013da8 <tcp_output>
  while (pcb != NULL) {
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f47f ad5e 	bne.w	800f726 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fc6e:	4b0c      	ldr	r3, [pc, #48]	; (800fca0 <tcp_slowtmr+0x5a8>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fc74:	e069      	b.n	800fd4a <tcp_slowtmr+0x652>
 800fc76:	bf00      	nop
 800fc78:	2000d8e0 	.word	0x2000d8e0
 800fc7c:	000a4cb8 	.word	0x000a4cb8
 800fc80:	10624dd3 	.word	0x10624dd3
 800fc84:	000124f8 	.word	0x000124f8
 800fc88:	2000d8dc 	.word	0x2000d8dc
 800fc8c:	0801a67c 	.word	0x0801a67c
 800fc90:	0801aab4 	.word	0x0801aab4
 800fc94:	0801a6c0 	.word	0x0801a6c0
 800fc98:	0801aae0 	.word	0x0801aae0
 800fc9c:	2000d8d8 	.word	0x2000d8d8
 800fca0:	2000d8ec 	.word	0x2000d8ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	7d1b      	ldrb	r3, [r3, #20]
 800fca8:	2b0a      	cmp	r3, #10
 800fcaa:	d006      	beq.n	800fcba <tcp_slowtmr+0x5c2>
 800fcac:	4b2b      	ldr	r3, [pc, #172]	; (800fd5c <tcp_slowtmr+0x664>)
 800fcae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fcb2:	492b      	ldr	r1, [pc, #172]	; (800fd60 <tcp_slowtmr+0x668>)
 800fcb4:	482b      	ldr	r0, [pc, #172]	; (800fd64 <tcp_slowtmr+0x66c>)
 800fcb6:	f008 fa79 	bl	80181ac <iprintf>
    pcb_remove = 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fcc0:	4b29      	ldr	r3, [pc, #164]	; (800fd68 <tcp_slowtmr+0x670>)
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc6:	6a1b      	ldr	r3, [r3, #32]
 800fcc8:	1ad3      	subs	r3, r2, r3
 800fcca:	2bf0      	cmp	r3, #240	; 0xf0
 800fccc:	d904      	bls.n	800fcd8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d02f      	beq.n	800fd40 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fce2:	f000 fbf9 	bl	80104d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d010      	beq.n	800fd0e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fcec:	4b1f      	ldr	r3, [pc, #124]	; (800fd6c <tcp_slowtmr+0x674>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d106      	bne.n	800fd04 <tcp_slowtmr+0x60c>
 800fcf6:	4b19      	ldr	r3, [pc, #100]	; (800fd5c <tcp_slowtmr+0x664>)
 800fcf8:	f240 52af 	movw	r2, #1455	; 0x5af
 800fcfc:	491c      	ldr	r1, [pc, #112]	; (800fd70 <tcp_slowtmr+0x678>)
 800fcfe:	4819      	ldr	r0, [pc, #100]	; (800fd64 <tcp_slowtmr+0x66c>)
 800fd00:	f008 fa54 	bl	80181ac <iprintf>
        prev->next = pcb->next;
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	68da      	ldr	r2, [r3, #12]
 800fd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0a:	60da      	str	r2, [r3, #12]
 800fd0c:	e00f      	b.n	800fd2e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fd0e:	4b17      	ldr	r3, [pc, #92]	; (800fd6c <tcp_slowtmr+0x674>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d006      	beq.n	800fd26 <tcp_slowtmr+0x62e>
 800fd18:	4b10      	ldr	r3, [pc, #64]	; (800fd5c <tcp_slowtmr+0x664>)
 800fd1a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fd1e:	4915      	ldr	r1, [pc, #84]	; (800fd74 <tcp_slowtmr+0x67c>)
 800fd20:	4810      	ldr	r0, [pc, #64]	; (800fd64 <tcp_slowtmr+0x66c>)
 800fd22:	f008 fa43 	bl	80181ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	4a10      	ldr	r2, [pc, #64]	; (800fd6c <tcp_slowtmr+0x674>)
 800fd2c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd30:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fd38:	69f8      	ldr	r0, [r7, #28]
 800fd3a:	f7fe ff3b 	bl	800ebb4 <tcp_free>
 800fd3e:	e004      	b.n	800fd4a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1a9      	bne.n	800fca4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	3730      	adds	r7, #48	; 0x30
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bdb0      	pop	{r4, r5, r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	0801a67c 	.word	0x0801a67c
 800fd60:	0801ab0c 	.word	0x0801ab0c
 800fd64:	0801a6c0 	.word	0x0801a6c0
 800fd68:	2000d8e0 	.word	0x2000d8e0
 800fd6c:	2000d8ec 	.word	0x2000d8ec
 800fd70:	0801ab3c 	.word	0x0801ab3c
 800fd74:	0801ab64 	.word	0x0801ab64

0800fd78 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fd7e:	4b2d      	ldr	r3, [pc, #180]	; (800fe34 <tcp_fasttmr+0xbc>)
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	3301      	adds	r3, #1
 800fd84:	b2da      	uxtb	r2, r3
 800fd86:	4b2b      	ldr	r3, [pc, #172]	; (800fe34 <tcp_fasttmr+0xbc>)
 800fd88:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fd8a:	4b2b      	ldr	r3, [pc, #172]	; (800fe38 <tcp_fasttmr+0xc0>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fd90:	e048      	b.n	800fe24 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	7f9a      	ldrb	r2, [r3, #30]
 800fd96:	4b27      	ldr	r3, [pc, #156]	; (800fe34 <tcp_fasttmr+0xbc>)
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d03f      	beq.n	800fe1e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fd9e:	4b25      	ldr	r3, [pc, #148]	; (800fe34 <tcp_fasttmr+0xbc>)
 800fda0:	781a      	ldrb	r2, [r3, #0]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	8b5b      	ldrh	r3, [r3, #26]
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d010      	beq.n	800fdd4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	8b5b      	ldrh	r3, [r3, #26]
 800fdb6:	f043 0302 	orr.w	r3, r3, #2
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f003 fff1 	bl	8013da8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	8b5b      	ldrh	r3, [r3, #26]
 800fdca:	f023 0303 	bic.w	r3, r3, #3
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	8b5b      	ldrh	r3, [r3, #26]
 800fdd8:	f003 0308 	and.w	r3, r3, #8
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d009      	beq.n	800fdf4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	8b5b      	ldrh	r3, [r3, #26]
 800fde4:	f023 0308 	bic.w	r3, r3, #8
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7ff f874 	bl	800eedc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00a      	beq.n	800fe18 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fe02:	4b0e      	ldr	r3, [pc, #56]	; (800fe3c <tcp_fasttmr+0xc4>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 f819 	bl	800fe40 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fe0e:	4b0b      	ldr	r3, [pc, #44]	; (800fe3c <tcp_fasttmr+0xc4>)
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d000      	beq.n	800fe18 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fe16:	e7b8      	b.n	800fd8a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	607b      	str	r3, [r7, #4]
 800fe1c:	e002      	b.n	800fe24 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1b3      	bne.n	800fd92 <tcp_fasttmr+0x1a>
    }
  }
}
 800fe2a:	bf00      	nop
 800fe2c:	bf00      	nop
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	20004b76 	.word	0x20004b76
 800fe38:	2000d8dc 	.word	0x2000d8dc
 800fe3c:	2000d8d8 	.word	0x2000d8d8

0800fe40 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fe40:	b590      	push	{r4, r7, lr}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d109      	bne.n	800fe62 <tcp_process_refused_data+0x22>
 800fe4e:	4b37      	ldr	r3, [pc, #220]	; (800ff2c <tcp_process_refused_data+0xec>)
 800fe50:	f240 6209 	movw	r2, #1545	; 0x609
 800fe54:	4936      	ldr	r1, [pc, #216]	; (800ff30 <tcp_process_refused_data+0xf0>)
 800fe56:	4837      	ldr	r0, [pc, #220]	; (800ff34 <tcp_process_refused_data+0xf4>)
 800fe58:	f008 f9a8 	bl	80181ac <iprintf>
 800fe5c:	f06f 030f 	mvn.w	r3, #15
 800fe60:	e060      	b.n	800ff24 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe66:	7b5b      	ldrb	r3, [r3, #13]
 800fe68:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe6e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <tcp_process_refused_data+0x58>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6918      	ldr	r0, [r3, #16]
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	68ba      	ldr	r2, [r7, #8]
 800fe8e:	6879      	ldr	r1, [r7, #4]
 800fe90:	47a0      	blx	r4
 800fe92:	4603      	mov	r3, r0
 800fe94:	73fb      	strb	r3, [r7, #15]
 800fe96:	e007      	b.n	800fea8 <tcp_process_refused_data+0x68>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	6879      	ldr	r1, [r7, #4]
 800fe9e:	2000      	movs	r0, #0
 800fea0:	f000 f8a4 	bl	800ffec <tcp_recv_null>
 800fea4:	4603      	mov	r3, r0
 800fea6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d12a      	bne.n	800ff06 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800feb0:	7bbb      	ldrb	r3, [r7, #14]
 800feb2:	f003 0320 	and.w	r3, r3, #32
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d033      	beq.n	800ff22 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800febe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fec2:	d005      	beq.n	800fed0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fec8:	3301      	adds	r3, #1
 800feca:	b29a      	uxth	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00b      	beq.n	800fef2 <tcp_process_refused_data+0xb2>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6918      	ldr	r0, [r3, #16]
 800fee4:	2300      	movs	r3, #0
 800fee6:	2200      	movs	r2, #0
 800fee8:	6879      	ldr	r1, [r7, #4]
 800feea:	47a0      	blx	r4
 800feec:	4603      	mov	r3, r0
 800feee:	73fb      	strb	r3, [r7, #15]
 800fef0:	e001      	b.n	800fef6 <tcp_process_refused_data+0xb6>
 800fef2:	2300      	movs	r3, #0
 800fef4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fefa:	f113 0f0d 	cmn.w	r3, #13
 800fefe:	d110      	bne.n	800ff22 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ff00:	f06f 030c 	mvn.w	r3, #12
 800ff04:	e00e      	b.n	800ff24 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ff06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff0a:	f113 0f0d 	cmn.w	r3, #13
 800ff0e:	d102      	bne.n	800ff16 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ff10:	f06f 030c 	mvn.w	r3, #12
 800ff14:	e006      	b.n	800ff24 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	68ba      	ldr	r2, [r7, #8]
 800ff1a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ff1c:	f06f 0304 	mvn.w	r3, #4
 800ff20:	e000      	b.n	800ff24 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ff22:	2300      	movs	r3, #0
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd90      	pop	{r4, r7, pc}
 800ff2c:	0801a67c 	.word	0x0801a67c
 800ff30:	0801ab8c 	.word	0x0801ab8c
 800ff34:	0801a6c0 	.word	0x0801a6c0

0800ff38 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ff40:	e007      	b.n	800ff52 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f80a 	bl	800ff62 <tcp_seg_free>
    seg = next;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d1f4      	bne.n	800ff42 <tcp_segs_free+0xa>
  }
}
 800ff58:	bf00      	nop
 800ff5a:	bf00      	nop
 800ff5c:	3710      	adds	r7, #16
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b082      	sub	sp, #8
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d00c      	beq.n	800ff8a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d004      	beq.n	800ff82 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fe fb6d 	bl	800e65c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ff82:	6879      	ldr	r1, [r7, #4]
 800ff84:	2003      	movs	r0, #3
 800ff86:	f7fd fcc5 	bl	800d914 <memp_free>
  }
}
 800ff8a:	bf00      	nop
 800ff8c:	3708      	adds	r7, #8
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
	...

0800ff94 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <tcp_seg_copy+0x1c>
 800ffa2:	4b0f      	ldr	r3, [pc, #60]	; (800ffe0 <tcp_seg_copy+0x4c>)
 800ffa4:	f240 6282 	movw	r2, #1666	; 0x682
 800ffa8:	490e      	ldr	r1, [pc, #56]	; (800ffe4 <tcp_seg_copy+0x50>)
 800ffaa:	480f      	ldr	r0, [pc, #60]	; (800ffe8 <tcp_seg_copy+0x54>)
 800ffac:	f008 f8fe 	bl	80181ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ffb0:	2003      	movs	r0, #3
 800ffb2:	f7fd fc5d 	bl	800d870 <memp_malloc>
 800ffb6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d101      	bne.n	800ffc2 <tcp_seg_copy+0x2e>
    return NULL;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	e00a      	b.n	800ffd8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ffc2:	2210      	movs	r2, #16
 800ffc4:	6879      	ldr	r1, [r7, #4]
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f008 f87f 	bl	80180ca <memcpy>
  pbuf_ref(cseg->p);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fe fbe9 	bl	800e7a8 <pbuf_ref>
  return cseg;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	0801a67c 	.word	0x0801a67c
 800ffe4:	0801abd0 	.word	0x0801abd0
 800ffe8:	0801a6c0 	.word	0x0801a6c0

0800ffec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]
 800fff8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d109      	bne.n	8010014 <tcp_recv_null+0x28>
 8010000:	4b12      	ldr	r3, [pc, #72]	; (801004c <tcp_recv_null+0x60>)
 8010002:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010006:	4912      	ldr	r1, [pc, #72]	; (8010050 <tcp_recv_null+0x64>)
 8010008:	4812      	ldr	r0, [pc, #72]	; (8010054 <tcp_recv_null+0x68>)
 801000a:	f008 f8cf 	bl	80181ac <iprintf>
 801000e:	f06f 030f 	mvn.w	r3, #15
 8010012:	e016      	b.n	8010042 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d009      	beq.n	801002e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	891b      	ldrh	r3, [r3, #8]
 801001e:	4619      	mov	r1, r3
 8010020:	68b8      	ldr	r0, [r7, #8]
 8010022:	f7ff fad3 	bl	800f5cc <tcp_recved>
    pbuf_free(p);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7fe fb18 	bl	800e65c <pbuf_free>
 801002c:	e008      	b.n	8010040 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801002e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d104      	bne.n	8010040 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010036:	68b8      	ldr	r0, [r7, #8]
 8010038:	f7fe ffba 	bl	800efb0 <tcp_close>
 801003c:	4603      	mov	r3, r0
 801003e:	e000      	b.n	8010042 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010040:	2300      	movs	r3, #0
}
 8010042:	4618      	mov	r0, r3
 8010044:	3710      	adds	r7, #16
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	0801a67c 	.word	0x0801a67c
 8010050:	0801abec 	.word	0x0801abec
 8010054:	0801a6c0 	.word	0x0801a6c0

08010058 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	4603      	mov	r3, r0
 8010060:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010066:	2b00      	cmp	r3, #0
 8010068:	db01      	blt.n	801006e <tcp_kill_prio+0x16>
 801006a:	79fb      	ldrb	r3, [r7, #7]
 801006c:	e000      	b.n	8010070 <tcp_kill_prio+0x18>
 801006e:	237f      	movs	r3, #127	; 0x7f
 8010070:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010072:	7afb      	ldrb	r3, [r7, #11]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d034      	beq.n	80100e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010078:	7afb      	ldrb	r3, [r7, #11]
 801007a:	3b01      	subs	r3, #1
 801007c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010082:	2300      	movs	r3, #0
 8010084:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010086:	4b19      	ldr	r3, [pc, #100]	; (80100ec <tcp_kill_prio+0x94>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	617b      	str	r3, [r7, #20]
 801008c:	e01f      	b.n	80100ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	7d5b      	ldrb	r3, [r3, #21]
 8010092:	7afa      	ldrb	r2, [r7, #11]
 8010094:	429a      	cmp	r2, r3
 8010096:	d80c      	bhi.n	80100b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801009c:	7afa      	ldrb	r2, [r7, #11]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d112      	bne.n	80100c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80100a2:	4b13      	ldr	r3, [pc, #76]	; (80100f0 <tcp_kill_prio+0x98>)
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d80a      	bhi.n	80100c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80100b2:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <tcp_kill_prio+0x98>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	6a1b      	ldr	r3, [r3, #32]
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	7d5b      	ldrb	r3, [r3, #21]
 80100c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	617b      	str	r3, [r7, #20]
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d1dc      	bne.n	801008e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d004      	beq.n	80100e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80100da:	6938      	ldr	r0, [r7, #16]
 80100dc:	f7ff f8ae 	bl	800f23c <tcp_abort>
 80100e0:	e000      	b.n	80100e4 <tcp_kill_prio+0x8c>
    return;
 80100e2:	bf00      	nop
  }
}
 80100e4:	3718      	adds	r7, #24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	2000d8dc 	.word	0x2000d8dc
 80100f0:	2000d8e0 	.word	0x2000d8e0

080100f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b086      	sub	sp, #24
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	2b08      	cmp	r3, #8
 8010102:	d009      	beq.n	8010118 <tcp_kill_state+0x24>
 8010104:	79fb      	ldrb	r3, [r7, #7]
 8010106:	2b09      	cmp	r3, #9
 8010108:	d006      	beq.n	8010118 <tcp_kill_state+0x24>
 801010a:	4b1a      	ldr	r3, [pc, #104]	; (8010174 <tcp_kill_state+0x80>)
 801010c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010110:	4919      	ldr	r1, [pc, #100]	; (8010178 <tcp_kill_state+0x84>)
 8010112:	481a      	ldr	r0, [pc, #104]	; (801017c <tcp_kill_state+0x88>)
 8010114:	f008 f84a 	bl	80181ac <iprintf>

  inactivity = 0;
 8010118:	2300      	movs	r3, #0
 801011a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801011c:	2300      	movs	r3, #0
 801011e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010120:	4b17      	ldr	r3, [pc, #92]	; (8010180 <tcp_kill_state+0x8c>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	617b      	str	r3, [r7, #20]
 8010126:	e017      	b.n	8010158 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	7d1b      	ldrb	r3, [r3, #20]
 801012c:	79fa      	ldrb	r2, [r7, #7]
 801012e:	429a      	cmp	r2, r3
 8010130:	d10f      	bne.n	8010152 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010132:	4b14      	ldr	r3, [pc, #80]	; (8010184 <tcp_kill_state+0x90>)
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	6a1b      	ldr	r3, [r3, #32]
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	68fa      	ldr	r2, [r7, #12]
 801013e:	429a      	cmp	r2, r3
 8010140:	d807      	bhi.n	8010152 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010142:	4b10      	ldr	r3, [pc, #64]	; (8010184 <tcp_kill_state+0x90>)
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	6a1b      	ldr	r3, [r3, #32]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	617b      	str	r3, [r7, #20]
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1e4      	bne.n	8010128 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d003      	beq.n	801016c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010164:	2100      	movs	r1, #0
 8010166:	6938      	ldr	r0, [r7, #16]
 8010168:	f7fe ffaa 	bl	800f0c0 <tcp_abandon>
  }
}
 801016c:	bf00      	nop
 801016e:	3718      	adds	r7, #24
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	0801a67c 	.word	0x0801a67c
 8010178:	0801ac08 	.word	0x0801ac08
 801017c:	0801a6c0 	.word	0x0801a6c0
 8010180:	2000d8dc 	.word	0x2000d8dc
 8010184:	2000d8e0 	.word	0x2000d8e0

08010188 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801018e:	2300      	movs	r3, #0
 8010190:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010196:	4b12      	ldr	r3, [pc, #72]	; (80101e0 <tcp_kill_timewait+0x58>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	60fb      	str	r3, [r7, #12]
 801019c:	e012      	b.n	80101c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801019e:	4b11      	ldr	r3, [pc, #68]	; (80101e4 <tcp_kill_timewait+0x5c>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6a1b      	ldr	r3, [r3, #32]
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	687a      	ldr	r2, [r7, #4]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d807      	bhi.n	80101be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80101ae:	4b0d      	ldr	r3, [pc, #52]	; (80101e4 <tcp_kill_timewait+0x5c>)
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6a1b      	ldr	r3, [r3, #32]
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	60fb      	str	r3, [r7, #12]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1e9      	bne.n	801019e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d002      	beq.n	80101d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80101d0:	68b8      	ldr	r0, [r7, #8]
 80101d2:	f7ff f833 	bl	800f23c <tcp_abort>
  }
}
 80101d6:	bf00      	nop
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	2000d8ec 	.word	0x2000d8ec
 80101e4:	2000d8e0 	.word	0x2000d8e0

080101e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80101ee:	4b10      	ldr	r3, [pc, #64]	; (8010230 <tcp_handle_closepend+0x48>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80101f4:	e014      	b.n	8010220 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	8b5b      	ldrh	r3, [r3, #26]
 8010200:	f003 0308 	and.w	r3, r3, #8
 8010204:	2b00      	cmp	r3, #0
 8010206:	d009      	beq.n	801021c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	8b5b      	ldrh	r3, [r3, #26]
 801020c:	f023 0308 	bic.w	r3, r3, #8
 8010210:	b29a      	uxth	r2, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f7fe fe60 	bl	800eedc <tcp_close_shutdown_fin>
    }
    pcb = next;
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1e7      	bne.n	80101f6 <tcp_handle_closepend+0xe>
  }
}
 8010226:	bf00      	nop
 8010228:	bf00      	nop
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	2000d8dc 	.word	0x2000d8dc

08010234 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	4603      	mov	r3, r0
 801023c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801023e:	2001      	movs	r0, #1
 8010240:	f7fd fb16 	bl	800d870 <memp_malloc>
 8010244:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d126      	bne.n	801029a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801024c:	f7ff ffcc 	bl	80101e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010250:	f7ff ff9a 	bl	8010188 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010254:	2001      	movs	r0, #1
 8010256:	f7fd fb0b 	bl	800d870 <memp_malloc>
 801025a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d11b      	bne.n	801029a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010262:	2009      	movs	r0, #9
 8010264:	f7ff ff46 	bl	80100f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010268:	2001      	movs	r0, #1
 801026a:	f7fd fb01 	bl	800d870 <memp_malloc>
 801026e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d111      	bne.n	801029a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010276:	2008      	movs	r0, #8
 8010278:	f7ff ff3c 	bl	80100f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801027c:	2001      	movs	r0, #1
 801027e:	f7fd faf7 	bl	800d870 <memp_malloc>
 8010282:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d107      	bne.n	801029a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff fee3 	bl	8010058 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010292:	2001      	movs	r0, #1
 8010294:	f7fd faec 	bl	800d870 <memp_malloc>
 8010298:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d03f      	beq.n	8010320 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80102a0:	229c      	movs	r2, #156	; 0x9c
 80102a2:	2100      	movs	r1, #0
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f007 ff1e 	bl	80180e6 <memset>
    pcb->prio = prio;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	79fa      	ldrb	r2, [r7, #7]
 80102ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80102b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80102c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	22ff      	movs	r2, #255	; 0xff
 80102ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80102d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2206      	movs	r2, #6
 80102dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2206      	movs	r2, #6
 80102e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2201      	movs	r2, #1
 80102f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80102f6:	4b0d      	ldr	r3, [pc, #52]	; (801032c <tcp_alloc+0xf8>)
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80102fe:	4b0c      	ldr	r3, [pc, #48]	; (8010330 <tcp_alloc+0xfc>)
 8010300:	781a      	ldrb	r2, [r3, #0]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801030c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4a08      	ldr	r2, [pc, #32]	; (8010334 <tcp_alloc+0x100>)
 8010314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	4a07      	ldr	r2, [pc, #28]	; (8010338 <tcp_alloc+0x104>)
 801031c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010320:	68fb      	ldr	r3, [r7, #12]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	2000d8e0 	.word	0x2000d8e0
 8010330:	20004b76 	.word	0x20004b76
 8010334:	0800ffed 	.word	0x0800ffed
 8010338:	006ddd00 	.word	0x006ddd00

0801033c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	4603      	mov	r3, r0
 8010344:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010346:	2040      	movs	r0, #64	; 0x40
 8010348:	f7ff ff74 	bl	8010234 <tcp_alloc>
 801034c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801034e:	68fb      	ldr	r3, [r7, #12]
}
 8010350:	4618      	mov	r0, r3
 8010352:	3710      	adds	r7, #16
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	683a      	ldr	r2, [r7, #0]
 801036c:	611a      	str	r2, [r3, #16]
  }
}
 801036e:	bf00      	nop
 8010370:	370c      	adds	r7, #12
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
	...

0801037c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00e      	beq.n	80103aa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	7d1b      	ldrb	r3, [r3, #20]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d106      	bne.n	80103a2 <tcp_recv+0x26>
 8010394:	4b07      	ldr	r3, [pc, #28]	; (80103b4 <tcp_recv+0x38>)
 8010396:	f240 72df 	movw	r2, #2015	; 0x7df
 801039a:	4907      	ldr	r1, [pc, #28]	; (80103b8 <tcp_recv+0x3c>)
 801039c:	4807      	ldr	r0, [pc, #28]	; (80103bc <tcp_recv+0x40>)
 801039e:	f007 ff05 	bl	80181ac <iprintf>
    pcb->recv = recv;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	683a      	ldr	r2, [r7, #0]
 80103a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80103aa:	bf00      	nop
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	0801a67c 	.word	0x0801a67c
 80103b8:	0801ac18 	.word	0x0801ac18
 80103bc:	0801a6c0 	.word	0x0801a6c0

080103c0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00e      	beq.n	80103ee <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	7d1b      	ldrb	r3, [r3, #20]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d106      	bne.n	80103e6 <tcp_sent+0x26>
 80103d8:	4b07      	ldr	r3, [pc, #28]	; (80103f8 <tcp_sent+0x38>)
 80103da:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80103de:	4907      	ldr	r1, [pc, #28]	; (80103fc <tcp_sent+0x3c>)
 80103e0:	4807      	ldr	r0, [pc, #28]	; (8010400 <tcp_sent+0x40>)
 80103e2:	f007 fee3 	bl	80181ac <iprintf>
    pcb->sent = sent;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	683a      	ldr	r2, [r7, #0]
 80103ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80103ee:	bf00      	nop
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	0801a67c 	.word	0x0801a67c
 80103fc:	0801ac40 	.word	0x0801ac40
 8010400:	0801a6c0 	.word	0x0801a6c0

08010404 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00e      	beq.n	8010432 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	7d1b      	ldrb	r3, [r3, #20]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d106      	bne.n	801042a <tcp_err+0x26>
 801041c:	4b07      	ldr	r3, [pc, #28]	; (801043c <tcp_err+0x38>)
 801041e:	f640 020d 	movw	r2, #2061	; 0x80d
 8010422:	4907      	ldr	r1, [pc, #28]	; (8010440 <tcp_err+0x3c>)
 8010424:	4807      	ldr	r0, [pc, #28]	; (8010444 <tcp_err+0x40>)
 8010426:	f007 fec1 	bl	80181ac <iprintf>
    pcb->errf = err;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	683a      	ldr	r2, [r7, #0]
 801042e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010432:	bf00      	nop
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	0801a67c 	.word	0x0801a67c
 8010440:	0801ac68 	.word	0x0801ac68
 8010444:	0801a6c0 	.word	0x0801a6c0

08010448 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d008      	beq.n	801046a <tcp_accept+0x22>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	7d1b      	ldrb	r3, [r3, #20]
 801045c:	2b01      	cmp	r3, #1
 801045e:	d104      	bne.n	801046a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	619a      	str	r2, [r3, #24]
  }
}
 801046a:	bf00      	nop
 801046c:	3714      	adds	r7, #20
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
	...

08010478 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	4613      	mov	r3, r2
 8010484:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d107      	bne.n	801049c <tcp_poll+0x24>
 801048c:	4b0e      	ldr	r3, [pc, #56]	; (80104c8 <tcp_poll+0x50>)
 801048e:	f640 023d 	movw	r2, #2109	; 0x83d
 8010492:	490e      	ldr	r1, [pc, #56]	; (80104cc <tcp_poll+0x54>)
 8010494:	480e      	ldr	r0, [pc, #56]	; (80104d0 <tcp_poll+0x58>)
 8010496:	f007 fe89 	bl	80181ac <iprintf>
 801049a:	e011      	b.n	80104c0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	7d1b      	ldrb	r3, [r3, #20]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d106      	bne.n	80104b2 <tcp_poll+0x3a>
 80104a4:	4b08      	ldr	r3, [pc, #32]	; (80104c8 <tcp_poll+0x50>)
 80104a6:	f640 023e 	movw	r2, #2110	; 0x83e
 80104aa:	490a      	ldr	r1, [pc, #40]	; (80104d4 <tcp_poll+0x5c>)
 80104ac:	4808      	ldr	r0, [pc, #32]	; (80104d0 <tcp_poll+0x58>)
 80104ae:	f007 fe7d 	bl	80181ac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	68ba      	ldr	r2, [r7, #8]
 80104b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	79fa      	ldrb	r2, [r7, #7]
 80104be:	775a      	strb	r2, [r3, #29]
}
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	0801a67c 	.word	0x0801a67c
 80104cc:	0801ac90 	.word	0x0801ac90
 80104d0:	0801a6c0 	.word	0x0801a6c0
 80104d4:	0801aca8 	.word	0x0801aca8

080104d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d107      	bne.n	80104f6 <tcp_pcb_purge+0x1e>
 80104e6:	4b21      	ldr	r3, [pc, #132]	; (801056c <tcp_pcb_purge+0x94>)
 80104e8:	f640 0251 	movw	r2, #2129	; 0x851
 80104ec:	4920      	ldr	r1, [pc, #128]	; (8010570 <tcp_pcb_purge+0x98>)
 80104ee:	4821      	ldr	r0, [pc, #132]	; (8010574 <tcp_pcb_purge+0x9c>)
 80104f0:	f007 fe5c 	bl	80181ac <iprintf>
 80104f4:	e037      	b.n	8010566 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	7d1b      	ldrb	r3, [r3, #20]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d033      	beq.n	8010566 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010502:	2b0a      	cmp	r3, #10
 8010504:	d02f      	beq.n	8010566 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801050a:	2b01      	cmp	r3, #1
 801050c:	d02b      	beq.n	8010566 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010512:	2b00      	cmp	r3, #0
 8010514:	d007      	beq.n	8010526 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801051a:	4618      	mov	r0, r3
 801051c:	f7fe f89e 	bl	800e65c <pbuf_free>
      pcb->refused_data = NULL;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801052a:	2b00      	cmp	r3, #0
 801052c:	d002      	beq.n	8010534 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f986 	bl	8010840 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801053a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010540:	4618      	mov	r0, r3
 8010542:	f7ff fcf9 	bl	800ff38 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801054a:	4618      	mov	r0, r3
 801054c:	f7ff fcf4 	bl	800ff38 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	66da      	str	r2, [r3, #108]	; 0x6c
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	0801a67c 	.word	0x0801a67c
 8010570:	0801acc8 	.word	0x0801acc8
 8010574:	0801a6c0 	.word	0x0801a6c0

08010578 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d106      	bne.n	8010596 <tcp_pcb_remove+0x1e>
 8010588:	4b3e      	ldr	r3, [pc, #248]	; (8010684 <tcp_pcb_remove+0x10c>)
 801058a:	f640 0283 	movw	r2, #2179	; 0x883
 801058e:	493e      	ldr	r1, [pc, #248]	; (8010688 <tcp_pcb_remove+0x110>)
 8010590:	483e      	ldr	r0, [pc, #248]	; (801068c <tcp_pcb_remove+0x114>)
 8010592:	f007 fe0b 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d106      	bne.n	80105aa <tcp_pcb_remove+0x32>
 801059c:	4b39      	ldr	r3, [pc, #228]	; (8010684 <tcp_pcb_remove+0x10c>)
 801059e:	f640 0284 	movw	r2, #2180	; 0x884
 80105a2:	493b      	ldr	r1, [pc, #236]	; (8010690 <tcp_pcb_remove+0x118>)
 80105a4:	4839      	ldr	r0, [pc, #228]	; (801068c <tcp_pcb_remove+0x114>)
 80105a6:	f007 fe01 	bl	80181ac <iprintf>

  TCP_RMV(pcblist, pcb);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	683a      	ldr	r2, [r7, #0]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d105      	bne.n	80105c0 <tcp_pcb_remove+0x48>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	68da      	ldr	r2, [r3, #12]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	601a      	str	r2, [r3, #0]
 80105be:	e013      	b.n	80105e8 <tcp_pcb_remove+0x70>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	60fb      	str	r3, [r7, #12]
 80105c6:	e00c      	b.n	80105e2 <tcp_pcb_remove+0x6a>
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	683a      	ldr	r2, [r7, #0]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d104      	bne.n	80105dc <tcp_pcb_remove+0x64>
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	68da      	ldr	r2, [r3, #12]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	60da      	str	r2, [r3, #12]
 80105da:	e005      	b.n	80105e8 <tcp_pcb_remove+0x70>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	60fb      	str	r3, [r7, #12]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1ef      	bne.n	80105c8 <tcp_pcb_remove+0x50>
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	2200      	movs	r2, #0
 80105ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80105ee:	6838      	ldr	r0, [r7, #0]
 80105f0:	f7ff ff72 	bl	80104d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	7d1b      	ldrb	r3, [r3, #20]
 80105f8:	2b0a      	cmp	r3, #10
 80105fa:	d013      	beq.n	8010624 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010600:	2b01      	cmp	r3, #1
 8010602:	d00f      	beq.n	8010624 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	8b5b      	ldrh	r3, [r3, #26]
 8010608:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801060c:	2b00      	cmp	r3, #0
 801060e:	d009      	beq.n	8010624 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	8b5b      	ldrh	r3, [r3, #26]
 8010614:	f043 0302 	orr.w	r3, r3, #2
 8010618:	b29a      	uxth	r2, r3
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801061e:	6838      	ldr	r0, [r7, #0]
 8010620:	f003 fbc2 	bl	8013da8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	7d1b      	ldrb	r3, [r3, #20]
 8010628:	2b01      	cmp	r3, #1
 801062a:	d020      	beq.n	801066e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <tcp_pcb_remove+0xca>
 8010634:	4b13      	ldr	r3, [pc, #76]	; (8010684 <tcp_pcb_remove+0x10c>)
 8010636:	f640 0293 	movw	r2, #2195	; 0x893
 801063a:	4916      	ldr	r1, [pc, #88]	; (8010694 <tcp_pcb_remove+0x11c>)
 801063c:	4813      	ldr	r0, [pc, #76]	; (801068c <tcp_pcb_remove+0x114>)
 801063e:	f007 fdb5 	bl	80181ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010646:	2b00      	cmp	r3, #0
 8010648:	d006      	beq.n	8010658 <tcp_pcb_remove+0xe0>
 801064a:	4b0e      	ldr	r3, [pc, #56]	; (8010684 <tcp_pcb_remove+0x10c>)
 801064c:	f640 0294 	movw	r2, #2196	; 0x894
 8010650:	4911      	ldr	r1, [pc, #68]	; (8010698 <tcp_pcb_remove+0x120>)
 8010652:	480e      	ldr	r0, [pc, #56]	; (801068c <tcp_pcb_remove+0x114>)
 8010654:	f007 fdaa 	bl	80181ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801065c:	2b00      	cmp	r3, #0
 801065e:	d006      	beq.n	801066e <tcp_pcb_remove+0xf6>
 8010660:	4b08      	ldr	r3, [pc, #32]	; (8010684 <tcp_pcb_remove+0x10c>)
 8010662:	f640 0296 	movw	r2, #2198	; 0x896
 8010666:	490d      	ldr	r1, [pc, #52]	; (801069c <tcp_pcb_remove+0x124>)
 8010668:	4808      	ldr	r0, [pc, #32]	; (801068c <tcp_pcb_remove+0x114>)
 801066a:	f007 fd9f 	bl	80181ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2200      	movs	r2, #0
 8010672:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	2200      	movs	r2, #0
 8010678:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801067a:	bf00      	nop
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	0801a67c 	.word	0x0801a67c
 8010688:	0801ace4 	.word	0x0801ace4
 801068c:	0801a6c0 	.word	0x0801a6c0
 8010690:	0801ad00 	.word	0x0801ad00
 8010694:	0801ad20 	.word	0x0801ad20
 8010698:	0801ad38 	.word	0x0801ad38
 801069c:	0801ad54 	.word	0x0801ad54

080106a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d106      	bne.n	80106bc <tcp_next_iss+0x1c>
 80106ae:	4b0a      	ldr	r3, [pc, #40]	; (80106d8 <tcp_next_iss+0x38>)
 80106b0:	f640 02af 	movw	r2, #2223	; 0x8af
 80106b4:	4909      	ldr	r1, [pc, #36]	; (80106dc <tcp_next_iss+0x3c>)
 80106b6:	480a      	ldr	r0, [pc, #40]	; (80106e0 <tcp_next_iss+0x40>)
 80106b8:	f007 fd78 	bl	80181ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80106bc:	4b09      	ldr	r3, [pc, #36]	; (80106e4 <tcp_next_iss+0x44>)
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	4b09      	ldr	r3, [pc, #36]	; (80106e8 <tcp_next_iss+0x48>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4413      	add	r3, r2
 80106c6:	4a07      	ldr	r2, [pc, #28]	; (80106e4 <tcp_next_iss+0x44>)
 80106c8:	6013      	str	r3, [r2, #0]
  return iss;
 80106ca:	4b06      	ldr	r3, [pc, #24]	; (80106e4 <tcp_next_iss+0x44>)
 80106cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	0801a67c 	.word	0x0801a67c
 80106dc:	0801ad6c 	.word	0x0801ad6c
 80106e0:	0801a6c0 	.word	0x0801a6c0
 80106e4:	200000c8 	.word	0x200000c8
 80106e8:	2000d8e0 	.word	0x2000d8e0

080106ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	4603      	mov	r3, r0
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d106      	bne.n	801070e <tcp_eff_send_mss_netif+0x22>
 8010700:	4b14      	ldr	r3, [pc, #80]	; (8010754 <tcp_eff_send_mss_netif+0x68>)
 8010702:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010706:	4914      	ldr	r1, [pc, #80]	; (8010758 <tcp_eff_send_mss_netif+0x6c>)
 8010708:	4814      	ldr	r0, [pc, #80]	; (801075c <tcp_eff_send_mss_netif+0x70>)
 801070a:	f007 fd4f 	bl	80181ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d101      	bne.n	8010718 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010714:	89fb      	ldrh	r3, [r7, #14]
 8010716:	e019      	b.n	801074c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801071c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801071e:	8afb      	ldrh	r3, [r7, #22]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d012      	beq.n	801074a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010724:	2328      	movs	r3, #40	; 0x28
 8010726:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010728:	8afa      	ldrh	r2, [r7, #22]
 801072a:	8abb      	ldrh	r3, [r7, #20]
 801072c:	429a      	cmp	r2, r3
 801072e:	d904      	bls.n	801073a <tcp_eff_send_mss_netif+0x4e>
 8010730:	8afa      	ldrh	r2, [r7, #22]
 8010732:	8abb      	ldrh	r3, [r7, #20]
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	b29b      	uxth	r3, r3
 8010738:	e000      	b.n	801073c <tcp_eff_send_mss_netif+0x50>
 801073a:	2300      	movs	r3, #0
 801073c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801073e:	8a7a      	ldrh	r2, [r7, #18]
 8010740:	89fb      	ldrh	r3, [r7, #14]
 8010742:	4293      	cmp	r3, r2
 8010744:	bf28      	it	cs
 8010746:	4613      	movcs	r3, r2
 8010748:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801074a:	89fb      	ldrh	r3, [r7, #14]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3718      	adds	r7, #24
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}
 8010754:	0801a67c 	.word	0x0801a67c
 8010758:	0801ad88 	.word	0x0801ad88
 801075c:	0801a6c0 	.word	0x0801a6c0

08010760 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d119      	bne.n	80107a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010774:	4b10      	ldr	r3, [pc, #64]	; (80107b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010776:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801077a:	4910      	ldr	r1, [pc, #64]	; (80107bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801077c:	4810      	ldr	r0, [pc, #64]	; (80107c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801077e:	f007 fd15 	bl	80181ac <iprintf>

  while (pcb != NULL) {
 8010782:	e011      	b.n	80107a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	429a      	cmp	r2, r3
 801078e:	d108      	bne.n	80107a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f7fe fd50 	bl	800f23c <tcp_abort>
      pcb = next;
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	60fb      	str	r3, [r7, #12]
 80107a0:	e002      	b.n	80107a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1ea      	bne.n	8010784 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80107ae:	bf00      	nop
 80107b0:	bf00      	nop
 80107b2:	3710      	adds	r7, #16
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	0801a67c 	.word	0x0801a67c
 80107bc:	0801adb0 	.word	0x0801adb0
 80107c0:	0801a6c0 	.word	0x0801a6c0

080107c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d02a      	beq.n	801082a <tcp_netif_ip_addr_changed+0x66>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d026      	beq.n	801082a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80107dc:	4b15      	ldr	r3, [pc, #84]	; (8010834 <tcp_netif_ip_addr_changed+0x70>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4619      	mov	r1, r3
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7ff ffbc 	bl	8010760 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80107e8:	4b13      	ldr	r3, [pc, #76]	; (8010838 <tcp_netif_ip_addr_changed+0x74>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4619      	mov	r1, r3
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f7ff ffb6 	bl	8010760 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d017      	beq.n	801082a <tcp_netif_ip_addr_changed+0x66>
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d013      	beq.n	801082a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010802:	4b0e      	ldr	r3, [pc, #56]	; (801083c <tcp_netif_ip_addr_changed+0x78>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	60fb      	str	r3, [r7, #12]
 8010808:	e00c      	b.n	8010824 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	429a      	cmp	r2, r3
 8010814:	d103      	bne.n	801081e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	60fb      	str	r3, [r7, #12]
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1ef      	bne.n	801080a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801082a:	bf00      	nop
 801082c:	3710      	adds	r7, #16
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}
 8010832:	bf00      	nop
 8010834:	2000d8dc 	.word	0x2000d8dc
 8010838:	2000d8e8 	.word	0x2000d8e8
 801083c:	2000d8e4 	.word	0x2000d8e4

08010840 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801084c:	2b00      	cmp	r3, #0
 801084e:	d007      	beq.n	8010860 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010854:	4618      	mov	r0, r3
 8010856:	f7ff fb6f 	bl	800ff38 <tcp_segs_free>
    pcb->ooseq = NULL;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010860:	bf00      	nop
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010868:	b590      	push	{r4, r7, lr}
 801086a:	b08d      	sub	sp, #52	; 0x34
 801086c:	af04      	add	r7, sp, #16
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d105      	bne.n	8010884 <tcp_input+0x1c>
 8010878:	4b9b      	ldr	r3, [pc, #620]	; (8010ae8 <tcp_input+0x280>)
 801087a:	2283      	movs	r2, #131	; 0x83
 801087c:	499b      	ldr	r1, [pc, #620]	; (8010aec <tcp_input+0x284>)
 801087e:	489c      	ldr	r0, [pc, #624]	; (8010af0 <tcp_input+0x288>)
 8010880:	f007 fc94 	bl	80181ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	4a9a      	ldr	r2, [pc, #616]	; (8010af4 <tcp_input+0x28c>)
 801088a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	895b      	ldrh	r3, [r3, #10]
 8010890:	2b13      	cmp	r3, #19
 8010892:	f240 83c4 	bls.w	801101e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010896:	4b98      	ldr	r3, [pc, #608]	; (8010af8 <tcp_input+0x290>)
 8010898:	695b      	ldr	r3, [r3, #20]
 801089a:	4a97      	ldr	r2, [pc, #604]	; (8010af8 <tcp_input+0x290>)
 801089c:	6812      	ldr	r2, [r2, #0]
 801089e:	4611      	mov	r1, r2
 80108a0:	4618      	mov	r0, r3
 80108a2:	f006 f9e1 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f040 83ba 	bne.w	8011022 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80108ae:	4b92      	ldr	r3, [pc, #584]	; (8010af8 <tcp_input+0x290>)
 80108b0:	695b      	ldr	r3, [r3, #20]
 80108b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80108b6:	2be0      	cmp	r3, #224	; 0xe0
 80108b8:	f000 83b3 	beq.w	8011022 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80108bc:	4b8d      	ldr	r3, [pc, #564]	; (8010af4 <tcp_input+0x28c>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	899b      	ldrh	r3, [r3, #12]
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fc fb1d 	bl	800cf04 <lwip_htons>
 80108ca:	4603      	mov	r3, r0
 80108cc:	0b1b      	lsrs	r3, r3, #12
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80108d6:	7cbb      	ldrb	r3, [r7, #18]
 80108d8:	2b13      	cmp	r3, #19
 80108da:	f240 83a4 	bls.w	8011026 <tcp_input+0x7be>
 80108de:	7cbb      	ldrb	r3, [r7, #18]
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	891b      	ldrh	r3, [r3, #8]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	f200 839d 	bhi.w	8011026 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80108ec:	7cbb      	ldrb	r3, [r7, #18]
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	3b14      	subs	r3, #20
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	4b81      	ldr	r3, [pc, #516]	; (8010afc <tcp_input+0x294>)
 80108f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80108f8:	4b81      	ldr	r3, [pc, #516]	; (8010b00 <tcp_input+0x298>)
 80108fa:	2200      	movs	r2, #0
 80108fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	895a      	ldrh	r2, [r3, #10]
 8010902:	7cbb      	ldrb	r3, [r7, #18]
 8010904:	b29b      	uxth	r3, r3
 8010906:	429a      	cmp	r2, r3
 8010908:	d309      	bcc.n	801091e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801090a:	4b7c      	ldr	r3, [pc, #496]	; (8010afc <tcp_input+0x294>)
 801090c:	881a      	ldrh	r2, [r3, #0]
 801090e:	4b7d      	ldr	r3, [pc, #500]	; (8010b04 <tcp_input+0x29c>)
 8010910:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010912:	7cbb      	ldrb	r3, [r7, #18]
 8010914:	4619      	mov	r1, r3
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f7fd fe1a 	bl	800e550 <pbuf_remove_header>
 801091c:	e04e      	b.n	80109bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d105      	bne.n	8010932 <tcp_input+0xca>
 8010926:	4b70      	ldr	r3, [pc, #448]	; (8010ae8 <tcp_input+0x280>)
 8010928:	22c2      	movs	r2, #194	; 0xc2
 801092a:	4977      	ldr	r1, [pc, #476]	; (8010b08 <tcp_input+0x2a0>)
 801092c:	4870      	ldr	r0, [pc, #448]	; (8010af0 <tcp_input+0x288>)
 801092e:	f007 fc3d 	bl	80181ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010932:	2114      	movs	r1, #20
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7fd fe0b 	bl	800e550 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	895a      	ldrh	r2, [r3, #10]
 801093e:	4b71      	ldr	r3, [pc, #452]	; (8010b04 <tcp_input+0x29c>)
 8010940:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010942:	4b6e      	ldr	r3, [pc, #440]	; (8010afc <tcp_input+0x294>)
 8010944:	881a      	ldrh	r2, [r3, #0]
 8010946:	4b6f      	ldr	r3, [pc, #444]	; (8010b04 <tcp_input+0x29c>)
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	1ad3      	subs	r3, r2, r3
 801094c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801094e:	4b6d      	ldr	r3, [pc, #436]	; (8010b04 <tcp_input+0x29c>)
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	4619      	mov	r1, r3
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7fd fdfb 	bl	800e550 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	895b      	ldrh	r3, [r3, #10]
 8010960:	8a3a      	ldrh	r2, [r7, #16]
 8010962:	429a      	cmp	r2, r3
 8010964:	f200 8361 	bhi.w	801102a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	4a64      	ldr	r2, [pc, #400]	; (8010b00 <tcp_input+0x298>)
 8010970:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	8a3a      	ldrh	r2, [r7, #16]
 8010978:	4611      	mov	r1, r2
 801097a:	4618      	mov	r0, r3
 801097c:	f7fd fde8 	bl	800e550 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	891a      	ldrh	r2, [r3, #8]
 8010984:	8a3b      	ldrh	r3, [r7, #16]
 8010986:	1ad3      	subs	r3, r2, r3
 8010988:	b29a      	uxth	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	895b      	ldrh	r3, [r3, #10]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d005      	beq.n	80109a2 <tcp_input+0x13a>
 8010996:	4b54      	ldr	r3, [pc, #336]	; (8010ae8 <tcp_input+0x280>)
 8010998:	22df      	movs	r2, #223	; 0xdf
 801099a:	495c      	ldr	r1, [pc, #368]	; (8010b0c <tcp_input+0x2a4>)
 801099c:	4854      	ldr	r0, [pc, #336]	; (8010af0 <tcp_input+0x288>)
 801099e:	f007 fc05 	bl	80181ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	891a      	ldrh	r2, [r3, #8]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	891b      	ldrh	r3, [r3, #8]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d005      	beq.n	80109bc <tcp_input+0x154>
 80109b0:	4b4d      	ldr	r3, [pc, #308]	; (8010ae8 <tcp_input+0x280>)
 80109b2:	22e0      	movs	r2, #224	; 0xe0
 80109b4:	4956      	ldr	r1, [pc, #344]	; (8010b10 <tcp_input+0x2a8>)
 80109b6:	484e      	ldr	r0, [pc, #312]	; (8010af0 <tcp_input+0x288>)
 80109b8:	f007 fbf8 	bl	80181ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80109bc:	4b4d      	ldr	r3, [pc, #308]	; (8010af4 <tcp_input+0x28c>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	881b      	ldrh	r3, [r3, #0]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	4a4b      	ldr	r2, [pc, #300]	; (8010af4 <tcp_input+0x28c>)
 80109c6:	6814      	ldr	r4, [r2, #0]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fc fa9b 	bl	800cf04 <lwip_htons>
 80109ce:	4603      	mov	r3, r0
 80109d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80109d2:	4b48      	ldr	r3, [pc, #288]	; (8010af4 <tcp_input+0x28c>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	885b      	ldrh	r3, [r3, #2]
 80109d8:	b29b      	uxth	r3, r3
 80109da:	4a46      	ldr	r2, [pc, #280]	; (8010af4 <tcp_input+0x28c>)
 80109dc:	6814      	ldr	r4, [r2, #0]
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fc fa90 	bl	800cf04 <lwip_htons>
 80109e4:	4603      	mov	r3, r0
 80109e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80109e8:	4b42      	ldr	r3, [pc, #264]	; (8010af4 <tcp_input+0x28c>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	4a41      	ldr	r2, [pc, #260]	; (8010af4 <tcp_input+0x28c>)
 80109f0:	6814      	ldr	r4, [r2, #0]
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fc fa9b 	bl	800cf2e <lwip_htonl>
 80109f8:	4603      	mov	r3, r0
 80109fa:	6063      	str	r3, [r4, #4]
 80109fc:	6863      	ldr	r3, [r4, #4]
 80109fe:	4a45      	ldr	r2, [pc, #276]	; (8010b14 <tcp_input+0x2ac>)
 8010a00:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010a02:	4b3c      	ldr	r3, [pc, #240]	; (8010af4 <tcp_input+0x28c>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	4a3a      	ldr	r2, [pc, #232]	; (8010af4 <tcp_input+0x28c>)
 8010a0a:	6814      	ldr	r4, [r2, #0]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fc fa8e 	bl	800cf2e <lwip_htonl>
 8010a12:	4603      	mov	r3, r0
 8010a14:	60a3      	str	r3, [r4, #8]
 8010a16:	68a3      	ldr	r3, [r4, #8]
 8010a18:	4a3f      	ldr	r2, [pc, #252]	; (8010b18 <tcp_input+0x2b0>)
 8010a1a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010a1c:	4b35      	ldr	r3, [pc, #212]	; (8010af4 <tcp_input+0x28c>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	89db      	ldrh	r3, [r3, #14]
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	4a33      	ldr	r2, [pc, #204]	; (8010af4 <tcp_input+0x28c>)
 8010a26:	6814      	ldr	r4, [r2, #0]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fc fa6b 	bl	800cf04 <lwip_htons>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010a32:	4b30      	ldr	r3, [pc, #192]	; (8010af4 <tcp_input+0x28c>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	899b      	ldrh	r3, [r3, #12]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fc fa62 	bl	800cf04 <lwip_htons>
 8010a40:	4603      	mov	r3, r0
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	4b34      	ldr	r3, [pc, #208]	; (8010b1c <tcp_input+0x2b4>)
 8010a4c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	891a      	ldrh	r2, [r3, #8]
 8010a52:	4b33      	ldr	r3, [pc, #204]	; (8010b20 <tcp_input+0x2b8>)
 8010a54:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010a56:	4b31      	ldr	r3, [pc, #196]	; (8010b1c <tcp_input+0x2b4>)
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	f003 0303 	and.w	r3, r3, #3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00c      	beq.n	8010a7c <tcp_input+0x214>
    tcplen++;
 8010a62:	4b2f      	ldr	r3, [pc, #188]	; (8010b20 <tcp_input+0x2b8>)
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	3301      	adds	r3, #1
 8010a68:	b29a      	uxth	r2, r3
 8010a6a:	4b2d      	ldr	r3, [pc, #180]	; (8010b20 <tcp_input+0x2b8>)
 8010a6c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	891a      	ldrh	r2, [r3, #8]
 8010a72:	4b2b      	ldr	r3, [pc, #172]	; (8010b20 <tcp_input+0x2b8>)
 8010a74:	881b      	ldrh	r3, [r3, #0]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	f200 82d9 	bhi.w	801102e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a80:	4b28      	ldr	r3, [pc, #160]	; (8010b24 <tcp_input+0x2bc>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	61fb      	str	r3, [r7, #28]
 8010a86:	e09d      	b.n	8010bc4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	7d1b      	ldrb	r3, [r3, #20]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d105      	bne.n	8010a9c <tcp_input+0x234>
 8010a90:	4b15      	ldr	r3, [pc, #84]	; (8010ae8 <tcp_input+0x280>)
 8010a92:	22fb      	movs	r2, #251	; 0xfb
 8010a94:	4924      	ldr	r1, [pc, #144]	; (8010b28 <tcp_input+0x2c0>)
 8010a96:	4816      	ldr	r0, [pc, #88]	; (8010af0 <tcp_input+0x288>)
 8010a98:	f007 fb88 	bl	80181ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	7d1b      	ldrb	r3, [r3, #20]
 8010aa0:	2b0a      	cmp	r3, #10
 8010aa2:	d105      	bne.n	8010ab0 <tcp_input+0x248>
 8010aa4:	4b10      	ldr	r3, [pc, #64]	; (8010ae8 <tcp_input+0x280>)
 8010aa6:	22fc      	movs	r2, #252	; 0xfc
 8010aa8:	4920      	ldr	r1, [pc, #128]	; (8010b2c <tcp_input+0x2c4>)
 8010aaa:	4811      	ldr	r0, [pc, #68]	; (8010af0 <tcp_input+0x288>)
 8010aac:	f007 fb7e 	bl	80181ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	7d1b      	ldrb	r3, [r3, #20]
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d105      	bne.n	8010ac4 <tcp_input+0x25c>
 8010ab8:	4b0b      	ldr	r3, [pc, #44]	; (8010ae8 <tcp_input+0x280>)
 8010aba:	22fd      	movs	r2, #253	; 0xfd
 8010abc:	491c      	ldr	r1, [pc, #112]	; (8010b30 <tcp_input+0x2c8>)
 8010abe:	480c      	ldr	r0, [pc, #48]	; (8010af0 <tcp_input+0x288>)
 8010ac0:	f007 fb74 	bl	80181ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	7a1b      	ldrb	r3, [r3, #8]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d033      	beq.n	8010b34 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	7a1a      	ldrb	r2, [r3, #8]
 8010ad0:	4b09      	ldr	r3, [pc, #36]	; (8010af8 <tcp_input+0x290>)
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ad8:	3301      	adds	r3, #1
 8010ada:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d029      	beq.n	8010b34 <tcp_input+0x2cc>
      prev = pcb;
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	61bb      	str	r3, [r7, #24]
      continue;
 8010ae4:	e06b      	b.n	8010bbe <tcp_input+0x356>
 8010ae6:	bf00      	nop
 8010ae8:	0801ade4 	.word	0x0801ade4
 8010aec:	0801ae18 	.word	0x0801ae18
 8010af0:	0801ae30 	.word	0x0801ae30
 8010af4:	20004b88 	.word	0x20004b88
 8010af8:	20008008 	.word	0x20008008
 8010afc:	20004b8c 	.word	0x20004b8c
 8010b00:	20004b90 	.word	0x20004b90
 8010b04:	20004b8e 	.word	0x20004b8e
 8010b08:	0801ae58 	.word	0x0801ae58
 8010b0c:	0801ae68 	.word	0x0801ae68
 8010b10:	0801ae74 	.word	0x0801ae74
 8010b14:	20004b98 	.word	0x20004b98
 8010b18:	20004b9c 	.word	0x20004b9c
 8010b1c:	20004ba4 	.word	0x20004ba4
 8010b20:	20004ba2 	.word	0x20004ba2
 8010b24:	2000d8dc 	.word	0x2000d8dc
 8010b28:	0801ae94 	.word	0x0801ae94
 8010b2c:	0801aebc 	.word	0x0801aebc
 8010b30:	0801aee8 	.word	0x0801aee8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	8b1a      	ldrh	r2, [r3, #24]
 8010b38:	4b94      	ldr	r3, [pc, #592]	; (8010d8c <tcp_input+0x524>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d13a      	bne.n	8010bba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	8ada      	ldrh	r2, [r3, #22]
 8010b48:	4b90      	ldr	r3, [pc, #576]	; (8010d8c <tcp_input+0x524>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	885b      	ldrh	r3, [r3, #2]
 8010b4e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d132      	bne.n	8010bba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	685a      	ldr	r2, [r3, #4]
 8010b58:	4b8d      	ldr	r3, [pc, #564]	; (8010d90 <tcp_input+0x528>)
 8010b5a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d12c      	bne.n	8010bba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	4b8a      	ldr	r3, [pc, #552]	; (8010d90 <tcp_input+0x528>)
 8010b66:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d126      	bne.n	8010bba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	69fa      	ldr	r2, [r7, #28]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d106      	bne.n	8010b84 <tcp_input+0x31c>
 8010b76:	4b87      	ldr	r3, [pc, #540]	; (8010d94 <tcp_input+0x52c>)
 8010b78:	f240 120d 	movw	r2, #269	; 0x10d
 8010b7c:	4986      	ldr	r1, [pc, #536]	; (8010d98 <tcp_input+0x530>)
 8010b7e:	4887      	ldr	r0, [pc, #540]	; (8010d9c <tcp_input+0x534>)
 8010b80:	f007 fb14 	bl	80181ac <iprintf>
      if (prev != NULL) {
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00a      	beq.n	8010ba0 <tcp_input+0x338>
        prev->next = pcb->next;
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	68da      	ldr	r2, [r3, #12]
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010b92:	4b83      	ldr	r3, [pc, #524]	; (8010da0 <tcp_input+0x538>)
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010b9a:	4a81      	ldr	r2, [pc, #516]	; (8010da0 <tcp_input+0x538>)
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	69fa      	ldr	r2, [r7, #28]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d111      	bne.n	8010bce <tcp_input+0x366>
 8010baa:	4b7a      	ldr	r3, [pc, #488]	; (8010d94 <tcp_input+0x52c>)
 8010bac:	f240 1215 	movw	r2, #277	; 0x115
 8010bb0:	497c      	ldr	r1, [pc, #496]	; (8010da4 <tcp_input+0x53c>)
 8010bb2:	487a      	ldr	r0, [pc, #488]	; (8010d9c <tcp_input+0x534>)
 8010bb4:	f007 fafa 	bl	80181ac <iprintf>
      break;
 8010bb8:	e009      	b.n	8010bce <tcp_input+0x366>
    }
    prev = pcb;
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	68db      	ldr	r3, [r3, #12]
 8010bc2:	61fb      	str	r3, [r7, #28]
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f47f af5e 	bne.w	8010a88 <tcp_input+0x220>
 8010bcc:	e000      	b.n	8010bd0 <tcp_input+0x368>
      break;
 8010bce:	bf00      	nop
  }

  if (pcb == NULL) {
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f040 8095 	bne.w	8010d02 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bd8:	4b73      	ldr	r3, [pc, #460]	; (8010da8 <tcp_input+0x540>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	61fb      	str	r3, [r7, #28]
 8010bde:	e03f      	b.n	8010c60 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	7d1b      	ldrb	r3, [r3, #20]
 8010be4:	2b0a      	cmp	r3, #10
 8010be6:	d006      	beq.n	8010bf6 <tcp_input+0x38e>
 8010be8:	4b6a      	ldr	r3, [pc, #424]	; (8010d94 <tcp_input+0x52c>)
 8010bea:	f240 121f 	movw	r2, #287	; 0x11f
 8010bee:	496f      	ldr	r1, [pc, #444]	; (8010dac <tcp_input+0x544>)
 8010bf0:	486a      	ldr	r0, [pc, #424]	; (8010d9c <tcp_input+0x534>)
 8010bf2:	f007 fadb 	bl	80181ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	7a1b      	ldrb	r3, [r3, #8]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d009      	beq.n	8010c12 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010bfe:	69fb      	ldr	r3, [r7, #28]
 8010c00:	7a1a      	ldrb	r2, [r3, #8]
 8010c02:	4b63      	ldr	r3, [pc, #396]	; (8010d90 <tcp_input+0x528>)
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d122      	bne.n	8010c58 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	8b1a      	ldrh	r2, [r3, #24]
 8010c16:	4b5d      	ldr	r3, [pc, #372]	; (8010d8c <tcp_input+0x524>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	881b      	ldrh	r3, [r3, #0]
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d11b      	bne.n	8010c5a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	8ada      	ldrh	r2, [r3, #22]
 8010c26:	4b59      	ldr	r3, [pc, #356]	; (8010d8c <tcp_input+0x524>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	885b      	ldrh	r3, [r3, #2]
 8010c2c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d113      	bne.n	8010c5a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	685a      	ldr	r2, [r3, #4]
 8010c36:	4b56      	ldr	r3, [pc, #344]	; (8010d90 <tcp_input+0x528>)
 8010c38:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d10d      	bne.n	8010c5a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	4b53      	ldr	r3, [pc, #332]	; (8010d90 <tcp_input+0x528>)
 8010c44:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d107      	bne.n	8010c5a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010c4a:	69f8      	ldr	r0, [r7, #28]
 8010c4c:	f000 fb54 	bl	80112f8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f7fd fd03 	bl	800e65c <pbuf_free>
        return;
 8010c56:	e1f0      	b.n	801103a <tcp_input+0x7d2>
        continue;
 8010c58:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	61fb      	str	r3, [r7, #28]
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1bc      	bne.n	8010be0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010c66:	2300      	movs	r3, #0
 8010c68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c6a:	4b51      	ldr	r3, [pc, #324]	; (8010db0 <tcp_input+0x548>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	617b      	str	r3, [r7, #20]
 8010c70:	e02a      	b.n	8010cc8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	7a1b      	ldrb	r3, [r3, #8]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00c      	beq.n	8010c94 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	7a1a      	ldrb	r2, [r3, #8]
 8010c7e:	4b44      	ldr	r3, [pc, #272]	; (8010d90 <tcp_input+0x528>)
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c86:	3301      	adds	r3, #1
 8010c88:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d002      	beq.n	8010c94 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	61bb      	str	r3, [r7, #24]
        continue;
 8010c92:	e016      	b.n	8010cc2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	8ada      	ldrh	r2, [r3, #22]
 8010c98:	4b3c      	ldr	r3, [pc, #240]	; (8010d8c <tcp_input+0x524>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	885b      	ldrh	r3, [r3, #2]
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d10c      	bne.n	8010cbe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	4b39      	ldr	r3, [pc, #228]	; (8010d90 <tcp_input+0x528>)
 8010caa:	695b      	ldr	r3, [r3, #20]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d00f      	beq.n	8010cd0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00d      	beq.n	8010cd2 <tcp_input+0x46a>
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d009      	beq.n	8010cd2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1d1      	bne.n	8010c72 <tcp_input+0x40a>
 8010cce:	e000      	b.n	8010cd2 <tcp_input+0x46a>
            break;
 8010cd0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d014      	beq.n	8010d02 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010cd8:	69bb      	ldr	r3, [r7, #24]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d00a      	beq.n	8010cf4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	68da      	ldr	r2, [r3, #12]
 8010ce2:	69bb      	ldr	r3, [r7, #24]
 8010ce4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010ce6:	4b32      	ldr	r3, [pc, #200]	; (8010db0 <tcp_input+0x548>)
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010cee:	4a30      	ldr	r2, [pc, #192]	; (8010db0 <tcp_input+0x548>)
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010cf4:	6978      	ldr	r0, [r7, #20]
 8010cf6:	f000 fa01 	bl	80110fc <tcp_listen_input>
      }
      pbuf_free(p);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7fd fcae 	bl	800e65c <pbuf_free>
      return;
 8010d00:	e19b      	b.n	801103a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d02:	69fb      	ldr	r3, [r7, #28]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f000 8160 	beq.w	8010fca <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010d0a:	4b2a      	ldr	r3, [pc, #168]	; (8010db4 <tcp_input+0x54c>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	891a      	ldrh	r2, [r3, #8]
 8010d14:	4b27      	ldr	r3, [pc, #156]	; (8010db4 <tcp_input+0x54c>)
 8010d16:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d18:	4a26      	ldr	r2, [pc, #152]	; (8010db4 <tcp_input+0x54c>)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010d1e:	4b1b      	ldr	r3, [pc, #108]	; (8010d8c <tcp_input+0x524>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4a24      	ldr	r2, [pc, #144]	; (8010db4 <tcp_input+0x54c>)
 8010d24:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010d26:	4b24      	ldr	r3, [pc, #144]	; (8010db8 <tcp_input+0x550>)
 8010d28:	2200      	movs	r2, #0
 8010d2a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010d2c:	4b23      	ldr	r3, [pc, #140]	; (8010dbc <tcp_input+0x554>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010d32:	4b23      	ldr	r3, [pc, #140]	; (8010dc0 <tcp_input+0x558>)
 8010d34:	2200      	movs	r2, #0
 8010d36:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010d38:	4b22      	ldr	r3, [pc, #136]	; (8010dc4 <tcp_input+0x55c>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	f003 0308 	and.w	r3, r3, #8
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d006      	beq.n	8010d52 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	7b5b      	ldrb	r3, [r3, #13]
 8010d48:	f043 0301 	orr.w	r3, r3, #1
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d038      	beq.n	8010dcc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d5a:	69f8      	ldr	r0, [r7, #28]
 8010d5c:	f7ff f870 	bl	800fe40 <tcp_process_refused_data>
 8010d60:	4603      	mov	r3, r0
 8010d62:	f113 0f0d 	cmn.w	r3, #13
 8010d66:	d007      	beq.n	8010d78 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d02d      	beq.n	8010dcc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d70:	4b15      	ldr	r3, [pc, #84]	; (8010dc8 <tcp_input+0x560>)
 8010d72:	881b      	ldrh	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d029      	beq.n	8010dcc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	f040 8104 	bne.w	8010f8a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010d82:	69f8      	ldr	r0, [r7, #28]
 8010d84:	f003 fe16 	bl	80149b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010d88:	e0ff      	b.n	8010f8a <tcp_input+0x722>
 8010d8a:	bf00      	nop
 8010d8c:	20004b88 	.word	0x20004b88
 8010d90:	20008008 	.word	0x20008008
 8010d94:	0801ade4 	.word	0x0801ade4
 8010d98:	0801af10 	.word	0x0801af10
 8010d9c:	0801ae30 	.word	0x0801ae30
 8010da0:	2000d8dc 	.word	0x2000d8dc
 8010da4:	0801af3c 	.word	0x0801af3c
 8010da8:	2000d8ec 	.word	0x2000d8ec
 8010dac:	0801af68 	.word	0x0801af68
 8010db0:	2000d8e4 	.word	0x2000d8e4
 8010db4:	20004b78 	.word	0x20004b78
 8010db8:	20004ba8 	.word	0x20004ba8
 8010dbc:	20004ba5 	.word	0x20004ba5
 8010dc0:	20004ba0 	.word	0x20004ba0
 8010dc4:	20004ba4 	.word	0x20004ba4
 8010dc8:	20004ba2 	.word	0x20004ba2
      }
    }
    tcp_input_pcb = pcb;
 8010dcc:	4a9c      	ldr	r2, [pc, #624]	; (8011040 <tcp_input+0x7d8>)
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010dd2:	69f8      	ldr	r0, [r7, #28]
 8010dd4:	f000 fb0a 	bl	80113ec <tcp_process>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010ddc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010de0:	f113 0f0d 	cmn.w	r3, #13
 8010de4:	f000 80d3 	beq.w	8010f8e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010de8:	4b96      	ldr	r3, [pc, #600]	; (8011044 <tcp_input+0x7dc>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 0308 	and.w	r3, r3, #8
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d015      	beq.n	8010e20 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d008      	beq.n	8010e10 <tcp_input+0x5a8>
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e04:	69fa      	ldr	r2, [r7, #28]
 8010e06:	6912      	ldr	r2, [r2, #16]
 8010e08:	f06f 010d 	mvn.w	r1, #13
 8010e0c:	4610      	mov	r0, r2
 8010e0e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010e10:	69f9      	ldr	r1, [r7, #28]
 8010e12:	488d      	ldr	r0, [pc, #564]	; (8011048 <tcp_input+0x7e0>)
 8010e14:	f7ff fbb0 	bl	8010578 <tcp_pcb_remove>
        tcp_free(pcb);
 8010e18:	69f8      	ldr	r0, [r7, #28]
 8010e1a:	f7fd fecb 	bl	800ebb4 <tcp_free>
 8010e1e:	e0c1      	b.n	8010fa4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010e20:	2300      	movs	r3, #0
 8010e22:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010e24:	4b89      	ldr	r3, [pc, #548]	; (801104c <tcp_input+0x7e4>)
 8010e26:	881b      	ldrh	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d01d      	beq.n	8010e68 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010e2c:	4b87      	ldr	r3, [pc, #540]	; (801104c <tcp_input+0x7e4>)
 8010e2e:	881b      	ldrh	r3, [r3, #0]
 8010e30:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00a      	beq.n	8010e52 <tcp_input+0x5ea>
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e42:	69fa      	ldr	r2, [r7, #28]
 8010e44:	6910      	ldr	r0, [r2, #16]
 8010e46:	89fa      	ldrh	r2, [r7, #14]
 8010e48:	69f9      	ldr	r1, [r7, #28]
 8010e4a:	4798      	blx	r3
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	74fb      	strb	r3, [r7, #19]
 8010e50:	e001      	b.n	8010e56 <tcp_input+0x5ee>
 8010e52:	2300      	movs	r3, #0
 8010e54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e5a:	f113 0f0d 	cmn.w	r3, #13
 8010e5e:	f000 8098 	beq.w	8010f92 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010e62:	4b7a      	ldr	r3, [pc, #488]	; (801104c <tcp_input+0x7e4>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010e68:	69f8      	ldr	r0, [r7, #28]
 8010e6a:	f000 f907 	bl	801107c <tcp_input_delayed_close>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f040 8090 	bne.w	8010f96 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010e76:	4b76      	ldr	r3, [pc, #472]	; (8011050 <tcp_input+0x7e8>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d041      	beq.n	8010f02 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d006      	beq.n	8010e94 <tcp_input+0x62c>
 8010e86:	4b73      	ldr	r3, [pc, #460]	; (8011054 <tcp_input+0x7ec>)
 8010e88:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e8c:	4972      	ldr	r1, [pc, #456]	; (8011058 <tcp_input+0x7f0>)
 8010e8e:	4873      	ldr	r0, [pc, #460]	; (801105c <tcp_input+0x7f4>)
 8010e90:	f007 f98c 	bl	80181ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	8b5b      	ldrh	r3, [r3, #26]
 8010e98:	f003 0310 	and.w	r3, r3, #16
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d008      	beq.n	8010eb2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010ea0:	4b6b      	ldr	r3, [pc, #428]	; (8011050 <tcp_input+0x7e8>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fd fbd9 	bl	800e65c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010eaa:	69f8      	ldr	r0, [r7, #28]
 8010eac:	f7fe f9c6 	bl	800f23c <tcp_abort>
            goto aborted;
 8010eb0:	e078      	b.n	8010fa4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d00c      	beq.n	8010ed6 <tcp_input+0x66e>
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	6918      	ldr	r0, [r3, #16]
 8010ec6:	4b62      	ldr	r3, [pc, #392]	; (8011050 <tcp_input+0x7e8>)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	2300      	movs	r3, #0
 8010ecc:	69f9      	ldr	r1, [r7, #28]
 8010ece:	47a0      	blx	r4
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	74fb      	strb	r3, [r7, #19]
 8010ed4:	e008      	b.n	8010ee8 <tcp_input+0x680>
 8010ed6:	4b5e      	ldr	r3, [pc, #376]	; (8011050 <tcp_input+0x7e8>)
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	2300      	movs	r3, #0
 8010edc:	69f9      	ldr	r1, [r7, #28]
 8010ede:	2000      	movs	r0, #0
 8010ee0:	f7ff f884 	bl	800ffec <tcp_recv_null>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010ee8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010eec:	f113 0f0d 	cmn.w	r3, #13
 8010ef0:	d053      	beq.n	8010f9a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010ef2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d003      	beq.n	8010f02 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010efa:	4b55      	ldr	r3, [pc, #340]	; (8011050 <tcp_input+0x7e8>)
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010f02:	4b50      	ldr	r3, [pc, #320]	; (8011044 <tcp_input+0x7dc>)
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	f003 0320 	and.w	r3, r3, #32
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d030      	beq.n	8010f70 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d009      	beq.n	8010f2a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f1a:	7b5a      	ldrb	r2, [r3, #13]
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f20:	f042 0220 	orr.w	r2, r2, #32
 8010f24:	b2d2      	uxtb	r2, r2
 8010f26:	735a      	strb	r2, [r3, #13]
 8010f28:	e022      	b.n	8010f70 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010f32:	d005      	beq.n	8010f40 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f38:	3301      	adds	r3, #1
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00b      	beq.n	8010f62 <tcp_input+0x6fa>
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	6918      	ldr	r0, [r3, #16]
 8010f54:	2300      	movs	r3, #0
 8010f56:	2200      	movs	r2, #0
 8010f58:	69f9      	ldr	r1, [r7, #28]
 8010f5a:	47a0      	blx	r4
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	74fb      	strb	r3, [r7, #19]
 8010f60:	e001      	b.n	8010f66 <tcp_input+0x6fe>
 8010f62:	2300      	movs	r3, #0
 8010f64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f6a:	f113 0f0d 	cmn.w	r3, #13
 8010f6e:	d016      	beq.n	8010f9e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010f70:	4b33      	ldr	r3, [pc, #204]	; (8011040 <tcp_input+0x7d8>)
 8010f72:	2200      	movs	r2, #0
 8010f74:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010f76:	69f8      	ldr	r0, [r7, #28]
 8010f78:	f000 f880 	bl	801107c <tcp_input_delayed_close>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d10f      	bne.n	8010fa2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010f82:	69f8      	ldr	r0, [r7, #28]
 8010f84:	f002 ff10 	bl	8013da8 <tcp_output>
 8010f88:	e00c      	b.n	8010fa4 <tcp_input+0x73c>
        goto aborted;
 8010f8a:	bf00      	nop
 8010f8c:	e00a      	b.n	8010fa4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010f8e:	bf00      	nop
 8010f90:	e008      	b.n	8010fa4 <tcp_input+0x73c>
              goto aborted;
 8010f92:	bf00      	nop
 8010f94:	e006      	b.n	8010fa4 <tcp_input+0x73c>
          goto aborted;
 8010f96:	bf00      	nop
 8010f98:	e004      	b.n	8010fa4 <tcp_input+0x73c>
            goto aborted;
 8010f9a:	bf00      	nop
 8010f9c:	e002      	b.n	8010fa4 <tcp_input+0x73c>
              goto aborted;
 8010f9e:	bf00      	nop
 8010fa0:	e000      	b.n	8010fa4 <tcp_input+0x73c>
          goto aborted;
 8010fa2:	bf00      	nop
    tcp_input_pcb = NULL;
 8010fa4:	4b26      	ldr	r3, [pc, #152]	; (8011040 <tcp_input+0x7d8>)
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010faa:	4b29      	ldr	r3, [pc, #164]	; (8011050 <tcp_input+0x7e8>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010fb0:	4b2b      	ldr	r3, [pc, #172]	; (8011060 <tcp_input+0x7f8>)
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d03f      	beq.n	8011038 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010fb8:	4b29      	ldr	r3, [pc, #164]	; (8011060 <tcp_input+0x7f8>)
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7fd fb4d 	bl	800e65c <pbuf_free>
      inseg.p = NULL;
 8010fc2:	4b27      	ldr	r3, [pc, #156]	; (8011060 <tcp_input+0x7f8>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010fc8:	e036      	b.n	8011038 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010fca:	4b26      	ldr	r3, [pc, #152]	; (8011064 <tcp_input+0x7fc>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	899b      	ldrh	r3, [r3, #12]
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fb ff96 	bl	800cf04 <lwip_htons>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	f003 0304 	and.w	r3, r3, #4
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d118      	bne.n	8011016 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe4:	4b20      	ldr	r3, [pc, #128]	; (8011068 <tcp_input+0x800>)
 8010fe6:	6819      	ldr	r1, [r3, #0]
 8010fe8:	4b20      	ldr	r3, [pc, #128]	; (801106c <tcp_input+0x804>)
 8010fea:	881b      	ldrh	r3, [r3, #0]
 8010fec:	461a      	mov	r2, r3
 8010fee:	4b20      	ldr	r3, [pc, #128]	; (8011070 <tcp_input+0x808>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ff4:	4b1b      	ldr	r3, [pc, #108]	; (8011064 <tcp_input+0x7fc>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ff8:	885b      	ldrh	r3, [r3, #2]
 8010ffa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ffc:	4a19      	ldr	r2, [pc, #100]	; (8011064 <tcp_input+0x7fc>)
 8010ffe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011000:	8812      	ldrh	r2, [r2, #0]
 8011002:	b292      	uxth	r2, r2
 8011004:	9202      	str	r2, [sp, #8]
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	4b1a      	ldr	r3, [pc, #104]	; (8011074 <tcp_input+0x80c>)
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	4b1a      	ldr	r3, [pc, #104]	; (8011078 <tcp_input+0x810>)
 801100e:	4602      	mov	r2, r0
 8011010:	2000      	movs	r0, #0
 8011012:	f003 fc7d 	bl	8014910 <tcp_rst>
    pbuf_free(p);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7fd fb20 	bl	800e65c <pbuf_free>
  return;
 801101c:	e00c      	b.n	8011038 <tcp_input+0x7d0>
    goto dropped;
 801101e:	bf00      	nop
 8011020:	e006      	b.n	8011030 <tcp_input+0x7c8>
    goto dropped;
 8011022:	bf00      	nop
 8011024:	e004      	b.n	8011030 <tcp_input+0x7c8>
    goto dropped;
 8011026:	bf00      	nop
 8011028:	e002      	b.n	8011030 <tcp_input+0x7c8>
      goto dropped;
 801102a:	bf00      	nop
 801102c:	e000      	b.n	8011030 <tcp_input+0x7c8>
      goto dropped;
 801102e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7fd fb13 	bl	800e65c <pbuf_free>
 8011036:	e000      	b.n	801103a <tcp_input+0x7d2>
  return;
 8011038:	bf00      	nop
}
 801103a:	3724      	adds	r7, #36	; 0x24
 801103c:	46bd      	mov	sp, r7
 801103e:	bd90      	pop	{r4, r7, pc}
 8011040:	2000d8f0 	.word	0x2000d8f0
 8011044:	20004ba5 	.word	0x20004ba5
 8011048:	2000d8dc 	.word	0x2000d8dc
 801104c:	20004ba0 	.word	0x20004ba0
 8011050:	20004ba8 	.word	0x20004ba8
 8011054:	0801ade4 	.word	0x0801ade4
 8011058:	0801af98 	.word	0x0801af98
 801105c:	0801ae30 	.word	0x0801ae30
 8011060:	20004b78 	.word	0x20004b78
 8011064:	20004b88 	.word	0x20004b88
 8011068:	20004b9c 	.word	0x20004b9c
 801106c:	20004ba2 	.word	0x20004ba2
 8011070:	20004b98 	.word	0x20004b98
 8011074:	20008018 	.word	0x20008018
 8011078:	2000801c 	.word	0x2000801c

0801107c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d106      	bne.n	8011098 <tcp_input_delayed_close+0x1c>
 801108a:	4b17      	ldr	r3, [pc, #92]	; (80110e8 <tcp_input_delayed_close+0x6c>)
 801108c:	f240 225a 	movw	r2, #602	; 0x25a
 8011090:	4916      	ldr	r1, [pc, #88]	; (80110ec <tcp_input_delayed_close+0x70>)
 8011092:	4817      	ldr	r0, [pc, #92]	; (80110f0 <tcp_input_delayed_close+0x74>)
 8011094:	f007 f88a 	bl	80181ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011098:	4b16      	ldr	r3, [pc, #88]	; (80110f4 <tcp_input_delayed_close+0x78>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f003 0310 	and.w	r3, r3, #16
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d01c      	beq.n	80110de <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	8b5b      	ldrh	r3, [r3, #26]
 80110a8:	f003 0310 	and.w	r3, r3, #16
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10d      	bne.n	80110cc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d008      	beq.n	80110cc <tcp_input_delayed_close+0x50>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	6912      	ldr	r2, [r2, #16]
 80110c4:	f06f 010e 	mvn.w	r1, #14
 80110c8:	4610      	mov	r0, r2
 80110ca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	480a      	ldr	r0, [pc, #40]	; (80110f8 <tcp_input_delayed_close+0x7c>)
 80110d0:	f7ff fa52 	bl	8010578 <tcp_pcb_remove>
    tcp_free(pcb);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7fd fd6d 	bl	800ebb4 <tcp_free>
    return 1;
 80110da:	2301      	movs	r3, #1
 80110dc:	e000      	b.n	80110e0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80110de:	2300      	movs	r3, #0
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3708      	adds	r7, #8
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	0801ade4 	.word	0x0801ade4
 80110ec:	0801afb4 	.word	0x0801afb4
 80110f0:	0801ae30 	.word	0x0801ae30
 80110f4:	20004ba5 	.word	0x20004ba5
 80110f8:	2000d8dc 	.word	0x2000d8dc

080110fc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80110fc:	b590      	push	{r4, r7, lr}
 80110fe:	b08b      	sub	sp, #44	; 0x2c
 8011100:	af04      	add	r7, sp, #16
 8011102:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011104:	4b6f      	ldr	r3, [pc, #444]	; (80112c4 <tcp_listen_input+0x1c8>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	f003 0304 	and.w	r3, r3, #4
 801110c:	2b00      	cmp	r3, #0
 801110e:	f040 80d2 	bne.w	80112b6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d106      	bne.n	8011126 <tcp_listen_input+0x2a>
 8011118:	4b6b      	ldr	r3, [pc, #428]	; (80112c8 <tcp_listen_input+0x1cc>)
 801111a:	f240 2281 	movw	r2, #641	; 0x281
 801111e:	496b      	ldr	r1, [pc, #428]	; (80112cc <tcp_listen_input+0x1d0>)
 8011120:	486b      	ldr	r0, [pc, #428]	; (80112d0 <tcp_listen_input+0x1d4>)
 8011122:	f007 f843 	bl	80181ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011126:	4b67      	ldr	r3, [pc, #412]	; (80112c4 <tcp_listen_input+0x1c8>)
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	f003 0310 	and.w	r3, r3, #16
 801112e:	2b00      	cmp	r3, #0
 8011130:	d019      	beq.n	8011166 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011132:	4b68      	ldr	r3, [pc, #416]	; (80112d4 <tcp_listen_input+0x1d8>)
 8011134:	6819      	ldr	r1, [r3, #0]
 8011136:	4b68      	ldr	r3, [pc, #416]	; (80112d8 <tcp_listen_input+0x1dc>)
 8011138:	881b      	ldrh	r3, [r3, #0]
 801113a:	461a      	mov	r2, r3
 801113c:	4b67      	ldr	r3, [pc, #412]	; (80112dc <tcp_listen_input+0x1e0>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011142:	4b67      	ldr	r3, [pc, #412]	; (80112e0 <tcp_listen_input+0x1e4>)
 8011144:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011146:	885b      	ldrh	r3, [r3, #2]
 8011148:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801114a:	4a65      	ldr	r2, [pc, #404]	; (80112e0 <tcp_listen_input+0x1e4>)
 801114c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801114e:	8812      	ldrh	r2, [r2, #0]
 8011150:	b292      	uxth	r2, r2
 8011152:	9202      	str	r2, [sp, #8]
 8011154:	9301      	str	r3, [sp, #4]
 8011156:	4b63      	ldr	r3, [pc, #396]	; (80112e4 <tcp_listen_input+0x1e8>)
 8011158:	9300      	str	r3, [sp, #0]
 801115a:	4b63      	ldr	r3, [pc, #396]	; (80112e8 <tcp_listen_input+0x1ec>)
 801115c:	4602      	mov	r2, r0
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f003 fbd6 	bl	8014910 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011164:	e0a9      	b.n	80112ba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011166:	4b57      	ldr	r3, [pc, #348]	; (80112c4 <tcp_listen_input+0x1c8>)
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	f003 0302 	and.w	r3, r3, #2
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 80a3 	beq.w	80112ba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	7d5b      	ldrb	r3, [r3, #21]
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff f85b 	bl	8010234 <tcp_alloc>
 801117e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d111      	bne.n	80111aa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	699b      	ldr	r3, [r3, #24]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00a      	beq.n	80111a4 <tcp_listen_input+0xa8>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	6910      	ldr	r0, [r2, #16]
 8011196:	f04f 32ff 	mov.w	r2, #4294967295
 801119a:	2100      	movs	r1, #0
 801119c:	4798      	blx	r3
 801119e:	4603      	mov	r3, r0
 80111a0:	73bb      	strb	r3, [r7, #14]
      return;
 80111a2:	e08b      	b.n	80112bc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80111a4:	23f0      	movs	r3, #240	; 0xf0
 80111a6:	73bb      	strb	r3, [r7, #14]
      return;
 80111a8:	e088      	b.n	80112bc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80111aa:	4b50      	ldr	r3, [pc, #320]	; (80112ec <tcp_listen_input+0x1f0>)
 80111ac:	695a      	ldr	r2, [r3, #20]
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80111b2:	4b4e      	ldr	r3, [pc, #312]	; (80112ec <tcp_listen_input+0x1f0>)
 80111b4:	691a      	ldr	r2, [r3, #16]
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	8ada      	ldrh	r2, [r3, #22]
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80111c2:	4b47      	ldr	r3, [pc, #284]	; (80112e0 <tcp_listen_input+0x1e4>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	881b      	ldrh	r3, [r3, #0]
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	2203      	movs	r2, #3
 80111d2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80111d4:	4b41      	ldr	r3, [pc, #260]	; (80112dc <tcp_listen_input+0x1e0>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	1c5a      	adds	r2, r3, #1
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80111e6:	6978      	ldr	r0, [r7, #20]
 80111e8:	f7ff fa5a 	bl	80106a0 <tcp_next_iss>
 80111ec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	693a      	ldr	r2, [r7, #16]
 80111f2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	693a      	ldr	r2, [r7, #16]
 80111f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	693a      	ldr	r2, [r7, #16]
 80111fe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	693a      	ldr	r2, [r7, #16]
 8011204:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011206:	4b35      	ldr	r3, [pc, #212]	; (80112dc <tcp_listen_input+0x1e0>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	1e5a      	subs	r2, r3, #1
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	691a      	ldr	r2, [r3, #16]
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	7a5b      	ldrb	r3, [r3, #9]
 8011222:	f003 030c 	and.w	r3, r3, #12
 8011226:	b2da      	uxtb	r2, r3
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	7a1a      	ldrb	r2, [r3, #8]
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011234:	4b2e      	ldr	r3, [pc, #184]	; (80112f0 <tcp_listen_input+0x1f4>)
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	60da      	str	r2, [r3, #12]
 801123c:	4a2c      	ldr	r2, [pc, #176]	; (80112f0 <tcp_listen_input+0x1f4>)
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	6013      	str	r3, [r2, #0]
 8011242:	f003 fd27 	bl	8014c94 <tcp_timer_needed>
 8011246:	4b2b      	ldr	r3, [pc, #172]	; (80112f4 <tcp_listen_input+0x1f8>)
 8011248:	2201      	movs	r2, #1
 801124a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801124c:	6978      	ldr	r0, [r7, #20]
 801124e:	f001 fd8d 	bl	8012d6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011252:	4b23      	ldr	r3, [pc, #140]	; (80112e0 <tcp_listen_input+0x1e4>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	89db      	ldrh	r3, [r3, #14]
 8011258:	b29a      	uxth	r2, r3
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	3304      	adds	r3, #4
 8011274:	4618      	mov	r0, r3
 8011276:	f005 fa61 	bl	801673c <ip4_route>
 801127a:	4601      	mov	r1, r0
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	3304      	adds	r3, #4
 8011280:	461a      	mov	r2, r3
 8011282:	4620      	mov	r0, r4
 8011284:	f7ff fa32 	bl	80106ec <tcp_eff_send_mss_netif>
 8011288:	4603      	mov	r3, r0
 801128a:	461a      	mov	r2, r3
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011290:	2112      	movs	r1, #18
 8011292:	6978      	ldr	r0, [r7, #20]
 8011294:	f002 fc9a 	bl	8013bcc <tcp_enqueue_flags>
 8011298:	4603      	mov	r3, r0
 801129a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801129c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d004      	beq.n	80112ae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80112a4:	2100      	movs	r1, #0
 80112a6:	6978      	ldr	r0, [r7, #20]
 80112a8:	f7fd ff0a 	bl	800f0c0 <tcp_abandon>
      return;
 80112ac:	e006      	b.n	80112bc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80112ae:	6978      	ldr	r0, [r7, #20]
 80112b0:	f002 fd7a 	bl	8013da8 <tcp_output>
  return;
 80112b4:	e001      	b.n	80112ba <tcp_listen_input+0x1be>
    return;
 80112b6:	bf00      	nop
 80112b8:	e000      	b.n	80112bc <tcp_listen_input+0x1c0>
  return;
 80112ba:	bf00      	nop
}
 80112bc:	371c      	adds	r7, #28
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd90      	pop	{r4, r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20004ba4 	.word	0x20004ba4
 80112c8:	0801ade4 	.word	0x0801ade4
 80112cc:	0801afdc 	.word	0x0801afdc
 80112d0:	0801ae30 	.word	0x0801ae30
 80112d4:	20004b9c 	.word	0x20004b9c
 80112d8:	20004ba2 	.word	0x20004ba2
 80112dc:	20004b98 	.word	0x20004b98
 80112e0:	20004b88 	.word	0x20004b88
 80112e4:	20008018 	.word	0x20008018
 80112e8:	2000801c 	.word	0x2000801c
 80112ec:	20008008 	.word	0x20008008
 80112f0:	2000d8dc 	.word	0x2000d8dc
 80112f4:	2000d8d8 	.word	0x2000d8d8

080112f8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b086      	sub	sp, #24
 80112fc:	af04      	add	r7, sp, #16
 80112fe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011300:	4b2f      	ldr	r3, [pc, #188]	; (80113c0 <tcp_timewait_input+0xc8>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 0304 	and.w	r3, r3, #4
 8011308:	2b00      	cmp	r3, #0
 801130a:	d153      	bne.n	80113b4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d106      	bne.n	8011320 <tcp_timewait_input+0x28>
 8011312:	4b2c      	ldr	r3, [pc, #176]	; (80113c4 <tcp_timewait_input+0xcc>)
 8011314:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011318:	492b      	ldr	r1, [pc, #172]	; (80113c8 <tcp_timewait_input+0xd0>)
 801131a:	482c      	ldr	r0, [pc, #176]	; (80113cc <tcp_timewait_input+0xd4>)
 801131c:	f006 ff46 	bl	80181ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011320:	4b27      	ldr	r3, [pc, #156]	; (80113c0 <tcp_timewait_input+0xc8>)
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	f003 0302 	and.w	r3, r3, #2
 8011328:	2b00      	cmp	r3, #0
 801132a:	d02a      	beq.n	8011382 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801132c:	4b28      	ldr	r3, [pc, #160]	; (80113d0 <tcp_timewait_input+0xd8>)
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	2b00      	cmp	r3, #0
 8011338:	db2d      	blt.n	8011396 <tcp_timewait_input+0x9e>
 801133a:	4b25      	ldr	r3, [pc, #148]	; (80113d0 <tcp_timewait_input+0xd8>)
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011346:	440b      	add	r3, r1
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	2b00      	cmp	r3, #0
 801134c:	dc23      	bgt.n	8011396 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801134e:	4b21      	ldr	r3, [pc, #132]	; (80113d4 <tcp_timewait_input+0xdc>)
 8011350:	6819      	ldr	r1, [r3, #0]
 8011352:	4b21      	ldr	r3, [pc, #132]	; (80113d8 <tcp_timewait_input+0xe0>)
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	461a      	mov	r2, r3
 8011358:	4b1d      	ldr	r3, [pc, #116]	; (80113d0 <tcp_timewait_input+0xd8>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801135e:	4b1f      	ldr	r3, [pc, #124]	; (80113dc <tcp_timewait_input+0xe4>)
 8011360:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011362:	885b      	ldrh	r3, [r3, #2]
 8011364:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011366:	4a1d      	ldr	r2, [pc, #116]	; (80113dc <tcp_timewait_input+0xe4>)
 8011368:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801136a:	8812      	ldrh	r2, [r2, #0]
 801136c:	b292      	uxth	r2, r2
 801136e:	9202      	str	r2, [sp, #8]
 8011370:	9301      	str	r3, [sp, #4]
 8011372:	4b1b      	ldr	r3, [pc, #108]	; (80113e0 <tcp_timewait_input+0xe8>)
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	4b1b      	ldr	r3, [pc, #108]	; (80113e4 <tcp_timewait_input+0xec>)
 8011378:	4602      	mov	r2, r0
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f003 fac8 	bl	8014910 <tcp_rst>
      return;
 8011380:	e01b      	b.n	80113ba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011382:	4b0f      	ldr	r3, [pc, #60]	; (80113c0 <tcp_timewait_input+0xc8>)
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	f003 0301 	and.w	r3, r3, #1
 801138a:	2b00      	cmp	r3, #0
 801138c:	d003      	beq.n	8011396 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801138e:	4b16      	ldr	r3, [pc, #88]	; (80113e8 <tcp_timewait_input+0xf0>)
 8011390:	681a      	ldr	r2, [r3, #0]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011396:	4b10      	ldr	r3, [pc, #64]	; (80113d8 <tcp_timewait_input+0xe0>)
 8011398:	881b      	ldrh	r3, [r3, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00c      	beq.n	80113b8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	8b5b      	ldrh	r3, [r3, #26]
 80113a2:	f043 0302 	orr.w	r3, r3, #2
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f002 fcfb 	bl	8013da8 <tcp_output>
  }
  return;
 80113b2:	e001      	b.n	80113b8 <tcp_timewait_input+0xc0>
    return;
 80113b4:	bf00      	nop
 80113b6:	e000      	b.n	80113ba <tcp_timewait_input+0xc2>
  return;
 80113b8:	bf00      	nop
}
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	20004ba4 	.word	0x20004ba4
 80113c4:	0801ade4 	.word	0x0801ade4
 80113c8:	0801affc 	.word	0x0801affc
 80113cc:	0801ae30 	.word	0x0801ae30
 80113d0:	20004b98 	.word	0x20004b98
 80113d4:	20004b9c 	.word	0x20004b9c
 80113d8:	20004ba2 	.word	0x20004ba2
 80113dc:	20004b88 	.word	0x20004b88
 80113e0:	20008018 	.word	0x20008018
 80113e4:	2000801c 	.word	0x2000801c
 80113e8:	2000d8e0 	.word	0x2000d8e0

080113ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80113ec:	b590      	push	{r4, r7, lr}
 80113ee:	b08d      	sub	sp, #52	; 0x34
 80113f0:	af04      	add	r7, sp, #16
 80113f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80113f4:	2300      	movs	r3, #0
 80113f6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d106      	bne.n	8011410 <tcp_process+0x24>
 8011402:	4ba5      	ldr	r3, [pc, #660]	; (8011698 <tcp_process+0x2ac>)
 8011404:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011408:	49a4      	ldr	r1, [pc, #656]	; (801169c <tcp_process+0x2b0>)
 801140a:	48a5      	ldr	r0, [pc, #660]	; (80116a0 <tcp_process+0x2b4>)
 801140c:	f006 fece 	bl	80181ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011410:	4ba4      	ldr	r3, [pc, #656]	; (80116a4 <tcp_process+0x2b8>)
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	f003 0304 	and.w	r3, r3, #4
 8011418:	2b00      	cmp	r3, #0
 801141a:	d04e      	beq.n	80114ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7d1b      	ldrb	r3, [r3, #20]
 8011420:	2b02      	cmp	r3, #2
 8011422:	d108      	bne.n	8011436 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011428:	4b9f      	ldr	r3, [pc, #636]	; (80116a8 <tcp_process+0x2bc>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	429a      	cmp	r2, r3
 801142e:	d123      	bne.n	8011478 <tcp_process+0x8c>
        acceptable = 1;
 8011430:	2301      	movs	r3, #1
 8011432:	76fb      	strb	r3, [r7, #27]
 8011434:	e020      	b.n	8011478 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801143a:	4b9c      	ldr	r3, [pc, #624]	; (80116ac <tcp_process+0x2c0>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	429a      	cmp	r2, r3
 8011440:	d102      	bne.n	8011448 <tcp_process+0x5c>
        acceptable = 1;
 8011442:	2301      	movs	r3, #1
 8011444:	76fb      	strb	r3, [r7, #27]
 8011446:	e017      	b.n	8011478 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011448:	4b98      	ldr	r3, [pc, #608]	; (80116ac <tcp_process+0x2c0>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	2b00      	cmp	r3, #0
 8011454:	db10      	blt.n	8011478 <tcp_process+0x8c>
 8011456:	4b95      	ldr	r3, [pc, #596]	; (80116ac <tcp_process+0x2c0>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145e:	6879      	ldr	r1, [r7, #4]
 8011460:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011462:	440b      	add	r3, r1
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	2b00      	cmp	r3, #0
 8011468:	dc06      	bgt.n	8011478 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	8b5b      	ldrh	r3, [r3, #26]
 801146e:	f043 0302 	orr.w	r3, r3, #2
 8011472:	b29a      	uxth	r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011478:	7efb      	ldrb	r3, [r7, #27]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d01b      	beq.n	80114b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	7d1b      	ldrb	r3, [r3, #20]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d106      	bne.n	8011494 <tcp_process+0xa8>
 8011486:	4b84      	ldr	r3, [pc, #528]	; (8011698 <tcp_process+0x2ac>)
 8011488:	f44f 724e 	mov.w	r2, #824	; 0x338
 801148c:	4988      	ldr	r1, [pc, #544]	; (80116b0 <tcp_process+0x2c4>)
 801148e:	4884      	ldr	r0, [pc, #528]	; (80116a0 <tcp_process+0x2b4>)
 8011490:	f006 fe8c 	bl	80181ac <iprintf>
      recv_flags |= TF_RESET;
 8011494:	4b87      	ldr	r3, [pc, #540]	; (80116b4 <tcp_process+0x2c8>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	f043 0308 	orr.w	r3, r3, #8
 801149c:	b2da      	uxtb	r2, r3
 801149e:	4b85      	ldr	r3, [pc, #532]	; (80116b4 <tcp_process+0x2c8>)
 80114a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	8b5b      	ldrh	r3, [r3, #26]
 80114a6:	f023 0301 	bic.w	r3, r3, #1
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80114b0:	f06f 030d 	mvn.w	r3, #13
 80114b4:	e37a      	b.n	8011bac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80114b6:	2300      	movs	r3, #0
 80114b8:	e378      	b.n	8011bac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80114ba:	4b7a      	ldr	r3, [pc, #488]	; (80116a4 <tcp_process+0x2b8>)
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	f003 0302 	and.w	r3, r3, #2
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d010      	beq.n	80114e8 <tcp_process+0xfc>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	7d1b      	ldrb	r3, [r3, #20]
 80114ca:	2b02      	cmp	r3, #2
 80114cc:	d00c      	beq.n	80114e8 <tcp_process+0xfc>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	7d1b      	ldrb	r3, [r3, #20]
 80114d2:	2b03      	cmp	r3, #3
 80114d4:	d008      	beq.n	80114e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	8b5b      	ldrh	r3, [r3, #26]
 80114da:	f043 0302 	orr.w	r3, r3, #2
 80114de:	b29a      	uxth	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	e361      	b.n	8011bac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	8b5b      	ldrh	r3, [r3, #26]
 80114ec:	f003 0310 	and.w	r3, r3, #16
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d103      	bne.n	80114fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80114f4:	4b70      	ldr	r3, [pc, #448]	; (80116b8 <tcp_process+0x2cc>)
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2200      	movs	r2, #0
 8011508:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f001 fc2d 	bl	8012d6c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	7d1b      	ldrb	r3, [r3, #20]
 8011516:	3b02      	subs	r3, #2
 8011518:	2b07      	cmp	r3, #7
 801151a:	f200 8337 	bhi.w	8011b8c <tcp_process+0x7a0>
 801151e:	a201      	add	r2, pc, #4	; (adr r2, 8011524 <tcp_process+0x138>)
 8011520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011524:	08011545 	.word	0x08011545
 8011528:	08011775 	.word	0x08011775
 801152c:	080118ed 	.word	0x080118ed
 8011530:	08011917 	.word	0x08011917
 8011534:	08011a3b 	.word	0x08011a3b
 8011538:	080118ed 	.word	0x080118ed
 801153c:	08011ac7 	.word	0x08011ac7
 8011540:	08011b57 	.word	0x08011b57
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011544:	4b57      	ldr	r3, [pc, #348]	; (80116a4 <tcp_process+0x2b8>)
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	f003 0310 	and.w	r3, r3, #16
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 80e4 	beq.w	801171a <tcp_process+0x32e>
 8011552:	4b54      	ldr	r3, [pc, #336]	; (80116a4 <tcp_process+0x2b8>)
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	f003 0302 	and.w	r3, r3, #2
 801155a:	2b00      	cmp	r3, #0
 801155c:	f000 80dd 	beq.w	801171a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011564:	1c5a      	adds	r2, r3, #1
 8011566:	4b50      	ldr	r3, [pc, #320]	; (80116a8 <tcp_process+0x2bc>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	429a      	cmp	r2, r3
 801156c:	f040 80d5 	bne.w	801171a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011570:	4b4e      	ldr	r3, [pc, #312]	; (80116ac <tcp_process+0x2c0>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	1c5a      	adds	r2, r3, #1
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011582:	4b49      	ldr	r3, [pc, #292]	; (80116a8 <tcp_process+0x2bc>)
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801158a:	4b4c      	ldr	r3, [pc, #304]	; (80116bc <tcp_process+0x2d0>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	89db      	ldrh	r3, [r3, #14]
 8011590:	b29a      	uxth	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80115a4:	4b41      	ldr	r3, [pc, #260]	; (80116ac <tcp_process+0x2c0>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	1e5a      	subs	r2, r3, #1
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2204      	movs	r2, #4
 80115b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	3304      	adds	r3, #4
 80115bc:	4618      	mov	r0, r3
 80115be:	f005 f8bd 	bl	801673c <ip4_route>
 80115c2:	4601      	mov	r1, r0
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	3304      	adds	r3, #4
 80115c8:	461a      	mov	r2, r3
 80115ca:	4620      	mov	r0, r4
 80115cc:	f7ff f88e 	bl	80106ec <tcp_eff_send_mss_netif>
 80115d0:	4603      	mov	r3, r0
 80115d2:	461a      	mov	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115dc:	009a      	lsls	r2, r3, #2
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115e2:	005b      	lsls	r3, r3, #1
 80115e4:	f241 111c 	movw	r1, #4380	; 0x111c
 80115e8:	428b      	cmp	r3, r1
 80115ea:	bf38      	it	cc
 80115ec:	460b      	movcc	r3, r1
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d204      	bcs.n	80115fc <tcp_process+0x210>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	e00d      	b.n	8011618 <tcp_process+0x22c>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011600:	005b      	lsls	r3, r3, #1
 8011602:	f241 121c 	movw	r2, #4380	; 0x111c
 8011606:	4293      	cmp	r3, r2
 8011608:	d904      	bls.n	8011614 <tcp_process+0x228>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801160e:	005b      	lsls	r3, r3, #1
 8011610:	b29b      	uxth	r3, r3
 8011612:	e001      	b.n	8011618 <tcp_process+0x22c>
 8011614:	f241 131c 	movw	r3, #4380	; 0x111c
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011624:	2b00      	cmp	r3, #0
 8011626:	d106      	bne.n	8011636 <tcp_process+0x24a>
 8011628:	4b1b      	ldr	r3, [pc, #108]	; (8011698 <tcp_process+0x2ac>)
 801162a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801162e:	4924      	ldr	r1, [pc, #144]	; (80116c0 <tcp_process+0x2d4>)
 8011630:	481b      	ldr	r0, [pc, #108]	; (80116a0 <tcp_process+0x2b4>)
 8011632:	f006 fdbb 	bl	80181ac <iprintf>
        --pcb->snd_queuelen;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801163c:	3b01      	subs	r3, #1
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801164a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d111      	bne.n	8011676 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011656:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d106      	bne.n	801166c <tcp_process+0x280>
 801165e:	4b0e      	ldr	r3, [pc, #56]	; (8011698 <tcp_process+0x2ac>)
 8011660:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011664:	4917      	ldr	r1, [pc, #92]	; (80116c4 <tcp_process+0x2d8>)
 8011666:	480e      	ldr	r0, [pc, #56]	; (80116a0 <tcp_process+0x2b4>)
 8011668:	f006 fda0 	bl	80181ac <iprintf>
          pcb->unsent = rseg->next;
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	66da      	str	r2, [r3, #108]	; 0x6c
 8011674:	e003      	b.n	801167e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011676:	69fb      	ldr	r3, [r7, #28]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801167e:	69f8      	ldr	r0, [r7, #28]
 8011680:	f7fe fc6f 	bl	800ff62 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011688:	2b00      	cmp	r3, #0
 801168a:	d11d      	bne.n	80116c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011692:	861a      	strh	r2, [r3, #48]	; 0x30
 8011694:	e01f      	b.n	80116d6 <tcp_process+0x2ea>
 8011696:	bf00      	nop
 8011698:	0801ade4 	.word	0x0801ade4
 801169c:	0801b01c 	.word	0x0801b01c
 80116a0:	0801ae30 	.word	0x0801ae30
 80116a4:	20004ba4 	.word	0x20004ba4
 80116a8:	20004b9c 	.word	0x20004b9c
 80116ac:	20004b98 	.word	0x20004b98
 80116b0:	0801b038 	.word	0x0801b038
 80116b4:	20004ba5 	.word	0x20004ba5
 80116b8:	2000d8e0 	.word	0x2000d8e0
 80116bc:	20004b88 	.word	0x20004b88
 80116c0:	0801b058 	.word	0x0801b058
 80116c4:	0801b070 	.word	0x0801b070
        } else {
          pcb->rtime = 0;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2200      	movs	r2, #0
 80116d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00a      	beq.n	80116f6 <tcp_process+0x30a>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	6910      	ldr	r0, [r2, #16]
 80116ea:	2200      	movs	r2, #0
 80116ec:	6879      	ldr	r1, [r7, #4]
 80116ee:	4798      	blx	r3
 80116f0:	4603      	mov	r3, r0
 80116f2:	76bb      	strb	r3, [r7, #26]
 80116f4:	e001      	b.n	80116fa <tcp_process+0x30e>
 80116f6:	2300      	movs	r3, #0
 80116f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80116fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116fe:	f113 0f0d 	cmn.w	r3, #13
 8011702:	d102      	bne.n	801170a <tcp_process+0x31e>
          return ERR_ABRT;
 8011704:	f06f 030c 	mvn.w	r3, #12
 8011708:	e250      	b.n	8011bac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	8b5b      	ldrh	r3, [r3, #26]
 801170e:	f043 0302 	orr.w	r3, r3, #2
 8011712:	b29a      	uxth	r2, r3
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011718:	e23a      	b.n	8011b90 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801171a:	4b9d      	ldr	r3, [pc, #628]	; (8011990 <tcp_process+0x5a4>)
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	f003 0310 	and.w	r3, r3, #16
 8011722:	2b00      	cmp	r3, #0
 8011724:	f000 8234 	beq.w	8011b90 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011728:	4b9a      	ldr	r3, [pc, #616]	; (8011994 <tcp_process+0x5a8>)
 801172a:	6819      	ldr	r1, [r3, #0]
 801172c:	4b9a      	ldr	r3, [pc, #616]	; (8011998 <tcp_process+0x5ac>)
 801172e:	881b      	ldrh	r3, [r3, #0]
 8011730:	461a      	mov	r2, r3
 8011732:	4b9a      	ldr	r3, [pc, #616]	; (801199c <tcp_process+0x5b0>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011738:	4b99      	ldr	r3, [pc, #612]	; (80119a0 <tcp_process+0x5b4>)
 801173a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801173c:	885b      	ldrh	r3, [r3, #2]
 801173e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011740:	4a97      	ldr	r2, [pc, #604]	; (80119a0 <tcp_process+0x5b4>)
 8011742:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011744:	8812      	ldrh	r2, [r2, #0]
 8011746:	b292      	uxth	r2, r2
 8011748:	9202      	str	r2, [sp, #8]
 801174a:	9301      	str	r3, [sp, #4]
 801174c:	4b95      	ldr	r3, [pc, #596]	; (80119a4 <tcp_process+0x5b8>)
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	4b95      	ldr	r3, [pc, #596]	; (80119a8 <tcp_process+0x5bc>)
 8011752:	4602      	mov	r2, r0
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f003 f8db 	bl	8014910 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011760:	2b05      	cmp	r3, #5
 8011762:	f200 8215 	bhi.w	8011b90 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f002 fea5 	bl	80144bc <tcp_rexmit_rto>
      break;
 8011772:	e20d      	b.n	8011b90 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011774:	4b86      	ldr	r3, [pc, #536]	; (8011990 <tcp_process+0x5a4>)
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	f003 0310 	and.w	r3, r3, #16
 801177c:	2b00      	cmp	r3, #0
 801177e:	f000 80a1 	beq.w	80118c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011782:	4b84      	ldr	r3, [pc, #528]	; (8011994 <tcp_process+0x5a8>)
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	3b01      	subs	r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	db7e      	blt.n	8011890 <tcp_process+0x4a4>
 8011792:	4b80      	ldr	r3, [pc, #512]	; (8011994 <tcp_process+0x5a8>)
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	2b00      	cmp	r3, #0
 801179e:	dc77      	bgt.n	8011890 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2204      	movs	r2, #4
 80117a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d102      	bne.n	80117b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80117ae:	23fa      	movs	r3, #250	; 0xfa
 80117b0:	76bb      	strb	r3, [r7, #26]
 80117b2:	e01d      	b.n	80117f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117b8:	699b      	ldr	r3, [r3, #24]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d106      	bne.n	80117cc <tcp_process+0x3e0>
 80117be:	4b7b      	ldr	r3, [pc, #492]	; (80119ac <tcp_process+0x5c0>)
 80117c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80117c4:	497a      	ldr	r1, [pc, #488]	; (80119b0 <tcp_process+0x5c4>)
 80117c6:	487b      	ldr	r0, [pc, #492]	; (80119b4 <tcp_process+0x5c8>)
 80117c8:	f006 fcf0 	bl	80181ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00a      	beq.n	80117ec <tcp_process+0x400>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117da:	699b      	ldr	r3, [r3, #24]
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	6910      	ldr	r0, [r2, #16]
 80117e0:	2200      	movs	r2, #0
 80117e2:	6879      	ldr	r1, [r7, #4]
 80117e4:	4798      	blx	r3
 80117e6:	4603      	mov	r3, r0
 80117e8:	76bb      	strb	r3, [r7, #26]
 80117ea:	e001      	b.n	80117f0 <tcp_process+0x404>
 80117ec:	23f0      	movs	r3, #240	; 0xf0
 80117ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80117f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d00a      	beq.n	801180e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80117f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117fc:	f113 0f0d 	cmn.w	r3, #13
 8011800:	d002      	beq.n	8011808 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7fd fd1a 	bl	800f23c <tcp_abort>
            }
            return ERR_ABRT;
 8011808:	f06f 030c 	mvn.w	r3, #12
 801180c:	e1ce      	b.n	8011bac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 fae0 	bl	8011dd4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011814:	4b68      	ldr	r3, [pc, #416]	; (80119b8 <tcp_process+0x5cc>)
 8011816:	881b      	ldrh	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d005      	beq.n	8011828 <tcp_process+0x43c>
            recv_acked--;
 801181c:	4b66      	ldr	r3, [pc, #408]	; (80119b8 <tcp_process+0x5cc>)
 801181e:	881b      	ldrh	r3, [r3, #0]
 8011820:	3b01      	subs	r3, #1
 8011822:	b29a      	uxth	r2, r3
 8011824:	4b64      	ldr	r3, [pc, #400]	; (80119b8 <tcp_process+0x5cc>)
 8011826:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801182c:	009a      	lsls	r2, r3, #2
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011832:	005b      	lsls	r3, r3, #1
 8011834:	f241 111c 	movw	r1, #4380	; 0x111c
 8011838:	428b      	cmp	r3, r1
 801183a:	bf38      	it	cc
 801183c:	460b      	movcc	r3, r1
 801183e:	429a      	cmp	r2, r3
 8011840:	d204      	bcs.n	801184c <tcp_process+0x460>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011846:	009b      	lsls	r3, r3, #2
 8011848:	b29b      	uxth	r3, r3
 801184a:	e00d      	b.n	8011868 <tcp_process+0x47c>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011850:	005b      	lsls	r3, r3, #1
 8011852:	f241 121c 	movw	r2, #4380	; 0x111c
 8011856:	4293      	cmp	r3, r2
 8011858:	d904      	bls.n	8011864 <tcp_process+0x478>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	b29b      	uxth	r3, r3
 8011862:	e001      	b.n	8011868 <tcp_process+0x47c>
 8011864:	f241 131c 	movw	r3, #4380	; 0x111c
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801186e:	4b53      	ldr	r3, [pc, #332]	; (80119bc <tcp_process+0x5d0>)
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	f003 0320 	and.w	r3, r3, #32
 8011876:	2b00      	cmp	r3, #0
 8011878:	d037      	beq.n	80118ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	8b5b      	ldrh	r3, [r3, #26]
 801187e:	f043 0302 	orr.w	r3, r3, #2
 8011882:	b29a      	uxth	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2207      	movs	r2, #7
 801188c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801188e:	e02c      	b.n	80118ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011890:	4b40      	ldr	r3, [pc, #256]	; (8011994 <tcp_process+0x5a8>)
 8011892:	6819      	ldr	r1, [r3, #0]
 8011894:	4b40      	ldr	r3, [pc, #256]	; (8011998 <tcp_process+0x5ac>)
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	461a      	mov	r2, r3
 801189a:	4b40      	ldr	r3, [pc, #256]	; (801199c <tcp_process+0x5b0>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118a0:	4b3f      	ldr	r3, [pc, #252]	; (80119a0 <tcp_process+0x5b4>)
 80118a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118a4:	885b      	ldrh	r3, [r3, #2]
 80118a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118a8:	4a3d      	ldr	r2, [pc, #244]	; (80119a0 <tcp_process+0x5b4>)
 80118aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118ac:	8812      	ldrh	r2, [r2, #0]
 80118ae:	b292      	uxth	r2, r2
 80118b0:	9202      	str	r2, [sp, #8]
 80118b2:	9301      	str	r3, [sp, #4]
 80118b4:	4b3b      	ldr	r3, [pc, #236]	; (80119a4 <tcp_process+0x5b8>)
 80118b6:	9300      	str	r3, [sp, #0]
 80118b8:	4b3b      	ldr	r3, [pc, #236]	; (80119a8 <tcp_process+0x5bc>)
 80118ba:	4602      	mov	r2, r0
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f003 f827 	bl	8014910 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80118c2:	e167      	b.n	8011b94 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80118c4:	4b32      	ldr	r3, [pc, #200]	; (8011990 <tcp_process+0x5a4>)
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	f003 0302 	and.w	r3, r3, #2
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	f000 8161 	beq.w	8011b94 <tcp_process+0x7a8>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d6:	1e5a      	subs	r2, r3, #1
 80118d8:	4b30      	ldr	r3, [pc, #192]	; (801199c <tcp_process+0x5b0>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	429a      	cmp	r2, r3
 80118de:	f040 8159 	bne.w	8011b94 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f002 fe0c 	bl	8014500 <tcp_rexmit>
      break;
 80118e8:	e154      	b.n	8011b94 <tcp_process+0x7a8>
 80118ea:	e153      	b.n	8011b94 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f000 fa71 	bl	8011dd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80118f2:	4b32      	ldr	r3, [pc, #200]	; (80119bc <tcp_process+0x5d0>)
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	f003 0320 	and.w	r3, r3, #32
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 814c 	beq.w	8011b98 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	8b5b      	ldrh	r3, [r3, #26]
 8011904:	f043 0302 	orr.w	r3, r3, #2
 8011908:	b29a      	uxth	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2207      	movs	r2, #7
 8011912:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011914:	e140      	b.n	8011b98 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fa5c 	bl	8011dd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801191c:	4b27      	ldr	r3, [pc, #156]	; (80119bc <tcp_process+0x5d0>)
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	f003 0320 	and.w	r3, r3, #32
 8011924:	2b00      	cmp	r3, #0
 8011926:	d071      	beq.n	8011a0c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011928:	4b19      	ldr	r3, [pc, #100]	; (8011990 <tcp_process+0x5a4>)
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	f003 0310 	and.w	r3, r3, #16
 8011930:	2b00      	cmp	r3, #0
 8011932:	d060      	beq.n	80119f6 <tcp_process+0x60a>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011938:	4b16      	ldr	r3, [pc, #88]	; (8011994 <tcp_process+0x5a8>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	429a      	cmp	r2, r3
 801193e:	d15a      	bne.n	80119f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011944:	2b00      	cmp	r3, #0
 8011946:	d156      	bne.n	80119f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	8b5b      	ldrh	r3, [r3, #26]
 801194c:	f043 0302 	orr.w	r3, r3, #2
 8011950:	b29a      	uxth	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7fe fdbe 	bl	80104d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801195c:	4b18      	ldr	r3, [pc, #96]	; (80119c0 <tcp_process+0x5d4>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	429a      	cmp	r2, r3
 8011964:	d105      	bne.n	8011972 <tcp_process+0x586>
 8011966:	4b16      	ldr	r3, [pc, #88]	; (80119c0 <tcp_process+0x5d4>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	4a14      	ldr	r2, [pc, #80]	; (80119c0 <tcp_process+0x5d4>)
 801196e:	6013      	str	r3, [r2, #0]
 8011970:	e02e      	b.n	80119d0 <tcp_process+0x5e4>
 8011972:	4b13      	ldr	r3, [pc, #76]	; (80119c0 <tcp_process+0x5d4>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	617b      	str	r3, [r7, #20]
 8011978:	e027      	b.n	80119ca <tcp_process+0x5de>
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	429a      	cmp	r2, r3
 8011982:	d11f      	bne.n	80119c4 <tcp_process+0x5d8>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	68da      	ldr	r2, [r3, #12]
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	60da      	str	r2, [r3, #12]
 801198c:	e020      	b.n	80119d0 <tcp_process+0x5e4>
 801198e:	bf00      	nop
 8011990:	20004ba4 	.word	0x20004ba4
 8011994:	20004b9c 	.word	0x20004b9c
 8011998:	20004ba2 	.word	0x20004ba2
 801199c:	20004b98 	.word	0x20004b98
 80119a0:	20004b88 	.word	0x20004b88
 80119a4:	20008018 	.word	0x20008018
 80119a8:	2000801c 	.word	0x2000801c
 80119ac:	0801ade4 	.word	0x0801ade4
 80119b0:	0801b084 	.word	0x0801b084
 80119b4:	0801ae30 	.word	0x0801ae30
 80119b8:	20004ba0 	.word	0x20004ba0
 80119bc:	20004ba5 	.word	0x20004ba5
 80119c0:	2000d8dc 	.word	0x2000d8dc
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	617b      	str	r3, [r7, #20]
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1d4      	bne.n	801197a <tcp_process+0x58e>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	60da      	str	r2, [r3, #12]
 80119d6:	4b77      	ldr	r3, [pc, #476]	; (8011bb4 <tcp_process+0x7c8>)
 80119d8:	2201      	movs	r2, #1
 80119da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	220a      	movs	r2, #10
 80119e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80119e2:	4b75      	ldr	r3, [pc, #468]	; (8011bb8 <tcp_process+0x7cc>)
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	60da      	str	r2, [r3, #12]
 80119ea:	4a73      	ldr	r2, [pc, #460]	; (8011bb8 <tcp_process+0x7cc>)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6013      	str	r3, [r2, #0]
 80119f0:	f003 f950 	bl	8014c94 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80119f4:	e0d2      	b.n	8011b9c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	8b5b      	ldrh	r3, [r3, #26]
 80119fa:	f043 0302 	orr.w	r3, r3, #2
 80119fe:	b29a      	uxth	r2, r3
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2208      	movs	r2, #8
 8011a08:	751a      	strb	r2, [r3, #20]
      break;
 8011a0a:	e0c7      	b.n	8011b9c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a0c:	4b6b      	ldr	r3, [pc, #428]	; (8011bbc <tcp_process+0x7d0>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	f003 0310 	and.w	r3, r3, #16
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	f000 80c1 	beq.w	8011b9c <tcp_process+0x7b0>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a1e:	4b68      	ldr	r3, [pc, #416]	; (8011bc0 <tcp_process+0x7d4>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	f040 80ba 	bne.w	8011b9c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f040 80b5 	bne.w	8011b9c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2206      	movs	r2, #6
 8011a36:	751a      	strb	r2, [r3, #20]
      break;
 8011a38:	e0b0      	b.n	8011b9c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 f9ca 	bl	8011dd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011a40:	4b60      	ldr	r3, [pc, #384]	; (8011bc4 <tcp_process+0x7d8>)
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	f003 0320 	and.w	r3, r3, #32
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f000 80a9 	beq.w	8011ba0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	8b5b      	ldrh	r3, [r3, #26]
 8011a52:	f043 0302 	orr.w	r3, r3, #2
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7fe fd3b 	bl	80104d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a62:	4b59      	ldr	r3, [pc, #356]	; (8011bc8 <tcp_process+0x7dc>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	687a      	ldr	r2, [r7, #4]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d105      	bne.n	8011a78 <tcp_process+0x68c>
 8011a6c:	4b56      	ldr	r3, [pc, #344]	; (8011bc8 <tcp_process+0x7dc>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	4a55      	ldr	r2, [pc, #340]	; (8011bc8 <tcp_process+0x7dc>)
 8011a74:	6013      	str	r3, [r2, #0]
 8011a76:	e013      	b.n	8011aa0 <tcp_process+0x6b4>
 8011a78:	4b53      	ldr	r3, [pc, #332]	; (8011bc8 <tcp_process+0x7dc>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	613b      	str	r3, [r7, #16]
 8011a7e:	e00c      	b.n	8011a9a <tcp_process+0x6ae>
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d104      	bne.n	8011a94 <tcp_process+0x6a8>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	68da      	ldr	r2, [r3, #12]
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	60da      	str	r2, [r3, #12]
 8011a92:	e005      	b.n	8011aa0 <tcp_process+0x6b4>
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	68db      	ldr	r3, [r3, #12]
 8011a98:	613b      	str	r3, [r7, #16]
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1ef      	bne.n	8011a80 <tcp_process+0x694>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	60da      	str	r2, [r3, #12]
 8011aa6:	4b43      	ldr	r3, [pc, #268]	; (8011bb4 <tcp_process+0x7c8>)
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	220a      	movs	r2, #10
 8011ab0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011ab2:	4b41      	ldr	r3, [pc, #260]	; (8011bb8 <tcp_process+0x7cc>)
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	60da      	str	r2, [r3, #12]
 8011aba:	4a3f      	ldr	r2, [pc, #252]	; (8011bb8 <tcp_process+0x7cc>)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6013      	str	r3, [r2, #0]
 8011ac0:	f003 f8e8 	bl	8014c94 <tcp_timer_needed>
      }
      break;
 8011ac4:	e06c      	b.n	8011ba0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f984 	bl	8011dd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011acc:	4b3b      	ldr	r3, [pc, #236]	; (8011bbc <tcp_process+0x7d0>)
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	f003 0310 	and.w	r3, r3, #16
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d065      	beq.n	8011ba4 <tcp_process+0x7b8>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011adc:	4b38      	ldr	r3, [pc, #224]	; (8011bc0 <tcp_process+0x7d4>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d15f      	bne.n	8011ba4 <tcp_process+0x7b8>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d15b      	bne.n	8011ba4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f7fe fcf3 	bl	80104d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011af2:	4b35      	ldr	r3, [pc, #212]	; (8011bc8 <tcp_process+0x7dc>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d105      	bne.n	8011b08 <tcp_process+0x71c>
 8011afc:	4b32      	ldr	r3, [pc, #200]	; (8011bc8 <tcp_process+0x7dc>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	68db      	ldr	r3, [r3, #12]
 8011b02:	4a31      	ldr	r2, [pc, #196]	; (8011bc8 <tcp_process+0x7dc>)
 8011b04:	6013      	str	r3, [r2, #0]
 8011b06:	e013      	b.n	8011b30 <tcp_process+0x744>
 8011b08:	4b2f      	ldr	r3, [pc, #188]	; (8011bc8 <tcp_process+0x7dc>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	60fb      	str	r3, [r7, #12]
 8011b0e:	e00c      	b.n	8011b2a <tcp_process+0x73e>
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d104      	bne.n	8011b24 <tcp_process+0x738>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	68da      	ldr	r2, [r3, #12]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	60da      	str	r2, [r3, #12]
 8011b22:	e005      	b.n	8011b30 <tcp_process+0x744>
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	68db      	ldr	r3, [r3, #12]
 8011b28:	60fb      	str	r3, [r7, #12]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d1ef      	bne.n	8011b10 <tcp_process+0x724>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	60da      	str	r2, [r3, #12]
 8011b36:	4b1f      	ldr	r3, [pc, #124]	; (8011bb4 <tcp_process+0x7c8>)
 8011b38:	2201      	movs	r2, #1
 8011b3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	220a      	movs	r2, #10
 8011b40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b42:	4b1d      	ldr	r3, [pc, #116]	; (8011bb8 <tcp_process+0x7cc>)
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	60da      	str	r2, [r3, #12]
 8011b4a:	4a1b      	ldr	r2, [pc, #108]	; (8011bb8 <tcp_process+0x7cc>)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6013      	str	r3, [r2, #0]
 8011b50:	f003 f8a0 	bl	8014c94 <tcp_timer_needed>
      }
      break;
 8011b54:	e026      	b.n	8011ba4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 f93c 	bl	8011dd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b5c:	4b17      	ldr	r3, [pc, #92]	; (8011bbc <tcp_process+0x7d0>)
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	f003 0310 	and.w	r3, r3, #16
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d01f      	beq.n	8011ba8 <tcp_process+0x7bc>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b6c:	4b14      	ldr	r3, [pc, #80]	; (8011bc0 <tcp_process+0x7d4>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d119      	bne.n	8011ba8 <tcp_process+0x7bc>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d115      	bne.n	8011ba8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011b7c:	4b11      	ldr	r3, [pc, #68]	; (8011bc4 <tcp_process+0x7d8>)
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	f043 0310 	orr.w	r3, r3, #16
 8011b84:	b2da      	uxtb	r2, r3
 8011b86:	4b0f      	ldr	r3, [pc, #60]	; (8011bc4 <tcp_process+0x7d8>)
 8011b88:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011b8a:	e00d      	b.n	8011ba8 <tcp_process+0x7bc>
    default:
      break;
 8011b8c:	bf00      	nop
 8011b8e:	e00c      	b.n	8011baa <tcp_process+0x7be>
      break;
 8011b90:	bf00      	nop
 8011b92:	e00a      	b.n	8011baa <tcp_process+0x7be>
      break;
 8011b94:	bf00      	nop
 8011b96:	e008      	b.n	8011baa <tcp_process+0x7be>
      break;
 8011b98:	bf00      	nop
 8011b9a:	e006      	b.n	8011baa <tcp_process+0x7be>
      break;
 8011b9c:	bf00      	nop
 8011b9e:	e004      	b.n	8011baa <tcp_process+0x7be>
      break;
 8011ba0:	bf00      	nop
 8011ba2:	e002      	b.n	8011baa <tcp_process+0x7be>
      break;
 8011ba4:	bf00      	nop
 8011ba6:	e000      	b.n	8011baa <tcp_process+0x7be>
      break;
 8011ba8:	bf00      	nop
  }
  return ERR_OK;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3724      	adds	r7, #36	; 0x24
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd90      	pop	{r4, r7, pc}
 8011bb4:	2000d8d8 	.word	0x2000d8d8
 8011bb8:	2000d8ec 	.word	0x2000d8ec
 8011bbc:	20004ba4 	.word	0x20004ba4
 8011bc0:	20004b9c 	.word	0x20004b9c
 8011bc4:	20004ba5 	.word	0x20004ba5
 8011bc8:	2000d8dc 	.word	0x2000d8dc

08011bcc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011bcc:	b590      	push	{r4, r7, lr}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d106      	bne.n	8011bea <tcp_oos_insert_segment+0x1e>
 8011bdc:	4b3b      	ldr	r3, [pc, #236]	; (8011ccc <tcp_oos_insert_segment+0x100>)
 8011bde:	f240 421f 	movw	r2, #1055	; 0x41f
 8011be2:	493b      	ldr	r1, [pc, #236]	; (8011cd0 <tcp_oos_insert_segment+0x104>)
 8011be4:	483b      	ldr	r0, [pc, #236]	; (8011cd4 <tcp_oos_insert_segment+0x108>)
 8011be6:	f006 fae1 	bl	80181ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	899b      	ldrh	r3, [r3, #12]
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fb f986 	bl	800cf04 <lwip_htons>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	b2db      	uxtb	r3, r3
 8011bfc:	f003 0301 	and.w	r3, r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d028      	beq.n	8011c56 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011c04:	6838      	ldr	r0, [r7, #0]
 8011c06:	f7fe f997 	bl	800ff38 <tcp_segs_free>
    next = NULL;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	603b      	str	r3, [r7, #0]
 8011c0e:	e056      	b.n	8011cbe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	899b      	ldrh	r3, [r3, #12]
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fb f973 	bl	800cf04 <lwip_htons>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	f003 0301 	and.w	r3, r3, #1
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00d      	beq.n	8011c46 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	899b      	ldrh	r3, [r3, #12]
 8011c30:	b29c      	uxth	r4, r3
 8011c32:	2001      	movs	r0, #1
 8011c34:	f7fb f966 	bl	800cf04 <lwip_htons>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	68db      	ldr	r3, [r3, #12]
 8011c40:	4322      	orrs	r2, r4
 8011c42:	b292      	uxth	r2, r2
 8011c44:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f7fe f986 	bl	800ff62 <tcp_seg_free>
    while (next &&
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d00e      	beq.n	8011c7a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	891b      	ldrh	r3, [r3, #8]
 8011c60:	461a      	mov	r2, r3
 8011c62:	4b1d      	ldr	r3, [pc, #116]	; (8011cd8 <tcp_oos_insert_segment+0x10c>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	441a      	add	r2, r3
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	6839      	ldr	r1, [r7, #0]
 8011c70:	8909      	ldrh	r1, [r1, #8]
 8011c72:	440b      	add	r3, r1
 8011c74:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	daca      	bge.n	8011c10 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d01e      	beq.n	8011cbe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	891b      	ldrh	r3, [r3, #8]
 8011c84:	461a      	mov	r2, r3
 8011c86:	4b14      	ldr	r3, [pc, #80]	; (8011cd8 <tcp_oos_insert_segment+0x10c>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	441a      	add	r2, r3
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	dd12      	ble.n	8011cbe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	4b0d      	ldr	r3, [pc, #52]	; (8011cd8 <tcp_oos_insert_segment+0x10c>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	1ad3      	subs	r3, r2, r3
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685a      	ldr	r2, [r3, #4]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	891b      	ldrh	r3, [r3, #8]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	4610      	mov	r0, r2
 8011cba:	f7fc fb49 	bl	800e350 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	683a      	ldr	r2, [r7, #0]
 8011cc2:	601a      	str	r2, [r3, #0]
}
 8011cc4:	bf00      	nop
 8011cc6:	3714      	adds	r7, #20
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd90      	pop	{r4, r7, pc}
 8011ccc:	0801ade4 	.word	0x0801ade4
 8011cd0:	0801b0a4 	.word	0x0801b0a4
 8011cd4:	0801ae30 	.word	0x0801ae30
 8011cd8:	20004b98 	.word	0x20004b98

08011cdc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011cdc:	b5b0      	push	{r4, r5, r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
 8011ce8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011cea:	e03e      	b.n	8011d6a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fc fd3c 	bl	800e778 <pbuf_clen>
 8011d00:	4603      	mov	r3, r0
 8011d02:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d0a:	8a7a      	ldrh	r2, [r7, #18]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d906      	bls.n	8011d1e <tcp_free_acked_segments+0x42>
 8011d10:	4b2a      	ldr	r3, [pc, #168]	; (8011dbc <tcp_free_acked_segments+0xe0>)
 8011d12:	f240 4257 	movw	r2, #1111	; 0x457
 8011d16:	492a      	ldr	r1, [pc, #168]	; (8011dc0 <tcp_free_acked_segments+0xe4>)
 8011d18:	482a      	ldr	r0, [pc, #168]	; (8011dc4 <tcp_free_acked_segments+0xe8>)
 8011d1a:	f006 fa47 	bl	80181ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011d24:	8a7b      	ldrh	r3, [r7, #18]
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	891a      	ldrh	r2, [r3, #8]
 8011d34:	4b24      	ldr	r3, [pc, #144]	; (8011dc8 <tcp_free_acked_segments+0xec>)
 8011d36:	881b      	ldrh	r3, [r3, #0]
 8011d38:	4413      	add	r3, r2
 8011d3a:	b29a      	uxth	r2, r3
 8011d3c:	4b22      	ldr	r3, [pc, #136]	; (8011dc8 <tcp_free_acked_segments+0xec>)
 8011d3e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011d40:	6978      	ldr	r0, [r7, #20]
 8011d42:	f7fe f90e 	bl	800ff62 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d00c      	beq.n	8011d6a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d109      	bne.n	8011d6a <tcp_free_acked_segments+0x8e>
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d106      	bne.n	8011d6a <tcp_free_acked_segments+0x8e>
 8011d5c:	4b17      	ldr	r3, [pc, #92]	; (8011dbc <tcp_free_acked_segments+0xe0>)
 8011d5e:	f240 4261 	movw	r2, #1121	; 0x461
 8011d62:	491a      	ldr	r1, [pc, #104]	; (8011dcc <tcp_free_acked_segments+0xf0>)
 8011d64:	4817      	ldr	r0, [pc, #92]	; (8011dc4 <tcp_free_acked_segments+0xe8>)
 8011d66:	f006 fa21 	bl	80181ac <iprintf>
  while (seg_list != NULL &&
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d020      	beq.n	8011db2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7fb f8d9 	bl	800cf2e <lwip_htonl>
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	891b      	ldrh	r3, [r3, #8]
 8011d82:	461d      	mov	r5, r3
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	899b      	ldrh	r3, [r3, #12]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fb f8b9 	bl	800cf04 <lwip_htons>
 8011d92:	4603      	mov	r3, r0
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	f003 0303 	and.w	r3, r3, #3
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d001      	beq.n	8011da2 <tcp_free_acked_segments+0xc6>
 8011d9e:	2301      	movs	r3, #1
 8011da0:	e000      	b.n	8011da4 <tcp_free_acked_segments+0xc8>
 8011da2:	2300      	movs	r3, #0
 8011da4:	442b      	add	r3, r5
 8011da6:	18e2      	adds	r2, r4, r3
 8011da8:	4b09      	ldr	r3, [pc, #36]	; (8011dd0 <tcp_free_acked_segments+0xf4>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	dd9c      	ble.n	8011cec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011db2:	68bb      	ldr	r3, [r7, #8]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3718      	adds	r7, #24
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bdb0      	pop	{r4, r5, r7, pc}
 8011dbc:	0801ade4 	.word	0x0801ade4
 8011dc0:	0801b0cc 	.word	0x0801b0cc
 8011dc4:	0801ae30 	.word	0x0801ae30
 8011dc8:	20004ba0 	.word	0x20004ba0
 8011dcc:	0801b0f4 	.word	0x0801b0f4
 8011dd0:	20004b9c 	.word	0x20004b9c

08011dd4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011dd4:	b5b0      	push	{r4, r5, r7, lr}
 8011dd6:	b094      	sub	sp, #80	; 0x50
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d106      	bne.n	8011df4 <tcp_receive+0x20>
 8011de6:	4ba6      	ldr	r3, [pc, #664]	; (8012080 <tcp_receive+0x2ac>)
 8011de8:	f240 427b 	movw	r2, #1147	; 0x47b
 8011dec:	49a5      	ldr	r1, [pc, #660]	; (8012084 <tcp_receive+0x2b0>)
 8011dee:	48a6      	ldr	r0, [pc, #664]	; (8012088 <tcp_receive+0x2b4>)
 8011df0:	f006 f9dc 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	7d1b      	ldrb	r3, [r3, #20]
 8011df8:	2b03      	cmp	r3, #3
 8011dfa:	d806      	bhi.n	8011e0a <tcp_receive+0x36>
 8011dfc:	4ba0      	ldr	r3, [pc, #640]	; (8012080 <tcp_receive+0x2ac>)
 8011dfe:	f240 427c 	movw	r2, #1148	; 0x47c
 8011e02:	49a2      	ldr	r1, [pc, #648]	; (801208c <tcp_receive+0x2b8>)
 8011e04:	48a0      	ldr	r0, [pc, #640]	; (8012088 <tcp_receive+0x2b4>)
 8011e06:	f006 f9d1 	bl	80181ac <iprintf>

  if (flags & TCP_ACK) {
 8011e0a:	4ba1      	ldr	r3, [pc, #644]	; (8012090 <tcp_receive+0x2bc>)
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	f003 0310 	and.w	r3, r3, #16
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f000 8263 	beq.w	80122de <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e1e:	461a      	mov	r2, r3
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e24:	4413      	add	r3, r2
 8011e26:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e2c:	4b99      	ldr	r3, [pc, #612]	; (8012094 <tcp_receive+0x2c0>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	db1b      	blt.n	8011e6e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e3a:	4b96      	ldr	r3, [pc, #600]	; (8012094 <tcp_receive+0x2c0>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d106      	bne.n	8011e50 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e46:	4b94      	ldr	r3, [pc, #592]	; (8012098 <tcp_receive+0x2c4>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	db0e      	blt.n	8011e6e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e54:	4b90      	ldr	r3, [pc, #576]	; (8012098 <tcp_receive+0x2c4>)
 8011e56:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d125      	bne.n	8011ea8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e5c:	4b8f      	ldr	r3, [pc, #572]	; (801209c <tcp_receive+0x2c8>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	89db      	ldrh	r3, [r3, #14]
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d91c      	bls.n	8011ea8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011e6e:	4b8b      	ldr	r3, [pc, #556]	; (801209c <tcp_receive+0x2c8>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	89db      	ldrh	r3, [r3, #14]
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d205      	bcs.n	8011e98 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011e98:	4b7e      	ldr	r3, [pc, #504]	; (8012094 <tcp_receive+0x2c0>)
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011ea0:	4b7d      	ldr	r3, [pc, #500]	; (8012098 <tcp_receive+0x2c4>)
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011ea8:	4b7b      	ldr	r3, [pc, #492]	; (8012098 <tcp_receive+0x2c4>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eb0:	1ad3      	subs	r3, r2, r3
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	dc58      	bgt.n	8011f68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011eb6:	4b7a      	ldr	r3, [pc, #488]	; (80120a0 <tcp_receive+0x2cc>)
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d14b      	bne.n	8011f56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011ec8:	4413      	add	r3, r2
 8011eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d142      	bne.n	8011f56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	db3d      	blt.n	8011f56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ede:	4b6e      	ldr	r3, [pc, #440]	; (8012098 <tcp_receive+0x2c4>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d137      	bne.n	8011f56 <tcp_receive+0x182>
              found_dupack = 1;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ef0:	2bff      	cmp	r3, #255	; 0xff
 8011ef2:	d007      	beq.n	8011f04 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011efa:	3301      	adds	r3, #1
 8011efc:	b2da      	uxtb	r2, r3
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f0a:	2b03      	cmp	r3, #3
 8011f0c:	d91b      	bls.n	8011f46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f18:	4413      	add	r3, r2
 8011f1a:	b29a      	uxth	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d30a      	bcc.n	8011f3c <tcp_receive+0x168>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f30:	4413      	add	r3, r2
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f3a:	e004      	b.n	8011f46 <tcp_receive+0x172>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f4c:	2b02      	cmp	r3, #2
 8011f4e:	d902      	bls.n	8011f56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f002 fb41 	bl	80145d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f040 8160 	bne.w	801221e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2200      	movs	r2, #0
 8011f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011f66:	e15a      	b.n	801221e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f68:	4b4b      	ldr	r3, [pc, #300]	; (8012098 <tcp_receive+0x2c4>)
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	3b01      	subs	r3, #1
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f2c0 814d 	blt.w	8012214 <tcp_receive+0x440>
 8011f7a:	4b47      	ldr	r3, [pc, #284]	; (8012098 <tcp_receive+0x2c4>)
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f82:	1ad3      	subs	r3, r2, r3
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f300 8145 	bgt.w	8012214 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	8b5b      	ldrh	r3, [r3, #26]
 8011f8e:	f003 0304 	and.w	r3, r3, #4
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d010      	beq.n	8011fb8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	8b5b      	ldrh	r3, [r3, #26]
 8011f9a:	f023 0304 	bic.w	r3, r3, #4
 8011f9e:	b29a      	uxth	r2, r3
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011fc6:	10db      	asrs	r3, r3, #3
 8011fc8:	b21b      	sxth	r3, r3
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	4413      	add	r3, r2
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	b21a      	sxth	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011fe0:	4b2d      	ldr	r3, [pc, #180]	; (8012098 <tcp_receive+0x2c4>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011ff8:	4b27      	ldr	r3, [pc, #156]	; (8012098 <tcp_receive+0x2c4>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	7d1b      	ldrb	r3, [r3, #20]
 8012004:	2b03      	cmp	r3, #3
 8012006:	f240 8096 	bls.w	8012136 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012016:	429a      	cmp	r2, r3
 8012018:	d244      	bcs.n	80120a4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	8b5b      	ldrh	r3, [r3, #26]
 801201e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012022:	2b00      	cmp	r3, #0
 8012024:	d001      	beq.n	801202a <tcp_receive+0x256>
 8012026:	2301      	movs	r3, #1
 8012028:	e000      	b.n	801202c <tcp_receive+0x258>
 801202a:	2302      	movs	r3, #2
 801202c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012030:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012034:	b29a      	uxth	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801203a:	fb12 f303 	smulbb	r3, r2, r3
 801203e:	b29b      	uxth	r3, r3
 8012040:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012042:	4293      	cmp	r3, r2
 8012044:	bf28      	it	cs
 8012046:	4613      	movcs	r3, r2
 8012048:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012050:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012052:	4413      	add	r3, r2
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801205c:	429a      	cmp	r2, r3
 801205e:	d309      	bcc.n	8012074 <tcp_receive+0x2a0>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012068:	4413      	add	r3, r2
 801206a:	b29a      	uxth	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012072:	e060      	b.n	8012136 <tcp_receive+0x362>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801207a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801207e:	e05a      	b.n	8012136 <tcp_receive+0x362>
 8012080:	0801ade4 	.word	0x0801ade4
 8012084:	0801b114 	.word	0x0801b114
 8012088:	0801ae30 	.word	0x0801ae30
 801208c:	0801b130 	.word	0x0801b130
 8012090:	20004ba4 	.word	0x20004ba4
 8012094:	20004b98 	.word	0x20004b98
 8012098:	20004b9c 	.word	0x20004b9c
 801209c:	20004b88 	.word	0x20004b88
 80120a0:	20004ba2 	.word	0x20004ba2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120ac:	4413      	add	r3, r2
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d309      	bcc.n	80120ce <tcp_receive+0x2fa>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120c2:	4413      	add	r3, r2
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80120cc:	e004      	b.n	80120d8 <tcp_receive+0x304>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d326      	bcc.n	8012136 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012108:	4413      	add	r3, r2
 801210a:	b29a      	uxth	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012112:	429a      	cmp	r2, r3
 8012114:	d30a      	bcc.n	801212c <tcp_receive+0x358>
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012120:	4413      	add	r3, r2
 8012122:	b29a      	uxth	r2, r3
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801212a:	e004      	b.n	8012136 <tcp_receive+0x362>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012132:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801213e:	4a98      	ldr	r2, [pc, #608]	; (80123a0 <tcp_receive+0x5cc>)
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7ff fdcb 	bl	8011cdc <tcp_free_acked_segments>
 8012146:	4602      	mov	r2, r0
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012154:	4a93      	ldr	r2, [pc, #588]	; (80123a4 <tcp_receive+0x5d0>)
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff fdc0 	bl	8011cdc <tcp_free_acked_segments>
 801215c:	4602      	mov	r2, r0
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012166:	2b00      	cmp	r3, #0
 8012168:	d104      	bne.n	8012174 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012170:	861a      	strh	r2, [r3, #48]	; 0x30
 8012172:	e002      	b.n	801217a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2200      	movs	r2, #0
 801217e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012184:	2b00      	cmp	r3, #0
 8012186:	d103      	bne.n	8012190 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012196:	4b84      	ldr	r3, [pc, #528]	; (80123a8 <tcp_receive+0x5d4>)
 8012198:	881b      	ldrh	r3, [r3, #0]
 801219a:	4413      	add	r3, r2
 801219c:	b29a      	uxth	r2, r3
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	8b5b      	ldrh	r3, [r3, #26]
 80121a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d035      	beq.n	801221c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d118      	bne.n	80121ea <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00c      	beq.n	80121da <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fa feae 	bl	800cf2e <lwip_htonl>
 80121d2:	4603      	mov	r3, r0
 80121d4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	dc20      	bgt.n	801221c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	8b5b      	ldrh	r3, [r3, #26]
 80121de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121e8:	e018      	b.n	801221c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fa fe99 	bl	800cf2e <lwip_htonl>
 80121fc:	4603      	mov	r3, r0
 80121fe:	1ae3      	subs	r3, r4, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	dc0b      	bgt.n	801221c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	8b5b      	ldrh	r3, [r3, #26]
 8012208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801220c:	b29a      	uxth	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012212:	e003      	b.n	801221c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f002 fbcd 	bl	80149b4 <tcp_send_empty_ack>
 801221a:	e000      	b.n	801221e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801221c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012222:	2b00      	cmp	r3, #0
 8012224:	d05b      	beq.n	80122de <tcp_receive+0x50a>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801222a:	4b60      	ldr	r3, [pc, #384]	; (80123ac <tcp_receive+0x5d8>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	1ad3      	subs	r3, r2, r3
 8012230:	2b00      	cmp	r3, #0
 8012232:	da54      	bge.n	80122de <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012234:	4b5e      	ldr	r3, [pc, #376]	; (80123b0 <tcp_receive+0x5dc>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	b29a      	uxth	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801223e:	b29b      	uxth	r3, r3
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	b29b      	uxth	r3, r3
 8012244:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012248:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012252:	10db      	asrs	r3, r3, #3
 8012254:	b21b      	sxth	r3, r3
 8012256:	b29b      	uxth	r3, r3
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	b29b      	uxth	r3, r3
 801225c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012266:	b29a      	uxth	r2, r3
 8012268:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801226c:	4413      	add	r3, r2
 801226e:	b29b      	uxth	r3, r3
 8012270:	b21a      	sxth	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012276:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801227a:	2b00      	cmp	r3, #0
 801227c:	da05      	bge.n	801228a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801227e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012282:	425b      	negs	r3, r3
 8012284:	b29b      	uxth	r3, r3
 8012286:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801228a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012294:	109b      	asrs	r3, r3, #2
 8012296:	b21b      	sxth	r3, r3
 8012298:	b29b      	uxth	r3, r3
 801229a:	1ad3      	subs	r3, r2, r3
 801229c:	b29b      	uxth	r3, r3
 801229e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80122ae:	4413      	add	r3, r2
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	b21a      	sxth	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122be:	10db      	asrs	r3, r3, #3
 80122c0:	b21b      	sxth	r3, r3
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	4413      	add	r3, r2
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	b21a      	sxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80122de:	4b35      	ldr	r3, [pc, #212]	; (80123b4 <tcp_receive+0x5e0>)
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f000 84e1 	beq.w	8012caa <tcp_receive+0xed6>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	7d1b      	ldrb	r3, [r3, #20]
 80122ec:	2b06      	cmp	r3, #6
 80122ee:	f200 84dc 	bhi.w	8012caa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122f6:	4b30      	ldr	r3, [pc, #192]	; (80123b8 <tcp_receive+0x5e4>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	1ad3      	subs	r3, r2, r3
 80122fc:	3b01      	subs	r3, #1
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f2c0 808e 	blt.w	8012420 <tcp_receive+0x64c>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012308:	4b2a      	ldr	r3, [pc, #168]	; (80123b4 <tcp_receive+0x5e0>)
 801230a:	881b      	ldrh	r3, [r3, #0]
 801230c:	4619      	mov	r1, r3
 801230e:	4b2a      	ldr	r3, [pc, #168]	; (80123b8 <tcp_receive+0x5e4>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	440b      	add	r3, r1
 8012314:	1ad3      	subs	r3, r2, r3
 8012316:	3301      	adds	r3, #1
 8012318:	2b00      	cmp	r3, #0
 801231a:	f300 8081 	bgt.w	8012420 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801231e:	4b27      	ldr	r3, [pc, #156]	; (80123bc <tcp_receive+0x5e8>)
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012328:	4b23      	ldr	r3, [pc, #140]	; (80123b8 <tcp_receive+0x5e4>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012330:	4b22      	ldr	r3, [pc, #136]	; (80123bc <tcp_receive+0x5e8>)
 8012332:	685b      	ldr	r3, [r3, #4]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d106      	bne.n	8012346 <tcp_receive+0x572>
 8012338:	4b21      	ldr	r3, [pc, #132]	; (80123c0 <tcp_receive+0x5ec>)
 801233a:	f240 5294 	movw	r2, #1428	; 0x594
 801233e:	4921      	ldr	r1, [pc, #132]	; (80123c4 <tcp_receive+0x5f0>)
 8012340:	4821      	ldr	r0, [pc, #132]	; (80123c8 <tcp_receive+0x5f4>)
 8012342:	f005 ff33 	bl	80181ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801234c:	4293      	cmp	r3, r2
 801234e:	d906      	bls.n	801235e <tcp_receive+0x58a>
 8012350:	4b1b      	ldr	r3, [pc, #108]	; (80123c0 <tcp_receive+0x5ec>)
 8012352:	f240 5295 	movw	r2, #1429	; 0x595
 8012356:	491d      	ldr	r1, [pc, #116]	; (80123cc <tcp_receive+0x5f8>)
 8012358:	481b      	ldr	r0, [pc, #108]	; (80123c8 <tcp_receive+0x5f4>)
 801235a:	f005 ff27 	bl	80181ac <iprintf>
      off = (u16_t)off32;
 801235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012360:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012364:	4b15      	ldr	r3, [pc, #84]	; (80123bc <tcp_receive+0x5e8>)
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	891b      	ldrh	r3, [r3, #8]
 801236a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801236e:	429a      	cmp	r2, r3
 8012370:	d906      	bls.n	8012380 <tcp_receive+0x5ac>
 8012372:	4b13      	ldr	r3, [pc, #76]	; (80123c0 <tcp_receive+0x5ec>)
 8012374:	f240 5297 	movw	r2, #1431	; 0x597
 8012378:	4915      	ldr	r1, [pc, #84]	; (80123d0 <tcp_receive+0x5fc>)
 801237a:	4813      	ldr	r0, [pc, #76]	; (80123c8 <tcp_receive+0x5f4>)
 801237c:	f005 ff16 	bl	80181ac <iprintf>
      inseg.len -= off;
 8012380:	4b0e      	ldr	r3, [pc, #56]	; (80123bc <tcp_receive+0x5e8>)
 8012382:	891a      	ldrh	r2, [r3, #8]
 8012384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	b29a      	uxth	r2, r3
 801238c:	4b0b      	ldr	r3, [pc, #44]	; (80123bc <tcp_receive+0x5e8>)
 801238e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012390:	4b0a      	ldr	r3, [pc, #40]	; (80123bc <tcp_receive+0x5e8>)
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	891a      	ldrh	r2, [r3, #8]
 8012396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801239a:	1ad3      	subs	r3, r2, r3
 801239c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801239e:	e029      	b.n	80123f4 <tcp_receive+0x620>
 80123a0:	0801b14c 	.word	0x0801b14c
 80123a4:	0801b154 	.word	0x0801b154
 80123a8:	20004ba0 	.word	0x20004ba0
 80123ac:	20004b9c 	.word	0x20004b9c
 80123b0:	2000d8e0 	.word	0x2000d8e0
 80123b4:	20004ba2 	.word	0x20004ba2
 80123b8:	20004b98 	.word	0x20004b98
 80123bc:	20004b78 	.word	0x20004b78
 80123c0:	0801ade4 	.word	0x0801ade4
 80123c4:	0801b15c 	.word	0x0801b15c
 80123c8:	0801ae30 	.word	0x0801ae30
 80123cc:	0801b16c 	.word	0x0801b16c
 80123d0:	0801b17c 	.word	0x0801b17c
        off -= p->len;
 80123d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123d6:	895b      	ldrh	r3, [r3, #10]
 80123d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80123e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80123e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80123e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123ea:	2200      	movs	r2, #0
 80123ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80123ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80123f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f6:	895b      	ldrh	r3, [r3, #10]
 80123f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d8e9      	bhi.n	80123d4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012404:	4619      	mov	r1, r3
 8012406:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012408:	f7fc f8a2 	bl	800e550 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012410:	4a91      	ldr	r2, [pc, #580]	; (8012658 <tcp_receive+0x884>)
 8012412:	6013      	str	r3, [r2, #0]
 8012414:	4b91      	ldr	r3, [pc, #580]	; (801265c <tcp_receive+0x888>)
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	4a8f      	ldr	r2, [pc, #572]	; (8012658 <tcp_receive+0x884>)
 801241a:	6812      	ldr	r2, [r2, #0]
 801241c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801241e:	e00d      	b.n	801243c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012420:	4b8d      	ldr	r3, [pc, #564]	; (8012658 <tcp_receive+0x884>)
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012428:	1ad3      	subs	r3, r2, r3
 801242a:	2b00      	cmp	r3, #0
 801242c:	da06      	bge.n	801243c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	8b5b      	ldrh	r3, [r3, #26]
 8012432:	f043 0302 	orr.w	r3, r3, #2
 8012436:	b29a      	uxth	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801243c:	4b86      	ldr	r3, [pc, #536]	; (8012658 <tcp_receive+0x884>)
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012444:	1ad3      	subs	r3, r2, r3
 8012446:	2b00      	cmp	r3, #0
 8012448:	f2c0 842a 	blt.w	8012ca0 <tcp_receive+0xecc>
 801244c:	4b82      	ldr	r3, [pc, #520]	; (8012658 <tcp_receive+0x884>)
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012454:	6879      	ldr	r1, [r7, #4]
 8012456:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012458:	440b      	add	r3, r1
 801245a:	1ad3      	subs	r3, r2, r3
 801245c:	3301      	adds	r3, #1
 801245e:	2b00      	cmp	r3, #0
 8012460:	f300 841e 	bgt.w	8012ca0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012468:	4b7b      	ldr	r3, [pc, #492]	; (8012658 <tcp_receive+0x884>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	429a      	cmp	r2, r3
 801246e:	f040 829a 	bne.w	80129a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012472:	4b7a      	ldr	r3, [pc, #488]	; (801265c <tcp_receive+0x888>)
 8012474:	891c      	ldrh	r4, [r3, #8]
 8012476:	4b79      	ldr	r3, [pc, #484]	; (801265c <tcp_receive+0x888>)
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	899b      	ldrh	r3, [r3, #12]
 801247c:	b29b      	uxth	r3, r3
 801247e:	4618      	mov	r0, r3
 8012480:	f7fa fd40 	bl	800cf04 <lwip_htons>
 8012484:	4603      	mov	r3, r0
 8012486:	b2db      	uxtb	r3, r3
 8012488:	f003 0303 	and.w	r3, r3, #3
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <tcp_receive+0x6c0>
 8012490:	2301      	movs	r3, #1
 8012492:	e000      	b.n	8012496 <tcp_receive+0x6c2>
 8012494:	2300      	movs	r3, #0
 8012496:	4423      	add	r3, r4
 8012498:	b29a      	uxth	r2, r3
 801249a:	4b71      	ldr	r3, [pc, #452]	; (8012660 <tcp_receive+0x88c>)
 801249c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80124a2:	4b6f      	ldr	r3, [pc, #444]	; (8012660 <tcp_receive+0x88c>)
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d275      	bcs.n	8012596 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80124aa:	4b6c      	ldr	r3, [pc, #432]	; (801265c <tcp_receive+0x888>)
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	899b      	ldrh	r3, [r3, #12]
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fa fd26 	bl	800cf04 <lwip_htons>
 80124b8:	4603      	mov	r3, r0
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	f003 0301 	and.w	r3, r3, #1
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d01f      	beq.n	8012504 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80124c4:	4b65      	ldr	r3, [pc, #404]	; (801265c <tcp_receive+0x888>)
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	899b      	ldrh	r3, [r3, #12]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	b21b      	sxth	r3, r3
 80124ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80124d2:	b21c      	sxth	r4, r3
 80124d4:	4b61      	ldr	r3, [pc, #388]	; (801265c <tcp_receive+0x888>)
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	899b      	ldrh	r3, [r3, #12]
 80124da:	b29b      	uxth	r3, r3
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fa fd11 	bl	800cf04 <lwip_htons>
 80124e2:	4603      	mov	r3, r0
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7fa fd08 	bl	800cf04 <lwip_htons>
 80124f4:	4603      	mov	r3, r0
 80124f6:	b21b      	sxth	r3, r3
 80124f8:	4323      	orrs	r3, r4
 80124fa:	b21a      	sxth	r2, r3
 80124fc:	4b57      	ldr	r3, [pc, #348]	; (801265c <tcp_receive+0x888>)
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	b292      	uxth	r2, r2
 8012502:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012508:	4b54      	ldr	r3, [pc, #336]	; (801265c <tcp_receive+0x888>)
 801250a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801250c:	4b53      	ldr	r3, [pc, #332]	; (801265c <tcp_receive+0x888>)
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	899b      	ldrh	r3, [r3, #12]
 8012512:	b29b      	uxth	r3, r3
 8012514:	4618      	mov	r0, r3
 8012516:	f7fa fcf5 	bl	800cf04 <lwip_htons>
 801251a:	4603      	mov	r3, r0
 801251c:	b2db      	uxtb	r3, r3
 801251e:	f003 0302 	and.w	r3, r3, #2
 8012522:	2b00      	cmp	r3, #0
 8012524:	d005      	beq.n	8012532 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012526:	4b4d      	ldr	r3, [pc, #308]	; (801265c <tcp_receive+0x888>)
 8012528:	891b      	ldrh	r3, [r3, #8]
 801252a:	3b01      	subs	r3, #1
 801252c:	b29a      	uxth	r2, r3
 801252e:	4b4b      	ldr	r3, [pc, #300]	; (801265c <tcp_receive+0x888>)
 8012530:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012532:	4b4a      	ldr	r3, [pc, #296]	; (801265c <tcp_receive+0x888>)
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	4a49      	ldr	r2, [pc, #292]	; (801265c <tcp_receive+0x888>)
 8012538:	8912      	ldrh	r2, [r2, #8]
 801253a:	4611      	mov	r1, r2
 801253c:	4618      	mov	r0, r3
 801253e:	f7fb ff07 	bl	800e350 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012542:	4b46      	ldr	r3, [pc, #280]	; (801265c <tcp_receive+0x888>)
 8012544:	891c      	ldrh	r4, [r3, #8]
 8012546:	4b45      	ldr	r3, [pc, #276]	; (801265c <tcp_receive+0x888>)
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	899b      	ldrh	r3, [r3, #12]
 801254c:	b29b      	uxth	r3, r3
 801254e:	4618      	mov	r0, r3
 8012550:	f7fa fcd8 	bl	800cf04 <lwip_htons>
 8012554:	4603      	mov	r3, r0
 8012556:	b2db      	uxtb	r3, r3
 8012558:	f003 0303 	and.w	r3, r3, #3
 801255c:	2b00      	cmp	r3, #0
 801255e:	d001      	beq.n	8012564 <tcp_receive+0x790>
 8012560:	2301      	movs	r3, #1
 8012562:	e000      	b.n	8012566 <tcp_receive+0x792>
 8012564:	2300      	movs	r3, #0
 8012566:	4423      	add	r3, r4
 8012568:	b29a      	uxth	r2, r3
 801256a:	4b3d      	ldr	r3, [pc, #244]	; (8012660 <tcp_receive+0x88c>)
 801256c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801256e:	4b3c      	ldr	r3, [pc, #240]	; (8012660 <tcp_receive+0x88c>)
 8012570:	881b      	ldrh	r3, [r3, #0]
 8012572:	461a      	mov	r2, r3
 8012574:	4b38      	ldr	r3, [pc, #224]	; (8012658 <tcp_receive+0x884>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	441a      	add	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257e:	6879      	ldr	r1, [r7, #4]
 8012580:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012582:	440b      	add	r3, r1
 8012584:	429a      	cmp	r2, r3
 8012586:	d006      	beq.n	8012596 <tcp_receive+0x7c2>
 8012588:	4b36      	ldr	r3, [pc, #216]	; (8012664 <tcp_receive+0x890>)
 801258a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801258e:	4936      	ldr	r1, [pc, #216]	; (8012668 <tcp_receive+0x894>)
 8012590:	4836      	ldr	r0, [pc, #216]	; (801266c <tcp_receive+0x898>)
 8012592:	f005 fe0b 	bl	80181ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801259a:	2b00      	cmp	r3, #0
 801259c:	f000 80e7 	beq.w	801276e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80125a0:	4b2e      	ldr	r3, [pc, #184]	; (801265c <tcp_receive+0x888>)
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	899b      	ldrh	r3, [r3, #12]
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	4618      	mov	r0, r3
 80125aa:	f7fa fcab 	bl	800cf04 <lwip_htons>
 80125ae:	4603      	mov	r3, r0
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	f003 0301 	and.w	r3, r3, #1
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d010      	beq.n	80125dc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80125ba:	e00a      	b.n	80125d2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c6:	681a      	ldr	r2, [r3, #0]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	f7fd fcc8 	bl	800ff62 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1f0      	bne.n	80125bc <tcp_receive+0x7e8>
 80125da:	e0c8      	b.n	801276e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80125e2:	e052      	b.n	801268a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80125e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e6:	68db      	ldr	r3, [r3, #12]
 80125e8:	899b      	ldrh	r3, [r3, #12]
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7fa fc89 	bl	800cf04 <lwip_htons>
 80125f2:	4603      	mov	r3, r0
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	f003 0301 	and.w	r3, r3, #1
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d03d      	beq.n	801267a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80125fe:	4b17      	ldr	r3, [pc, #92]	; (801265c <tcp_receive+0x888>)
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	899b      	ldrh	r3, [r3, #12]
 8012604:	b29b      	uxth	r3, r3
 8012606:	4618      	mov	r0, r3
 8012608:	f7fa fc7c 	bl	800cf04 <lwip_htons>
 801260c:	4603      	mov	r3, r0
 801260e:	b2db      	uxtb	r3, r3
 8012610:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012614:	2b00      	cmp	r3, #0
 8012616:	d130      	bne.n	801267a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012618:	4b10      	ldr	r3, [pc, #64]	; (801265c <tcp_receive+0x888>)
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	899b      	ldrh	r3, [r3, #12]
 801261e:	b29c      	uxth	r4, r3
 8012620:	2001      	movs	r0, #1
 8012622:	f7fa fc6f 	bl	800cf04 <lwip_htons>
 8012626:	4603      	mov	r3, r0
 8012628:	461a      	mov	r2, r3
 801262a:	4b0c      	ldr	r3, [pc, #48]	; (801265c <tcp_receive+0x888>)
 801262c:	68db      	ldr	r3, [r3, #12]
 801262e:	4322      	orrs	r2, r4
 8012630:	b292      	uxth	r2, r2
 8012632:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012634:	4b09      	ldr	r3, [pc, #36]	; (801265c <tcp_receive+0x888>)
 8012636:	891c      	ldrh	r4, [r3, #8]
 8012638:	4b08      	ldr	r3, [pc, #32]	; (801265c <tcp_receive+0x888>)
 801263a:	68db      	ldr	r3, [r3, #12]
 801263c:	899b      	ldrh	r3, [r3, #12]
 801263e:	b29b      	uxth	r3, r3
 8012640:	4618      	mov	r0, r3
 8012642:	f7fa fc5f 	bl	800cf04 <lwip_htons>
 8012646:	4603      	mov	r3, r0
 8012648:	b2db      	uxtb	r3, r3
 801264a:	f003 0303 	and.w	r3, r3, #3
 801264e:	2b00      	cmp	r3, #0
 8012650:	d00e      	beq.n	8012670 <tcp_receive+0x89c>
 8012652:	2301      	movs	r3, #1
 8012654:	e00d      	b.n	8012672 <tcp_receive+0x89e>
 8012656:	bf00      	nop
 8012658:	20004b98 	.word	0x20004b98
 801265c:	20004b78 	.word	0x20004b78
 8012660:	20004ba2 	.word	0x20004ba2
 8012664:	0801ade4 	.word	0x0801ade4
 8012668:	0801b18c 	.word	0x0801b18c
 801266c:	0801ae30 	.word	0x0801ae30
 8012670:	2300      	movs	r3, #0
 8012672:	4423      	add	r3, r4
 8012674:	b29a      	uxth	r2, r3
 8012676:	4b98      	ldr	r3, [pc, #608]	; (80128d8 <tcp_receive+0xb04>)
 8012678:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801267a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801267c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012684:	6938      	ldr	r0, [r7, #16]
 8012686:	f7fd fc6c 	bl	800ff62 <tcp_seg_free>
            while (next &&
 801268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00e      	beq.n	80126ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012690:	4b91      	ldr	r3, [pc, #580]	; (80128d8 <tcp_receive+0xb04>)
 8012692:	881b      	ldrh	r3, [r3, #0]
 8012694:	461a      	mov	r2, r3
 8012696:	4b91      	ldr	r3, [pc, #580]	; (80128dc <tcp_receive+0xb08>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	441a      	add	r2, r3
 801269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80126a4:	8909      	ldrh	r1, [r1, #8]
 80126a6:	440b      	add	r3, r1
 80126a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	da9a      	bge.n	80125e4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80126ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d059      	beq.n	8012768 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80126b4:	4b88      	ldr	r3, [pc, #544]	; (80128d8 <tcp_receive+0xb04>)
 80126b6:	881b      	ldrh	r3, [r3, #0]
 80126b8:	461a      	mov	r2, r3
 80126ba:	4b88      	ldr	r3, [pc, #544]	; (80128dc <tcp_receive+0xb08>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	441a      	add	r2, r3
 80126c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	dd4d      	ble.n	8012768 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80126cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	b29a      	uxth	r2, r3
 80126d4:	4b81      	ldr	r3, [pc, #516]	; (80128dc <tcp_receive+0xb08>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	b29b      	uxth	r3, r3
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	b29a      	uxth	r2, r3
 80126de:	4b80      	ldr	r3, [pc, #512]	; (80128e0 <tcp_receive+0xb0c>)
 80126e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126e2:	4b7f      	ldr	r3, [pc, #508]	; (80128e0 <tcp_receive+0xb0c>)
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	899b      	ldrh	r3, [r3, #12]
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fa fc0a 	bl	800cf04 <lwip_htons>
 80126f0:	4603      	mov	r3, r0
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	f003 0302 	and.w	r3, r3, #2
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d005      	beq.n	8012708 <tcp_receive+0x934>
                inseg.len -= 1;
 80126fc:	4b78      	ldr	r3, [pc, #480]	; (80128e0 <tcp_receive+0xb0c>)
 80126fe:	891b      	ldrh	r3, [r3, #8]
 8012700:	3b01      	subs	r3, #1
 8012702:	b29a      	uxth	r2, r3
 8012704:	4b76      	ldr	r3, [pc, #472]	; (80128e0 <tcp_receive+0xb0c>)
 8012706:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012708:	4b75      	ldr	r3, [pc, #468]	; (80128e0 <tcp_receive+0xb0c>)
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	4a74      	ldr	r2, [pc, #464]	; (80128e0 <tcp_receive+0xb0c>)
 801270e:	8912      	ldrh	r2, [r2, #8]
 8012710:	4611      	mov	r1, r2
 8012712:	4618      	mov	r0, r3
 8012714:	f7fb fe1c 	bl	800e350 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012718:	4b71      	ldr	r3, [pc, #452]	; (80128e0 <tcp_receive+0xb0c>)
 801271a:	891c      	ldrh	r4, [r3, #8]
 801271c:	4b70      	ldr	r3, [pc, #448]	; (80128e0 <tcp_receive+0xb0c>)
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	899b      	ldrh	r3, [r3, #12]
 8012722:	b29b      	uxth	r3, r3
 8012724:	4618      	mov	r0, r3
 8012726:	f7fa fbed 	bl	800cf04 <lwip_htons>
 801272a:	4603      	mov	r3, r0
 801272c:	b2db      	uxtb	r3, r3
 801272e:	f003 0303 	and.w	r3, r3, #3
 8012732:	2b00      	cmp	r3, #0
 8012734:	d001      	beq.n	801273a <tcp_receive+0x966>
 8012736:	2301      	movs	r3, #1
 8012738:	e000      	b.n	801273c <tcp_receive+0x968>
 801273a:	2300      	movs	r3, #0
 801273c:	4423      	add	r3, r4
 801273e:	b29a      	uxth	r2, r3
 8012740:	4b65      	ldr	r3, [pc, #404]	; (80128d8 <tcp_receive+0xb04>)
 8012742:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012744:	4b64      	ldr	r3, [pc, #400]	; (80128d8 <tcp_receive+0xb04>)
 8012746:	881b      	ldrh	r3, [r3, #0]
 8012748:	461a      	mov	r2, r3
 801274a:	4b64      	ldr	r3, [pc, #400]	; (80128dc <tcp_receive+0xb08>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	441a      	add	r2, r3
 8012750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	429a      	cmp	r2, r3
 8012758:	d006      	beq.n	8012768 <tcp_receive+0x994>
 801275a:	4b62      	ldr	r3, [pc, #392]	; (80128e4 <tcp_receive+0xb10>)
 801275c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012760:	4961      	ldr	r1, [pc, #388]	; (80128e8 <tcp_receive+0xb14>)
 8012762:	4862      	ldr	r0, [pc, #392]	; (80128ec <tcp_receive+0xb18>)
 8012764:	f005 fd22 	bl	80181ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801276c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801276e:	4b5a      	ldr	r3, [pc, #360]	; (80128d8 <tcp_receive+0xb04>)
 8012770:	881b      	ldrh	r3, [r3, #0]
 8012772:	461a      	mov	r2, r3
 8012774:	4b59      	ldr	r3, [pc, #356]	; (80128dc <tcp_receive+0xb08>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	441a      	add	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012782:	4b55      	ldr	r3, [pc, #340]	; (80128d8 <tcp_receive+0xb04>)
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	429a      	cmp	r2, r3
 8012788:	d206      	bcs.n	8012798 <tcp_receive+0x9c4>
 801278a:	4b56      	ldr	r3, [pc, #344]	; (80128e4 <tcp_receive+0xb10>)
 801278c:	f240 6207 	movw	r2, #1543	; 0x607
 8012790:	4957      	ldr	r1, [pc, #348]	; (80128f0 <tcp_receive+0xb1c>)
 8012792:	4856      	ldr	r0, [pc, #344]	; (80128ec <tcp_receive+0xb18>)
 8012794:	f005 fd0a 	bl	80181ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801279c:	4b4e      	ldr	r3, [pc, #312]	; (80128d8 <tcp_receive+0xb04>)
 801279e:	881b      	ldrh	r3, [r3, #0]
 80127a0:	1ad3      	subs	r3, r2, r3
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f7fc feb5 	bl	800f518 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80127ae:	4b4c      	ldr	r3, [pc, #304]	; (80128e0 <tcp_receive+0xb0c>)
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	891b      	ldrh	r3, [r3, #8]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d006      	beq.n	80127c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80127b8:	4b49      	ldr	r3, [pc, #292]	; (80128e0 <tcp_receive+0xb0c>)
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	4a4d      	ldr	r2, [pc, #308]	; (80128f4 <tcp_receive+0xb20>)
 80127be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80127c0:	4b47      	ldr	r3, [pc, #284]	; (80128e0 <tcp_receive+0xb0c>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127c6:	4b46      	ldr	r3, [pc, #280]	; (80128e0 <tcp_receive+0xb0c>)
 80127c8:	68db      	ldr	r3, [r3, #12]
 80127ca:	899b      	ldrh	r3, [r3, #12]
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7fa fb98 	bl	800cf04 <lwip_htons>
 80127d4:	4603      	mov	r3, r0
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	f003 0301 	and.w	r3, r3, #1
 80127dc:	2b00      	cmp	r3, #0
 80127de:	f000 80b8 	beq.w	8012952 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80127e2:	4b45      	ldr	r3, [pc, #276]	; (80128f8 <tcp_receive+0xb24>)
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	f043 0320 	orr.w	r3, r3, #32
 80127ea:	b2da      	uxtb	r2, r3
 80127ec:	4b42      	ldr	r3, [pc, #264]	; (80128f8 <tcp_receive+0xb24>)
 80127ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80127f0:	e0af      	b.n	8012952 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	4a36      	ldr	r2, [pc, #216]	; (80128dc <tcp_receive+0xb08>)
 8012802:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	891b      	ldrh	r3, [r3, #8]
 8012808:	461c      	mov	r4, r3
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	899b      	ldrh	r3, [r3, #12]
 8012810:	b29b      	uxth	r3, r3
 8012812:	4618      	mov	r0, r3
 8012814:	f7fa fb76 	bl	800cf04 <lwip_htons>
 8012818:	4603      	mov	r3, r0
 801281a:	b2db      	uxtb	r3, r3
 801281c:	f003 0303 	and.w	r3, r3, #3
 8012820:	2b00      	cmp	r3, #0
 8012822:	d001      	beq.n	8012828 <tcp_receive+0xa54>
 8012824:	2301      	movs	r3, #1
 8012826:	e000      	b.n	801282a <tcp_receive+0xa56>
 8012828:	2300      	movs	r3, #0
 801282a:	191a      	adds	r2, r3, r4
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012830:	441a      	add	r2, r3
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801283a:	461c      	mov	r4, r3
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	891b      	ldrh	r3, [r3, #8]
 8012840:	461d      	mov	r5, r3
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	68db      	ldr	r3, [r3, #12]
 8012846:	899b      	ldrh	r3, [r3, #12]
 8012848:	b29b      	uxth	r3, r3
 801284a:	4618      	mov	r0, r3
 801284c:	f7fa fb5a 	bl	800cf04 <lwip_htons>
 8012850:	4603      	mov	r3, r0
 8012852:	b2db      	uxtb	r3, r3
 8012854:	f003 0303 	and.w	r3, r3, #3
 8012858:	2b00      	cmp	r3, #0
 801285a:	d001      	beq.n	8012860 <tcp_receive+0xa8c>
 801285c:	2301      	movs	r3, #1
 801285e:	e000      	b.n	8012862 <tcp_receive+0xa8e>
 8012860:	2300      	movs	r3, #0
 8012862:	442b      	add	r3, r5
 8012864:	429c      	cmp	r4, r3
 8012866:	d206      	bcs.n	8012876 <tcp_receive+0xaa2>
 8012868:	4b1e      	ldr	r3, [pc, #120]	; (80128e4 <tcp_receive+0xb10>)
 801286a:	f240 622b 	movw	r2, #1579	; 0x62b
 801286e:	4923      	ldr	r1, [pc, #140]	; (80128fc <tcp_receive+0xb28>)
 8012870:	481e      	ldr	r0, [pc, #120]	; (80128ec <tcp_receive+0xb18>)
 8012872:	f005 fc9b 	bl	80181ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	891b      	ldrh	r3, [r3, #8]
 801287a:	461c      	mov	r4, r3
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	68db      	ldr	r3, [r3, #12]
 8012880:	899b      	ldrh	r3, [r3, #12]
 8012882:	b29b      	uxth	r3, r3
 8012884:	4618      	mov	r0, r3
 8012886:	f7fa fb3d 	bl	800cf04 <lwip_htons>
 801288a:	4603      	mov	r3, r0
 801288c:	b2db      	uxtb	r3, r3
 801288e:	f003 0303 	and.w	r3, r3, #3
 8012892:	2b00      	cmp	r3, #0
 8012894:	d001      	beq.n	801289a <tcp_receive+0xac6>
 8012896:	2301      	movs	r3, #1
 8012898:	e000      	b.n	801289c <tcp_receive+0xac8>
 801289a:	2300      	movs	r3, #0
 801289c:	1919      	adds	r1, r3, r4
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80128a2:	b28b      	uxth	r3, r1
 80128a4:	1ad3      	subs	r3, r2, r3
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7fc fe33 	bl	800f518 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	891b      	ldrh	r3, [r3, #8]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d028      	beq.n	801290e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80128bc:	4b0d      	ldr	r3, [pc, #52]	; (80128f4 <tcp_receive+0xb20>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d01d      	beq.n	8012900 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80128c4:	4b0b      	ldr	r3, [pc, #44]	; (80128f4 <tcp_receive+0xb20>)
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	4619      	mov	r1, r3
 80128ce:	4610      	mov	r0, r2
 80128d0:	f7fb ff92 	bl	800e7f8 <pbuf_cat>
 80128d4:	e018      	b.n	8012908 <tcp_receive+0xb34>
 80128d6:	bf00      	nop
 80128d8:	20004ba2 	.word	0x20004ba2
 80128dc:	20004b98 	.word	0x20004b98
 80128e0:	20004b78 	.word	0x20004b78
 80128e4:	0801ade4 	.word	0x0801ade4
 80128e8:	0801b1c4 	.word	0x0801b1c4
 80128ec:	0801ae30 	.word	0x0801ae30
 80128f0:	0801b200 	.word	0x0801b200
 80128f4:	20004ba8 	.word	0x20004ba8
 80128f8:	20004ba5 	.word	0x20004ba5
 80128fc:	0801b220 	.word	0x0801b220
            } else {
              recv_data = cseg->p;
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	4a70      	ldr	r2, [pc, #448]	; (8012ac8 <tcp_receive+0xcf4>)
 8012906:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	2200      	movs	r2, #0
 801290c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	68db      	ldr	r3, [r3, #12]
 8012912:	899b      	ldrh	r3, [r3, #12]
 8012914:	b29b      	uxth	r3, r3
 8012916:	4618      	mov	r0, r3
 8012918:	f7fa faf4 	bl	800cf04 <lwip_htons>
 801291c:	4603      	mov	r3, r0
 801291e:	b2db      	uxtb	r3, r3
 8012920:	f003 0301 	and.w	r3, r3, #1
 8012924:	2b00      	cmp	r3, #0
 8012926:	d00d      	beq.n	8012944 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012928:	4b68      	ldr	r3, [pc, #416]	; (8012acc <tcp_receive+0xcf8>)
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	f043 0320 	orr.w	r3, r3, #32
 8012930:	b2da      	uxtb	r2, r3
 8012932:	4b66      	ldr	r3, [pc, #408]	; (8012acc <tcp_receive+0xcf8>)
 8012934:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	7d1b      	ldrb	r3, [r3, #20]
 801293a:	2b04      	cmp	r3, #4
 801293c:	d102      	bne.n	8012944 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2207      	movs	r2, #7
 8012942:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801294c:	68b8      	ldr	r0, [r7, #8]
 801294e:	f7fd fb08 	bl	800ff62 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012956:	2b00      	cmp	r3, #0
 8012958:	d008      	beq.n	801296c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	685a      	ldr	r2, [r3, #4]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012966:	429a      	cmp	r2, r3
 8012968:	f43f af43 	beq.w	80127f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8b5b      	ldrh	r3, [r3, #26]
 8012970:	f003 0301 	and.w	r3, r3, #1
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00e      	beq.n	8012996 <tcp_receive+0xbc2>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	8b5b      	ldrh	r3, [r3, #26]
 801297c:	f023 0301 	bic.w	r3, r3, #1
 8012980:	b29a      	uxth	r2, r3
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	835a      	strh	r2, [r3, #26]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	8b5b      	ldrh	r3, [r3, #26]
 801298a:	f043 0302 	orr.w	r3, r3, #2
 801298e:	b29a      	uxth	r2, r3
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012994:	e188      	b.n	8012ca8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	8b5b      	ldrh	r3, [r3, #26]
 801299a:	f043 0301 	orr.w	r3, r3, #1
 801299e:	b29a      	uxth	r2, r3
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80129a4:	e180      	b.n	8012ca8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d106      	bne.n	80129bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80129ae:	4848      	ldr	r0, [pc, #288]	; (8012ad0 <tcp_receive+0xcfc>)
 80129b0:	f7fd faf0 	bl	800ff94 <tcp_seg_copy>
 80129b4:	4602      	mov	r2, r0
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	675a      	str	r2, [r3, #116]	; 0x74
 80129ba:	e16d      	b.n	8012c98 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80129bc:	2300      	movs	r3, #0
 80129be:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80129c6:	e157      	b.n	8012c78 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80129c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	685a      	ldr	r2, [r3, #4]
 80129ce:	4b41      	ldr	r3, [pc, #260]	; (8012ad4 <tcp_receive+0xd00>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d11d      	bne.n	8012a12 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80129d6:	4b3e      	ldr	r3, [pc, #248]	; (8012ad0 <tcp_receive+0xcfc>)
 80129d8:	891a      	ldrh	r2, [r3, #8]
 80129da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129dc:	891b      	ldrh	r3, [r3, #8]
 80129de:	429a      	cmp	r2, r3
 80129e0:	f240 814f 	bls.w	8012c82 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129e4:	483a      	ldr	r0, [pc, #232]	; (8012ad0 <tcp_receive+0xcfc>)
 80129e6:	f7fd fad5 	bl	800ff94 <tcp_seg_copy>
 80129ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f000 8149 	beq.w	8012c86 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80129f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d003      	beq.n	8012a02 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80129fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129fc:	697a      	ldr	r2, [r7, #20]
 80129fe:	601a      	str	r2, [r3, #0]
 8012a00:	e002      	b.n	8012a08 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	697a      	ldr	r2, [r7, #20]
 8012a06:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a0a:	6978      	ldr	r0, [r7, #20]
 8012a0c:	f7ff f8de 	bl	8011bcc <tcp_oos_insert_segment>
                }
                break;
 8012a10:	e139      	b.n	8012c86 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d117      	bne.n	8012a48 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012a18:	4b2e      	ldr	r3, [pc, #184]	; (8012ad4 <tcp_receive+0xd00>)
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	da57      	bge.n	8012ad8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a28:	4829      	ldr	r0, [pc, #164]	; (8012ad0 <tcp_receive+0xcfc>)
 8012a2a:	f7fd fab3 	bl	800ff94 <tcp_seg_copy>
 8012a2e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f000 8129 	beq.w	8012c8a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	69ba      	ldr	r2, [r7, #24]
 8012a3c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a40:	69b8      	ldr	r0, [r7, #24]
 8012a42:	f7ff f8c3 	bl	8011bcc <tcp_oos_insert_segment>
                  }
                  break;
 8012a46:	e120      	b.n	8012c8a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012a48:	4b22      	ldr	r3, [pc, #136]	; (8012ad4 <tcp_receive+0xd00>)
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	1ad3      	subs	r3, r2, r3
 8012a54:	3b01      	subs	r3, #1
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	db3e      	blt.n	8012ad8 <tcp_receive+0xd04>
 8012a5a:	4b1e      	ldr	r3, [pc, #120]	; (8012ad4 <tcp_receive+0xd00>)
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a60:	68db      	ldr	r3, [r3, #12]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	1ad3      	subs	r3, r2, r3
 8012a66:	3301      	adds	r3, #1
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	dc35      	bgt.n	8012ad8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a6c:	4818      	ldr	r0, [pc, #96]	; (8012ad0 <tcp_receive+0xcfc>)
 8012a6e:	f7fd fa91 	bl	800ff94 <tcp_seg_copy>
 8012a72:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f000 8109 	beq.w	8012c8e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a84:	8912      	ldrh	r2, [r2, #8]
 8012a86:	441a      	add	r2, r3
 8012a88:	4b12      	ldr	r3, [pc, #72]	; (8012ad4 <tcp_receive+0xd00>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	1ad3      	subs	r3, r2, r3
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	dd12      	ble.n	8012ab8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012a92:	4b10      	ldr	r3, [pc, #64]	; (8012ad4 <tcp_receive+0xd00>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aa6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aaa:	685a      	ldr	r2, [r3, #4]
 8012aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aae:	891b      	ldrh	r3, [r3, #8]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	4610      	mov	r0, r2
 8012ab4:	f7fb fc4c 	bl	800e350 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aba:	69fa      	ldr	r2, [r7, #28]
 8012abc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ac0:	69f8      	ldr	r0, [r7, #28]
 8012ac2:	f7ff f883 	bl	8011bcc <tcp_oos_insert_segment>
                  }
                  break;
 8012ac6:	e0e2      	b.n	8012c8e <tcp_receive+0xeba>
 8012ac8:	20004ba8 	.word	0x20004ba8
 8012acc:	20004ba5 	.word	0x20004ba5
 8012ad0:	20004b78 	.word	0x20004b78
 8012ad4:	20004b98 	.word	0x20004b98
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ada:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f040 80c6 	bne.w	8012c72 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012ae6:	4b80      	ldr	r3, [pc, #512]	; (8012ce8 <tcp_receive+0xf14>)
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	f340 80bd 	ble.w	8012c72 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	899b      	ldrh	r3, [r3, #12]
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7fa f9ff 	bl	800cf04 <lwip_htons>
 8012b06:	4603      	mov	r3, r0
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	f003 0301 	and.w	r3, r3, #1
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	f040 80bf 	bne.w	8012c92 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012b14:	4875      	ldr	r0, [pc, #468]	; (8012cec <tcp_receive+0xf18>)
 8012b16:	f7fd fa3d 	bl	800ff94 <tcp_seg_copy>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f000 80b6 	beq.w	8012c96 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b32:	8912      	ldrh	r2, [r2, #8]
 8012b34:	441a      	add	r2, r3
 8012b36:	4b6c      	ldr	r3, [pc, #432]	; (8012ce8 <tcp_receive+0xf14>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	1ad3      	subs	r3, r2, r3
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	dd12      	ble.n	8012b66 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012b40:	4b69      	ldr	r3, [pc, #420]	; (8012ce8 <tcp_receive+0xf14>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	b29a      	uxth	r2, r3
 8012b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b48:	68db      	ldr	r3, [r3, #12]
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	1ad3      	subs	r3, r2, r3
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b54:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b58:	685a      	ldr	r2, [r3, #4]
 8012b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5c:	891b      	ldrh	r3, [r3, #8]
 8012b5e:	4619      	mov	r1, r3
 8012b60:	4610      	mov	r0, r2
 8012b62:	f7fb fbf5 	bl	800e350 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012b66:	4b62      	ldr	r3, [pc, #392]	; (8012cf0 <tcp_receive+0xf1c>)
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	4b5e      	ldr	r3, [pc, #376]	; (8012ce8 <tcp_receive+0xf14>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	441a      	add	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b76:	6879      	ldr	r1, [r7, #4]
 8012b78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b7a:	440b      	add	r3, r1
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f340 8089 	ble.w	8012c96 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	899b      	ldrh	r3, [r3, #12]
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fa f9b8 	bl	800cf04 <lwip_htons>
 8012b94:	4603      	mov	r3, r0
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	f003 0301 	and.w	r3, r3, #1
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d022      	beq.n	8012be6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	68db      	ldr	r3, [r3, #12]
 8012ba6:	899b      	ldrh	r3, [r3, #12]
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	b21b      	sxth	r3, r3
 8012bac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012bb0:	b21c      	sxth	r4, r3
 8012bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	899b      	ldrh	r3, [r3, #12]
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fa f9a1 	bl	800cf04 <lwip_htons>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	b2db      	uxtb	r3, r3
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7fa f998 	bl	800cf04 <lwip_htons>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	b21b      	sxth	r3, r3
 8012bd8:	4323      	orrs	r3, r4
 8012bda:	b21a      	sxth	r2, r3
 8012bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	b292      	uxth	r2, r2
 8012be4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bf0:	4413      	add	r3, r2
 8012bf2:	b299      	uxth	r1, r3
 8012bf4:	4b3c      	ldr	r3, [pc, #240]	; (8012ce8 <tcp_receive+0xf14>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	1a8a      	subs	r2, r1, r2
 8012c00:	b292      	uxth	r2, r2
 8012c02:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	685a      	ldr	r2, [r3, #4]
 8012c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	891b      	ldrh	r3, [r3, #8]
 8012c10:	4619      	mov	r1, r3
 8012c12:	4610      	mov	r0, r2
 8012c14:	f7fb fb9c 	bl	800e350 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	891c      	ldrh	r4, [r3, #8]
 8012c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	899b      	ldrh	r3, [r3, #12]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7fa f96b 	bl	800cf04 <lwip_htons>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	f003 0303 	and.w	r3, r3, #3
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d001      	beq.n	8012c3e <tcp_receive+0xe6a>
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	e000      	b.n	8012c40 <tcp_receive+0xe6c>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	4423      	add	r3, r4
 8012c42:	b29a      	uxth	r2, r3
 8012c44:	4b2a      	ldr	r3, [pc, #168]	; (8012cf0 <tcp_receive+0xf1c>)
 8012c46:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012c48:	4b29      	ldr	r3, [pc, #164]	; (8012cf0 <tcp_receive+0xf1c>)
 8012c4a:	881b      	ldrh	r3, [r3, #0]
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	4b26      	ldr	r3, [pc, #152]	; (8012ce8 <tcp_receive+0xf14>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	441a      	add	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c58:	6879      	ldr	r1, [r7, #4]
 8012c5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c5c:	440b      	add	r3, r1
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d019      	beq.n	8012c96 <tcp_receive+0xec2>
 8012c62:	4b24      	ldr	r3, [pc, #144]	; (8012cf4 <tcp_receive+0xf20>)
 8012c64:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012c68:	4923      	ldr	r1, [pc, #140]	; (8012cf8 <tcp_receive+0xf24>)
 8012c6a:	4824      	ldr	r0, [pc, #144]	; (8012cfc <tcp_receive+0xf28>)
 8012c6c:	f005 fa9e 	bl	80181ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012c70:	e011      	b.n	8012c96 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f47f aea4 	bne.w	80129c8 <tcp_receive+0xbf4>
 8012c80:	e00a      	b.n	8012c98 <tcp_receive+0xec4>
                break;
 8012c82:	bf00      	nop
 8012c84:	e008      	b.n	8012c98 <tcp_receive+0xec4>
                break;
 8012c86:	bf00      	nop
 8012c88:	e006      	b.n	8012c98 <tcp_receive+0xec4>
                  break;
 8012c8a:	bf00      	nop
 8012c8c:	e004      	b.n	8012c98 <tcp_receive+0xec4>
                  break;
 8012c8e:	bf00      	nop
 8012c90:	e002      	b.n	8012c98 <tcp_receive+0xec4>
                  break;
 8012c92:	bf00      	nop
 8012c94:	e000      	b.n	8012c98 <tcp_receive+0xec4>
                break;
 8012c96:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f001 fe8b 	bl	80149b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012c9e:	e003      	b.n	8012ca8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f001 fe87 	bl	80149b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ca6:	e01a      	b.n	8012cde <tcp_receive+0xf0a>
 8012ca8:	e019      	b.n	8012cde <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012caa:	4b0f      	ldr	r3, [pc, #60]	; (8012ce8 <tcp_receive+0xf14>)
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	db0a      	blt.n	8012cce <tcp_receive+0xefa>
 8012cb8:	4b0b      	ldr	r3, [pc, #44]	; (8012ce8 <tcp_receive+0xf14>)
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cc0:	6879      	ldr	r1, [r7, #4]
 8012cc2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012cc4:	440b      	add	r3, r1
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	3301      	adds	r3, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	dd07      	ble.n	8012cde <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	8b5b      	ldrh	r3, [r3, #26]
 8012cd2:	f043 0302 	orr.w	r3, r3, #2
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012cdc:	e7ff      	b.n	8012cde <tcp_receive+0xf0a>
 8012cde:	bf00      	nop
 8012ce0:	3750      	adds	r7, #80	; 0x50
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	20004b98 	.word	0x20004b98
 8012cec:	20004b78 	.word	0x20004b78
 8012cf0:	20004ba2 	.word	0x20004ba2
 8012cf4:	0801ade4 	.word	0x0801ade4
 8012cf8:	0801b18c 	.word	0x0801b18c
 8012cfc:	0801ae30 	.word	0x0801ae30

08012d00 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012d06:	4b15      	ldr	r3, [pc, #84]	; (8012d5c <tcp_get_next_optbyte+0x5c>)
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	1c5a      	adds	r2, r3, #1
 8012d0c:	b291      	uxth	r1, r2
 8012d0e:	4a13      	ldr	r2, [pc, #76]	; (8012d5c <tcp_get_next_optbyte+0x5c>)
 8012d10:	8011      	strh	r1, [r2, #0]
 8012d12:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d14:	4b12      	ldr	r3, [pc, #72]	; (8012d60 <tcp_get_next_optbyte+0x60>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d004      	beq.n	8012d26 <tcp_get_next_optbyte+0x26>
 8012d1c:	4b11      	ldr	r3, [pc, #68]	; (8012d64 <tcp_get_next_optbyte+0x64>)
 8012d1e:	881b      	ldrh	r3, [r3, #0]
 8012d20:	88fa      	ldrh	r2, [r7, #6]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d208      	bcs.n	8012d38 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012d26:	4b10      	ldr	r3, [pc, #64]	; (8012d68 <tcp_get_next_optbyte+0x68>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	3314      	adds	r3, #20
 8012d2c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012d2e:	88fb      	ldrh	r3, [r7, #6]
 8012d30:	683a      	ldr	r2, [r7, #0]
 8012d32:	4413      	add	r3, r2
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	e00b      	b.n	8012d50 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012d38:	88fb      	ldrh	r3, [r7, #6]
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	4b09      	ldr	r3, [pc, #36]	; (8012d64 <tcp_get_next_optbyte+0x64>)
 8012d3e:	881b      	ldrh	r3, [r3, #0]
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	1ad3      	subs	r3, r2, r3
 8012d44:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012d46:	4b06      	ldr	r3, [pc, #24]	; (8012d60 <tcp_get_next_optbyte+0x60>)
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	797b      	ldrb	r3, [r7, #5]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr
 8012d5c:	20004b94 	.word	0x20004b94
 8012d60:	20004b90 	.word	0x20004b90
 8012d64:	20004b8e 	.word	0x20004b8e
 8012d68:	20004b88 	.word	0x20004b88

08012d6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d106      	bne.n	8012d88 <tcp_parseopt+0x1c>
 8012d7a:	4b32      	ldr	r3, [pc, #200]	; (8012e44 <tcp_parseopt+0xd8>)
 8012d7c:	f240 727d 	movw	r2, #1917	; 0x77d
 8012d80:	4931      	ldr	r1, [pc, #196]	; (8012e48 <tcp_parseopt+0xdc>)
 8012d82:	4832      	ldr	r0, [pc, #200]	; (8012e4c <tcp_parseopt+0xe0>)
 8012d84:	f005 fa12 	bl	80181ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012d88:	4b31      	ldr	r3, [pc, #196]	; (8012e50 <tcp_parseopt+0xe4>)
 8012d8a:	881b      	ldrh	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d055      	beq.n	8012e3c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d90:	4b30      	ldr	r3, [pc, #192]	; (8012e54 <tcp_parseopt+0xe8>)
 8012d92:	2200      	movs	r2, #0
 8012d94:	801a      	strh	r2, [r3, #0]
 8012d96:	e045      	b.n	8012e24 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012d98:	f7ff ffb2 	bl	8012d00 <tcp_get_next_optbyte>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012da0:	7bfb      	ldrb	r3, [r7, #15]
 8012da2:	2b02      	cmp	r3, #2
 8012da4:	d006      	beq.n	8012db4 <tcp_parseopt+0x48>
 8012da6:	2b02      	cmp	r3, #2
 8012da8:	dc2b      	bgt.n	8012e02 <tcp_parseopt+0x96>
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d041      	beq.n	8012e32 <tcp_parseopt+0xc6>
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d127      	bne.n	8012e02 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012db2:	e037      	b.n	8012e24 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012db4:	f7ff ffa4 	bl	8012d00 <tcp_get_next_optbyte>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b04      	cmp	r3, #4
 8012dbc:	d13b      	bne.n	8012e36 <tcp_parseopt+0xca>
 8012dbe:	4b25      	ldr	r3, [pc, #148]	; (8012e54 <tcp_parseopt+0xe8>)
 8012dc0:	881b      	ldrh	r3, [r3, #0]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	4a22      	ldr	r2, [pc, #136]	; (8012e50 <tcp_parseopt+0xe4>)
 8012dc6:	8812      	ldrh	r2, [r2, #0]
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	da34      	bge.n	8012e36 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012dcc:	f7ff ff98 	bl	8012d00 <tcp_get_next_optbyte>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	021b      	lsls	r3, r3, #8
 8012dd6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012dd8:	f7ff ff92 	bl	8012d00 <tcp_get_next_optbyte>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	b29a      	uxth	r2, r3
 8012de0:	89bb      	ldrh	r3, [r7, #12]
 8012de2:	4313      	orrs	r3, r2
 8012de4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012de6:	89bb      	ldrh	r3, [r7, #12]
 8012de8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012dec:	d804      	bhi.n	8012df8 <tcp_parseopt+0x8c>
 8012dee:	89bb      	ldrh	r3, [r7, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d001      	beq.n	8012df8 <tcp_parseopt+0x8c>
 8012df4:	89ba      	ldrh	r2, [r7, #12]
 8012df6:	e001      	b.n	8012dfc <tcp_parseopt+0x90>
 8012df8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012e00:	e010      	b.n	8012e24 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012e02:	f7ff ff7d 	bl	8012d00 <tcp_get_next_optbyte>
 8012e06:	4603      	mov	r3, r0
 8012e08:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012e0a:	7afb      	ldrb	r3, [r7, #11]
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d914      	bls.n	8012e3a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012e10:	7afb      	ldrb	r3, [r7, #11]
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	4b0f      	ldr	r3, [pc, #60]	; (8012e54 <tcp_parseopt+0xe8>)
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	4413      	add	r3, r2
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	3b02      	subs	r3, #2
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	4b0c      	ldr	r3, [pc, #48]	; (8012e54 <tcp_parseopt+0xe8>)
 8012e22:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e24:	4b0b      	ldr	r3, [pc, #44]	; (8012e54 <tcp_parseopt+0xe8>)
 8012e26:	881a      	ldrh	r2, [r3, #0]
 8012e28:	4b09      	ldr	r3, [pc, #36]	; (8012e50 <tcp_parseopt+0xe4>)
 8012e2a:	881b      	ldrh	r3, [r3, #0]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d3b3      	bcc.n	8012d98 <tcp_parseopt+0x2c>
 8012e30:	e004      	b.n	8012e3c <tcp_parseopt+0xd0>
          return;
 8012e32:	bf00      	nop
 8012e34:	e002      	b.n	8012e3c <tcp_parseopt+0xd0>
            return;
 8012e36:	bf00      	nop
 8012e38:	e000      	b.n	8012e3c <tcp_parseopt+0xd0>
            return;
 8012e3a:	bf00      	nop
      }
    }
  }
}
 8012e3c:	3710      	adds	r7, #16
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	0801ade4 	.word	0x0801ade4
 8012e48:	0801b248 	.word	0x0801b248
 8012e4c:	0801ae30 	.word	0x0801ae30
 8012e50:	20004b8c 	.word	0x20004b8c
 8012e54:	20004b94 	.word	0x20004b94

08012e58 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012e58:	b480      	push	{r7}
 8012e5a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012e5c:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <tcp_trigger_input_pcb_close+0x1c>)
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	f043 0310 	orr.w	r3, r3, #16
 8012e64:	b2da      	uxtb	r2, r3
 8012e66:	4b03      	ldr	r3, [pc, #12]	; (8012e74 <tcp_trigger_input_pcb_close+0x1c>)
 8012e68:	701a      	strb	r2, [r3, #0]
}
 8012e6a:	bf00      	nop
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr
 8012e74:	20004ba5 	.word	0x20004ba5

08012e78 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	60f8      	str	r0, [r7, #12]
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d00a      	beq.n	8012ea0 <tcp_route+0x28>
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	7a1b      	ldrb	r3, [r3, #8]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d006      	beq.n	8012ea0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	7a1b      	ldrb	r3, [r3, #8]
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fb f852 	bl	800df40 <netif_get_by_index>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	e003      	b.n	8012ea8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f003 fc4b 	bl	801673c <ip4_route>
 8012ea6:	4603      	mov	r3, r0
  }
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3710      	adds	r7, #16
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012eb0:	b590      	push	{r4, r7, lr}
 8012eb2:	b087      	sub	sp, #28
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	603b      	str	r3, [r7, #0]
 8012ebc:	4613      	mov	r3, r2
 8012ebe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d105      	bne.n	8012ed2 <tcp_create_segment+0x22>
 8012ec6:	4b44      	ldr	r3, [pc, #272]	; (8012fd8 <tcp_create_segment+0x128>)
 8012ec8:	22a3      	movs	r2, #163	; 0xa3
 8012eca:	4944      	ldr	r1, [pc, #272]	; (8012fdc <tcp_create_segment+0x12c>)
 8012ecc:	4844      	ldr	r0, [pc, #272]	; (8012fe0 <tcp_create_segment+0x130>)
 8012ece:	f005 f96d 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d105      	bne.n	8012ee4 <tcp_create_segment+0x34>
 8012ed8:	4b3f      	ldr	r3, [pc, #252]	; (8012fd8 <tcp_create_segment+0x128>)
 8012eda:	22a4      	movs	r2, #164	; 0xa4
 8012edc:	4941      	ldr	r1, [pc, #260]	; (8012fe4 <tcp_create_segment+0x134>)
 8012ede:	4840      	ldr	r0, [pc, #256]	; (8012fe0 <tcp_create_segment+0x130>)
 8012ee0:	f005 f964 	bl	80181ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	f003 0304 	and.w	r3, r3, #4
 8012ef0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012ef2:	2003      	movs	r0, #3
 8012ef4:	f7fa fcbc 	bl	800d870 <memp_malloc>
 8012ef8:	6138      	str	r0, [r7, #16]
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d104      	bne.n	8012f0a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012f00:	68b8      	ldr	r0, [r7, #8]
 8012f02:	f7fb fbab 	bl	800e65c <pbuf_free>
    return NULL;
 8012f06:	2300      	movs	r3, #0
 8012f08:	e061      	b.n	8012fce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012f10:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	2200      	movs	r2, #0
 8012f16:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	68ba      	ldr	r2, [r7, #8]
 8012f1c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	891a      	ldrh	r2, [r3, #8]
 8012f22:	7dfb      	ldrb	r3, [r7, #23]
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d205      	bcs.n	8012f36 <tcp_create_segment+0x86>
 8012f2a:	4b2b      	ldr	r3, [pc, #172]	; (8012fd8 <tcp_create_segment+0x128>)
 8012f2c:	22b0      	movs	r2, #176	; 0xb0
 8012f2e:	492e      	ldr	r1, [pc, #184]	; (8012fe8 <tcp_create_segment+0x138>)
 8012f30:	482b      	ldr	r0, [pc, #172]	; (8012fe0 <tcp_create_segment+0x130>)
 8012f32:	f005 f93b 	bl	80181ac <iprintf>
  seg->len = p->tot_len - optlen;
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	891a      	ldrh	r2, [r3, #8]
 8012f3a:	7dfb      	ldrb	r3, [r7, #23]
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	1ad3      	subs	r3, r2, r3
 8012f40:	b29a      	uxth	r2, r3
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012f46:	2114      	movs	r1, #20
 8012f48:	68b8      	ldr	r0, [r7, #8]
 8012f4a:	f7fb faf1 	bl	800e530 <pbuf_add_header>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d004      	beq.n	8012f5e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012f54:	6938      	ldr	r0, [r7, #16]
 8012f56:	f7fd f804 	bl	800ff62 <tcp_seg_free>
    return NULL;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e037      	b.n	8012fce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	685a      	ldr	r2, [r3, #4]
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	8ada      	ldrh	r2, [r3, #22]
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	68dc      	ldr	r4, [r3, #12]
 8012f70:	4610      	mov	r0, r2
 8012f72:	f7f9 ffc7 	bl	800cf04 <lwip_htons>
 8012f76:	4603      	mov	r3, r0
 8012f78:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	8b1a      	ldrh	r2, [r3, #24]
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	68dc      	ldr	r4, [r3, #12]
 8012f82:	4610      	mov	r0, r2
 8012f84:	f7f9 ffbe 	bl	800cf04 <lwip_htons>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	68dc      	ldr	r4, [r3, #12]
 8012f90:	6838      	ldr	r0, [r7, #0]
 8012f92:	f7f9 ffcc 	bl	800cf2e <lwip_htonl>
 8012f96:	4603      	mov	r3, r0
 8012f98:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	089b      	lsrs	r3, r3, #2
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	3305      	adds	r3, #5
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	031b      	lsls	r3, r3, #12
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	b29a      	uxth	r2, r3
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	68dc      	ldr	r4, [r3, #12]
 8012fb6:	4610      	mov	r0, r2
 8012fb8:	f7f9 ffa4 	bl	800cf04 <lwip_htons>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	749a      	strb	r2, [r3, #18]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	74da      	strb	r2, [r3, #19]
  return seg;
 8012fcc:	693b      	ldr	r3, [r7, #16]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	371c      	adds	r7, #28
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd90      	pop	{r4, r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	0801b264 	.word	0x0801b264
 8012fdc:	0801b298 	.word	0x0801b298
 8012fe0:	0801b2b8 	.word	0x0801b2b8
 8012fe4:	0801b2e0 	.word	0x0801b2e0
 8012fe8:	0801b304 	.word	0x0801b304

08012fec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b086      	sub	sp, #24
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	607b      	str	r3, [r7, #4]
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	73fb      	strb	r3, [r7, #15]
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	81bb      	strh	r3, [r7, #12]
 8012ffc:	4613      	mov	r3, r2
 8012ffe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013000:	89bb      	ldrh	r3, [r7, #12]
 8013002:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d105      	bne.n	8013016 <tcp_pbuf_prealloc+0x2a>
 801300a:	4b30      	ldr	r3, [pc, #192]	; (80130cc <tcp_pbuf_prealloc+0xe0>)
 801300c:	22e8      	movs	r2, #232	; 0xe8
 801300e:	4930      	ldr	r1, [pc, #192]	; (80130d0 <tcp_pbuf_prealloc+0xe4>)
 8013010:	4830      	ldr	r0, [pc, #192]	; (80130d4 <tcp_pbuf_prealloc+0xe8>)
 8013012:	f005 f8cb 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013016:	6a3b      	ldr	r3, [r7, #32]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d105      	bne.n	8013028 <tcp_pbuf_prealloc+0x3c>
 801301c:	4b2b      	ldr	r3, [pc, #172]	; (80130cc <tcp_pbuf_prealloc+0xe0>)
 801301e:	22e9      	movs	r2, #233	; 0xe9
 8013020:	492d      	ldr	r1, [pc, #180]	; (80130d8 <tcp_pbuf_prealloc+0xec>)
 8013022:	482c      	ldr	r0, [pc, #176]	; (80130d4 <tcp_pbuf_prealloc+0xe8>)
 8013024:	f005 f8c2 	bl	80181ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013028:	89ba      	ldrh	r2, [r7, #12]
 801302a:	897b      	ldrh	r3, [r7, #10]
 801302c:	429a      	cmp	r2, r3
 801302e:	d221      	bcs.n	8013074 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013030:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013034:	f003 0302 	and.w	r3, r3, #2
 8013038:	2b00      	cmp	r3, #0
 801303a:	d111      	bne.n	8013060 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801303c:	6a3b      	ldr	r3, [r7, #32]
 801303e:	8b5b      	ldrh	r3, [r3, #26]
 8013040:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013044:	2b00      	cmp	r3, #0
 8013046:	d115      	bne.n	8013074 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013048:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801304c:	2b00      	cmp	r3, #0
 801304e:	d007      	beq.n	8013060 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013054:	2b00      	cmp	r3, #0
 8013056:	d103      	bne.n	8013060 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801305c:	2b00      	cmp	r3, #0
 801305e:	d009      	beq.n	8013074 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013060:	89bb      	ldrh	r3, [r7, #12]
 8013062:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013066:	f023 0203 	bic.w	r2, r3, #3
 801306a:	897b      	ldrh	r3, [r7, #10]
 801306c:	4293      	cmp	r3, r2
 801306e:	bf28      	it	cs
 8013070:	4613      	movcs	r3, r2
 8013072:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013074:	8af9      	ldrh	r1, [r7, #22]
 8013076:	7bfb      	ldrb	r3, [r7, #15]
 8013078:	f44f 7220 	mov.w	r2, #640	; 0x280
 801307c:	4618      	mov	r0, r3
 801307e:	f7fb f809 	bl	800e094 <pbuf_alloc>
 8013082:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d101      	bne.n	801308e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801308a:	2300      	movs	r3, #0
 801308c:	e019      	b.n	80130c2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d006      	beq.n	80130a4 <tcp_pbuf_prealloc+0xb8>
 8013096:	4b0d      	ldr	r3, [pc, #52]	; (80130cc <tcp_pbuf_prealloc+0xe0>)
 8013098:	f240 120b 	movw	r2, #267	; 0x10b
 801309c:	490f      	ldr	r1, [pc, #60]	; (80130dc <tcp_pbuf_prealloc+0xf0>)
 801309e:	480d      	ldr	r0, [pc, #52]	; (80130d4 <tcp_pbuf_prealloc+0xe8>)
 80130a0:	f005 f884 	bl	80181ac <iprintf>
  *oversize = p->len - length;
 80130a4:	693b      	ldr	r3, [r7, #16]
 80130a6:	895a      	ldrh	r2, [r3, #10]
 80130a8:	89bb      	ldrh	r3, [r7, #12]
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	b29a      	uxth	r2, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	89ba      	ldrh	r2, [r7, #12]
 80130b6:	811a      	strh	r2, [r3, #8]
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	891a      	ldrh	r2, [r3, #8]
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	815a      	strh	r2, [r3, #10]
  return p;
 80130c0:	693b      	ldr	r3, [r7, #16]
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3718      	adds	r7, #24
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	0801b264 	.word	0x0801b264
 80130d0:	0801b31c 	.word	0x0801b31c
 80130d4:	0801b2b8 	.word	0x0801b2b8
 80130d8:	0801b340 	.word	0x0801b340
 80130dc:	0801b360 	.word	0x0801b360

080130e0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	460b      	mov	r3, r1
 80130ea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d106      	bne.n	8013100 <tcp_write_checks+0x20>
 80130f2:	4b33      	ldr	r3, [pc, #204]	; (80131c0 <tcp_write_checks+0xe0>)
 80130f4:	f240 1233 	movw	r2, #307	; 0x133
 80130f8:	4932      	ldr	r1, [pc, #200]	; (80131c4 <tcp_write_checks+0xe4>)
 80130fa:	4833      	ldr	r0, [pc, #204]	; (80131c8 <tcp_write_checks+0xe8>)
 80130fc:	f005 f856 	bl	80181ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	7d1b      	ldrb	r3, [r3, #20]
 8013104:	2b04      	cmp	r3, #4
 8013106:	d00e      	beq.n	8013126 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801310c:	2b07      	cmp	r3, #7
 801310e:	d00a      	beq.n	8013126 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013114:	2b02      	cmp	r3, #2
 8013116:	d006      	beq.n	8013126 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801311c:	2b03      	cmp	r3, #3
 801311e:	d002      	beq.n	8013126 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013120:	f06f 030a 	mvn.w	r3, #10
 8013124:	e048      	b.n	80131b8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013126:	887b      	ldrh	r3, [r7, #2]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d101      	bne.n	8013130 <tcp_write_checks+0x50>
    return ERR_OK;
 801312c:	2300      	movs	r3, #0
 801312e:	e043      	b.n	80131b8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013136:	887a      	ldrh	r2, [r7, #2]
 8013138:	429a      	cmp	r2, r3
 801313a:	d909      	bls.n	8013150 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	8b5b      	ldrh	r3, [r3, #26]
 8013140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013144:	b29a      	uxth	r2, r3
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801314a:	f04f 33ff 	mov.w	r3, #4294967295
 801314e:	e033      	b.n	80131b8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013156:	2b08      	cmp	r3, #8
 8013158:	d909      	bls.n	801316e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	8b5b      	ldrh	r3, [r3, #26]
 801315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013162:	b29a      	uxth	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013168:	f04f 33ff 	mov.w	r3, #4294967295
 801316c:	e024      	b.n	80131b8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00f      	beq.n	8013198 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801317c:	2b00      	cmp	r3, #0
 801317e:	d11a      	bne.n	80131b6 <tcp_write_checks+0xd6>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013184:	2b00      	cmp	r3, #0
 8013186:	d116      	bne.n	80131b6 <tcp_write_checks+0xd6>
 8013188:	4b0d      	ldr	r3, [pc, #52]	; (80131c0 <tcp_write_checks+0xe0>)
 801318a:	f240 1255 	movw	r2, #341	; 0x155
 801318e:	490f      	ldr	r1, [pc, #60]	; (80131cc <tcp_write_checks+0xec>)
 8013190:	480d      	ldr	r0, [pc, #52]	; (80131c8 <tcp_write_checks+0xe8>)
 8013192:	f005 f80b 	bl	80181ac <iprintf>
 8013196:	e00e      	b.n	80131b6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801319c:	2b00      	cmp	r3, #0
 801319e:	d103      	bne.n	80131a8 <tcp_write_checks+0xc8>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d006      	beq.n	80131b6 <tcp_write_checks+0xd6>
 80131a8:	4b05      	ldr	r3, [pc, #20]	; (80131c0 <tcp_write_checks+0xe0>)
 80131aa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80131ae:	4908      	ldr	r1, [pc, #32]	; (80131d0 <tcp_write_checks+0xf0>)
 80131b0:	4805      	ldr	r0, [pc, #20]	; (80131c8 <tcp_write_checks+0xe8>)
 80131b2:	f004 fffb 	bl	80181ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3708      	adds	r7, #8
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	0801b264 	.word	0x0801b264
 80131c4:	0801b374 	.word	0x0801b374
 80131c8:	0801b2b8 	.word	0x0801b2b8
 80131cc:	0801b394 	.word	0x0801b394
 80131d0:	0801b3d0 	.word	0x0801b3d0

080131d4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80131d4:	b590      	push	{r4, r7, lr}
 80131d6:	b09b      	sub	sp, #108	; 0x6c
 80131d8:	af04      	add	r7, sp, #16
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	4611      	mov	r1, r2
 80131e0:	461a      	mov	r2, r3
 80131e2:	460b      	mov	r3, r1
 80131e4:	80fb      	strh	r3, [r7, #6]
 80131e6:	4613      	mov	r3, r2
 80131e8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80131ee:	2300      	movs	r3, #0
 80131f0:	653b      	str	r3, [r7, #80]	; 0x50
 80131f2:	2300      	movs	r3, #0
 80131f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80131f6:	2300      	movs	r3, #0
 80131f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80131fa:	2300      	movs	r3, #0
 80131fc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80131fe:	2300      	movs	r3, #0
 8013200:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013204:	2300      	movs	r3, #0
 8013206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013212:	2300      	movs	r3, #0
 8013214:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d109      	bne.n	8013230 <tcp_write+0x5c>
 801321c:	4ba4      	ldr	r3, [pc, #656]	; (80134b0 <tcp_write+0x2dc>)
 801321e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013222:	49a4      	ldr	r1, [pc, #656]	; (80134b4 <tcp_write+0x2e0>)
 8013224:	48a4      	ldr	r0, [pc, #656]	; (80134b8 <tcp_write+0x2e4>)
 8013226:	f004 ffc1 	bl	80181ac <iprintf>
 801322a:	f06f 030f 	mvn.w	r3, #15
 801322e:	e32a      	b.n	8013886 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013236:	085b      	lsrs	r3, r3, #1
 8013238:	b29a      	uxth	r2, r3
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801323e:	4293      	cmp	r3, r2
 8013240:	bf28      	it	cs
 8013242:	4613      	movcs	r3, r2
 8013244:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013248:	2b00      	cmp	r3, #0
 801324a:	d102      	bne.n	8013252 <tcp_write+0x7e>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013250:	e000      	b.n	8013254 <tcp_write+0x80>
 8013252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013254:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d109      	bne.n	8013270 <tcp_write+0x9c>
 801325c:	4b94      	ldr	r3, [pc, #592]	; (80134b0 <tcp_write+0x2dc>)
 801325e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013262:	4996      	ldr	r1, [pc, #600]	; (80134bc <tcp_write+0x2e8>)
 8013264:	4894      	ldr	r0, [pc, #592]	; (80134b8 <tcp_write+0x2e4>)
 8013266:	f004 ffa1 	bl	80181ac <iprintf>
 801326a:	f06f 030f 	mvn.w	r3, #15
 801326e:	e30a      	b.n	8013886 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013270:	88fb      	ldrh	r3, [r7, #6]
 8013272:	4619      	mov	r1, r3
 8013274:	68f8      	ldr	r0, [r7, #12]
 8013276:	f7ff ff33 	bl	80130e0 <tcp_write_checks>
 801327a:	4603      	mov	r3, r0
 801327c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013280:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013284:	2b00      	cmp	r3, #0
 8013286:	d002      	beq.n	801328e <tcp_write+0xba>
    return err;
 8013288:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801328c:	e2fb      	b.n	8013886 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013294:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013298:	2300      	movs	r3, #0
 801329a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 80f6 	beq.w	8013494 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ac:	653b      	str	r3, [r7, #80]	; 0x50
 80132ae:	e002      	b.n	80132b6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80132b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d1f8      	bne.n	80132b0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80132be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132c0:	7a9b      	ldrb	r3, [r3, #10]
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	f003 0304 	and.w	r3, r3, #4
 80132ca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80132cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80132ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132d0:	891b      	ldrh	r3, [r3, #8]
 80132d2:	4619      	mov	r1, r3
 80132d4:	8c3b      	ldrh	r3, [r7, #32]
 80132d6:	440b      	add	r3, r1
 80132d8:	429a      	cmp	r2, r3
 80132da:	da06      	bge.n	80132ea <tcp_write+0x116>
 80132dc:	4b74      	ldr	r3, [pc, #464]	; (80134b0 <tcp_write+0x2dc>)
 80132de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80132e2:	4977      	ldr	r1, [pc, #476]	; (80134c0 <tcp_write+0x2ec>)
 80132e4:	4874      	ldr	r0, [pc, #464]	; (80134b8 <tcp_write+0x2e4>)
 80132e6:	f004 ff61 	bl	80181ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80132ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ec:	891a      	ldrh	r2, [r3, #8]
 80132ee:	8c3b      	ldrh	r3, [r7, #32]
 80132f0:	4413      	add	r3, r2
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80132f6:	1ad3      	subs	r3, r2, r3
 80132f8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013300:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013302:	8a7b      	ldrh	r3, [r7, #18]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d026      	beq.n	8013356 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013308:	8a7b      	ldrh	r3, [r7, #18]
 801330a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801330c:	429a      	cmp	r2, r3
 801330e:	d206      	bcs.n	801331e <tcp_write+0x14a>
 8013310:	4b67      	ldr	r3, [pc, #412]	; (80134b0 <tcp_write+0x2dc>)
 8013312:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013316:	496b      	ldr	r1, [pc, #428]	; (80134c4 <tcp_write+0x2f0>)
 8013318:	4867      	ldr	r0, [pc, #412]	; (80134b8 <tcp_write+0x2e4>)
 801331a:	f004 ff47 	bl	80181ac <iprintf>
      seg = last_unsent;
 801331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013320:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013322:	8a7b      	ldrh	r3, [r7, #18]
 8013324:	88fa      	ldrh	r2, [r7, #6]
 8013326:	4293      	cmp	r3, r2
 8013328:	bf28      	it	cs
 801332a:	4613      	movcs	r3, r2
 801332c:	b29b      	uxth	r3, r3
 801332e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013330:	4293      	cmp	r3, r2
 8013332:	bf28      	it	cs
 8013334:	4613      	movcs	r3, r2
 8013336:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801333c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801333e:	4413      	add	r3, r2
 8013340:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013344:	8a7a      	ldrh	r2, [r7, #18]
 8013346:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	b29b      	uxth	r3, r3
 801334c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801334e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013352:	1ad3      	subs	r3, r2, r3
 8013354:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013356:	8a7b      	ldrh	r3, [r7, #18]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d00b      	beq.n	8013374 <tcp_write+0x1a0>
 801335c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013360:	88fb      	ldrh	r3, [r7, #6]
 8013362:	429a      	cmp	r2, r3
 8013364:	d006      	beq.n	8013374 <tcp_write+0x1a0>
 8013366:	4b52      	ldr	r3, [pc, #328]	; (80134b0 <tcp_write+0x2dc>)
 8013368:	f44f 7200 	mov.w	r2, #512	; 0x200
 801336c:	4956      	ldr	r1, [pc, #344]	; (80134c8 <tcp_write+0x2f4>)
 801336e:	4852      	ldr	r0, [pc, #328]	; (80134b8 <tcp_write+0x2e4>)
 8013370:	f004 ff1c 	bl	80181ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013374:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013378:	88fb      	ldrh	r3, [r7, #6]
 801337a:	429a      	cmp	r2, r3
 801337c:	f080 8167 	bcs.w	801364e <tcp_write+0x47a>
 8013380:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013382:	2b00      	cmp	r3, #0
 8013384:	f000 8163 	beq.w	801364e <tcp_write+0x47a>
 8013388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801338a:	891b      	ldrh	r3, [r3, #8]
 801338c:	2b00      	cmp	r3, #0
 801338e:	f000 815e 	beq.w	801364e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013392:	88fa      	ldrh	r2, [r7, #6]
 8013394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013398:	1ad2      	subs	r2, r2, r3
 801339a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801339c:	4293      	cmp	r3, r2
 801339e:	bfa8      	it	ge
 80133a0:	4613      	movge	r3, r2
 80133a2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80133a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133a6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80133a8:	797b      	ldrb	r3, [r7, #5]
 80133aa:	f003 0301 	and.w	r3, r3, #1
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d027      	beq.n	8013402 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80133b2:	f107 0012 	add.w	r0, r7, #18
 80133b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133b8:	8bf9      	ldrh	r1, [r7, #30]
 80133ba:	2301      	movs	r3, #1
 80133bc:	9302      	str	r3, [sp, #8]
 80133be:	797b      	ldrb	r3, [r7, #5]
 80133c0:	9301      	str	r3, [sp, #4]
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	4603      	mov	r3, r0
 80133c8:	2000      	movs	r0, #0
 80133ca:	f7ff fe0f 	bl	8012fec <tcp_pbuf_prealloc>
 80133ce:	6578      	str	r0, [r7, #84]	; 0x54
 80133d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f000 8225 	beq.w	8013822 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80133d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133da:	6858      	ldr	r0, [r3, #4]
 80133dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133e0:	68ba      	ldr	r2, [r7, #8]
 80133e2:	4413      	add	r3, r2
 80133e4:	8bfa      	ldrh	r2, [r7, #30]
 80133e6:	4619      	mov	r1, r3
 80133e8:	f004 fe6f 	bl	80180ca <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80133ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80133ee:	f7fb f9c3 	bl	800e778 <pbuf_clen>
 80133f2:	4603      	mov	r3, r0
 80133f4:	461a      	mov	r2, r3
 80133f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80133fa:	4413      	add	r3, r2
 80133fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013400:	e041      	b.n	8013486 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	637b      	str	r3, [r7, #52]	; 0x34
 8013408:	e002      	b.n	8013410 <tcp_write+0x23c>
 801340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	637b      	str	r3, [r7, #52]	; 0x34
 8013410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d1f8      	bne.n	801340a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801341a:	7b1b      	ldrb	r3, [r3, #12]
 801341c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013420:	2b00      	cmp	r3, #0
 8013422:	d115      	bne.n	8013450 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801342a:	8952      	ldrh	r2, [r2, #10]
 801342c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801342e:	68ba      	ldr	r2, [r7, #8]
 8013430:	429a      	cmp	r2, r3
 8013432:	d10d      	bne.n	8013450 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013434:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013438:	2b00      	cmp	r3, #0
 801343a:	d006      	beq.n	801344a <tcp_write+0x276>
 801343c:	4b1c      	ldr	r3, [pc, #112]	; (80134b0 <tcp_write+0x2dc>)
 801343e:	f240 2231 	movw	r2, #561	; 0x231
 8013442:	4922      	ldr	r1, [pc, #136]	; (80134cc <tcp_write+0x2f8>)
 8013444:	481c      	ldr	r0, [pc, #112]	; (80134b8 <tcp_write+0x2e4>)
 8013446:	f004 feb1 	bl	80181ac <iprintf>
          extendlen = seglen;
 801344a:	8bfb      	ldrh	r3, [r7, #30]
 801344c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801344e:	e01a      	b.n	8013486 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013450:	8bfb      	ldrh	r3, [r7, #30]
 8013452:	2201      	movs	r2, #1
 8013454:	4619      	mov	r1, r3
 8013456:	2000      	movs	r0, #0
 8013458:	f7fa fe1c 	bl	800e094 <pbuf_alloc>
 801345c:	6578      	str	r0, [r7, #84]	; 0x54
 801345e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013460:	2b00      	cmp	r3, #0
 8013462:	f000 81e0 	beq.w	8013826 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013466:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801346a:	68ba      	ldr	r2, [r7, #8]
 801346c:	441a      	add	r2, r3
 801346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013470:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013472:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013474:	f7fb f980 	bl	800e778 <pbuf_clen>
 8013478:	4603      	mov	r3, r0
 801347a:	461a      	mov	r2, r3
 801347c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013480:	4413      	add	r3, r2
 8013482:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013486:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801348a:	8bfb      	ldrh	r3, [r7, #30]
 801348c:	4413      	add	r3, r2
 801348e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013492:	e0dc      	b.n	801364e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801349a:	2b00      	cmp	r3, #0
 801349c:	f000 80d7 	beq.w	801364e <tcp_write+0x47a>
 80134a0:	4b03      	ldr	r3, [pc, #12]	; (80134b0 <tcp_write+0x2dc>)
 80134a2:	f240 224a 	movw	r2, #586	; 0x24a
 80134a6:	490a      	ldr	r1, [pc, #40]	; (80134d0 <tcp_write+0x2fc>)
 80134a8:	4803      	ldr	r0, [pc, #12]	; (80134b8 <tcp_write+0x2e4>)
 80134aa:	f004 fe7f 	bl	80181ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80134ae:	e0ce      	b.n	801364e <tcp_write+0x47a>
 80134b0:	0801b264 	.word	0x0801b264
 80134b4:	0801b404 	.word	0x0801b404
 80134b8:	0801b2b8 	.word	0x0801b2b8
 80134bc:	0801b41c 	.word	0x0801b41c
 80134c0:	0801b450 	.word	0x0801b450
 80134c4:	0801b468 	.word	0x0801b468
 80134c8:	0801b488 	.word	0x0801b488
 80134cc:	0801b4a8 	.word	0x0801b4a8
 80134d0:	0801b4d4 	.word	0x0801b4d4
    struct pbuf *p;
    u16_t left = len - pos;
 80134d4:	88fa      	ldrh	r2, [r7, #6]
 80134d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80134de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80134ea:	8b7a      	ldrh	r2, [r7, #26]
 80134ec:	8bbb      	ldrh	r3, [r7, #28]
 80134ee:	4293      	cmp	r3, r2
 80134f0:	bf28      	it	cs
 80134f2:	4613      	movcs	r3, r2
 80134f4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80134f6:	797b      	ldrb	r3, [r7, #5]
 80134f8:	f003 0301 	and.w	r3, r3, #1
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d036      	beq.n	801356e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013500:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013504:	b29a      	uxth	r2, r3
 8013506:	8b3b      	ldrh	r3, [r7, #24]
 8013508:	4413      	add	r3, r2
 801350a:	b299      	uxth	r1, r3
 801350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801350e:	2b00      	cmp	r3, #0
 8013510:	bf0c      	ite	eq
 8013512:	2301      	moveq	r3, #1
 8013514:	2300      	movne	r3, #0
 8013516:	b2db      	uxtb	r3, r3
 8013518:	f107 0012 	add.w	r0, r7, #18
 801351c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801351e:	9302      	str	r3, [sp, #8]
 8013520:	797b      	ldrb	r3, [r7, #5]
 8013522:	9301      	str	r3, [sp, #4]
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	9300      	str	r3, [sp, #0]
 8013528:	4603      	mov	r3, r0
 801352a:	2036      	movs	r0, #54	; 0x36
 801352c:	f7ff fd5e 	bl	8012fec <tcp_pbuf_prealloc>
 8013530:	6338      	str	r0, [r7, #48]	; 0x30
 8013532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013534:	2b00      	cmp	r3, #0
 8013536:	f000 8178 	beq.w	801382a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353c:	895b      	ldrh	r3, [r3, #10]
 801353e:	8b3a      	ldrh	r2, [r7, #24]
 8013540:	429a      	cmp	r2, r3
 8013542:	d906      	bls.n	8013552 <tcp_write+0x37e>
 8013544:	4b8c      	ldr	r3, [pc, #560]	; (8013778 <tcp_write+0x5a4>)
 8013546:	f240 2266 	movw	r2, #614	; 0x266
 801354a:	498c      	ldr	r1, [pc, #560]	; (801377c <tcp_write+0x5a8>)
 801354c:	488c      	ldr	r0, [pc, #560]	; (8013780 <tcp_write+0x5ac>)
 801354e:	f004 fe2d 	bl	80181ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013554:	685a      	ldr	r2, [r3, #4]
 8013556:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801355a:	18d0      	adds	r0, r2, r3
 801355c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013560:	68ba      	ldr	r2, [r7, #8]
 8013562:	4413      	add	r3, r2
 8013564:	8b3a      	ldrh	r2, [r7, #24]
 8013566:	4619      	mov	r1, r3
 8013568:	f004 fdaf 	bl	80180ca <memcpy>
 801356c:	e02f      	b.n	80135ce <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801356e:	8a7b      	ldrh	r3, [r7, #18]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d006      	beq.n	8013582 <tcp_write+0x3ae>
 8013574:	4b80      	ldr	r3, [pc, #512]	; (8013778 <tcp_write+0x5a4>)
 8013576:	f240 2271 	movw	r2, #625	; 0x271
 801357a:	4982      	ldr	r1, [pc, #520]	; (8013784 <tcp_write+0x5b0>)
 801357c:	4880      	ldr	r0, [pc, #512]	; (8013780 <tcp_write+0x5ac>)
 801357e:	f004 fe15 	bl	80181ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013582:	8b3b      	ldrh	r3, [r7, #24]
 8013584:	2201      	movs	r2, #1
 8013586:	4619      	mov	r1, r3
 8013588:	2036      	movs	r0, #54	; 0x36
 801358a:	f7fa fd83 	bl	800e094 <pbuf_alloc>
 801358e:	6178      	str	r0, [r7, #20]
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	2b00      	cmp	r3, #0
 8013594:	f000 814b 	beq.w	801382e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013598:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801359c:	68ba      	ldr	r2, [r7, #8]
 801359e:	441a      	add	r2, r3
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80135a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80135ae:	4619      	mov	r1, r3
 80135b0:	2036      	movs	r0, #54	; 0x36
 80135b2:	f7fa fd6f 	bl	800e094 <pbuf_alloc>
 80135b6:	6338      	str	r0, [r7, #48]	; 0x30
 80135b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d103      	bne.n	80135c6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80135be:	6978      	ldr	r0, [r7, #20]
 80135c0:	f7fb f84c 	bl	800e65c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80135c4:	e136      	b.n	8013834 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80135c6:	6979      	ldr	r1, [r7, #20]
 80135c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135ca:	f7fb f915 	bl	800e7f8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80135ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135d0:	f7fb f8d2 	bl	800e778 <pbuf_clen>
 80135d4:	4603      	mov	r3, r0
 80135d6:	461a      	mov	r2, r3
 80135d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80135dc:	4413      	add	r3, r2
 80135de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80135e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80135e6:	2b09      	cmp	r3, #9
 80135e8:	d903      	bls.n	80135f2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80135ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135ec:	f7fb f836 	bl	800e65c <pbuf_free>
      goto memerr;
 80135f0:	e120      	b.n	8013834 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80135f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135fa:	441a      	add	r2, r3
 80135fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013600:	9300      	str	r3, [sp, #0]
 8013602:	4613      	mov	r3, r2
 8013604:	2200      	movs	r2, #0
 8013606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013608:	68f8      	ldr	r0, [r7, #12]
 801360a:	f7ff fc51 	bl	8012eb0 <tcp_create_segment>
 801360e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013612:	2b00      	cmp	r3, #0
 8013614:	f000 810d 	beq.w	8013832 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801361a:	2b00      	cmp	r3, #0
 801361c:	d102      	bne.n	8013624 <tcp_write+0x450>
      queue = seg;
 801361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013620:	647b      	str	r3, [r7, #68]	; 0x44
 8013622:	e00c      	b.n	801363e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013626:	2b00      	cmp	r3, #0
 8013628:	d106      	bne.n	8013638 <tcp_write+0x464>
 801362a:	4b53      	ldr	r3, [pc, #332]	; (8013778 <tcp_write+0x5a4>)
 801362c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013630:	4955      	ldr	r1, [pc, #340]	; (8013788 <tcp_write+0x5b4>)
 8013632:	4853      	ldr	r0, [pc, #332]	; (8013780 <tcp_write+0x5ac>)
 8013634:	f004 fdba 	bl	80181ac <iprintf>
      prev_seg->next = seg;
 8013638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801363a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801363c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801363e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013640:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013642:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013646:	8b3b      	ldrh	r3, [r7, #24]
 8013648:	4413      	add	r3, r2
 801364a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801364e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013652:	88fb      	ldrh	r3, [r7, #6]
 8013654:	429a      	cmp	r2, r3
 8013656:	f4ff af3d 	bcc.w	80134d4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801365a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801365c:	2b00      	cmp	r3, #0
 801365e:	d02c      	beq.n	80136ba <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013666:	e01e      	b.n	80136a6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366a:	891a      	ldrh	r2, [r3, #8]
 801366c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801366e:	4413      	add	r3, r2
 8013670:	b29a      	uxth	r2, r3
 8013672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013674:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d110      	bne.n	80136a0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013684:	8952      	ldrh	r2, [r2, #10]
 8013686:	4413      	add	r3, r2
 8013688:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801368a:	68b9      	ldr	r1, [r7, #8]
 801368c:	4618      	mov	r0, r3
 801368e:	f004 fd1c 	bl	80180ca <memcpy>
        p->len += oversize_used;
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	895a      	ldrh	r2, [r3, #10]
 8013696:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013698:	4413      	add	r3, r2
 801369a:	b29a      	uxth	r2, r3
 801369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80136a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1dd      	bne.n	8013668 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80136ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ae:	891a      	ldrh	r2, [r3, #8]
 80136b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136b2:	4413      	add	r3, r2
 80136b4:	b29a      	uxth	r2, r3
 80136b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136b8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80136ba:	8a7a      	ldrh	r2, [r7, #18]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80136c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d018      	beq.n	80136fa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80136c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d106      	bne.n	80136dc <tcp_write+0x508>
 80136ce:	4b2a      	ldr	r3, [pc, #168]	; (8013778 <tcp_write+0x5a4>)
 80136d0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80136d4:	492d      	ldr	r1, [pc, #180]	; (801378c <tcp_write+0x5b8>)
 80136d6:	482a      	ldr	r0, [pc, #168]	; (8013780 <tcp_write+0x5ac>)
 80136d8:	f004 fd68 	bl	80181ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80136dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fb f888 	bl	800e7f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80136e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ea:	891a      	ldrh	r2, [r3, #8]
 80136ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136ee:	891b      	ldrh	r3, [r3, #8]
 80136f0:	4413      	add	r3, r2
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136f6:	811a      	strh	r2, [r3, #8]
 80136f8:	e037      	b.n	801376a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80136fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d034      	beq.n	801376a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013702:	2b00      	cmp	r3, #0
 8013704:	d003      	beq.n	801370e <tcp_write+0x53a>
 8013706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d106      	bne.n	801371c <tcp_write+0x548>
 801370e:	4b1a      	ldr	r3, [pc, #104]	; (8013778 <tcp_write+0x5a4>)
 8013710:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013714:	491e      	ldr	r1, [pc, #120]	; (8013790 <tcp_write+0x5bc>)
 8013716:	481a      	ldr	r0, [pc, #104]	; (8013780 <tcp_write+0x5ac>)
 8013718:	f004 fd48 	bl	80181ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801371c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	62bb      	str	r3, [r7, #40]	; 0x28
 8013722:	e009      	b.n	8013738 <tcp_write+0x564>
      p->tot_len += extendlen;
 8013724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013726:	891a      	ldrh	r2, [r3, #8]
 8013728:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801372a:	4413      	add	r3, r2
 801372c:	b29a      	uxth	r2, r3
 801372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013730:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	62bb      	str	r3, [r7, #40]	; 0x28
 8013738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d1f1      	bne.n	8013724 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013742:	891a      	ldrh	r2, [r3, #8]
 8013744:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013746:	4413      	add	r3, r2
 8013748:	b29a      	uxth	r2, r3
 801374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013750:	895a      	ldrh	r2, [r3, #10]
 8013752:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013754:	4413      	add	r3, r2
 8013756:	b29a      	uxth	r2, r3
 8013758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801375c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801375e:	891a      	ldrh	r2, [r3, #8]
 8013760:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013762:	4413      	add	r3, r2
 8013764:	b29a      	uxth	r2, r3
 8013766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013768:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801376c:	2b00      	cmp	r3, #0
 801376e:	d111      	bne.n	8013794 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013774:	66da      	str	r2, [r3, #108]	; 0x6c
 8013776:	e010      	b.n	801379a <tcp_write+0x5c6>
 8013778:	0801b264 	.word	0x0801b264
 801377c:	0801b504 	.word	0x0801b504
 8013780:	0801b2b8 	.word	0x0801b2b8
 8013784:	0801b544 	.word	0x0801b544
 8013788:	0801b554 	.word	0x0801b554
 801378c:	0801b568 	.word	0x0801b568
 8013790:	0801b5a0 	.word	0x0801b5a0
  } else {
    last_unsent->next = queue;
 8013794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013798:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801379e:	88fb      	ldrh	r3, [r7, #6]
 80137a0:	441a      	add	r2, r3
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80137ac:	88fb      	ldrh	r3, [r7, #6]
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	b29a      	uxth	r2, r3
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80137be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d00e      	beq.n	80137ea <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d10a      	bne.n	80137ea <tcp_write+0x616>
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d106      	bne.n	80137ea <tcp_write+0x616>
 80137dc:	4b2c      	ldr	r3, [pc, #176]	; (8013890 <tcp_write+0x6bc>)
 80137de:	f240 3212 	movw	r2, #786	; 0x312
 80137e2:	492c      	ldr	r1, [pc, #176]	; (8013894 <tcp_write+0x6c0>)
 80137e4:	482c      	ldr	r0, [pc, #176]	; (8013898 <tcp_write+0x6c4>)
 80137e6:	f004 fce1 	bl	80181ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80137ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d016      	beq.n	801381e <tcp_write+0x64a>
 80137f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d012      	beq.n	801381e <tcp_write+0x64a>
 80137f8:	797b      	ldrb	r3, [r7, #5]
 80137fa:	f003 0302 	and.w	r3, r3, #2
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d10d      	bne.n	801381e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	899b      	ldrh	r3, [r3, #12]
 8013808:	b29c      	uxth	r4, r3
 801380a:	2008      	movs	r0, #8
 801380c:	f7f9 fb7a 	bl	800cf04 <lwip_htons>
 8013810:	4603      	mov	r3, r0
 8013812:	461a      	mov	r2, r3
 8013814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013816:	68db      	ldr	r3, [r3, #12]
 8013818:	4322      	orrs	r2, r4
 801381a:	b292      	uxth	r2, r2
 801381c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801381e:	2300      	movs	r3, #0
 8013820:	e031      	b.n	8013886 <tcp_write+0x6b2>
          goto memerr;
 8013822:	bf00      	nop
 8013824:	e006      	b.n	8013834 <tcp_write+0x660>
            goto memerr;
 8013826:	bf00      	nop
 8013828:	e004      	b.n	8013834 <tcp_write+0x660>
        goto memerr;
 801382a:	bf00      	nop
 801382c:	e002      	b.n	8013834 <tcp_write+0x660>
        goto memerr;
 801382e:	bf00      	nop
 8013830:	e000      	b.n	8013834 <tcp_write+0x660>
      goto memerr;
 8013832:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	8b5b      	ldrh	r3, [r3, #26]
 8013838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801383c:	b29a      	uxth	r2, r3
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013844:	2b00      	cmp	r3, #0
 8013846:	d002      	beq.n	801384e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013848:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801384a:	f7fa ff07 	bl	800e65c <pbuf_free>
  }
  if (queue != NULL) {
 801384e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013850:	2b00      	cmp	r3, #0
 8013852:	d002      	beq.n	801385a <tcp_write+0x686>
    tcp_segs_free(queue);
 8013854:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013856:	f7fc fb6f 	bl	800ff38 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013860:	2b00      	cmp	r3, #0
 8013862:	d00e      	beq.n	8013882 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013868:	2b00      	cmp	r3, #0
 801386a:	d10a      	bne.n	8013882 <tcp_write+0x6ae>
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013870:	2b00      	cmp	r3, #0
 8013872:	d106      	bne.n	8013882 <tcp_write+0x6ae>
 8013874:	4b06      	ldr	r3, [pc, #24]	; (8013890 <tcp_write+0x6bc>)
 8013876:	f240 3227 	movw	r2, #807	; 0x327
 801387a:	4906      	ldr	r1, [pc, #24]	; (8013894 <tcp_write+0x6c0>)
 801387c:	4806      	ldr	r0, [pc, #24]	; (8013898 <tcp_write+0x6c4>)
 801387e:	f004 fc95 	bl	80181ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013886:	4618      	mov	r0, r3
 8013888:	375c      	adds	r7, #92	; 0x5c
 801388a:	46bd      	mov	sp, r7
 801388c:	bd90      	pop	{r4, r7, pc}
 801388e:	bf00      	nop
 8013890:	0801b264 	.word	0x0801b264
 8013894:	0801b5d8 	.word	0x0801b5d8
 8013898:	0801b2b8 	.word	0x0801b2b8

0801389c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801389c:	b590      	push	{r4, r7, lr}
 801389e:	b08b      	sub	sp, #44	; 0x2c
 80138a0:	af02      	add	r7, sp, #8
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	460b      	mov	r3, r1
 80138a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80138a8:	2300      	movs	r3, #0
 80138aa:	61fb      	str	r3, [r7, #28]
 80138ac:	2300      	movs	r3, #0
 80138ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80138b0:	2300      	movs	r3, #0
 80138b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d106      	bne.n	80138c8 <tcp_split_unsent_seg+0x2c>
 80138ba:	4b95      	ldr	r3, [pc, #596]	; (8013b10 <tcp_split_unsent_seg+0x274>)
 80138bc:	f240 324b 	movw	r2, #843	; 0x34b
 80138c0:	4994      	ldr	r1, [pc, #592]	; (8013b14 <tcp_split_unsent_seg+0x278>)
 80138c2:	4895      	ldr	r0, [pc, #596]	; (8013b18 <tcp_split_unsent_seg+0x27c>)
 80138c4:	f004 fc72 	bl	80181ac <iprintf>

  useg = pcb->unsent;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d102      	bne.n	80138da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80138d4:	f04f 33ff 	mov.w	r3, #4294967295
 80138d8:	e116      	b.n	8013b08 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80138da:	887b      	ldrh	r3, [r7, #2]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d109      	bne.n	80138f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80138e0:	4b8b      	ldr	r3, [pc, #556]	; (8013b10 <tcp_split_unsent_seg+0x274>)
 80138e2:	f240 3253 	movw	r2, #851	; 0x353
 80138e6:	498d      	ldr	r1, [pc, #564]	; (8013b1c <tcp_split_unsent_seg+0x280>)
 80138e8:	488b      	ldr	r0, [pc, #556]	; (8013b18 <tcp_split_unsent_seg+0x27c>)
 80138ea:	f004 fc5f 	bl	80181ac <iprintf>
    return ERR_VAL;
 80138ee:	f06f 0305 	mvn.w	r3, #5
 80138f2:	e109      	b.n	8013b08 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	891b      	ldrh	r3, [r3, #8]
 80138f8:	887a      	ldrh	r2, [r7, #2]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d301      	bcc.n	8013902 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80138fe:	2300      	movs	r3, #0
 8013900:	e102      	b.n	8013b08 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013906:	887a      	ldrh	r2, [r7, #2]
 8013908:	429a      	cmp	r2, r3
 801390a:	d906      	bls.n	801391a <tcp_split_unsent_seg+0x7e>
 801390c:	4b80      	ldr	r3, [pc, #512]	; (8013b10 <tcp_split_unsent_seg+0x274>)
 801390e:	f240 325b 	movw	r2, #859	; 0x35b
 8013912:	4983      	ldr	r1, [pc, #524]	; (8013b20 <tcp_split_unsent_seg+0x284>)
 8013914:	4880      	ldr	r0, [pc, #512]	; (8013b18 <tcp_split_unsent_seg+0x27c>)
 8013916:	f004 fc49 	bl	80181ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	891b      	ldrh	r3, [r3, #8]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d106      	bne.n	8013930 <tcp_split_unsent_seg+0x94>
 8013922:	4b7b      	ldr	r3, [pc, #492]	; (8013b10 <tcp_split_unsent_seg+0x274>)
 8013924:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013928:	497e      	ldr	r1, [pc, #504]	; (8013b24 <tcp_split_unsent_seg+0x288>)
 801392a:	487b      	ldr	r0, [pc, #492]	; (8013b18 <tcp_split_unsent_seg+0x27c>)
 801392c:	f004 fc3e 	bl	80181ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	7a9b      	ldrb	r3, [r3, #10]
 8013934:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013936:	7bfb      	ldrb	r3, [r7, #15]
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	b2db      	uxtb	r3, r3
 801393c:	f003 0304 	and.w	r3, r3, #4
 8013940:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	891a      	ldrh	r2, [r3, #8]
 8013946:	887b      	ldrh	r3, [r7, #2]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801394c:	7bbb      	ldrb	r3, [r7, #14]
 801394e:	b29a      	uxth	r2, r3
 8013950:	89bb      	ldrh	r3, [r7, #12]
 8013952:	4413      	add	r3, r2
 8013954:	b29b      	uxth	r3, r3
 8013956:	f44f 7220 	mov.w	r2, #640	; 0x280
 801395a:	4619      	mov	r1, r3
 801395c:	2036      	movs	r0, #54	; 0x36
 801395e:	f7fa fb99 	bl	800e094 <pbuf_alloc>
 8013962:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	2b00      	cmp	r3, #0
 8013968:	f000 80b7 	beq.w	8013ada <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	891a      	ldrh	r2, [r3, #8]
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	891b      	ldrh	r3, [r3, #8]
 8013976:	1ad3      	subs	r3, r2, r3
 8013978:	b29a      	uxth	r2, r3
 801397a:	887b      	ldrh	r3, [r7, #2]
 801397c:	4413      	add	r3, r2
 801397e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	6858      	ldr	r0, [r3, #4]
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	685a      	ldr	r2, [r3, #4]
 8013988:	7bbb      	ldrb	r3, [r7, #14]
 801398a:	18d1      	adds	r1, r2, r3
 801398c:	897b      	ldrh	r3, [r7, #10]
 801398e:	89ba      	ldrh	r2, [r7, #12]
 8013990:	f7fb f85a 	bl	800ea48 <pbuf_copy_partial>
 8013994:	4603      	mov	r3, r0
 8013996:	461a      	mov	r2, r3
 8013998:	89bb      	ldrh	r3, [r7, #12]
 801399a:	4293      	cmp	r3, r2
 801399c:	f040 809f 	bne.w	8013ade <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	68db      	ldr	r3, [r3, #12]
 80139a4:	899b      	ldrh	r3, [r3, #12]
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7f9 faab 	bl	800cf04 <lwip_htons>
 80139ae:	4603      	mov	r3, r0
 80139b0:	b2db      	uxtb	r3, r3
 80139b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80139b6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80139b8:	2300      	movs	r3, #0
 80139ba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80139bc:	7efb      	ldrb	r3, [r7, #27]
 80139be:	f003 0308 	and.w	r3, r3, #8
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d007      	beq.n	80139d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80139c6:	7efb      	ldrb	r3, [r7, #27]
 80139c8:	f023 0308 	bic.w	r3, r3, #8
 80139cc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80139ce:	7ebb      	ldrb	r3, [r7, #26]
 80139d0:	f043 0308 	orr.w	r3, r3, #8
 80139d4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80139d6:	7efb      	ldrb	r3, [r7, #27]
 80139d8:	f003 0301 	and.w	r3, r3, #1
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d007      	beq.n	80139f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80139e0:	7efb      	ldrb	r3, [r7, #27]
 80139e2:	f023 0301 	bic.w	r3, r3, #1
 80139e6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80139e8:	7ebb      	ldrb	r3, [r7, #26]
 80139ea:	f043 0301 	orr.w	r3, r3, #1
 80139ee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	68db      	ldr	r3, [r3, #12]
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7f9 fa99 	bl	800cf2e <lwip_htonl>
 80139fc:	4602      	mov	r2, r0
 80139fe:	887b      	ldrh	r3, [r7, #2]
 8013a00:	18d1      	adds	r1, r2, r3
 8013a02:	7eba      	ldrb	r2, [r7, #26]
 8013a04:	7bfb      	ldrb	r3, [r7, #15]
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	460b      	mov	r3, r1
 8013a0a:	6939      	ldr	r1, [r7, #16]
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f7ff fa4f 	bl	8012eb0 <tcp_create_segment>
 8013a12:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d063      	beq.n	8013ae2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fa feaa 	bl	800e778 <pbuf_clen>
 8013a24:	4603      	mov	r3, r0
 8013a26:	461a      	mov	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a2e:	1a9b      	subs	r3, r3, r2
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	6858      	ldr	r0, [r3, #4]
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	891a      	ldrh	r2, [r3, #8]
 8013a42:	89bb      	ldrh	r3, [r7, #12]
 8013a44:	1ad3      	subs	r3, r2, r3
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	4619      	mov	r1, r3
 8013a4a:	f7fa fc81 	bl	800e350 <pbuf_realloc>
  useg->len -= remainder;
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	891a      	ldrh	r2, [r3, #8]
 8013a52:	89bb      	ldrh	r3, [r7, #12]
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	b29a      	uxth	r2, r3
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	899b      	ldrh	r3, [r3, #12]
 8013a62:	b29c      	uxth	r4, r3
 8013a64:	7efb      	ldrb	r3, [r7, #27]
 8013a66:	b29b      	uxth	r3, r3
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7f9 fa4b 	bl	800cf04 <lwip_htons>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	461a      	mov	r2, r3
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	4322      	orrs	r2, r4
 8013a78:	b292      	uxth	r2, r2
 8013a7a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7fa fe79 	bl	800e778 <pbuf_clen>
 8013a86:	4603      	mov	r3, r0
 8013a88:	461a      	mov	r2, r3
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a90:	4413      	add	r3, r2
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7fa fe6a 	bl	800e778 <pbuf_clen>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013aae:	4413      	add	r3, r2
 8013ab0:	b29a      	uxth	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	69fa      	ldr	r2, [r7, #28]
 8013ac4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d103      	bne.n	8013ad6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	e016      	b.n	8013b08 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013ada:	bf00      	nop
 8013adc:	e002      	b.n	8013ae4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013ade:	bf00      	nop
 8013ae0:	e000      	b.n	8013ae4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013ae2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d006      	beq.n	8013af8 <tcp_split_unsent_seg+0x25c>
 8013aea:	4b09      	ldr	r3, [pc, #36]	; (8013b10 <tcp_split_unsent_seg+0x274>)
 8013aec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013af0:	490d      	ldr	r1, [pc, #52]	; (8013b28 <tcp_split_unsent_seg+0x28c>)
 8013af2:	4809      	ldr	r0, [pc, #36]	; (8013b18 <tcp_split_unsent_seg+0x27c>)
 8013af4:	f004 fb5a 	bl	80181ac <iprintf>
  if (p != NULL) {
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d002      	beq.n	8013b04 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013afe:	6938      	ldr	r0, [r7, #16]
 8013b00:	f7fa fdac 	bl	800e65c <pbuf_free>
  }

  return ERR_MEM;
 8013b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3724      	adds	r7, #36	; 0x24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd90      	pop	{r4, r7, pc}
 8013b10:	0801b264 	.word	0x0801b264
 8013b14:	0801b5f8 	.word	0x0801b5f8
 8013b18:	0801b2b8 	.word	0x0801b2b8
 8013b1c:	0801b61c 	.word	0x0801b61c
 8013b20:	0801b640 	.word	0x0801b640
 8013b24:	0801b650 	.word	0x0801b650
 8013b28:	0801b660 	.word	0x0801b660

08013b2c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013b2c:	b590      	push	{r4, r7, lr}
 8013b2e:	b085      	sub	sp, #20
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d106      	bne.n	8013b48 <tcp_send_fin+0x1c>
 8013b3a:	4b21      	ldr	r3, [pc, #132]	; (8013bc0 <tcp_send_fin+0x94>)
 8013b3c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013b40:	4920      	ldr	r1, [pc, #128]	; (8013bc4 <tcp_send_fin+0x98>)
 8013b42:	4821      	ldr	r0, [pc, #132]	; (8013bc8 <tcp_send_fin+0x9c>)
 8013b44:	f004 fb32 	bl	80181ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d02e      	beq.n	8013bae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b54:	60fb      	str	r3, [r7, #12]
 8013b56:	e002      	b.n	8013b5e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d1f8      	bne.n	8013b58 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	899b      	ldrh	r3, [r3, #12]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7f9 f9c8 	bl	800cf04 <lwip_htons>
 8013b74:	4603      	mov	r3, r0
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	f003 0307 	and.w	r3, r3, #7
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d116      	bne.n	8013bae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	899b      	ldrh	r3, [r3, #12]
 8013b86:	b29c      	uxth	r4, r3
 8013b88:	2001      	movs	r0, #1
 8013b8a:	f7f9 f9bb 	bl	800cf04 <lwip_htons>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	461a      	mov	r2, r3
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	4322      	orrs	r2, r4
 8013b98:	b292      	uxth	r2, r2
 8013b9a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	8b5b      	ldrh	r3, [r3, #26]
 8013ba0:	f043 0320 	orr.w	r3, r3, #32
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013baa:	2300      	movs	r3, #0
 8013bac:	e004      	b.n	8013bb8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013bae:	2101      	movs	r1, #1
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f000 f80b 	bl	8013bcc <tcp_enqueue_flags>
 8013bb6:	4603      	mov	r3, r0
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3714      	adds	r7, #20
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd90      	pop	{r4, r7, pc}
 8013bc0:	0801b264 	.word	0x0801b264
 8013bc4:	0801b66c 	.word	0x0801b66c
 8013bc8:	0801b2b8 	.word	0x0801b2b8

08013bcc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b08a      	sub	sp, #40	; 0x28
 8013bd0:	af02      	add	r7, sp, #8
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013be0:	78fb      	ldrb	r3, [r7, #3]
 8013be2:	f003 0303 	and.w	r3, r3, #3
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d106      	bne.n	8013bf8 <tcp_enqueue_flags+0x2c>
 8013bea:	4b67      	ldr	r3, [pc, #412]	; (8013d88 <tcp_enqueue_flags+0x1bc>)
 8013bec:	f240 4211 	movw	r2, #1041	; 0x411
 8013bf0:	4966      	ldr	r1, [pc, #408]	; (8013d8c <tcp_enqueue_flags+0x1c0>)
 8013bf2:	4867      	ldr	r0, [pc, #412]	; (8013d90 <tcp_enqueue_flags+0x1c4>)
 8013bf4:	f004 fada 	bl	80181ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d106      	bne.n	8013c0c <tcp_enqueue_flags+0x40>
 8013bfe:	4b62      	ldr	r3, [pc, #392]	; (8013d88 <tcp_enqueue_flags+0x1bc>)
 8013c00:	f240 4213 	movw	r2, #1043	; 0x413
 8013c04:	4963      	ldr	r1, [pc, #396]	; (8013d94 <tcp_enqueue_flags+0x1c8>)
 8013c06:	4862      	ldr	r0, [pc, #392]	; (8013d90 <tcp_enqueue_flags+0x1c4>)
 8013c08:	f004 fad0 	bl	80181ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013c0c:	78fb      	ldrb	r3, [r7, #3]
 8013c0e:	f003 0302 	and.w	r3, r3, #2
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d001      	beq.n	8013c1a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013c16:	2301      	movs	r3, #1
 8013c18:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013c1a:	7ffb      	ldrb	r3, [r7, #31]
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	f003 0304 	and.w	r3, r3, #4
 8013c24:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013c26:	7dfb      	ldrb	r3, [r7, #23]
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c2e:	4619      	mov	r1, r3
 8013c30:	2036      	movs	r0, #54	; 0x36
 8013c32:	f7fa fa2f 	bl	800e094 <pbuf_alloc>
 8013c36:	6138      	str	r0, [r7, #16]
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d109      	bne.n	8013c52 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	8b5b      	ldrh	r3, [r3, #26]
 8013c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c50:	e095      	b.n	8013d7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	895a      	ldrh	r2, [r3, #10]
 8013c56:	7dfb      	ldrb	r3, [r7, #23]
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d206      	bcs.n	8013c6c <tcp_enqueue_flags+0xa0>
 8013c5e:	4b4a      	ldr	r3, [pc, #296]	; (8013d88 <tcp_enqueue_flags+0x1bc>)
 8013c60:	f240 4239 	movw	r2, #1081	; 0x439
 8013c64:	494c      	ldr	r1, [pc, #304]	; (8013d98 <tcp_enqueue_flags+0x1cc>)
 8013c66:	484a      	ldr	r0, [pc, #296]	; (8013d90 <tcp_enqueue_flags+0x1c4>)
 8013c68:	f004 faa0 	bl	80181ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013c70:	78fa      	ldrb	r2, [r7, #3]
 8013c72:	7ffb      	ldrb	r3, [r7, #31]
 8013c74:	9300      	str	r3, [sp, #0]
 8013c76:	460b      	mov	r3, r1
 8013c78:	6939      	ldr	r1, [r7, #16]
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7ff f918 	bl	8012eb0 <tcp_create_segment>
 8013c80:	60f8      	str	r0, [r7, #12]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d109      	bne.n	8013c9c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	8b5b      	ldrh	r3, [r3, #26]
 8013c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c96:	f04f 33ff 	mov.w	r3, #4294967295
 8013c9a:	e070      	b.n	8013d7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	f003 0303 	and.w	r3, r3, #3
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d006      	beq.n	8013cb6 <tcp_enqueue_flags+0xea>
 8013ca8:	4b37      	ldr	r3, [pc, #220]	; (8013d88 <tcp_enqueue_flags+0x1bc>)
 8013caa:	f240 4242 	movw	r2, #1090	; 0x442
 8013cae:	493b      	ldr	r1, [pc, #236]	; (8013d9c <tcp_enqueue_flags+0x1d0>)
 8013cb0:	4837      	ldr	r0, [pc, #220]	; (8013d90 <tcp_enqueue_flags+0x1c4>)
 8013cb2:	f004 fa7b 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	891b      	ldrh	r3, [r3, #8]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d006      	beq.n	8013ccc <tcp_enqueue_flags+0x100>
 8013cbe:	4b32      	ldr	r3, [pc, #200]	; (8013d88 <tcp_enqueue_flags+0x1bc>)
 8013cc0:	f240 4243 	movw	r2, #1091	; 0x443
 8013cc4:	4936      	ldr	r1, [pc, #216]	; (8013da0 <tcp_enqueue_flags+0x1d4>)
 8013cc6:	4832      	ldr	r0, [pc, #200]	; (8013d90 <tcp_enqueue_flags+0x1c4>)
 8013cc8:	f004 fa70 	bl	80181ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d103      	bne.n	8013cdc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	68fa      	ldr	r2, [r7, #12]
 8013cd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8013cda:	e00d      	b.n	8013cf8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce0:	61bb      	str	r3, [r7, #24]
 8013ce2:	e002      	b.n	8013cea <tcp_enqueue_flags+0x11e>
 8013ce4:	69bb      	ldr	r3, [r7, #24]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	61bb      	str	r3, [r7, #24]
 8013cea:	69bb      	ldr	r3, [r7, #24]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1f8      	bne.n	8013ce4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013cf2:	69bb      	ldr	r3, [r7, #24]
 8013cf4:	68fa      	ldr	r2, [r7, #12]
 8013cf6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013d00:	78fb      	ldrb	r3, [r7, #3]
 8013d02:	f003 0302 	and.w	r3, r3, #2
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d104      	bne.n	8013d14 <tcp_enqueue_flags+0x148>
 8013d0a:	78fb      	ldrb	r3, [r7, #3]
 8013d0c:	f003 0301 	and.w	r3, r3, #1
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d004      	beq.n	8013d1e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013d18:	1c5a      	adds	r2, r3, #1
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013d1e:	78fb      	ldrb	r3, [r7, #3]
 8013d20:	f003 0301 	and.w	r3, r3, #1
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d006      	beq.n	8013d36 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	8b5b      	ldrh	r3, [r3, #26]
 8013d2c:	f043 0320 	orr.w	r3, r3, #32
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fa fd1c 	bl	800e778 <pbuf_clen>
 8013d40:	4603      	mov	r3, r0
 8013d42:	461a      	mov	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d4a:	4413      	add	r3, r2
 8013d4c:	b29a      	uxth	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d00e      	beq.n	8013d7c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d10a      	bne.n	8013d7c <tcp_enqueue_flags+0x1b0>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d106      	bne.n	8013d7c <tcp_enqueue_flags+0x1b0>
 8013d6e:	4b06      	ldr	r3, [pc, #24]	; (8013d88 <tcp_enqueue_flags+0x1bc>)
 8013d70:	f240 4265 	movw	r2, #1125	; 0x465
 8013d74:	490b      	ldr	r1, [pc, #44]	; (8013da4 <tcp_enqueue_flags+0x1d8>)
 8013d76:	4806      	ldr	r0, [pc, #24]	; (8013d90 <tcp_enqueue_flags+0x1c4>)
 8013d78:	f004 fa18 	bl	80181ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3720      	adds	r7, #32
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	0801b264 	.word	0x0801b264
 8013d8c:	0801b688 	.word	0x0801b688
 8013d90:	0801b2b8 	.word	0x0801b2b8
 8013d94:	0801b6e0 	.word	0x0801b6e0
 8013d98:	0801b700 	.word	0x0801b700
 8013d9c:	0801b73c 	.word	0x0801b73c
 8013da0:	0801b754 	.word	0x0801b754
 8013da4:	0801b780 	.word	0x0801b780

08013da8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013da8:	b5b0      	push	{r4, r5, r7, lr}
 8013daa:	b08a      	sub	sp, #40	; 0x28
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d106      	bne.n	8013dc4 <tcp_output+0x1c>
 8013db6:	4b9e      	ldr	r3, [pc, #632]	; (8014030 <tcp_output+0x288>)
 8013db8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013dbc:	499d      	ldr	r1, [pc, #628]	; (8014034 <tcp_output+0x28c>)
 8013dbe:	489e      	ldr	r0, [pc, #632]	; (8014038 <tcp_output+0x290>)
 8013dc0:	f004 f9f4 	bl	80181ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	7d1b      	ldrb	r3, [r3, #20]
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d106      	bne.n	8013dda <tcp_output+0x32>
 8013dcc:	4b98      	ldr	r3, [pc, #608]	; (8014030 <tcp_output+0x288>)
 8013dce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013dd2:	499a      	ldr	r1, [pc, #616]	; (801403c <tcp_output+0x294>)
 8013dd4:	4898      	ldr	r0, [pc, #608]	; (8014038 <tcp_output+0x290>)
 8013dd6:	f004 f9e9 	bl	80181ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013dda:	4b99      	ldr	r3, [pc, #612]	; (8014040 <tcp_output+0x298>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d101      	bne.n	8013de8 <tcp_output+0x40>
    return ERR_OK;
 8013de4:	2300      	movs	r3, #0
 8013de6:	e1ce      	b.n	8014186 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013df4:	4293      	cmp	r3, r2
 8013df6:	bf28      	it	cs
 8013df8:	4613      	movcs	r3, r2
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e02:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d10b      	bne.n	8013e22 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8b5b      	ldrh	r3, [r3, #26]
 8013e0e:	f003 0302 	and.w	r3, r3, #2
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	f000 81aa 	beq.w	801416c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 fdcb 	bl	80149b4 <tcp_send_empty_ack>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	e1b1      	b.n	8014186 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013e22:	6879      	ldr	r1, [r7, #4]
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	3304      	adds	r3, #4
 8013e28:	461a      	mov	r2, r3
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f7ff f824 	bl	8012e78 <tcp_route>
 8013e30:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d102      	bne.n	8013e3e <tcp_output+0x96>
    return ERR_RTE;
 8013e38:	f06f 0303 	mvn.w	r3, #3
 8013e3c:	e1a3      	b.n	8014186 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d003      	beq.n	8013e4c <tcp_output+0xa4>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d111      	bne.n	8013e70 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d002      	beq.n	8013e58 <tcp_output+0xb0>
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	3304      	adds	r3, #4
 8013e56:	e000      	b.n	8013e5a <tcp_output+0xb2>
 8013e58:	2300      	movs	r3, #0
 8013e5a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d102      	bne.n	8013e68 <tcp_output+0xc0>
      return ERR_RTE;
 8013e62:	f06f 0303 	mvn.w	r3, #3
 8013e66:	e18e      	b.n	8014186 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e72:	68db      	ldr	r3, [r3, #12]
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f9 f859 	bl	800cf2e <lwip_htonl>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e82:	1ad3      	subs	r3, r2, r3
 8013e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e86:	8912      	ldrh	r2, [r2, #8]
 8013e88:	4413      	add	r3, r2
 8013e8a:	69ba      	ldr	r2, [r7, #24]
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d227      	bcs.n	8013ee0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e96:	461a      	mov	r2, r3
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	4293      	cmp	r3, r2
 8013e9c:	d114      	bne.n	8013ec8 <tcp_output+0x120>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d110      	bne.n	8013ec8 <tcp_output+0x120>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d10b      	bne.n	8013ec8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2201      	movs	r2, #1
 8013ebc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	8b5b      	ldrh	r3, [r3, #26]
 8013ecc:	f003 0302 	and.w	r3, r3, #2
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	f000 814d 	beq.w	8014170 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 fd6c 	bl	80149b4 <tcp_send_empty_ack>
 8013edc:	4603      	mov	r3, r0
 8013ede:	e152      	b.n	8014186 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013eec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013eee:	6a3b      	ldr	r3, [r7, #32]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f000 811c 	beq.w	801412e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013ef6:	e002      	b.n	8013efe <tcp_output+0x156>
 8013ef8:	6a3b      	ldr	r3, [r7, #32]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	623b      	str	r3, [r7, #32]
 8013efe:	6a3b      	ldr	r3, [r7, #32]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d1f8      	bne.n	8013ef8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013f06:	e112      	b.n	801412e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	899b      	ldrh	r3, [r3, #12]
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7f8 fff7 	bl	800cf04 <lwip_htons>
 8013f16:	4603      	mov	r3, r0
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	f003 0304 	and.w	r3, r3, #4
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d006      	beq.n	8013f30 <tcp_output+0x188>
 8013f22:	4b43      	ldr	r3, [pc, #268]	; (8014030 <tcp_output+0x288>)
 8013f24:	f240 5236 	movw	r2, #1334	; 0x536
 8013f28:	4946      	ldr	r1, [pc, #280]	; (8014044 <tcp_output+0x29c>)
 8013f2a:	4843      	ldr	r0, [pc, #268]	; (8014038 <tcp_output+0x290>)
 8013f2c:	f004 f93e 	bl	80181ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d01f      	beq.n	8013f78 <tcp_output+0x1d0>
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	8b5b      	ldrh	r3, [r3, #26]
 8013f3c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d119      	bne.n	8013f78 <tcp_output+0x1d0>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d00b      	beq.n	8013f64 <tcp_output+0x1bc>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d110      	bne.n	8013f78 <tcp_output+0x1d0>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f5a:	891a      	ldrh	r2, [r3, #8]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d209      	bcs.n	8013f78 <tcp_output+0x1d0>
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d004      	beq.n	8013f78 <tcp_output+0x1d0>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f74:	2b08      	cmp	r3, #8
 8013f76:	d901      	bls.n	8013f7c <tcp_output+0x1d4>
 8013f78:	2301      	movs	r3, #1
 8013f7a:	e000      	b.n	8013f7e <tcp_output+0x1d6>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d106      	bne.n	8013f90 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	8b5b      	ldrh	r3, [r3, #26]
 8013f86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	f000 80e4 	beq.w	8014158 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	7d1b      	ldrb	r3, [r3, #20]
 8013f94:	2b02      	cmp	r3, #2
 8013f96:	d00d      	beq.n	8013fb4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	68db      	ldr	r3, [r3, #12]
 8013f9c:	899b      	ldrh	r3, [r3, #12]
 8013f9e:	b29c      	uxth	r4, r3
 8013fa0:	2010      	movs	r0, #16
 8013fa2:	f7f8 ffaf 	bl	800cf04 <lwip_htons>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	461a      	mov	r2, r3
 8013faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	4322      	orrs	r2, r4
 8013fb0:	b292      	uxth	r2, r2
 8013fb2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013fb4:	697a      	ldr	r2, [r7, #20]
 8013fb6:	6879      	ldr	r1, [r7, #4]
 8013fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fba:	f000 f909 	bl	80141d0 <tcp_output_segment>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d009      	beq.n	8013fde <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	8b5b      	ldrh	r3, [r3, #26]
 8013fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	835a      	strh	r2, [r3, #26]
      return err;
 8013fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fdc:	e0d3      	b.n	8014186 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	7d1b      	ldrb	r3, [r3, #20]
 8013fea:	2b02      	cmp	r3, #2
 8013fec:	d006      	beq.n	8013ffc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	8b5b      	ldrh	r3, [r3, #26]
 8013ff2:	f023 0303 	bic.w	r3, r3, #3
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	4618      	mov	r0, r3
 8014004:	f7f8 ff93 	bl	800cf2e <lwip_htonl>
 8014008:	4604      	mov	r4, r0
 801400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400c:	891b      	ldrh	r3, [r3, #8]
 801400e:	461d      	mov	r5, r3
 8014010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	899b      	ldrh	r3, [r3, #12]
 8014016:	b29b      	uxth	r3, r3
 8014018:	4618      	mov	r0, r3
 801401a:	f7f8 ff73 	bl	800cf04 <lwip_htons>
 801401e:	4603      	mov	r3, r0
 8014020:	b2db      	uxtb	r3, r3
 8014022:	f003 0303 	and.w	r3, r3, #3
 8014026:	2b00      	cmp	r3, #0
 8014028:	d00e      	beq.n	8014048 <tcp_output+0x2a0>
 801402a:	2301      	movs	r3, #1
 801402c:	e00d      	b.n	801404a <tcp_output+0x2a2>
 801402e:	bf00      	nop
 8014030:	0801b264 	.word	0x0801b264
 8014034:	0801b7a8 	.word	0x0801b7a8
 8014038:	0801b2b8 	.word	0x0801b2b8
 801403c:	0801b7c0 	.word	0x0801b7c0
 8014040:	2000d8f0 	.word	0x2000d8f0
 8014044:	0801b7e8 	.word	0x0801b7e8
 8014048:	2300      	movs	r3, #0
 801404a:	442b      	add	r3, r5
 801404c:	4423      	add	r3, r4
 801404e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	1ad3      	subs	r3, r2, r3
 8014058:	2b00      	cmp	r3, #0
 801405a:	da02      	bge.n	8014062 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	68ba      	ldr	r2, [r7, #8]
 8014060:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	891b      	ldrh	r3, [r3, #8]
 8014066:	461c      	mov	r4, r3
 8014068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	899b      	ldrh	r3, [r3, #12]
 801406e:	b29b      	uxth	r3, r3
 8014070:	4618      	mov	r0, r3
 8014072:	f7f8 ff47 	bl	800cf04 <lwip_htons>
 8014076:	4603      	mov	r3, r0
 8014078:	b2db      	uxtb	r3, r3
 801407a:	f003 0303 	and.w	r3, r3, #3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <tcp_output+0x2de>
 8014082:	2301      	movs	r3, #1
 8014084:	e000      	b.n	8014088 <tcp_output+0x2e0>
 8014086:	2300      	movs	r3, #0
 8014088:	4423      	add	r3, r4
 801408a:	2b00      	cmp	r3, #0
 801408c:	d049      	beq.n	8014122 <tcp_output+0x37a>
      seg->next = NULL;
 801408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014090:	2200      	movs	r2, #0
 8014092:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014098:	2b00      	cmp	r3, #0
 801409a:	d105      	bne.n	80140a8 <tcp_output+0x300>
        pcb->unacked = seg;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80140a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a4:	623b      	str	r3, [r7, #32]
 80140a6:	e03f      	b.n	8014128 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80140a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7f8 ff3d 	bl	800cf2e <lwip_htonl>
 80140b4:	4604      	mov	r4, r0
 80140b6:	6a3b      	ldr	r3, [r7, #32]
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	685b      	ldr	r3, [r3, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7f8 ff36 	bl	800cf2e <lwip_htonl>
 80140c2:	4603      	mov	r3, r0
 80140c4:	1ae3      	subs	r3, r4, r3
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	da24      	bge.n	8014114 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	3370      	adds	r3, #112	; 0x70
 80140ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80140d0:	e002      	b.n	80140d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80140d8:	69fb      	ldr	r3, [r7, #28]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d011      	beq.n	8014104 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	685b      	ldr	r3, [r3, #4]
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7f8 ff20 	bl	800cf2e <lwip_htonl>
 80140ee:	4604      	mov	r4, r0
 80140f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7f8 ff19 	bl	800cf2e <lwip_htonl>
 80140fc:	4603      	mov	r3, r0
 80140fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014100:	2b00      	cmp	r3, #0
 8014102:	dbe6      	blt.n	80140d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014110:	601a      	str	r2, [r3, #0]
 8014112:	e009      	b.n	8014128 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014114:	6a3b      	ldr	r3, [r7, #32]
 8014116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014118:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801411a:	6a3b      	ldr	r3, [r7, #32]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	623b      	str	r3, [r7, #32]
 8014120:	e002      	b.n	8014128 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014124:	f7fb ff1d 	bl	800ff62 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801412c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014130:	2b00      	cmp	r3, #0
 8014132:	d012      	beq.n	801415a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014136:	68db      	ldr	r3, [r3, #12]
 8014138:	685b      	ldr	r3, [r3, #4]
 801413a:	4618      	mov	r0, r3
 801413c:	f7f8 fef7 	bl	800cf2e <lwip_htonl>
 8014140:	4602      	mov	r2, r0
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014146:	1ad3      	subs	r3, r2, r3
 8014148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801414a:	8912      	ldrh	r2, [r2, #8]
 801414c:	4413      	add	r3, r2
  while (seg != NULL &&
 801414e:	69ba      	ldr	r2, [r7, #24]
 8014150:	429a      	cmp	r2, r3
 8014152:	f4bf aed9 	bcs.w	8013f08 <tcp_output+0x160>
 8014156:	e000      	b.n	801415a <tcp_output+0x3b2>
      break;
 8014158:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801415e:	2b00      	cmp	r3, #0
 8014160:	d108      	bne.n	8014174 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2200      	movs	r2, #0
 8014166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801416a:	e004      	b.n	8014176 <tcp_output+0x3ce>
    goto output_done;
 801416c:	bf00      	nop
 801416e:	e002      	b.n	8014176 <tcp_output+0x3ce>
    goto output_done;
 8014170:	bf00      	nop
 8014172:	e000      	b.n	8014176 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014174:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	8b5b      	ldrh	r3, [r3, #26]
 801417a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801417e:	b29a      	uxth	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014184:	2300      	movs	r3, #0
}
 8014186:	4618      	mov	r0, r3
 8014188:	3728      	adds	r7, #40	; 0x28
 801418a:	46bd      	mov	sp, r7
 801418c:	bdb0      	pop	{r4, r5, r7, pc}
 801418e:	bf00      	nop

08014190 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d106      	bne.n	80141ac <tcp_output_segment_busy+0x1c>
 801419e:	4b09      	ldr	r3, [pc, #36]	; (80141c4 <tcp_output_segment_busy+0x34>)
 80141a0:	f240 529a 	movw	r2, #1434	; 0x59a
 80141a4:	4908      	ldr	r1, [pc, #32]	; (80141c8 <tcp_output_segment_busy+0x38>)
 80141a6:	4809      	ldr	r0, [pc, #36]	; (80141cc <tcp_output_segment_busy+0x3c>)
 80141a8:	f004 f800 	bl	80181ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	7b9b      	ldrb	r3, [r3, #14]
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d001      	beq.n	80141ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80141b6:	2301      	movs	r3, #1
 80141b8:	e000      	b.n	80141bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80141ba:	2300      	movs	r3, #0
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	0801b264 	.word	0x0801b264
 80141c8:	0801b800 	.word	0x0801b800
 80141cc:	0801b2b8 	.word	0x0801b2b8

080141d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80141d0:	b5b0      	push	{r4, r5, r7, lr}
 80141d2:	b08c      	sub	sp, #48	; 0x30
 80141d4:	af04      	add	r7, sp, #16
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	60b9      	str	r1, [r7, #8]
 80141da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d106      	bne.n	80141f0 <tcp_output_segment+0x20>
 80141e2:	4b63      	ldr	r3, [pc, #396]	; (8014370 <tcp_output_segment+0x1a0>)
 80141e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80141e8:	4962      	ldr	r1, [pc, #392]	; (8014374 <tcp_output_segment+0x1a4>)
 80141ea:	4863      	ldr	r0, [pc, #396]	; (8014378 <tcp_output_segment+0x1a8>)
 80141ec:	f003 ffde 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d106      	bne.n	8014204 <tcp_output_segment+0x34>
 80141f6:	4b5e      	ldr	r3, [pc, #376]	; (8014370 <tcp_output_segment+0x1a0>)
 80141f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80141fc:	495f      	ldr	r1, [pc, #380]	; (801437c <tcp_output_segment+0x1ac>)
 80141fe:	485e      	ldr	r0, [pc, #376]	; (8014378 <tcp_output_segment+0x1a8>)
 8014200:	f003 ffd4 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d106      	bne.n	8014218 <tcp_output_segment+0x48>
 801420a:	4b59      	ldr	r3, [pc, #356]	; (8014370 <tcp_output_segment+0x1a0>)
 801420c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014210:	495b      	ldr	r1, [pc, #364]	; (8014380 <tcp_output_segment+0x1b0>)
 8014212:	4859      	ldr	r0, [pc, #356]	; (8014378 <tcp_output_segment+0x1a8>)
 8014214:	f003 ffca 	bl	80181ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014218:	68f8      	ldr	r0, [r7, #12]
 801421a:	f7ff ffb9 	bl	8014190 <tcp_output_segment_busy>
 801421e:	4603      	mov	r3, r0
 8014220:	2b00      	cmp	r3, #0
 8014222:	d001      	beq.n	8014228 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014224:	2300      	movs	r3, #0
 8014226:	e09f      	b.n	8014368 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	68dc      	ldr	r4, [r3, #12]
 8014230:	4610      	mov	r0, r2
 8014232:	f7f8 fe7c 	bl	800cf2e <lwip_htonl>
 8014236:	4603      	mov	r3, r0
 8014238:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	68dc      	ldr	r4, [r3, #12]
 8014242:	4610      	mov	r0, r2
 8014244:	f7f8 fe5e 	bl	800cf04 <lwip_htons>
 8014248:	4603      	mov	r3, r0
 801424a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014250:	68ba      	ldr	r2, [r7, #8]
 8014252:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014254:	441a      	add	r2, r3
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	68db      	ldr	r3, [r3, #12]
 801425e:	3314      	adds	r3, #20
 8014260:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	7a9b      	ldrb	r3, [r3, #10]
 8014266:	f003 0301 	and.w	r3, r3, #1
 801426a:	2b00      	cmp	r3, #0
 801426c:	d015      	beq.n	801429a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	3304      	adds	r3, #4
 8014272:	461a      	mov	r2, r3
 8014274:	6879      	ldr	r1, [r7, #4]
 8014276:	f44f 7006 	mov.w	r0, #536	; 0x218
 801427a:	f7fc fa37 	bl	80106ec <tcp_eff_send_mss_netif>
 801427e:	4603      	mov	r3, r0
 8014280:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014282:	8b7b      	ldrh	r3, [r7, #26]
 8014284:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014288:	4618      	mov	r0, r3
 801428a:	f7f8 fe50 	bl	800cf2e <lwip_htonl>
 801428e:	4602      	mov	r2, r0
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014294:	69fb      	ldr	r3, [r7, #28]
 8014296:	3304      	adds	r3, #4
 8014298:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	da02      	bge.n	80142aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	2200      	movs	r2, #0
 80142a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d10c      	bne.n	80142cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80142b2:	4b34      	ldr	r3, [pc, #208]	; (8014384 <tcp_output_segment+0x1b4>)
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7f8 fe34 	bl	800cf2e <lwip_htonl>
 80142c6:	4602      	mov	r2, r0
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	68da      	ldr	r2, [r3, #12]
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	1ad3      	subs	r3, r2, r3
 80142d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	8959      	ldrh	r1, [r3, #10]
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	8b3a      	ldrh	r2, [r7, #24]
 80142e6:	1a8a      	subs	r2, r1, r2
 80142e8:	b292      	uxth	r2, r2
 80142ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	685b      	ldr	r3, [r3, #4]
 80142f0:	8919      	ldrh	r1, [r3, #8]
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	8b3a      	ldrh	r2, [r7, #24]
 80142f8:	1a8a      	subs	r2, r1, r2
 80142fa:	b292      	uxth	r2, r2
 80142fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	68d2      	ldr	r2, [r2, #12]
 8014306:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	2200      	movs	r2, #0
 801430e:	741a      	strb	r2, [r3, #16]
 8014310:	2200      	movs	r2, #0
 8014312:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	f103 0214 	add.w	r2, r3, #20
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	7a9b      	ldrb	r3, [r3, #10]
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	f003 0304 	and.w	r3, r3, #4
 8014326:	4413      	add	r3, r2
 8014328:	69fa      	ldr	r2, [r7, #28]
 801432a:	429a      	cmp	r2, r3
 801432c:	d006      	beq.n	801433c <tcp_output_segment+0x16c>
 801432e:	4b10      	ldr	r3, [pc, #64]	; (8014370 <tcp_output_segment+0x1a0>)
 8014330:	f240 621c 	movw	r2, #1564	; 0x61c
 8014334:	4914      	ldr	r1, [pc, #80]	; (8014388 <tcp_output_segment+0x1b8>)
 8014336:	4810      	ldr	r0, [pc, #64]	; (8014378 <tcp_output_segment+0x1a8>)
 8014338:	f003 ff38 	bl	80181ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	6858      	ldr	r0, [r3, #4]
 8014340:	68b9      	ldr	r1, [r7, #8]
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	1d1c      	adds	r4, r3, #4
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	7add      	ldrb	r5, [r3, #11]
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	7a9b      	ldrb	r3, [r3, #10]
 801434e:	687a      	ldr	r2, [r7, #4]
 8014350:	9202      	str	r2, [sp, #8]
 8014352:	2206      	movs	r2, #6
 8014354:	9201      	str	r2, [sp, #4]
 8014356:	9300      	str	r3, [sp, #0]
 8014358:	462b      	mov	r3, r5
 801435a:	4622      	mov	r2, r4
 801435c:	f002 fbac 	bl	8016ab8 <ip4_output_if>
 8014360:	4603      	mov	r3, r0
 8014362:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014364:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014368:	4618      	mov	r0, r3
 801436a:	3720      	adds	r7, #32
 801436c:	46bd      	mov	sp, r7
 801436e:	bdb0      	pop	{r4, r5, r7, pc}
 8014370:	0801b264 	.word	0x0801b264
 8014374:	0801b828 	.word	0x0801b828
 8014378:	0801b2b8 	.word	0x0801b2b8
 801437c:	0801b848 	.word	0x0801b848
 8014380:	0801b868 	.word	0x0801b868
 8014384:	2000d8e0 	.word	0x2000d8e0
 8014388:	0801b88c 	.word	0x0801b88c

0801438c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801438c:	b5b0      	push	{r4, r5, r7, lr}
 801438e:	b084      	sub	sp, #16
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d106      	bne.n	80143a8 <tcp_rexmit_rto_prepare+0x1c>
 801439a:	4b31      	ldr	r3, [pc, #196]	; (8014460 <tcp_rexmit_rto_prepare+0xd4>)
 801439c:	f240 6263 	movw	r2, #1635	; 0x663
 80143a0:	4930      	ldr	r1, [pc, #192]	; (8014464 <tcp_rexmit_rto_prepare+0xd8>)
 80143a2:	4831      	ldr	r0, [pc, #196]	; (8014468 <tcp_rexmit_rto_prepare+0xdc>)
 80143a4:	f003 ff02 	bl	80181ac <iprintf>

  if (pcb->unacked == NULL) {
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d102      	bne.n	80143b6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80143b0:	f06f 0305 	mvn.w	r3, #5
 80143b4:	e050      	b.n	8014458 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143ba:	60fb      	str	r3, [r7, #12]
 80143bc:	e00b      	b.n	80143d6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80143be:	68f8      	ldr	r0, [r7, #12]
 80143c0:	f7ff fee6 	bl	8014190 <tcp_output_segment_busy>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d002      	beq.n	80143d0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80143ca:	f06f 0305 	mvn.w	r3, #5
 80143ce:	e043      	b.n	8014458 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	60fb      	str	r3, [r7, #12]
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d1ef      	bne.n	80143be <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f7ff fed6 	bl	8014190 <tcp_output_segment_busy>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d002      	beq.n	80143f0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80143ea:	f06f 0305 	mvn.w	r3, #5
 80143ee:	e033      	b.n	8014458 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2200      	movs	r2, #0
 8014404:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	8b5b      	ldrh	r3, [r3, #26]
 801440a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801440e:	b29a      	uxth	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	68db      	ldr	r3, [r3, #12]
 8014418:	685b      	ldr	r3, [r3, #4]
 801441a:	4618      	mov	r0, r3
 801441c:	f7f8 fd87 	bl	800cf2e <lwip_htonl>
 8014420:	4604      	mov	r4, r0
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	891b      	ldrh	r3, [r3, #8]
 8014426:	461d      	mov	r5, r3
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	899b      	ldrh	r3, [r3, #12]
 801442e:	b29b      	uxth	r3, r3
 8014430:	4618      	mov	r0, r3
 8014432:	f7f8 fd67 	bl	800cf04 <lwip_htons>
 8014436:	4603      	mov	r3, r0
 8014438:	b2db      	uxtb	r3, r3
 801443a:	f003 0303 	and.w	r3, r3, #3
 801443e:	2b00      	cmp	r3, #0
 8014440:	d001      	beq.n	8014446 <tcp_rexmit_rto_prepare+0xba>
 8014442:	2301      	movs	r3, #1
 8014444:	e000      	b.n	8014448 <tcp_rexmit_rto_prepare+0xbc>
 8014446:	2300      	movs	r3, #0
 8014448:	442b      	add	r3, r5
 801444a:	18e2      	adds	r2, r4, r3
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014456:	2300      	movs	r3, #0
}
 8014458:	4618      	mov	r0, r3
 801445a:	3710      	adds	r7, #16
 801445c:	46bd      	mov	sp, r7
 801445e:	bdb0      	pop	{r4, r5, r7, pc}
 8014460:	0801b264 	.word	0x0801b264
 8014464:	0801b8a0 	.word	0x0801b8a0
 8014468:	0801b2b8 	.word	0x0801b2b8

0801446c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d106      	bne.n	8014488 <tcp_rexmit_rto_commit+0x1c>
 801447a:	4b0d      	ldr	r3, [pc, #52]	; (80144b0 <tcp_rexmit_rto_commit+0x44>)
 801447c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014480:	490c      	ldr	r1, [pc, #48]	; (80144b4 <tcp_rexmit_rto_commit+0x48>)
 8014482:	480d      	ldr	r0, [pc, #52]	; (80144b8 <tcp_rexmit_rto_commit+0x4c>)
 8014484:	f003 fe92 	bl	80181ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801448e:	2bff      	cmp	r3, #255	; 0xff
 8014490:	d007      	beq.n	80144a2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014498:	3301      	adds	r3, #1
 801449a:	b2da      	uxtb	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7ff fc80 	bl	8013da8 <tcp_output>
}
 80144a8:	bf00      	nop
 80144aa:	3708      	adds	r7, #8
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	0801b264 	.word	0x0801b264
 80144b4:	0801b8c4 	.word	0x0801b8c4
 80144b8:	0801b2b8 	.word	0x0801b2b8

080144bc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b082      	sub	sp, #8
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d106      	bne.n	80144d8 <tcp_rexmit_rto+0x1c>
 80144ca:	4b0a      	ldr	r3, [pc, #40]	; (80144f4 <tcp_rexmit_rto+0x38>)
 80144cc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80144d0:	4909      	ldr	r1, [pc, #36]	; (80144f8 <tcp_rexmit_rto+0x3c>)
 80144d2:	480a      	ldr	r0, [pc, #40]	; (80144fc <tcp_rexmit_rto+0x40>)
 80144d4:	f003 fe6a 	bl	80181ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f7ff ff57 	bl	801438c <tcp_rexmit_rto_prepare>
 80144de:	4603      	mov	r3, r0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d102      	bne.n	80144ea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f7ff ffc1 	bl	801446c <tcp_rexmit_rto_commit>
  }
}
 80144ea:	bf00      	nop
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	0801b264 	.word	0x0801b264
 80144f8:	0801b8e8 	.word	0x0801b8e8
 80144fc:	0801b2b8 	.word	0x0801b2b8

08014500 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014500:	b590      	push	{r4, r7, lr}
 8014502:	b085      	sub	sp, #20
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d106      	bne.n	801451c <tcp_rexmit+0x1c>
 801450e:	4b2f      	ldr	r3, [pc, #188]	; (80145cc <tcp_rexmit+0xcc>)
 8014510:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014514:	492e      	ldr	r1, [pc, #184]	; (80145d0 <tcp_rexmit+0xd0>)
 8014516:	482f      	ldr	r0, [pc, #188]	; (80145d4 <tcp_rexmit+0xd4>)
 8014518:	f003 fe48 	bl	80181ac <iprintf>

  if (pcb->unacked == NULL) {
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014520:	2b00      	cmp	r3, #0
 8014522:	d102      	bne.n	801452a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014524:	f06f 0305 	mvn.w	r3, #5
 8014528:	e04c      	b.n	80145c4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801452e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014530:	68b8      	ldr	r0, [r7, #8]
 8014532:	f7ff fe2d 	bl	8014190 <tcp_output_segment_busy>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d002      	beq.n	8014542 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801453c:	f06f 0305 	mvn.w	r3, #5
 8014540:	e040      	b.n	80145c4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	336c      	adds	r3, #108	; 0x6c
 801454e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014550:	e002      	b.n	8014558 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d011      	beq.n	8014584 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	68db      	ldr	r3, [r3, #12]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	4618      	mov	r0, r3
 801456a:	f7f8 fce0 	bl	800cf2e <lwip_htonl>
 801456e:	4604      	mov	r4, r0
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	4618      	mov	r0, r3
 8014578:	f7f8 fcd9 	bl	800cf2e <lwip_htonl>
 801457c:	4603      	mov	r3, r0
 801457e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014580:	2b00      	cmp	r3, #0
 8014582:	dbe6      	blt.n	8014552 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	68ba      	ldr	r2, [r7, #8]
 8014590:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d103      	bne.n	80145a2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2200      	movs	r2, #0
 801459e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145a8:	2bff      	cmp	r3, #255	; 0xff
 80145aa:	d007      	beq.n	80145bc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145b2:	3301      	adds	r3, #1
 80145b4:	b2da      	uxtb	r2, r3
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2200      	movs	r2, #0
 80145c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80145c2:	2300      	movs	r3, #0
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3714      	adds	r7, #20
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd90      	pop	{r4, r7, pc}
 80145cc:	0801b264 	.word	0x0801b264
 80145d0:	0801b904 	.word	0x0801b904
 80145d4:	0801b2b8 	.word	0x0801b2b8

080145d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d106      	bne.n	80145f4 <tcp_rexmit_fast+0x1c>
 80145e6:	4b2a      	ldr	r3, [pc, #168]	; (8014690 <tcp_rexmit_fast+0xb8>)
 80145e8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80145ec:	4929      	ldr	r1, [pc, #164]	; (8014694 <tcp_rexmit_fast+0xbc>)
 80145ee:	482a      	ldr	r0, [pc, #168]	; (8014698 <tcp_rexmit_fast+0xc0>)
 80145f0:	f003 fddc 	bl	80181ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d045      	beq.n	8014688 <tcp_rexmit_fast+0xb0>
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	8b5b      	ldrh	r3, [r3, #26]
 8014600:	f003 0304 	and.w	r3, r3, #4
 8014604:	2b00      	cmp	r3, #0
 8014606:	d13f      	bne.n	8014688 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f7ff ff79 	bl	8014500 <tcp_rexmit>
 801460e:	4603      	mov	r3, r0
 8014610:	2b00      	cmp	r3, #0
 8014612:	d139      	bne.n	8014688 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014620:	4293      	cmp	r3, r2
 8014622:	bf28      	it	cs
 8014624:	4613      	movcs	r3, r2
 8014626:	b29b      	uxth	r3, r3
 8014628:	2b00      	cmp	r3, #0
 801462a:	da00      	bge.n	801462e <tcp_rexmit_fast+0x56>
 801462c:	3301      	adds	r3, #1
 801462e:	105b      	asrs	r3, r3, #1
 8014630:	b29a      	uxth	r2, r3
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801463e:	461a      	mov	r2, r3
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014644:	005b      	lsls	r3, r3, #1
 8014646:	429a      	cmp	r2, r3
 8014648:	d206      	bcs.n	8014658 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801464e:	005b      	lsls	r3, r3, #1
 8014650:	b29a      	uxth	r2, r3
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014662:	4619      	mov	r1, r3
 8014664:	0049      	lsls	r1, r1, #1
 8014666:	440b      	add	r3, r1
 8014668:	b29b      	uxth	r3, r3
 801466a:	4413      	add	r3, r2
 801466c:	b29a      	uxth	r2, r3
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	8b5b      	ldrh	r3, [r3, #26]
 8014678:	f043 0304 	orr.w	r3, r3, #4
 801467c:	b29a      	uxth	r2, r3
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2200      	movs	r2, #0
 8014686:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014688:	bf00      	nop
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	0801b264 	.word	0x0801b264
 8014694:	0801b91c 	.word	0x0801b91c
 8014698:	0801b2b8 	.word	0x0801b2b8

0801469c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b086      	sub	sp, #24
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	607b      	str	r3, [r7, #4]
 80146a6:	460b      	mov	r3, r1
 80146a8:	817b      	strh	r3, [r7, #10]
 80146aa:	4613      	mov	r3, r2
 80146ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80146ae:	897a      	ldrh	r2, [r7, #10]
 80146b0:	893b      	ldrh	r3, [r7, #8]
 80146b2:	4413      	add	r3, r2
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	3314      	adds	r3, #20
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146be:	4619      	mov	r1, r3
 80146c0:	2022      	movs	r0, #34	; 0x22
 80146c2:	f7f9 fce7 	bl	800e094 <pbuf_alloc>
 80146c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d04d      	beq.n	801476a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80146ce:	897b      	ldrh	r3, [r7, #10]
 80146d0:	3313      	adds	r3, #19
 80146d2:	697a      	ldr	r2, [r7, #20]
 80146d4:	8952      	ldrh	r2, [r2, #10]
 80146d6:	4293      	cmp	r3, r2
 80146d8:	db06      	blt.n	80146e8 <tcp_output_alloc_header_common+0x4c>
 80146da:	4b26      	ldr	r3, [pc, #152]	; (8014774 <tcp_output_alloc_header_common+0xd8>)
 80146dc:	f240 7223 	movw	r2, #1827	; 0x723
 80146e0:	4925      	ldr	r1, [pc, #148]	; (8014778 <tcp_output_alloc_header_common+0xdc>)
 80146e2:	4826      	ldr	r0, [pc, #152]	; (801477c <tcp_output_alloc_header_common+0xe0>)
 80146e4:	f003 fd62 	bl	80181ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	685b      	ldr	r3, [r3, #4]
 80146ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80146ee:	8c3b      	ldrh	r3, [r7, #32]
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7f8 fc07 	bl	800cf04 <lwip_htons>
 80146f6:	4603      	mov	r3, r0
 80146f8:	461a      	mov	r2, r3
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80146fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014700:	4618      	mov	r0, r3
 8014702:	f7f8 fbff 	bl	800cf04 <lwip_htons>
 8014706:	4603      	mov	r3, r0
 8014708:	461a      	mov	r2, r3
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014714:	68f8      	ldr	r0, [r7, #12]
 8014716:	f7f8 fc0a 	bl	800cf2e <lwip_htonl>
 801471a:	4602      	mov	r2, r0
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014720:	897b      	ldrh	r3, [r7, #10]
 8014722:	089b      	lsrs	r3, r3, #2
 8014724:	b29b      	uxth	r3, r3
 8014726:	3305      	adds	r3, #5
 8014728:	b29b      	uxth	r3, r3
 801472a:	031b      	lsls	r3, r3, #12
 801472c:	b29a      	uxth	r2, r3
 801472e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014732:	b29b      	uxth	r3, r3
 8014734:	4313      	orrs	r3, r2
 8014736:	b29b      	uxth	r3, r3
 8014738:	4618      	mov	r0, r3
 801473a:	f7f8 fbe3 	bl	800cf04 <lwip_htons>
 801473e:	4603      	mov	r3, r0
 8014740:	461a      	mov	r2, r3
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014746:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014748:	4618      	mov	r0, r3
 801474a:	f7f8 fbdb 	bl	800cf04 <lwip_htons>
 801474e:	4603      	mov	r3, r0
 8014750:	461a      	mov	r2, r3
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	2200      	movs	r2, #0
 801475a:	741a      	strb	r2, [r3, #16]
 801475c:	2200      	movs	r2, #0
 801475e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	2200      	movs	r2, #0
 8014764:	749a      	strb	r2, [r3, #18]
 8014766:	2200      	movs	r2, #0
 8014768:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801476a:	697b      	ldr	r3, [r7, #20]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3718      	adds	r7, #24
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	0801b264 	.word	0x0801b264
 8014778:	0801b93c 	.word	0x0801b93c
 801477c:	0801b2b8 	.word	0x0801b2b8

08014780 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014780:	b5b0      	push	{r4, r5, r7, lr}
 8014782:	b08a      	sub	sp, #40	; 0x28
 8014784:	af04      	add	r7, sp, #16
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	607b      	str	r3, [r7, #4]
 801478a:	460b      	mov	r3, r1
 801478c:	817b      	strh	r3, [r7, #10]
 801478e:	4613      	mov	r3, r2
 8014790:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d106      	bne.n	80147a6 <tcp_output_alloc_header+0x26>
 8014798:	4b15      	ldr	r3, [pc, #84]	; (80147f0 <tcp_output_alloc_header+0x70>)
 801479a:	f240 7242 	movw	r2, #1858	; 0x742
 801479e:	4915      	ldr	r1, [pc, #84]	; (80147f4 <tcp_output_alloc_header+0x74>)
 80147a0:	4815      	ldr	r0, [pc, #84]	; (80147f8 <tcp_output_alloc_header+0x78>)
 80147a2:	f003 fd03 	bl	80181ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	8adb      	ldrh	r3, [r3, #22]
 80147ae:	68fa      	ldr	r2, [r7, #12]
 80147b0:	8b12      	ldrh	r2, [r2, #24]
 80147b2:	68f9      	ldr	r1, [r7, #12]
 80147b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80147b6:	893d      	ldrh	r5, [r7, #8]
 80147b8:	897c      	ldrh	r4, [r7, #10]
 80147ba:	9103      	str	r1, [sp, #12]
 80147bc:	2110      	movs	r1, #16
 80147be:	9102      	str	r1, [sp, #8]
 80147c0:	9201      	str	r2, [sp, #4]
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	462a      	mov	r2, r5
 80147c8:	4621      	mov	r1, r4
 80147ca:	f7ff ff67 	bl	801469c <tcp_output_alloc_header_common>
 80147ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d006      	beq.n	80147e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80147de:	441a      	add	r2, r3
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80147e4:	697b      	ldr	r3, [r7, #20]
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3718      	adds	r7, #24
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bdb0      	pop	{r4, r5, r7, pc}
 80147ee:	bf00      	nop
 80147f0:	0801b264 	.word	0x0801b264
 80147f4:	0801b96c 	.word	0x0801b96c
 80147f8:	0801b2b8 	.word	0x0801b2b8

080147fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b088      	sub	sp, #32
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	4611      	mov	r1, r2
 8014808:	461a      	mov	r2, r3
 801480a:	460b      	mov	r3, r1
 801480c:	71fb      	strb	r3, [r7, #7]
 801480e:	4613      	mov	r3, r2
 8014810:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014812:	2300      	movs	r3, #0
 8014814:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d106      	bne.n	801482a <tcp_output_fill_options+0x2e>
 801481c:	4b13      	ldr	r3, [pc, #76]	; (801486c <tcp_output_fill_options+0x70>)
 801481e:	f240 7256 	movw	r2, #1878	; 0x756
 8014822:	4913      	ldr	r1, [pc, #76]	; (8014870 <tcp_output_fill_options+0x74>)
 8014824:	4813      	ldr	r0, [pc, #76]	; (8014874 <tcp_output_fill_options+0x78>)
 8014826:	f003 fcc1 	bl	80181ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	3314      	adds	r3, #20
 8014834:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014836:	69bb      	ldr	r3, [r7, #24]
 8014838:	f103 0214 	add.w	r2, r3, #20
 801483c:	8bfb      	ldrh	r3, [r7, #30]
 801483e:	009b      	lsls	r3, r3, #2
 8014840:	4619      	mov	r1, r3
 8014842:	79fb      	ldrb	r3, [r7, #7]
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	f003 0304 	and.w	r3, r3, #4
 801484a:	440b      	add	r3, r1
 801484c:	4413      	add	r3, r2
 801484e:	697a      	ldr	r2, [r7, #20]
 8014850:	429a      	cmp	r2, r3
 8014852:	d006      	beq.n	8014862 <tcp_output_fill_options+0x66>
 8014854:	4b05      	ldr	r3, [pc, #20]	; (801486c <tcp_output_fill_options+0x70>)
 8014856:	f240 7275 	movw	r2, #1909	; 0x775
 801485a:	4907      	ldr	r1, [pc, #28]	; (8014878 <tcp_output_fill_options+0x7c>)
 801485c:	4805      	ldr	r0, [pc, #20]	; (8014874 <tcp_output_fill_options+0x78>)
 801485e:	f003 fca5 	bl	80181ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014862:	bf00      	nop
 8014864:	3720      	adds	r7, #32
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	0801b264 	.word	0x0801b264
 8014870:	0801b994 	.word	0x0801b994
 8014874:	0801b2b8 	.word	0x0801b2b8
 8014878:	0801b88c 	.word	0x0801b88c

0801487c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b08a      	sub	sp, #40	; 0x28
 8014880:	af04      	add	r7, sp, #16
 8014882:	60f8      	str	r0, [r7, #12]
 8014884:	60b9      	str	r1, [r7, #8]
 8014886:	607a      	str	r2, [r7, #4]
 8014888:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d106      	bne.n	801489e <tcp_output_control_segment+0x22>
 8014890:	4b1c      	ldr	r3, [pc, #112]	; (8014904 <tcp_output_control_segment+0x88>)
 8014892:	f240 7287 	movw	r2, #1927	; 0x787
 8014896:	491c      	ldr	r1, [pc, #112]	; (8014908 <tcp_output_control_segment+0x8c>)
 8014898:	481c      	ldr	r0, [pc, #112]	; (801490c <tcp_output_control_segment+0x90>)
 801489a:	f003 fc87 	bl	80181ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801489e:	683a      	ldr	r2, [r7, #0]
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f7fe fae8 	bl	8012e78 <tcp_route>
 80148a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d102      	bne.n	80148b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80148b0:	23fc      	movs	r3, #252	; 0xfc
 80148b2:	75fb      	strb	r3, [r7, #23]
 80148b4:	e01c      	b.n	80148f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d006      	beq.n	80148ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	7adb      	ldrb	r3, [r3, #11]
 80148c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	7a9b      	ldrb	r3, [r3, #10]
 80148c6:	757b      	strb	r3, [r7, #21]
 80148c8:	e003      	b.n	80148d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80148ca:	23ff      	movs	r3, #255	; 0xff
 80148cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80148ce:	2300      	movs	r3, #0
 80148d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80148d2:	7dba      	ldrb	r2, [r7, #22]
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	9302      	str	r3, [sp, #8]
 80148d8:	2306      	movs	r3, #6
 80148da:	9301      	str	r3, [sp, #4]
 80148dc:	7d7b      	ldrb	r3, [r7, #21]
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	4613      	mov	r3, r2
 80148e2:	683a      	ldr	r2, [r7, #0]
 80148e4:	6879      	ldr	r1, [r7, #4]
 80148e6:	68b8      	ldr	r0, [r7, #8]
 80148e8:	f002 f8e6 	bl	8016ab8 <ip4_output_if>
 80148ec:	4603      	mov	r3, r0
 80148ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80148f0:	68b8      	ldr	r0, [r7, #8]
 80148f2:	f7f9 feb3 	bl	800e65c <pbuf_free>
  return err;
 80148f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3718      	adds	r7, #24
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	0801b264 	.word	0x0801b264
 8014908:	0801b9bc 	.word	0x0801b9bc
 801490c:	0801b2b8 	.word	0x0801b2b8

08014910 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014910:	b590      	push	{r4, r7, lr}
 8014912:	b08b      	sub	sp, #44	; 0x2c
 8014914:	af04      	add	r7, sp, #16
 8014916:	60f8      	str	r0, [r7, #12]
 8014918:	60b9      	str	r1, [r7, #8]
 801491a:	607a      	str	r2, [r7, #4]
 801491c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d106      	bne.n	8014932 <tcp_rst+0x22>
 8014924:	4b1f      	ldr	r3, [pc, #124]	; (80149a4 <tcp_rst+0x94>)
 8014926:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801492a:	491f      	ldr	r1, [pc, #124]	; (80149a8 <tcp_rst+0x98>)
 801492c:	481f      	ldr	r0, [pc, #124]	; (80149ac <tcp_rst+0x9c>)
 801492e:	f003 fc3d 	bl	80181ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014934:	2b00      	cmp	r3, #0
 8014936:	d106      	bne.n	8014946 <tcp_rst+0x36>
 8014938:	4b1a      	ldr	r3, [pc, #104]	; (80149a4 <tcp_rst+0x94>)
 801493a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801493e:	491c      	ldr	r1, [pc, #112]	; (80149b0 <tcp_rst+0xa0>)
 8014940:	481a      	ldr	r0, [pc, #104]	; (80149ac <tcp_rst+0x9c>)
 8014942:	f003 fc33 	bl	80181ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014946:	2300      	movs	r3, #0
 8014948:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801494a:	f246 0308 	movw	r3, #24584	; 0x6008
 801494e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014950:	7dfb      	ldrb	r3, [r7, #23]
 8014952:	b29c      	uxth	r4, r3
 8014954:	68b8      	ldr	r0, [r7, #8]
 8014956:	f7f8 faea 	bl	800cf2e <lwip_htonl>
 801495a:	4602      	mov	r2, r0
 801495c:	8abb      	ldrh	r3, [r7, #20]
 801495e:	9303      	str	r3, [sp, #12]
 8014960:	2314      	movs	r3, #20
 8014962:	9302      	str	r3, [sp, #8]
 8014964:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014966:	9301      	str	r3, [sp, #4]
 8014968:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801496a:	9300      	str	r3, [sp, #0]
 801496c:	4613      	mov	r3, r2
 801496e:	2200      	movs	r2, #0
 8014970:	4621      	mov	r1, r4
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f7ff fe92 	bl	801469c <tcp_output_alloc_header_common>
 8014978:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00c      	beq.n	801499a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014980:	7dfb      	ldrb	r3, [r7, #23]
 8014982:	2200      	movs	r2, #0
 8014984:	6939      	ldr	r1, [r7, #16]
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	f7ff ff38 	bl	80147fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801498e:	683a      	ldr	r2, [r7, #0]
 8014990:	6939      	ldr	r1, [r7, #16]
 8014992:	68f8      	ldr	r0, [r7, #12]
 8014994:	f7ff ff72 	bl	801487c <tcp_output_control_segment>
 8014998:	e000      	b.n	801499c <tcp_rst+0x8c>
    return;
 801499a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801499c:	371c      	adds	r7, #28
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd90      	pop	{r4, r7, pc}
 80149a2:	bf00      	nop
 80149a4:	0801b264 	.word	0x0801b264
 80149a8:	0801b9e8 	.word	0x0801b9e8
 80149ac:	0801b2b8 	.word	0x0801b2b8
 80149b0:	0801ba04 	.word	0x0801ba04

080149b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80149b4:	b590      	push	{r4, r7, lr}
 80149b6:	b087      	sub	sp, #28
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80149bc:	2300      	movs	r3, #0
 80149be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80149c0:	2300      	movs	r3, #0
 80149c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d106      	bne.n	80149d8 <tcp_send_empty_ack+0x24>
 80149ca:	4b28      	ldr	r3, [pc, #160]	; (8014a6c <tcp_send_empty_ack+0xb8>)
 80149cc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80149d0:	4927      	ldr	r1, [pc, #156]	; (8014a70 <tcp_send_empty_ack+0xbc>)
 80149d2:	4828      	ldr	r0, [pc, #160]	; (8014a74 <tcp_send_empty_ack+0xc0>)
 80149d4:	f003 fbea 	bl	80181ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80149d8:	7dfb      	ldrb	r3, [r7, #23]
 80149da:	009b      	lsls	r3, r3, #2
 80149dc:	b2db      	uxtb	r3, r3
 80149de:	f003 0304 	and.w	r3, r3, #4
 80149e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80149e4:	7d7b      	ldrb	r3, [r7, #21]
 80149e6:	b29c      	uxth	r4, r3
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7f8 fa9e 	bl	800cf2e <lwip_htonl>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2200      	movs	r2, #0
 80149f6:	4621      	mov	r1, r4
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f7ff fec1 	bl	8014780 <tcp_output_alloc_header>
 80149fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d109      	bne.n	8014a1a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	8b5b      	ldrh	r3, [r3, #26]
 8014a0a:	f043 0303 	orr.w	r3, r3, #3
 8014a0e:	b29a      	uxth	r2, r3
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014a14:	f06f 0301 	mvn.w	r3, #1
 8014a18:	e023      	b.n	8014a62 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014a1a:	7dbb      	ldrb	r3, [r7, #22]
 8014a1c:	7dfa      	ldrb	r2, [r7, #23]
 8014a1e:	6939      	ldr	r1, [r7, #16]
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f7ff feeb 	bl	80147fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	6939      	ldr	r1, [r7, #16]
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f7ff ff24 	bl	801487c <tcp_output_control_segment>
 8014a34:	4603      	mov	r3, r0
 8014a36:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d007      	beq.n	8014a50 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	8b5b      	ldrh	r3, [r3, #26]
 8014a44:	f043 0303 	orr.w	r3, r3, #3
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	835a      	strh	r2, [r3, #26]
 8014a4e:	e006      	b.n	8014a5e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	8b5b      	ldrh	r3, [r3, #26]
 8014a54:	f023 0303 	bic.w	r3, r3, #3
 8014a58:	b29a      	uxth	r2, r3
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	371c      	adds	r7, #28
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd90      	pop	{r4, r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	0801b264 	.word	0x0801b264
 8014a70:	0801ba20 	.word	0x0801ba20
 8014a74:	0801b2b8 	.word	0x0801b2b8

08014a78 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014a78:	b590      	push	{r4, r7, lr}
 8014a7a:	b087      	sub	sp, #28
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a80:	2300      	movs	r3, #0
 8014a82:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d106      	bne.n	8014a98 <tcp_keepalive+0x20>
 8014a8a:	4b18      	ldr	r3, [pc, #96]	; (8014aec <tcp_keepalive+0x74>)
 8014a8c:	f640 0224 	movw	r2, #2084	; 0x824
 8014a90:	4917      	ldr	r1, [pc, #92]	; (8014af0 <tcp_keepalive+0x78>)
 8014a92:	4818      	ldr	r0, [pc, #96]	; (8014af4 <tcp_keepalive+0x7c>)
 8014a94:	f003 fb8a 	bl	80181ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014a98:	7dfb      	ldrb	r3, [r7, #23]
 8014a9a:	b29c      	uxth	r4, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014aa0:	3b01      	subs	r3, #1
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7f8 fa43 	bl	800cf2e <lwip_htonl>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	2200      	movs	r2, #0
 8014aac:	4621      	mov	r1, r4
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f7ff fe66 	bl	8014780 <tcp_output_alloc_header>
 8014ab4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d102      	bne.n	8014ac2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014abc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ac0:	e010      	b.n	8014ae4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014ac2:	7dfb      	ldrb	r3, [r7, #23]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	6939      	ldr	r1, [r7, #16]
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f7ff fe97 	bl	80147fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ace:	687a      	ldr	r2, [r7, #4]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	3304      	adds	r3, #4
 8014ad4:	6939      	ldr	r1, [r7, #16]
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f7ff fed0 	bl	801487c <tcp_output_control_segment>
 8014adc:	4603      	mov	r3, r0
 8014ade:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	371c      	adds	r7, #28
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd90      	pop	{r4, r7, pc}
 8014aec:	0801b264 	.word	0x0801b264
 8014af0:	0801ba40 	.word	0x0801ba40
 8014af4:	0801b2b8 	.word	0x0801b2b8

08014af8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014af8:	b590      	push	{r4, r7, lr}
 8014afa:	b08b      	sub	sp, #44	; 0x2c
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b00:	2300      	movs	r3, #0
 8014b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d106      	bne.n	8014b1a <tcp_zero_window_probe+0x22>
 8014b0c:	4b4c      	ldr	r3, [pc, #304]	; (8014c40 <tcp_zero_window_probe+0x148>)
 8014b0e:	f640 024f 	movw	r2, #2127	; 0x84f
 8014b12:	494c      	ldr	r1, [pc, #304]	; (8014c44 <tcp_zero_window_probe+0x14c>)
 8014b14:	484c      	ldr	r0, [pc, #304]	; (8014c48 <tcp_zero_window_probe+0x150>)
 8014b16:	f003 fb49 	bl	80181ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b1e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014b20:	6a3b      	ldr	r3, [r7, #32]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d101      	bne.n	8014b2a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014b26:	2300      	movs	r3, #0
 8014b28:	e086      	b.n	8014c38 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b30:	2bff      	cmp	r3, #255	; 0xff
 8014b32:	d007      	beq.n	8014b44 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	b2da      	uxtb	r2, r3
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014b44:	6a3b      	ldr	r3, [r7, #32]
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	899b      	ldrh	r3, [r3, #12]
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7f8 f9d9 	bl	800cf04 <lwip_htons>
 8014b52:	4603      	mov	r3, r0
 8014b54:	b2db      	uxtb	r3, r3
 8014b56:	f003 0301 	and.w	r3, r3, #1
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d005      	beq.n	8014b6a <tcp_zero_window_probe+0x72>
 8014b5e:	6a3b      	ldr	r3, [r7, #32]
 8014b60:	891b      	ldrh	r3, [r3, #8]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d101      	bne.n	8014b6a <tcp_zero_window_probe+0x72>
 8014b66:	2301      	movs	r3, #1
 8014b68:	e000      	b.n	8014b6c <tcp_zero_window_probe+0x74>
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014b6e:	7ffb      	ldrb	r3, [r7, #31]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	bf0c      	ite	eq
 8014b74:	2301      	moveq	r3, #1
 8014b76:	2300      	movne	r3, #0
 8014b78:	b2db      	uxtb	r3, r3
 8014b7a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b80:	b299      	uxth	r1, r3
 8014b82:	6a3b      	ldr	r3, [r7, #32]
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	685b      	ldr	r3, [r3, #4]
 8014b88:	8bba      	ldrh	r2, [r7, #28]
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f7ff fdf8 	bl	8014780 <tcp_output_alloc_header>
 8014b90:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014b92:	69bb      	ldr	r3, [r7, #24]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014b98:	f04f 33ff 	mov.w	r3, #4294967295
 8014b9c:	e04c      	b.n	8014c38 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014b9e:	69bb      	ldr	r3, [r7, #24]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014ba4:	7ffb      	ldrb	r3, [r7, #31]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d011      	beq.n	8014bce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	899b      	ldrh	r3, [r3, #12]
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	b21b      	sxth	r3, r3
 8014bb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014bb6:	b21c      	sxth	r4, r3
 8014bb8:	2011      	movs	r0, #17
 8014bba:	f7f8 f9a3 	bl	800cf04 <lwip_htons>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	b21b      	sxth	r3, r3
 8014bc2:	4323      	orrs	r3, r4
 8014bc4:	b21b      	sxth	r3, r3
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	819a      	strh	r2, [r3, #12]
 8014bcc:	e010      	b.n	8014bf0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014bce:	69bb      	ldr	r3, [r7, #24]
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	3314      	adds	r3, #20
 8014bd4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014bd6:	6a3b      	ldr	r3, [r7, #32]
 8014bd8:	6858      	ldr	r0, [r3, #4]
 8014bda:	6a3b      	ldr	r3, [r7, #32]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	891a      	ldrh	r2, [r3, #8]
 8014be0:	6a3b      	ldr	r3, [r7, #32]
 8014be2:	891b      	ldrh	r3, [r3, #8]
 8014be4:	1ad3      	subs	r3, r2, r3
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	2201      	movs	r2, #1
 8014bea:	6939      	ldr	r1, [r7, #16]
 8014bec:	f7f9 ff2c 	bl	800ea48 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014bf0:	6a3b      	ldr	r3, [r7, #32]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7f8 f999 	bl	800cf2e <lwip_htonl>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	3301      	adds	r3, #1
 8014c00:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	1ad3      	subs	r3, r2, r3
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	da02      	bge.n	8014c14 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	68fa      	ldr	r2, [r7, #12]
 8014c12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c18:	2200      	movs	r2, #0
 8014c1a:	69b9      	ldr	r1, [r7, #24]
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f7ff fded 	bl	80147fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	3304      	adds	r3, #4
 8014c28:	69b9      	ldr	r1, [r7, #24]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7ff fe26 	bl	801487c <tcp_output_control_segment>
 8014c30:	4603      	mov	r3, r0
 8014c32:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014c34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	372c      	adds	r7, #44	; 0x2c
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd90      	pop	{r4, r7, pc}
 8014c40:	0801b264 	.word	0x0801b264
 8014c44:	0801ba5c 	.word	0x0801ba5c
 8014c48:	0801b2b8 	.word	0x0801b2b8

08014c4c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b082      	sub	sp, #8
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014c54:	f7f9 ffe6 	bl	800ec24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014c58:	4b0a      	ldr	r3, [pc, #40]	; (8014c84 <tcpip_tcp_timer+0x38>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d103      	bne.n	8014c68 <tcpip_tcp_timer+0x1c>
 8014c60:	4b09      	ldr	r3, [pc, #36]	; (8014c88 <tcpip_tcp_timer+0x3c>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d005      	beq.n	8014c74 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014c68:	2200      	movs	r2, #0
 8014c6a:	4908      	ldr	r1, [pc, #32]	; (8014c8c <tcpip_tcp_timer+0x40>)
 8014c6c:	20fa      	movs	r0, #250	; 0xfa
 8014c6e:	f000 f8f3 	bl	8014e58 <sys_timeout>
 8014c72:	e003      	b.n	8014c7c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014c74:	4b06      	ldr	r3, [pc, #24]	; (8014c90 <tcpip_tcp_timer+0x44>)
 8014c76:	2200      	movs	r2, #0
 8014c78:	601a      	str	r2, [r3, #0]
  }
}
 8014c7a:	bf00      	nop
 8014c7c:	bf00      	nop
 8014c7e:	3708      	adds	r7, #8
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	2000d8dc 	.word	0x2000d8dc
 8014c88:	2000d8ec 	.word	0x2000d8ec
 8014c8c:	08014c4d 	.word	0x08014c4d
 8014c90:	20004bb4 	.word	0x20004bb4

08014c94 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014c98:	4b0a      	ldr	r3, [pc, #40]	; (8014cc4 <tcp_timer_needed+0x30>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d10f      	bne.n	8014cc0 <tcp_timer_needed+0x2c>
 8014ca0:	4b09      	ldr	r3, [pc, #36]	; (8014cc8 <tcp_timer_needed+0x34>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d103      	bne.n	8014cb0 <tcp_timer_needed+0x1c>
 8014ca8:	4b08      	ldr	r3, [pc, #32]	; (8014ccc <tcp_timer_needed+0x38>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d007      	beq.n	8014cc0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014cb0:	4b04      	ldr	r3, [pc, #16]	; (8014cc4 <tcp_timer_needed+0x30>)
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	4905      	ldr	r1, [pc, #20]	; (8014cd0 <tcp_timer_needed+0x3c>)
 8014cba:	20fa      	movs	r0, #250	; 0xfa
 8014cbc:	f000 f8cc 	bl	8014e58 <sys_timeout>
  }
}
 8014cc0:	bf00      	nop
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	20004bb4 	.word	0x20004bb4
 8014cc8:	2000d8dc 	.word	0x2000d8dc
 8014ccc:	2000d8ec 	.word	0x2000d8ec
 8014cd0:	08014c4d 	.word	0x08014c4d

08014cd4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b086      	sub	sp, #24
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014ce0:	200a      	movs	r0, #10
 8014ce2:	f7f8 fdc5 	bl	800d870 <memp_malloc>
 8014ce6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d109      	bne.n	8014d02 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d151      	bne.n	8014d98 <sys_timeout_abs+0xc4>
 8014cf4:	4b2a      	ldr	r3, [pc, #168]	; (8014da0 <sys_timeout_abs+0xcc>)
 8014cf6:	22be      	movs	r2, #190	; 0xbe
 8014cf8:	492a      	ldr	r1, [pc, #168]	; (8014da4 <sys_timeout_abs+0xd0>)
 8014cfa:	482b      	ldr	r0, [pc, #172]	; (8014da8 <sys_timeout_abs+0xd4>)
 8014cfc:	f003 fa56 	bl	80181ac <iprintf>
    return;
 8014d00:	e04a      	b.n	8014d98 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	2200      	movs	r2, #0
 8014d06:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	68ba      	ldr	r2, [r7, #8]
 8014d0c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014d1a:	4b24      	ldr	r3, [pc, #144]	; (8014dac <sys_timeout_abs+0xd8>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d103      	bne.n	8014d2a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014d22:	4a22      	ldr	r2, [pc, #136]	; (8014dac <sys_timeout_abs+0xd8>)
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	6013      	str	r3, [r2, #0]
    return;
 8014d28:	e037      	b.n	8014d9a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	685a      	ldr	r2, [r3, #4]
 8014d2e:	4b1f      	ldr	r3, [pc, #124]	; (8014dac <sys_timeout_abs+0xd8>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	1ad3      	subs	r3, r2, r3
 8014d36:	0fdb      	lsrs	r3, r3, #31
 8014d38:	f003 0301 	and.w	r3, r3, #1
 8014d3c:	b2db      	uxtb	r3, r3
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d007      	beq.n	8014d52 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014d42:	4b1a      	ldr	r3, [pc, #104]	; (8014dac <sys_timeout_abs+0xd8>)
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014d4a:	4a18      	ldr	r2, [pc, #96]	; (8014dac <sys_timeout_abs+0xd8>)
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	6013      	str	r3, [r2, #0]
 8014d50:	e023      	b.n	8014d9a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d52:	4b16      	ldr	r3, [pc, #88]	; (8014dac <sys_timeout_abs+0xd8>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	617b      	str	r3, [r7, #20]
 8014d58:	e01a      	b.n	8014d90 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d00b      	beq.n	8014d7a <sys_timeout_abs+0xa6>
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	685a      	ldr	r2, [r3, #4]
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	1ad3      	subs	r3, r2, r3
 8014d6e:	0fdb      	lsrs	r3, r3, #31
 8014d70:	f003 0301 	and.w	r3, r3, #1
 8014d74:	b2db      	uxtb	r3, r3
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d007      	beq.n	8014d8a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	693a      	ldr	r2, [r7, #16]
 8014d86:	601a      	str	r2, [r3, #0]
        break;
 8014d88:	e007      	b.n	8014d9a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	617b      	str	r3, [r7, #20]
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d1e1      	bne.n	8014d5a <sys_timeout_abs+0x86>
 8014d96:	e000      	b.n	8014d9a <sys_timeout_abs+0xc6>
    return;
 8014d98:	bf00      	nop
      }
    }
  }
}
 8014d9a:	3718      	adds	r7, #24
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	0801ba80 	.word	0x0801ba80
 8014da4:	0801bab4 	.word	0x0801bab4
 8014da8:	0801baf4 	.word	0x0801baf4
 8014dac:	20004bac 	.word	0x20004bac

08014db0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b086      	sub	sp, #24
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	4798      	blx	r3

  now = sys_now();
 8014dc2:	f7f1 fc8d 	bl	80066e0 <sys_now>
 8014dc6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	4b0f      	ldr	r3, [pc, #60]	; (8014e0c <lwip_cyclic_timer+0x5c>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	4413      	add	r3, r2
 8014dd2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	1ad3      	subs	r3, r2, r3
 8014dda:	0fdb      	lsrs	r3, r3, #31
 8014ddc:	f003 0301 	and.w	r3, r3, #1
 8014de0:	b2db      	uxtb	r3, r3
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d009      	beq.n	8014dfa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	4413      	add	r3, r2
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	4907      	ldr	r1, [pc, #28]	; (8014e10 <lwip_cyclic_timer+0x60>)
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7ff ff6e 	bl	8014cd4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014df8:	e004      	b.n	8014e04 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	4904      	ldr	r1, [pc, #16]	; (8014e10 <lwip_cyclic_timer+0x60>)
 8014dfe:	68f8      	ldr	r0, [r7, #12]
 8014e00:	f7ff ff68 	bl	8014cd4 <sys_timeout_abs>
}
 8014e04:	bf00      	nop
 8014e06:	3718      	adds	r7, #24
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	20004bb0 	.word	0x20004bb0
 8014e10:	08014db1 	.word	0x08014db1

08014e14 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	607b      	str	r3, [r7, #4]
 8014e1e:	e00e      	b.n	8014e3e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014e20:	4a0b      	ldr	r2, [pc, #44]	; (8014e50 <sys_timeouts_init+0x3c>)
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	00db      	lsls	r3, r3, #3
 8014e2c:	4a08      	ldr	r2, [pc, #32]	; (8014e50 <sys_timeouts_init+0x3c>)
 8014e2e:	4413      	add	r3, r2
 8014e30:	461a      	mov	r2, r3
 8014e32:	4908      	ldr	r1, [pc, #32]	; (8014e54 <sys_timeouts_init+0x40>)
 8014e34:	f000 f810 	bl	8014e58 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	3301      	adds	r3, #1
 8014e3c:	607b      	str	r3, [r7, #4]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2b02      	cmp	r3, #2
 8014e42:	d9ed      	bls.n	8014e20 <sys_timeouts_init+0xc>
  }
}
 8014e44:	bf00      	nop
 8014e46:	bf00      	nop
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	0801c6c8 	.word	0x0801c6c8
 8014e54:	08014db1 	.word	0x08014db1

08014e58 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b086      	sub	sp, #24
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	60f8      	str	r0, [r7, #12]
 8014e60:	60b9      	str	r1, [r7, #8]
 8014e62:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e6a:	d306      	bcc.n	8014e7a <sys_timeout+0x22>
 8014e6c:	4b0a      	ldr	r3, [pc, #40]	; (8014e98 <sys_timeout+0x40>)
 8014e6e:	f240 1229 	movw	r2, #297	; 0x129
 8014e72:	490a      	ldr	r1, [pc, #40]	; (8014e9c <sys_timeout+0x44>)
 8014e74:	480a      	ldr	r0, [pc, #40]	; (8014ea0 <sys_timeout+0x48>)
 8014e76:	f003 f999 	bl	80181ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014e7a:	f7f1 fc31 	bl	80066e0 <sys_now>
 8014e7e:	4602      	mov	r2, r0
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	4413      	add	r3, r2
 8014e84:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	68b9      	ldr	r1, [r7, #8]
 8014e8a:	6978      	ldr	r0, [r7, #20]
 8014e8c:	f7ff ff22 	bl	8014cd4 <sys_timeout_abs>
#endif
}
 8014e90:	bf00      	nop
 8014e92:	3718      	adds	r7, #24
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	0801ba80 	.word	0x0801ba80
 8014e9c:	0801bb1c 	.word	0x0801bb1c
 8014ea0:	0801baf4 	.word	0x0801baf4

08014ea4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014eaa:	f7f1 fc19 	bl	80066e0 <sys_now>
 8014eae:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014eb0:	4b17      	ldr	r3, [pc, #92]	; (8014f10 <sys_check_timeouts+0x6c>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d022      	beq.n	8014f02 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	68fa      	ldr	r2, [r7, #12]
 8014ec2:	1ad3      	subs	r3, r2, r3
 8014ec4:	0fdb      	lsrs	r3, r3, #31
 8014ec6:	f003 0301 	and.w	r3, r3, #1
 8014eca:	b2db      	uxtb	r3, r3
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d11a      	bne.n	8014f06 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4a0e      	ldr	r2, [pc, #56]	; (8014f10 <sys_check_timeouts+0x6c>)
 8014ed6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	4a0a      	ldr	r2, [pc, #40]	; (8014f14 <sys_check_timeouts+0x70>)
 8014eea:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014eec:	68b9      	ldr	r1, [r7, #8]
 8014eee:	200a      	movs	r0, #10
 8014ef0:	f7f8 fd10 	bl	800d914 <memp_free>
    if (handler != NULL) {
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d0da      	beq.n	8014eb0 <sys_check_timeouts+0xc>
      handler(arg);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6838      	ldr	r0, [r7, #0]
 8014efe:	4798      	blx	r3
  do {
 8014f00:	e7d6      	b.n	8014eb0 <sys_check_timeouts+0xc>
      return;
 8014f02:	bf00      	nop
 8014f04:	e000      	b.n	8014f08 <sys_check_timeouts+0x64>
      return;
 8014f06:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014f08:	3710      	adds	r7, #16
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	20004bac 	.word	0x20004bac
 8014f14:	20004bb0 	.word	0x20004bb0

08014f18 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014f1e:	4b16      	ldr	r3, [pc, #88]	; (8014f78 <sys_timeouts_sleeptime+0x60>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d102      	bne.n	8014f2c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014f26:	f04f 33ff 	mov.w	r3, #4294967295
 8014f2a:	e020      	b.n	8014f6e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014f2c:	f7f1 fbd8 	bl	80066e0 <sys_now>
 8014f30:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014f32:	4b11      	ldr	r3, [pc, #68]	; (8014f78 <sys_timeouts_sleeptime+0x60>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	685a      	ldr	r2, [r3, #4]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	1ad3      	subs	r3, r2, r3
 8014f3c:	0fdb      	lsrs	r3, r3, #31
 8014f3e:	f003 0301 	and.w	r3, r3, #1
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d001      	beq.n	8014f4c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	e010      	b.n	8014f6e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <sys_timeouts_sleeptime+0x60>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	685a      	ldr	r2, [r3, #4]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	1ad3      	subs	r3, r2, r3
 8014f56:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	da06      	bge.n	8014f6c <sys_timeouts_sleeptime+0x54>
 8014f5e:	4b07      	ldr	r3, [pc, #28]	; (8014f7c <sys_timeouts_sleeptime+0x64>)
 8014f60:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014f64:	4906      	ldr	r1, [pc, #24]	; (8014f80 <sys_timeouts_sleeptime+0x68>)
 8014f66:	4807      	ldr	r0, [pc, #28]	; (8014f84 <sys_timeouts_sleeptime+0x6c>)
 8014f68:	f003 f920 	bl	80181ac <iprintf>
    return ret;
 8014f6c:	683b      	ldr	r3, [r7, #0]
  }
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	20004bac 	.word	0x20004bac
 8014f7c:	0801ba80 	.word	0x0801ba80
 8014f80:	0801bb54 	.word	0x0801bb54
 8014f84:	0801baf4 	.word	0x0801baf4

08014f88 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014f8c:	f003 f926 	bl	80181dc <rand>
 8014f90:	4603      	mov	r3, r0
 8014f92:	b29b      	uxth	r3, r3
 8014f94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014f9e:	b29a      	uxth	r2, r3
 8014fa0:	4b01      	ldr	r3, [pc, #4]	; (8014fa8 <udp_init+0x20>)
 8014fa2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014fa4:	bf00      	nop
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	200000cc 	.word	0x200000cc

08014fac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014fac:	b480      	push	{r7}
 8014fae:	b083      	sub	sp, #12
 8014fb0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014fb6:	4b17      	ldr	r3, [pc, #92]	; (8015014 <udp_new_port+0x68>)
 8014fb8:	881b      	ldrh	r3, [r3, #0]
 8014fba:	1c5a      	adds	r2, r3, #1
 8014fbc:	b291      	uxth	r1, r2
 8014fbe:	4a15      	ldr	r2, [pc, #84]	; (8015014 <udp_new_port+0x68>)
 8014fc0:	8011      	strh	r1, [r2, #0]
 8014fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fc6:	4293      	cmp	r3, r2
 8014fc8:	d103      	bne.n	8014fd2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014fca:	4b12      	ldr	r3, [pc, #72]	; (8015014 <udp_new_port+0x68>)
 8014fcc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014fd0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fd2:	4b11      	ldr	r3, [pc, #68]	; (8015018 <udp_new_port+0x6c>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	603b      	str	r3, [r7, #0]
 8014fd8:	e011      	b.n	8014ffe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	8a5a      	ldrh	r2, [r3, #18]
 8014fde:	4b0d      	ldr	r3, [pc, #52]	; (8015014 <udp_new_port+0x68>)
 8014fe0:	881b      	ldrh	r3, [r3, #0]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d108      	bne.n	8014ff8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014fe6:	88fb      	ldrh	r3, [r7, #6]
 8014fe8:	3301      	adds	r3, #1
 8014fea:	80fb      	strh	r3, [r7, #6]
 8014fec:	88fb      	ldrh	r3, [r7, #6]
 8014fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ff2:	d3e0      	bcc.n	8014fb6 <udp_new_port+0xa>
        return 0;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	e007      	b.n	8015008 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	603b      	str	r3, [r7, #0]
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d1ea      	bne.n	8014fda <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015004:	4b03      	ldr	r3, [pc, #12]	; (8015014 <udp_new_port+0x68>)
 8015006:	881b      	ldrh	r3, [r3, #0]
}
 8015008:	4618      	mov	r0, r3
 801500a:	370c      	adds	r7, #12
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr
 8015014:	200000cc 	.word	0x200000cc
 8015018:	2000d8f4 	.word	0x2000d8f4

0801501c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b084      	sub	sp, #16
 8015020:	af00      	add	r7, sp, #0
 8015022:	60f8      	str	r0, [r7, #12]
 8015024:	60b9      	str	r1, [r7, #8]
 8015026:	4613      	mov	r3, r2
 8015028:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d105      	bne.n	801503c <udp_input_local_match+0x20>
 8015030:	4b27      	ldr	r3, [pc, #156]	; (80150d0 <udp_input_local_match+0xb4>)
 8015032:	2287      	movs	r2, #135	; 0x87
 8015034:	4927      	ldr	r1, [pc, #156]	; (80150d4 <udp_input_local_match+0xb8>)
 8015036:	4828      	ldr	r0, [pc, #160]	; (80150d8 <udp_input_local_match+0xbc>)
 8015038:	f003 f8b8 	bl	80181ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d105      	bne.n	801504e <udp_input_local_match+0x32>
 8015042:	4b23      	ldr	r3, [pc, #140]	; (80150d0 <udp_input_local_match+0xb4>)
 8015044:	2288      	movs	r2, #136	; 0x88
 8015046:	4925      	ldr	r1, [pc, #148]	; (80150dc <udp_input_local_match+0xc0>)
 8015048:	4823      	ldr	r0, [pc, #140]	; (80150d8 <udp_input_local_match+0xbc>)
 801504a:	f003 f8af 	bl	80181ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	7a1b      	ldrb	r3, [r3, #8]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00b      	beq.n	801506e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	7a1a      	ldrb	r2, [r3, #8]
 801505a:	4b21      	ldr	r3, [pc, #132]	; (80150e0 <udp_input_local_match+0xc4>)
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015062:	3301      	adds	r3, #1
 8015064:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015066:	429a      	cmp	r2, r3
 8015068:	d001      	beq.n	801506e <udp_input_local_match+0x52>
    return 0;
 801506a:	2300      	movs	r3, #0
 801506c:	e02b      	b.n	80150c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801506e:	79fb      	ldrb	r3, [r7, #7]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d018      	beq.n	80150a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d013      	beq.n	80150a2 <udp_input_local_match+0x86>
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d00f      	beq.n	80150a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015082:	4b17      	ldr	r3, [pc, #92]	; (80150e0 <udp_input_local_match+0xc4>)
 8015084:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801508a:	d00a      	beq.n	80150a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	681a      	ldr	r2, [r3, #0]
 8015090:	4b13      	ldr	r3, [pc, #76]	; (80150e0 <udp_input_local_match+0xc4>)
 8015092:	695b      	ldr	r3, [r3, #20]
 8015094:	405a      	eors	r2, r3
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	3308      	adds	r3, #8
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d110      	bne.n	80150c4 <udp_input_local_match+0xa8>
          return 1;
 80150a2:	2301      	movs	r3, #1
 80150a4:	e00f      	b.n	80150c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d009      	beq.n	80150c0 <udp_input_local_match+0xa4>
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d005      	beq.n	80150c0 <udp_input_local_match+0xa4>
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	4b09      	ldr	r3, [pc, #36]	; (80150e0 <udp_input_local_match+0xc4>)
 80150ba:	695b      	ldr	r3, [r3, #20]
 80150bc:	429a      	cmp	r2, r3
 80150be:	d101      	bne.n	80150c4 <udp_input_local_match+0xa8>
        return 1;
 80150c0:	2301      	movs	r3, #1
 80150c2:	e000      	b.n	80150c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	0801bb68 	.word	0x0801bb68
 80150d4:	0801bb98 	.word	0x0801bb98
 80150d8:	0801bbbc 	.word	0x0801bbbc
 80150dc:	0801bbe4 	.word	0x0801bbe4
 80150e0:	20008008 	.word	0x20008008

080150e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80150e4:	b590      	push	{r4, r7, lr}
 80150e6:	b08d      	sub	sp, #52	; 0x34
 80150e8:	af02      	add	r7, sp, #8
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80150ee:	2300      	movs	r3, #0
 80150f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d105      	bne.n	8015104 <udp_input+0x20>
 80150f8:	4b7c      	ldr	r3, [pc, #496]	; (80152ec <udp_input+0x208>)
 80150fa:	22cf      	movs	r2, #207	; 0xcf
 80150fc:	497c      	ldr	r1, [pc, #496]	; (80152f0 <udp_input+0x20c>)
 80150fe:	487d      	ldr	r0, [pc, #500]	; (80152f4 <udp_input+0x210>)
 8015100:	f003 f854 	bl	80181ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d105      	bne.n	8015116 <udp_input+0x32>
 801510a:	4b78      	ldr	r3, [pc, #480]	; (80152ec <udp_input+0x208>)
 801510c:	22d0      	movs	r2, #208	; 0xd0
 801510e:	497a      	ldr	r1, [pc, #488]	; (80152f8 <udp_input+0x214>)
 8015110:	4878      	ldr	r0, [pc, #480]	; (80152f4 <udp_input+0x210>)
 8015112:	f003 f84b 	bl	80181ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	895b      	ldrh	r3, [r3, #10]
 801511a:	2b07      	cmp	r3, #7
 801511c:	d803      	bhi.n	8015126 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7f9 fa9c 	bl	800e65c <pbuf_free>
    goto end;
 8015124:	e0de      	b.n	80152e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801512c:	4b73      	ldr	r3, [pc, #460]	; (80152fc <udp_input+0x218>)
 801512e:	695b      	ldr	r3, [r3, #20]
 8015130:	4a72      	ldr	r2, [pc, #456]	; (80152fc <udp_input+0x218>)
 8015132:	6812      	ldr	r2, [r2, #0]
 8015134:	4611      	mov	r1, r2
 8015136:	4618      	mov	r0, r3
 8015138:	f001 fd96 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 801513c:	4603      	mov	r3, r0
 801513e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	881b      	ldrh	r3, [r3, #0]
 8015144:	b29b      	uxth	r3, r3
 8015146:	4618      	mov	r0, r3
 8015148:	f7f7 fedc 	bl	800cf04 <lwip_htons>
 801514c:	4603      	mov	r3, r0
 801514e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	885b      	ldrh	r3, [r3, #2]
 8015154:	b29b      	uxth	r3, r3
 8015156:	4618      	mov	r0, r3
 8015158:	f7f7 fed4 	bl	800cf04 <lwip_htons>
 801515c:	4603      	mov	r3, r0
 801515e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015160:	2300      	movs	r3, #0
 8015162:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015164:	2300      	movs	r3, #0
 8015166:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015168:	2300      	movs	r3, #0
 801516a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801516c:	4b64      	ldr	r3, [pc, #400]	; (8015300 <udp_input+0x21c>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	627b      	str	r3, [r7, #36]	; 0x24
 8015172:	e054      	b.n	801521e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015176:	8a5b      	ldrh	r3, [r3, #18]
 8015178:	89fa      	ldrh	r2, [r7, #14]
 801517a:	429a      	cmp	r2, r3
 801517c:	d14a      	bne.n	8015214 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801517e:	7cfb      	ldrb	r3, [r7, #19]
 8015180:	461a      	mov	r2, r3
 8015182:	6839      	ldr	r1, [r7, #0]
 8015184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015186:	f7ff ff49 	bl	801501c <udp_input_local_match>
 801518a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801518c:	2b00      	cmp	r3, #0
 801518e:	d041      	beq.n	8015214 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015192:	7c1b      	ldrb	r3, [r3, #16]
 8015194:	f003 0304 	and.w	r3, r3, #4
 8015198:	2b00      	cmp	r3, #0
 801519a:	d11d      	bne.n	80151d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801519c:	69fb      	ldr	r3, [r7, #28]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d102      	bne.n	80151a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80151a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a4:	61fb      	str	r3, [r7, #28]
 80151a6:	e017      	b.n	80151d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80151a8:	7cfb      	ldrb	r3, [r7, #19]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d014      	beq.n	80151d8 <udp_input+0xf4>
 80151ae:	4b53      	ldr	r3, [pc, #332]	; (80152fc <udp_input+0x218>)
 80151b0:	695b      	ldr	r3, [r3, #20]
 80151b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151b6:	d10f      	bne.n	80151d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80151b8:	69fb      	ldr	r3, [r7, #28]
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	3304      	adds	r3, #4
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d008      	beq.n	80151d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80151c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	3304      	adds	r3, #4
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d101      	bne.n	80151d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80151d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80151d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151da:	8a9b      	ldrh	r3, [r3, #20]
 80151dc:	8a3a      	ldrh	r2, [r7, #16]
 80151de:	429a      	cmp	r2, r3
 80151e0:	d118      	bne.n	8015214 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80151e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d005      	beq.n	80151f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80151ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ec:	685a      	ldr	r2, [r3, #4]
 80151ee:	4b43      	ldr	r3, [pc, #268]	; (80152fc <udp_input+0x218>)
 80151f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80151f2:	429a      	cmp	r2, r3
 80151f4:	d10e      	bne.n	8015214 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80151f6:	6a3b      	ldr	r3, [r7, #32]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d014      	beq.n	8015226 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80151fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fe:	68da      	ldr	r2, [r3, #12]
 8015200:	6a3b      	ldr	r3, [r7, #32]
 8015202:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015204:	4b3e      	ldr	r3, [pc, #248]	; (8015300 <udp_input+0x21c>)
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801520c:	4a3c      	ldr	r2, [pc, #240]	; (8015300 <udp_input+0x21c>)
 801520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015210:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015212:	e008      	b.n	8015226 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015216:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	627b      	str	r3, [r7, #36]	; 0x24
 801521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015220:	2b00      	cmp	r3, #0
 8015222:	d1a7      	bne.n	8015174 <udp_input+0x90>
 8015224:	e000      	b.n	8015228 <udp_input+0x144>
        break;
 8015226:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522a:	2b00      	cmp	r3, #0
 801522c:	d101      	bne.n	8015232 <udp_input+0x14e>
    pcb = uncon_pcb;
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015234:	2b00      	cmp	r3, #0
 8015236:	d002      	beq.n	801523e <udp_input+0x15a>
    for_us = 1;
 8015238:	2301      	movs	r3, #1
 801523a:	76fb      	strb	r3, [r7, #27]
 801523c:	e00a      	b.n	8015254 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	3304      	adds	r3, #4
 8015242:	681a      	ldr	r2, [r3, #0]
 8015244:	4b2d      	ldr	r3, [pc, #180]	; (80152fc <udp_input+0x218>)
 8015246:	695b      	ldr	r3, [r3, #20]
 8015248:	429a      	cmp	r2, r3
 801524a:	bf0c      	ite	eq
 801524c:	2301      	moveq	r3, #1
 801524e:	2300      	movne	r3, #0
 8015250:	b2db      	uxtb	r3, r3
 8015252:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015254:	7efb      	ldrb	r3, [r7, #27]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d041      	beq.n	80152de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801525a:	2108      	movs	r1, #8
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f7f9 f977 	bl	800e550 <pbuf_remove_header>
 8015262:	4603      	mov	r3, r0
 8015264:	2b00      	cmp	r3, #0
 8015266:	d00a      	beq.n	801527e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015268:	4b20      	ldr	r3, [pc, #128]	; (80152ec <udp_input+0x208>)
 801526a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801526e:	4925      	ldr	r1, [pc, #148]	; (8015304 <udp_input+0x220>)
 8015270:	4820      	ldr	r0, [pc, #128]	; (80152f4 <udp_input+0x210>)
 8015272:	f002 ff9b 	bl	80181ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f7f9 f9f0 	bl	800e65c <pbuf_free>
      goto end;
 801527c:	e032      	b.n	80152e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015280:	2b00      	cmp	r3, #0
 8015282:	d012      	beq.n	80152aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015286:	699b      	ldr	r3, [r3, #24]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d00a      	beq.n	80152a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528e:	699c      	ldr	r4, [r3, #24]
 8015290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015292:	69d8      	ldr	r0, [r3, #28]
 8015294:	8a3b      	ldrh	r3, [r7, #16]
 8015296:	9300      	str	r3, [sp, #0]
 8015298:	4b1b      	ldr	r3, [pc, #108]	; (8015308 <udp_input+0x224>)
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801529e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80152a0:	e021      	b.n	80152e6 <udp_input+0x202>
        pbuf_free(p);
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f7f9 f9da 	bl	800e65c <pbuf_free>
        goto end;
 80152a8:	e01c      	b.n	80152e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80152aa:	7cfb      	ldrb	r3, [r7, #19]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d112      	bne.n	80152d6 <udp_input+0x1f2>
 80152b0:	4b12      	ldr	r3, [pc, #72]	; (80152fc <udp_input+0x218>)
 80152b2:	695b      	ldr	r3, [r3, #20]
 80152b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152b8:	2be0      	cmp	r3, #224	; 0xe0
 80152ba:	d00c      	beq.n	80152d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80152bc:	4b0f      	ldr	r3, [pc, #60]	; (80152fc <udp_input+0x218>)
 80152be:	899b      	ldrh	r3, [r3, #12]
 80152c0:	3308      	adds	r3, #8
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	b21b      	sxth	r3, r3
 80152c6:	4619      	mov	r1, r3
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f7f9 f9b4 	bl	800e636 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80152ce:	2103      	movs	r1, #3
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f001 f9a9 	bl	8016628 <icmp_dest_unreach>
      pbuf_free(p);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f7f9 f9c0 	bl	800e65c <pbuf_free>
  return;
 80152dc:	e003      	b.n	80152e6 <udp_input+0x202>
    pbuf_free(p);
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f7f9 f9bc 	bl	800e65c <pbuf_free>
  return;
 80152e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80152e6:	372c      	adds	r7, #44	; 0x2c
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd90      	pop	{r4, r7, pc}
 80152ec:	0801bb68 	.word	0x0801bb68
 80152f0:	0801bc0c 	.word	0x0801bc0c
 80152f4:	0801bbbc 	.word	0x0801bbbc
 80152f8:	0801bc24 	.word	0x0801bc24
 80152fc:	20008008 	.word	0x20008008
 8015300:	2000d8f4 	.word	0x2000d8f4
 8015304:	0801bc40 	.word	0x0801bc40
 8015308:	20008018 	.word	0x20008018

0801530c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b086      	sub	sp, #24
 8015310:	af00      	add	r7, sp, #0
 8015312:	60f8      	str	r0, [r7, #12]
 8015314:	60b9      	str	r1, [r7, #8]
 8015316:	4613      	mov	r3, r2
 8015318:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d101      	bne.n	8015324 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015320:	4b39      	ldr	r3, [pc, #228]	; (8015408 <udp_bind+0xfc>)
 8015322:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d109      	bne.n	801533e <udp_bind+0x32>
 801532a:	4b38      	ldr	r3, [pc, #224]	; (801540c <udp_bind+0x100>)
 801532c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015330:	4937      	ldr	r1, [pc, #220]	; (8015410 <udp_bind+0x104>)
 8015332:	4838      	ldr	r0, [pc, #224]	; (8015414 <udp_bind+0x108>)
 8015334:	f002 ff3a 	bl	80181ac <iprintf>
 8015338:	f06f 030f 	mvn.w	r3, #15
 801533c:	e060      	b.n	8015400 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801533e:	2300      	movs	r3, #0
 8015340:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015342:	4b35      	ldr	r3, [pc, #212]	; (8015418 <udp_bind+0x10c>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	617b      	str	r3, [r7, #20]
 8015348:	e009      	b.n	801535e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801534a:	68fa      	ldr	r2, [r7, #12]
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	429a      	cmp	r2, r3
 8015350:	d102      	bne.n	8015358 <udp_bind+0x4c>
      rebind = 1;
 8015352:	2301      	movs	r3, #1
 8015354:	74fb      	strb	r3, [r7, #19]
      break;
 8015356:	e005      	b.n	8015364 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	617b      	str	r3, [r7, #20]
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d1f2      	bne.n	801534a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015364:	88fb      	ldrh	r3, [r7, #6]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d109      	bne.n	801537e <udp_bind+0x72>
    port = udp_new_port();
 801536a:	f7ff fe1f 	bl	8014fac <udp_new_port>
 801536e:	4603      	mov	r3, r0
 8015370:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015372:	88fb      	ldrh	r3, [r7, #6]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d12c      	bne.n	80153d2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015378:	f06f 0307 	mvn.w	r3, #7
 801537c:	e040      	b.n	8015400 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801537e:	4b26      	ldr	r3, [pc, #152]	; (8015418 <udp_bind+0x10c>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	617b      	str	r3, [r7, #20]
 8015384:	e022      	b.n	80153cc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015386:	68fa      	ldr	r2, [r7, #12]
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	429a      	cmp	r2, r3
 801538c:	d01b      	beq.n	80153c6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	8a5b      	ldrh	r3, [r3, #18]
 8015392:	88fa      	ldrh	r2, [r7, #6]
 8015394:	429a      	cmp	r2, r3
 8015396:	d116      	bne.n	80153c6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	681a      	ldr	r2, [r3, #0]
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d00d      	beq.n	80153c0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d00a      	beq.n	80153c0 <udp_bind+0xb4>
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d006      	beq.n	80153c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80153b2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d003      	beq.n	80153c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d102      	bne.n	80153c6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80153c0:	f06f 0307 	mvn.w	r3, #7
 80153c4:	e01c      	b.n	8015400 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	617b      	str	r3, [r7, #20]
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d1d9      	bne.n	8015386 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d002      	beq.n	80153de <udp_bind+0xd2>
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	e000      	b.n	80153e0 <udp_bind+0xd4>
 80153de:	2300      	movs	r3, #0
 80153e0:	68fa      	ldr	r2, [r7, #12]
 80153e2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	88fa      	ldrh	r2, [r7, #6]
 80153e8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80153ea:	7cfb      	ldrb	r3, [r7, #19]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d106      	bne.n	80153fe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80153f0:	4b09      	ldr	r3, [pc, #36]	; (8015418 <udp_bind+0x10c>)
 80153f2:	681a      	ldr	r2, [r3, #0]
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80153f8:	4a07      	ldr	r2, [pc, #28]	; (8015418 <udp_bind+0x10c>)
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80153fe:	2300      	movs	r3, #0
}
 8015400:	4618      	mov	r0, r3
 8015402:	3718      	adds	r7, #24
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	0801c6e0 	.word	0x0801c6e0
 801540c:	0801bb68 	.word	0x0801bb68
 8015410:	0801be30 	.word	0x0801be30
 8015414:	0801bbbc 	.word	0x0801bbbc
 8015418:	2000d8f4 	.word	0x2000d8f4

0801541c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d107      	bne.n	801543e <udp_recv+0x22>
 801542e:	4b08      	ldr	r3, [pc, #32]	; (8015450 <udp_recv+0x34>)
 8015430:	f240 428a 	movw	r2, #1162	; 0x48a
 8015434:	4907      	ldr	r1, [pc, #28]	; (8015454 <udp_recv+0x38>)
 8015436:	4808      	ldr	r0, [pc, #32]	; (8015458 <udp_recv+0x3c>)
 8015438:	f002 feb8 	bl	80181ac <iprintf>
 801543c:	e005      	b.n	801544a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	68ba      	ldr	r2, [r7, #8]
 8015442:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	687a      	ldr	r2, [r7, #4]
 8015448:	61da      	str	r2, [r3, #28]
}
 801544a:	3710      	adds	r7, #16
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}
 8015450:	0801bb68 	.word	0x0801bb68
 8015454:	0801be9c 	.word	0x0801be9c
 8015458:	0801bbbc 	.word	0x0801bbbc

0801545c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d107      	bne.n	801547a <udp_remove+0x1e>
 801546a:	4b19      	ldr	r3, [pc, #100]	; (80154d0 <udp_remove+0x74>)
 801546c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015470:	4918      	ldr	r1, [pc, #96]	; (80154d4 <udp_remove+0x78>)
 8015472:	4819      	ldr	r0, [pc, #100]	; (80154d8 <udp_remove+0x7c>)
 8015474:	f002 fe9a 	bl	80181ac <iprintf>
 8015478:	e026      	b.n	80154c8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801547a:	4b18      	ldr	r3, [pc, #96]	; (80154dc <udp_remove+0x80>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	687a      	ldr	r2, [r7, #4]
 8015480:	429a      	cmp	r2, r3
 8015482:	d105      	bne.n	8015490 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015484:	4b15      	ldr	r3, [pc, #84]	; (80154dc <udp_remove+0x80>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	4a14      	ldr	r2, [pc, #80]	; (80154dc <udp_remove+0x80>)
 801548c:	6013      	str	r3, [r2, #0]
 801548e:	e017      	b.n	80154c0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015490:	4b12      	ldr	r3, [pc, #72]	; (80154dc <udp_remove+0x80>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	60fb      	str	r3, [r7, #12]
 8015496:	e010      	b.n	80154ba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d009      	beq.n	80154b4 <udp_remove+0x58>
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d104      	bne.n	80154b4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	68da      	ldr	r2, [r3, #12]
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	60da      	str	r2, [r3, #12]
        break;
 80154b2:	e005      	b.n	80154c0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	60fb      	str	r3, [r7, #12]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d1eb      	bne.n	8015498 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80154c0:	6879      	ldr	r1, [r7, #4]
 80154c2:	2000      	movs	r0, #0
 80154c4:	f7f8 fa26 	bl	800d914 <memp_free>
}
 80154c8:	3710      	adds	r7, #16
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	bf00      	nop
 80154d0:	0801bb68 	.word	0x0801bb68
 80154d4:	0801beb4 	.word	0x0801beb4
 80154d8:	0801bbbc 	.word	0x0801bbbc
 80154dc:	2000d8f4 	.word	0x2000d8f4

080154e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80154e6:	2000      	movs	r0, #0
 80154e8:	f7f8 f9c2 	bl	800d870 <memp_malloc>
 80154ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d007      	beq.n	8015504 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80154f4:	2220      	movs	r2, #32
 80154f6:	2100      	movs	r1, #0
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f002 fdf4 	bl	80180e6 <memset>
    pcb->ttl = UDP_TTL;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	22ff      	movs	r2, #255	; 0xff
 8015502:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015504:	687b      	ldr	r3, [r7, #4]
}
 8015506:	4618      	mov	r0, r3
 8015508:	3708      	adds	r7, #8
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}

0801550e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801550e:	b580      	push	{r7, lr}
 8015510:	b084      	sub	sp, #16
 8015512:	af00      	add	r7, sp, #0
 8015514:	4603      	mov	r3, r0
 8015516:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015518:	f7ff ffe2 	bl	80154e0 <udp_new>
 801551c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801551e:	68fb      	ldr	r3, [r7, #12]
}
 8015520:	4618      	mov	r0, r3
 8015522:	3710      	adds	r7, #16
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015528:	b480      	push	{r7}
 801552a:	b085      	sub	sp, #20
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d01e      	beq.n	8015576 <udp_netif_ip_addr_changed+0x4e>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d01a      	beq.n	8015576 <udp_netif_ip_addr_changed+0x4e>
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d017      	beq.n	8015576 <udp_netif_ip_addr_changed+0x4e>
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d013      	beq.n	8015576 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801554e:	4b0d      	ldr	r3, [pc, #52]	; (8015584 <udp_netif_ip_addr_changed+0x5c>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	60fb      	str	r3, [r7, #12]
 8015554:	e00c      	b.n	8015570 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	429a      	cmp	r2, r3
 8015560:	d103      	bne.n	801556a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	60fb      	str	r3, [r7, #12]
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d1ef      	bne.n	8015556 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015576:	bf00      	nop
 8015578:	3714      	adds	r7, #20
 801557a:	46bd      	mov	sp, r7
 801557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015580:	4770      	bx	lr
 8015582:	bf00      	nop
 8015584:	2000d8f4 	.word	0x2000d8f4

08015588 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015590:	4915      	ldr	r1, [pc, #84]	; (80155e8 <etharp_free_entry+0x60>)
 8015592:	687a      	ldr	r2, [r7, #4]
 8015594:	4613      	mov	r3, r2
 8015596:	005b      	lsls	r3, r3, #1
 8015598:	4413      	add	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	440b      	add	r3, r1
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d013      	beq.n	80155cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80155a4:	4910      	ldr	r1, [pc, #64]	; (80155e8 <etharp_free_entry+0x60>)
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	4613      	mov	r3, r2
 80155aa:	005b      	lsls	r3, r3, #1
 80155ac:	4413      	add	r3, r2
 80155ae:	00db      	lsls	r3, r3, #3
 80155b0:	440b      	add	r3, r1
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7f9 f851 	bl	800e65c <pbuf_free>
    arp_table[i].q = NULL;
 80155ba:	490b      	ldr	r1, [pc, #44]	; (80155e8 <etharp_free_entry+0x60>)
 80155bc:	687a      	ldr	r2, [r7, #4]
 80155be:	4613      	mov	r3, r2
 80155c0:	005b      	lsls	r3, r3, #1
 80155c2:	4413      	add	r3, r2
 80155c4:	00db      	lsls	r3, r3, #3
 80155c6:	440b      	add	r3, r1
 80155c8:	2200      	movs	r2, #0
 80155ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80155cc:	4906      	ldr	r1, [pc, #24]	; (80155e8 <etharp_free_entry+0x60>)
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	4613      	mov	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	4413      	add	r3, r2
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	440b      	add	r3, r1
 80155da:	3314      	adds	r3, #20
 80155dc:	2200      	movs	r2, #0
 80155de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80155e0:	bf00      	nop
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	20004bb8 	.word	0x20004bb8

080155ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b082      	sub	sp, #8
 80155f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155f2:	2300      	movs	r3, #0
 80155f4:	607b      	str	r3, [r7, #4]
 80155f6:	e096      	b.n	8015726 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80155f8:	494f      	ldr	r1, [pc, #316]	; (8015738 <etharp_tmr+0x14c>)
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	4613      	mov	r3, r2
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	4413      	add	r3, r2
 8015602:	00db      	lsls	r3, r3, #3
 8015604:	440b      	add	r3, r1
 8015606:	3314      	adds	r3, #20
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801560c:	78fb      	ldrb	r3, [r7, #3]
 801560e:	2b00      	cmp	r3, #0
 8015610:	f000 8086 	beq.w	8015720 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015614:	4948      	ldr	r1, [pc, #288]	; (8015738 <etharp_tmr+0x14c>)
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	4613      	mov	r3, r2
 801561a:	005b      	lsls	r3, r3, #1
 801561c:	4413      	add	r3, r2
 801561e:	00db      	lsls	r3, r3, #3
 8015620:	440b      	add	r3, r1
 8015622:	3312      	adds	r3, #18
 8015624:	881b      	ldrh	r3, [r3, #0]
 8015626:	3301      	adds	r3, #1
 8015628:	b298      	uxth	r0, r3
 801562a:	4943      	ldr	r1, [pc, #268]	; (8015738 <etharp_tmr+0x14c>)
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	4613      	mov	r3, r2
 8015630:	005b      	lsls	r3, r3, #1
 8015632:	4413      	add	r3, r2
 8015634:	00db      	lsls	r3, r3, #3
 8015636:	440b      	add	r3, r1
 8015638:	3312      	adds	r3, #18
 801563a:	4602      	mov	r2, r0
 801563c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801563e:	493e      	ldr	r1, [pc, #248]	; (8015738 <etharp_tmr+0x14c>)
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	4613      	mov	r3, r2
 8015644:	005b      	lsls	r3, r3, #1
 8015646:	4413      	add	r3, r2
 8015648:	00db      	lsls	r3, r3, #3
 801564a:	440b      	add	r3, r1
 801564c:	3312      	adds	r3, #18
 801564e:	881b      	ldrh	r3, [r3, #0]
 8015650:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015654:	d215      	bcs.n	8015682 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015656:	4938      	ldr	r1, [pc, #224]	; (8015738 <etharp_tmr+0x14c>)
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	4613      	mov	r3, r2
 801565c:	005b      	lsls	r3, r3, #1
 801565e:	4413      	add	r3, r2
 8015660:	00db      	lsls	r3, r3, #3
 8015662:	440b      	add	r3, r1
 8015664:	3314      	adds	r3, #20
 8015666:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015668:	2b01      	cmp	r3, #1
 801566a:	d10e      	bne.n	801568a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801566c:	4932      	ldr	r1, [pc, #200]	; (8015738 <etharp_tmr+0x14c>)
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	4613      	mov	r3, r2
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	4413      	add	r3, r2
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	440b      	add	r3, r1
 801567a:	3312      	adds	r3, #18
 801567c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801567e:	2b04      	cmp	r3, #4
 8015680:	d903      	bls.n	801568a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f7ff ff80 	bl	8015588 <etharp_free_entry>
 8015688:	e04a      	b.n	8015720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801568a:	492b      	ldr	r1, [pc, #172]	; (8015738 <etharp_tmr+0x14c>)
 801568c:	687a      	ldr	r2, [r7, #4]
 801568e:	4613      	mov	r3, r2
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	4413      	add	r3, r2
 8015694:	00db      	lsls	r3, r3, #3
 8015696:	440b      	add	r3, r1
 8015698:	3314      	adds	r3, #20
 801569a:	781b      	ldrb	r3, [r3, #0]
 801569c:	2b03      	cmp	r3, #3
 801569e:	d10a      	bne.n	80156b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80156a0:	4925      	ldr	r1, [pc, #148]	; (8015738 <etharp_tmr+0x14c>)
 80156a2:	687a      	ldr	r2, [r7, #4]
 80156a4:	4613      	mov	r3, r2
 80156a6:	005b      	lsls	r3, r3, #1
 80156a8:	4413      	add	r3, r2
 80156aa:	00db      	lsls	r3, r3, #3
 80156ac:	440b      	add	r3, r1
 80156ae:	3314      	adds	r3, #20
 80156b0:	2204      	movs	r2, #4
 80156b2:	701a      	strb	r2, [r3, #0]
 80156b4:	e034      	b.n	8015720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80156b6:	4920      	ldr	r1, [pc, #128]	; (8015738 <etharp_tmr+0x14c>)
 80156b8:	687a      	ldr	r2, [r7, #4]
 80156ba:	4613      	mov	r3, r2
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	4413      	add	r3, r2
 80156c0:	00db      	lsls	r3, r3, #3
 80156c2:	440b      	add	r3, r1
 80156c4:	3314      	adds	r3, #20
 80156c6:	781b      	ldrb	r3, [r3, #0]
 80156c8:	2b04      	cmp	r3, #4
 80156ca:	d10a      	bne.n	80156e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80156cc:	491a      	ldr	r1, [pc, #104]	; (8015738 <etharp_tmr+0x14c>)
 80156ce:	687a      	ldr	r2, [r7, #4]
 80156d0:	4613      	mov	r3, r2
 80156d2:	005b      	lsls	r3, r3, #1
 80156d4:	4413      	add	r3, r2
 80156d6:	00db      	lsls	r3, r3, #3
 80156d8:	440b      	add	r3, r1
 80156da:	3314      	adds	r3, #20
 80156dc:	2202      	movs	r2, #2
 80156de:	701a      	strb	r2, [r3, #0]
 80156e0:	e01e      	b.n	8015720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80156e2:	4915      	ldr	r1, [pc, #84]	; (8015738 <etharp_tmr+0x14c>)
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	4613      	mov	r3, r2
 80156e8:	005b      	lsls	r3, r3, #1
 80156ea:	4413      	add	r3, r2
 80156ec:	00db      	lsls	r3, r3, #3
 80156ee:	440b      	add	r3, r1
 80156f0:	3314      	adds	r3, #20
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d113      	bne.n	8015720 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80156f8:	490f      	ldr	r1, [pc, #60]	; (8015738 <etharp_tmr+0x14c>)
 80156fa:	687a      	ldr	r2, [r7, #4]
 80156fc:	4613      	mov	r3, r2
 80156fe:	005b      	lsls	r3, r3, #1
 8015700:	4413      	add	r3, r2
 8015702:	00db      	lsls	r3, r3, #3
 8015704:	440b      	add	r3, r1
 8015706:	3308      	adds	r3, #8
 8015708:	6818      	ldr	r0, [r3, #0]
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	4613      	mov	r3, r2
 801570e:	005b      	lsls	r3, r3, #1
 8015710:	4413      	add	r3, r2
 8015712:	00db      	lsls	r3, r3, #3
 8015714:	4a08      	ldr	r2, [pc, #32]	; (8015738 <etharp_tmr+0x14c>)
 8015716:	4413      	add	r3, r2
 8015718:	3304      	adds	r3, #4
 801571a:	4619      	mov	r1, r3
 801571c:	f000 fe6e 	bl	80163fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	3301      	adds	r3, #1
 8015724:	607b      	str	r3, [r7, #4]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2b09      	cmp	r3, #9
 801572a:	f77f af65 	ble.w	80155f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801572e:	bf00      	nop
 8015730:	bf00      	nop
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	20004bb8 	.word	0x20004bb8

0801573c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b08a      	sub	sp, #40	; 0x28
 8015740:	af00      	add	r7, sp, #0
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	460b      	mov	r3, r1
 8015746:	607a      	str	r2, [r7, #4]
 8015748:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801574a:	230a      	movs	r3, #10
 801574c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801574e:	230a      	movs	r3, #10
 8015750:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015752:	230a      	movs	r3, #10
 8015754:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015756:	2300      	movs	r3, #0
 8015758:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801575a:	230a      	movs	r3, #10
 801575c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801575e:	2300      	movs	r3, #0
 8015760:	83bb      	strh	r3, [r7, #28]
 8015762:	2300      	movs	r3, #0
 8015764:	837b      	strh	r3, [r7, #26]
 8015766:	2300      	movs	r3, #0
 8015768:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801576a:	2300      	movs	r3, #0
 801576c:	843b      	strh	r3, [r7, #32]
 801576e:	e0ae      	b.n	80158ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015770:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015774:	49a6      	ldr	r1, [pc, #664]	; (8015a10 <etharp_find_entry+0x2d4>)
 8015776:	4613      	mov	r3, r2
 8015778:	005b      	lsls	r3, r3, #1
 801577a:	4413      	add	r3, r2
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	440b      	add	r3, r1
 8015780:	3314      	adds	r3, #20
 8015782:	781b      	ldrb	r3, [r3, #0]
 8015784:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801578a:	2b0a      	cmp	r3, #10
 801578c:	d105      	bne.n	801579a <etharp_find_entry+0x5e>
 801578e:	7dfb      	ldrb	r3, [r7, #23]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d102      	bne.n	801579a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015794:	8c3b      	ldrh	r3, [r7, #32]
 8015796:	847b      	strh	r3, [r7, #34]	; 0x22
 8015798:	e095      	b.n	80158c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801579a:	7dfb      	ldrb	r3, [r7, #23]
 801579c:	2b00      	cmp	r3, #0
 801579e:	f000 8092 	beq.w	80158c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80157a2:	7dfb      	ldrb	r3, [r7, #23]
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d009      	beq.n	80157bc <etharp_find_entry+0x80>
 80157a8:	7dfb      	ldrb	r3, [r7, #23]
 80157aa:	2b01      	cmp	r3, #1
 80157ac:	d806      	bhi.n	80157bc <etharp_find_entry+0x80>
 80157ae:	4b99      	ldr	r3, [pc, #612]	; (8015a14 <etharp_find_entry+0x2d8>)
 80157b0:	f240 1223 	movw	r2, #291	; 0x123
 80157b4:	4998      	ldr	r1, [pc, #608]	; (8015a18 <etharp_find_entry+0x2dc>)
 80157b6:	4899      	ldr	r0, [pc, #612]	; (8015a1c <etharp_find_entry+0x2e0>)
 80157b8:	f002 fcf8 	bl	80181ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d020      	beq.n	8015804 <etharp_find_entry+0xc8>
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	6819      	ldr	r1, [r3, #0]
 80157c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157ca:	4891      	ldr	r0, [pc, #580]	; (8015a10 <etharp_find_entry+0x2d4>)
 80157cc:	4613      	mov	r3, r2
 80157ce:	005b      	lsls	r3, r3, #1
 80157d0:	4413      	add	r3, r2
 80157d2:	00db      	lsls	r3, r3, #3
 80157d4:	4403      	add	r3, r0
 80157d6:	3304      	adds	r3, #4
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	4299      	cmp	r1, r3
 80157dc:	d112      	bne.n	8015804 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00c      	beq.n	80157fe <etharp_find_entry+0xc2>
 80157e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157e8:	4989      	ldr	r1, [pc, #548]	; (8015a10 <etharp_find_entry+0x2d4>)
 80157ea:	4613      	mov	r3, r2
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	4413      	add	r3, r2
 80157f0:	00db      	lsls	r3, r3, #3
 80157f2:	440b      	add	r3, r1
 80157f4:	3308      	adds	r3, #8
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	687a      	ldr	r2, [r7, #4]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d102      	bne.n	8015804 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80157fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015802:	e100      	b.n	8015a06 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015804:	7dfb      	ldrb	r3, [r7, #23]
 8015806:	2b01      	cmp	r3, #1
 8015808:	d140      	bne.n	801588c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801580a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801580e:	4980      	ldr	r1, [pc, #512]	; (8015a10 <etharp_find_entry+0x2d4>)
 8015810:	4613      	mov	r3, r2
 8015812:	005b      	lsls	r3, r3, #1
 8015814:	4413      	add	r3, r2
 8015816:	00db      	lsls	r3, r3, #3
 8015818:	440b      	add	r3, r1
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d01a      	beq.n	8015856 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015820:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015824:	497a      	ldr	r1, [pc, #488]	; (8015a10 <etharp_find_entry+0x2d4>)
 8015826:	4613      	mov	r3, r2
 8015828:	005b      	lsls	r3, r3, #1
 801582a:	4413      	add	r3, r2
 801582c:	00db      	lsls	r3, r3, #3
 801582e:	440b      	add	r3, r1
 8015830:	3312      	adds	r3, #18
 8015832:	881b      	ldrh	r3, [r3, #0]
 8015834:	8bba      	ldrh	r2, [r7, #28]
 8015836:	429a      	cmp	r2, r3
 8015838:	d845      	bhi.n	80158c6 <etharp_find_entry+0x18a>
            old_queue = i;
 801583a:	8c3b      	ldrh	r3, [r7, #32]
 801583c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801583e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015842:	4973      	ldr	r1, [pc, #460]	; (8015a10 <etharp_find_entry+0x2d4>)
 8015844:	4613      	mov	r3, r2
 8015846:	005b      	lsls	r3, r3, #1
 8015848:	4413      	add	r3, r2
 801584a:	00db      	lsls	r3, r3, #3
 801584c:	440b      	add	r3, r1
 801584e:	3312      	adds	r3, #18
 8015850:	881b      	ldrh	r3, [r3, #0]
 8015852:	83bb      	strh	r3, [r7, #28]
 8015854:	e037      	b.n	80158c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015856:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801585a:	496d      	ldr	r1, [pc, #436]	; (8015a10 <etharp_find_entry+0x2d4>)
 801585c:	4613      	mov	r3, r2
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	4413      	add	r3, r2
 8015862:	00db      	lsls	r3, r3, #3
 8015864:	440b      	add	r3, r1
 8015866:	3312      	adds	r3, #18
 8015868:	881b      	ldrh	r3, [r3, #0]
 801586a:	8b7a      	ldrh	r2, [r7, #26]
 801586c:	429a      	cmp	r2, r3
 801586e:	d82a      	bhi.n	80158c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8015870:	8c3b      	ldrh	r3, [r7, #32]
 8015872:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015874:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015878:	4965      	ldr	r1, [pc, #404]	; (8015a10 <etharp_find_entry+0x2d4>)
 801587a:	4613      	mov	r3, r2
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	4413      	add	r3, r2
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	440b      	add	r3, r1
 8015884:	3312      	adds	r3, #18
 8015886:	881b      	ldrh	r3, [r3, #0]
 8015888:	837b      	strh	r3, [r7, #26]
 801588a:	e01c      	b.n	80158c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801588c:	7dfb      	ldrb	r3, [r7, #23]
 801588e:	2b01      	cmp	r3, #1
 8015890:	d919      	bls.n	80158c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015896:	495e      	ldr	r1, [pc, #376]	; (8015a10 <etharp_find_entry+0x2d4>)
 8015898:	4613      	mov	r3, r2
 801589a:	005b      	lsls	r3, r3, #1
 801589c:	4413      	add	r3, r2
 801589e:	00db      	lsls	r3, r3, #3
 80158a0:	440b      	add	r3, r1
 80158a2:	3312      	adds	r3, #18
 80158a4:	881b      	ldrh	r3, [r3, #0]
 80158a6:	8b3a      	ldrh	r2, [r7, #24]
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d80c      	bhi.n	80158c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80158ac:	8c3b      	ldrh	r3, [r7, #32]
 80158ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80158b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158b4:	4956      	ldr	r1, [pc, #344]	; (8015a10 <etharp_find_entry+0x2d4>)
 80158b6:	4613      	mov	r3, r2
 80158b8:	005b      	lsls	r3, r3, #1
 80158ba:	4413      	add	r3, r2
 80158bc:	00db      	lsls	r3, r3, #3
 80158be:	440b      	add	r3, r1
 80158c0:	3312      	adds	r3, #18
 80158c2:	881b      	ldrh	r3, [r3, #0]
 80158c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158c6:	8c3b      	ldrh	r3, [r7, #32]
 80158c8:	3301      	adds	r3, #1
 80158ca:	b29b      	uxth	r3, r3
 80158cc:	843b      	strh	r3, [r7, #32]
 80158ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80158d2:	2b09      	cmp	r3, #9
 80158d4:	f77f af4c 	ble.w	8015770 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80158d8:	7afb      	ldrb	r3, [r7, #11]
 80158da:	f003 0302 	and.w	r3, r3, #2
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d108      	bne.n	80158f4 <etharp_find_entry+0x1b8>
 80158e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80158e6:	2b0a      	cmp	r3, #10
 80158e8:	d107      	bne.n	80158fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80158ea:	7afb      	ldrb	r3, [r7, #11]
 80158ec:	f003 0301 	and.w	r3, r3, #1
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d102      	bne.n	80158fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80158f4:	f04f 33ff 	mov.w	r3, #4294967295
 80158f8:	e085      	b.n	8015a06 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80158fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80158fe:	2b09      	cmp	r3, #9
 8015900:	dc02      	bgt.n	8015908 <etharp_find_entry+0x1cc>
    i = empty;
 8015902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015904:	843b      	strh	r3, [r7, #32]
 8015906:	e039      	b.n	801597c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015908:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801590c:	2b09      	cmp	r3, #9
 801590e:	dc14      	bgt.n	801593a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015912:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015918:	493d      	ldr	r1, [pc, #244]	; (8015a10 <etharp_find_entry+0x2d4>)
 801591a:	4613      	mov	r3, r2
 801591c:	005b      	lsls	r3, r3, #1
 801591e:	4413      	add	r3, r2
 8015920:	00db      	lsls	r3, r3, #3
 8015922:	440b      	add	r3, r1
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d018      	beq.n	801595c <etharp_find_entry+0x220>
 801592a:	4b3a      	ldr	r3, [pc, #232]	; (8015a14 <etharp_find_entry+0x2d8>)
 801592c:	f240 126d 	movw	r2, #365	; 0x16d
 8015930:	493b      	ldr	r1, [pc, #236]	; (8015a20 <etharp_find_entry+0x2e4>)
 8015932:	483a      	ldr	r0, [pc, #232]	; (8015a1c <etharp_find_entry+0x2e0>)
 8015934:	f002 fc3a 	bl	80181ac <iprintf>
 8015938:	e010      	b.n	801595c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801593a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801593e:	2b09      	cmp	r3, #9
 8015940:	dc02      	bgt.n	8015948 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015942:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015944:	843b      	strh	r3, [r7, #32]
 8015946:	e009      	b.n	801595c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015948:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801594c:	2b09      	cmp	r3, #9
 801594e:	dc02      	bgt.n	8015956 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015950:	8bfb      	ldrh	r3, [r7, #30]
 8015952:	843b      	strh	r3, [r7, #32]
 8015954:	e002      	b.n	801595c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015956:	f04f 33ff 	mov.w	r3, #4294967295
 801595a:	e054      	b.n	8015a06 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801595c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015960:	2b09      	cmp	r3, #9
 8015962:	dd06      	ble.n	8015972 <etharp_find_entry+0x236>
 8015964:	4b2b      	ldr	r3, [pc, #172]	; (8015a14 <etharp_find_entry+0x2d8>)
 8015966:	f240 127f 	movw	r2, #383	; 0x17f
 801596a:	492e      	ldr	r1, [pc, #184]	; (8015a24 <etharp_find_entry+0x2e8>)
 801596c:	482b      	ldr	r0, [pc, #172]	; (8015a1c <etharp_find_entry+0x2e0>)
 801596e:	f002 fc1d 	bl	80181ac <iprintf>
    etharp_free_entry(i);
 8015972:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015976:	4618      	mov	r0, r3
 8015978:	f7ff fe06 	bl	8015588 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801597c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015980:	2b09      	cmp	r3, #9
 8015982:	dd06      	ble.n	8015992 <etharp_find_entry+0x256>
 8015984:	4b23      	ldr	r3, [pc, #140]	; (8015a14 <etharp_find_entry+0x2d8>)
 8015986:	f240 1283 	movw	r2, #387	; 0x183
 801598a:	4926      	ldr	r1, [pc, #152]	; (8015a24 <etharp_find_entry+0x2e8>)
 801598c:	4823      	ldr	r0, [pc, #140]	; (8015a1c <etharp_find_entry+0x2e0>)
 801598e:	f002 fc0d 	bl	80181ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015996:	491e      	ldr	r1, [pc, #120]	; (8015a10 <etharp_find_entry+0x2d4>)
 8015998:	4613      	mov	r3, r2
 801599a:	005b      	lsls	r3, r3, #1
 801599c:	4413      	add	r3, r2
 801599e:	00db      	lsls	r3, r3, #3
 80159a0:	440b      	add	r3, r1
 80159a2:	3314      	adds	r3, #20
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d006      	beq.n	80159b8 <etharp_find_entry+0x27c>
 80159aa:	4b1a      	ldr	r3, [pc, #104]	; (8015a14 <etharp_find_entry+0x2d8>)
 80159ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80159b0:	491d      	ldr	r1, [pc, #116]	; (8015a28 <etharp_find_entry+0x2ec>)
 80159b2:	481a      	ldr	r0, [pc, #104]	; (8015a1c <etharp_find_entry+0x2e0>)
 80159b4:	f002 fbfa 	bl	80181ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00b      	beq.n	80159d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80159be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	6819      	ldr	r1, [r3, #0]
 80159c6:	4812      	ldr	r0, [pc, #72]	; (8015a10 <etharp_find_entry+0x2d4>)
 80159c8:	4613      	mov	r3, r2
 80159ca:	005b      	lsls	r3, r3, #1
 80159cc:	4413      	add	r3, r2
 80159ce:	00db      	lsls	r3, r3, #3
 80159d0:	4403      	add	r3, r0
 80159d2:	3304      	adds	r3, #4
 80159d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80159d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159da:	490d      	ldr	r1, [pc, #52]	; (8015a10 <etharp_find_entry+0x2d4>)
 80159dc:	4613      	mov	r3, r2
 80159de:	005b      	lsls	r3, r3, #1
 80159e0:	4413      	add	r3, r2
 80159e2:	00db      	lsls	r3, r3, #3
 80159e4:	440b      	add	r3, r1
 80159e6:	3312      	adds	r3, #18
 80159e8:	2200      	movs	r2, #0
 80159ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80159ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159f0:	4907      	ldr	r1, [pc, #28]	; (8015a10 <etharp_find_entry+0x2d4>)
 80159f2:	4613      	mov	r3, r2
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	4413      	add	r3, r2
 80159f8:	00db      	lsls	r3, r3, #3
 80159fa:	440b      	add	r3, r1
 80159fc:	3308      	adds	r3, #8
 80159fe:	687a      	ldr	r2, [r7, #4]
 8015a00:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015a02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3728      	adds	r7, #40	; 0x28
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
 8015a0e:	bf00      	nop
 8015a10:	20004bb8 	.word	0x20004bb8
 8015a14:	0801becc 	.word	0x0801becc
 8015a18:	0801bf04 	.word	0x0801bf04
 8015a1c:	0801bf44 	.word	0x0801bf44
 8015a20:	0801bf6c 	.word	0x0801bf6c
 8015a24:	0801bf84 	.word	0x0801bf84
 8015a28:	0801bf98 	.word	0x0801bf98

08015a2c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b088      	sub	sp, #32
 8015a30:	af02      	add	r7, sp, #8
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	60b9      	str	r1, [r7, #8]
 8015a36:	607a      	str	r2, [r7, #4]
 8015a38:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015a40:	2b06      	cmp	r3, #6
 8015a42:	d006      	beq.n	8015a52 <etharp_update_arp_entry+0x26>
 8015a44:	4b48      	ldr	r3, [pc, #288]	; (8015b68 <etharp_update_arp_entry+0x13c>)
 8015a46:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015a4a:	4948      	ldr	r1, [pc, #288]	; (8015b6c <etharp_update_arp_entry+0x140>)
 8015a4c:	4848      	ldr	r0, [pc, #288]	; (8015b70 <etharp_update_arp_entry+0x144>)
 8015a4e:	f002 fbad 	bl	80181ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d012      	beq.n	8015a7e <etharp_update_arp_entry+0x52>
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d00e      	beq.n	8015a7e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	68f9      	ldr	r1, [r7, #12]
 8015a66:	4618      	mov	r0, r3
 8015a68:	f001 f8fe 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 8015a6c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d105      	bne.n	8015a7e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015a7a:	2be0      	cmp	r3, #224	; 0xe0
 8015a7c:	d102      	bne.n	8015a84 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015a7e:	f06f 030f 	mvn.w	r3, #15
 8015a82:	e06c      	b.n	8015b5e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015a84:	78fb      	ldrb	r3, [r7, #3]
 8015a86:	68fa      	ldr	r2, [r7, #12]
 8015a88:	4619      	mov	r1, r3
 8015a8a:	68b8      	ldr	r0, [r7, #8]
 8015a8c:	f7ff fe56 	bl	801573c <etharp_find_entry>
 8015a90:	4603      	mov	r3, r0
 8015a92:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015a94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	da02      	bge.n	8015aa2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015a9c:	8afb      	ldrh	r3, [r7, #22]
 8015a9e:	b25b      	sxtb	r3, r3
 8015aa0:	e05d      	b.n	8015b5e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015aa2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015aa6:	4933      	ldr	r1, [pc, #204]	; (8015b74 <etharp_update_arp_entry+0x148>)
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	005b      	lsls	r3, r3, #1
 8015aac:	4413      	add	r3, r2
 8015aae:	00db      	lsls	r3, r3, #3
 8015ab0:	440b      	add	r3, r1
 8015ab2:	3314      	adds	r3, #20
 8015ab4:	2202      	movs	r2, #2
 8015ab6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015ab8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015abc:	492d      	ldr	r1, [pc, #180]	; (8015b74 <etharp_update_arp_entry+0x148>)
 8015abe:	4613      	mov	r3, r2
 8015ac0:	005b      	lsls	r3, r3, #1
 8015ac2:	4413      	add	r3, r2
 8015ac4:	00db      	lsls	r3, r3, #3
 8015ac6:	440b      	add	r3, r1
 8015ac8:	3308      	adds	r3, #8
 8015aca:	68fa      	ldr	r2, [r7, #12]
 8015acc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015ace:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ad2:	4613      	mov	r3, r2
 8015ad4:	005b      	lsls	r3, r3, #1
 8015ad6:	4413      	add	r3, r2
 8015ad8:	00db      	lsls	r3, r3, #3
 8015ada:	3308      	adds	r3, #8
 8015adc:	4a25      	ldr	r2, [pc, #148]	; (8015b74 <etharp_update_arp_entry+0x148>)
 8015ade:	4413      	add	r3, r2
 8015ae0:	3304      	adds	r3, #4
 8015ae2:	2206      	movs	r2, #6
 8015ae4:	6879      	ldr	r1, [r7, #4]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f002 faef 	bl	80180ca <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015aec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015af0:	4920      	ldr	r1, [pc, #128]	; (8015b74 <etharp_update_arp_entry+0x148>)
 8015af2:	4613      	mov	r3, r2
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	4413      	add	r3, r2
 8015af8:	00db      	lsls	r3, r3, #3
 8015afa:	440b      	add	r3, r1
 8015afc:	3312      	adds	r3, #18
 8015afe:	2200      	movs	r2, #0
 8015b00:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015b02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b06:	491b      	ldr	r1, [pc, #108]	; (8015b74 <etharp_update_arp_entry+0x148>)
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	440b      	add	r3, r1
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d021      	beq.n	8015b5c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015b18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b1c:	4915      	ldr	r1, [pc, #84]	; (8015b74 <etharp_update_arp_entry+0x148>)
 8015b1e:	4613      	mov	r3, r2
 8015b20:	005b      	lsls	r3, r3, #1
 8015b22:	4413      	add	r3, r2
 8015b24:	00db      	lsls	r3, r3, #3
 8015b26:	440b      	add	r3, r1
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015b2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b30:	4910      	ldr	r1, [pc, #64]	; (8015b74 <etharp_update_arp_entry+0x148>)
 8015b32:	4613      	mov	r3, r2
 8015b34:	005b      	lsls	r3, r3, #1
 8015b36:	4413      	add	r3, r2
 8015b38:	00db      	lsls	r3, r3, #3
 8015b3a:	440b      	add	r3, r1
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6939      	ldr	r1, [r7, #16]
 8015b50:	68f8      	ldr	r0, [r7, #12]
 8015b52:	f001 ff91 	bl	8017a78 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015b56:	6938      	ldr	r0, [r7, #16]
 8015b58:	f7f8 fd80 	bl	800e65c <pbuf_free>
  }
  return ERR_OK;
 8015b5c:	2300      	movs	r3, #0
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3718      	adds	r7, #24
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}
 8015b66:	bf00      	nop
 8015b68:	0801becc 	.word	0x0801becc
 8015b6c:	0801bfc4 	.word	0x0801bfc4
 8015b70:	0801bf44 	.word	0x0801bf44
 8015b74:	20004bb8 	.word	0x20004bb8

08015b78 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b80:	2300      	movs	r3, #0
 8015b82:	60fb      	str	r3, [r7, #12]
 8015b84:	e01e      	b.n	8015bc4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015b86:	4913      	ldr	r1, [pc, #76]	; (8015bd4 <etharp_cleanup_netif+0x5c>)
 8015b88:	68fa      	ldr	r2, [r7, #12]
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	3314      	adds	r3, #20
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015b9a:	7afb      	ldrb	r3, [r7, #11]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d00e      	beq.n	8015bbe <etharp_cleanup_netif+0x46>
 8015ba0:	490c      	ldr	r1, [pc, #48]	; (8015bd4 <etharp_cleanup_netif+0x5c>)
 8015ba2:	68fa      	ldr	r2, [r7, #12]
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	4413      	add	r3, r2
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	440b      	add	r3, r1
 8015bae:	3308      	adds	r3, #8
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	687a      	ldr	r2, [r7, #4]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d102      	bne.n	8015bbe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015bb8:	68f8      	ldr	r0, [r7, #12]
 8015bba:	f7ff fce5 	bl	8015588 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	3301      	adds	r3, #1
 8015bc2:	60fb      	str	r3, [r7, #12]
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	2b09      	cmp	r3, #9
 8015bc8:	dddd      	ble.n	8015b86 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015bca:	bf00      	nop
 8015bcc:	bf00      	nop
 8015bce:	3710      	adds	r7, #16
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	20004bb8 	.word	0x20004bb8

08015bd8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015bd8:	b5b0      	push	{r4, r5, r7, lr}
 8015bda:	b08a      	sub	sp, #40	; 0x28
 8015bdc:	af04      	add	r7, sp, #16
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d107      	bne.n	8015bf8 <etharp_input+0x20>
 8015be8:	4b3d      	ldr	r3, [pc, #244]	; (8015ce0 <etharp_input+0x108>)
 8015bea:	f240 228a 	movw	r2, #650	; 0x28a
 8015bee:	493d      	ldr	r1, [pc, #244]	; (8015ce4 <etharp_input+0x10c>)
 8015bf0:	483d      	ldr	r0, [pc, #244]	; (8015ce8 <etharp_input+0x110>)
 8015bf2:	f002 fadb 	bl	80181ac <iprintf>
 8015bf6:	e06f      	b.n	8015cd8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	685b      	ldr	r3, [r3, #4]
 8015bfc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	881b      	ldrh	r3, [r3, #0]
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c08:	d10c      	bne.n	8015c24 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015c0e:	2b06      	cmp	r3, #6
 8015c10:	d108      	bne.n	8015c24 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c16:	2b04      	cmp	r3, #4
 8015c18:	d104      	bne.n	8015c24 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	885b      	ldrh	r3, [r3, #2]
 8015c1e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015c20:	2b08      	cmp	r3, #8
 8015c22:	d003      	beq.n	8015c2c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f7f8 fd19 	bl	800e65c <pbuf_free>
    return;
 8015c2a:	e055      	b.n	8015cd8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	330e      	adds	r3, #14
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	3318      	adds	r3, #24
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	3304      	adds	r3, #4
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d102      	bne.n	8015c4c <etharp_input+0x74>
    for_us = 0;
 8015c46:	2300      	movs	r3, #0
 8015c48:	75fb      	strb	r3, [r7, #23]
 8015c4a:	e009      	b.n	8015c60 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015c4c:	68ba      	ldr	r2, [r7, #8]
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	3304      	adds	r3, #4
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	429a      	cmp	r2, r3
 8015c56:	bf0c      	ite	eq
 8015c58:	2301      	moveq	r3, #1
 8015c5a:	2300      	movne	r3, #0
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	f103 0208 	add.w	r2, r3, #8
 8015c66:	7dfb      	ldrb	r3, [r7, #23]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d001      	beq.n	8015c70 <etharp_input+0x98>
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	e000      	b.n	8015c72 <etharp_input+0x9a>
 8015c70:	2302      	movs	r3, #2
 8015c72:	f107 010c 	add.w	r1, r7, #12
 8015c76:	6838      	ldr	r0, [r7, #0]
 8015c78:	f7ff fed8 	bl	8015a2c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	88db      	ldrh	r3, [r3, #6]
 8015c80:	b29b      	uxth	r3, r3
 8015c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c86:	d003      	beq.n	8015c90 <etharp_input+0xb8>
 8015c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c8c:	d01e      	beq.n	8015ccc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015c8e:	e020      	b.n	8015cd2 <etharp_input+0xfa>
      if (for_us) {
 8015c90:	7dfb      	ldrb	r3, [r7, #23]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d01c      	beq.n	8015cd0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015cac:	693a      	ldr	r2, [r7, #16]
 8015cae:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015cb0:	2102      	movs	r1, #2
 8015cb2:	9103      	str	r1, [sp, #12]
 8015cb4:	f107 010c 	add.w	r1, r7, #12
 8015cb8:	9102      	str	r1, [sp, #8]
 8015cba:	9201      	str	r2, [sp, #4]
 8015cbc:	9300      	str	r3, [sp, #0]
 8015cbe:	462b      	mov	r3, r5
 8015cc0:	4622      	mov	r2, r4
 8015cc2:	4601      	mov	r1, r0
 8015cc4:	6838      	ldr	r0, [r7, #0]
 8015cc6:	f000 faeb 	bl	80162a0 <etharp_raw>
      break;
 8015cca:	e001      	b.n	8015cd0 <etharp_input+0xf8>
      break;
 8015ccc:	bf00      	nop
 8015cce:	e000      	b.n	8015cd2 <etharp_input+0xfa>
      break;
 8015cd0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f7f8 fcc2 	bl	800e65c <pbuf_free>
}
 8015cd8:	3718      	adds	r7, #24
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	0801becc 	.word	0x0801becc
 8015ce4:	0801c01c 	.word	0x0801c01c
 8015ce8:	0801bf44 	.word	0x0801bf44

08015cec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b086      	sub	sp, #24
 8015cf0:	af02      	add	r7, sp, #8
 8015cf2:	60f8      	str	r0, [r7, #12]
 8015cf4:	60b9      	str	r1, [r7, #8]
 8015cf6:	4613      	mov	r3, r2
 8015cf8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015cfa:	79fa      	ldrb	r2, [r7, #7]
 8015cfc:	4944      	ldr	r1, [pc, #272]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015cfe:	4613      	mov	r3, r2
 8015d00:	005b      	lsls	r3, r3, #1
 8015d02:	4413      	add	r3, r2
 8015d04:	00db      	lsls	r3, r3, #3
 8015d06:	440b      	add	r3, r1
 8015d08:	3314      	adds	r3, #20
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	2b01      	cmp	r3, #1
 8015d0e:	d806      	bhi.n	8015d1e <etharp_output_to_arp_index+0x32>
 8015d10:	4b40      	ldr	r3, [pc, #256]	; (8015e14 <etharp_output_to_arp_index+0x128>)
 8015d12:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015d16:	4940      	ldr	r1, [pc, #256]	; (8015e18 <etharp_output_to_arp_index+0x12c>)
 8015d18:	4840      	ldr	r0, [pc, #256]	; (8015e1c <etharp_output_to_arp_index+0x130>)
 8015d1a:	f002 fa47 	bl	80181ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015d1e:	79fa      	ldrb	r2, [r7, #7]
 8015d20:	493b      	ldr	r1, [pc, #236]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015d22:	4613      	mov	r3, r2
 8015d24:	005b      	lsls	r3, r3, #1
 8015d26:	4413      	add	r3, r2
 8015d28:	00db      	lsls	r3, r3, #3
 8015d2a:	440b      	add	r3, r1
 8015d2c:	3314      	adds	r3, #20
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	2b02      	cmp	r3, #2
 8015d32:	d153      	bne.n	8015ddc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015d34:	79fa      	ldrb	r2, [r7, #7]
 8015d36:	4936      	ldr	r1, [pc, #216]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015d38:	4613      	mov	r3, r2
 8015d3a:	005b      	lsls	r3, r3, #1
 8015d3c:	4413      	add	r3, r2
 8015d3e:	00db      	lsls	r3, r3, #3
 8015d40:	440b      	add	r3, r1
 8015d42:	3312      	adds	r3, #18
 8015d44:	881b      	ldrh	r3, [r3, #0]
 8015d46:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015d4a:	d919      	bls.n	8015d80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015d4c:	79fa      	ldrb	r2, [r7, #7]
 8015d4e:	4613      	mov	r3, r2
 8015d50:	005b      	lsls	r3, r3, #1
 8015d52:	4413      	add	r3, r2
 8015d54:	00db      	lsls	r3, r3, #3
 8015d56:	4a2e      	ldr	r2, [pc, #184]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015d58:	4413      	add	r3, r2
 8015d5a:	3304      	adds	r3, #4
 8015d5c:	4619      	mov	r1, r3
 8015d5e:	68f8      	ldr	r0, [r7, #12]
 8015d60:	f000 fb4c 	bl	80163fc <etharp_request>
 8015d64:	4603      	mov	r3, r0
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d138      	bne.n	8015ddc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015d6a:	79fa      	ldrb	r2, [r7, #7]
 8015d6c:	4928      	ldr	r1, [pc, #160]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015d6e:	4613      	mov	r3, r2
 8015d70:	005b      	lsls	r3, r3, #1
 8015d72:	4413      	add	r3, r2
 8015d74:	00db      	lsls	r3, r3, #3
 8015d76:	440b      	add	r3, r1
 8015d78:	3314      	adds	r3, #20
 8015d7a:	2203      	movs	r2, #3
 8015d7c:	701a      	strb	r2, [r3, #0]
 8015d7e:	e02d      	b.n	8015ddc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015d80:	79fa      	ldrb	r2, [r7, #7]
 8015d82:	4923      	ldr	r1, [pc, #140]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015d84:	4613      	mov	r3, r2
 8015d86:	005b      	lsls	r3, r3, #1
 8015d88:	4413      	add	r3, r2
 8015d8a:	00db      	lsls	r3, r3, #3
 8015d8c:	440b      	add	r3, r1
 8015d8e:	3312      	adds	r3, #18
 8015d90:	881b      	ldrh	r3, [r3, #0]
 8015d92:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015d96:	d321      	bcc.n	8015ddc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015d98:	79fa      	ldrb	r2, [r7, #7]
 8015d9a:	4613      	mov	r3, r2
 8015d9c:	005b      	lsls	r3, r3, #1
 8015d9e:	4413      	add	r3, r2
 8015da0:	00db      	lsls	r3, r3, #3
 8015da2:	4a1b      	ldr	r2, [pc, #108]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015da4:	4413      	add	r3, r2
 8015da6:	1d19      	adds	r1, r3, #4
 8015da8:	79fa      	ldrb	r2, [r7, #7]
 8015daa:	4613      	mov	r3, r2
 8015dac:	005b      	lsls	r3, r3, #1
 8015dae:	4413      	add	r3, r2
 8015db0:	00db      	lsls	r3, r3, #3
 8015db2:	3308      	adds	r3, #8
 8015db4:	4a16      	ldr	r2, [pc, #88]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015db6:	4413      	add	r3, r2
 8015db8:	3304      	adds	r3, #4
 8015dba:	461a      	mov	r2, r3
 8015dbc:	68f8      	ldr	r0, [r7, #12]
 8015dbe:	f000 fafb 	bl	80163b8 <etharp_request_dst>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d109      	bne.n	8015ddc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015dc8:	79fa      	ldrb	r2, [r7, #7]
 8015dca:	4911      	ldr	r1, [pc, #68]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015dcc:	4613      	mov	r3, r2
 8015dce:	005b      	lsls	r3, r3, #1
 8015dd0:	4413      	add	r3, r2
 8015dd2:	00db      	lsls	r3, r3, #3
 8015dd4:	440b      	add	r3, r1
 8015dd6:	3314      	adds	r3, #20
 8015dd8:	2203      	movs	r2, #3
 8015dda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015de2:	79fa      	ldrb	r2, [r7, #7]
 8015de4:	4613      	mov	r3, r2
 8015de6:	005b      	lsls	r3, r3, #1
 8015de8:	4413      	add	r3, r2
 8015dea:	00db      	lsls	r3, r3, #3
 8015dec:	3308      	adds	r3, #8
 8015dee:	4a08      	ldr	r2, [pc, #32]	; (8015e10 <etharp_output_to_arp_index+0x124>)
 8015df0:	4413      	add	r3, r2
 8015df2:	3304      	adds	r3, #4
 8015df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015df8:	9200      	str	r2, [sp, #0]
 8015dfa:	460a      	mov	r2, r1
 8015dfc:	68b9      	ldr	r1, [r7, #8]
 8015dfe:	68f8      	ldr	r0, [r7, #12]
 8015e00:	f001 fe3a 	bl	8017a78 <ethernet_output>
 8015e04:	4603      	mov	r3, r0
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	20004bb8 	.word	0x20004bb8
 8015e14:	0801becc 	.word	0x0801becc
 8015e18:	0801c03c 	.word	0x0801c03c
 8015e1c:	0801bf44 	.word	0x0801bf44

08015e20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b08a      	sub	sp, #40	; 0x28
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d106      	bne.n	8015e44 <etharp_output+0x24>
 8015e36:	4b73      	ldr	r3, [pc, #460]	; (8016004 <etharp_output+0x1e4>)
 8015e38:	f240 321e 	movw	r2, #798	; 0x31e
 8015e3c:	4972      	ldr	r1, [pc, #456]	; (8016008 <etharp_output+0x1e8>)
 8015e3e:	4873      	ldr	r0, [pc, #460]	; (801600c <etharp_output+0x1ec>)
 8015e40:	f002 f9b4 	bl	80181ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d106      	bne.n	8015e58 <etharp_output+0x38>
 8015e4a:	4b6e      	ldr	r3, [pc, #440]	; (8016004 <etharp_output+0x1e4>)
 8015e4c:	f240 321f 	movw	r2, #799	; 0x31f
 8015e50:	496f      	ldr	r1, [pc, #444]	; (8016010 <etharp_output+0x1f0>)
 8015e52:	486e      	ldr	r0, [pc, #440]	; (801600c <etharp_output+0x1ec>)
 8015e54:	f002 f9aa 	bl	80181ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d106      	bne.n	8015e6c <etharp_output+0x4c>
 8015e5e:	4b69      	ldr	r3, [pc, #420]	; (8016004 <etharp_output+0x1e4>)
 8015e60:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015e64:	496b      	ldr	r1, [pc, #428]	; (8016014 <etharp_output+0x1f4>)
 8015e66:	4869      	ldr	r0, [pc, #420]	; (801600c <etharp_output+0x1ec>)
 8015e68:	f002 f9a0 	bl	80181ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	68f9      	ldr	r1, [r7, #12]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f000 fef8 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d002      	beq.n	8015e84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015e7e:	4b66      	ldr	r3, [pc, #408]	; (8016018 <etharp_output+0x1f8>)
 8015e80:	61fb      	str	r3, [r7, #28]
 8015e82:	e0af      	b.n	8015fe4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e8c:	2be0      	cmp	r3, #224	; 0xe0
 8015e8e:	d118      	bne.n	8015ec2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015e90:	2301      	movs	r3, #1
 8015e92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015e94:	2300      	movs	r3, #0
 8015e96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015e98:	235e      	movs	r3, #94	; 0x5e
 8015e9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	3302      	adds	r3, #2
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	3303      	adds	r3, #3
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015eba:	f107 0310 	add.w	r3, r7, #16
 8015ebe:	61fb      	str	r3, [r7, #28]
 8015ec0:	e090      	b.n	8015fe4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681a      	ldr	r2, [r3, #0]
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	3304      	adds	r3, #4
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	405a      	eors	r2, r3
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	3308      	adds	r3, #8
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	4013      	ands	r3, r2
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d012      	beq.n	8015f00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015ee0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d00b      	beq.n	8015f00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	330c      	adds	r3, #12
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d003      	beq.n	8015efa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	330c      	adds	r3, #12
 8015ef6:	61bb      	str	r3, [r7, #24]
 8015ef8:	e002      	b.n	8015f00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015efa:	f06f 0303 	mvn.w	r3, #3
 8015efe:	e07d      	b.n	8015ffc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015f00:	4b46      	ldr	r3, [pc, #280]	; (801601c <etharp_output+0x1fc>)
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	4619      	mov	r1, r3
 8015f06:	4a46      	ldr	r2, [pc, #280]	; (8016020 <etharp_output+0x200>)
 8015f08:	460b      	mov	r3, r1
 8015f0a:	005b      	lsls	r3, r3, #1
 8015f0c:	440b      	add	r3, r1
 8015f0e:	00db      	lsls	r3, r3, #3
 8015f10:	4413      	add	r3, r2
 8015f12:	3314      	adds	r3, #20
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	2b01      	cmp	r3, #1
 8015f18:	d925      	bls.n	8015f66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015f1a:	4b40      	ldr	r3, [pc, #256]	; (801601c <etharp_output+0x1fc>)
 8015f1c:	781b      	ldrb	r3, [r3, #0]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	4a3f      	ldr	r2, [pc, #252]	; (8016020 <etharp_output+0x200>)
 8015f22:	460b      	mov	r3, r1
 8015f24:	005b      	lsls	r3, r3, #1
 8015f26:	440b      	add	r3, r1
 8015f28:	00db      	lsls	r3, r3, #3
 8015f2a:	4413      	add	r3, r2
 8015f2c:	3308      	adds	r3, #8
 8015f2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015f30:	68fa      	ldr	r2, [r7, #12]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d117      	bne.n	8015f66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015f36:	69bb      	ldr	r3, [r7, #24]
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	4b38      	ldr	r3, [pc, #224]	; (801601c <etharp_output+0x1fc>)
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	4618      	mov	r0, r3
 8015f40:	4937      	ldr	r1, [pc, #220]	; (8016020 <etharp_output+0x200>)
 8015f42:	4603      	mov	r3, r0
 8015f44:	005b      	lsls	r3, r3, #1
 8015f46:	4403      	add	r3, r0
 8015f48:	00db      	lsls	r3, r3, #3
 8015f4a:	440b      	add	r3, r1
 8015f4c:	3304      	adds	r3, #4
 8015f4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d108      	bne.n	8015f66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015f54:	4b31      	ldr	r3, [pc, #196]	; (801601c <etharp_output+0x1fc>)
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	461a      	mov	r2, r3
 8015f5a:	68b9      	ldr	r1, [r7, #8]
 8015f5c:	68f8      	ldr	r0, [r7, #12]
 8015f5e:	f7ff fec5 	bl	8015cec <etharp_output_to_arp_index>
 8015f62:	4603      	mov	r3, r0
 8015f64:	e04a      	b.n	8015ffc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015f66:	2300      	movs	r3, #0
 8015f68:	75fb      	strb	r3, [r7, #23]
 8015f6a:	e031      	b.n	8015fd0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015f6c:	7dfa      	ldrb	r2, [r7, #23]
 8015f6e:	492c      	ldr	r1, [pc, #176]	; (8016020 <etharp_output+0x200>)
 8015f70:	4613      	mov	r3, r2
 8015f72:	005b      	lsls	r3, r3, #1
 8015f74:	4413      	add	r3, r2
 8015f76:	00db      	lsls	r3, r3, #3
 8015f78:	440b      	add	r3, r1
 8015f7a:	3314      	adds	r3, #20
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	2b01      	cmp	r3, #1
 8015f80:	d923      	bls.n	8015fca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015f82:	7dfa      	ldrb	r2, [r7, #23]
 8015f84:	4926      	ldr	r1, [pc, #152]	; (8016020 <etharp_output+0x200>)
 8015f86:	4613      	mov	r3, r2
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	4413      	add	r3, r2
 8015f8c:	00db      	lsls	r3, r3, #3
 8015f8e:	440b      	add	r3, r1
 8015f90:	3308      	adds	r3, #8
 8015f92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015f94:	68fa      	ldr	r2, [r7, #12]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d117      	bne.n	8015fca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015f9a:	69bb      	ldr	r3, [r7, #24]
 8015f9c:	6819      	ldr	r1, [r3, #0]
 8015f9e:	7dfa      	ldrb	r2, [r7, #23]
 8015fa0:	481f      	ldr	r0, [pc, #124]	; (8016020 <etharp_output+0x200>)
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	4413      	add	r3, r2
 8015fa8:	00db      	lsls	r3, r3, #3
 8015faa:	4403      	add	r3, r0
 8015fac:	3304      	adds	r3, #4
 8015fae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015fb0:	4299      	cmp	r1, r3
 8015fb2:	d10a      	bne.n	8015fca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015fb4:	4a19      	ldr	r2, [pc, #100]	; (801601c <etharp_output+0x1fc>)
 8015fb6:	7dfb      	ldrb	r3, [r7, #23]
 8015fb8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015fba:	7dfb      	ldrb	r3, [r7, #23]
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	68b9      	ldr	r1, [r7, #8]
 8015fc0:	68f8      	ldr	r0, [r7, #12]
 8015fc2:	f7ff fe93 	bl	8015cec <etharp_output_to_arp_index>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	e018      	b.n	8015ffc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015fca:	7dfb      	ldrb	r3, [r7, #23]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	75fb      	strb	r3, [r7, #23]
 8015fd0:	7dfb      	ldrb	r3, [r7, #23]
 8015fd2:	2b09      	cmp	r3, #9
 8015fd4:	d9ca      	bls.n	8015f6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015fd6:	68ba      	ldr	r2, [r7, #8]
 8015fd8:	69b9      	ldr	r1, [r7, #24]
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f000 f822 	bl	8016024 <etharp_query>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	e00b      	b.n	8015ffc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	69fb      	ldr	r3, [r7, #28]
 8015ff2:	68b9      	ldr	r1, [r7, #8]
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	f001 fd3f 	bl	8017a78 <ethernet_output>
 8015ffa:	4603      	mov	r3, r0
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3720      	adds	r7, #32
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}
 8016004:	0801becc 	.word	0x0801becc
 8016008:	0801c01c 	.word	0x0801c01c
 801600c:	0801bf44 	.word	0x0801bf44
 8016010:	0801c06c 	.word	0x0801c06c
 8016014:	0801c00c 	.word	0x0801c00c
 8016018:	0801c6e4 	.word	0x0801c6e4
 801601c:	20004ca8 	.word	0x20004ca8
 8016020:	20004bb8 	.word	0x20004bb8

08016024 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b08c      	sub	sp, #48	; 0x30
 8016028:	af02      	add	r7, sp, #8
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	3326      	adds	r3, #38	; 0x26
 8016034:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016036:	23ff      	movs	r3, #255	; 0xff
 8016038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801603c:	2300      	movs	r3, #0
 801603e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	68f9      	ldr	r1, [r7, #12]
 8016046:	4618      	mov	r0, r3
 8016048:	f000 fe0e 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 801604c:	4603      	mov	r3, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d10c      	bne.n	801606c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801605a:	2be0      	cmp	r3, #224	; 0xe0
 801605c:	d006      	beq.n	801606c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d003      	beq.n	801606c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016064:	68bb      	ldr	r3, [r7, #8]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d102      	bne.n	8016072 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801606c:	f06f 030f 	mvn.w	r3, #15
 8016070:	e101      	b.n	8016276 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016072:	68fa      	ldr	r2, [r7, #12]
 8016074:	2101      	movs	r1, #1
 8016076:	68b8      	ldr	r0, [r7, #8]
 8016078:	f7ff fb60 	bl	801573c <etharp_find_entry>
 801607c:	4603      	mov	r3, r0
 801607e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016080:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016084:	2b00      	cmp	r3, #0
 8016086:	da02      	bge.n	801608e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016088:	8a7b      	ldrh	r3, [r7, #18]
 801608a:	b25b      	sxtb	r3, r3
 801608c:	e0f3      	b.n	8016276 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801608e:	8a7b      	ldrh	r3, [r7, #18]
 8016090:	2b7e      	cmp	r3, #126	; 0x7e
 8016092:	d906      	bls.n	80160a2 <etharp_query+0x7e>
 8016094:	4b7a      	ldr	r3, [pc, #488]	; (8016280 <etharp_query+0x25c>)
 8016096:	f240 32c1 	movw	r2, #961	; 0x3c1
 801609a:	497a      	ldr	r1, [pc, #488]	; (8016284 <etharp_query+0x260>)
 801609c:	487a      	ldr	r0, [pc, #488]	; (8016288 <etharp_query+0x264>)
 801609e:	f002 f885 	bl	80181ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 80160a2:	8a7b      	ldrh	r3, [r7, #18]
 80160a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80160a6:	7c7a      	ldrb	r2, [r7, #17]
 80160a8:	4978      	ldr	r1, [pc, #480]	; (801628c <etharp_query+0x268>)
 80160aa:	4613      	mov	r3, r2
 80160ac:	005b      	lsls	r3, r3, #1
 80160ae:	4413      	add	r3, r2
 80160b0:	00db      	lsls	r3, r3, #3
 80160b2:	440b      	add	r3, r1
 80160b4:	3314      	adds	r3, #20
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d115      	bne.n	80160e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80160bc:	2301      	movs	r3, #1
 80160be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80160c0:	7c7a      	ldrb	r2, [r7, #17]
 80160c2:	4972      	ldr	r1, [pc, #456]	; (801628c <etharp_query+0x268>)
 80160c4:	4613      	mov	r3, r2
 80160c6:	005b      	lsls	r3, r3, #1
 80160c8:	4413      	add	r3, r2
 80160ca:	00db      	lsls	r3, r3, #3
 80160cc:	440b      	add	r3, r1
 80160ce:	3314      	adds	r3, #20
 80160d0:	2201      	movs	r2, #1
 80160d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80160d4:	7c7a      	ldrb	r2, [r7, #17]
 80160d6:	496d      	ldr	r1, [pc, #436]	; (801628c <etharp_query+0x268>)
 80160d8:	4613      	mov	r3, r2
 80160da:	005b      	lsls	r3, r3, #1
 80160dc:	4413      	add	r3, r2
 80160de:	00db      	lsls	r3, r3, #3
 80160e0:	440b      	add	r3, r1
 80160e2:	3308      	adds	r3, #8
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80160e8:	7c7a      	ldrb	r2, [r7, #17]
 80160ea:	4968      	ldr	r1, [pc, #416]	; (801628c <etharp_query+0x268>)
 80160ec:	4613      	mov	r3, r2
 80160ee:	005b      	lsls	r3, r3, #1
 80160f0:	4413      	add	r3, r2
 80160f2:	00db      	lsls	r3, r3, #3
 80160f4:	440b      	add	r3, r1
 80160f6:	3314      	adds	r3, #20
 80160f8:	781b      	ldrb	r3, [r3, #0]
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	d011      	beq.n	8016122 <etharp_query+0xfe>
 80160fe:	7c7a      	ldrb	r2, [r7, #17]
 8016100:	4962      	ldr	r1, [pc, #392]	; (801628c <etharp_query+0x268>)
 8016102:	4613      	mov	r3, r2
 8016104:	005b      	lsls	r3, r3, #1
 8016106:	4413      	add	r3, r2
 8016108:	00db      	lsls	r3, r3, #3
 801610a:	440b      	add	r3, r1
 801610c:	3314      	adds	r3, #20
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	2b01      	cmp	r3, #1
 8016112:	d806      	bhi.n	8016122 <etharp_query+0xfe>
 8016114:	4b5a      	ldr	r3, [pc, #360]	; (8016280 <etharp_query+0x25c>)
 8016116:	f240 32cd 	movw	r2, #973	; 0x3cd
 801611a:	495d      	ldr	r1, [pc, #372]	; (8016290 <etharp_query+0x26c>)
 801611c:	485a      	ldr	r0, [pc, #360]	; (8016288 <etharp_query+0x264>)
 801611e:	f002 f845 	bl	80181ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016122:	6a3b      	ldr	r3, [r7, #32]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d102      	bne.n	801612e <etharp_query+0x10a>
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d10c      	bne.n	8016148 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801612e:	68b9      	ldr	r1, [r7, #8]
 8016130:	68f8      	ldr	r0, [r7, #12]
 8016132:	f000 f963 	bl	80163fc <etharp_request>
 8016136:	4603      	mov	r3, r0
 8016138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d102      	bne.n	8016148 <etharp_query+0x124>
      return result;
 8016142:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016146:	e096      	b.n	8016276 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d106      	bne.n	801615c <etharp_query+0x138>
 801614e:	4b4c      	ldr	r3, [pc, #304]	; (8016280 <etharp_query+0x25c>)
 8016150:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016154:	494f      	ldr	r1, [pc, #316]	; (8016294 <etharp_query+0x270>)
 8016156:	484c      	ldr	r0, [pc, #304]	; (8016288 <etharp_query+0x264>)
 8016158:	f002 f828 	bl	80181ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801615c:	7c7a      	ldrb	r2, [r7, #17]
 801615e:	494b      	ldr	r1, [pc, #300]	; (801628c <etharp_query+0x268>)
 8016160:	4613      	mov	r3, r2
 8016162:	005b      	lsls	r3, r3, #1
 8016164:	4413      	add	r3, r2
 8016166:	00db      	lsls	r3, r3, #3
 8016168:	440b      	add	r3, r1
 801616a:	3314      	adds	r3, #20
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	2b01      	cmp	r3, #1
 8016170:	d917      	bls.n	80161a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016172:	4a49      	ldr	r2, [pc, #292]	; (8016298 <etharp_query+0x274>)
 8016174:	7c7b      	ldrb	r3, [r7, #17]
 8016176:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016178:	7c7a      	ldrb	r2, [r7, #17]
 801617a:	4613      	mov	r3, r2
 801617c:	005b      	lsls	r3, r3, #1
 801617e:	4413      	add	r3, r2
 8016180:	00db      	lsls	r3, r3, #3
 8016182:	3308      	adds	r3, #8
 8016184:	4a41      	ldr	r2, [pc, #260]	; (801628c <etharp_query+0x268>)
 8016186:	4413      	add	r3, r2
 8016188:	3304      	adds	r3, #4
 801618a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801618e:	9200      	str	r2, [sp, #0]
 8016190:	697a      	ldr	r2, [r7, #20]
 8016192:	6879      	ldr	r1, [r7, #4]
 8016194:	68f8      	ldr	r0, [r7, #12]
 8016196:	f001 fc6f 	bl	8017a78 <ethernet_output>
 801619a:	4603      	mov	r3, r0
 801619c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161a0:	e067      	b.n	8016272 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80161a2:	7c7a      	ldrb	r2, [r7, #17]
 80161a4:	4939      	ldr	r1, [pc, #228]	; (801628c <etharp_query+0x268>)
 80161a6:	4613      	mov	r3, r2
 80161a8:	005b      	lsls	r3, r3, #1
 80161aa:	4413      	add	r3, r2
 80161ac:	00db      	lsls	r3, r3, #3
 80161ae:	440b      	add	r3, r1
 80161b0:	3314      	adds	r3, #20
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d15c      	bne.n	8016272 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80161b8:	2300      	movs	r3, #0
 80161ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80161c0:	e01c      	b.n	80161fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80161c2:	69fb      	ldr	r3, [r7, #28]
 80161c4:	895a      	ldrh	r2, [r3, #10]
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	891b      	ldrh	r3, [r3, #8]
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d10a      	bne.n	80161e4 <etharp_query+0x1c0>
 80161ce:	69fb      	ldr	r3, [r7, #28]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d006      	beq.n	80161e4 <etharp_query+0x1c0>
 80161d6:	4b2a      	ldr	r3, [pc, #168]	; (8016280 <etharp_query+0x25c>)
 80161d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80161dc:	492f      	ldr	r1, [pc, #188]	; (801629c <etharp_query+0x278>)
 80161de:	482a      	ldr	r0, [pc, #168]	; (8016288 <etharp_query+0x264>)
 80161e0:	f001 ffe4 	bl	80181ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80161e4:	69fb      	ldr	r3, [r7, #28]
 80161e6:	7b1b      	ldrb	r3, [r3, #12]
 80161e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d002      	beq.n	80161f6 <etharp_query+0x1d2>
        copy_needed = 1;
 80161f0:	2301      	movs	r3, #1
 80161f2:	61bb      	str	r3, [r7, #24]
        break;
 80161f4:	e005      	b.n	8016202 <etharp_query+0x1de>
      }
      p = p->next;
 80161f6:	69fb      	ldr	r3, [r7, #28]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d1df      	bne.n	80161c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016202:	69bb      	ldr	r3, [r7, #24]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d007      	beq.n	8016218 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801620e:	200e      	movs	r0, #14
 8016210:	f7f8 fc8c 	bl	800eb2c <pbuf_clone>
 8016214:	61f8      	str	r0, [r7, #28]
 8016216:	e004      	b.n	8016222 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801621c:	69f8      	ldr	r0, [r7, #28]
 801621e:	f7f8 fac3 	bl	800e7a8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016222:	69fb      	ldr	r3, [r7, #28]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d021      	beq.n	801626c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016228:	7c7a      	ldrb	r2, [r7, #17]
 801622a:	4918      	ldr	r1, [pc, #96]	; (801628c <etharp_query+0x268>)
 801622c:	4613      	mov	r3, r2
 801622e:	005b      	lsls	r3, r3, #1
 8016230:	4413      	add	r3, r2
 8016232:	00db      	lsls	r3, r3, #3
 8016234:	440b      	add	r3, r1
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d00a      	beq.n	8016252 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801623c:	7c7a      	ldrb	r2, [r7, #17]
 801623e:	4913      	ldr	r1, [pc, #76]	; (801628c <etharp_query+0x268>)
 8016240:	4613      	mov	r3, r2
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	4413      	add	r3, r2
 8016246:	00db      	lsls	r3, r3, #3
 8016248:	440b      	add	r3, r1
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	4618      	mov	r0, r3
 801624e:	f7f8 fa05 	bl	800e65c <pbuf_free>
      }
      arp_table[i].q = p;
 8016252:	7c7a      	ldrb	r2, [r7, #17]
 8016254:	490d      	ldr	r1, [pc, #52]	; (801628c <etharp_query+0x268>)
 8016256:	4613      	mov	r3, r2
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4413      	add	r3, r2
 801625c:	00db      	lsls	r3, r3, #3
 801625e:	440b      	add	r3, r1
 8016260:	69fa      	ldr	r2, [r7, #28]
 8016262:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016264:	2300      	movs	r3, #0
 8016266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801626a:	e002      	b.n	8016272 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801626c:	23ff      	movs	r3, #255	; 0xff
 801626e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016272:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016276:	4618      	mov	r0, r3
 8016278:	3728      	adds	r7, #40	; 0x28
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	0801becc 	.word	0x0801becc
 8016284:	0801c078 	.word	0x0801c078
 8016288:	0801bf44 	.word	0x0801bf44
 801628c:	20004bb8 	.word	0x20004bb8
 8016290:	0801c088 	.word	0x0801c088
 8016294:	0801c06c 	.word	0x0801c06c
 8016298:	20004ca8 	.word	0x20004ca8
 801629c:	0801c0b0 	.word	0x0801c0b0

080162a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b08a      	sub	sp, #40	; 0x28
 80162a4:	af02      	add	r7, sp, #8
 80162a6:	60f8      	str	r0, [r7, #12]
 80162a8:	60b9      	str	r1, [r7, #8]
 80162aa:	607a      	str	r2, [r7, #4]
 80162ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80162ae:	2300      	movs	r3, #0
 80162b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d106      	bne.n	80162c6 <etharp_raw+0x26>
 80162b8:	4b3a      	ldr	r3, [pc, #232]	; (80163a4 <etharp_raw+0x104>)
 80162ba:	f240 4257 	movw	r2, #1111	; 0x457
 80162be:	493a      	ldr	r1, [pc, #232]	; (80163a8 <etharp_raw+0x108>)
 80162c0:	483a      	ldr	r0, [pc, #232]	; (80163ac <etharp_raw+0x10c>)
 80162c2:	f001 ff73 	bl	80181ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80162c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162ca:	211c      	movs	r1, #28
 80162cc:	200e      	movs	r0, #14
 80162ce:	f7f7 fee1 	bl	800e094 <pbuf_alloc>
 80162d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80162d4:	69bb      	ldr	r3, [r7, #24]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d102      	bne.n	80162e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80162da:	f04f 33ff 	mov.w	r3, #4294967295
 80162de:	e05d      	b.n	801639c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80162e0:	69bb      	ldr	r3, [r7, #24]
 80162e2:	895b      	ldrh	r3, [r3, #10]
 80162e4:	2b1b      	cmp	r3, #27
 80162e6:	d806      	bhi.n	80162f6 <etharp_raw+0x56>
 80162e8:	4b2e      	ldr	r3, [pc, #184]	; (80163a4 <etharp_raw+0x104>)
 80162ea:	f240 4262 	movw	r2, #1122	; 0x462
 80162ee:	4930      	ldr	r1, [pc, #192]	; (80163b0 <etharp_raw+0x110>)
 80162f0:	482e      	ldr	r0, [pc, #184]	; (80163ac <etharp_raw+0x10c>)
 80162f2:	f001 ff5b 	bl	80181ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80162f6:	69bb      	ldr	r3, [r7, #24]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80162fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80162fe:	4618      	mov	r0, r3
 8016300:	f7f6 fe00 	bl	800cf04 <lwip_htons>
 8016304:	4603      	mov	r3, r0
 8016306:	461a      	mov	r2, r3
 8016308:	697b      	ldr	r3, [r7, #20]
 801630a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016312:	2b06      	cmp	r3, #6
 8016314:	d006      	beq.n	8016324 <etharp_raw+0x84>
 8016316:	4b23      	ldr	r3, [pc, #140]	; (80163a4 <etharp_raw+0x104>)
 8016318:	f240 4269 	movw	r2, #1129	; 0x469
 801631c:	4925      	ldr	r1, [pc, #148]	; (80163b4 <etharp_raw+0x114>)
 801631e:	4823      	ldr	r0, [pc, #140]	; (80163ac <etharp_raw+0x10c>)
 8016320:	f001 ff44 	bl	80181ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	3308      	adds	r3, #8
 8016328:	2206      	movs	r2, #6
 801632a:	6839      	ldr	r1, [r7, #0]
 801632c:	4618      	mov	r0, r3
 801632e:	f001 fecc 	bl	80180ca <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016332:	697b      	ldr	r3, [r7, #20]
 8016334:	3312      	adds	r3, #18
 8016336:	2206      	movs	r2, #6
 8016338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801633a:	4618      	mov	r0, r3
 801633c:	f001 fec5 	bl	80180ca <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	330e      	adds	r3, #14
 8016344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016346:	6812      	ldr	r2, [r2, #0]
 8016348:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	3318      	adds	r3, #24
 801634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016350:	6812      	ldr	r2, [r2, #0]
 8016352:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016354:	697b      	ldr	r3, [r7, #20]
 8016356:	2200      	movs	r2, #0
 8016358:	701a      	strb	r2, [r3, #0]
 801635a:	2200      	movs	r2, #0
 801635c:	f042 0201 	orr.w	r2, r2, #1
 8016360:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	2200      	movs	r2, #0
 8016366:	f042 0208 	orr.w	r2, r2, #8
 801636a:	709a      	strb	r2, [r3, #2]
 801636c:	2200      	movs	r2, #0
 801636e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	2206      	movs	r2, #6
 8016374:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	2204      	movs	r2, #4
 801637a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801637c:	f640 0306 	movw	r3, #2054	; 0x806
 8016380:	9300      	str	r3, [sp, #0]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	68ba      	ldr	r2, [r7, #8]
 8016386:	69b9      	ldr	r1, [r7, #24]
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	f001 fb75 	bl	8017a78 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801638e:	69b8      	ldr	r0, [r7, #24]
 8016390:	f7f8 f964 	bl	800e65c <pbuf_free>
  p = NULL;
 8016394:	2300      	movs	r3, #0
 8016396:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016398:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801639c:	4618      	mov	r0, r3
 801639e:	3720      	adds	r7, #32
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}
 80163a4:	0801becc 	.word	0x0801becc
 80163a8:	0801c01c 	.word	0x0801c01c
 80163ac:	0801bf44 	.word	0x0801bf44
 80163b0:	0801c0cc 	.word	0x0801c0cc
 80163b4:	0801c100 	.word	0x0801c100

080163b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b088      	sub	sp, #32
 80163bc:	af04      	add	r7, sp, #16
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80163d4:	2201      	movs	r2, #1
 80163d6:	9203      	str	r2, [sp, #12]
 80163d8:	68ba      	ldr	r2, [r7, #8]
 80163da:	9202      	str	r2, [sp, #8]
 80163dc:	4a06      	ldr	r2, [pc, #24]	; (80163f8 <etharp_request_dst+0x40>)
 80163de:	9201      	str	r2, [sp, #4]
 80163e0:	9300      	str	r3, [sp, #0]
 80163e2:	4603      	mov	r3, r0
 80163e4:	687a      	ldr	r2, [r7, #4]
 80163e6:	68f8      	ldr	r0, [r7, #12]
 80163e8:	f7ff ff5a 	bl	80162a0 <etharp_raw>
 80163ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3710      	adds	r7, #16
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd80      	pop	{r7, pc}
 80163f6:	bf00      	nop
 80163f8:	0801c6ec 	.word	0x0801c6ec

080163fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b082      	sub	sp, #8
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016406:	4a05      	ldr	r2, [pc, #20]	; (801641c <etharp_request+0x20>)
 8016408:	6839      	ldr	r1, [r7, #0]
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	f7ff ffd4 	bl	80163b8 <etharp_request_dst>
 8016410:	4603      	mov	r3, r0
}
 8016412:	4618      	mov	r0, r3
 8016414:	3708      	adds	r7, #8
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	0801c6e4 	.word	0x0801c6e4

08016420 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b08e      	sub	sp, #56	; 0x38
 8016424:	af04      	add	r7, sp, #16
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801642a:	4b79      	ldr	r3, [pc, #484]	; (8016610 <icmp_input+0x1f0>)
 801642c:	689b      	ldr	r3, [r3, #8]
 801642e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	f003 030f 	and.w	r3, r3, #15
 8016438:	b2db      	uxtb	r3, r3
 801643a:	009b      	lsls	r3, r3, #2
 801643c:	b2db      	uxtb	r3, r3
 801643e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016440:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016442:	2b13      	cmp	r3, #19
 8016444:	f240 80cd 	bls.w	80165e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	895b      	ldrh	r3, [r3, #10]
 801644c:	2b03      	cmp	r3, #3
 801644e:	f240 80ca 	bls.w	80165e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801645c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016460:	2b00      	cmp	r3, #0
 8016462:	f000 80b7 	beq.w	80165d4 <icmp_input+0x1b4>
 8016466:	2b08      	cmp	r3, #8
 8016468:	f040 80b7 	bne.w	80165da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801646c:	4b69      	ldr	r3, [pc, #420]	; (8016614 <icmp_input+0x1f4>)
 801646e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016470:	4b67      	ldr	r3, [pc, #412]	; (8016610 <icmp_input+0x1f0>)
 8016472:	695b      	ldr	r3, [r3, #20]
 8016474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016478:	2be0      	cmp	r3, #224	; 0xe0
 801647a:	f000 80bb 	beq.w	80165f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801647e:	4b64      	ldr	r3, [pc, #400]	; (8016610 <icmp_input+0x1f0>)
 8016480:	695b      	ldr	r3, [r3, #20]
 8016482:	4a63      	ldr	r2, [pc, #396]	; (8016610 <icmp_input+0x1f0>)
 8016484:	6812      	ldr	r2, [r2, #0]
 8016486:	4611      	mov	r1, r2
 8016488:	4618      	mov	r0, r3
 801648a:	f000 fbed 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 801648e:	4603      	mov	r3, r0
 8016490:	2b00      	cmp	r3, #0
 8016492:	f040 80b1 	bne.w	80165f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	891b      	ldrh	r3, [r3, #8]
 801649a:	2b07      	cmp	r3, #7
 801649c:	f240 80a5 	bls.w	80165ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80164a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164a2:	330e      	adds	r3, #14
 80164a4:	4619      	mov	r1, r3
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f7f8 f842 	bl	800e530 <pbuf_add_header>
 80164ac:	4603      	mov	r3, r0
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d04b      	beq.n	801654a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	891a      	ldrh	r2, [r3, #8]
 80164b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164b8:	4413      	add	r3, r2
 80164ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	891b      	ldrh	r3, [r3, #8]
 80164c0:	8b7a      	ldrh	r2, [r7, #26]
 80164c2:	429a      	cmp	r2, r3
 80164c4:	f0c0 809a 	bcc.w	80165fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80164c8:	8b7b      	ldrh	r3, [r7, #26]
 80164ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164ce:	4619      	mov	r1, r3
 80164d0:	200e      	movs	r0, #14
 80164d2:	f7f7 fddf 	bl	800e094 <pbuf_alloc>
 80164d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	f000 8090 	beq.w	8016600 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	895b      	ldrh	r3, [r3, #10]
 80164e4:	461a      	mov	r2, r3
 80164e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164e8:	3308      	adds	r3, #8
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d203      	bcs.n	80164f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80164ee:	6978      	ldr	r0, [r7, #20]
 80164f0:	f7f8 f8b4 	bl	800e65c <pbuf_free>
          goto icmperr;
 80164f4:	e085      	b.n	8016602 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	685b      	ldr	r3, [r3, #4]
 80164fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80164fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164fe:	4618      	mov	r0, r3
 8016500:	f001 fde3 	bl	80180ca <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016506:	4619      	mov	r1, r3
 8016508:	6978      	ldr	r0, [r7, #20]
 801650a:	f7f8 f821 	bl	800e550 <pbuf_remove_header>
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d009      	beq.n	8016528 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016514:	4b40      	ldr	r3, [pc, #256]	; (8016618 <icmp_input+0x1f8>)
 8016516:	22b6      	movs	r2, #182	; 0xb6
 8016518:	4940      	ldr	r1, [pc, #256]	; (801661c <icmp_input+0x1fc>)
 801651a:	4841      	ldr	r0, [pc, #260]	; (8016620 <icmp_input+0x200>)
 801651c:	f001 fe46 	bl	80181ac <iprintf>
          pbuf_free(r);
 8016520:	6978      	ldr	r0, [r7, #20]
 8016522:	f7f8 f89b 	bl	800e65c <pbuf_free>
          goto icmperr;
 8016526:	e06c      	b.n	8016602 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	6978      	ldr	r0, [r7, #20]
 801652c:	f7f8 f9ba 	bl	800e8a4 <pbuf_copy>
 8016530:	4603      	mov	r3, r0
 8016532:	2b00      	cmp	r3, #0
 8016534:	d003      	beq.n	801653e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016536:	6978      	ldr	r0, [r7, #20]
 8016538:	f7f8 f890 	bl	800e65c <pbuf_free>
          goto icmperr;
 801653c:	e061      	b.n	8016602 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7f8 f88c 	bl	800e65c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	607b      	str	r3, [r7, #4]
 8016548:	e00f      	b.n	801656a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801654a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801654c:	330e      	adds	r3, #14
 801654e:	4619      	mov	r1, r3
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f7f7 fffd 	bl	800e550 <pbuf_remove_header>
 8016556:	4603      	mov	r3, r0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d006      	beq.n	801656a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801655c:	4b2e      	ldr	r3, [pc, #184]	; (8016618 <icmp_input+0x1f8>)
 801655e:	22c7      	movs	r2, #199	; 0xc7
 8016560:	4930      	ldr	r1, [pc, #192]	; (8016624 <icmp_input+0x204>)
 8016562:	482f      	ldr	r0, [pc, #188]	; (8016620 <icmp_input+0x200>)
 8016564:	f001 fe22 	bl	80181ac <iprintf>
          goto icmperr;
 8016568:	e04b      	b.n	8016602 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016572:	4619      	mov	r1, r3
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f7f7 ffdb 	bl	800e530 <pbuf_add_header>
 801657a:	4603      	mov	r3, r0
 801657c:	2b00      	cmp	r3, #0
 801657e:	d12b      	bne.n	80165d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801658e:	4b20      	ldr	r3, [pc, #128]	; (8016610 <icmp_input+0x1f0>)
 8016590:	691a      	ldr	r2, [r3, #16]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016596:	693b      	ldr	r3, [r7, #16]
 8016598:	2200      	movs	r2, #0
 801659a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	2200      	movs	r2, #0
 80165a0:	709a      	strb	r2, [r3, #2]
 80165a2:	2200      	movs	r2, #0
 80165a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	22ff      	movs	r2, #255	; 0xff
 80165aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2200      	movs	r2, #0
 80165b0:	729a      	strb	r2, [r3, #10]
 80165b2:	2200      	movs	r2, #0
 80165b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	9302      	str	r3, [sp, #8]
 80165ba:	2301      	movs	r3, #1
 80165bc:	9301      	str	r3, [sp, #4]
 80165be:	2300      	movs	r3, #0
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	23ff      	movs	r3, #255	; 0xff
 80165c4:	2200      	movs	r2, #0
 80165c6:	69f9      	ldr	r1, [r7, #28]
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 fa75 	bl	8016ab8 <ip4_output_if>
 80165ce:	4603      	mov	r3, r0
 80165d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80165d2:	e001      	b.n	80165d8 <icmp_input+0x1b8>
      break;
 80165d4:	bf00      	nop
 80165d6:	e000      	b.n	80165da <icmp_input+0x1ba>
      break;
 80165d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f7f8 f83e 	bl	800e65c <pbuf_free>
  return;
 80165e0:	e013      	b.n	801660a <icmp_input+0x1ea>
    goto lenerr;
 80165e2:	bf00      	nop
 80165e4:	e002      	b.n	80165ec <icmp_input+0x1cc>
    goto lenerr;
 80165e6:	bf00      	nop
 80165e8:	e000      	b.n	80165ec <icmp_input+0x1cc>
        goto lenerr;
 80165ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f7f8 f835 	bl	800e65c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80165f2:	e00a      	b.n	801660a <icmp_input+0x1ea>
        goto icmperr;
 80165f4:	bf00      	nop
 80165f6:	e004      	b.n	8016602 <icmp_input+0x1e2>
        goto icmperr;
 80165f8:	bf00      	nop
 80165fa:	e002      	b.n	8016602 <icmp_input+0x1e2>
          goto icmperr;
 80165fc:	bf00      	nop
 80165fe:	e000      	b.n	8016602 <icmp_input+0x1e2>
          goto icmperr;
 8016600:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7f8 f82a 	bl	800e65c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016608:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801660a:	3728      	adds	r7, #40	; 0x28
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}
 8016610:	20008008 	.word	0x20008008
 8016614:	2000801c 	.word	0x2000801c
 8016618:	0801c144 	.word	0x0801c144
 801661c:	0801c17c 	.word	0x0801c17c
 8016620:	0801c1b4 	.word	0x0801c1b4
 8016624:	0801c1dc 	.word	0x0801c1dc

08016628 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b082      	sub	sp, #8
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	460b      	mov	r3, r1
 8016632:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016634:	78fb      	ldrb	r3, [r7, #3]
 8016636:	461a      	mov	r2, r3
 8016638:	2103      	movs	r1, #3
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f000 f814 	bl	8016668 <icmp_send_response>
}
 8016640:	bf00      	nop
 8016642:	3708      	adds	r7, #8
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}

08016648 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	460b      	mov	r3, r1
 8016652:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016654:	78fb      	ldrb	r3, [r7, #3]
 8016656:	461a      	mov	r2, r3
 8016658:	210b      	movs	r1, #11
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f000 f804 	bl	8016668 <icmp_send_response>
}
 8016660:	bf00      	nop
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b08c      	sub	sp, #48	; 0x30
 801666c:	af04      	add	r7, sp, #16
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	460b      	mov	r3, r1
 8016672:	70fb      	strb	r3, [r7, #3]
 8016674:	4613      	mov	r3, r2
 8016676:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016678:	f44f 7220 	mov.w	r2, #640	; 0x280
 801667c:	2124      	movs	r1, #36	; 0x24
 801667e:	2022      	movs	r0, #34	; 0x22
 8016680:	f7f7 fd08 	bl	800e094 <pbuf_alloc>
 8016684:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016686:	69fb      	ldr	r3, [r7, #28]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d04c      	beq.n	8016726 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801668c:	69fb      	ldr	r3, [r7, #28]
 801668e:	895b      	ldrh	r3, [r3, #10]
 8016690:	2b23      	cmp	r3, #35	; 0x23
 8016692:	d806      	bhi.n	80166a2 <icmp_send_response+0x3a>
 8016694:	4b26      	ldr	r3, [pc, #152]	; (8016730 <icmp_send_response+0xc8>)
 8016696:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801669a:	4926      	ldr	r1, [pc, #152]	; (8016734 <icmp_send_response+0xcc>)
 801669c:	4826      	ldr	r0, [pc, #152]	; (8016738 <icmp_send_response+0xd0>)
 801669e:	f001 fd85 	bl	80181ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	685b      	ldr	r3, [r3, #4]
 80166a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	78fa      	ldrb	r2, [r7, #3]
 80166b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	78ba      	ldrb	r2, [r7, #2]
 80166b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	2200      	movs	r2, #0
 80166be:	711a      	strb	r2, [r3, #4]
 80166c0:	2200      	movs	r2, #0
 80166c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	2200      	movs	r2, #0
 80166c8:	719a      	strb	r2, [r3, #6]
 80166ca:	2200      	movs	r2, #0
 80166cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80166ce:	69fb      	ldr	r3, [r7, #28]
 80166d0:	685b      	ldr	r3, [r3, #4]
 80166d2:	f103 0008 	add.w	r0, r3, #8
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	685b      	ldr	r3, [r3, #4]
 80166da:	221c      	movs	r2, #28
 80166dc:	4619      	mov	r1, r3
 80166de:	f001 fcf4 	bl	80180ca <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	68db      	ldr	r3, [r3, #12]
 80166e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80166e8:	f107 030c 	add.w	r3, r7, #12
 80166ec:	4618      	mov	r0, r3
 80166ee:	f000 f825 	bl	801673c <ip4_route>
 80166f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80166f4:	693b      	ldr	r3, [r7, #16]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d011      	beq.n	801671e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80166fa:	697b      	ldr	r3, [r7, #20]
 80166fc:	2200      	movs	r2, #0
 80166fe:	709a      	strb	r2, [r3, #2]
 8016700:	2200      	movs	r2, #0
 8016702:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016704:	f107 020c 	add.w	r2, r7, #12
 8016708:	693b      	ldr	r3, [r7, #16]
 801670a:	9302      	str	r3, [sp, #8]
 801670c:	2301      	movs	r3, #1
 801670e:	9301      	str	r3, [sp, #4]
 8016710:	2300      	movs	r3, #0
 8016712:	9300      	str	r3, [sp, #0]
 8016714:	23ff      	movs	r3, #255	; 0xff
 8016716:	2100      	movs	r1, #0
 8016718:	69f8      	ldr	r0, [r7, #28]
 801671a:	f000 f9cd 	bl	8016ab8 <ip4_output_if>
  }
  pbuf_free(q);
 801671e:	69f8      	ldr	r0, [r7, #28]
 8016720:	f7f7 ff9c 	bl	800e65c <pbuf_free>
 8016724:	e000      	b.n	8016728 <icmp_send_response+0xc0>
    return;
 8016726:	bf00      	nop
}
 8016728:	3720      	adds	r7, #32
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	0801c144 	.word	0x0801c144
 8016734:	0801c210 	.word	0x0801c210
 8016738:	0801c1b4 	.word	0x0801c1b4

0801673c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801673c:	b480      	push	{r7}
 801673e:	b085      	sub	sp, #20
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016744:	4b33      	ldr	r3, [pc, #204]	; (8016814 <ip4_route+0xd8>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	60fb      	str	r3, [r7, #12]
 801674a:	e036      	b.n	80167ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016752:	f003 0301 	and.w	r3, r3, #1
 8016756:	b2db      	uxtb	r3, r3
 8016758:	2b00      	cmp	r3, #0
 801675a:	d02b      	beq.n	80167b4 <ip4_route+0x78>
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016762:	089b      	lsrs	r3, r3, #2
 8016764:	f003 0301 	and.w	r3, r3, #1
 8016768:	b2db      	uxtb	r3, r3
 801676a:	2b00      	cmp	r3, #0
 801676c:	d022      	beq.n	80167b4 <ip4_route+0x78>
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	3304      	adds	r3, #4
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d01d      	beq.n	80167b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	3304      	adds	r3, #4
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	405a      	eors	r2, r3
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	3308      	adds	r3, #8
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	4013      	ands	r3, r2
 801678c:	2b00      	cmp	r3, #0
 801678e:	d101      	bne.n	8016794 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	e038      	b.n	8016806 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801679a:	f003 0302 	and.w	r3, r3, #2
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d108      	bne.n	80167b4 <ip4_route+0x78>
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	330c      	adds	r3, #12
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d101      	bne.n	80167b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	e028      	b.n	8016806 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	60fb      	str	r3, [r7, #12]
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d1c5      	bne.n	801674c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80167c0:	4b15      	ldr	r3, [pc, #84]	; (8016818 <ip4_route+0xdc>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d01a      	beq.n	80167fe <ip4_route+0xc2>
 80167c8:	4b13      	ldr	r3, [pc, #76]	; (8016818 <ip4_route+0xdc>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167d0:	f003 0301 	and.w	r3, r3, #1
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d012      	beq.n	80167fe <ip4_route+0xc2>
 80167d8:	4b0f      	ldr	r3, [pc, #60]	; (8016818 <ip4_route+0xdc>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167e0:	f003 0304 	and.w	r3, r3, #4
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d00a      	beq.n	80167fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80167e8:	4b0b      	ldr	r3, [pc, #44]	; (8016818 <ip4_route+0xdc>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	3304      	adds	r3, #4
 80167ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d004      	beq.n	80167fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	2b7f      	cmp	r3, #127	; 0x7f
 80167fc:	d101      	bne.n	8016802 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80167fe:	2300      	movs	r3, #0
 8016800:	e001      	b.n	8016806 <ip4_route+0xca>
  }

  return netif_default;
 8016802:	4b05      	ldr	r3, [pc, #20]	; (8016818 <ip4_route+0xdc>)
 8016804:	681b      	ldr	r3, [r3, #0]
}
 8016806:	4618      	mov	r0, r3
 8016808:	3714      	adds	r7, #20
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr
 8016812:	bf00      	nop
 8016814:	2000d8cc 	.word	0x2000d8cc
 8016818:	2000d8d0 	.word	0x2000d8d0

0801681c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801682a:	f003 0301 	and.w	r3, r3, #1
 801682e:	b2db      	uxtb	r3, r3
 8016830:	2b00      	cmp	r3, #0
 8016832:	d016      	beq.n	8016862 <ip4_input_accept+0x46>
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	3304      	adds	r3, #4
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d011      	beq.n	8016862 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801683e:	4b0b      	ldr	r3, [pc, #44]	; (801686c <ip4_input_accept+0x50>)
 8016840:	695a      	ldr	r2, [r3, #20]
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	3304      	adds	r3, #4
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	429a      	cmp	r2, r3
 801684a:	d008      	beq.n	801685e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801684c:	4b07      	ldr	r3, [pc, #28]	; (801686c <ip4_input_accept+0x50>)
 801684e:	695b      	ldr	r3, [r3, #20]
 8016850:	6879      	ldr	r1, [r7, #4]
 8016852:	4618      	mov	r0, r3
 8016854:	f000 fa08 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 8016858:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801685a:	2b00      	cmp	r3, #0
 801685c:	d001      	beq.n	8016862 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801685e:	2301      	movs	r3, #1
 8016860:	e000      	b.n	8016864 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016862:	2300      	movs	r3, #0
}
 8016864:	4618      	mov	r0, r3
 8016866:	3708      	adds	r7, #8
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	20008008 	.word	0x20008008

08016870 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b086      	sub	sp, #24
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	091b      	lsrs	r3, r3, #4
 8016886:	b2db      	uxtb	r3, r3
 8016888:	2b04      	cmp	r3, #4
 801688a:	d004      	beq.n	8016896 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f7f7 fee5 	bl	800e65c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016892:	2300      	movs	r3, #0
 8016894:	e107      	b.n	8016aa6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	781b      	ldrb	r3, [r3, #0]
 801689a:	f003 030f 	and.w	r3, r3, #15
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	009b      	lsls	r3, r3, #2
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80168a6:	697b      	ldr	r3, [r7, #20]
 80168a8:	885b      	ldrh	r3, [r3, #2]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7f6 fb29 	bl	800cf04 <lwip_htons>
 80168b2:	4603      	mov	r3, r0
 80168b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	891b      	ldrh	r3, [r3, #8]
 80168ba:	89ba      	ldrh	r2, [r7, #12]
 80168bc:	429a      	cmp	r2, r3
 80168be:	d204      	bcs.n	80168ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80168c0:	89bb      	ldrh	r3, [r7, #12]
 80168c2:	4619      	mov	r1, r3
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f7f7 fd43 	bl	800e350 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	895b      	ldrh	r3, [r3, #10]
 80168ce:	89fa      	ldrh	r2, [r7, #14]
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d807      	bhi.n	80168e4 <ip4_input+0x74>
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	891b      	ldrh	r3, [r3, #8]
 80168d8:	89ba      	ldrh	r2, [r7, #12]
 80168da:	429a      	cmp	r2, r3
 80168dc:	d802      	bhi.n	80168e4 <ip4_input+0x74>
 80168de:	89fb      	ldrh	r3, [r7, #14]
 80168e0:	2b13      	cmp	r3, #19
 80168e2:	d804      	bhi.n	80168ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f7f7 feb9 	bl	800e65c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80168ea:	2300      	movs	r3, #0
 80168ec:	e0db      	b.n	8016aa6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80168ee:	697b      	ldr	r3, [r7, #20]
 80168f0:	691b      	ldr	r3, [r3, #16]
 80168f2:	4a6f      	ldr	r2, [pc, #444]	; (8016ab0 <ip4_input+0x240>)
 80168f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80168f6:	697b      	ldr	r3, [r7, #20]
 80168f8:	68db      	ldr	r3, [r3, #12]
 80168fa:	4a6d      	ldr	r2, [pc, #436]	; (8016ab0 <ip4_input+0x240>)
 80168fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168fe:	4b6c      	ldr	r3, [pc, #432]	; (8016ab0 <ip4_input+0x240>)
 8016900:	695b      	ldr	r3, [r3, #20]
 8016902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016906:	2be0      	cmp	r3, #224	; 0xe0
 8016908:	d112      	bne.n	8016930 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016910:	f003 0301 	and.w	r3, r3, #1
 8016914:	b2db      	uxtb	r3, r3
 8016916:	2b00      	cmp	r3, #0
 8016918:	d007      	beq.n	801692a <ip4_input+0xba>
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	3304      	adds	r3, #4
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d002      	beq.n	801692a <ip4_input+0xba>
      netif = inp;
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	613b      	str	r3, [r7, #16]
 8016928:	e02a      	b.n	8016980 <ip4_input+0x110>
    } else {
      netif = NULL;
 801692a:	2300      	movs	r3, #0
 801692c:	613b      	str	r3, [r7, #16]
 801692e:	e027      	b.n	8016980 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016930:	6838      	ldr	r0, [r7, #0]
 8016932:	f7ff ff73 	bl	801681c <ip4_input_accept>
 8016936:	4603      	mov	r3, r0
 8016938:	2b00      	cmp	r3, #0
 801693a:	d002      	beq.n	8016942 <ip4_input+0xd2>
      netif = inp;
 801693c:	683b      	ldr	r3, [r7, #0]
 801693e:	613b      	str	r3, [r7, #16]
 8016940:	e01e      	b.n	8016980 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016942:	2300      	movs	r3, #0
 8016944:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016946:	4b5a      	ldr	r3, [pc, #360]	; (8016ab0 <ip4_input+0x240>)
 8016948:	695b      	ldr	r3, [r3, #20]
 801694a:	b2db      	uxtb	r3, r3
 801694c:	2b7f      	cmp	r3, #127	; 0x7f
 801694e:	d017      	beq.n	8016980 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016950:	4b58      	ldr	r3, [pc, #352]	; (8016ab4 <ip4_input+0x244>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	613b      	str	r3, [r7, #16]
 8016956:	e00e      	b.n	8016976 <ip4_input+0x106>
          if (netif == inp) {
 8016958:	693a      	ldr	r2, [r7, #16]
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	429a      	cmp	r2, r3
 801695e:	d006      	beq.n	801696e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016960:	6938      	ldr	r0, [r7, #16]
 8016962:	f7ff ff5b 	bl	801681c <ip4_input_accept>
 8016966:	4603      	mov	r3, r0
 8016968:	2b00      	cmp	r3, #0
 801696a:	d108      	bne.n	801697e <ip4_input+0x10e>
 801696c:	e000      	b.n	8016970 <ip4_input+0x100>
            continue;
 801696e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	613b      	str	r3, [r7, #16]
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d1ed      	bne.n	8016958 <ip4_input+0xe8>
 801697c:	e000      	b.n	8016980 <ip4_input+0x110>
            break;
 801697e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016980:	4b4b      	ldr	r3, [pc, #300]	; (8016ab0 <ip4_input+0x240>)
 8016982:	691b      	ldr	r3, [r3, #16]
 8016984:	6839      	ldr	r1, [r7, #0]
 8016986:	4618      	mov	r0, r3
 8016988:	f000 f96e 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 801698c:	4603      	mov	r3, r0
 801698e:	2b00      	cmp	r3, #0
 8016990:	d105      	bne.n	801699e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016992:	4b47      	ldr	r3, [pc, #284]	; (8016ab0 <ip4_input+0x240>)
 8016994:	691b      	ldr	r3, [r3, #16]
 8016996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801699a:	2be0      	cmp	r3, #224	; 0xe0
 801699c:	d104      	bne.n	80169a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f7f7 fe5c 	bl	800e65c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80169a4:	2300      	movs	r3, #0
 80169a6:	e07e      	b.n	8016aa6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d104      	bne.n	80169b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80169ae:	6878      	ldr	r0, [r7, #4]
 80169b0:	f7f7 fe54 	bl	800e65c <pbuf_free>
    return ERR_OK;
 80169b4:	2300      	movs	r3, #0
 80169b6:	e076      	b.n	8016aa6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80169b8:	697b      	ldr	r3, [r7, #20]
 80169ba:	88db      	ldrh	r3, [r3, #6]
 80169bc:	b29b      	uxth	r3, r3
 80169be:	461a      	mov	r2, r3
 80169c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80169c4:	4013      	ands	r3, r2
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d00b      	beq.n	80169e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 fc92 	bl	80172f4 <ip4_reass>
 80169d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d101      	bne.n	80169dc <ip4_input+0x16c>
      return ERR_OK;
 80169d8:	2300      	movs	r3, #0
 80169da:	e064      	b.n	8016aa6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80169e2:	4a33      	ldr	r2, [pc, #204]	; (8016ab0 <ip4_input+0x240>)
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80169e8:	4a31      	ldr	r2, [pc, #196]	; (8016ab0 <ip4_input+0x240>)
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80169ee:	4a30      	ldr	r2, [pc, #192]	; (8016ab0 <ip4_input+0x240>)
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	f003 030f 	and.w	r3, r3, #15
 80169fc:	b2db      	uxtb	r3, r3
 80169fe:	009b      	lsls	r3, r3, #2
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	b29a      	uxth	r2, r3
 8016a04:	4b2a      	ldr	r3, [pc, #168]	; (8016ab0 <ip4_input+0x240>)
 8016a06:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016a08:	89fb      	ldrh	r3, [r7, #14]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f7f7 fd9f 	bl	800e550 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	7a5b      	ldrb	r3, [r3, #9]
 8016a16:	2b11      	cmp	r3, #17
 8016a18:	d006      	beq.n	8016a28 <ip4_input+0x1b8>
 8016a1a:	2b11      	cmp	r3, #17
 8016a1c:	dc13      	bgt.n	8016a46 <ip4_input+0x1d6>
 8016a1e:	2b01      	cmp	r3, #1
 8016a20:	d00c      	beq.n	8016a3c <ip4_input+0x1cc>
 8016a22:	2b06      	cmp	r3, #6
 8016a24:	d005      	beq.n	8016a32 <ip4_input+0x1c2>
 8016a26:	e00e      	b.n	8016a46 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016a28:	6839      	ldr	r1, [r7, #0]
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f7fe fb5a 	bl	80150e4 <udp_input>
        break;
 8016a30:	e026      	b.n	8016a80 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016a32:	6839      	ldr	r1, [r7, #0]
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f7f9 ff17 	bl	8010868 <tcp_input>
        break;
 8016a3a:	e021      	b.n	8016a80 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016a3c:	6839      	ldr	r1, [r7, #0]
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f7ff fcee 	bl	8016420 <icmp_input>
        break;
 8016a44:	e01c      	b.n	8016a80 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016a46:	4b1a      	ldr	r3, [pc, #104]	; (8016ab0 <ip4_input+0x240>)
 8016a48:	695b      	ldr	r3, [r3, #20]
 8016a4a:	6939      	ldr	r1, [r7, #16]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f000 f90b 	bl	8016c68 <ip4_addr_isbroadcast_u32>
 8016a52:	4603      	mov	r3, r0
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d10f      	bne.n	8016a78 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016a58:	4b15      	ldr	r3, [pc, #84]	; (8016ab0 <ip4_input+0x240>)
 8016a5a:	695b      	ldr	r3, [r3, #20]
 8016a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016a60:	2be0      	cmp	r3, #224	; 0xe0
 8016a62:	d009      	beq.n	8016a78 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016a64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016a68:	4619      	mov	r1, r3
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f7f7 fde3 	bl	800e636 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016a70:	2102      	movs	r1, #2
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f7ff fdd8 	bl	8016628 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f7f7 fdef 	bl	800e65c <pbuf_free>
        break;
 8016a7e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016a80:	4b0b      	ldr	r3, [pc, #44]	; (8016ab0 <ip4_input+0x240>)
 8016a82:	2200      	movs	r2, #0
 8016a84:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016a86:	4b0a      	ldr	r3, [pc, #40]	; (8016ab0 <ip4_input+0x240>)
 8016a88:	2200      	movs	r2, #0
 8016a8a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016a8c:	4b08      	ldr	r3, [pc, #32]	; (8016ab0 <ip4_input+0x240>)
 8016a8e:	2200      	movs	r2, #0
 8016a90:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016a92:	4b07      	ldr	r3, [pc, #28]	; (8016ab0 <ip4_input+0x240>)
 8016a94:	2200      	movs	r2, #0
 8016a96:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016a98:	4b05      	ldr	r3, [pc, #20]	; (8016ab0 <ip4_input+0x240>)
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016a9e:	4b04      	ldr	r3, [pc, #16]	; (8016ab0 <ip4_input+0x240>)
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016aa4:	2300      	movs	r3, #0
}
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	3718      	adds	r7, #24
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	bf00      	nop
 8016ab0:	20008008 	.word	0x20008008
 8016ab4:	2000d8cc 	.word	0x2000d8cc

08016ab8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b08a      	sub	sp, #40	; 0x28
 8016abc:	af04      	add	r7, sp, #16
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	60b9      	str	r1, [r7, #8]
 8016ac2:	607a      	str	r2, [r7, #4]
 8016ac4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d009      	beq.n	8016ae4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016ad0:	68bb      	ldr	r3, [r7, #8]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d003      	beq.n	8016ade <ip4_output_if+0x26>
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d102      	bne.n	8016ae4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	3304      	adds	r3, #4
 8016ae2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016ae4:	78fa      	ldrb	r2, [r7, #3]
 8016ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae8:	9302      	str	r3, [sp, #8]
 8016aea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016aee:	9301      	str	r3, [sp, #4]
 8016af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016af4:	9300      	str	r3, [sp, #0]
 8016af6:	4613      	mov	r3, r2
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	6979      	ldr	r1, [r7, #20]
 8016afc:	68f8      	ldr	r0, [r7, #12]
 8016afe:	f000 f805 	bl	8016b0c <ip4_output_if_src>
 8016b02:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	3718      	adds	r7, #24
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b088      	sub	sp, #32
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	60f8      	str	r0, [r7, #12]
 8016b14:	60b9      	str	r1, [r7, #8]
 8016b16:	607a      	str	r2, [r7, #4]
 8016b18:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	7b9b      	ldrb	r3, [r3, #14]
 8016b1e:	2b01      	cmp	r3, #1
 8016b20:	d006      	beq.n	8016b30 <ip4_output_if_src+0x24>
 8016b22:	4b4b      	ldr	r3, [pc, #300]	; (8016c50 <ip4_output_if_src+0x144>)
 8016b24:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016b28:	494a      	ldr	r1, [pc, #296]	; (8016c54 <ip4_output_if_src+0x148>)
 8016b2a:	484b      	ldr	r0, [pc, #300]	; (8016c58 <ip4_output_if_src+0x14c>)
 8016b2c:	f001 fb3e 	bl	80181ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d060      	beq.n	8016bf8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016b36:	2314      	movs	r3, #20
 8016b38:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016b3a:	2114      	movs	r1, #20
 8016b3c:	68f8      	ldr	r0, [r7, #12]
 8016b3e:	f7f7 fcf7 	bl	800e530 <pbuf_add_header>
 8016b42:	4603      	mov	r3, r0
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d002      	beq.n	8016b4e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016b48:	f06f 0301 	mvn.w	r3, #1
 8016b4c:	e07c      	b.n	8016c48 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	685b      	ldr	r3, [r3, #4]
 8016b52:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	895b      	ldrh	r3, [r3, #10]
 8016b58:	2b13      	cmp	r3, #19
 8016b5a:	d806      	bhi.n	8016b6a <ip4_output_if_src+0x5e>
 8016b5c:	4b3c      	ldr	r3, [pc, #240]	; (8016c50 <ip4_output_if_src+0x144>)
 8016b5e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016b62:	493e      	ldr	r1, [pc, #248]	; (8016c5c <ip4_output_if_src+0x150>)
 8016b64:	483c      	ldr	r0, [pc, #240]	; (8016c58 <ip4_output_if_src+0x14c>)
 8016b66:	f001 fb21 	bl	80181ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	78fa      	ldrb	r2, [r7, #3]
 8016b6e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016b70:	69fb      	ldr	r3, [r7, #28]
 8016b72:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016b76:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	681a      	ldr	r2, [r3, #0]
 8016b7c:	69fb      	ldr	r3, [r7, #28]
 8016b7e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016b80:	8b7b      	ldrh	r3, [r7, #26]
 8016b82:	089b      	lsrs	r3, r3, #2
 8016b84:	b29b      	uxth	r3, r3
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b8c:	b2da      	uxtb	r2, r3
 8016b8e:	69fb      	ldr	r3, [r7, #28]
 8016b90:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016b92:	69fb      	ldr	r3, [r7, #28]
 8016b94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016b98:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	891b      	ldrh	r3, [r3, #8]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7f6 f9b0 	bl	800cf04 <lwip_htons>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016bac:	69fb      	ldr	r3, [r7, #28]
 8016bae:	2200      	movs	r2, #0
 8016bb0:	719a      	strb	r2, [r3, #6]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016bb6:	4b2a      	ldr	r3, [pc, #168]	; (8016c60 <ip4_output_if_src+0x154>)
 8016bb8:	881b      	ldrh	r3, [r3, #0]
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7f6 f9a2 	bl	800cf04 <lwip_htons>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	461a      	mov	r2, r3
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016bc8:	4b25      	ldr	r3, [pc, #148]	; (8016c60 <ip4_output_if_src+0x154>)
 8016bca:	881b      	ldrh	r3, [r3, #0]
 8016bcc:	3301      	adds	r3, #1
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	4b23      	ldr	r3, [pc, #140]	; (8016c60 <ip4_output_if_src+0x154>)
 8016bd2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d104      	bne.n	8016be4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016bda:	4b22      	ldr	r3, [pc, #136]	; (8016c64 <ip4_output_if_src+0x158>)
 8016bdc:	681a      	ldr	r2, [r3, #0]
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	60da      	str	r2, [r3, #12]
 8016be2:	e003      	b.n	8016bec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	681a      	ldr	r2, [r3, #0]
 8016be8:	69fb      	ldr	r3, [r7, #28]
 8016bea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016bec:	69fb      	ldr	r3, [r7, #28]
 8016bee:	2200      	movs	r2, #0
 8016bf0:	729a      	strb	r2, [r3, #10]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	72da      	strb	r2, [r3, #11]
 8016bf6:	e00f      	b.n	8016c18 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	895b      	ldrh	r3, [r3, #10]
 8016bfc:	2b13      	cmp	r3, #19
 8016bfe:	d802      	bhi.n	8016c06 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016c00:	f06f 0301 	mvn.w	r3, #1
 8016c04:	e020      	b.n	8016c48 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	691b      	ldr	r3, [r3, #16]
 8016c10:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016c12:	f107 0314 	add.w	r3, r7, #20
 8016c16:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d00c      	beq.n	8016c3a <ip4_output_if_src+0x12e>
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	891a      	ldrh	r2, [r3, #8]
 8016c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d906      	bls.n	8016c3a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016c2c:	687a      	ldr	r2, [r7, #4]
 8016c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016c30:	68f8      	ldr	r0, [r7, #12]
 8016c32:	f000 fd4d 	bl	80176d0 <ip4_frag>
 8016c36:	4603      	mov	r3, r0
 8016c38:	e006      	b.n	8016c48 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c3c:	695b      	ldr	r3, [r3, #20]
 8016c3e:	687a      	ldr	r2, [r7, #4]
 8016c40:	68f9      	ldr	r1, [r7, #12]
 8016c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c44:	4798      	blx	r3
 8016c46:	4603      	mov	r3, r0
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3720      	adds	r7, #32
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}
 8016c50:	0801c23c 	.word	0x0801c23c
 8016c54:	0801c270 	.word	0x0801c270
 8016c58:	0801c27c 	.word	0x0801c27c
 8016c5c:	0801c2a4 	.word	0x0801c2a4
 8016c60:	20004caa 	.word	0x20004caa
 8016c64:	0801c6e0 	.word	0x0801c6e0

08016c68 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b085      	sub	sp, #20
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c7c:	d002      	beq.n	8016c84 <ip4_addr_isbroadcast_u32+0x1c>
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d101      	bne.n	8016c88 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016c84:	2301      	movs	r3, #1
 8016c86:	e02a      	b.n	8016cde <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c8e:	f003 0302 	and.w	r3, r3, #2
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d101      	bne.n	8016c9a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016c96:	2300      	movs	r3, #0
 8016c98:	e021      	b.n	8016cde <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	3304      	adds	r3, #4
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	687a      	ldr	r2, [r7, #4]
 8016ca2:	429a      	cmp	r2, r3
 8016ca4:	d101      	bne.n	8016caa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	e019      	b.n	8016cde <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016caa:	68fa      	ldr	r2, [r7, #12]
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	3304      	adds	r3, #4
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	405a      	eors	r2, r3
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	3308      	adds	r3, #8
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	4013      	ands	r3, r2
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d10d      	bne.n	8016cdc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	3308      	adds	r3, #8
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	43da      	mvns	r2, r3
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016ccc:	683b      	ldr	r3, [r7, #0]
 8016cce:	3308      	adds	r3, #8
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	d101      	bne.n	8016cdc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016cd8:	2301      	movs	r3, #1
 8016cda:	e000      	b.n	8016cde <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016cdc:	2300      	movs	r3, #0
  }
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3714      	adds	r7, #20
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce8:	4770      	bx	lr
	...

08016cec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b084      	sub	sp, #16
 8016cf0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016cf6:	4b12      	ldr	r3, [pc, #72]	; (8016d40 <ip_reass_tmr+0x54>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016cfc:	e018      	b.n	8016d30 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	7fdb      	ldrb	r3, [r3, #31]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d00b      	beq.n	8016d1e <ip_reass_tmr+0x32>
      r->timer--;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	7fdb      	ldrb	r3, [r3, #31]
 8016d0a:	3b01      	subs	r3, #1
 8016d0c:	b2da      	uxtb	r2, r3
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	60fb      	str	r3, [r7, #12]
 8016d1c:	e008      	b.n	8016d30 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016d28:	68b9      	ldr	r1, [r7, #8]
 8016d2a:	6878      	ldr	r0, [r7, #4]
 8016d2c:	f000 f80a 	bl	8016d44 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d1e3      	bne.n	8016cfe <ip_reass_tmr+0x12>
    }
  }
}
 8016d36:	bf00      	nop
 8016d38:	bf00      	nop
 8016d3a:	3710      	adds	r7, #16
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}
 8016d40:	20004cac 	.word	0x20004cac

08016d44 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b088      	sub	sp, #32
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
 8016d4c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016d52:	683a      	ldr	r2, [r7, #0]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d105      	bne.n	8016d66 <ip_reass_free_complete_datagram+0x22>
 8016d5a:	4b45      	ldr	r3, [pc, #276]	; (8016e70 <ip_reass_free_complete_datagram+0x12c>)
 8016d5c:	22ab      	movs	r2, #171	; 0xab
 8016d5e:	4945      	ldr	r1, [pc, #276]	; (8016e74 <ip_reass_free_complete_datagram+0x130>)
 8016d60:	4845      	ldr	r0, [pc, #276]	; (8016e78 <ip_reass_free_complete_datagram+0x134>)
 8016d62:	f001 fa23 	bl	80181ac <iprintf>
  if (prev != NULL) {
 8016d66:	683b      	ldr	r3, [r7, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d00a      	beq.n	8016d82 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	687a      	ldr	r2, [r7, #4]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d005      	beq.n	8016d82 <ip_reass_free_complete_datagram+0x3e>
 8016d76:	4b3e      	ldr	r3, [pc, #248]	; (8016e70 <ip_reass_free_complete_datagram+0x12c>)
 8016d78:	22ad      	movs	r2, #173	; 0xad
 8016d7a:	4940      	ldr	r1, [pc, #256]	; (8016e7c <ip_reass_free_complete_datagram+0x138>)
 8016d7c:	483e      	ldr	r0, [pc, #248]	; (8016e78 <ip_reass_free_complete_datagram+0x134>)
 8016d7e:	f001 fa15 	bl	80181ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	685b      	ldr	r3, [r3, #4]
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	889b      	ldrh	r3, [r3, #4]
 8016d8e:	b29b      	uxth	r3, r3
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d12a      	bne.n	8016dea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	6858      	ldr	r0, [r3, #4]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	3308      	adds	r3, #8
 8016daa:	2214      	movs	r2, #20
 8016dac:	4619      	mov	r1, r3
 8016dae:	f001 f98c 	bl	80180ca <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016db2:	2101      	movs	r1, #1
 8016db4:	69b8      	ldr	r0, [r7, #24]
 8016db6:	f7ff fc47 	bl	8016648 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016dba:	69b8      	ldr	r0, [r7, #24]
 8016dbc:	f7f7 fcdc 	bl	800e778 <pbuf_clen>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016dc4:	8bfa      	ldrh	r2, [r7, #30]
 8016dc6:	8a7b      	ldrh	r3, [r7, #18]
 8016dc8:	4413      	add	r3, r2
 8016dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dce:	db05      	blt.n	8016ddc <ip_reass_free_complete_datagram+0x98>
 8016dd0:	4b27      	ldr	r3, [pc, #156]	; (8016e70 <ip_reass_free_complete_datagram+0x12c>)
 8016dd2:	22bc      	movs	r2, #188	; 0xbc
 8016dd4:	492a      	ldr	r1, [pc, #168]	; (8016e80 <ip_reass_free_complete_datagram+0x13c>)
 8016dd6:	4828      	ldr	r0, [pc, #160]	; (8016e78 <ip_reass_free_complete_datagram+0x134>)
 8016dd8:	f001 f9e8 	bl	80181ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016ddc:	8bfa      	ldrh	r2, [r7, #30]
 8016dde:	8a7b      	ldrh	r3, [r7, #18]
 8016de0:	4413      	add	r3, r2
 8016de2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016de4:	69b8      	ldr	r0, [r7, #24]
 8016de6:	f7f7 fc39 	bl	800e65c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	685b      	ldr	r3, [r3, #4]
 8016dee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016df0:	e01f      	b.n	8016e32 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016df2:	69bb      	ldr	r3, [r7, #24]
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016df8:	69bb      	ldr	r3, [r7, #24]
 8016dfa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016e02:	68f8      	ldr	r0, [r7, #12]
 8016e04:	f7f7 fcb8 	bl	800e778 <pbuf_clen>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016e0c:	8bfa      	ldrh	r2, [r7, #30]
 8016e0e:	8a7b      	ldrh	r3, [r7, #18]
 8016e10:	4413      	add	r3, r2
 8016e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e16:	db05      	blt.n	8016e24 <ip_reass_free_complete_datagram+0xe0>
 8016e18:	4b15      	ldr	r3, [pc, #84]	; (8016e70 <ip_reass_free_complete_datagram+0x12c>)
 8016e1a:	22cc      	movs	r2, #204	; 0xcc
 8016e1c:	4918      	ldr	r1, [pc, #96]	; (8016e80 <ip_reass_free_complete_datagram+0x13c>)
 8016e1e:	4816      	ldr	r0, [pc, #88]	; (8016e78 <ip_reass_free_complete_datagram+0x134>)
 8016e20:	f001 f9c4 	bl	80181ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016e24:	8bfa      	ldrh	r2, [r7, #30]
 8016e26:	8a7b      	ldrh	r3, [r7, #18]
 8016e28:	4413      	add	r3, r2
 8016e2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016e2c:	68f8      	ldr	r0, [r7, #12]
 8016e2e:	f7f7 fc15 	bl	800e65c <pbuf_free>
  while (p != NULL) {
 8016e32:	69bb      	ldr	r3, [r7, #24]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d1dc      	bne.n	8016df2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016e38:	6839      	ldr	r1, [r7, #0]
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 f8c2 	bl	8016fc4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016e40:	4b10      	ldr	r3, [pc, #64]	; (8016e84 <ip_reass_free_complete_datagram+0x140>)
 8016e42:	881b      	ldrh	r3, [r3, #0]
 8016e44:	8bfa      	ldrh	r2, [r7, #30]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d905      	bls.n	8016e56 <ip_reass_free_complete_datagram+0x112>
 8016e4a:	4b09      	ldr	r3, [pc, #36]	; (8016e70 <ip_reass_free_complete_datagram+0x12c>)
 8016e4c:	22d2      	movs	r2, #210	; 0xd2
 8016e4e:	490e      	ldr	r1, [pc, #56]	; (8016e88 <ip_reass_free_complete_datagram+0x144>)
 8016e50:	4809      	ldr	r0, [pc, #36]	; (8016e78 <ip_reass_free_complete_datagram+0x134>)
 8016e52:	f001 f9ab 	bl	80181ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016e56:	4b0b      	ldr	r3, [pc, #44]	; (8016e84 <ip_reass_free_complete_datagram+0x140>)
 8016e58:	881a      	ldrh	r2, [r3, #0]
 8016e5a:	8bfb      	ldrh	r3, [r7, #30]
 8016e5c:	1ad3      	subs	r3, r2, r3
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	4b08      	ldr	r3, [pc, #32]	; (8016e84 <ip_reass_free_complete_datagram+0x140>)
 8016e62:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016e64:	8bfb      	ldrh	r3, [r7, #30]
}
 8016e66:	4618      	mov	r0, r3
 8016e68:	3720      	adds	r7, #32
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}
 8016e6e:	bf00      	nop
 8016e70:	0801c2d4 	.word	0x0801c2d4
 8016e74:	0801c310 	.word	0x0801c310
 8016e78:	0801c31c 	.word	0x0801c31c
 8016e7c:	0801c344 	.word	0x0801c344
 8016e80:	0801c358 	.word	0x0801c358
 8016e84:	20004cb0 	.word	0x20004cb0
 8016e88:	0801c378 	.word	0x0801c378

08016e8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b08a      	sub	sp, #40	; 0x28
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016e96:	2300      	movs	r3, #0
 8016e98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016eaa:	4b28      	ldr	r3, [pc, #160]	; (8016f4c <ip_reass_remove_oldest_datagram+0xc0>)
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016eb0:	e030      	b.n	8016f14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb4:	695a      	ldr	r2, [r3, #20]
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	68db      	ldr	r3, [r3, #12]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d10c      	bne.n	8016ed8 <ip_reass_remove_oldest_datagram+0x4c>
 8016ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec0:	699a      	ldr	r2, [r3, #24]
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	691b      	ldr	r3, [r3, #16]
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	d106      	bne.n	8016ed8 <ip_reass_remove_oldest_datagram+0x4c>
 8016eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ecc:	899a      	ldrh	r2, [r3, #12]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	889b      	ldrh	r3, [r3, #4]
 8016ed2:	b29b      	uxth	r3, r3
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	d014      	beq.n	8016f02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	3301      	adds	r3, #1
 8016edc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016ede:	6a3b      	ldr	r3, [r7, #32]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d104      	bne.n	8016eee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ee8:	69fb      	ldr	r3, [r7, #28]
 8016eea:	61bb      	str	r3, [r7, #24]
 8016eec:	e009      	b.n	8016f02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef0:	7fda      	ldrb	r2, [r3, #31]
 8016ef2:	6a3b      	ldr	r3, [r7, #32]
 8016ef4:	7fdb      	ldrb	r3, [r3, #31]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d803      	bhi.n	8016f02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016efc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016efe:	69fb      	ldr	r3, [r7, #28]
 8016f00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d001      	beq.n	8016f0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d1cb      	bne.n	8016eb2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016f1a:	6a3b      	ldr	r3, [r7, #32]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d008      	beq.n	8016f32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016f20:	69b9      	ldr	r1, [r7, #24]
 8016f22:	6a38      	ldr	r0, [r7, #32]
 8016f24:	f7ff ff0e 	bl	8016d44 <ip_reass_free_complete_datagram>
 8016f28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016f2a:	697a      	ldr	r2, [r7, #20]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	4413      	add	r3, r2
 8016f30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016f32:	697a      	ldr	r2, [r7, #20]
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	da02      	bge.n	8016f40 <ip_reass_remove_oldest_datagram+0xb4>
 8016f3a:	693b      	ldr	r3, [r7, #16]
 8016f3c:	2b01      	cmp	r3, #1
 8016f3e:	dcac      	bgt.n	8016e9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016f40:	697b      	ldr	r3, [r7, #20]
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	3728      	adds	r7, #40	; 0x28
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	20004cac 	.word	0x20004cac

08016f50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b084      	sub	sp, #16
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016f5a:	2004      	movs	r0, #4
 8016f5c:	f7f6 fc88 	bl	800d870 <memp_malloc>
 8016f60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d110      	bne.n	8016f8a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016f68:	6839      	ldr	r1, [r7, #0]
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f7ff ff8e 	bl	8016e8c <ip_reass_remove_oldest_datagram>
 8016f70:	4602      	mov	r2, r0
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	4293      	cmp	r3, r2
 8016f76:	dc03      	bgt.n	8016f80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016f78:	2004      	movs	r0, #4
 8016f7a:	f7f6 fc79 	bl	800d870 <memp_malloc>
 8016f7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d101      	bne.n	8016f8a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016f86:	2300      	movs	r3, #0
 8016f88:	e016      	b.n	8016fb8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016f8a:	2220      	movs	r2, #32
 8016f8c:	2100      	movs	r1, #0
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	f001 f8a9 	bl	80180e6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	220f      	movs	r2, #15
 8016f98:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016f9a:	4b09      	ldr	r3, [pc, #36]	; (8016fc0 <ip_reass_enqueue_new_datagram+0x70>)
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016fa2:	4a07      	ldr	r2, [pc, #28]	; (8016fc0 <ip_reass_enqueue_new_datagram+0x70>)
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	3308      	adds	r3, #8
 8016fac:	2214      	movs	r2, #20
 8016fae:	6879      	ldr	r1, [r7, #4]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f001 f88a 	bl	80180ca <memcpy>
  return ipr;
 8016fb6:	68fb      	ldr	r3, [r7, #12]
}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	3710      	adds	r7, #16
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	20004cac 	.word	0x20004cac

08016fc4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
 8016fcc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016fce:	4b10      	ldr	r3, [pc, #64]	; (8017010 <ip_reass_dequeue_datagram+0x4c>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	d104      	bne.n	8016fe2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	4a0c      	ldr	r2, [pc, #48]	; (8017010 <ip_reass_dequeue_datagram+0x4c>)
 8016fde:	6013      	str	r3, [r2, #0]
 8016fe0:	e00d      	b.n	8016ffe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d106      	bne.n	8016ff6 <ip_reass_dequeue_datagram+0x32>
 8016fe8:	4b0a      	ldr	r3, [pc, #40]	; (8017014 <ip_reass_dequeue_datagram+0x50>)
 8016fea:	f240 1245 	movw	r2, #325	; 0x145
 8016fee:	490a      	ldr	r1, [pc, #40]	; (8017018 <ip_reass_dequeue_datagram+0x54>)
 8016ff0:	480a      	ldr	r0, [pc, #40]	; (801701c <ip_reass_dequeue_datagram+0x58>)
 8016ff2:	f001 f8db 	bl	80181ac <iprintf>
    prev->next = ipr->next;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681a      	ldr	r2, [r3, #0]
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016ffe:	6879      	ldr	r1, [r7, #4]
 8017000:	2004      	movs	r0, #4
 8017002:	f7f6 fc87 	bl	800d914 <memp_free>
}
 8017006:	bf00      	nop
 8017008:	3708      	adds	r7, #8
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	20004cac 	.word	0x20004cac
 8017014:	0801c2d4 	.word	0x0801c2d4
 8017018:	0801c39c 	.word	0x0801c39c
 801701c:	0801c31c 	.word	0x0801c31c

08017020 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b08c      	sub	sp, #48	; 0x30
 8017024:	af00      	add	r7, sp, #0
 8017026:	60f8      	str	r0, [r7, #12]
 8017028:	60b9      	str	r1, [r7, #8]
 801702a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801702c:	2300      	movs	r3, #0
 801702e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017030:	2301      	movs	r3, #1
 8017032:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	885b      	ldrh	r3, [r3, #2]
 801703e:	b29b      	uxth	r3, r3
 8017040:	4618      	mov	r0, r3
 8017042:	f7f5 ff5f 	bl	800cf04 <lwip_htons>
 8017046:	4603      	mov	r3, r0
 8017048:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801704a:	69fb      	ldr	r3, [r7, #28]
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	f003 030f 	and.w	r3, r3, #15
 8017052:	b2db      	uxtb	r3, r3
 8017054:	009b      	lsls	r3, r3, #2
 8017056:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017058:	7e7b      	ldrb	r3, [r7, #25]
 801705a:	b29b      	uxth	r3, r3
 801705c:	8b7a      	ldrh	r2, [r7, #26]
 801705e:	429a      	cmp	r2, r3
 8017060:	d202      	bcs.n	8017068 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017062:	f04f 33ff 	mov.w	r3, #4294967295
 8017066:	e135      	b.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017068:	7e7b      	ldrb	r3, [r7, #25]
 801706a:	b29b      	uxth	r3, r3
 801706c:	8b7a      	ldrh	r2, [r7, #26]
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017072:	69fb      	ldr	r3, [r7, #28]
 8017074:	88db      	ldrh	r3, [r3, #6]
 8017076:	b29b      	uxth	r3, r3
 8017078:	4618      	mov	r0, r3
 801707a:	f7f5 ff43 	bl	800cf04 <lwip_htons>
 801707e:	4603      	mov	r3, r0
 8017080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017084:	b29b      	uxth	r3, r3
 8017086:	00db      	lsls	r3, r3, #3
 8017088:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	685b      	ldr	r3, [r3, #4]
 801708e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017092:	2200      	movs	r2, #0
 8017094:	701a      	strb	r2, [r3, #0]
 8017096:	2200      	movs	r2, #0
 8017098:	705a      	strb	r2, [r3, #1]
 801709a:	2200      	movs	r2, #0
 801709c:	709a      	strb	r2, [r3, #2]
 801709e:	2200      	movs	r2, #0
 80170a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80170a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a4:	8afa      	ldrh	r2, [r7, #22]
 80170a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80170a8:	8afa      	ldrh	r2, [r7, #22]
 80170aa:	8b7b      	ldrh	r3, [r7, #26]
 80170ac:	4413      	add	r3, r2
 80170ae:	b29a      	uxth	r2, r3
 80170b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80170b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b6:	88db      	ldrh	r3, [r3, #6]
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	8afa      	ldrh	r2, [r7, #22]
 80170bc:	429a      	cmp	r2, r3
 80170be:	d902      	bls.n	80170c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80170c0:	f04f 33ff 	mov.w	r3, #4294967295
 80170c4:	e106      	b.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	685b      	ldr	r3, [r3, #4]
 80170ca:	627b      	str	r3, [r7, #36]	; 0x24
 80170cc:	e068      	b.n	80171a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80170ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d0:	685b      	ldr	r3, [r3, #4]
 80170d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80170d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d6:	889b      	ldrh	r3, [r3, #4]
 80170d8:	b29a      	uxth	r2, r3
 80170da:	693b      	ldr	r3, [r7, #16]
 80170dc:	889b      	ldrh	r3, [r3, #4]
 80170de:	b29b      	uxth	r3, r3
 80170e0:	429a      	cmp	r2, r3
 80170e2:	d235      	bcs.n	8017150 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80170e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80170ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d020      	beq.n	8017132 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80170f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f2:	889b      	ldrh	r3, [r3, #4]
 80170f4:	b29a      	uxth	r2, r3
 80170f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f8:	88db      	ldrh	r3, [r3, #6]
 80170fa:	b29b      	uxth	r3, r3
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d307      	bcc.n	8017110 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017102:	88db      	ldrh	r3, [r3, #6]
 8017104:	b29a      	uxth	r2, r3
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	889b      	ldrh	r3, [r3, #4]
 801710a:	b29b      	uxth	r3, r3
 801710c:	429a      	cmp	r2, r3
 801710e:	d902      	bls.n	8017116 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017110:	f04f 33ff 	mov.w	r3, #4294967295
 8017114:	e0de      	b.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017118:	68ba      	ldr	r2, [r7, #8]
 801711a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801711e:	88db      	ldrh	r3, [r3, #6]
 8017120:	b29a      	uxth	r2, r3
 8017122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017124:	889b      	ldrh	r3, [r3, #4]
 8017126:	b29b      	uxth	r3, r3
 8017128:	429a      	cmp	r2, r3
 801712a:	d03d      	beq.n	80171a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801712c:	2300      	movs	r3, #0
 801712e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017130:	e03a      	b.n	80171a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017134:	88db      	ldrh	r3, [r3, #6]
 8017136:	b29a      	uxth	r2, r3
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	889b      	ldrh	r3, [r3, #4]
 801713c:	b29b      	uxth	r3, r3
 801713e:	429a      	cmp	r2, r3
 8017140:	d902      	bls.n	8017148 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017142:	f04f 33ff 	mov.w	r3, #4294967295
 8017146:	e0c5      	b.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	68ba      	ldr	r2, [r7, #8]
 801714c:	605a      	str	r2, [r3, #4]
      break;
 801714e:	e02b      	b.n	80171a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017152:	889b      	ldrh	r3, [r3, #4]
 8017154:	b29a      	uxth	r2, r3
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	889b      	ldrh	r3, [r3, #4]
 801715a:	b29b      	uxth	r3, r3
 801715c:	429a      	cmp	r2, r3
 801715e:	d102      	bne.n	8017166 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017160:	f04f 33ff 	mov.w	r3, #4294967295
 8017164:	e0b6      	b.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017168:	889b      	ldrh	r3, [r3, #4]
 801716a:	b29a      	uxth	r2, r3
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	88db      	ldrh	r3, [r3, #6]
 8017170:	b29b      	uxth	r3, r3
 8017172:	429a      	cmp	r2, r3
 8017174:	d202      	bcs.n	801717c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017176:	f04f 33ff 	mov.w	r3, #4294967295
 801717a:	e0ab      	b.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717e:	2b00      	cmp	r3, #0
 8017180:	d009      	beq.n	8017196 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017184:	88db      	ldrh	r3, [r3, #6]
 8017186:	b29a      	uxth	r2, r3
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	889b      	ldrh	r3, [r3, #4]
 801718c:	b29b      	uxth	r3, r3
 801718e:	429a      	cmp	r2, r3
 8017190:	d001      	beq.n	8017196 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80171a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d193      	bne.n	80170ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80171a6:	e000      	b.n	80171aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80171a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80171aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d12d      	bne.n	801720c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80171b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d01c      	beq.n	80171f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80171b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b8:	88db      	ldrh	r3, [r3, #6]
 80171ba:	b29a      	uxth	r2, r3
 80171bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171be:	889b      	ldrh	r3, [r3, #4]
 80171c0:	b29b      	uxth	r3, r3
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d906      	bls.n	80171d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80171c6:	4b45      	ldr	r3, [pc, #276]	; (80172dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80171c8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80171cc:	4944      	ldr	r1, [pc, #272]	; (80172e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80171ce:	4845      	ldr	r0, [pc, #276]	; (80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80171d0:	f000 ffec 	bl	80181ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80171d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d6:	68ba      	ldr	r2, [r7, #8]
 80171d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80171da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171dc:	88db      	ldrh	r3, [r3, #6]
 80171de:	b29a      	uxth	r2, r3
 80171e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e2:	889b      	ldrh	r3, [r3, #4]
 80171e4:	b29b      	uxth	r3, r3
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d010      	beq.n	801720c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80171ea:	2300      	movs	r3, #0
 80171ec:	623b      	str	r3, [r7, #32]
 80171ee:	e00d      	b.n	801720c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d006      	beq.n	8017206 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80171f8:	4b38      	ldr	r3, [pc, #224]	; (80172dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80171fa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80171fe:	493a      	ldr	r1, [pc, #232]	; (80172e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017200:	4838      	ldr	r0, [pc, #224]	; (80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017202:	f000 ffd3 	bl	80181ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	68ba      	ldr	r2, [r7, #8]
 801720a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d105      	bne.n	801721e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	7f9b      	ldrb	r3, [r3, #30]
 8017216:	f003 0301 	and.w	r3, r3, #1
 801721a:	2b00      	cmp	r3, #0
 801721c:	d059      	beq.n	80172d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801721e:	6a3b      	ldr	r3, [r7, #32]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d04f      	beq.n	80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	685b      	ldr	r3, [r3, #4]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d006      	beq.n	801723a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	685b      	ldr	r3, [r3, #4]
 8017232:	889b      	ldrh	r3, [r3, #4]
 8017234:	b29b      	uxth	r3, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	d002      	beq.n	8017240 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801723a:	2300      	movs	r3, #0
 801723c:	623b      	str	r3, [r7, #32]
 801723e:	e041      	b.n	80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017242:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801724a:	e012      	b.n	8017272 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017254:	88db      	ldrh	r3, [r3, #6]
 8017256:	b29a      	uxth	r2, r3
 8017258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725a:	889b      	ldrh	r3, [r3, #4]
 801725c:	b29b      	uxth	r3, r3
 801725e:	429a      	cmp	r2, r3
 8017260:	d002      	beq.n	8017268 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017262:	2300      	movs	r3, #0
 8017264:	623b      	str	r3, [r7, #32]
            break;
 8017266:	e007      	b.n	8017278 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017274:	2b00      	cmp	r3, #0
 8017276:	d1e9      	bne.n	801724c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017278:	6a3b      	ldr	r3, [r7, #32]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d022      	beq.n	80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	685b      	ldr	r3, [r3, #4]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d106      	bne.n	8017294 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017286:	4b15      	ldr	r3, [pc, #84]	; (80172dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017288:	f240 12df 	movw	r2, #479	; 0x1df
 801728c:	4917      	ldr	r1, [pc, #92]	; (80172ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801728e:	4815      	ldr	r0, [pc, #84]	; (80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017290:	f000 ff8c 	bl	80181ac <iprintf>
          LWIP_ASSERT("sanity check",
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	685b      	ldr	r3, [r3, #4]
 801729a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801729c:	429a      	cmp	r2, r3
 801729e:	d106      	bne.n	80172ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80172a0:	4b0e      	ldr	r3, [pc, #56]	; (80172dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80172a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80172a6:	4911      	ldr	r1, [pc, #68]	; (80172ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80172a8:	480e      	ldr	r0, [pc, #56]	; (80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80172aa:	f000 ff7f 	bl	80181ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80172ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d006      	beq.n	80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80172b6:	4b09      	ldr	r3, [pc, #36]	; (80172dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80172b8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80172bc:	490c      	ldr	r1, [pc, #48]	; (80172f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80172be:	4809      	ldr	r0, [pc, #36]	; (80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80172c0:	f000 ff74 	bl	80181ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80172c4:	6a3b      	ldr	r3, [r7, #32]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	bf14      	ite	ne
 80172ca:	2301      	movne	r3, #1
 80172cc:	2300      	moveq	r3, #0
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	e000      	b.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80172d2:	2300      	movs	r3, #0
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	3730      	adds	r7, #48	; 0x30
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}
 80172dc:	0801c2d4 	.word	0x0801c2d4
 80172e0:	0801c3b8 	.word	0x0801c3b8
 80172e4:	0801c31c 	.word	0x0801c31c
 80172e8:	0801c3d8 	.word	0x0801c3d8
 80172ec:	0801c410 	.word	0x0801c410
 80172f0:	0801c420 	.word	0x0801c420

080172f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b08e      	sub	sp, #56	; 0x38
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	f003 030f 	and.w	r3, r3, #15
 801730a:	b2db      	uxtb	r3, r3
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	b2db      	uxtb	r3, r3
 8017310:	2b14      	cmp	r3, #20
 8017312:	f040 8167 	bne.w	80175e4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017318:	88db      	ldrh	r3, [r3, #6]
 801731a:	b29b      	uxth	r3, r3
 801731c:	4618      	mov	r0, r3
 801731e:	f7f5 fdf1 	bl	800cf04 <lwip_htons>
 8017322:	4603      	mov	r3, r0
 8017324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017328:	b29b      	uxth	r3, r3
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017330:	885b      	ldrh	r3, [r3, #2]
 8017332:	b29b      	uxth	r3, r3
 8017334:	4618      	mov	r0, r3
 8017336:	f7f5 fde5 	bl	800cf04 <lwip_htons>
 801733a:	4603      	mov	r3, r0
 801733c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	f003 030f 	and.w	r3, r3, #15
 8017346:	b2db      	uxtb	r3, r3
 8017348:	009b      	lsls	r3, r3, #2
 801734a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801734e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017352:	b29b      	uxth	r3, r3
 8017354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017356:	429a      	cmp	r2, r3
 8017358:	f0c0 8146 	bcc.w	80175e8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801735c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017360:	b29b      	uxth	r3, r3
 8017362:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017364:	1ad3      	subs	r3, r2, r3
 8017366:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f7f7 fa05 	bl	800e778 <pbuf_clen>
 801736e:	4603      	mov	r3, r0
 8017370:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017372:	4b9f      	ldr	r3, [pc, #636]	; (80175f0 <ip4_reass+0x2fc>)
 8017374:	881b      	ldrh	r3, [r3, #0]
 8017376:	461a      	mov	r2, r3
 8017378:	8c3b      	ldrh	r3, [r7, #32]
 801737a:	4413      	add	r3, r2
 801737c:	2b0a      	cmp	r3, #10
 801737e:	dd10      	ble.n	80173a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017380:	8c3b      	ldrh	r3, [r7, #32]
 8017382:	4619      	mov	r1, r3
 8017384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017386:	f7ff fd81 	bl	8016e8c <ip_reass_remove_oldest_datagram>
 801738a:	4603      	mov	r3, r0
 801738c:	2b00      	cmp	r3, #0
 801738e:	f000 812d 	beq.w	80175ec <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017392:	4b97      	ldr	r3, [pc, #604]	; (80175f0 <ip4_reass+0x2fc>)
 8017394:	881b      	ldrh	r3, [r3, #0]
 8017396:	461a      	mov	r2, r3
 8017398:	8c3b      	ldrh	r3, [r7, #32]
 801739a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801739c:	2b0a      	cmp	r3, #10
 801739e:	f300 8125 	bgt.w	80175ec <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80173a2:	4b94      	ldr	r3, [pc, #592]	; (80175f4 <ip4_reass+0x300>)
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	633b      	str	r3, [r7, #48]	; 0x30
 80173a8:	e015      	b.n	80173d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80173aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ac:	695a      	ldr	r2, [r3, #20]
 80173ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b0:	68db      	ldr	r3, [r3, #12]
 80173b2:	429a      	cmp	r2, r3
 80173b4:	d10c      	bne.n	80173d0 <ip4_reass+0xdc>
 80173b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b8:	699a      	ldr	r2, [r3, #24]
 80173ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173bc:	691b      	ldr	r3, [r3, #16]
 80173be:	429a      	cmp	r2, r3
 80173c0:	d106      	bne.n	80173d0 <ip4_reass+0xdc>
 80173c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c4:	899a      	ldrh	r2, [r3, #12]
 80173c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c8:	889b      	ldrh	r3, [r3, #4]
 80173ca:	b29b      	uxth	r3, r3
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d006      	beq.n	80173de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80173d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	633b      	str	r3, [r7, #48]	; 0x30
 80173d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d1e6      	bne.n	80173aa <ip4_reass+0xb6>
 80173dc:	e000      	b.n	80173e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80173de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80173e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d109      	bne.n	80173fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80173e6:	8c3b      	ldrh	r3, [r7, #32]
 80173e8:	4619      	mov	r1, r3
 80173ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173ec:	f7ff fdb0 	bl	8016f50 <ip_reass_enqueue_new_datagram>
 80173f0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80173f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d11c      	bne.n	8017432 <ip4_reass+0x13e>
      goto nullreturn;
 80173f8:	e109      	b.n	801760e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80173fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fc:	88db      	ldrh	r3, [r3, #6]
 80173fe:	b29b      	uxth	r3, r3
 8017400:	4618      	mov	r0, r3
 8017402:	f7f5 fd7f 	bl	800cf04 <lwip_htons>
 8017406:	4603      	mov	r3, r0
 8017408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801740c:	2b00      	cmp	r3, #0
 801740e:	d110      	bne.n	8017432 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017412:	89db      	ldrh	r3, [r3, #14]
 8017414:	4618      	mov	r0, r3
 8017416:	f7f5 fd75 	bl	800cf04 <lwip_htons>
 801741a:	4603      	mov	r3, r0
 801741c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017420:	2b00      	cmp	r3, #0
 8017422:	d006      	beq.n	8017432 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017426:	3308      	adds	r3, #8
 8017428:	2214      	movs	r2, #20
 801742a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801742c:	4618      	mov	r0, r3
 801742e:	f000 fe4c 	bl	80180ca <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017434:	88db      	ldrh	r3, [r3, #6]
 8017436:	b29b      	uxth	r3, r3
 8017438:	f003 0320 	and.w	r3, r3, #32
 801743c:	2b00      	cmp	r3, #0
 801743e:	bf0c      	ite	eq
 8017440:	2301      	moveq	r3, #1
 8017442:	2300      	movne	r3, #0
 8017444:	b2db      	uxtb	r3, r3
 8017446:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017448:	69fb      	ldr	r3, [r7, #28]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00e      	beq.n	801746c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801744e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017452:	4413      	add	r3, r2
 8017454:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017456:	8b7a      	ldrh	r2, [r7, #26]
 8017458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801745a:	429a      	cmp	r2, r3
 801745c:	f0c0 80a0 	bcc.w	80175a0 <ip4_reass+0x2ac>
 8017460:	8b7b      	ldrh	r3, [r7, #26]
 8017462:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017466:	4293      	cmp	r3, r2
 8017468:	f200 809a 	bhi.w	80175a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801746c:	69fa      	ldr	r2, [r7, #28]
 801746e:	6879      	ldr	r1, [r7, #4]
 8017470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017472:	f7ff fdd5 	bl	8017020 <ip_reass_chain_frag_into_datagram_and_validate>
 8017476:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801747e:	f000 8091 	beq.w	80175a4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017482:	4b5b      	ldr	r3, [pc, #364]	; (80175f0 <ip4_reass+0x2fc>)
 8017484:	881a      	ldrh	r2, [r3, #0]
 8017486:	8c3b      	ldrh	r3, [r7, #32]
 8017488:	4413      	add	r3, r2
 801748a:	b29a      	uxth	r2, r3
 801748c:	4b58      	ldr	r3, [pc, #352]	; (80175f0 <ip4_reass+0x2fc>)
 801748e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d00d      	beq.n	80174b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017496:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801749a:	4413      	add	r3, r2
 801749c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a0:	8a7a      	ldrh	r2, [r7, #18]
 80174a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80174a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a6:	7f9b      	ldrb	r3, [r3, #30]
 80174a8:	f043 0301 	orr.w	r3, r3, #1
 80174ac:	b2da      	uxtb	r2, r3
 80174ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80174b2:	697b      	ldr	r3, [r7, #20]
 80174b4:	2b01      	cmp	r3, #1
 80174b6:	d171      	bne.n	801759c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80174b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ba:	8b9b      	ldrh	r3, [r3, #28]
 80174bc:	3314      	adds	r3, #20
 80174be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80174c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c2:	685b      	ldr	r3, [r3, #4]
 80174c4:	685b      	ldr	r3, [r3, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80174ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174cc:	685b      	ldr	r3, [r3, #4]
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80174d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d4:	3308      	adds	r3, #8
 80174d6:	2214      	movs	r2, #20
 80174d8:	4619      	mov	r1, r3
 80174da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174dc:	f000 fdf5 	bl	80180ca <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80174e0:	8a3b      	ldrh	r3, [r7, #16]
 80174e2:	4618      	mov	r0, r3
 80174e4:	f7f5 fd0e 	bl	800cf04 <lwip_htons>
 80174e8:	4603      	mov	r3, r0
 80174ea:	461a      	mov	r2, r3
 80174ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80174f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f2:	2200      	movs	r2, #0
 80174f4:	719a      	strb	r2, [r3, #6]
 80174f6:	2200      	movs	r2, #0
 80174f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80174fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fc:	2200      	movs	r2, #0
 80174fe:	729a      	strb	r2, [r3, #10]
 8017500:	2200      	movs	r2, #0
 8017502:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017506:	685b      	ldr	r3, [r3, #4]
 8017508:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801750a:	e00d      	b.n	8017528 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801750e:	685b      	ldr	r3, [r3, #4]
 8017510:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017512:	2114      	movs	r1, #20
 8017514:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017516:	f7f7 f81b 	bl	800e550 <pbuf_remove_header>
      pbuf_cat(p, r);
 801751a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	f7f7 f96b 	bl	800e7f8 <pbuf_cat>
      r = iprh->next_pbuf;
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801752a:	2b00      	cmp	r3, #0
 801752c:	d1ee      	bne.n	801750c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801752e:	4b31      	ldr	r3, [pc, #196]	; (80175f4 <ip4_reass+0x300>)
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017534:	429a      	cmp	r2, r3
 8017536:	d102      	bne.n	801753e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017538:	2300      	movs	r3, #0
 801753a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801753c:	e010      	b.n	8017560 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801753e:	4b2d      	ldr	r3, [pc, #180]	; (80175f4 <ip4_reass+0x300>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017544:	e007      	b.n	8017556 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801754c:	429a      	cmp	r2, r3
 801754e:	d006      	beq.n	801755e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017558:	2b00      	cmp	r3, #0
 801755a:	d1f4      	bne.n	8017546 <ip4_reass+0x252>
 801755c:	e000      	b.n	8017560 <ip4_reass+0x26c>
          break;
 801755e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017564:	f7ff fd2e 	bl	8016fc4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f7f7 f905 	bl	800e778 <pbuf_clen>
 801756e:	4603      	mov	r3, r0
 8017570:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017572:	4b1f      	ldr	r3, [pc, #124]	; (80175f0 <ip4_reass+0x2fc>)
 8017574:	881b      	ldrh	r3, [r3, #0]
 8017576:	8c3a      	ldrh	r2, [r7, #32]
 8017578:	429a      	cmp	r2, r3
 801757a:	d906      	bls.n	801758a <ip4_reass+0x296>
 801757c:	4b1e      	ldr	r3, [pc, #120]	; (80175f8 <ip4_reass+0x304>)
 801757e:	f240 229b 	movw	r2, #667	; 0x29b
 8017582:	491e      	ldr	r1, [pc, #120]	; (80175fc <ip4_reass+0x308>)
 8017584:	481e      	ldr	r0, [pc, #120]	; (8017600 <ip4_reass+0x30c>)
 8017586:	f000 fe11 	bl	80181ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801758a:	4b19      	ldr	r3, [pc, #100]	; (80175f0 <ip4_reass+0x2fc>)
 801758c:	881a      	ldrh	r2, [r3, #0]
 801758e:	8c3b      	ldrh	r3, [r7, #32]
 8017590:	1ad3      	subs	r3, r2, r3
 8017592:	b29a      	uxth	r2, r3
 8017594:	4b16      	ldr	r3, [pc, #88]	; (80175f0 <ip4_reass+0x2fc>)
 8017596:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	e03c      	b.n	8017616 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801759c:	2300      	movs	r3, #0
 801759e:	e03a      	b.n	8017616 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80175a0:	bf00      	nop
 80175a2:	e000      	b.n	80175a6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80175a4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80175a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d106      	bne.n	80175ba <ip4_reass+0x2c6>
 80175ac:	4b12      	ldr	r3, [pc, #72]	; (80175f8 <ip4_reass+0x304>)
 80175ae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80175b2:	4914      	ldr	r1, [pc, #80]	; (8017604 <ip4_reass+0x310>)
 80175b4:	4812      	ldr	r0, [pc, #72]	; (8017600 <ip4_reass+0x30c>)
 80175b6:	f000 fdf9 	bl	80181ac <iprintf>
  if (ipr->p == NULL) {
 80175ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175bc:	685b      	ldr	r3, [r3, #4]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d124      	bne.n	801760c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80175c2:	4b0c      	ldr	r3, [pc, #48]	; (80175f4 <ip4_reass+0x300>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175c8:	429a      	cmp	r2, r3
 80175ca:	d006      	beq.n	80175da <ip4_reass+0x2e6>
 80175cc:	4b0a      	ldr	r3, [pc, #40]	; (80175f8 <ip4_reass+0x304>)
 80175ce:	f240 22ab 	movw	r2, #683	; 0x2ab
 80175d2:	490d      	ldr	r1, [pc, #52]	; (8017608 <ip4_reass+0x314>)
 80175d4:	480a      	ldr	r0, [pc, #40]	; (8017600 <ip4_reass+0x30c>)
 80175d6:	f000 fde9 	bl	80181ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80175da:	2100      	movs	r1, #0
 80175dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175de:	f7ff fcf1 	bl	8016fc4 <ip_reass_dequeue_datagram>
 80175e2:	e014      	b.n	801760e <ip4_reass+0x31a>
    goto nullreturn;
 80175e4:	bf00      	nop
 80175e6:	e012      	b.n	801760e <ip4_reass+0x31a>
    goto nullreturn;
 80175e8:	bf00      	nop
 80175ea:	e010      	b.n	801760e <ip4_reass+0x31a>
      goto nullreturn;
 80175ec:	bf00      	nop
 80175ee:	e00e      	b.n	801760e <ip4_reass+0x31a>
 80175f0:	20004cb0 	.word	0x20004cb0
 80175f4:	20004cac 	.word	0x20004cac
 80175f8:	0801c2d4 	.word	0x0801c2d4
 80175fc:	0801c444 	.word	0x0801c444
 8017600:	0801c31c 	.word	0x0801c31c
 8017604:	0801c460 	.word	0x0801c460
 8017608:	0801c46c 	.word	0x0801c46c
  }

nullreturn:
 801760c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f7f7 f824 	bl	800e65c <pbuf_free>
  return NULL;
 8017614:	2300      	movs	r3, #0
}
 8017616:	4618      	mov	r0, r3
 8017618:	3738      	adds	r7, #56	; 0x38
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop

08017620 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017624:	2005      	movs	r0, #5
 8017626:	f7f6 f923 	bl	800d870 <memp_malloc>
 801762a:	4603      	mov	r3, r0
}
 801762c:	4618      	mov	r0, r3
 801762e:	bd80      	pop	{r7, pc}

08017630 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d106      	bne.n	801764c <ip_frag_free_pbuf_custom_ref+0x1c>
 801763e:	4b07      	ldr	r3, [pc, #28]	; (801765c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017640:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017644:	4906      	ldr	r1, [pc, #24]	; (8017660 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017646:	4807      	ldr	r0, [pc, #28]	; (8017664 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017648:	f000 fdb0 	bl	80181ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801764c:	6879      	ldr	r1, [r7, #4]
 801764e:	2005      	movs	r0, #5
 8017650:	f7f6 f960 	bl	800d914 <memp_free>
}
 8017654:	bf00      	nop
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	0801c2d4 	.word	0x0801c2d4
 8017660:	0801c48c 	.word	0x0801c48c
 8017664:	0801c31c 	.word	0x0801c31c

08017668 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b084      	sub	sp, #16
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d106      	bne.n	8017688 <ipfrag_free_pbuf_custom+0x20>
 801767a:	4b11      	ldr	r3, [pc, #68]	; (80176c0 <ipfrag_free_pbuf_custom+0x58>)
 801767c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017680:	4910      	ldr	r1, [pc, #64]	; (80176c4 <ipfrag_free_pbuf_custom+0x5c>)
 8017682:	4811      	ldr	r0, [pc, #68]	; (80176c8 <ipfrag_free_pbuf_custom+0x60>)
 8017684:	f000 fd92 	bl	80181ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017688:	68fa      	ldr	r2, [r7, #12]
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	429a      	cmp	r2, r3
 801768e:	d006      	beq.n	801769e <ipfrag_free_pbuf_custom+0x36>
 8017690:	4b0b      	ldr	r3, [pc, #44]	; (80176c0 <ipfrag_free_pbuf_custom+0x58>)
 8017692:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017696:	490d      	ldr	r1, [pc, #52]	; (80176cc <ipfrag_free_pbuf_custom+0x64>)
 8017698:	480b      	ldr	r0, [pc, #44]	; (80176c8 <ipfrag_free_pbuf_custom+0x60>)
 801769a:	f000 fd87 	bl	80181ac <iprintf>
  if (pcr->original != NULL) {
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	695b      	ldr	r3, [r3, #20]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d004      	beq.n	80176b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	695b      	ldr	r3, [r3, #20]
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7f6 ffd6 	bl	800e65c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80176b0:	68f8      	ldr	r0, [r7, #12]
 80176b2:	f7ff ffbd 	bl	8017630 <ip_frag_free_pbuf_custom_ref>
}
 80176b6:	bf00      	nop
 80176b8:	3710      	adds	r7, #16
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	0801c2d4 	.word	0x0801c2d4
 80176c4:	0801c498 	.word	0x0801c498
 80176c8:	0801c31c 	.word	0x0801c31c
 80176cc:	0801c4a4 	.word	0x0801c4a4

080176d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b094      	sub	sp, #80	; 0x50
 80176d4:	af02      	add	r7, sp, #8
 80176d6:	60f8      	str	r0, [r7, #12]
 80176d8:	60b9      	str	r1, [r7, #8]
 80176da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80176dc:	2300      	movs	r3, #0
 80176de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80176e2:	68bb      	ldr	r3, [r7, #8]
 80176e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80176e6:	3b14      	subs	r3, #20
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	da00      	bge.n	80176ee <ip4_frag+0x1e>
 80176ec:	3307      	adds	r3, #7
 80176ee:	10db      	asrs	r3, r3, #3
 80176f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80176f2:	2314      	movs	r3, #20
 80176f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	685b      	ldr	r3, [r3, #4]
 80176fa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80176fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017702:	781b      	ldrb	r3, [r3, #0]
 8017704:	f003 030f 	and.w	r3, r3, #15
 8017708:	b2db      	uxtb	r3, r3
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	b2db      	uxtb	r3, r3
 801770e:	2b14      	cmp	r3, #20
 8017710:	d002      	beq.n	8017718 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017712:	f06f 0305 	mvn.w	r3, #5
 8017716:	e110      	b.n	801793a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	895b      	ldrh	r3, [r3, #10]
 801771c:	2b13      	cmp	r3, #19
 801771e:	d809      	bhi.n	8017734 <ip4_frag+0x64>
 8017720:	4b88      	ldr	r3, [pc, #544]	; (8017944 <ip4_frag+0x274>)
 8017722:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017726:	4988      	ldr	r1, [pc, #544]	; (8017948 <ip4_frag+0x278>)
 8017728:	4888      	ldr	r0, [pc, #544]	; (801794c <ip4_frag+0x27c>)
 801772a:	f000 fd3f 	bl	80181ac <iprintf>
 801772e:	f06f 0305 	mvn.w	r3, #5
 8017732:	e102      	b.n	801793a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017736:	88db      	ldrh	r3, [r3, #6]
 8017738:	b29b      	uxth	r3, r3
 801773a:	4618      	mov	r0, r3
 801773c:	f7f5 fbe2 	bl	800cf04 <lwip_htons>
 8017740:	4603      	mov	r3, r0
 8017742:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017744:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017746:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801774a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801774e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017754:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	891b      	ldrh	r3, [r3, #8]
 801775a:	3b14      	subs	r3, #20
 801775c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017760:	e0e1      	b.n	8017926 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017762:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017764:	00db      	lsls	r3, r3, #3
 8017766:	b29b      	uxth	r3, r3
 8017768:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801776c:	4293      	cmp	r3, r2
 801776e:	bf28      	it	cs
 8017770:	4613      	movcs	r3, r2
 8017772:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017774:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017778:	2114      	movs	r1, #20
 801777a:	200e      	movs	r0, #14
 801777c:	f7f6 fc8a 	bl	800e094 <pbuf_alloc>
 8017780:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017784:	2b00      	cmp	r3, #0
 8017786:	f000 80d5 	beq.w	8017934 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778c:	895b      	ldrh	r3, [r3, #10]
 801778e:	2b13      	cmp	r3, #19
 8017790:	d806      	bhi.n	80177a0 <ip4_frag+0xd0>
 8017792:	4b6c      	ldr	r3, [pc, #432]	; (8017944 <ip4_frag+0x274>)
 8017794:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017798:	496d      	ldr	r1, [pc, #436]	; (8017950 <ip4_frag+0x280>)
 801779a:	486c      	ldr	r0, [pc, #432]	; (801794c <ip4_frag+0x27c>)
 801779c:	f000 fd06 	bl	80181ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80177a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	2214      	movs	r2, #20
 80177a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80177a8:	4618      	mov	r0, r3
 80177aa:	f000 fc8e 	bl	80180ca <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80177ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b0:	685b      	ldr	r3, [r3, #4]
 80177b2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80177b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80177b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80177ba:	e064      	b.n	8017886 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	895a      	ldrh	r2, [r3, #10]
 80177c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80177c2:	1ad3      	subs	r3, r2, r3
 80177c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	895b      	ldrh	r3, [r3, #10]
 80177ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d906      	bls.n	80177de <ip4_frag+0x10e>
 80177d0:	4b5c      	ldr	r3, [pc, #368]	; (8017944 <ip4_frag+0x274>)
 80177d2:	f240 322d 	movw	r2, #813	; 0x32d
 80177d6:	495f      	ldr	r1, [pc, #380]	; (8017954 <ip4_frag+0x284>)
 80177d8:	485c      	ldr	r0, [pc, #368]	; (801794c <ip4_frag+0x27c>)
 80177da:	f000 fce7 	bl	80181ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80177de:	8bfa      	ldrh	r2, [r7, #30]
 80177e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80177e4:	4293      	cmp	r3, r2
 80177e6:	bf28      	it	cs
 80177e8:	4613      	movcs	r3, r2
 80177ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80177ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d105      	bne.n	8017802 <ip4_frag+0x132>
        poff = 0;
 80177f6:	2300      	movs	r3, #0
 80177f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	60fb      	str	r3, [r7, #12]
        continue;
 8017800:	e041      	b.n	8017886 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017802:	f7ff ff0d 	bl	8017620 <ip_frag_alloc_pbuf_custom_ref>
 8017806:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017808:	69bb      	ldr	r3, [r7, #24]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d103      	bne.n	8017816 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801780e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017810:	f7f6 ff24 	bl	800e65c <pbuf_free>
        goto memerr;
 8017814:	e08f      	b.n	8017936 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017816:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801781c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801781e:	4413      	add	r3, r2
 8017820:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017824:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017828:	9201      	str	r2, [sp, #4]
 801782a:	9300      	str	r3, [sp, #0]
 801782c:	4603      	mov	r3, r0
 801782e:	2241      	movs	r2, #65	; 0x41
 8017830:	2000      	movs	r0, #0
 8017832:	f7f6 fd59 	bl	800e2e8 <pbuf_alloced_custom>
 8017836:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d106      	bne.n	801784c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801783e:	69b8      	ldr	r0, [r7, #24]
 8017840:	f7ff fef6 	bl	8017630 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017846:	f7f6 ff09 	bl	800e65c <pbuf_free>
        goto memerr;
 801784a:	e074      	b.n	8017936 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801784c:	68f8      	ldr	r0, [r7, #12]
 801784e:	f7f6 ffab 	bl	800e7a8 <pbuf_ref>
      pcr->original = p;
 8017852:	69bb      	ldr	r3, [r7, #24]
 8017854:	68fa      	ldr	r2, [r7, #12]
 8017856:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017858:	69bb      	ldr	r3, [r7, #24]
 801785a:	4a3f      	ldr	r2, [pc, #252]	; (8017958 <ip4_frag+0x288>)
 801785c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801785e:	6979      	ldr	r1, [r7, #20]
 8017860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017862:	f7f6 ffc9 	bl	800e7f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017866:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801786a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801786e:	1ad3      	subs	r3, r2, r3
 8017870:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017874:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017878:	2b00      	cmp	r3, #0
 801787a:	d004      	beq.n	8017886 <ip4_frag+0x1b6>
        poff = 0;
 801787c:	2300      	movs	r3, #0
 801787e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017886:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801788a:	2b00      	cmp	r3, #0
 801788c:	d196      	bne.n	80177bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801788e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017890:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017894:	4413      	add	r3, r2
 8017896:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801789c:	f1a3 0213 	sub.w	r2, r3, #19
 80178a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80178a4:	429a      	cmp	r2, r3
 80178a6:	bfcc      	ite	gt
 80178a8:	2301      	movgt	r3, #1
 80178aa:	2300      	movle	r3, #0
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80178b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80178b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80178b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80178ba:	6a3b      	ldr	r3, [r7, #32]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d002      	beq.n	80178c6 <ip4_frag+0x1f6>
 80178c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d003      	beq.n	80178ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80178c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80178c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80178cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80178ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7f5 fb17 	bl	800cf04 <lwip_htons>
 80178d6:	4603      	mov	r3, r0
 80178d8:	461a      	mov	r2, r3
 80178da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80178de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80178e0:	3314      	adds	r3, #20
 80178e2:	b29b      	uxth	r3, r3
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7f5 fb0d 	bl	800cf04 <lwip_htons>
 80178ea:	4603      	mov	r3, r0
 80178ec:	461a      	mov	r2, r3
 80178ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80178f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f4:	2200      	movs	r2, #0
 80178f6:	729a      	strb	r2, [r3, #10]
 80178f8:	2200      	movs	r2, #0
 80178fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	695b      	ldr	r3, [r3, #20]
 8017900:	687a      	ldr	r2, [r7, #4]
 8017902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017904:	68b8      	ldr	r0, [r7, #8]
 8017906:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801790a:	f7f6 fea7 	bl	800e65c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801790e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017914:	1ad3      	subs	r3, r2, r3
 8017916:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801791a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801791e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017920:	4413      	add	r3, r2
 8017922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801792a:	2b00      	cmp	r3, #0
 801792c:	f47f af19 	bne.w	8017762 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017930:	2300      	movs	r3, #0
 8017932:	e002      	b.n	801793a <ip4_frag+0x26a>
      goto memerr;
 8017934:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017936:	f04f 33ff 	mov.w	r3, #4294967295
}
 801793a:	4618      	mov	r0, r3
 801793c:	3748      	adds	r7, #72	; 0x48
 801793e:	46bd      	mov	sp, r7
 8017940:	bd80      	pop	{r7, pc}
 8017942:	bf00      	nop
 8017944:	0801c2d4 	.word	0x0801c2d4
 8017948:	0801c4b0 	.word	0x0801c4b0
 801794c:	0801c31c 	.word	0x0801c31c
 8017950:	0801c4cc 	.word	0x0801c4cc
 8017954:	0801c4ec 	.word	0x0801c4ec
 8017958:	08017669 	.word	0x08017669

0801795c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b086      	sub	sp, #24
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017966:	230e      	movs	r3, #14
 8017968:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	895b      	ldrh	r3, [r3, #10]
 801796e:	2b0e      	cmp	r3, #14
 8017970:	d96e      	bls.n	8017a50 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	7bdb      	ldrb	r3, [r3, #15]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d106      	bne.n	8017988 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801797a:	683b      	ldr	r3, [r7, #0]
 801797c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017980:	3301      	adds	r3, #1
 8017982:	b2da      	uxtb	r2, r3
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	685b      	ldr	r3, [r3, #4]
 801798c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	7b1a      	ldrb	r2, [r3, #12]
 8017992:	7b5b      	ldrb	r3, [r3, #13]
 8017994:	021b      	lsls	r3, r3, #8
 8017996:	4313      	orrs	r3, r2
 8017998:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801799a:	693b      	ldr	r3, [r7, #16]
 801799c:	781b      	ldrb	r3, [r3, #0]
 801799e:	f003 0301 	and.w	r3, r3, #1
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d023      	beq.n	80179ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80179a6:	693b      	ldr	r3, [r7, #16]
 80179a8:	781b      	ldrb	r3, [r3, #0]
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d10f      	bne.n	80179ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	785b      	ldrb	r3, [r3, #1]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d11b      	bne.n	80179ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80179ba:	2b5e      	cmp	r3, #94	; 0x5e
 80179bc:	d117      	bne.n	80179ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	7b5b      	ldrb	r3, [r3, #13]
 80179c2:	f043 0310 	orr.w	r3, r3, #16
 80179c6:	b2da      	uxtb	r2, r3
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	735a      	strb	r2, [r3, #13]
 80179cc:	e00f      	b.n	80179ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80179ce:	693b      	ldr	r3, [r7, #16]
 80179d0:	2206      	movs	r2, #6
 80179d2:	4928      	ldr	r1, [pc, #160]	; (8017a74 <ethernet_input+0x118>)
 80179d4:	4618      	mov	r0, r3
 80179d6:	f000 fb6a 	bl	80180ae <memcmp>
 80179da:	4603      	mov	r3, r0
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d106      	bne.n	80179ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	7b5b      	ldrb	r3, [r3, #13]
 80179e4:	f043 0308 	orr.w	r3, r3, #8
 80179e8:	b2da      	uxtb	r2, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80179ee:	89fb      	ldrh	r3, [r7, #14]
 80179f0:	2b08      	cmp	r3, #8
 80179f2:	d003      	beq.n	80179fc <ethernet_input+0xa0>
 80179f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80179f8:	d014      	beq.n	8017a24 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80179fa:	e032      	b.n	8017a62 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a02:	f003 0308 	and.w	r3, r3, #8
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d024      	beq.n	8017a54 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017a0a:	8afb      	ldrh	r3, [r7, #22]
 8017a0c:	4619      	mov	r1, r3
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f7f6 fd9e 	bl	800e550 <pbuf_remove_header>
 8017a14:	4603      	mov	r3, r0
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d11e      	bne.n	8017a58 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017a1a:	6839      	ldr	r1, [r7, #0]
 8017a1c:	6878      	ldr	r0, [r7, #4]
 8017a1e:	f7fe ff27 	bl	8016870 <ip4_input>
      break;
 8017a22:	e013      	b.n	8017a4c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017a24:	683b      	ldr	r3, [r7, #0]
 8017a26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a2a:	f003 0308 	and.w	r3, r3, #8
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d014      	beq.n	8017a5c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017a32:	8afb      	ldrh	r3, [r7, #22]
 8017a34:	4619      	mov	r1, r3
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f7f6 fd8a 	bl	800e550 <pbuf_remove_header>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d10e      	bne.n	8017a60 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017a42:	6839      	ldr	r1, [r7, #0]
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f7fe f8c7 	bl	8015bd8 <etharp_input>
      break;
 8017a4a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	e00c      	b.n	8017a6a <ethernet_input+0x10e>
    goto free_and_return;
 8017a50:	bf00      	nop
 8017a52:	e006      	b.n	8017a62 <ethernet_input+0x106>
        goto free_and_return;
 8017a54:	bf00      	nop
 8017a56:	e004      	b.n	8017a62 <ethernet_input+0x106>
        goto free_and_return;
 8017a58:	bf00      	nop
 8017a5a:	e002      	b.n	8017a62 <ethernet_input+0x106>
        goto free_and_return;
 8017a5c:	bf00      	nop
 8017a5e:	e000      	b.n	8017a62 <ethernet_input+0x106>
        goto free_and_return;
 8017a60:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017a62:	6878      	ldr	r0, [r7, #4]
 8017a64:	f7f6 fdfa 	bl	800e65c <pbuf_free>
  return ERR_OK;
 8017a68:	2300      	movs	r3, #0
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3718      	adds	r7, #24
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	bf00      	nop
 8017a74:	0801c6e4 	.word	0x0801c6e4

08017a78 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b086      	sub	sp, #24
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	60f8      	str	r0, [r7, #12]
 8017a80:	60b9      	str	r1, [r7, #8]
 8017a82:	607a      	str	r2, [r7, #4]
 8017a84:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017a86:	8c3b      	ldrh	r3, [r7, #32]
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7f5 fa3b 	bl	800cf04 <lwip_htons>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017a92:	210e      	movs	r1, #14
 8017a94:	68b8      	ldr	r0, [r7, #8]
 8017a96:	f7f6 fd4b 	bl	800e530 <pbuf_add_header>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d125      	bne.n	8017aec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	685b      	ldr	r3, [r3, #4]
 8017aa4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017aa6:	693b      	ldr	r3, [r7, #16]
 8017aa8:	8afa      	ldrh	r2, [r7, #22]
 8017aaa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017aac:	693b      	ldr	r3, [r7, #16]
 8017aae:	2206      	movs	r2, #6
 8017ab0:	6839      	ldr	r1, [r7, #0]
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f000 fb09 	bl	80180ca <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017ab8:	693b      	ldr	r3, [r7, #16]
 8017aba:	3306      	adds	r3, #6
 8017abc:	2206      	movs	r2, #6
 8017abe:	6879      	ldr	r1, [r7, #4]
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f000 fb02 	bl	80180ca <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017acc:	2b06      	cmp	r3, #6
 8017ace:	d006      	beq.n	8017ade <ethernet_output+0x66>
 8017ad0:	4b0a      	ldr	r3, [pc, #40]	; (8017afc <ethernet_output+0x84>)
 8017ad2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017ad6:	490a      	ldr	r1, [pc, #40]	; (8017b00 <ethernet_output+0x88>)
 8017ad8:	480a      	ldr	r0, [pc, #40]	; (8017b04 <ethernet_output+0x8c>)
 8017ada:	f000 fb67 	bl	80181ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	699b      	ldr	r3, [r3, #24]
 8017ae2:	68b9      	ldr	r1, [r7, #8]
 8017ae4:	68f8      	ldr	r0, [r7, #12]
 8017ae6:	4798      	blx	r3
 8017ae8:	4603      	mov	r3, r0
 8017aea:	e002      	b.n	8017af2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017aec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017aee:	f06f 0301 	mvn.w	r3, #1
}
 8017af2:	4618      	mov	r0, r3
 8017af4:	3718      	adds	r7, #24
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	bf00      	nop
 8017afc:	0801c4fc 	.word	0x0801c4fc
 8017b00:	0801c534 	.word	0x0801c534
 8017b04:	0801c568 	.word	0x0801c568

08017b08 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
 8017b10:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017b12:	683b      	ldr	r3, [r7, #0]
 8017b14:	2200      	movs	r2, #0
 8017b16:	2104      	movs	r1, #4
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f7ef faf1 	bl	8007100 <osMessageQueueNew>
 8017b1e:	4602      	mov	r2, r0
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d102      	bne.n	8017b32 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b30:	e000      	b.n	8017b34 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017b32:	2300      	movs	r3, #0
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	3708      	adds	r7, #8
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}

08017b3c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b082      	sub	sp, #8
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f7ef fc45 	bl	80073d8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	4618      	mov	r0, r3
 8017b54:	f7ef fc72 	bl	800743c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017b58:	bf00      	nop
 8017b5a:	3708      	adds	r7, #8
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}

08017b60 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	6818      	ldr	r0, [r3, #0]
 8017b6e:	4639      	mov	r1, r7
 8017b70:	2300      	movs	r3, #0
 8017b72:	2200      	movs	r2, #0
 8017b74:	f7ef fb4a 	bl	800720c <osMessageQueuePut>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d102      	bne.n	8017b84 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	73fb      	strb	r3, [r7, #15]
 8017b82:	e001      	b.n	8017b88 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017b84:	23ff      	movs	r3, #255	; 0xff
 8017b86:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3710      	adds	r7, #16
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bd80      	pop	{r7, pc}

08017b94 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b086      	sub	sp, #24
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	60f8      	str	r0, [r7, #12]
 8017b9c:	60b9      	str	r1, [r7, #8]
 8017b9e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017ba0:	f7ee feda 	bl	8006958 <osKernelGetTickCount>
 8017ba4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d013      	beq.n	8017bd4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	6818      	ldr	r0, [r3, #0]
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	68b9      	ldr	r1, [r7, #8]
 8017bb6:	f7ef fb9d 	bl	80072f4 <osMessageQueueGet>
 8017bba:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d105      	bne.n	8017bce <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017bc2:	f7ee fec9 	bl	8006958 <osKernelGetTickCount>
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	1ad3      	subs	r3, r2, r3
 8017bcc:	e00f      	b.n	8017bee <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017bce:	f04f 33ff 	mov.w	r3, #4294967295
 8017bd2:	e00c      	b.n	8017bee <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	6818      	ldr	r0, [r3, #0]
 8017bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bdc:	2200      	movs	r2, #0
 8017bde:	68b9      	ldr	r1, [r7, #8]
 8017be0:	f7ef fb88 	bl	80072f4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017be4:	f7ee feb8 	bl	8006958 <osKernelGetTickCount>
 8017be8:	4602      	mov	r2, r0
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3718      	adds	r7, #24
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b082      	sub	sp, #8
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
 8017bfe:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6818      	ldr	r0, [r3, #0]
 8017c04:	2300      	movs	r3, #0
 8017c06:	2200      	movs	r2, #0
 8017c08:	6839      	ldr	r1, [r7, #0]
 8017c0a:	f7ef fb73 	bl	80072f4 <osMessageQueueGet>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d101      	bne.n	8017c18 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8017c14:	2300      	movs	r3, #0
 8017c16:	e001      	b.n	8017c1c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017c18:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	3708      	adds	r7, #8
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}

08017c24 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017c24:	b480      	push	{r7}
 8017c26:	b083      	sub	sp, #12
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d101      	bne.n	8017c38 <sys_mbox_valid+0x14>
    return 0;
 8017c34:	2300      	movs	r3, #0
 8017c36:	e000      	b.n	8017c3a <sys_mbox_valid+0x16>
  else
    return 1;
 8017c38:	2301      	movs	r3, #1
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	370c      	adds	r7, #12
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c44:	4770      	bx	lr

08017c46 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017c46:	b480      	push	{r7}
 8017c48:	b083      	sub	sp, #12
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2200      	movs	r2, #0
 8017c52:	601a      	str	r2, [r3, #0]
}
 8017c54:	bf00      	nop
 8017c56:	370c      	adds	r7, #12
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5e:	4770      	bx	lr

08017c60 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b082      	sub	sp, #8
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
 8017c68:	460b      	mov	r3, r1
 8017c6a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8017c6c:	78fb      	ldrb	r3, [r7, #3]
 8017c6e:	2200      	movs	r2, #0
 8017c70:	4619      	mov	r1, r3
 8017c72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017c76:	f7ef f8b3 	bl	8006de0 <osSemaphoreNew>
 8017c7a:	4602      	mov	r2, r0
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d102      	bne.n	8017c8e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017c88:	f04f 33ff 	mov.w	r3, #4294967295
 8017c8c:	e009      	b.n	8017ca2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8017c8e:	78fb      	ldrb	r3, [r7, #3]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d105      	bne.n	8017ca0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2100      	movs	r1, #0
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7ef f93c 	bl	8006f18 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017ca0:	2300      	movs	r3, #0
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3708      	adds	r7, #8
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b084      	sub	sp, #16
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
 8017cb2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8017cb4:	f7ee fe50 	bl	8006958 <osKernelGetTickCount>
 8017cb8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d011      	beq.n	8017ce4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	6839      	ldr	r1, [r7, #0]
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	f7ef f926 	bl	8006f18 <osSemaphoreAcquire>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d105      	bne.n	8017cde <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8017cd2:	f7ee fe41 	bl	8006958 <osKernelGetTickCount>
 8017cd6:	4602      	mov	r2, r0
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	1ad3      	subs	r3, r2, r3
 8017cdc:	e012      	b.n	8017d04 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017cde:	f04f 33ff 	mov.w	r3, #4294967295
 8017ce2:	e00f      	b.n	8017d04 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8017ce4:	bf00      	nop
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	f04f 31ff 	mov.w	r1, #4294967295
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7ef f912 	bl	8006f18 <osSemaphoreAcquire>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d1f5      	bne.n	8017ce6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8017cfa:	f7ee fe2d 	bl	8006958 <osKernelGetTickCount>
 8017cfe:	4602      	mov	r2, r0
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	3710      	adds	r7, #16
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	bd80      	pop	{r7, pc}

08017d0c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f7ef f963 	bl	8006fe4 <osSemaphoreRelease>
}
 8017d1e:	bf00      	nop
 8017d20:	3708      	adds	r7, #8
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}

08017d26 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017d26:	b580      	push	{r7, lr}
 8017d28:	b082      	sub	sp, #8
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	4618      	mov	r0, r3
 8017d34:	f7ef f9ae 	bl	8007094 <osSemaphoreDelete>
}
 8017d38:	bf00      	nop
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017d40:	b480      	push	{r7}
 8017d42:	b083      	sub	sp, #12
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d101      	bne.n	8017d54 <sys_sem_valid+0x14>
    return 0;
 8017d50:	2300      	movs	r3, #0
 8017d52:	e000      	b.n	8017d56 <sys_sem_valid+0x16>
  else
    return 1;
 8017d54:	2301      	movs	r3, #1
}
 8017d56:	4618      	mov	r0, r3
 8017d58:	370c      	adds	r7, #12
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d60:	4770      	bx	lr

08017d62 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017d62:	b480      	push	{r7}
 8017d64:	b083      	sub	sp, #12
 8017d66:	af00      	add	r7, sp, #0
 8017d68:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	601a      	str	r2, [r3, #0]
}
 8017d70:	bf00      	nop
 8017d72:	370c      	adds	r7, #12
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr

08017d7c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017d80:	2000      	movs	r0, #0
 8017d82:	f7ee fee5 	bl	8006b50 <osMutexNew>
 8017d86:	4603      	mov	r3, r0
 8017d88:	4a01      	ldr	r2, [pc, #4]	; (8017d90 <sys_init+0x14>)
 8017d8a:	6013      	str	r3, [r2, #0]
#endif
}
 8017d8c:	bf00      	nop
 8017d8e:	bd80      	pop	{r7, pc}
 8017d90:	2000d8fc 	.word	0x2000d8fc

08017d94 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017d9c:	2000      	movs	r0, #0
 8017d9e:	f7ee fed7 	bl	8006b50 <osMutexNew>
 8017da2:	4602      	mov	r2, r0
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d102      	bne.n	8017db6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017db0:	f04f 33ff 	mov.w	r3, #4294967295
 8017db4:	e000      	b.n	8017db8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017db6:	2300      	movs	r3, #0
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	3708      	adds	r7, #8
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}

08017dc0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7ee ff57 	bl	8006c84 <osMutexAcquire>
#endif
}
 8017dd6:	bf00      	nop
 8017dd8:	3708      	adds	r7, #8
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd80      	pop	{r7, pc}

08017dde <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017dde:	b580      	push	{r7, lr}
 8017de0:	b082      	sub	sp, #8
 8017de2:	af00      	add	r7, sp, #0
 8017de4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	4618      	mov	r0, r3
 8017dec:	f7ee ffa8 	bl	8006d40 <osMutexRelease>
}
 8017df0:	bf00      	nop
 8017df2:	3708      	adds	r7, #8
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}

08017df8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b08e      	sub	sp, #56	; 0x38
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	60f8      	str	r0, [r7, #12]
 8017e00:	60b9      	str	r1, [r7, #8]
 8017e02:	607a      	str	r2, [r7, #4]
 8017e04:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017e06:	f107 0314 	add.w	r3, r7, #20
 8017e0a:	2224      	movs	r2, #36	; 0x24
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f000 f969 	bl	80180e6 <memset>
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	617b      	str	r3, [r7, #20]
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017e20:	f107 0314 	add.w	r3, r7, #20
 8017e24:	461a      	mov	r2, r3
 8017e26:	6879      	ldr	r1, [r7, #4]
 8017e28:	68b8      	ldr	r0, [r7, #8]
 8017e2a:	f7ee fdbd 	bl	80069a8 <osThreadNew>
 8017e2e:	4603      	mov	r3, r0
#endif
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	3738      	adds	r7, #56	; 0x38
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd80      	pop	{r7, pc}

08017e38 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017e3c:	4b04      	ldr	r3, [pc, #16]	; (8017e50 <sys_arch_protect+0x18>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	f04f 31ff 	mov.w	r1, #4294967295
 8017e44:	4618      	mov	r0, r3
 8017e46:	f7ee ff1d 	bl	8006c84 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017e4a:	2301      	movs	r3, #1
}
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	bd80      	pop	{r7, pc}
 8017e50:	2000d8fc 	.word	0x2000d8fc

08017e54 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b082      	sub	sp, #8
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017e5c:	4b04      	ldr	r3, [pc, #16]	; (8017e70 <sys_arch_unprotect+0x1c>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7ee ff6d 	bl	8006d40 <osMutexRelease>
}
 8017e66:	bf00      	nop
 8017e68:	3708      	adds	r7, #8
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	bd80      	pop	{r7, pc}
 8017e6e:	bf00      	nop
 8017e70:	2000d8fc 	.word	0x2000d8fc

08017e74 <std>:
 8017e74:	2300      	movs	r3, #0
 8017e76:	b510      	push	{r4, lr}
 8017e78:	4604      	mov	r4, r0
 8017e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8017e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017e82:	6083      	str	r3, [r0, #8]
 8017e84:	8181      	strh	r1, [r0, #12]
 8017e86:	6643      	str	r3, [r0, #100]	; 0x64
 8017e88:	81c2      	strh	r2, [r0, #14]
 8017e8a:	6183      	str	r3, [r0, #24]
 8017e8c:	4619      	mov	r1, r3
 8017e8e:	2208      	movs	r2, #8
 8017e90:	305c      	adds	r0, #92	; 0x5c
 8017e92:	f000 f928 	bl	80180e6 <memset>
 8017e96:	4b05      	ldr	r3, [pc, #20]	; (8017eac <std+0x38>)
 8017e98:	6263      	str	r3, [r4, #36]	; 0x24
 8017e9a:	4b05      	ldr	r3, [pc, #20]	; (8017eb0 <std+0x3c>)
 8017e9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017e9e:	4b05      	ldr	r3, [pc, #20]	; (8017eb4 <std+0x40>)
 8017ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ea2:	4b05      	ldr	r3, [pc, #20]	; (8017eb8 <std+0x44>)
 8017ea4:	6224      	str	r4, [r4, #32]
 8017ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8017ea8:	bd10      	pop	{r4, pc}
 8017eaa:	bf00      	nop
 8017eac:	08018351 	.word	0x08018351
 8017eb0:	08018373 	.word	0x08018373
 8017eb4:	080183ab 	.word	0x080183ab
 8017eb8:	080183cf 	.word	0x080183cf

08017ebc <_cleanup_r>:
 8017ebc:	4901      	ldr	r1, [pc, #4]	; (8017ec4 <_cleanup_r+0x8>)
 8017ebe:	f000 b8af 	b.w	8018020 <_fwalk_reent>
 8017ec2:	bf00      	nop
 8017ec4:	08018565 	.word	0x08018565

08017ec8 <__sfmoreglue>:
 8017ec8:	b570      	push	{r4, r5, r6, lr}
 8017eca:	1e4a      	subs	r2, r1, #1
 8017ecc:	2568      	movs	r5, #104	; 0x68
 8017ece:	4355      	muls	r5, r2
 8017ed0:	460e      	mov	r6, r1
 8017ed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017ed6:	f000 f90f 	bl	80180f8 <_malloc_r>
 8017eda:	4604      	mov	r4, r0
 8017edc:	b140      	cbz	r0, 8017ef0 <__sfmoreglue+0x28>
 8017ede:	2100      	movs	r1, #0
 8017ee0:	e9c0 1600 	strd	r1, r6, [r0]
 8017ee4:	300c      	adds	r0, #12
 8017ee6:	60a0      	str	r0, [r4, #8]
 8017ee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017eec:	f000 f8fb 	bl	80180e6 <memset>
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	bd70      	pop	{r4, r5, r6, pc}

08017ef4 <__sfp_lock_acquire>:
 8017ef4:	4801      	ldr	r0, [pc, #4]	; (8017efc <__sfp_lock_acquire+0x8>)
 8017ef6:	f000 b8d8 	b.w	80180aa <__retarget_lock_acquire_recursive>
 8017efa:	bf00      	nop
 8017efc:	2000d908 	.word	0x2000d908

08017f00 <__sfp_lock_release>:
 8017f00:	4801      	ldr	r0, [pc, #4]	; (8017f08 <__sfp_lock_release+0x8>)
 8017f02:	f000 b8d3 	b.w	80180ac <__retarget_lock_release_recursive>
 8017f06:	bf00      	nop
 8017f08:	2000d908 	.word	0x2000d908

08017f0c <__sinit_lock_acquire>:
 8017f0c:	4801      	ldr	r0, [pc, #4]	; (8017f14 <__sinit_lock_acquire+0x8>)
 8017f0e:	f000 b8cc 	b.w	80180aa <__retarget_lock_acquire_recursive>
 8017f12:	bf00      	nop
 8017f14:	2000d903 	.word	0x2000d903

08017f18 <__sinit_lock_release>:
 8017f18:	4801      	ldr	r0, [pc, #4]	; (8017f20 <__sinit_lock_release+0x8>)
 8017f1a:	f000 b8c7 	b.w	80180ac <__retarget_lock_release_recursive>
 8017f1e:	bf00      	nop
 8017f20:	2000d903 	.word	0x2000d903

08017f24 <__sinit>:
 8017f24:	b510      	push	{r4, lr}
 8017f26:	4604      	mov	r4, r0
 8017f28:	f7ff fff0 	bl	8017f0c <__sinit_lock_acquire>
 8017f2c:	69a3      	ldr	r3, [r4, #24]
 8017f2e:	b11b      	cbz	r3, 8017f38 <__sinit+0x14>
 8017f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f34:	f7ff bff0 	b.w	8017f18 <__sinit_lock_release>
 8017f38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017f3c:	6523      	str	r3, [r4, #80]	; 0x50
 8017f3e:	4b13      	ldr	r3, [pc, #76]	; (8017f8c <__sinit+0x68>)
 8017f40:	4a13      	ldr	r2, [pc, #76]	; (8017f90 <__sinit+0x6c>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	62a2      	str	r2, [r4, #40]	; 0x28
 8017f46:	42a3      	cmp	r3, r4
 8017f48:	bf04      	itt	eq
 8017f4a:	2301      	moveq	r3, #1
 8017f4c:	61a3      	streq	r3, [r4, #24]
 8017f4e:	4620      	mov	r0, r4
 8017f50:	f000 f820 	bl	8017f94 <__sfp>
 8017f54:	6060      	str	r0, [r4, #4]
 8017f56:	4620      	mov	r0, r4
 8017f58:	f000 f81c 	bl	8017f94 <__sfp>
 8017f5c:	60a0      	str	r0, [r4, #8]
 8017f5e:	4620      	mov	r0, r4
 8017f60:	f000 f818 	bl	8017f94 <__sfp>
 8017f64:	2200      	movs	r2, #0
 8017f66:	60e0      	str	r0, [r4, #12]
 8017f68:	2104      	movs	r1, #4
 8017f6a:	6860      	ldr	r0, [r4, #4]
 8017f6c:	f7ff ff82 	bl	8017e74 <std>
 8017f70:	68a0      	ldr	r0, [r4, #8]
 8017f72:	2201      	movs	r2, #1
 8017f74:	2109      	movs	r1, #9
 8017f76:	f7ff ff7d 	bl	8017e74 <std>
 8017f7a:	68e0      	ldr	r0, [r4, #12]
 8017f7c:	2202      	movs	r2, #2
 8017f7e:	2112      	movs	r1, #18
 8017f80:	f7ff ff78 	bl	8017e74 <std>
 8017f84:	2301      	movs	r3, #1
 8017f86:	61a3      	str	r3, [r4, #24]
 8017f88:	e7d2      	b.n	8017f30 <__sinit+0xc>
 8017f8a:	bf00      	nop
 8017f8c:	0801c754 	.word	0x0801c754
 8017f90:	08017ebd 	.word	0x08017ebd

08017f94 <__sfp>:
 8017f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f96:	4607      	mov	r7, r0
 8017f98:	f7ff ffac 	bl	8017ef4 <__sfp_lock_acquire>
 8017f9c:	4b1e      	ldr	r3, [pc, #120]	; (8018018 <__sfp+0x84>)
 8017f9e:	681e      	ldr	r6, [r3, #0]
 8017fa0:	69b3      	ldr	r3, [r6, #24]
 8017fa2:	b913      	cbnz	r3, 8017faa <__sfp+0x16>
 8017fa4:	4630      	mov	r0, r6
 8017fa6:	f7ff ffbd 	bl	8017f24 <__sinit>
 8017faa:	3648      	adds	r6, #72	; 0x48
 8017fac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017fb0:	3b01      	subs	r3, #1
 8017fb2:	d503      	bpl.n	8017fbc <__sfp+0x28>
 8017fb4:	6833      	ldr	r3, [r6, #0]
 8017fb6:	b30b      	cbz	r3, 8017ffc <__sfp+0x68>
 8017fb8:	6836      	ldr	r6, [r6, #0]
 8017fba:	e7f7      	b.n	8017fac <__sfp+0x18>
 8017fbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017fc0:	b9d5      	cbnz	r5, 8017ff8 <__sfp+0x64>
 8017fc2:	4b16      	ldr	r3, [pc, #88]	; (801801c <__sfp+0x88>)
 8017fc4:	60e3      	str	r3, [r4, #12]
 8017fc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017fca:	6665      	str	r5, [r4, #100]	; 0x64
 8017fcc:	f000 f86c 	bl	80180a8 <__retarget_lock_init_recursive>
 8017fd0:	f7ff ff96 	bl	8017f00 <__sfp_lock_release>
 8017fd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017fd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017fdc:	6025      	str	r5, [r4, #0]
 8017fde:	61a5      	str	r5, [r4, #24]
 8017fe0:	2208      	movs	r2, #8
 8017fe2:	4629      	mov	r1, r5
 8017fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017fe8:	f000 f87d 	bl	80180e6 <memset>
 8017fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ff8:	3468      	adds	r4, #104	; 0x68
 8017ffa:	e7d9      	b.n	8017fb0 <__sfp+0x1c>
 8017ffc:	2104      	movs	r1, #4
 8017ffe:	4638      	mov	r0, r7
 8018000:	f7ff ff62 	bl	8017ec8 <__sfmoreglue>
 8018004:	4604      	mov	r4, r0
 8018006:	6030      	str	r0, [r6, #0]
 8018008:	2800      	cmp	r0, #0
 801800a:	d1d5      	bne.n	8017fb8 <__sfp+0x24>
 801800c:	f7ff ff78 	bl	8017f00 <__sfp_lock_release>
 8018010:	230c      	movs	r3, #12
 8018012:	603b      	str	r3, [r7, #0]
 8018014:	e7ee      	b.n	8017ff4 <__sfp+0x60>
 8018016:	bf00      	nop
 8018018:	0801c754 	.word	0x0801c754
 801801c:	ffff0001 	.word	0xffff0001

08018020 <_fwalk_reent>:
 8018020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018024:	4606      	mov	r6, r0
 8018026:	4688      	mov	r8, r1
 8018028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801802c:	2700      	movs	r7, #0
 801802e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018032:	f1b9 0901 	subs.w	r9, r9, #1
 8018036:	d505      	bpl.n	8018044 <_fwalk_reent+0x24>
 8018038:	6824      	ldr	r4, [r4, #0]
 801803a:	2c00      	cmp	r4, #0
 801803c:	d1f7      	bne.n	801802e <_fwalk_reent+0xe>
 801803e:	4638      	mov	r0, r7
 8018040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018044:	89ab      	ldrh	r3, [r5, #12]
 8018046:	2b01      	cmp	r3, #1
 8018048:	d907      	bls.n	801805a <_fwalk_reent+0x3a>
 801804a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801804e:	3301      	adds	r3, #1
 8018050:	d003      	beq.n	801805a <_fwalk_reent+0x3a>
 8018052:	4629      	mov	r1, r5
 8018054:	4630      	mov	r0, r6
 8018056:	47c0      	blx	r8
 8018058:	4307      	orrs	r7, r0
 801805a:	3568      	adds	r5, #104	; 0x68
 801805c:	e7e9      	b.n	8018032 <_fwalk_reent+0x12>
	...

08018060 <__libc_init_array>:
 8018060:	b570      	push	{r4, r5, r6, lr}
 8018062:	4d0d      	ldr	r5, [pc, #52]	; (8018098 <__libc_init_array+0x38>)
 8018064:	4c0d      	ldr	r4, [pc, #52]	; (801809c <__libc_init_array+0x3c>)
 8018066:	1b64      	subs	r4, r4, r5
 8018068:	10a4      	asrs	r4, r4, #2
 801806a:	2600      	movs	r6, #0
 801806c:	42a6      	cmp	r6, r4
 801806e:	d109      	bne.n	8018084 <__libc_init_array+0x24>
 8018070:	4d0b      	ldr	r5, [pc, #44]	; (80180a0 <__libc_init_array+0x40>)
 8018072:	4c0c      	ldr	r4, [pc, #48]	; (80180a4 <__libc_init_array+0x44>)
 8018074:	f000 ffcc 	bl	8019010 <_init>
 8018078:	1b64      	subs	r4, r4, r5
 801807a:	10a4      	asrs	r4, r4, #2
 801807c:	2600      	movs	r6, #0
 801807e:	42a6      	cmp	r6, r4
 8018080:	d105      	bne.n	801808e <__libc_init_array+0x2e>
 8018082:	bd70      	pop	{r4, r5, r6, pc}
 8018084:	f855 3b04 	ldr.w	r3, [r5], #4
 8018088:	4798      	blx	r3
 801808a:	3601      	adds	r6, #1
 801808c:	e7ee      	b.n	801806c <__libc_init_array+0xc>
 801808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018092:	4798      	blx	r3
 8018094:	3601      	adds	r6, #1
 8018096:	e7f2      	b.n	801807e <__libc_init_array+0x1e>
 8018098:	0801c848 	.word	0x0801c848
 801809c:	0801c848 	.word	0x0801c848
 80180a0:	0801c848 	.word	0x0801c848
 80180a4:	0801c84c 	.word	0x0801c84c

080180a8 <__retarget_lock_init_recursive>:
 80180a8:	4770      	bx	lr

080180aa <__retarget_lock_acquire_recursive>:
 80180aa:	4770      	bx	lr

080180ac <__retarget_lock_release_recursive>:
 80180ac:	4770      	bx	lr

080180ae <memcmp>:
 80180ae:	b530      	push	{r4, r5, lr}
 80180b0:	3901      	subs	r1, #1
 80180b2:	2400      	movs	r4, #0
 80180b4:	42a2      	cmp	r2, r4
 80180b6:	d101      	bne.n	80180bc <memcmp+0xe>
 80180b8:	2000      	movs	r0, #0
 80180ba:	e005      	b.n	80180c8 <memcmp+0x1a>
 80180bc:	5d03      	ldrb	r3, [r0, r4]
 80180be:	3401      	adds	r4, #1
 80180c0:	5d0d      	ldrb	r5, [r1, r4]
 80180c2:	42ab      	cmp	r3, r5
 80180c4:	d0f6      	beq.n	80180b4 <memcmp+0x6>
 80180c6:	1b58      	subs	r0, r3, r5
 80180c8:	bd30      	pop	{r4, r5, pc}

080180ca <memcpy>:
 80180ca:	440a      	add	r2, r1
 80180cc:	4291      	cmp	r1, r2
 80180ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80180d2:	d100      	bne.n	80180d6 <memcpy+0xc>
 80180d4:	4770      	bx	lr
 80180d6:	b510      	push	{r4, lr}
 80180d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80180dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80180e0:	4291      	cmp	r1, r2
 80180e2:	d1f9      	bne.n	80180d8 <memcpy+0xe>
 80180e4:	bd10      	pop	{r4, pc}

080180e6 <memset>:
 80180e6:	4402      	add	r2, r0
 80180e8:	4603      	mov	r3, r0
 80180ea:	4293      	cmp	r3, r2
 80180ec:	d100      	bne.n	80180f0 <memset+0xa>
 80180ee:	4770      	bx	lr
 80180f0:	f803 1b01 	strb.w	r1, [r3], #1
 80180f4:	e7f9      	b.n	80180ea <memset+0x4>
	...

080180f8 <_malloc_r>:
 80180f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180fa:	1ccd      	adds	r5, r1, #3
 80180fc:	f025 0503 	bic.w	r5, r5, #3
 8018100:	3508      	adds	r5, #8
 8018102:	2d0c      	cmp	r5, #12
 8018104:	bf38      	it	cc
 8018106:	250c      	movcc	r5, #12
 8018108:	2d00      	cmp	r5, #0
 801810a:	4606      	mov	r6, r0
 801810c:	db01      	blt.n	8018112 <_malloc_r+0x1a>
 801810e:	42a9      	cmp	r1, r5
 8018110:	d903      	bls.n	801811a <_malloc_r+0x22>
 8018112:	230c      	movs	r3, #12
 8018114:	6033      	str	r3, [r6, #0]
 8018116:	2000      	movs	r0, #0
 8018118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801811a:	f000 fa8b 	bl	8018634 <__malloc_lock>
 801811e:	4921      	ldr	r1, [pc, #132]	; (80181a4 <_malloc_r+0xac>)
 8018120:	680a      	ldr	r2, [r1, #0]
 8018122:	4614      	mov	r4, r2
 8018124:	b99c      	cbnz	r4, 801814e <_malloc_r+0x56>
 8018126:	4f20      	ldr	r7, [pc, #128]	; (80181a8 <_malloc_r+0xb0>)
 8018128:	683b      	ldr	r3, [r7, #0]
 801812a:	b923      	cbnz	r3, 8018136 <_malloc_r+0x3e>
 801812c:	4621      	mov	r1, r4
 801812e:	4630      	mov	r0, r6
 8018130:	f000 f8fe 	bl	8018330 <_sbrk_r>
 8018134:	6038      	str	r0, [r7, #0]
 8018136:	4629      	mov	r1, r5
 8018138:	4630      	mov	r0, r6
 801813a:	f000 f8f9 	bl	8018330 <_sbrk_r>
 801813e:	1c43      	adds	r3, r0, #1
 8018140:	d123      	bne.n	801818a <_malloc_r+0x92>
 8018142:	230c      	movs	r3, #12
 8018144:	6033      	str	r3, [r6, #0]
 8018146:	4630      	mov	r0, r6
 8018148:	f000 fa7a 	bl	8018640 <__malloc_unlock>
 801814c:	e7e3      	b.n	8018116 <_malloc_r+0x1e>
 801814e:	6823      	ldr	r3, [r4, #0]
 8018150:	1b5b      	subs	r3, r3, r5
 8018152:	d417      	bmi.n	8018184 <_malloc_r+0x8c>
 8018154:	2b0b      	cmp	r3, #11
 8018156:	d903      	bls.n	8018160 <_malloc_r+0x68>
 8018158:	6023      	str	r3, [r4, #0]
 801815a:	441c      	add	r4, r3
 801815c:	6025      	str	r5, [r4, #0]
 801815e:	e004      	b.n	801816a <_malloc_r+0x72>
 8018160:	6863      	ldr	r3, [r4, #4]
 8018162:	42a2      	cmp	r2, r4
 8018164:	bf0c      	ite	eq
 8018166:	600b      	streq	r3, [r1, #0]
 8018168:	6053      	strne	r3, [r2, #4]
 801816a:	4630      	mov	r0, r6
 801816c:	f000 fa68 	bl	8018640 <__malloc_unlock>
 8018170:	f104 000b 	add.w	r0, r4, #11
 8018174:	1d23      	adds	r3, r4, #4
 8018176:	f020 0007 	bic.w	r0, r0, #7
 801817a:	1ac2      	subs	r2, r0, r3
 801817c:	d0cc      	beq.n	8018118 <_malloc_r+0x20>
 801817e:	1a1b      	subs	r3, r3, r0
 8018180:	50a3      	str	r3, [r4, r2]
 8018182:	e7c9      	b.n	8018118 <_malloc_r+0x20>
 8018184:	4622      	mov	r2, r4
 8018186:	6864      	ldr	r4, [r4, #4]
 8018188:	e7cc      	b.n	8018124 <_malloc_r+0x2c>
 801818a:	1cc4      	adds	r4, r0, #3
 801818c:	f024 0403 	bic.w	r4, r4, #3
 8018190:	42a0      	cmp	r0, r4
 8018192:	d0e3      	beq.n	801815c <_malloc_r+0x64>
 8018194:	1a21      	subs	r1, r4, r0
 8018196:	4630      	mov	r0, r6
 8018198:	f000 f8ca 	bl	8018330 <_sbrk_r>
 801819c:	3001      	adds	r0, #1
 801819e:	d1dd      	bne.n	801815c <_malloc_r+0x64>
 80181a0:	e7cf      	b.n	8018142 <_malloc_r+0x4a>
 80181a2:	bf00      	nop
 80181a4:	20004cb4 	.word	0x20004cb4
 80181a8:	20004cb8 	.word	0x20004cb8

080181ac <iprintf>:
 80181ac:	b40f      	push	{r0, r1, r2, r3}
 80181ae:	4b0a      	ldr	r3, [pc, #40]	; (80181d8 <iprintf+0x2c>)
 80181b0:	b513      	push	{r0, r1, r4, lr}
 80181b2:	681c      	ldr	r4, [r3, #0]
 80181b4:	b124      	cbz	r4, 80181c0 <iprintf+0x14>
 80181b6:	69a3      	ldr	r3, [r4, #24]
 80181b8:	b913      	cbnz	r3, 80181c0 <iprintf+0x14>
 80181ba:	4620      	mov	r0, r4
 80181bc:	f7ff feb2 	bl	8017f24 <__sinit>
 80181c0:	ab05      	add	r3, sp, #20
 80181c2:	9a04      	ldr	r2, [sp, #16]
 80181c4:	68a1      	ldr	r1, [r4, #8]
 80181c6:	9301      	str	r3, [sp, #4]
 80181c8:	4620      	mov	r0, r4
 80181ca:	f000 fab9 	bl	8018740 <_vfiprintf_r>
 80181ce:	b002      	add	sp, #8
 80181d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181d4:	b004      	add	sp, #16
 80181d6:	4770      	bx	lr
 80181d8:	200000d0 	.word	0x200000d0

080181dc <rand>:
 80181dc:	4b17      	ldr	r3, [pc, #92]	; (801823c <rand+0x60>)
 80181de:	b510      	push	{r4, lr}
 80181e0:	681c      	ldr	r4, [r3, #0]
 80181e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80181e4:	b9b3      	cbnz	r3, 8018214 <rand+0x38>
 80181e6:	2018      	movs	r0, #24
 80181e8:	f000 fa1c 	bl	8018624 <malloc>
 80181ec:	63a0      	str	r0, [r4, #56]	; 0x38
 80181ee:	b928      	cbnz	r0, 80181fc <rand+0x20>
 80181f0:	4602      	mov	r2, r0
 80181f2:	4b13      	ldr	r3, [pc, #76]	; (8018240 <rand+0x64>)
 80181f4:	4813      	ldr	r0, [pc, #76]	; (8018244 <rand+0x68>)
 80181f6:	214e      	movs	r1, #78	; 0x4e
 80181f8:	f000 f900 	bl	80183fc <__assert_func>
 80181fc:	4a12      	ldr	r2, [pc, #72]	; (8018248 <rand+0x6c>)
 80181fe:	4b13      	ldr	r3, [pc, #76]	; (801824c <rand+0x70>)
 8018200:	e9c0 2300 	strd	r2, r3, [r0]
 8018204:	4b12      	ldr	r3, [pc, #72]	; (8018250 <rand+0x74>)
 8018206:	6083      	str	r3, [r0, #8]
 8018208:	230b      	movs	r3, #11
 801820a:	8183      	strh	r3, [r0, #12]
 801820c:	2201      	movs	r2, #1
 801820e:	2300      	movs	r3, #0
 8018210:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018214:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018216:	480f      	ldr	r0, [pc, #60]	; (8018254 <rand+0x78>)
 8018218:	690a      	ldr	r2, [r1, #16]
 801821a:	694b      	ldr	r3, [r1, #20]
 801821c:	4c0e      	ldr	r4, [pc, #56]	; (8018258 <rand+0x7c>)
 801821e:	4350      	muls	r0, r2
 8018220:	fb04 0003 	mla	r0, r4, r3, r0
 8018224:	fba2 3404 	umull	r3, r4, r2, r4
 8018228:	1c5a      	adds	r2, r3, #1
 801822a:	4404      	add	r4, r0
 801822c:	f144 0000 	adc.w	r0, r4, #0
 8018230:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018234:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018238:	bd10      	pop	{r4, pc}
 801823a:	bf00      	nop
 801823c:	200000d0 	.word	0x200000d0
 8018240:	0801c758 	.word	0x0801c758
 8018244:	0801c76f 	.word	0x0801c76f
 8018248:	abcd330e 	.word	0xabcd330e
 801824c:	e66d1234 	.word	0xe66d1234
 8018250:	0005deec 	.word	0x0005deec
 8018254:	5851f42d 	.word	0x5851f42d
 8018258:	4c957f2d 	.word	0x4c957f2d

0801825c <cleanup_glue>:
 801825c:	b538      	push	{r3, r4, r5, lr}
 801825e:	460c      	mov	r4, r1
 8018260:	6809      	ldr	r1, [r1, #0]
 8018262:	4605      	mov	r5, r0
 8018264:	b109      	cbz	r1, 801826a <cleanup_glue+0xe>
 8018266:	f7ff fff9 	bl	801825c <cleanup_glue>
 801826a:	4621      	mov	r1, r4
 801826c:	4628      	mov	r0, r5
 801826e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018272:	f000 b9eb 	b.w	801864c <_free_r>
	...

08018278 <_reclaim_reent>:
 8018278:	4b2c      	ldr	r3, [pc, #176]	; (801832c <_reclaim_reent+0xb4>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	4283      	cmp	r3, r0
 801827e:	b570      	push	{r4, r5, r6, lr}
 8018280:	4604      	mov	r4, r0
 8018282:	d051      	beq.n	8018328 <_reclaim_reent+0xb0>
 8018284:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018286:	b143      	cbz	r3, 801829a <_reclaim_reent+0x22>
 8018288:	68db      	ldr	r3, [r3, #12]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d14a      	bne.n	8018324 <_reclaim_reent+0xac>
 801828e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018290:	6819      	ldr	r1, [r3, #0]
 8018292:	b111      	cbz	r1, 801829a <_reclaim_reent+0x22>
 8018294:	4620      	mov	r0, r4
 8018296:	f000 f9d9 	bl	801864c <_free_r>
 801829a:	6961      	ldr	r1, [r4, #20]
 801829c:	b111      	cbz	r1, 80182a4 <_reclaim_reent+0x2c>
 801829e:	4620      	mov	r0, r4
 80182a0:	f000 f9d4 	bl	801864c <_free_r>
 80182a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80182a6:	b111      	cbz	r1, 80182ae <_reclaim_reent+0x36>
 80182a8:	4620      	mov	r0, r4
 80182aa:	f000 f9cf 	bl	801864c <_free_r>
 80182ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80182b0:	b111      	cbz	r1, 80182b8 <_reclaim_reent+0x40>
 80182b2:	4620      	mov	r0, r4
 80182b4:	f000 f9ca 	bl	801864c <_free_r>
 80182b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80182ba:	b111      	cbz	r1, 80182c2 <_reclaim_reent+0x4a>
 80182bc:	4620      	mov	r0, r4
 80182be:	f000 f9c5 	bl	801864c <_free_r>
 80182c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80182c4:	b111      	cbz	r1, 80182cc <_reclaim_reent+0x54>
 80182c6:	4620      	mov	r0, r4
 80182c8:	f000 f9c0 	bl	801864c <_free_r>
 80182cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80182ce:	b111      	cbz	r1, 80182d6 <_reclaim_reent+0x5e>
 80182d0:	4620      	mov	r0, r4
 80182d2:	f000 f9bb 	bl	801864c <_free_r>
 80182d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80182d8:	b111      	cbz	r1, 80182e0 <_reclaim_reent+0x68>
 80182da:	4620      	mov	r0, r4
 80182dc:	f000 f9b6 	bl	801864c <_free_r>
 80182e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182e2:	b111      	cbz	r1, 80182ea <_reclaim_reent+0x72>
 80182e4:	4620      	mov	r0, r4
 80182e6:	f000 f9b1 	bl	801864c <_free_r>
 80182ea:	69a3      	ldr	r3, [r4, #24]
 80182ec:	b1e3      	cbz	r3, 8018328 <_reclaim_reent+0xb0>
 80182ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80182f0:	4620      	mov	r0, r4
 80182f2:	4798      	blx	r3
 80182f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80182f6:	b1b9      	cbz	r1, 8018328 <_reclaim_reent+0xb0>
 80182f8:	4620      	mov	r0, r4
 80182fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182fe:	f7ff bfad 	b.w	801825c <cleanup_glue>
 8018302:	5949      	ldr	r1, [r1, r5]
 8018304:	b941      	cbnz	r1, 8018318 <_reclaim_reent+0xa0>
 8018306:	3504      	adds	r5, #4
 8018308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801830a:	2d80      	cmp	r5, #128	; 0x80
 801830c:	68d9      	ldr	r1, [r3, #12]
 801830e:	d1f8      	bne.n	8018302 <_reclaim_reent+0x8a>
 8018310:	4620      	mov	r0, r4
 8018312:	f000 f99b 	bl	801864c <_free_r>
 8018316:	e7ba      	b.n	801828e <_reclaim_reent+0x16>
 8018318:	680e      	ldr	r6, [r1, #0]
 801831a:	4620      	mov	r0, r4
 801831c:	f000 f996 	bl	801864c <_free_r>
 8018320:	4631      	mov	r1, r6
 8018322:	e7ef      	b.n	8018304 <_reclaim_reent+0x8c>
 8018324:	2500      	movs	r5, #0
 8018326:	e7ef      	b.n	8018308 <_reclaim_reent+0x90>
 8018328:	bd70      	pop	{r4, r5, r6, pc}
 801832a:	bf00      	nop
 801832c:	200000d0 	.word	0x200000d0

08018330 <_sbrk_r>:
 8018330:	b538      	push	{r3, r4, r5, lr}
 8018332:	4d06      	ldr	r5, [pc, #24]	; (801834c <_sbrk_r+0x1c>)
 8018334:	2300      	movs	r3, #0
 8018336:	4604      	mov	r4, r0
 8018338:	4608      	mov	r0, r1
 801833a:	602b      	str	r3, [r5, #0]
 801833c:	f7e9 f9be 	bl	80016bc <_sbrk>
 8018340:	1c43      	adds	r3, r0, #1
 8018342:	d102      	bne.n	801834a <_sbrk_r+0x1a>
 8018344:	682b      	ldr	r3, [r5, #0]
 8018346:	b103      	cbz	r3, 801834a <_sbrk_r+0x1a>
 8018348:	6023      	str	r3, [r4, #0]
 801834a:	bd38      	pop	{r3, r4, r5, pc}
 801834c:	2000d8f8 	.word	0x2000d8f8

08018350 <__sread>:
 8018350:	b510      	push	{r4, lr}
 8018352:	460c      	mov	r4, r1
 8018354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018358:	f000 fcb6 	bl	8018cc8 <_read_r>
 801835c:	2800      	cmp	r0, #0
 801835e:	bfab      	itete	ge
 8018360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018362:	89a3      	ldrhlt	r3, [r4, #12]
 8018364:	181b      	addge	r3, r3, r0
 8018366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801836a:	bfac      	ite	ge
 801836c:	6563      	strge	r3, [r4, #84]	; 0x54
 801836e:	81a3      	strhlt	r3, [r4, #12]
 8018370:	bd10      	pop	{r4, pc}

08018372 <__swrite>:
 8018372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018376:	461f      	mov	r7, r3
 8018378:	898b      	ldrh	r3, [r1, #12]
 801837a:	05db      	lsls	r3, r3, #23
 801837c:	4605      	mov	r5, r0
 801837e:	460c      	mov	r4, r1
 8018380:	4616      	mov	r6, r2
 8018382:	d505      	bpl.n	8018390 <__swrite+0x1e>
 8018384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018388:	2302      	movs	r3, #2
 801838a:	2200      	movs	r2, #0
 801838c:	f000 f938 	bl	8018600 <_lseek_r>
 8018390:	89a3      	ldrh	r3, [r4, #12]
 8018392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801839a:	81a3      	strh	r3, [r4, #12]
 801839c:	4632      	mov	r2, r6
 801839e:	463b      	mov	r3, r7
 80183a0:	4628      	mov	r0, r5
 80183a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183a6:	f000 b817 	b.w	80183d8 <_write_r>

080183aa <__sseek>:
 80183aa:	b510      	push	{r4, lr}
 80183ac:	460c      	mov	r4, r1
 80183ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183b2:	f000 f925 	bl	8018600 <_lseek_r>
 80183b6:	1c43      	adds	r3, r0, #1
 80183b8:	89a3      	ldrh	r3, [r4, #12]
 80183ba:	bf15      	itete	ne
 80183bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80183be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80183c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80183c6:	81a3      	strheq	r3, [r4, #12]
 80183c8:	bf18      	it	ne
 80183ca:	81a3      	strhne	r3, [r4, #12]
 80183cc:	bd10      	pop	{r4, pc}

080183ce <__sclose>:
 80183ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d2:	f000 b831 	b.w	8018438 <_close_r>
	...

080183d8 <_write_r>:
 80183d8:	b538      	push	{r3, r4, r5, lr}
 80183da:	4d07      	ldr	r5, [pc, #28]	; (80183f8 <_write_r+0x20>)
 80183dc:	4604      	mov	r4, r0
 80183de:	4608      	mov	r0, r1
 80183e0:	4611      	mov	r1, r2
 80183e2:	2200      	movs	r2, #0
 80183e4:	602a      	str	r2, [r5, #0]
 80183e6:	461a      	mov	r2, r3
 80183e8:	f7e9 f917 	bl	800161a <_write>
 80183ec:	1c43      	adds	r3, r0, #1
 80183ee:	d102      	bne.n	80183f6 <_write_r+0x1e>
 80183f0:	682b      	ldr	r3, [r5, #0]
 80183f2:	b103      	cbz	r3, 80183f6 <_write_r+0x1e>
 80183f4:	6023      	str	r3, [r4, #0]
 80183f6:	bd38      	pop	{r3, r4, r5, pc}
 80183f8:	2000d8f8 	.word	0x2000d8f8

080183fc <__assert_func>:
 80183fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80183fe:	4614      	mov	r4, r2
 8018400:	461a      	mov	r2, r3
 8018402:	4b09      	ldr	r3, [pc, #36]	; (8018428 <__assert_func+0x2c>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	4605      	mov	r5, r0
 8018408:	68d8      	ldr	r0, [r3, #12]
 801840a:	b14c      	cbz	r4, 8018420 <__assert_func+0x24>
 801840c:	4b07      	ldr	r3, [pc, #28]	; (801842c <__assert_func+0x30>)
 801840e:	9100      	str	r1, [sp, #0]
 8018410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018414:	4906      	ldr	r1, [pc, #24]	; (8018430 <__assert_func+0x34>)
 8018416:	462b      	mov	r3, r5
 8018418:	f000 f8e0 	bl	80185dc <fiprintf>
 801841c:	f000 fd26 	bl	8018e6c <abort>
 8018420:	4b04      	ldr	r3, [pc, #16]	; (8018434 <__assert_func+0x38>)
 8018422:	461c      	mov	r4, r3
 8018424:	e7f3      	b.n	801840e <__assert_func+0x12>
 8018426:	bf00      	nop
 8018428:	200000d0 	.word	0x200000d0
 801842c:	0801c7ce 	.word	0x0801c7ce
 8018430:	0801c7db 	.word	0x0801c7db
 8018434:	0801c809 	.word	0x0801c809

08018438 <_close_r>:
 8018438:	b538      	push	{r3, r4, r5, lr}
 801843a:	4d06      	ldr	r5, [pc, #24]	; (8018454 <_close_r+0x1c>)
 801843c:	2300      	movs	r3, #0
 801843e:	4604      	mov	r4, r0
 8018440:	4608      	mov	r0, r1
 8018442:	602b      	str	r3, [r5, #0]
 8018444:	f7e9 f905 	bl	8001652 <_close>
 8018448:	1c43      	adds	r3, r0, #1
 801844a:	d102      	bne.n	8018452 <_close_r+0x1a>
 801844c:	682b      	ldr	r3, [r5, #0]
 801844e:	b103      	cbz	r3, 8018452 <_close_r+0x1a>
 8018450:	6023      	str	r3, [r4, #0]
 8018452:	bd38      	pop	{r3, r4, r5, pc}
 8018454:	2000d8f8 	.word	0x2000d8f8

08018458 <__sflush_r>:
 8018458:	898a      	ldrh	r2, [r1, #12]
 801845a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801845e:	4605      	mov	r5, r0
 8018460:	0710      	lsls	r0, r2, #28
 8018462:	460c      	mov	r4, r1
 8018464:	d458      	bmi.n	8018518 <__sflush_r+0xc0>
 8018466:	684b      	ldr	r3, [r1, #4]
 8018468:	2b00      	cmp	r3, #0
 801846a:	dc05      	bgt.n	8018478 <__sflush_r+0x20>
 801846c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801846e:	2b00      	cmp	r3, #0
 8018470:	dc02      	bgt.n	8018478 <__sflush_r+0x20>
 8018472:	2000      	movs	r0, #0
 8018474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801847a:	2e00      	cmp	r6, #0
 801847c:	d0f9      	beq.n	8018472 <__sflush_r+0x1a>
 801847e:	2300      	movs	r3, #0
 8018480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018484:	682f      	ldr	r7, [r5, #0]
 8018486:	602b      	str	r3, [r5, #0]
 8018488:	d032      	beq.n	80184f0 <__sflush_r+0x98>
 801848a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801848c:	89a3      	ldrh	r3, [r4, #12]
 801848e:	075a      	lsls	r2, r3, #29
 8018490:	d505      	bpl.n	801849e <__sflush_r+0x46>
 8018492:	6863      	ldr	r3, [r4, #4]
 8018494:	1ac0      	subs	r0, r0, r3
 8018496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018498:	b10b      	cbz	r3, 801849e <__sflush_r+0x46>
 801849a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801849c:	1ac0      	subs	r0, r0, r3
 801849e:	2300      	movs	r3, #0
 80184a0:	4602      	mov	r2, r0
 80184a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184a4:	6a21      	ldr	r1, [r4, #32]
 80184a6:	4628      	mov	r0, r5
 80184a8:	47b0      	blx	r6
 80184aa:	1c43      	adds	r3, r0, #1
 80184ac:	89a3      	ldrh	r3, [r4, #12]
 80184ae:	d106      	bne.n	80184be <__sflush_r+0x66>
 80184b0:	6829      	ldr	r1, [r5, #0]
 80184b2:	291d      	cmp	r1, #29
 80184b4:	d82c      	bhi.n	8018510 <__sflush_r+0xb8>
 80184b6:	4a2a      	ldr	r2, [pc, #168]	; (8018560 <__sflush_r+0x108>)
 80184b8:	40ca      	lsrs	r2, r1
 80184ba:	07d6      	lsls	r6, r2, #31
 80184bc:	d528      	bpl.n	8018510 <__sflush_r+0xb8>
 80184be:	2200      	movs	r2, #0
 80184c0:	6062      	str	r2, [r4, #4]
 80184c2:	04d9      	lsls	r1, r3, #19
 80184c4:	6922      	ldr	r2, [r4, #16]
 80184c6:	6022      	str	r2, [r4, #0]
 80184c8:	d504      	bpl.n	80184d4 <__sflush_r+0x7c>
 80184ca:	1c42      	adds	r2, r0, #1
 80184cc:	d101      	bne.n	80184d2 <__sflush_r+0x7a>
 80184ce:	682b      	ldr	r3, [r5, #0]
 80184d0:	b903      	cbnz	r3, 80184d4 <__sflush_r+0x7c>
 80184d2:	6560      	str	r0, [r4, #84]	; 0x54
 80184d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184d6:	602f      	str	r7, [r5, #0]
 80184d8:	2900      	cmp	r1, #0
 80184da:	d0ca      	beq.n	8018472 <__sflush_r+0x1a>
 80184dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184e0:	4299      	cmp	r1, r3
 80184e2:	d002      	beq.n	80184ea <__sflush_r+0x92>
 80184e4:	4628      	mov	r0, r5
 80184e6:	f000 f8b1 	bl	801864c <_free_r>
 80184ea:	2000      	movs	r0, #0
 80184ec:	6360      	str	r0, [r4, #52]	; 0x34
 80184ee:	e7c1      	b.n	8018474 <__sflush_r+0x1c>
 80184f0:	6a21      	ldr	r1, [r4, #32]
 80184f2:	2301      	movs	r3, #1
 80184f4:	4628      	mov	r0, r5
 80184f6:	47b0      	blx	r6
 80184f8:	1c41      	adds	r1, r0, #1
 80184fa:	d1c7      	bne.n	801848c <__sflush_r+0x34>
 80184fc:	682b      	ldr	r3, [r5, #0]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d0c4      	beq.n	801848c <__sflush_r+0x34>
 8018502:	2b1d      	cmp	r3, #29
 8018504:	d001      	beq.n	801850a <__sflush_r+0xb2>
 8018506:	2b16      	cmp	r3, #22
 8018508:	d101      	bne.n	801850e <__sflush_r+0xb6>
 801850a:	602f      	str	r7, [r5, #0]
 801850c:	e7b1      	b.n	8018472 <__sflush_r+0x1a>
 801850e:	89a3      	ldrh	r3, [r4, #12]
 8018510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018514:	81a3      	strh	r3, [r4, #12]
 8018516:	e7ad      	b.n	8018474 <__sflush_r+0x1c>
 8018518:	690f      	ldr	r7, [r1, #16]
 801851a:	2f00      	cmp	r7, #0
 801851c:	d0a9      	beq.n	8018472 <__sflush_r+0x1a>
 801851e:	0793      	lsls	r3, r2, #30
 8018520:	680e      	ldr	r6, [r1, #0]
 8018522:	bf08      	it	eq
 8018524:	694b      	ldreq	r3, [r1, #20]
 8018526:	600f      	str	r7, [r1, #0]
 8018528:	bf18      	it	ne
 801852a:	2300      	movne	r3, #0
 801852c:	eba6 0807 	sub.w	r8, r6, r7
 8018530:	608b      	str	r3, [r1, #8]
 8018532:	f1b8 0f00 	cmp.w	r8, #0
 8018536:	dd9c      	ble.n	8018472 <__sflush_r+0x1a>
 8018538:	6a21      	ldr	r1, [r4, #32]
 801853a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801853c:	4643      	mov	r3, r8
 801853e:	463a      	mov	r2, r7
 8018540:	4628      	mov	r0, r5
 8018542:	47b0      	blx	r6
 8018544:	2800      	cmp	r0, #0
 8018546:	dc06      	bgt.n	8018556 <__sflush_r+0xfe>
 8018548:	89a3      	ldrh	r3, [r4, #12]
 801854a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801854e:	81a3      	strh	r3, [r4, #12]
 8018550:	f04f 30ff 	mov.w	r0, #4294967295
 8018554:	e78e      	b.n	8018474 <__sflush_r+0x1c>
 8018556:	4407      	add	r7, r0
 8018558:	eba8 0800 	sub.w	r8, r8, r0
 801855c:	e7e9      	b.n	8018532 <__sflush_r+0xda>
 801855e:	bf00      	nop
 8018560:	20400001 	.word	0x20400001

08018564 <_fflush_r>:
 8018564:	b538      	push	{r3, r4, r5, lr}
 8018566:	690b      	ldr	r3, [r1, #16]
 8018568:	4605      	mov	r5, r0
 801856a:	460c      	mov	r4, r1
 801856c:	b913      	cbnz	r3, 8018574 <_fflush_r+0x10>
 801856e:	2500      	movs	r5, #0
 8018570:	4628      	mov	r0, r5
 8018572:	bd38      	pop	{r3, r4, r5, pc}
 8018574:	b118      	cbz	r0, 801857e <_fflush_r+0x1a>
 8018576:	6983      	ldr	r3, [r0, #24]
 8018578:	b90b      	cbnz	r3, 801857e <_fflush_r+0x1a>
 801857a:	f7ff fcd3 	bl	8017f24 <__sinit>
 801857e:	4b14      	ldr	r3, [pc, #80]	; (80185d0 <_fflush_r+0x6c>)
 8018580:	429c      	cmp	r4, r3
 8018582:	d11b      	bne.n	80185bc <_fflush_r+0x58>
 8018584:	686c      	ldr	r4, [r5, #4]
 8018586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d0ef      	beq.n	801856e <_fflush_r+0xa>
 801858e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018590:	07d0      	lsls	r0, r2, #31
 8018592:	d404      	bmi.n	801859e <_fflush_r+0x3a>
 8018594:	0599      	lsls	r1, r3, #22
 8018596:	d402      	bmi.n	801859e <_fflush_r+0x3a>
 8018598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801859a:	f7ff fd86 	bl	80180aa <__retarget_lock_acquire_recursive>
 801859e:	4628      	mov	r0, r5
 80185a0:	4621      	mov	r1, r4
 80185a2:	f7ff ff59 	bl	8018458 <__sflush_r>
 80185a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185a8:	07da      	lsls	r2, r3, #31
 80185aa:	4605      	mov	r5, r0
 80185ac:	d4e0      	bmi.n	8018570 <_fflush_r+0xc>
 80185ae:	89a3      	ldrh	r3, [r4, #12]
 80185b0:	059b      	lsls	r3, r3, #22
 80185b2:	d4dd      	bmi.n	8018570 <_fflush_r+0xc>
 80185b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185b6:	f7ff fd79 	bl	80180ac <__retarget_lock_release_recursive>
 80185ba:	e7d9      	b.n	8018570 <_fflush_r+0xc>
 80185bc:	4b05      	ldr	r3, [pc, #20]	; (80185d4 <_fflush_r+0x70>)
 80185be:	429c      	cmp	r4, r3
 80185c0:	d101      	bne.n	80185c6 <_fflush_r+0x62>
 80185c2:	68ac      	ldr	r4, [r5, #8]
 80185c4:	e7df      	b.n	8018586 <_fflush_r+0x22>
 80185c6:	4b04      	ldr	r3, [pc, #16]	; (80185d8 <_fflush_r+0x74>)
 80185c8:	429c      	cmp	r4, r3
 80185ca:	bf08      	it	eq
 80185cc:	68ec      	ldreq	r4, [r5, #12]
 80185ce:	e7da      	b.n	8018586 <_fflush_r+0x22>
 80185d0:	0801c714 	.word	0x0801c714
 80185d4:	0801c734 	.word	0x0801c734
 80185d8:	0801c6f4 	.word	0x0801c6f4

080185dc <fiprintf>:
 80185dc:	b40e      	push	{r1, r2, r3}
 80185de:	b503      	push	{r0, r1, lr}
 80185e0:	4601      	mov	r1, r0
 80185e2:	ab03      	add	r3, sp, #12
 80185e4:	4805      	ldr	r0, [pc, #20]	; (80185fc <fiprintf+0x20>)
 80185e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80185ea:	6800      	ldr	r0, [r0, #0]
 80185ec:	9301      	str	r3, [sp, #4]
 80185ee:	f000 f8a7 	bl	8018740 <_vfiprintf_r>
 80185f2:	b002      	add	sp, #8
 80185f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80185f8:	b003      	add	sp, #12
 80185fa:	4770      	bx	lr
 80185fc:	200000d0 	.word	0x200000d0

08018600 <_lseek_r>:
 8018600:	b538      	push	{r3, r4, r5, lr}
 8018602:	4d07      	ldr	r5, [pc, #28]	; (8018620 <_lseek_r+0x20>)
 8018604:	4604      	mov	r4, r0
 8018606:	4608      	mov	r0, r1
 8018608:	4611      	mov	r1, r2
 801860a:	2200      	movs	r2, #0
 801860c:	602a      	str	r2, [r5, #0]
 801860e:	461a      	mov	r2, r3
 8018610:	f7e9 f846 	bl	80016a0 <_lseek>
 8018614:	1c43      	adds	r3, r0, #1
 8018616:	d102      	bne.n	801861e <_lseek_r+0x1e>
 8018618:	682b      	ldr	r3, [r5, #0]
 801861a:	b103      	cbz	r3, 801861e <_lseek_r+0x1e>
 801861c:	6023      	str	r3, [r4, #0]
 801861e:	bd38      	pop	{r3, r4, r5, pc}
 8018620:	2000d8f8 	.word	0x2000d8f8

08018624 <malloc>:
 8018624:	4b02      	ldr	r3, [pc, #8]	; (8018630 <malloc+0xc>)
 8018626:	4601      	mov	r1, r0
 8018628:	6818      	ldr	r0, [r3, #0]
 801862a:	f7ff bd65 	b.w	80180f8 <_malloc_r>
 801862e:	bf00      	nop
 8018630:	200000d0 	.word	0x200000d0

08018634 <__malloc_lock>:
 8018634:	4801      	ldr	r0, [pc, #4]	; (801863c <__malloc_lock+0x8>)
 8018636:	f7ff bd38 	b.w	80180aa <__retarget_lock_acquire_recursive>
 801863a:	bf00      	nop
 801863c:	2000d904 	.word	0x2000d904

08018640 <__malloc_unlock>:
 8018640:	4801      	ldr	r0, [pc, #4]	; (8018648 <__malloc_unlock+0x8>)
 8018642:	f7ff bd33 	b.w	80180ac <__retarget_lock_release_recursive>
 8018646:	bf00      	nop
 8018648:	2000d904 	.word	0x2000d904

0801864c <_free_r>:
 801864c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801864e:	2900      	cmp	r1, #0
 8018650:	d048      	beq.n	80186e4 <_free_r+0x98>
 8018652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018656:	9001      	str	r0, [sp, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	f1a1 0404 	sub.w	r4, r1, #4
 801865e:	bfb8      	it	lt
 8018660:	18e4      	addlt	r4, r4, r3
 8018662:	f7ff ffe7 	bl	8018634 <__malloc_lock>
 8018666:	4a20      	ldr	r2, [pc, #128]	; (80186e8 <_free_r+0x9c>)
 8018668:	9801      	ldr	r0, [sp, #4]
 801866a:	6813      	ldr	r3, [r2, #0]
 801866c:	4615      	mov	r5, r2
 801866e:	b933      	cbnz	r3, 801867e <_free_r+0x32>
 8018670:	6063      	str	r3, [r4, #4]
 8018672:	6014      	str	r4, [r2, #0]
 8018674:	b003      	add	sp, #12
 8018676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801867a:	f7ff bfe1 	b.w	8018640 <__malloc_unlock>
 801867e:	42a3      	cmp	r3, r4
 8018680:	d90b      	bls.n	801869a <_free_r+0x4e>
 8018682:	6821      	ldr	r1, [r4, #0]
 8018684:	1862      	adds	r2, r4, r1
 8018686:	4293      	cmp	r3, r2
 8018688:	bf04      	itt	eq
 801868a:	681a      	ldreq	r2, [r3, #0]
 801868c:	685b      	ldreq	r3, [r3, #4]
 801868e:	6063      	str	r3, [r4, #4]
 8018690:	bf04      	itt	eq
 8018692:	1852      	addeq	r2, r2, r1
 8018694:	6022      	streq	r2, [r4, #0]
 8018696:	602c      	str	r4, [r5, #0]
 8018698:	e7ec      	b.n	8018674 <_free_r+0x28>
 801869a:	461a      	mov	r2, r3
 801869c:	685b      	ldr	r3, [r3, #4]
 801869e:	b10b      	cbz	r3, 80186a4 <_free_r+0x58>
 80186a0:	42a3      	cmp	r3, r4
 80186a2:	d9fa      	bls.n	801869a <_free_r+0x4e>
 80186a4:	6811      	ldr	r1, [r2, #0]
 80186a6:	1855      	adds	r5, r2, r1
 80186a8:	42a5      	cmp	r5, r4
 80186aa:	d10b      	bne.n	80186c4 <_free_r+0x78>
 80186ac:	6824      	ldr	r4, [r4, #0]
 80186ae:	4421      	add	r1, r4
 80186b0:	1854      	adds	r4, r2, r1
 80186b2:	42a3      	cmp	r3, r4
 80186b4:	6011      	str	r1, [r2, #0]
 80186b6:	d1dd      	bne.n	8018674 <_free_r+0x28>
 80186b8:	681c      	ldr	r4, [r3, #0]
 80186ba:	685b      	ldr	r3, [r3, #4]
 80186bc:	6053      	str	r3, [r2, #4]
 80186be:	4421      	add	r1, r4
 80186c0:	6011      	str	r1, [r2, #0]
 80186c2:	e7d7      	b.n	8018674 <_free_r+0x28>
 80186c4:	d902      	bls.n	80186cc <_free_r+0x80>
 80186c6:	230c      	movs	r3, #12
 80186c8:	6003      	str	r3, [r0, #0]
 80186ca:	e7d3      	b.n	8018674 <_free_r+0x28>
 80186cc:	6825      	ldr	r5, [r4, #0]
 80186ce:	1961      	adds	r1, r4, r5
 80186d0:	428b      	cmp	r3, r1
 80186d2:	bf04      	itt	eq
 80186d4:	6819      	ldreq	r1, [r3, #0]
 80186d6:	685b      	ldreq	r3, [r3, #4]
 80186d8:	6063      	str	r3, [r4, #4]
 80186da:	bf04      	itt	eq
 80186dc:	1949      	addeq	r1, r1, r5
 80186de:	6021      	streq	r1, [r4, #0]
 80186e0:	6054      	str	r4, [r2, #4]
 80186e2:	e7c7      	b.n	8018674 <_free_r+0x28>
 80186e4:	b003      	add	sp, #12
 80186e6:	bd30      	pop	{r4, r5, pc}
 80186e8:	20004cb4 	.word	0x20004cb4

080186ec <__sfputc_r>:
 80186ec:	6893      	ldr	r3, [r2, #8]
 80186ee:	3b01      	subs	r3, #1
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	b410      	push	{r4}
 80186f4:	6093      	str	r3, [r2, #8]
 80186f6:	da08      	bge.n	801870a <__sfputc_r+0x1e>
 80186f8:	6994      	ldr	r4, [r2, #24]
 80186fa:	42a3      	cmp	r3, r4
 80186fc:	db01      	blt.n	8018702 <__sfputc_r+0x16>
 80186fe:	290a      	cmp	r1, #10
 8018700:	d103      	bne.n	801870a <__sfputc_r+0x1e>
 8018702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018706:	f000 baf1 	b.w	8018cec <__swbuf_r>
 801870a:	6813      	ldr	r3, [r2, #0]
 801870c:	1c58      	adds	r0, r3, #1
 801870e:	6010      	str	r0, [r2, #0]
 8018710:	7019      	strb	r1, [r3, #0]
 8018712:	4608      	mov	r0, r1
 8018714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018718:	4770      	bx	lr

0801871a <__sfputs_r>:
 801871a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801871c:	4606      	mov	r6, r0
 801871e:	460f      	mov	r7, r1
 8018720:	4614      	mov	r4, r2
 8018722:	18d5      	adds	r5, r2, r3
 8018724:	42ac      	cmp	r4, r5
 8018726:	d101      	bne.n	801872c <__sfputs_r+0x12>
 8018728:	2000      	movs	r0, #0
 801872a:	e007      	b.n	801873c <__sfputs_r+0x22>
 801872c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018730:	463a      	mov	r2, r7
 8018732:	4630      	mov	r0, r6
 8018734:	f7ff ffda 	bl	80186ec <__sfputc_r>
 8018738:	1c43      	adds	r3, r0, #1
 801873a:	d1f3      	bne.n	8018724 <__sfputs_r+0xa>
 801873c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018740 <_vfiprintf_r>:
 8018740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018744:	460d      	mov	r5, r1
 8018746:	b09d      	sub	sp, #116	; 0x74
 8018748:	4614      	mov	r4, r2
 801874a:	4698      	mov	r8, r3
 801874c:	4606      	mov	r6, r0
 801874e:	b118      	cbz	r0, 8018758 <_vfiprintf_r+0x18>
 8018750:	6983      	ldr	r3, [r0, #24]
 8018752:	b90b      	cbnz	r3, 8018758 <_vfiprintf_r+0x18>
 8018754:	f7ff fbe6 	bl	8017f24 <__sinit>
 8018758:	4b89      	ldr	r3, [pc, #548]	; (8018980 <_vfiprintf_r+0x240>)
 801875a:	429d      	cmp	r5, r3
 801875c:	d11b      	bne.n	8018796 <_vfiprintf_r+0x56>
 801875e:	6875      	ldr	r5, [r6, #4]
 8018760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018762:	07d9      	lsls	r1, r3, #31
 8018764:	d405      	bmi.n	8018772 <_vfiprintf_r+0x32>
 8018766:	89ab      	ldrh	r3, [r5, #12]
 8018768:	059a      	lsls	r2, r3, #22
 801876a:	d402      	bmi.n	8018772 <_vfiprintf_r+0x32>
 801876c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801876e:	f7ff fc9c 	bl	80180aa <__retarget_lock_acquire_recursive>
 8018772:	89ab      	ldrh	r3, [r5, #12]
 8018774:	071b      	lsls	r3, r3, #28
 8018776:	d501      	bpl.n	801877c <_vfiprintf_r+0x3c>
 8018778:	692b      	ldr	r3, [r5, #16]
 801877a:	b9eb      	cbnz	r3, 80187b8 <_vfiprintf_r+0x78>
 801877c:	4629      	mov	r1, r5
 801877e:	4630      	mov	r0, r6
 8018780:	f000 fb06 	bl	8018d90 <__swsetup_r>
 8018784:	b1c0      	cbz	r0, 80187b8 <_vfiprintf_r+0x78>
 8018786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018788:	07dc      	lsls	r4, r3, #31
 801878a:	d50e      	bpl.n	80187aa <_vfiprintf_r+0x6a>
 801878c:	f04f 30ff 	mov.w	r0, #4294967295
 8018790:	b01d      	add	sp, #116	; 0x74
 8018792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018796:	4b7b      	ldr	r3, [pc, #492]	; (8018984 <_vfiprintf_r+0x244>)
 8018798:	429d      	cmp	r5, r3
 801879a:	d101      	bne.n	80187a0 <_vfiprintf_r+0x60>
 801879c:	68b5      	ldr	r5, [r6, #8]
 801879e:	e7df      	b.n	8018760 <_vfiprintf_r+0x20>
 80187a0:	4b79      	ldr	r3, [pc, #484]	; (8018988 <_vfiprintf_r+0x248>)
 80187a2:	429d      	cmp	r5, r3
 80187a4:	bf08      	it	eq
 80187a6:	68f5      	ldreq	r5, [r6, #12]
 80187a8:	e7da      	b.n	8018760 <_vfiprintf_r+0x20>
 80187aa:	89ab      	ldrh	r3, [r5, #12]
 80187ac:	0598      	lsls	r0, r3, #22
 80187ae:	d4ed      	bmi.n	801878c <_vfiprintf_r+0x4c>
 80187b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187b2:	f7ff fc7b 	bl	80180ac <__retarget_lock_release_recursive>
 80187b6:	e7e9      	b.n	801878c <_vfiprintf_r+0x4c>
 80187b8:	2300      	movs	r3, #0
 80187ba:	9309      	str	r3, [sp, #36]	; 0x24
 80187bc:	2320      	movs	r3, #32
 80187be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80187c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80187c6:	2330      	movs	r3, #48	; 0x30
 80187c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801898c <_vfiprintf_r+0x24c>
 80187cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80187d0:	f04f 0901 	mov.w	r9, #1
 80187d4:	4623      	mov	r3, r4
 80187d6:	469a      	mov	sl, r3
 80187d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187dc:	b10a      	cbz	r2, 80187e2 <_vfiprintf_r+0xa2>
 80187de:	2a25      	cmp	r2, #37	; 0x25
 80187e0:	d1f9      	bne.n	80187d6 <_vfiprintf_r+0x96>
 80187e2:	ebba 0b04 	subs.w	fp, sl, r4
 80187e6:	d00b      	beq.n	8018800 <_vfiprintf_r+0xc0>
 80187e8:	465b      	mov	r3, fp
 80187ea:	4622      	mov	r2, r4
 80187ec:	4629      	mov	r1, r5
 80187ee:	4630      	mov	r0, r6
 80187f0:	f7ff ff93 	bl	801871a <__sfputs_r>
 80187f4:	3001      	adds	r0, #1
 80187f6:	f000 80aa 	beq.w	801894e <_vfiprintf_r+0x20e>
 80187fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187fc:	445a      	add	r2, fp
 80187fe:	9209      	str	r2, [sp, #36]	; 0x24
 8018800:	f89a 3000 	ldrb.w	r3, [sl]
 8018804:	2b00      	cmp	r3, #0
 8018806:	f000 80a2 	beq.w	801894e <_vfiprintf_r+0x20e>
 801880a:	2300      	movs	r3, #0
 801880c:	f04f 32ff 	mov.w	r2, #4294967295
 8018810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018814:	f10a 0a01 	add.w	sl, sl, #1
 8018818:	9304      	str	r3, [sp, #16]
 801881a:	9307      	str	r3, [sp, #28]
 801881c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018820:	931a      	str	r3, [sp, #104]	; 0x68
 8018822:	4654      	mov	r4, sl
 8018824:	2205      	movs	r2, #5
 8018826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801882a:	4858      	ldr	r0, [pc, #352]	; (801898c <_vfiprintf_r+0x24c>)
 801882c:	f7e7 fcf0 	bl	8000210 <memchr>
 8018830:	9a04      	ldr	r2, [sp, #16]
 8018832:	b9d8      	cbnz	r0, 801886c <_vfiprintf_r+0x12c>
 8018834:	06d1      	lsls	r1, r2, #27
 8018836:	bf44      	itt	mi
 8018838:	2320      	movmi	r3, #32
 801883a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801883e:	0713      	lsls	r3, r2, #28
 8018840:	bf44      	itt	mi
 8018842:	232b      	movmi	r3, #43	; 0x2b
 8018844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018848:	f89a 3000 	ldrb.w	r3, [sl]
 801884c:	2b2a      	cmp	r3, #42	; 0x2a
 801884e:	d015      	beq.n	801887c <_vfiprintf_r+0x13c>
 8018850:	9a07      	ldr	r2, [sp, #28]
 8018852:	4654      	mov	r4, sl
 8018854:	2000      	movs	r0, #0
 8018856:	f04f 0c0a 	mov.w	ip, #10
 801885a:	4621      	mov	r1, r4
 801885c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018860:	3b30      	subs	r3, #48	; 0x30
 8018862:	2b09      	cmp	r3, #9
 8018864:	d94e      	bls.n	8018904 <_vfiprintf_r+0x1c4>
 8018866:	b1b0      	cbz	r0, 8018896 <_vfiprintf_r+0x156>
 8018868:	9207      	str	r2, [sp, #28]
 801886a:	e014      	b.n	8018896 <_vfiprintf_r+0x156>
 801886c:	eba0 0308 	sub.w	r3, r0, r8
 8018870:	fa09 f303 	lsl.w	r3, r9, r3
 8018874:	4313      	orrs	r3, r2
 8018876:	9304      	str	r3, [sp, #16]
 8018878:	46a2      	mov	sl, r4
 801887a:	e7d2      	b.n	8018822 <_vfiprintf_r+0xe2>
 801887c:	9b03      	ldr	r3, [sp, #12]
 801887e:	1d19      	adds	r1, r3, #4
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	9103      	str	r1, [sp, #12]
 8018884:	2b00      	cmp	r3, #0
 8018886:	bfbb      	ittet	lt
 8018888:	425b      	neglt	r3, r3
 801888a:	f042 0202 	orrlt.w	r2, r2, #2
 801888e:	9307      	strge	r3, [sp, #28]
 8018890:	9307      	strlt	r3, [sp, #28]
 8018892:	bfb8      	it	lt
 8018894:	9204      	strlt	r2, [sp, #16]
 8018896:	7823      	ldrb	r3, [r4, #0]
 8018898:	2b2e      	cmp	r3, #46	; 0x2e
 801889a:	d10c      	bne.n	80188b6 <_vfiprintf_r+0x176>
 801889c:	7863      	ldrb	r3, [r4, #1]
 801889e:	2b2a      	cmp	r3, #42	; 0x2a
 80188a0:	d135      	bne.n	801890e <_vfiprintf_r+0x1ce>
 80188a2:	9b03      	ldr	r3, [sp, #12]
 80188a4:	1d1a      	adds	r2, r3, #4
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	9203      	str	r2, [sp, #12]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	bfb8      	it	lt
 80188ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80188b2:	3402      	adds	r4, #2
 80188b4:	9305      	str	r3, [sp, #20]
 80188b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801899c <_vfiprintf_r+0x25c>
 80188ba:	7821      	ldrb	r1, [r4, #0]
 80188bc:	2203      	movs	r2, #3
 80188be:	4650      	mov	r0, sl
 80188c0:	f7e7 fca6 	bl	8000210 <memchr>
 80188c4:	b140      	cbz	r0, 80188d8 <_vfiprintf_r+0x198>
 80188c6:	2340      	movs	r3, #64	; 0x40
 80188c8:	eba0 000a 	sub.w	r0, r0, sl
 80188cc:	fa03 f000 	lsl.w	r0, r3, r0
 80188d0:	9b04      	ldr	r3, [sp, #16]
 80188d2:	4303      	orrs	r3, r0
 80188d4:	3401      	adds	r4, #1
 80188d6:	9304      	str	r3, [sp, #16]
 80188d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188dc:	482c      	ldr	r0, [pc, #176]	; (8018990 <_vfiprintf_r+0x250>)
 80188de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80188e2:	2206      	movs	r2, #6
 80188e4:	f7e7 fc94 	bl	8000210 <memchr>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	d03f      	beq.n	801896c <_vfiprintf_r+0x22c>
 80188ec:	4b29      	ldr	r3, [pc, #164]	; (8018994 <_vfiprintf_r+0x254>)
 80188ee:	bb1b      	cbnz	r3, 8018938 <_vfiprintf_r+0x1f8>
 80188f0:	9b03      	ldr	r3, [sp, #12]
 80188f2:	3307      	adds	r3, #7
 80188f4:	f023 0307 	bic.w	r3, r3, #7
 80188f8:	3308      	adds	r3, #8
 80188fa:	9303      	str	r3, [sp, #12]
 80188fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188fe:	443b      	add	r3, r7
 8018900:	9309      	str	r3, [sp, #36]	; 0x24
 8018902:	e767      	b.n	80187d4 <_vfiprintf_r+0x94>
 8018904:	fb0c 3202 	mla	r2, ip, r2, r3
 8018908:	460c      	mov	r4, r1
 801890a:	2001      	movs	r0, #1
 801890c:	e7a5      	b.n	801885a <_vfiprintf_r+0x11a>
 801890e:	2300      	movs	r3, #0
 8018910:	3401      	adds	r4, #1
 8018912:	9305      	str	r3, [sp, #20]
 8018914:	4619      	mov	r1, r3
 8018916:	f04f 0c0a 	mov.w	ip, #10
 801891a:	4620      	mov	r0, r4
 801891c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018920:	3a30      	subs	r2, #48	; 0x30
 8018922:	2a09      	cmp	r2, #9
 8018924:	d903      	bls.n	801892e <_vfiprintf_r+0x1ee>
 8018926:	2b00      	cmp	r3, #0
 8018928:	d0c5      	beq.n	80188b6 <_vfiprintf_r+0x176>
 801892a:	9105      	str	r1, [sp, #20]
 801892c:	e7c3      	b.n	80188b6 <_vfiprintf_r+0x176>
 801892e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018932:	4604      	mov	r4, r0
 8018934:	2301      	movs	r3, #1
 8018936:	e7f0      	b.n	801891a <_vfiprintf_r+0x1da>
 8018938:	ab03      	add	r3, sp, #12
 801893a:	9300      	str	r3, [sp, #0]
 801893c:	462a      	mov	r2, r5
 801893e:	4b16      	ldr	r3, [pc, #88]	; (8018998 <_vfiprintf_r+0x258>)
 8018940:	a904      	add	r1, sp, #16
 8018942:	4630      	mov	r0, r6
 8018944:	f3af 8000 	nop.w
 8018948:	4607      	mov	r7, r0
 801894a:	1c78      	adds	r0, r7, #1
 801894c:	d1d6      	bne.n	80188fc <_vfiprintf_r+0x1bc>
 801894e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018950:	07d9      	lsls	r1, r3, #31
 8018952:	d405      	bmi.n	8018960 <_vfiprintf_r+0x220>
 8018954:	89ab      	ldrh	r3, [r5, #12]
 8018956:	059a      	lsls	r2, r3, #22
 8018958:	d402      	bmi.n	8018960 <_vfiprintf_r+0x220>
 801895a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801895c:	f7ff fba6 	bl	80180ac <__retarget_lock_release_recursive>
 8018960:	89ab      	ldrh	r3, [r5, #12]
 8018962:	065b      	lsls	r3, r3, #25
 8018964:	f53f af12 	bmi.w	801878c <_vfiprintf_r+0x4c>
 8018968:	9809      	ldr	r0, [sp, #36]	; 0x24
 801896a:	e711      	b.n	8018790 <_vfiprintf_r+0x50>
 801896c:	ab03      	add	r3, sp, #12
 801896e:	9300      	str	r3, [sp, #0]
 8018970:	462a      	mov	r2, r5
 8018972:	4b09      	ldr	r3, [pc, #36]	; (8018998 <_vfiprintf_r+0x258>)
 8018974:	a904      	add	r1, sp, #16
 8018976:	4630      	mov	r0, r6
 8018978:	f000 f880 	bl	8018a7c <_printf_i>
 801897c:	e7e4      	b.n	8018948 <_vfiprintf_r+0x208>
 801897e:	bf00      	nop
 8018980:	0801c714 	.word	0x0801c714
 8018984:	0801c734 	.word	0x0801c734
 8018988:	0801c6f4 	.word	0x0801c6f4
 801898c:	0801c80a 	.word	0x0801c80a
 8018990:	0801c814 	.word	0x0801c814
 8018994:	00000000 	.word	0x00000000
 8018998:	0801871b 	.word	0x0801871b
 801899c:	0801c810 	.word	0x0801c810

080189a0 <_printf_common>:
 80189a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189a4:	4616      	mov	r6, r2
 80189a6:	4699      	mov	r9, r3
 80189a8:	688a      	ldr	r2, [r1, #8]
 80189aa:	690b      	ldr	r3, [r1, #16]
 80189ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80189b0:	4293      	cmp	r3, r2
 80189b2:	bfb8      	it	lt
 80189b4:	4613      	movlt	r3, r2
 80189b6:	6033      	str	r3, [r6, #0]
 80189b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80189bc:	4607      	mov	r7, r0
 80189be:	460c      	mov	r4, r1
 80189c0:	b10a      	cbz	r2, 80189c6 <_printf_common+0x26>
 80189c2:	3301      	adds	r3, #1
 80189c4:	6033      	str	r3, [r6, #0]
 80189c6:	6823      	ldr	r3, [r4, #0]
 80189c8:	0699      	lsls	r1, r3, #26
 80189ca:	bf42      	ittt	mi
 80189cc:	6833      	ldrmi	r3, [r6, #0]
 80189ce:	3302      	addmi	r3, #2
 80189d0:	6033      	strmi	r3, [r6, #0]
 80189d2:	6825      	ldr	r5, [r4, #0]
 80189d4:	f015 0506 	ands.w	r5, r5, #6
 80189d8:	d106      	bne.n	80189e8 <_printf_common+0x48>
 80189da:	f104 0a19 	add.w	sl, r4, #25
 80189de:	68e3      	ldr	r3, [r4, #12]
 80189e0:	6832      	ldr	r2, [r6, #0]
 80189e2:	1a9b      	subs	r3, r3, r2
 80189e4:	42ab      	cmp	r3, r5
 80189e6:	dc26      	bgt.n	8018a36 <_printf_common+0x96>
 80189e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80189ec:	1e13      	subs	r3, r2, #0
 80189ee:	6822      	ldr	r2, [r4, #0]
 80189f0:	bf18      	it	ne
 80189f2:	2301      	movne	r3, #1
 80189f4:	0692      	lsls	r2, r2, #26
 80189f6:	d42b      	bmi.n	8018a50 <_printf_common+0xb0>
 80189f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80189fc:	4649      	mov	r1, r9
 80189fe:	4638      	mov	r0, r7
 8018a00:	47c0      	blx	r8
 8018a02:	3001      	adds	r0, #1
 8018a04:	d01e      	beq.n	8018a44 <_printf_common+0xa4>
 8018a06:	6823      	ldr	r3, [r4, #0]
 8018a08:	68e5      	ldr	r5, [r4, #12]
 8018a0a:	6832      	ldr	r2, [r6, #0]
 8018a0c:	f003 0306 	and.w	r3, r3, #6
 8018a10:	2b04      	cmp	r3, #4
 8018a12:	bf08      	it	eq
 8018a14:	1aad      	subeq	r5, r5, r2
 8018a16:	68a3      	ldr	r3, [r4, #8]
 8018a18:	6922      	ldr	r2, [r4, #16]
 8018a1a:	bf0c      	ite	eq
 8018a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018a20:	2500      	movne	r5, #0
 8018a22:	4293      	cmp	r3, r2
 8018a24:	bfc4      	itt	gt
 8018a26:	1a9b      	subgt	r3, r3, r2
 8018a28:	18ed      	addgt	r5, r5, r3
 8018a2a:	2600      	movs	r6, #0
 8018a2c:	341a      	adds	r4, #26
 8018a2e:	42b5      	cmp	r5, r6
 8018a30:	d11a      	bne.n	8018a68 <_printf_common+0xc8>
 8018a32:	2000      	movs	r0, #0
 8018a34:	e008      	b.n	8018a48 <_printf_common+0xa8>
 8018a36:	2301      	movs	r3, #1
 8018a38:	4652      	mov	r2, sl
 8018a3a:	4649      	mov	r1, r9
 8018a3c:	4638      	mov	r0, r7
 8018a3e:	47c0      	blx	r8
 8018a40:	3001      	adds	r0, #1
 8018a42:	d103      	bne.n	8018a4c <_printf_common+0xac>
 8018a44:	f04f 30ff 	mov.w	r0, #4294967295
 8018a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a4c:	3501      	adds	r5, #1
 8018a4e:	e7c6      	b.n	80189de <_printf_common+0x3e>
 8018a50:	18e1      	adds	r1, r4, r3
 8018a52:	1c5a      	adds	r2, r3, #1
 8018a54:	2030      	movs	r0, #48	; 0x30
 8018a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018a5a:	4422      	add	r2, r4
 8018a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018a64:	3302      	adds	r3, #2
 8018a66:	e7c7      	b.n	80189f8 <_printf_common+0x58>
 8018a68:	2301      	movs	r3, #1
 8018a6a:	4622      	mov	r2, r4
 8018a6c:	4649      	mov	r1, r9
 8018a6e:	4638      	mov	r0, r7
 8018a70:	47c0      	blx	r8
 8018a72:	3001      	adds	r0, #1
 8018a74:	d0e6      	beq.n	8018a44 <_printf_common+0xa4>
 8018a76:	3601      	adds	r6, #1
 8018a78:	e7d9      	b.n	8018a2e <_printf_common+0x8e>
	...

08018a7c <_printf_i>:
 8018a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018a80:	460c      	mov	r4, r1
 8018a82:	4691      	mov	r9, r2
 8018a84:	7e27      	ldrb	r7, [r4, #24]
 8018a86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018a88:	2f78      	cmp	r7, #120	; 0x78
 8018a8a:	4680      	mov	r8, r0
 8018a8c:	469a      	mov	sl, r3
 8018a8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018a92:	d807      	bhi.n	8018aa4 <_printf_i+0x28>
 8018a94:	2f62      	cmp	r7, #98	; 0x62
 8018a96:	d80a      	bhi.n	8018aae <_printf_i+0x32>
 8018a98:	2f00      	cmp	r7, #0
 8018a9a:	f000 80d8 	beq.w	8018c4e <_printf_i+0x1d2>
 8018a9e:	2f58      	cmp	r7, #88	; 0x58
 8018aa0:	f000 80a3 	beq.w	8018bea <_printf_i+0x16e>
 8018aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018aac:	e03a      	b.n	8018b24 <_printf_i+0xa8>
 8018aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018ab2:	2b15      	cmp	r3, #21
 8018ab4:	d8f6      	bhi.n	8018aa4 <_printf_i+0x28>
 8018ab6:	a001      	add	r0, pc, #4	; (adr r0, 8018abc <_printf_i+0x40>)
 8018ab8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018abc:	08018b15 	.word	0x08018b15
 8018ac0:	08018b29 	.word	0x08018b29
 8018ac4:	08018aa5 	.word	0x08018aa5
 8018ac8:	08018aa5 	.word	0x08018aa5
 8018acc:	08018aa5 	.word	0x08018aa5
 8018ad0:	08018aa5 	.word	0x08018aa5
 8018ad4:	08018b29 	.word	0x08018b29
 8018ad8:	08018aa5 	.word	0x08018aa5
 8018adc:	08018aa5 	.word	0x08018aa5
 8018ae0:	08018aa5 	.word	0x08018aa5
 8018ae4:	08018aa5 	.word	0x08018aa5
 8018ae8:	08018c35 	.word	0x08018c35
 8018aec:	08018b59 	.word	0x08018b59
 8018af0:	08018c17 	.word	0x08018c17
 8018af4:	08018aa5 	.word	0x08018aa5
 8018af8:	08018aa5 	.word	0x08018aa5
 8018afc:	08018c57 	.word	0x08018c57
 8018b00:	08018aa5 	.word	0x08018aa5
 8018b04:	08018b59 	.word	0x08018b59
 8018b08:	08018aa5 	.word	0x08018aa5
 8018b0c:	08018aa5 	.word	0x08018aa5
 8018b10:	08018c1f 	.word	0x08018c1f
 8018b14:	680b      	ldr	r3, [r1, #0]
 8018b16:	1d1a      	adds	r2, r3, #4
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	600a      	str	r2, [r1, #0]
 8018b1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018b24:	2301      	movs	r3, #1
 8018b26:	e0a3      	b.n	8018c70 <_printf_i+0x1f4>
 8018b28:	6825      	ldr	r5, [r4, #0]
 8018b2a:	6808      	ldr	r0, [r1, #0]
 8018b2c:	062e      	lsls	r6, r5, #24
 8018b2e:	f100 0304 	add.w	r3, r0, #4
 8018b32:	d50a      	bpl.n	8018b4a <_printf_i+0xce>
 8018b34:	6805      	ldr	r5, [r0, #0]
 8018b36:	600b      	str	r3, [r1, #0]
 8018b38:	2d00      	cmp	r5, #0
 8018b3a:	da03      	bge.n	8018b44 <_printf_i+0xc8>
 8018b3c:	232d      	movs	r3, #45	; 0x2d
 8018b3e:	426d      	negs	r5, r5
 8018b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b44:	485e      	ldr	r0, [pc, #376]	; (8018cc0 <_printf_i+0x244>)
 8018b46:	230a      	movs	r3, #10
 8018b48:	e019      	b.n	8018b7e <_printf_i+0x102>
 8018b4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018b4e:	6805      	ldr	r5, [r0, #0]
 8018b50:	600b      	str	r3, [r1, #0]
 8018b52:	bf18      	it	ne
 8018b54:	b22d      	sxthne	r5, r5
 8018b56:	e7ef      	b.n	8018b38 <_printf_i+0xbc>
 8018b58:	680b      	ldr	r3, [r1, #0]
 8018b5a:	6825      	ldr	r5, [r4, #0]
 8018b5c:	1d18      	adds	r0, r3, #4
 8018b5e:	6008      	str	r0, [r1, #0]
 8018b60:	0628      	lsls	r0, r5, #24
 8018b62:	d501      	bpl.n	8018b68 <_printf_i+0xec>
 8018b64:	681d      	ldr	r5, [r3, #0]
 8018b66:	e002      	b.n	8018b6e <_printf_i+0xf2>
 8018b68:	0669      	lsls	r1, r5, #25
 8018b6a:	d5fb      	bpl.n	8018b64 <_printf_i+0xe8>
 8018b6c:	881d      	ldrh	r5, [r3, #0]
 8018b6e:	4854      	ldr	r0, [pc, #336]	; (8018cc0 <_printf_i+0x244>)
 8018b70:	2f6f      	cmp	r7, #111	; 0x6f
 8018b72:	bf0c      	ite	eq
 8018b74:	2308      	moveq	r3, #8
 8018b76:	230a      	movne	r3, #10
 8018b78:	2100      	movs	r1, #0
 8018b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018b7e:	6866      	ldr	r6, [r4, #4]
 8018b80:	60a6      	str	r6, [r4, #8]
 8018b82:	2e00      	cmp	r6, #0
 8018b84:	bfa2      	ittt	ge
 8018b86:	6821      	ldrge	r1, [r4, #0]
 8018b88:	f021 0104 	bicge.w	r1, r1, #4
 8018b8c:	6021      	strge	r1, [r4, #0]
 8018b8e:	b90d      	cbnz	r5, 8018b94 <_printf_i+0x118>
 8018b90:	2e00      	cmp	r6, #0
 8018b92:	d04d      	beq.n	8018c30 <_printf_i+0x1b4>
 8018b94:	4616      	mov	r6, r2
 8018b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8018b9a:	fb03 5711 	mls	r7, r3, r1, r5
 8018b9e:	5dc7      	ldrb	r7, [r0, r7]
 8018ba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018ba4:	462f      	mov	r7, r5
 8018ba6:	42bb      	cmp	r3, r7
 8018ba8:	460d      	mov	r5, r1
 8018baa:	d9f4      	bls.n	8018b96 <_printf_i+0x11a>
 8018bac:	2b08      	cmp	r3, #8
 8018bae:	d10b      	bne.n	8018bc8 <_printf_i+0x14c>
 8018bb0:	6823      	ldr	r3, [r4, #0]
 8018bb2:	07df      	lsls	r7, r3, #31
 8018bb4:	d508      	bpl.n	8018bc8 <_printf_i+0x14c>
 8018bb6:	6923      	ldr	r3, [r4, #16]
 8018bb8:	6861      	ldr	r1, [r4, #4]
 8018bba:	4299      	cmp	r1, r3
 8018bbc:	bfde      	ittt	le
 8018bbe:	2330      	movle	r3, #48	; 0x30
 8018bc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018bc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018bc8:	1b92      	subs	r2, r2, r6
 8018bca:	6122      	str	r2, [r4, #16]
 8018bcc:	f8cd a000 	str.w	sl, [sp]
 8018bd0:	464b      	mov	r3, r9
 8018bd2:	aa03      	add	r2, sp, #12
 8018bd4:	4621      	mov	r1, r4
 8018bd6:	4640      	mov	r0, r8
 8018bd8:	f7ff fee2 	bl	80189a0 <_printf_common>
 8018bdc:	3001      	adds	r0, #1
 8018bde:	d14c      	bne.n	8018c7a <_printf_i+0x1fe>
 8018be0:	f04f 30ff 	mov.w	r0, #4294967295
 8018be4:	b004      	add	sp, #16
 8018be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bea:	4835      	ldr	r0, [pc, #212]	; (8018cc0 <_printf_i+0x244>)
 8018bec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018bf0:	6823      	ldr	r3, [r4, #0]
 8018bf2:	680e      	ldr	r6, [r1, #0]
 8018bf4:	061f      	lsls	r7, r3, #24
 8018bf6:	f856 5b04 	ldr.w	r5, [r6], #4
 8018bfa:	600e      	str	r6, [r1, #0]
 8018bfc:	d514      	bpl.n	8018c28 <_printf_i+0x1ac>
 8018bfe:	07d9      	lsls	r1, r3, #31
 8018c00:	bf44      	itt	mi
 8018c02:	f043 0320 	orrmi.w	r3, r3, #32
 8018c06:	6023      	strmi	r3, [r4, #0]
 8018c08:	b91d      	cbnz	r5, 8018c12 <_printf_i+0x196>
 8018c0a:	6823      	ldr	r3, [r4, #0]
 8018c0c:	f023 0320 	bic.w	r3, r3, #32
 8018c10:	6023      	str	r3, [r4, #0]
 8018c12:	2310      	movs	r3, #16
 8018c14:	e7b0      	b.n	8018b78 <_printf_i+0xfc>
 8018c16:	6823      	ldr	r3, [r4, #0]
 8018c18:	f043 0320 	orr.w	r3, r3, #32
 8018c1c:	6023      	str	r3, [r4, #0]
 8018c1e:	2378      	movs	r3, #120	; 0x78
 8018c20:	4828      	ldr	r0, [pc, #160]	; (8018cc4 <_printf_i+0x248>)
 8018c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018c26:	e7e3      	b.n	8018bf0 <_printf_i+0x174>
 8018c28:	065e      	lsls	r6, r3, #25
 8018c2a:	bf48      	it	mi
 8018c2c:	b2ad      	uxthmi	r5, r5
 8018c2e:	e7e6      	b.n	8018bfe <_printf_i+0x182>
 8018c30:	4616      	mov	r6, r2
 8018c32:	e7bb      	b.n	8018bac <_printf_i+0x130>
 8018c34:	680b      	ldr	r3, [r1, #0]
 8018c36:	6826      	ldr	r6, [r4, #0]
 8018c38:	6960      	ldr	r0, [r4, #20]
 8018c3a:	1d1d      	adds	r5, r3, #4
 8018c3c:	600d      	str	r5, [r1, #0]
 8018c3e:	0635      	lsls	r5, r6, #24
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	d501      	bpl.n	8018c48 <_printf_i+0x1cc>
 8018c44:	6018      	str	r0, [r3, #0]
 8018c46:	e002      	b.n	8018c4e <_printf_i+0x1d2>
 8018c48:	0671      	lsls	r1, r6, #25
 8018c4a:	d5fb      	bpl.n	8018c44 <_printf_i+0x1c8>
 8018c4c:	8018      	strh	r0, [r3, #0]
 8018c4e:	2300      	movs	r3, #0
 8018c50:	6123      	str	r3, [r4, #16]
 8018c52:	4616      	mov	r6, r2
 8018c54:	e7ba      	b.n	8018bcc <_printf_i+0x150>
 8018c56:	680b      	ldr	r3, [r1, #0]
 8018c58:	1d1a      	adds	r2, r3, #4
 8018c5a:	600a      	str	r2, [r1, #0]
 8018c5c:	681e      	ldr	r6, [r3, #0]
 8018c5e:	6862      	ldr	r2, [r4, #4]
 8018c60:	2100      	movs	r1, #0
 8018c62:	4630      	mov	r0, r6
 8018c64:	f7e7 fad4 	bl	8000210 <memchr>
 8018c68:	b108      	cbz	r0, 8018c6e <_printf_i+0x1f2>
 8018c6a:	1b80      	subs	r0, r0, r6
 8018c6c:	6060      	str	r0, [r4, #4]
 8018c6e:	6863      	ldr	r3, [r4, #4]
 8018c70:	6123      	str	r3, [r4, #16]
 8018c72:	2300      	movs	r3, #0
 8018c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c78:	e7a8      	b.n	8018bcc <_printf_i+0x150>
 8018c7a:	6923      	ldr	r3, [r4, #16]
 8018c7c:	4632      	mov	r2, r6
 8018c7e:	4649      	mov	r1, r9
 8018c80:	4640      	mov	r0, r8
 8018c82:	47d0      	blx	sl
 8018c84:	3001      	adds	r0, #1
 8018c86:	d0ab      	beq.n	8018be0 <_printf_i+0x164>
 8018c88:	6823      	ldr	r3, [r4, #0]
 8018c8a:	079b      	lsls	r3, r3, #30
 8018c8c:	d413      	bmi.n	8018cb6 <_printf_i+0x23a>
 8018c8e:	68e0      	ldr	r0, [r4, #12]
 8018c90:	9b03      	ldr	r3, [sp, #12]
 8018c92:	4298      	cmp	r0, r3
 8018c94:	bfb8      	it	lt
 8018c96:	4618      	movlt	r0, r3
 8018c98:	e7a4      	b.n	8018be4 <_printf_i+0x168>
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	4632      	mov	r2, r6
 8018c9e:	4649      	mov	r1, r9
 8018ca0:	4640      	mov	r0, r8
 8018ca2:	47d0      	blx	sl
 8018ca4:	3001      	adds	r0, #1
 8018ca6:	d09b      	beq.n	8018be0 <_printf_i+0x164>
 8018ca8:	3501      	adds	r5, #1
 8018caa:	68e3      	ldr	r3, [r4, #12]
 8018cac:	9903      	ldr	r1, [sp, #12]
 8018cae:	1a5b      	subs	r3, r3, r1
 8018cb0:	42ab      	cmp	r3, r5
 8018cb2:	dcf2      	bgt.n	8018c9a <_printf_i+0x21e>
 8018cb4:	e7eb      	b.n	8018c8e <_printf_i+0x212>
 8018cb6:	2500      	movs	r5, #0
 8018cb8:	f104 0619 	add.w	r6, r4, #25
 8018cbc:	e7f5      	b.n	8018caa <_printf_i+0x22e>
 8018cbe:	bf00      	nop
 8018cc0:	0801c81b 	.word	0x0801c81b
 8018cc4:	0801c82c 	.word	0x0801c82c

08018cc8 <_read_r>:
 8018cc8:	b538      	push	{r3, r4, r5, lr}
 8018cca:	4d07      	ldr	r5, [pc, #28]	; (8018ce8 <_read_r+0x20>)
 8018ccc:	4604      	mov	r4, r0
 8018cce:	4608      	mov	r0, r1
 8018cd0:	4611      	mov	r1, r2
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	602a      	str	r2, [r5, #0]
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	f7e8 fc82 	bl	80015e0 <_read>
 8018cdc:	1c43      	adds	r3, r0, #1
 8018cde:	d102      	bne.n	8018ce6 <_read_r+0x1e>
 8018ce0:	682b      	ldr	r3, [r5, #0]
 8018ce2:	b103      	cbz	r3, 8018ce6 <_read_r+0x1e>
 8018ce4:	6023      	str	r3, [r4, #0]
 8018ce6:	bd38      	pop	{r3, r4, r5, pc}
 8018ce8:	2000d8f8 	.word	0x2000d8f8

08018cec <__swbuf_r>:
 8018cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cee:	460e      	mov	r6, r1
 8018cf0:	4614      	mov	r4, r2
 8018cf2:	4605      	mov	r5, r0
 8018cf4:	b118      	cbz	r0, 8018cfe <__swbuf_r+0x12>
 8018cf6:	6983      	ldr	r3, [r0, #24]
 8018cf8:	b90b      	cbnz	r3, 8018cfe <__swbuf_r+0x12>
 8018cfa:	f7ff f913 	bl	8017f24 <__sinit>
 8018cfe:	4b21      	ldr	r3, [pc, #132]	; (8018d84 <__swbuf_r+0x98>)
 8018d00:	429c      	cmp	r4, r3
 8018d02:	d12b      	bne.n	8018d5c <__swbuf_r+0x70>
 8018d04:	686c      	ldr	r4, [r5, #4]
 8018d06:	69a3      	ldr	r3, [r4, #24]
 8018d08:	60a3      	str	r3, [r4, #8]
 8018d0a:	89a3      	ldrh	r3, [r4, #12]
 8018d0c:	071a      	lsls	r2, r3, #28
 8018d0e:	d52f      	bpl.n	8018d70 <__swbuf_r+0x84>
 8018d10:	6923      	ldr	r3, [r4, #16]
 8018d12:	b36b      	cbz	r3, 8018d70 <__swbuf_r+0x84>
 8018d14:	6923      	ldr	r3, [r4, #16]
 8018d16:	6820      	ldr	r0, [r4, #0]
 8018d18:	1ac0      	subs	r0, r0, r3
 8018d1a:	6963      	ldr	r3, [r4, #20]
 8018d1c:	b2f6      	uxtb	r6, r6
 8018d1e:	4283      	cmp	r3, r0
 8018d20:	4637      	mov	r7, r6
 8018d22:	dc04      	bgt.n	8018d2e <__swbuf_r+0x42>
 8018d24:	4621      	mov	r1, r4
 8018d26:	4628      	mov	r0, r5
 8018d28:	f7ff fc1c 	bl	8018564 <_fflush_r>
 8018d2c:	bb30      	cbnz	r0, 8018d7c <__swbuf_r+0x90>
 8018d2e:	68a3      	ldr	r3, [r4, #8]
 8018d30:	3b01      	subs	r3, #1
 8018d32:	60a3      	str	r3, [r4, #8]
 8018d34:	6823      	ldr	r3, [r4, #0]
 8018d36:	1c5a      	adds	r2, r3, #1
 8018d38:	6022      	str	r2, [r4, #0]
 8018d3a:	701e      	strb	r6, [r3, #0]
 8018d3c:	6963      	ldr	r3, [r4, #20]
 8018d3e:	3001      	adds	r0, #1
 8018d40:	4283      	cmp	r3, r0
 8018d42:	d004      	beq.n	8018d4e <__swbuf_r+0x62>
 8018d44:	89a3      	ldrh	r3, [r4, #12]
 8018d46:	07db      	lsls	r3, r3, #31
 8018d48:	d506      	bpl.n	8018d58 <__swbuf_r+0x6c>
 8018d4a:	2e0a      	cmp	r6, #10
 8018d4c:	d104      	bne.n	8018d58 <__swbuf_r+0x6c>
 8018d4e:	4621      	mov	r1, r4
 8018d50:	4628      	mov	r0, r5
 8018d52:	f7ff fc07 	bl	8018564 <_fflush_r>
 8018d56:	b988      	cbnz	r0, 8018d7c <__swbuf_r+0x90>
 8018d58:	4638      	mov	r0, r7
 8018d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d5c:	4b0a      	ldr	r3, [pc, #40]	; (8018d88 <__swbuf_r+0x9c>)
 8018d5e:	429c      	cmp	r4, r3
 8018d60:	d101      	bne.n	8018d66 <__swbuf_r+0x7a>
 8018d62:	68ac      	ldr	r4, [r5, #8]
 8018d64:	e7cf      	b.n	8018d06 <__swbuf_r+0x1a>
 8018d66:	4b09      	ldr	r3, [pc, #36]	; (8018d8c <__swbuf_r+0xa0>)
 8018d68:	429c      	cmp	r4, r3
 8018d6a:	bf08      	it	eq
 8018d6c:	68ec      	ldreq	r4, [r5, #12]
 8018d6e:	e7ca      	b.n	8018d06 <__swbuf_r+0x1a>
 8018d70:	4621      	mov	r1, r4
 8018d72:	4628      	mov	r0, r5
 8018d74:	f000 f80c 	bl	8018d90 <__swsetup_r>
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	d0cb      	beq.n	8018d14 <__swbuf_r+0x28>
 8018d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8018d80:	e7ea      	b.n	8018d58 <__swbuf_r+0x6c>
 8018d82:	bf00      	nop
 8018d84:	0801c714 	.word	0x0801c714
 8018d88:	0801c734 	.word	0x0801c734
 8018d8c:	0801c6f4 	.word	0x0801c6f4

08018d90 <__swsetup_r>:
 8018d90:	4b32      	ldr	r3, [pc, #200]	; (8018e5c <__swsetup_r+0xcc>)
 8018d92:	b570      	push	{r4, r5, r6, lr}
 8018d94:	681d      	ldr	r5, [r3, #0]
 8018d96:	4606      	mov	r6, r0
 8018d98:	460c      	mov	r4, r1
 8018d9a:	b125      	cbz	r5, 8018da6 <__swsetup_r+0x16>
 8018d9c:	69ab      	ldr	r3, [r5, #24]
 8018d9e:	b913      	cbnz	r3, 8018da6 <__swsetup_r+0x16>
 8018da0:	4628      	mov	r0, r5
 8018da2:	f7ff f8bf 	bl	8017f24 <__sinit>
 8018da6:	4b2e      	ldr	r3, [pc, #184]	; (8018e60 <__swsetup_r+0xd0>)
 8018da8:	429c      	cmp	r4, r3
 8018daa:	d10f      	bne.n	8018dcc <__swsetup_r+0x3c>
 8018dac:	686c      	ldr	r4, [r5, #4]
 8018dae:	89a3      	ldrh	r3, [r4, #12]
 8018db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018db4:	0719      	lsls	r1, r3, #28
 8018db6:	d42c      	bmi.n	8018e12 <__swsetup_r+0x82>
 8018db8:	06dd      	lsls	r5, r3, #27
 8018dba:	d411      	bmi.n	8018de0 <__swsetup_r+0x50>
 8018dbc:	2309      	movs	r3, #9
 8018dbe:	6033      	str	r3, [r6, #0]
 8018dc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018dc4:	81a3      	strh	r3, [r4, #12]
 8018dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8018dca:	e03e      	b.n	8018e4a <__swsetup_r+0xba>
 8018dcc:	4b25      	ldr	r3, [pc, #148]	; (8018e64 <__swsetup_r+0xd4>)
 8018dce:	429c      	cmp	r4, r3
 8018dd0:	d101      	bne.n	8018dd6 <__swsetup_r+0x46>
 8018dd2:	68ac      	ldr	r4, [r5, #8]
 8018dd4:	e7eb      	b.n	8018dae <__swsetup_r+0x1e>
 8018dd6:	4b24      	ldr	r3, [pc, #144]	; (8018e68 <__swsetup_r+0xd8>)
 8018dd8:	429c      	cmp	r4, r3
 8018dda:	bf08      	it	eq
 8018ddc:	68ec      	ldreq	r4, [r5, #12]
 8018dde:	e7e6      	b.n	8018dae <__swsetup_r+0x1e>
 8018de0:	0758      	lsls	r0, r3, #29
 8018de2:	d512      	bpl.n	8018e0a <__swsetup_r+0x7a>
 8018de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018de6:	b141      	cbz	r1, 8018dfa <__swsetup_r+0x6a>
 8018de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018dec:	4299      	cmp	r1, r3
 8018dee:	d002      	beq.n	8018df6 <__swsetup_r+0x66>
 8018df0:	4630      	mov	r0, r6
 8018df2:	f7ff fc2b 	bl	801864c <_free_r>
 8018df6:	2300      	movs	r3, #0
 8018df8:	6363      	str	r3, [r4, #52]	; 0x34
 8018dfa:	89a3      	ldrh	r3, [r4, #12]
 8018dfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018e00:	81a3      	strh	r3, [r4, #12]
 8018e02:	2300      	movs	r3, #0
 8018e04:	6063      	str	r3, [r4, #4]
 8018e06:	6923      	ldr	r3, [r4, #16]
 8018e08:	6023      	str	r3, [r4, #0]
 8018e0a:	89a3      	ldrh	r3, [r4, #12]
 8018e0c:	f043 0308 	orr.w	r3, r3, #8
 8018e10:	81a3      	strh	r3, [r4, #12]
 8018e12:	6923      	ldr	r3, [r4, #16]
 8018e14:	b94b      	cbnz	r3, 8018e2a <__swsetup_r+0x9a>
 8018e16:	89a3      	ldrh	r3, [r4, #12]
 8018e18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e20:	d003      	beq.n	8018e2a <__swsetup_r+0x9a>
 8018e22:	4621      	mov	r1, r4
 8018e24:	4630      	mov	r0, r6
 8018e26:	f000 f84d 	bl	8018ec4 <__smakebuf_r>
 8018e2a:	89a0      	ldrh	r0, [r4, #12]
 8018e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e30:	f010 0301 	ands.w	r3, r0, #1
 8018e34:	d00a      	beq.n	8018e4c <__swsetup_r+0xbc>
 8018e36:	2300      	movs	r3, #0
 8018e38:	60a3      	str	r3, [r4, #8]
 8018e3a:	6963      	ldr	r3, [r4, #20]
 8018e3c:	425b      	negs	r3, r3
 8018e3e:	61a3      	str	r3, [r4, #24]
 8018e40:	6923      	ldr	r3, [r4, #16]
 8018e42:	b943      	cbnz	r3, 8018e56 <__swsetup_r+0xc6>
 8018e44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018e48:	d1ba      	bne.n	8018dc0 <__swsetup_r+0x30>
 8018e4a:	bd70      	pop	{r4, r5, r6, pc}
 8018e4c:	0781      	lsls	r1, r0, #30
 8018e4e:	bf58      	it	pl
 8018e50:	6963      	ldrpl	r3, [r4, #20]
 8018e52:	60a3      	str	r3, [r4, #8]
 8018e54:	e7f4      	b.n	8018e40 <__swsetup_r+0xb0>
 8018e56:	2000      	movs	r0, #0
 8018e58:	e7f7      	b.n	8018e4a <__swsetup_r+0xba>
 8018e5a:	bf00      	nop
 8018e5c:	200000d0 	.word	0x200000d0
 8018e60:	0801c714 	.word	0x0801c714
 8018e64:	0801c734 	.word	0x0801c734
 8018e68:	0801c6f4 	.word	0x0801c6f4

08018e6c <abort>:
 8018e6c:	b508      	push	{r3, lr}
 8018e6e:	2006      	movs	r0, #6
 8018e70:	f000 f890 	bl	8018f94 <raise>
 8018e74:	2001      	movs	r0, #1
 8018e76:	f7e8 fba9 	bl	80015cc <_exit>

08018e7a <__swhatbuf_r>:
 8018e7a:	b570      	push	{r4, r5, r6, lr}
 8018e7c:	460e      	mov	r6, r1
 8018e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e82:	2900      	cmp	r1, #0
 8018e84:	b096      	sub	sp, #88	; 0x58
 8018e86:	4614      	mov	r4, r2
 8018e88:	461d      	mov	r5, r3
 8018e8a:	da07      	bge.n	8018e9c <__swhatbuf_r+0x22>
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	602b      	str	r3, [r5, #0]
 8018e90:	89b3      	ldrh	r3, [r6, #12]
 8018e92:	061a      	lsls	r2, r3, #24
 8018e94:	d410      	bmi.n	8018eb8 <__swhatbuf_r+0x3e>
 8018e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018e9a:	e00e      	b.n	8018eba <__swhatbuf_r+0x40>
 8018e9c:	466a      	mov	r2, sp
 8018e9e:	f000 f895 	bl	8018fcc <_fstat_r>
 8018ea2:	2800      	cmp	r0, #0
 8018ea4:	dbf2      	blt.n	8018e8c <__swhatbuf_r+0x12>
 8018ea6:	9a01      	ldr	r2, [sp, #4]
 8018ea8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018eac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018eb0:	425a      	negs	r2, r3
 8018eb2:	415a      	adcs	r2, r3
 8018eb4:	602a      	str	r2, [r5, #0]
 8018eb6:	e7ee      	b.n	8018e96 <__swhatbuf_r+0x1c>
 8018eb8:	2340      	movs	r3, #64	; 0x40
 8018eba:	2000      	movs	r0, #0
 8018ebc:	6023      	str	r3, [r4, #0]
 8018ebe:	b016      	add	sp, #88	; 0x58
 8018ec0:	bd70      	pop	{r4, r5, r6, pc}
	...

08018ec4 <__smakebuf_r>:
 8018ec4:	898b      	ldrh	r3, [r1, #12]
 8018ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ec8:	079d      	lsls	r5, r3, #30
 8018eca:	4606      	mov	r6, r0
 8018ecc:	460c      	mov	r4, r1
 8018ece:	d507      	bpl.n	8018ee0 <__smakebuf_r+0x1c>
 8018ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018ed4:	6023      	str	r3, [r4, #0]
 8018ed6:	6123      	str	r3, [r4, #16]
 8018ed8:	2301      	movs	r3, #1
 8018eda:	6163      	str	r3, [r4, #20]
 8018edc:	b002      	add	sp, #8
 8018ede:	bd70      	pop	{r4, r5, r6, pc}
 8018ee0:	ab01      	add	r3, sp, #4
 8018ee2:	466a      	mov	r2, sp
 8018ee4:	f7ff ffc9 	bl	8018e7a <__swhatbuf_r>
 8018ee8:	9900      	ldr	r1, [sp, #0]
 8018eea:	4605      	mov	r5, r0
 8018eec:	4630      	mov	r0, r6
 8018eee:	f7ff f903 	bl	80180f8 <_malloc_r>
 8018ef2:	b948      	cbnz	r0, 8018f08 <__smakebuf_r+0x44>
 8018ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ef8:	059a      	lsls	r2, r3, #22
 8018efa:	d4ef      	bmi.n	8018edc <__smakebuf_r+0x18>
 8018efc:	f023 0303 	bic.w	r3, r3, #3
 8018f00:	f043 0302 	orr.w	r3, r3, #2
 8018f04:	81a3      	strh	r3, [r4, #12]
 8018f06:	e7e3      	b.n	8018ed0 <__smakebuf_r+0xc>
 8018f08:	4b0d      	ldr	r3, [pc, #52]	; (8018f40 <__smakebuf_r+0x7c>)
 8018f0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018f0c:	89a3      	ldrh	r3, [r4, #12]
 8018f0e:	6020      	str	r0, [r4, #0]
 8018f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f14:	81a3      	strh	r3, [r4, #12]
 8018f16:	9b00      	ldr	r3, [sp, #0]
 8018f18:	6163      	str	r3, [r4, #20]
 8018f1a:	9b01      	ldr	r3, [sp, #4]
 8018f1c:	6120      	str	r0, [r4, #16]
 8018f1e:	b15b      	cbz	r3, 8018f38 <__smakebuf_r+0x74>
 8018f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f24:	4630      	mov	r0, r6
 8018f26:	f000 f863 	bl	8018ff0 <_isatty_r>
 8018f2a:	b128      	cbz	r0, 8018f38 <__smakebuf_r+0x74>
 8018f2c:	89a3      	ldrh	r3, [r4, #12]
 8018f2e:	f023 0303 	bic.w	r3, r3, #3
 8018f32:	f043 0301 	orr.w	r3, r3, #1
 8018f36:	81a3      	strh	r3, [r4, #12]
 8018f38:	89a0      	ldrh	r0, [r4, #12]
 8018f3a:	4305      	orrs	r5, r0
 8018f3c:	81a5      	strh	r5, [r4, #12]
 8018f3e:	e7cd      	b.n	8018edc <__smakebuf_r+0x18>
 8018f40:	08017ebd 	.word	0x08017ebd

08018f44 <_raise_r>:
 8018f44:	291f      	cmp	r1, #31
 8018f46:	b538      	push	{r3, r4, r5, lr}
 8018f48:	4604      	mov	r4, r0
 8018f4a:	460d      	mov	r5, r1
 8018f4c:	d904      	bls.n	8018f58 <_raise_r+0x14>
 8018f4e:	2316      	movs	r3, #22
 8018f50:	6003      	str	r3, [r0, #0]
 8018f52:	f04f 30ff 	mov.w	r0, #4294967295
 8018f56:	bd38      	pop	{r3, r4, r5, pc}
 8018f58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018f5a:	b112      	cbz	r2, 8018f62 <_raise_r+0x1e>
 8018f5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018f60:	b94b      	cbnz	r3, 8018f76 <_raise_r+0x32>
 8018f62:	4620      	mov	r0, r4
 8018f64:	f000 f830 	bl	8018fc8 <_getpid_r>
 8018f68:	462a      	mov	r2, r5
 8018f6a:	4601      	mov	r1, r0
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f72:	f000 b817 	b.w	8018fa4 <_kill_r>
 8018f76:	2b01      	cmp	r3, #1
 8018f78:	d00a      	beq.n	8018f90 <_raise_r+0x4c>
 8018f7a:	1c59      	adds	r1, r3, #1
 8018f7c:	d103      	bne.n	8018f86 <_raise_r+0x42>
 8018f7e:	2316      	movs	r3, #22
 8018f80:	6003      	str	r3, [r0, #0]
 8018f82:	2001      	movs	r0, #1
 8018f84:	e7e7      	b.n	8018f56 <_raise_r+0x12>
 8018f86:	2400      	movs	r4, #0
 8018f88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018f8c:	4628      	mov	r0, r5
 8018f8e:	4798      	blx	r3
 8018f90:	2000      	movs	r0, #0
 8018f92:	e7e0      	b.n	8018f56 <_raise_r+0x12>

08018f94 <raise>:
 8018f94:	4b02      	ldr	r3, [pc, #8]	; (8018fa0 <raise+0xc>)
 8018f96:	4601      	mov	r1, r0
 8018f98:	6818      	ldr	r0, [r3, #0]
 8018f9a:	f7ff bfd3 	b.w	8018f44 <_raise_r>
 8018f9e:	bf00      	nop
 8018fa0:	200000d0 	.word	0x200000d0

08018fa4 <_kill_r>:
 8018fa4:	b538      	push	{r3, r4, r5, lr}
 8018fa6:	4d07      	ldr	r5, [pc, #28]	; (8018fc4 <_kill_r+0x20>)
 8018fa8:	2300      	movs	r3, #0
 8018faa:	4604      	mov	r4, r0
 8018fac:	4608      	mov	r0, r1
 8018fae:	4611      	mov	r1, r2
 8018fb0:	602b      	str	r3, [r5, #0]
 8018fb2:	f7e8 faf9 	bl	80015a8 <_kill>
 8018fb6:	1c43      	adds	r3, r0, #1
 8018fb8:	d102      	bne.n	8018fc0 <_kill_r+0x1c>
 8018fba:	682b      	ldr	r3, [r5, #0]
 8018fbc:	b103      	cbz	r3, 8018fc0 <_kill_r+0x1c>
 8018fbe:	6023      	str	r3, [r4, #0]
 8018fc0:	bd38      	pop	{r3, r4, r5, pc}
 8018fc2:	bf00      	nop
 8018fc4:	2000d8f8 	.word	0x2000d8f8

08018fc8 <_getpid_r>:
 8018fc8:	f7e8 bae6 	b.w	8001598 <_getpid>

08018fcc <_fstat_r>:
 8018fcc:	b538      	push	{r3, r4, r5, lr}
 8018fce:	4d07      	ldr	r5, [pc, #28]	; (8018fec <_fstat_r+0x20>)
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	4604      	mov	r4, r0
 8018fd4:	4608      	mov	r0, r1
 8018fd6:	4611      	mov	r1, r2
 8018fd8:	602b      	str	r3, [r5, #0]
 8018fda:	f7e8 fb46 	bl	800166a <_fstat>
 8018fde:	1c43      	adds	r3, r0, #1
 8018fe0:	d102      	bne.n	8018fe8 <_fstat_r+0x1c>
 8018fe2:	682b      	ldr	r3, [r5, #0]
 8018fe4:	b103      	cbz	r3, 8018fe8 <_fstat_r+0x1c>
 8018fe6:	6023      	str	r3, [r4, #0]
 8018fe8:	bd38      	pop	{r3, r4, r5, pc}
 8018fea:	bf00      	nop
 8018fec:	2000d8f8 	.word	0x2000d8f8

08018ff0 <_isatty_r>:
 8018ff0:	b538      	push	{r3, r4, r5, lr}
 8018ff2:	4d06      	ldr	r5, [pc, #24]	; (801900c <_isatty_r+0x1c>)
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	4604      	mov	r4, r0
 8018ff8:	4608      	mov	r0, r1
 8018ffa:	602b      	str	r3, [r5, #0]
 8018ffc:	f7e8 fb45 	bl	800168a <_isatty>
 8019000:	1c43      	adds	r3, r0, #1
 8019002:	d102      	bne.n	801900a <_isatty_r+0x1a>
 8019004:	682b      	ldr	r3, [r5, #0]
 8019006:	b103      	cbz	r3, 801900a <_isatty_r+0x1a>
 8019008:	6023      	str	r3, [r4, #0]
 801900a:	bd38      	pop	{r3, r4, r5, pc}
 801900c:	2000d8f8 	.word	0x2000d8f8

08019010 <_init>:
 8019010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019012:	bf00      	nop
 8019014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019016:	bc08      	pop	{r3}
 8019018:	469e      	mov	lr, r3
 801901a:	4770      	bx	lr

0801901c <_fini>:
 801901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801901e:	bf00      	nop
 8019020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019022:	bc08      	pop	{r3}
 8019024:	469e      	mov	lr, r3
 8019026:	4770      	bx	lr
