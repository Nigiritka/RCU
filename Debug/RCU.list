
RCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  08010d10  08010d10  00020d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013938  08013938  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08013938  08013938  00023938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013940  08013940  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013940  08013940  00023940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013944  08013944  00023944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08013948  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b54  20000080  080139c8  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20008bd4  080139c8  00038bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003537e  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fb3  00000000  00000000  0006542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0006b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  0006cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032b67  00000000  00000000  0006e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a862  00000000  00000000  000a10cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bde4  00000000  00000000  000cb931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d7715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007038  00000000  00000000  001d7768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010cf8 	.word	0x08010cf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08010cf8 	.word	0x08010cf8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f001 f80d 	bl	80015ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f812 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f916 	bl	80007e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f8b2 	bl	8000720 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005bc:	f000 f8e0 	bl	8000780 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80005c0:	f000 f878 	bl	80006b4 <MX_TIM6_Init>
  MX_LWIP_Init();
 80005c4:	f005 fa28 	bl	8005a18 <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <main+0x2c>)
 80005ca:	f005 fdf9 	bl	80061c0 <ethernetif_input>
	  sys_check_timeouts();
 80005ce:	f00c fe75 	bl	800d2bc <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005d2:	e7f9      	b.n	80005c8 <main+0x20>
 80005d4:	20000374 	.word	0x20000374

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f00f fb64 	bl	800fcb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SystemClock_Config+0xd4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <SystemClock_Config+0xd4>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xd4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemClock_Config+0xd8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <SystemClock_Config+0xd8>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xd8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000640:	2319      	movs	r3, #25
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000644:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fd94 	bl	8003184 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000662:	f000 fd2b 	bl	80010bc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000666:	f002 fd3d 	bl	80030e4 <HAL_PWREx_EnableOverDrive>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000670:	f000 fd24 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2107      	movs	r1, #7
 8000692:	4618      	mov	r0, r3
 8000694:	f003 f81a 	bl	80036cc <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800069e:	f000 fd0d 	bl	80010bc <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_TIM6_Init+0x64>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_TIM6_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_TIM6_Init+0x64>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_TIM6_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_TIM6_Init+0x64>)
 80006d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_TIM6_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_TIM6_Init+0x64>)
 80006e6:	f003 fdb7 	bl	8004258 <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006f0:	f000 fce4 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_TIM6_Init+0x64>)
 8000702:	f003 ffe7 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 fcd6 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000029c 	.word	0x2000029c
 800071c:	40001000 	.word	0x40001000

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART1_UART_Init+0x54>)
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_USART1_UART_Init+0x58>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_USART1_UART_Init+0x54>)
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_USART1_UART_Init+0x5c>)
 800072e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART1_UART_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART1_UART_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_USART1_UART_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART1_UART_Init+0x54>)
 8000744:	220c      	movs	r2, #12
 8000746:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_USART1_UART_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART1_UART_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_USART1_UART_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART1_UART_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_USART1_UART_Init+0x54>)
 8000762:	f004 f863 	bl	800482c <HAL_UART_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800076c:	f000 fca6 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000218 	.word	0x20000218
 8000778:	40011000 	.word	0x40011000
 800077c:	001e8480 	.word	0x001e8480

08000780 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART6_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 2962900;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <MX_USART6_UART_Init+0x60>)
 800078e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 80007a4:	220c      	movs	r2, #12
 80007a6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 80007b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007b4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART6_UART_Init+0x58>)
 80007c4:	f004 f832 	bl	800482c <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 fc75 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200002e8 	.word	0x200002e8
 80007dc:	40011400 	.word	0x40011400
 80007e0:	002d35d4 	.word	0x002d35d4

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	; 0x40
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	4bad      	ldr	r3, [pc, #692]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4aac      	ldr	r2, [pc, #688]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4baa      	ldr	r3, [pc, #680]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000810:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	4ba7      	ldr	r3, [pc, #668]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4aa6      	ldr	r2, [pc, #664]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4ba4      	ldr	r3, [pc, #656]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4ba1      	ldr	r3, [pc, #644]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4aa0      	ldr	r2, [pc, #640]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b9e      	ldr	r3, [pc, #632]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	623b      	str	r3, [r7, #32]
 8000840:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b9b      	ldr	r3, [pc, #620]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a9a      	ldr	r2, [pc, #616]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b98      	ldr	r3, [pc, #608]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b95      	ldr	r3, [pc, #596]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a94      	ldr	r2, [pc, #592]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b92      	ldr	r3, [pc, #584]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b8f      	ldr	r3, [pc, #572]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a8e      	ldr	r2, [pc, #568]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b8c      	ldr	r3, [pc, #560]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800088a:	4b89      	ldr	r3, [pc, #548]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a88      	ldr	r2, [pc, #544]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b86      	ldr	r3, [pc, #536]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008a2:	4b83      	ldr	r3, [pc, #524]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a82      	ldr	r2, [pc, #520]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b80      	ldr	r3, [pc, #512]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008ba:	4b7d      	ldr	r3, [pc, #500]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a7c      	ldr	r2, [pc, #496]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b7a      	ldr	r3, [pc, #488]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a76      	ldr	r2, [pc, #472]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b74      	ldr	r3, [pc, #464]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	4b71      	ldr	r3, [pc, #452]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a70      	ldr	r2, [pc, #448]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b6e      	ldr	r3, [pc, #440]	; (8000ab0 <MX_GPIO_Init+0x2cc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2120      	movs	r1, #32
 8000906:	486b      	ldr	r0, [pc, #428]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000908:	f002 fbba 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD1_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f241 010e 	movw	r1, #4110	; 0x100e
 8000912:	4869      	ldr	r0, [pc, #420]	; (8000ab8 <MX_GPIO_Init+0x2d4>)
 8000914:	f002 fbb4 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2108      	movs	r1, #8
 800091c:	4867      	ldr	r0, [pc, #412]	; (8000abc <MX_GPIO_Init+0x2d8>)
 800091e:	f002 fbaf 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000928:	4865      	ldr	r0, [pc, #404]	; (8000ac0 <MX_GPIO_Init+0x2dc>)
 800092a:	f002 fba9 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	21c8      	movs	r1, #200	; 0xc8
 8000932:	4864      	ldr	r0, [pc, #400]	; (8000ac4 <MX_GPIO_Init+0x2e0>)
 8000934:	f002 fba4 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000938:	2310      	movs	r3, #16
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000948:	230e      	movs	r3, #14
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000950:	4619      	mov	r1, r3
 8000952:	485d      	ldr	r0, [pc, #372]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000954:	f002 f9e8 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000958:	2308      	movs	r3, #8
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	4619      	mov	r1, r3
 800096a:	4857      	ldr	r0, [pc, #348]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800096c:	f002 f9dc 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000970:	2304      	movs	r3, #4
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000980:	2309      	movs	r3, #9
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000988:	4619      	mov	r1, r3
 800098a:	484f      	ldr	r0, [pc, #316]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800098c:	f002 f9cc 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000990:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a2:	230c      	movs	r3, #12
 80009a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009aa:	4619      	mov	r1, r3
 80009ac:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 80009ae:	f002 f9bb 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80009b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c4:	2304      	movs	r3, #4
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009cc:	4619      	mov	r1, r3
 80009ce:	483f      	ldr	r0, [pc, #252]	; (8000acc <MX_GPIO_Init+0x2e8>)
 80009d0:	f002 f9aa 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009d4:	f643 4323 	movw	r3, #15395	; 0x3c23
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009e6:	230a      	movs	r3, #10
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ee:	4619      	mov	r1, r3
 80009f0:	4836      	ldr	r0, [pc, #216]	; (8000acc <MX_GPIO_Init+0x2e8>)
 80009f2:	f002 f999 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009f6:	2310      	movs	r3, #16
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a06:	2302      	movs	r3, #2
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482e      	ldr	r0, [pc, #184]	; (8000acc <MX_GPIO_Init+0x2e8>)
 8000a12:	f002 f989 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000a26:	2308      	movs	r3, #8
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0x2d0>)
 8000a32:	f002 f979 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000a36:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a50:	4619      	mov	r1, r3
 8000a52:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <MX_GPIO_Init+0x2ec>)
 8000a54:	f002 f968 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	4619      	mov	r1, r3
 8000a74:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0x2f0>)
 8000a76:	f002 f957 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a7a:	2360      	movs	r3, #96	; 0x60
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a8a:	230d      	movs	r3, #13
 8000a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000a96:	f002 f947 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000aae:	e013      	b.n	8000ad8 <MX_GPIO_Init+0x2f4>
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	40022800 	.word	0x40022800
 8000ac0:	40021c00 	.word	0x40021c00
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000adc:	4619      	mov	r1, r3
 8000ade:	48bc      	ldr	r0, [pc, #752]	; (8000dd0 <MX_GPIO_Init+0x5ec>)
 8000ae0:	f002 f922 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000ae4:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af6:	230c      	movs	r3, #12
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	48b4      	ldr	r0, [pc, #720]	; (8000dd4 <MX_GPIO_Init+0x5f0>)
 8000b02:	f002 f911 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000b06:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b18:	230e      	movs	r3, #14
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	48ad      	ldr	r0, [pc, #692]	; (8000dd8 <MX_GPIO_Init+0x5f4>)
 8000b24:	f002 f900 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	48a6      	ldr	r0, [pc, #664]	; (8000dd8 <MX_GPIO_Init+0x5f4>)
 8000b3e:	f002 f8f3 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b54:	4619      	mov	r1, r3
 8000b56:	48a1      	ldr	r0, [pc, #644]	; (8000ddc <MX_GPIO_Init+0x5f8>)
 8000b58:	f002 f8e6 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b5c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4898      	ldr	r0, [pc, #608]	; (8000ddc <MX_GPIO_Init+0x5f8>)
 8000b7a:	f002 f8d5 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b90:	230a      	movs	r3, #10
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4891      	ldr	r0, [pc, #580]	; (8000de0 <MX_GPIO_Init+0x5fc>)
 8000b9c:	f002 f8c4 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000ba0:	23f0      	movs	r3, #240	; 0xf0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	488a      	ldr	r0, [pc, #552]	; (8000de4 <MX_GPIO_Init+0x600>)
 8000bbc:	f002 f8b4 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000bc0:	23f7      	movs	r3, #247	; 0xf7
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bd0:	230e      	movs	r3, #14
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4883      	ldr	r0, [pc, #524]	; (8000de8 <MX_GPIO_Init+0x604>)
 8000bdc:	f002 f8a4 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bf2:	2309      	movs	r3, #9
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4875      	ldr	r0, [pc, #468]	; (8000dd4 <MX_GPIO_Init+0x5f0>)
 8000bfe:	f002 f893 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c14:	230a      	movs	r3, #10
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	486d      	ldr	r0, [pc, #436]	; (8000dd4 <MX_GPIO_Init+0x5f0>)
 8000c20:	f002 f882 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c24:	2320      	movs	r3, #32
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4868      	ldr	r0, [pc, #416]	; (8000ddc <MX_GPIO_Init+0x5f8>)
 8000c3c:	f002 f874 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c40:	2308      	movs	r3, #8
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c50:	230d      	movs	r3, #13
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4860      	ldr	r0, [pc, #384]	; (8000ddc <MX_GPIO_Init+0x5f8>)
 8000c5c:	f002 f864 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c60:	f241 030c 	movw	r3, #4108	; 0x100c
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	485a      	ldr	r0, [pc, #360]	; (8000de4 <MX_GPIO_Init+0x600>)
 8000c7a:	f002 f855 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4856      	ldr	r0, [pc, #344]	; (8000dec <MX_GPIO_Init+0x608>)
 8000c94:	f002 f848 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c98:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000caa:	230c      	movs	r3, #12
 8000cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	484e      	ldr	r0, [pc, #312]	; (8000df0 <MX_GPIO_Init+0x60c>)
 8000cb6:	f002 f837 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000cba:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ccc:	230e      	movs	r3, #14
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4843      	ldr	r0, [pc, #268]	; (8000de4 <MX_GPIO_Init+0x600>)
 8000cd8:	f002 f826 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	483d      	ldr	r0, [pc, #244]	; (8000de8 <MX_GPIO_Init+0x604>)
 8000cf4:	f002 f818 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d0a:	230d      	movs	r3, #13
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <MX_GPIO_Init+0x5f0>)
 8000d16:	f002 f807 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	482b      	ldr	r0, [pc, #172]	; (8000ddc <MX_GPIO_Init+0x5f8>)
 8000d2e:	f001 fffb 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000d32:	2304      	movs	r3, #4
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d42:	230c      	movs	r3, #12
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4823      	ldr	r0, [pc, #140]	; (8000ddc <MX_GPIO_Init+0x5f8>)
 8000d4e:	f001 ffeb 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d52:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4823      	ldr	r0, [pc, #140]	; (8000df4 <MX_GPIO_Init+0x610>)
 8000d68:	f001 ffde 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_GPIO_Init+0x600>)
 8000d84:	f001 ffd0 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <MX_GPIO_Init+0x610>)
 8000da2:	f001 ffc1 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000da6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000db8:	230d      	movs	r3, #13
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0x610>)
 8000dc4:	f001 ffb0 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e013      	b.n	8000df8 <MX_GPIO_Init+0x614>
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40022400 	.word	0x40022400
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40022000 	.word	0x40022000
 8000de8:	40022800 	.word	0x40022800
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40021400 	.word	0x40021400
 8000df4:	40021c00 	.word	0x40021c00
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e02:	2302      	movs	r3, #2
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4890      	ldr	r0, [pc, #576]	; (8001050 <MX_GPIO_Init+0x86c>)
 8000e0e:	f001 ff8b 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e26:	4619      	mov	r1, r3
 8000e28:	4889      	ldr	r0, [pc, #548]	; (8001050 <MX_GPIO_Init+0x86c>)
 8000e2a:	f001 ff7d 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4882      	ldr	r0, [pc, #520]	; (8001054 <MX_GPIO_Init+0x870>)
 8000e4c:	f001 ff6c 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	487a      	ldr	r0, [pc, #488]	; (8001050 <MX_GPIO_Init+0x86c>)
 8000e68:	f001 ff5e 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	4874      	ldr	r0, [pc, #464]	; (8001058 <MX_GPIO_Init+0x874>)
 8000e88:	f001 ff4e 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e8c:	2328      	movs	r3, #40	; 0x28
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	486c      	ldr	r0, [pc, #432]	; (8001058 <MX_GPIO_Init+0x874>)
 8000ea8:	f001 ff3e 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000eac:	23c8      	movs	r3, #200	; 0xc8
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4866      	ldr	r0, [pc, #408]	; (800105c <MX_GPIO_Init+0x878>)
 8000ec4:	f001 ff30 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ec8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4860      	ldr	r0, [pc, #384]	; (8001060 <MX_GPIO_Init+0x87c>)
 8000ede:	f001 ff23 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efa:	4619      	mov	r1, r3
 8000efc:	4859      	ldr	r0, [pc, #356]	; (8001064 <MX_GPIO_Init+0x880>)
 8000efe:	f001 ff13 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000f02:	2305      	movs	r3, #5
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f12:	230a      	movs	r3, #10
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4851      	ldr	r0, [pc, #324]	; (8001064 <MX_GPIO_Init+0x880>)
 8000f1e:	f001 ff03 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f22:	2304      	movs	r3, #4
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f32:	2309      	movs	r3, #9
 8000f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	484a      	ldr	r0, [pc, #296]	; (8001068 <MX_GPIO_Init+0x884>)
 8000f3e:	f001 fef3 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f54:	2309      	movs	r3, #9
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4843      	ldr	r0, [pc, #268]	; (800106c <MX_GPIO_Init+0x888>)
 8000f60:	f001 fee2 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f64:	2304      	movs	r3, #4
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f74:	4619      	mov	r1, r3
 8000f76:	4839      	ldr	r0, [pc, #228]	; (800105c <MX_GPIO_Init+0x878>)
 8000f78:	f001 fed6 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f80:	2303      	movs	r3, #3
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4831      	ldr	r0, [pc, #196]	; (8001054 <MX_GPIO_Init+0x870>)
 8000f90:	f001 feca 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000f94:	2350      	movs	r3, #80	; 0x50
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fa4:	230d      	movs	r3, #13
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fac:	4619      	mov	r1, r3
 8000fae:	4829      	ldr	r0, [pc, #164]	; (8001054 <MX_GPIO_Init+0x870>)
 8000fb0:	f001 feba 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000fb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fba:	2312      	movs	r3, #18
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <MX_GPIO_Init+0x874>)
 8000fd2:	f001 fea9 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000fd6:	2328      	movs	r3, #40	; 0x28
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <MX_GPIO_Init+0x870>)
 8000ff2:	f001 fe99 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001006:	2309      	movs	r3, #9
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <MX_GPIO_Init+0x874>)
 8001012:	f001 fe89 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001016:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001028:	2305      	movs	r3, #5
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_GPIO_Init+0x884>)
 8001034:	f001 fe78 	bl	8002d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2028      	movs	r0, #40	; 0x28
 800103e:	f000 fc20 	bl	8001882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f000 fc39 	bl	80018ba <HAL_NVIC_EnableIRQ>

}
 8001048:	bf00      	nop
 800104a:	3740      	adds	r7, #64	; 0x40
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40022000 	.word	0x40022000
 8001054:	40020000 	.word	0x40020000
 8001058:	40021c00 	.word	0x40021c00
 800105c:	40021800 	.word	0x40021800
 8001060:	40021400 	.word	0x40021400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020400 	.word	0x40020400
 800106c:	40020c00 	.word	0x40020c00

08001070 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit_IT(&huart6, TxData, 8);
 800107a:	2208      	movs	r2, #8
 800107c:	4903      	ldr	r1, [pc, #12]	; (800108c <HAL_GPIO_EXTI_Callback+0x1c>)
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <HAL_GPIO_EXTI_Callback+0x20>)
 8001080:	f003 fc22 	bl	80048c8 <HAL_UART_Transmit_IT>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	200002e8 	.word	0x200002e8

08001094 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

	//HAL_UART_Receive_IT(&huart6, RxData, 15);
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]


}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x8>
	...

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_MspInit+0x44>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_MspInit+0x44>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_MspInit+0x44>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x44>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x44>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_TIM_Base_MspInit+0x44>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d113      	bne.n	800114a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_TIM_Base_MspInit+0x48>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_TIM_Base_MspInit+0x48>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_TIM_Base_MspInit+0x48>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f000 fb9f 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001144:	2036      	movs	r0, #54	; 0x36
 8001146:	f000 fbb8 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40001000 	.word	0x40001000
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ae      	sub	sp, #184	; 0xb8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	2284      	movs	r2, #132	; 0x84
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00e fd99 	bl	800fcb4 <memset>
  if(huart->Instance==USART1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5b      	ldr	r2, [pc, #364]	; (80012f4 <HAL_UART_MspInit+0x198>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d165      	bne.n	8001258 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001190:	2300      	movs	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fc6d 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a4:	f7ff ff8a 	bl	80010bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6453      	str	r3, [r2, #68]	; 0x44
 80011b4:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001208:	2307      	movs	r3, #7
 800120a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001212:	4619      	mov	r1, r3
 8001214:	4839      	ldr	r0, [pc, #228]	; (80012fc <HAL_UART_MspInit+0x1a0>)
 8001216:	f001 fd87 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800121a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001234:	2307      	movs	r3, #7
 8001236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800123e:	4619      	mov	r1, r3
 8001240:	482f      	ldr	r0, [pc, #188]	; (8001300 <HAL_UART_MspInit+0x1a4>)
 8001242:	f001 fd71 	bl	8002d28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2025      	movs	r0, #37	; 0x25
 800124c:	f000 fb19 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001250:	2025      	movs	r0, #37	; 0x25
 8001252:	f000 fb32 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001256:	e048      	b.n	80012ea <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a29      	ldr	r2, [pc, #164]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d143      	bne.n	80012ea <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001266:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001268:	2300      	movs	r3, #0
 800126a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126c:	f107 0320 	add.w	r3, r7, #32
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fc01 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_UART_MspInit+0x124>
      Error_Handler();
 800127c:	f7ff ff1e 	bl	80010bc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	6453      	str	r3, [r2, #68]	; 0x44
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_UART_MspInit+0x19c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80012b0:	23c0      	movs	r3, #192	; 0xc0
 80012b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012c8:	2308      	movs	r3, #8
 80012ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <HAL_UART_MspInit+0x1ac>)
 80012d6:	f001 fd27 	bl	8002d28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2047      	movs	r0, #71	; 0x47
 80012e0:	f000 facf 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012e4:	2047      	movs	r0, #71	; 0x47
 80012e6:	f000 fae8 	bl	80018ba <HAL_NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	37b8      	adds	r7, #184	; 0xb8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020000 	.word	0x40020000
 8001304:	40011400 	.word	0x40011400
 8001308:	40020800 	.word	0x40020800

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f974 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <USART1_IRQHandler+0x10>)
 8001366:	f003 fb1d 	bl	80049a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000218 	.word	0x20000218

08001374 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDMMC_D3_Pin);
 8001378:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800137c:	f001 fe9a 	bl	80030b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM6_DAC_IRQHandler+0x10>)
 800138a:	f002 ffbc 	bl	8004306 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000029c 	.word	0x2000029c

08001398 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <ETH_IRQHandler+0x10>)
 800139e:	f000 ff17 	bl	80021d0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20001c8c 	.word	0x20001c8c

080013ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <USART6_IRQHandler+0x10>)
 80013b2:	f003 faf7 	bl	80049a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200002e8 	.word	0x200002e8

080013c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_kill>:

int _kill(int pid, int sig)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <_kill+0x20>)
 80013dc:	2216      	movs	r2, #22
 80013de:	601a      	str	r2, [r3, #0]
	return -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20008bc4 	.word	0x20008bc4

080013f4 <_exit>:

void _exit (int status)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ffe5 	bl	80013d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001406:	e7fe      	b.n	8001406 <_exit+0x12>

08001408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e00a      	b.n	8001430 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800141a:	f3af 8000 	nop.w
 800141e:	4601      	mov	r1, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	b2ca      	uxtb	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf0      	blt.n	800141a <_read+0x12>
	}

return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e009      	b.n	8001468 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf1      	blt.n	8001454 <_write+0x12>
	}
	return len;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_close>:

int _close(int file)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
	return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a2:	605a      	str	r2, [r3, #4]
	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_isatty>:

int _isatty(int file)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d205      	bcs.n	8001520 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <_sbrk+0x6c>)
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	20050000 	.word	0x20050000
 8001544:	00004000 	.word	0x00004000
 8001548:	2000009c 	.word	0x2000009c
 800154c:	20008bd8 	.word	0x20008bd8
 8001550:	20008bc4 	.word	0x20008bc4

08001554 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800157e:	490e      	ldr	r1, [pc, #56]	; (80015b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001594:	4c0b      	ldr	r4, [pc, #44]	; (80015c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015a2:	f7ff ffd7 	bl	8001554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f00e fb45 	bl	800fc34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7fe fffd 	bl	80005a8 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80015bc:	08013948 	.word	0x08013948
  ldr r2, =_sbss
 80015c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80015c4:	20008bd4 	.word	0x20008bd4

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>

080015ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f000 f94c 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f000 f805 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015da:	f7ff fd75 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f967 	bl	80018d6 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f92f 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000008 	.word	0x20000008
 800163c:	20000010 	.word	0x20000010
 8001640:	2000000c 	.word	0x2000000c

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000010 	.word	0x20000010
 8001668:	2000036c 	.word	0x2000036c

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2000036c 	.word	0x2000036c

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000010 	.word	0x20000010

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	05fa0000 	.word	0x05fa0000

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff8e 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff29 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff3e 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff8e 	bl	80017c0 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff31 	bl	8001730 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff feb6 	bl	800166c <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d008      	beq.n	8001920 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e052      	b.n	80019c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0216 	bic.w	r2, r2, #22
 800192e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d103      	bne.n	8001950 <HAL_DMA_Abort+0x62>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0208 	bic.w	r2, r2, #8
 800195e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001970:	e013      	b.n	800199a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001972:	f7ff fe7b 	bl	800166c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b05      	cmp	r3, #5
 800197e:	d90c      	bls.n	800199a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2220      	movs	r2, #32
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e015      	b.n	80019c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e4      	bne.n	8001972 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	223f      	movs	r2, #63	; 0x3f
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d004      	beq.n	80019ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e00c      	b.n	8001a06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2205      	movs	r2, #5
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001a24:	4ba9      	ldr	r3, [pc, #676]	; (8001ccc <HAL_ETH_Init+0x2b8>)
 8001a26:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e181      	b.n	8001d3e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f004 f914 	bl	8005c7c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a54:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_ETH_Init+0x2bc>)
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	4a9d      	ldr	r2, [pc, #628]	; (8001cd0 <HAL_ETH_Init+0x2bc>)
 8001a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a60:	4b9b      	ldr	r3, [pc, #620]	; (8001cd0 <HAL_ETH_Init+0x2bc>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a6c:	4b99      	ldr	r3, [pc, #612]	; (8001cd4 <HAL_ETH_Init+0x2c0>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a98      	ldr	r2, [pc, #608]	; (8001cd4 <HAL_ETH_Init+0x2c0>)
 8001a72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a76:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a78:	4b96      	ldr	r3, [pc, #600]	; (8001cd4 <HAL_ETH_Init+0x2c0>)
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4994      	ldr	r1, [pc, #592]	; (8001cd4 <HAL_ETH_Init+0x2c0>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9e:	f7ff fde5 	bl	800166c <HAL_GetTick>
 8001aa2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001aa4:	e011      	b.n	8001aca <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001aa6:	f7ff fde1 	bl	800166c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ab4:	d909      	bls.n	8001aca <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e139      	b.n	8001d3e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e4      	bne.n	8001aa6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f023 031c 	bic.w	r3, r3, #28
 8001aea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001aec:	f001 ff90 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8001af0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4a78      	ldr	r2, [pc, #480]	; (8001cd8 <HAL_ETH_Init+0x2c4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d908      	bls.n	8001b0c <HAL_ETH_Init+0xf8>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4a77      	ldr	r2, [pc, #476]	; (8001cdc <HAL_ETH_Init+0x2c8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d804      	bhi.n	8001b0c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e027      	b.n	8001b5c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_ETH_Init+0x2c8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d908      	bls.n	8001b26 <HAL_ETH_Init+0x112>
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <HAL_ETH_Init+0x2b8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d204      	bcs.n	8001b26 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f043 030c 	orr.w	r3, r3, #12
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	e01a      	b.n	8001b5c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4a68      	ldr	r2, [pc, #416]	; (8001ccc <HAL_ETH_Init+0x2b8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d303      	bcc.n	8001b36 <HAL_ETH_Init+0x122>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_ETH_Init+0x2cc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d911      	bls.n	8001b5a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_ETH_Init+0x2cc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d908      	bls.n	8001b50 <HAL_ETH_Init+0x13c>
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4a68      	ldr	r2, [pc, #416]	; (8001ce4 <HAL_ETH_Init+0x2d0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d804      	bhi.n	8001b50 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e005      	b.n	8001b5c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	e000      	b.n	8001b5c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b5a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b68:	2100      	movs	r1, #0
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fc1d 	bl	80023aa <HAL_ETH_WritePHYRegister>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b7a:	6939      	ldr	r1, [r7, #16]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fdd3 	bl	8002728 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0d7      	b.n	8001d3e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b8e:	20ff      	movs	r0, #255	; 0xff
 8001b90:	f7ff fd78 	bl	8001684 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a5 	beq.w	8001ce8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b9e:	f7ff fd65 	bl	800166c <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2101      	movs	r1, #1
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fb94 	bl	80022da <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001bb2:	f7ff fd5b 	bl	800166c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d90f      	bls.n	8001be4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001bc8:	6939      	ldr	r1, [r7, #16]
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fdac 	bl	8002728 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0ac      	b.n	8001d3e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0da      	beq.n	8001ba4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fbd8 	bl	80023aa <HAL_ETH_WritePHYRegister>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00b      	beq.n	8001c18 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c04:	6939      	ldr	r1, [r7, #16]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fd8e 	bl	8002728 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c14:	2301      	movs	r3, #1
 8001c16:	e092      	b.n	8001d3e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c18:	f7ff fd28 	bl	800166c <HAL_GetTick>
 8001c1c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	461a      	mov	r2, r3
 8001c24:	2101      	movs	r1, #1
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fb57 	bl	80022da <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c2c:	f7ff fd1e 	bl	800166c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d90f      	bls.n	8001c5e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c42:	6939      	ldr	r1, [r7, #16]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fd6f 	bl	8002728 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e06f      	b.n	8001d3e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0da      	beq.n	8001c1e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2110      	movs	r1, #16
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fb32 	bl	80022da <HAL_ETH_ReadPHYRegister>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fd50 	bl	8002728 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c90:	2301      	movs	r3, #1
 8001c92:	e054      	b.n	8001d3e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	e002      	b.n	8001cae <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	e035      	b.n	8001d2c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	e030      	b.n	8001d2c <HAL_ETH_Init+0x318>
 8001cca:	bf00      	nop
 8001ccc:	03938700 	.word	0x03938700
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	01312cff 	.word	0x01312cff
 8001cdc:	02160ebf 	.word	0x02160ebf
 8001ce0:	05f5e0ff 	.word	0x05f5e0ff
 8001ce4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fb52 	bl	80023aa <HAL_ETH_WritePHYRegister>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d10:	6939      	ldr	r1, [r7, #16]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fd08 	bl	8002728 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e00c      	b.n	8001d3e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d24:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d28:	f7ff fcac 	bl	8001684 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d2c:	6939      	ldr	r1, [r7, #16]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fcfa 	bl	8002728 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3720      	adds	r7, #32
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop

08001d48 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_ETH_DMATxDescListInit+0x20>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e052      	b.n	8001e0e <HAL_ETH_DMATxDescListInit+0xc6>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e030      	b.n	8001de6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	015b      	lsls	r3, r3, #5
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d94:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d208      	bcs.n	8001dda <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	015b      	lsls	r3, r3, #5
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	60da      	str	r2, [r3, #12]
 8001dd8:	e002      	b.n	8001de0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3ca      	bcc.n	8001d84 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f241 0310 	movw	r3, #4112	; 0x1010
 8001df8:	440b      	add	r3, r1
 8001dfa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_ETH_DMARxDescListInit+0x20>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e056      	b.n	8001ee8 <HAL_ETH_DMARxDescListInit+0xce>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e034      	b.n	8001ec0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	015b      	lsls	r3, r3, #5
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e66:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e6e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d208      	bcs.n	8001eb4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	015b      	lsls	r3, r3, #5
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	4413      	add	r3, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	e002      	b.n	8001eba <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d3c6      	bcc.n	8001e56 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	f241 030c 	movw	r3, #4108	; 0x100c
 8001ed2:	440b      	add	r3, r1
 8001ed4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_ETH_TransmitFrame+0x24>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e0cd      	b.n	80020b4 <HAL_ETH_TransmitFrame+0x1c0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0b8      	b.n	80020b4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da09      	bge.n	8001f60 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2212      	movs	r2, #18
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0a9      	b.n	80020b4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d915      	bls.n	8001f96 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4a54      	ldr	r2, [pc, #336]	; (80020c0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e001      	b.n	8001f9a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d11c      	bne.n	8001fda <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001fae:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001fba:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fca:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fd8:	e04b      	b.n	8002072 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e044      	b.n	800206a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fee:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002004:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800200e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3b01      	subs	r3, #1
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	429a      	cmp	r2, r3
 8002018:	d116      	bne.n	8002048 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002028:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_ETH_TransmitFrame+0x1d0>)
 800202e:	fb02 f203 	mul.w	r2, r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800203a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002046:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002056:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	3301      	adds	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3b6      	bcc.n	8001fe0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f241 0314 	movw	r3, #4116	; 0x1014
 800207a:	4413      	add	r3, r2
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f241 0314 	movw	r3, #4116	; 0x1014
 800208e:	4413      	add	r3, r2
 8002090:	2204      	movs	r2, #4
 8002092:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f241 0304 	movw	r3, #4100	; 0x1004
 800209c:	4413      	add	r3, r2
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	ac02b00b 	.word	0xac02b00b
 80020c4:	fffffa0c 	.word	0xfffffa0c

080020c8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ETH_GetReceivedFrame+0x1a>
 80020de:	2302      	movs	r3, #2
 80020e0:	e070      	b.n	80021c4 <HAL_ETH_GetReceivedFrame+0xfc>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db5a      	blt.n	80021b2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d030      	beq.n	800216c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	2b01      	cmp	r3, #1
 800211a:	d103      	bne.n	8002124 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0c1b      	lsrs	r3, r3, #16
 8002134:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002138:	3b04      	subs	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	461a      	mov	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e02b      	b.n	80021c4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
 800219a:	e00a      	b.n	80021b2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d112      	bne.n	8002212 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f860 	bl	80022b2 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f241 0314 	movw	r3, #4116	; 0x1014
 80021fa:	4413      	add	r3, r2
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002210:	e01b      	b.n	800224a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f241 0314 	movw	r3, #4116	; 0x1014
 800221a:	4413      	add	r3, r2
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d111      	bne.n	800224a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f839 	bl	800229e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f241 0314 	movw	r3, #4116	; 0x1014
 8002234:	4413      	add	r3, r2
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002252:	4413      	add	r3, r2
 8002254:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002258:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002262:	4413      	add	r3, r2
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226e:	d112      	bne.n	8002296 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f828 	bl	80022c6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f241 0314 	movw	r3, #4116	; 0x1014
 800227e:	4413      	add	r3, r2
 8002280:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002284:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	460b      	mov	r3, r1
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b82      	cmp	r3, #130	; 0x82
 80022fa:	d101      	bne.n	8002300 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	e050      	b.n	80023a2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2282      	movs	r2, #130	; 0x82
 8002304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 031c 	and.w	r3, r3, #28
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8a1b      	ldrh	r3, [r3, #16]
 800231c:	02db      	lsls	r3, r3, #11
 800231e:	b29b      	uxth	r3, r3
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002326:	897b      	ldrh	r3, [r7, #10]
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f023 0302 	bic.w	r3, r3, #2
 800233a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800234c:	f7ff f98e 	bl	800166c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002352:	e015      	b.n	8002380 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002354:	f7ff f98a 	bl	800166c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002362:	d309      	bcc.n	8002378 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e014      	b.n	80023a2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e4      	bne.n	8002354 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	460b      	mov	r3, r1
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b42      	cmp	r3, #66	; 0x42
 80023ca:	d101      	bne.n	80023d0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	e04e      	b.n	800246e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2242      	movs	r2, #66	; 0x42
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 031c 	and.w	r3, r3, #28
 80023e6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8a1b      	ldrh	r3, [r3, #16]
 80023ec:	02db      	lsls	r3, r3, #11
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002426:	f7ff f921 	bl	800166c <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800242c:	e015      	b.n	800245a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800242e:	f7ff f91d 	bl	800166c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d309      	bcc.n	8002452 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e00d      	b.n	800246e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e4      	bne.n	800242e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_ETH_Start+0x16>
 8002488:	2302      	movs	r3, #2
 800248a:	e01f      	b.n	80024cc <HAL_ETH_Start+0x56>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fb45 	bl	8002b2c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fb7c 	bl	8002ba0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fc13 	bl	8002cd4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fbb0 	bl	8002c14 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fbdd 	bl	8002c74 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ETH_Stop+0x16>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e01f      	b.n	800252a <HAL_ETH_Stop+0x56>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fba2 	bl	8002c44 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fbcf 	bl	8002ca4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fb67 	bl	8002bda <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fbe1 	bl	8002cd4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fb27 	bl	8002b66 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_ETH_ConfigMAC+0x1c>
 800254c:	2302      	movs	r3, #2
 800254e:	e0e4      	b.n	800271a <HAL_ETH_ConfigMAC+0x1e6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80b1 	beq.w	80026ca <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <HAL_ETH_ConfigMAC+0x1f0>)
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002580:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002586:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800258c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002592:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002598:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800259e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80025a4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80025aa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80025b0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80025b6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80025bc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80025c2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff f852 	bl	8001684 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025f0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80025f6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80025fc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002602:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002608:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800260e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800261a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800261c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002626:	2001      	movs	r0, #1
 8002628:	f7ff f82c 	bl	8001684 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800263c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002646:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002656:	4013      	ands	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002664:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800266a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002670:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002676:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800267c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002694:	2001      	movs	r0, #1
 8002696:	f7fe fff5 	bl	8001684 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7fe ffe2 	bl	8001684 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	61da      	str	r2, [r3, #28]
 80026c8:	e01e      	b.n	8002708 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80026d8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f7fe ffc2 	bl	8001684 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	ff20810f 	.word	0xff20810f

08002728 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0b0      	sub	sp, #192	; 0xc0
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002744:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800274c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002756:	2300      	movs	r3, #0
 8002758:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800276e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002772:	663b      	str	r3, [r7, #96]	; 0x60
 8002774:	e001      	b.n	800277a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800277a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800277e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002784:	2300      	movs	r3, #0
 8002786:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80027fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002800:	4bab      	ldr	r3, [pc, #684]	; (8002ab0 <ETH_MACDMAConfig+0x388>)
 8002802:	4013      	ands	r3, r2
 8002804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002808:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800280a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800280c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800280e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002810:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002814:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800281a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800281c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800281e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002822:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002828:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800282a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800282c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800282e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002830:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002834:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002838:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800283a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800283c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800283e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002850:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800285c:	2001      	movs	r0, #1
 800285e:	f7fe ff11 	bl	8001684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800286a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800286c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800286e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002870:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002874:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800287a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800287c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002880:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002886:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002888:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800288c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002890:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002898:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800289a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7fe feec 	bl	8001684 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80028d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028dc:	4013      	ands	r3, r2
 80028de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80028e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80028ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80028f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80028f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80028f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80028fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80028fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002900:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002904:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002906:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002918:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002924:	2001      	movs	r0, #1
 8002926:	f7fe fead 	bl	8001684 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002932:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002934:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002938:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800294e:	2001      	movs	r0, #1
 8002950:	f7fe fe98 	bl	8001684 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800295c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002966:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800296c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002970:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002982:	2304      	movs	r3, #4
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800298c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80029b2:	4413      	add	r3, r2
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80029ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <ETH_MACDMAConfig+0x38c>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80029c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80029cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80029ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80029d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80029d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80029d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80029d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80029d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80029da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80029dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80029de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80029e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80029e6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80029fa:	4413      	add	r3, r2
 80029fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a0a:	4413      	add	r3, r2
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7fe fe36 	bl	8001684 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a20:	4413      	add	r3, r2
 8002a22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a26:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a2c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002a30:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a34:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002a38:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002a3e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a42:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a60:	2001      	movs	r0, #1
 8002a62:	f7fe fe0f 	bl	8001684 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a72:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10d      	bne.n	8002a98 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a84:	4413      	add	r3, r2
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <ETH_MACDMAConfig+0x390>)
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a94:	440b      	add	r3, r1
 8002a96:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f80b 	bl	8002abc <ETH_MACAddressConfig>
}
 8002aa6:	bf00      	nop
 8002aa8:	37c0      	adds	r7, #192	; 0xc0
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	ff20810f 	.word	0xff20810f
 8002ab4:	f8de3f23 	.word	0xf8de3f23
 8002ab8:	00010040 	.word	0x00010040

08002abc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3305      	adds	r3, #5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	3204      	adds	r2, #4
 8002ad4:	7812      	ldrb	r2, [r2, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <ETH_MACAddressConfig+0x68>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3303      	adds	r3, #3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	061a      	lsls	r2, r3, #24
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3302      	adds	r3, #2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	4313      	orrs	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <ETH_MACAddressConfig+0x6c>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40028040 	.word	0x40028040
 8002b28:	40028044 	.word	0x40028044

08002b2c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7fe fd97 	bl	8001684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0208 	bic.w	r2, r2, #8
 8002b80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7fe fd7a 	bl	8001684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0204 	orr.w	r2, r2, #4
 8002bba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f7fe fd5d 	bl	8001684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0204 	bic.w	r2, r2, #4
 8002bf4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7fe fd40 	bl	8001684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c24:	4413      	add	r3, r2
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6811      	ldr	r1, [r2, #0]
 8002c2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c30:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c34:	440b      	add	r3, r1
 8002c36:	601a      	str	r2, [r3, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c54:	4413      	add	r3, r2
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6811      	ldr	r1, [r2, #0]
 8002c5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c60:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c64:	440b      	add	r3, r1
 8002c66:	601a      	str	r2, [r3, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c84:	4413      	add	r3, r2
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6811      	ldr	r1, [r2, #0]
 8002c8c:	f043 0202 	orr.w	r2, r3, #2
 8002c90:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c94:	440b      	add	r3, r1
 8002c96:	601a      	str	r2, [r3, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cb4:	4413      	add	r3, r2
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6811      	ldr	r1, [r2, #0]
 8002cbc:	f023 0202 	bic.w	r2, r3, #2
 8002cc0:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cc4:	440b      	add	r3, r1
 8002cc6:	601a      	str	r2, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ce8:	4413      	add	r3, r2
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6811      	ldr	r1, [r2, #0]
 8002cf0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cf4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cf8:	440b      	add	r3, r1
 8002cfa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d04:	4413      	add	r3, r2
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f7fe fcba 	bl	8001684 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d1a:	440b      	add	r3, r1
 8002d1c:	601a      	str	r2, [r3, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	e175      	b.n	8003034 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	f040 8164 	bne.w	800302e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d005      	beq.n	8002d7e <HAL_GPIO_Init+0x56>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d130      	bne.n	8002de0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db4:	2201      	movs	r2, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 0201 	and.w	r2, r3, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d017      	beq.n	8002e1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d123      	bne.n	8002e70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	08da      	lsrs	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3208      	adds	r2, #8
 8002e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	08da      	lsrs	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	69b9      	ldr	r1, [r7, #24]
 8002e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0203 	and.w	r2, r3, #3
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80be 	beq.w	800302e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	4b66      	ldr	r3, [pc, #408]	; (800304c <HAL_GPIO_Init+0x324>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a65      	ldr	r2, [pc, #404]	; (800304c <HAL_GPIO_Init+0x324>)
 8002eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b63      	ldr	r3, [pc, #396]	; (800304c <HAL_GPIO_Init+0x324>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eca:	4a61      	ldr	r2, [pc, #388]	; (8003050 <HAL_GPIO_Init+0x328>)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_GPIO_Init+0x32c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d037      	beq.n	8002f66 <HAL_GPIO_Init+0x23e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a57      	ldr	r2, [pc, #348]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d031      	beq.n	8002f62 <HAL_GPIO_Init+0x23a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a56      	ldr	r2, [pc, #344]	; (800305c <HAL_GPIO_Init+0x334>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <HAL_GPIO_Init+0x236>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a55      	ldr	r2, [pc, #340]	; (8003060 <HAL_GPIO_Init+0x338>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d025      	beq.n	8002f5a <HAL_GPIO_Init+0x232>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a54      	ldr	r2, [pc, #336]	; (8003064 <HAL_GPIO_Init+0x33c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <HAL_GPIO_Init+0x22e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a53      	ldr	r2, [pc, #332]	; (8003068 <HAL_GPIO_Init+0x340>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x22a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_GPIO_Init+0x344>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x226>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a51      	ldr	r2, [pc, #324]	; (8003070 <HAL_GPIO_Init+0x348>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x222>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a50      	ldr	r2, [pc, #320]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x21e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4f      	ldr	r2, [pc, #316]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x21a>
 8002f3e:	2309      	movs	r3, #9
 8002f40:	e012      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f42:	230a      	movs	r3, #10
 8002f44:	e010      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f46:	2308      	movs	r3, #8
 8002f48:	e00e      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	e00c      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e00a      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f52:	2305      	movs	r3, #5
 8002f54:	e008      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e004      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_GPIO_Init+0x240>
 8002f66:	2300      	movs	r3, #0
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	f002 0203 	and.w	r2, r2, #3
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	4093      	lsls	r3, r2
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f78:	4935      	ldr	r1, [pc, #212]	; (8003050 <HAL_GPIO_Init+0x328>)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	3302      	adds	r3, #2
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_GPIO_Init+0x354>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002faa:	4a34      	ldr	r2, [pc, #208]	; (800307c <HAL_GPIO_Init+0x354>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb0:	4b32      	ldr	r3, [pc, #200]	; (800307c <HAL_GPIO_Init+0x354>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd4:	4a29      	ldr	r2, [pc, #164]	; (800307c <HAL_GPIO_Init+0x354>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fda:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_GPIO_Init+0x354>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_GPIO_Init+0x354>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_GPIO_Init+0x354>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <HAL_GPIO_Init+0x354>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3301      	adds	r3, #1
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	f67f ae86 	bls.w	8002d48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	40013800 	.word	0x40013800
 8003054:	40020000 	.word	0x40020000
 8003058:	40020400 	.word	0x40020400
 800305c:	40020800 	.word	0x40020800
 8003060:	40020c00 	.word	0x40020c00
 8003064:	40021000 	.word	0x40021000
 8003068:	40021400 	.word	0x40021400
 800306c:	40021800 	.word	0x40021800
 8003070:	40021c00 	.word	0x40021c00
 8003074:	40022000 	.word	0x40022000
 8003078:	40022400 	.word	0x40022400
 800307c:	40013c00 	.word	0x40013c00

08003080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003090:	787b      	ldrb	r3, [r7, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800309c:	e003      	b.n	80030a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	041a      	lsls	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	619a      	str	r2, [r3, #24]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ca:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd ffcc 	bl	8001070 <HAL_GPIO_EXTI_Callback>
  }
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40013c00 	.word	0x40013c00

080030e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_PWREx_EnableOverDrive+0x98>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_PWREx_EnableOverDrive+0x98>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_PWREx_EnableOverDrive+0x98>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003112:	f7fe faab 	bl	800166c <HAL_GetTick>
 8003116:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003118:	e009      	b.n	800312e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800311a:	f7fe faa7 	bl	800166c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003128:	d901      	bls.n	800312e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e022      	b.n	8003174 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313a:	d1ee      	bne.n	800311a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800313c:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003146:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003148:	f7fe fa90 	bl	800166c <HAL_GetTick>
 800314c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800314e:	e009      	b.n	8003164 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003150:	f7fe fa8c 	bl	800166c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800315e:	d901      	bls.n	8003164 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e007      	b.n	8003174 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003170:	d1ee      	bne.n	8003150 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	40007000 	.word	0x40007000

08003184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e291      	b.n	80036be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a8:	4b96      	ldr	r3, [pc, #600]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00c      	beq.n	80031ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b4:	4b93      	ldr	r3, [pc, #588]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d112      	bne.n	80031e6 <HAL_RCC_OscConfig+0x62>
 80031c0:	4b90      	ldr	r3, [pc, #576]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ce:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x130>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d168      	bne.n	80032b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e26b      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x7a>
 80031f0:	4b84      	ldr	r3, [pc, #528]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a83      	ldr	r2, [pc, #524]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e02e      	b.n	800325c <HAL_RCC_OscConfig+0xd8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x9c>
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7b      	ldr	r2, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xd8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0xc0>
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xd8>
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fa02 	bl	800166c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe f9fe 	bl	800166c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e21f      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xe8>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe f9ee 	bl	800166c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe f9ea 	bl	800166c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e20b      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x110>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d069      	beq.n	8003396 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c2:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x190>
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x17a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1df      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	493d      	ldr	r1, [pc, #244]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e040      	b.n	8003396 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d023      	beq.n	8003364 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a38      	ldr	r2, [pc, #224]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe f9a0 	bl	800166c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003330:	f7fe f99c 	bl	800166c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1bd      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4929      	ldr	r1, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	e018      	b.n	8003396 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe f97c 	bl	800166c <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fe f978 	bl	800166c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e199      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d038      	beq.n	8003414 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d019      	beq.n	80033de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7fe f959 	bl	800166c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033be:	f7fe f955 	bl	800166c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e176      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x23a>
 80033dc:	e01a      	b.n	8003414 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe f93f 	bl	800166c <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fe f93b 	bl	800166c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d903      	bls.n	8003408 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e15c      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
 8003404:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b91      	ldr	r3, [pc, #580]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a4 	beq.w	800356a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b8b      	ldr	r3, [pc, #556]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	4b88      	ldr	r3, [pc, #544]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a87      	ldr	r2, [pc, #540]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b85      	ldr	r3, [pc, #532]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344a:	4b82      	ldr	r3, [pc, #520]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003456:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7e      	ldr	r2, [pc, #504]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe f903 	bl	800166c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe f8ff 	bl	800166c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b64      	cmp	r3, #100	; 0x64
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e120      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347c:	4b75      	ldr	r3, [pc, #468]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x31a>
 8003490:	4b6f      	ldr	r3, [pc, #444]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	e02d      	b.n	80034fa <HAL_RCC_OscConfig+0x376>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x33c>
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a69      	ldr	r2, [pc, #420]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b67      	ldr	r3, [pc, #412]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a66      	ldr	r2, [pc, #408]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e01c      	b.n	80034fa <HAL_RCC_OscConfig+0x376>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x35e>
 80034c8:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a60      	ldr	r2, [pc, #384]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x376>
 80034e2:	4b5b      	ldr	r3, [pc, #364]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a5a      	ldr	r2, [pc, #360]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
 80034ee:	4b58      	ldr	r3, [pc, #352]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a57      	ldr	r2, [pc, #348]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fe f8b3 	bl	800166c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe f8af 	bl	800166c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0ce      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x386>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe f89d 	bl	800166c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe f899 	bl	800166c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0b8      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b3c      	ldr	r3, [pc, #240]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80a4 	beq.w	80036bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d06b      	beq.n	8003658 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d149      	bne.n	800361c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b31      	ldr	r3, [pc, #196]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a30      	ldr	r2, [pc, #192]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe f86a 	bl	800166c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7fe f866 	bl	800166c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e087      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	4b28      	ldr	r3, [pc, #160]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	3b01      	subs	r3, #1
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	061b      	lsls	r3, r3, #24
 80035de:	4313      	orrs	r3, r2
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80035e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a18      	ldr	r2, [pc, #96]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f83a 	bl	800166c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe f836 	bl	800166c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e057      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x478>
 800361a:	e04f      	b.n	80036bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe f820 	bl	800166c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe f81c 	bl	800166c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e03d      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	4b03      	ldr	r3, [pc, #12]	; (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x4ac>
 800364e:	e035      	b.n	80036bc <HAL_RCC_OscConfig+0x538>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x544>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d028      	beq.n	80036b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d121      	bne.n	80036b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d11a      	bne.n	80036b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800368e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003690:	4293      	cmp	r3, r2
 8003692:	d111      	bne.n	80036b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	3b01      	subs	r3, #1
 80036a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800

080036cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0d0      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b6a      	ldr	r3, [pc, #424]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b67      	ldr	r3, [pc, #412]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 020f 	bic.w	r2, r3, #15
 80036fa:	4965      	ldr	r1, [pc, #404]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b63      	ldr	r3, [pc, #396]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b8      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800372c:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a58      	ldr	r2, [pc, #352]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 8003732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003736:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003744:	4b53      	ldr	r3, [pc, #332]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a52      	ldr	r2, [pc, #328]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800374a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800374e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b50      	ldr	r3, [pc, #320]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	494d      	ldr	r1, [pc, #308]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d040      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d115      	bne.n	80037ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e07f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e073      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e06b      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4936      	ldr	r1, [pc, #216]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fd ff54 	bl	800166c <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fd ff50 	bl	800166c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e053      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d210      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 020f 	bic.w	r2, r3, #15
 8003806:	4922      	ldr	r1, [pc, #136]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e032      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4916      	ldr	r1, [pc, #88]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	490e      	ldr	r1, [pc, #56]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800385e:	f000 f821 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003862:	4602      	mov	r2, r0
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	490a      	ldr	r1, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x1cc>)
 8003870:	5ccb      	ldrb	r3, [r1, r3]
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a09      	ldr	r2, [pc, #36]	; (800389c <HAL_RCC_ClockConfig+0x1d0>)
 8003878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCC_ClockConfig+0x1d4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd feb0 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023c00 	.word	0x40023c00
 8003894:	40023800 	.word	0x40023800
 8003898:	080136f0 	.word	0x080136f0
 800389c:	20000008 	.word	0x20000008
 80038a0:	2000000c 	.word	0x2000000c

080038a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a4:	b5b0      	push	{r4, r5, r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038aa:	2100      	movs	r1, #0
 80038ac:	6079      	str	r1, [r7, #4]
 80038ae:	2100      	movs	r1, #0
 80038b0:	60f9      	str	r1, [r7, #12]
 80038b2:	2100      	movs	r1, #0
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80038b6:	2100      	movs	r1, #0
 80038b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ba:	4952      	ldr	r1, [pc, #328]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x160>)
 80038bc:	6889      	ldr	r1, [r1, #8]
 80038be:	f001 010c 	and.w	r1, r1, #12
 80038c2:	2908      	cmp	r1, #8
 80038c4:	d00d      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80038c6:	2908      	cmp	r1, #8
 80038c8:	f200 8094 	bhi.w	80039f4 <HAL_RCC_GetSysClockFreq+0x150>
 80038cc:	2900      	cmp	r1, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x32>
 80038d0:	2904      	cmp	r1, #4
 80038d2:	d003      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x38>
 80038d4:	e08e      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d6:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x164>)
 80038d8:	60bb      	str	r3, [r7, #8]
      break;
 80038da:	e08e      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038dc:	4b4b      	ldr	r3, [pc, #300]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x168>)
 80038de:	60bb      	str	r3, [r7, #8]
      break;
 80038e0:	e08b      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e2:	4948      	ldr	r1, [pc, #288]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x160>)
 80038e4:	6849      	ldr	r1, [r1, #4]
 80038e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80038ea:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038ec:	4945      	ldr	r1, [pc, #276]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x160>)
 80038ee:	6849      	ldr	r1, [r1, #4]
 80038f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d024      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f8:	4942      	ldr	r1, [pc, #264]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x160>)
 80038fa:	6849      	ldr	r1, [r1, #4]
 80038fc:	0989      	lsrs	r1, r1, #6
 80038fe:	4608      	mov	r0, r1
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003908:	f04f 0500 	mov.w	r5, #0
 800390c:	ea00 0204 	and.w	r2, r0, r4
 8003910:	ea01 0305 	and.w	r3, r1, r5
 8003914:	493d      	ldr	r1, [pc, #244]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x168>)
 8003916:	fb01 f003 	mul.w	r0, r1, r3
 800391a:	2100      	movs	r1, #0
 800391c:	fb01 f102 	mul.w	r1, r1, r2
 8003920:	1844      	adds	r4, r0, r1
 8003922:	493a      	ldr	r1, [pc, #232]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x168>)
 8003924:	fba2 0101 	umull	r0, r1, r2, r1
 8003928:	1863      	adds	r3, r4, r1
 800392a:	4619      	mov	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	461a      	mov	r2, r3
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	f7fc fcbc 	bl	80002b0 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4613      	mov	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	e04a      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003942:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	461a      	mov	r2, r3
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	ea02 0400 	and.w	r4, r2, r0
 800395a:	ea03 0501 	and.w	r5, r3, r1
 800395e:	4620      	mov	r0, r4
 8003960:	4629      	mov	r1, r5
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	014b      	lsls	r3, r1, #5
 800396c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003970:	0142      	lsls	r2, r0, #5
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	1b00      	subs	r0, r0, r4
 8003978:	eb61 0105 	sbc.w	r1, r1, r5
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	018b      	lsls	r3, r1, #6
 8003986:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800398a:	0182      	lsls	r2, r0, #6
 800398c:	1a12      	subs	r2, r2, r0
 800398e:	eb63 0301 	sbc.w	r3, r3, r1
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	00d9      	lsls	r1, r3, #3
 800399c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a0:	00d0      	lsls	r0, r2, #3
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	1912      	adds	r2, r2, r4
 80039a8:	eb45 0303 	adc.w	r3, r5, r3
 80039ac:	f04f 0000 	mov.w	r0, #0
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	0299      	lsls	r1, r3, #10
 80039b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039ba:	0290      	lsls	r0, r2, #10
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	f7fc fc70 	bl	80002b0 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4613      	mov	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x160>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	3301      	adds	r3, #1
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	60bb      	str	r3, [r7, #8]
      break;
 80039f2:	e002      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x164>)
 80039f6:	60bb      	str	r3, [r7, #8]
      break;
 80039f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fa:	68bb      	ldr	r3, [r7, #8]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bdb0      	pop	{r4, r5, r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	017d7840 	.word	0x017d7840

08003a10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000008 	.word	0x20000008

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	08013700 	.word	0x08013700

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a54:	f7ff ffdc 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0b5b      	lsrs	r3, r3, #13
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	08013700 	.word	0x08013700

08003a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aa0:	4b69      	ldr	r3, [pc, #420]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a68      	ldr	r2, [pc, #416]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aaa:	6093      	str	r3, [r2, #8]
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	4964      	ldr	r1, [pc, #400]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d017      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad2:	4b5d      	ldr	r3, [pc, #372]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	4959      	ldr	r1, [pc, #356]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	494a      	ldr	r1, [pc, #296]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 808b 	beq.w	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4a39      	ldr	r2, [pc, #228]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
 8003b68:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fd fd74 	bl	800166c <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd fd70 	bl	800166c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e357      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba6:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d035      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d02e      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003be6:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d114      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fd38 	bl	800166c <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd fd34 	bl	800166c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e319      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2e:	d111      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	4901      	ldr	r1, [pc, #4]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	0ffffcff 	.word	0x0ffffcff
 8003c54:	4bb1      	ldr	r3, [pc, #708]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4ab0      	ldr	r2, [pc, #704]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	4bae      	ldr	r3, [pc, #696]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	49ab      	ldr	r1, [pc, #684]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d010      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c7e:	4ba7      	ldr	r3, [pc, #668]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c84:	4aa5      	ldr	r2, [pc, #660]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c8e:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	49a0      	ldr	r1, [pc, #640]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cac:	4b9b      	ldr	r3, [pc, #620]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cba:	4998      	ldr	r1, [pc, #608]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cce:	4b93      	ldr	r3, [pc, #588]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cdc:	498f      	ldr	r1, [pc, #572]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf0:	4b8a      	ldr	r3, [pc, #552]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfe:	4987      	ldr	r1, [pc, #540]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	497e      	ldr	r1, [pc, #504]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d34:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	4976      	ldr	r1, [pc, #472]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d56:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f023 020c 	bic.w	r2, r3, #12
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	496d      	ldr	r1, [pc, #436]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d78:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	4965      	ldr	r1, [pc, #404]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d9a:	4b60      	ldr	r3, [pc, #384]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	495c      	ldr	r1, [pc, #368]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dbc:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	4954      	ldr	r1, [pc, #336]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dde:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	494b      	ldr	r1, [pc, #300]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e00:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	4943      	ldr	r1, [pc, #268]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e22:	4b3e      	ldr	r3, [pc, #248]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	493a      	ldr	r1, [pc, #232]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e44:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e52:	4932      	ldr	r1, [pc, #200]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e66:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e74:	4929      	ldr	r1, [pc, #164]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e84:	d101      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	4919      	ldr	r1, [pc, #100]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec8:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed8:	4910      	ldr	r1, [pc, #64]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d006      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80d9 	beq.w	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd fbb4 	bl	800166c <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f06:	e00b      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f08:	f7fd fbb0 	bl	800166c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d904      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e197      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f20:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ed      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d021      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d11d      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f40:	4b64      	ldr	r3, [pc, #400]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f46:	0c1b      	lsrs	r3, r3, #16
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f4e:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f54:	0e1b      	lsrs	r3, r3, #24
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	019a      	lsls	r2, r3, #6
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	061b      	lsls	r3, r3, #24
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	071b      	lsls	r3, r3, #28
 8003f74:	4957      	ldr	r1, [pc, #348]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d02e      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d129      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fa8:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fae:	0c1b      	lsrs	r3, r3, #16
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	0f1b      	lsrs	r3, r3, #28
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	019a      	lsls	r2, r3, #6
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	071b      	lsls	r3, r3, #28
 8003fdc:	493d      	ldr	r1, [pc, #244]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fea:	f023 021f 	bic.w	r2, r3, #31
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	4937      	ldr	r1, [pc, #220]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004008:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400e:	0e1b      	lsrs	r3, r3, #24
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	0f1b      	lsrs	r3, r3, #28
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	019a      	lsls	r2, r3, #6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	431a      	orrs	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	071b      	lsls	r3, r3, #28
 800403c:	4925      	ldr	r1, [pc, #148]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d011      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	019a      	lsls	r2, r3, #6
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	061b      	lsls	r3, r3, #24
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	071b      	lsls	r3, r3, #28
 800406c:	4919      	ldr	r1, [pc, #100]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800407a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800407e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004080:	f7fd faf4 	bl	800166c <HAL_GetTick>
 8004084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004088:	f7fd faf0 	bl	800166c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0d7      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 80cd 	bne.w	8004248 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ba:	f7fd fad7 	bl	800166c <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c2:	f7fd fad3 	bl	800166c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	; 0x64
 80040ce:	d903      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e0ba      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80040d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d8:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e4:	d0ed      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02e      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d12a      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800411c:	4b4d      	ldr	r3, [pc, #308]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	0f1b      	lsrs	r3, r3, #28
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	019a      	lsls	r2, r3, #6
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	431a      	orrs	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	4944      	ldr	r1, [pc, #272]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800414a:	4b42      	ldr	r3, [pc, #264]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004150:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	3b01      	subs	r3, #1
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	493d      	ldr	r1, [pc, #244]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004178:	d11d      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004188:	4b32      	ldr	r3, [pc, #200]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	0f1b      	lsrs	r3, r3, #28
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	019a      	lsls	r2, r3, #6
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	431a      	orrs	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	061b      	lsls	r3, r3, #24
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	071b      	lsls	r3, r3, #28
 80041ae:	4929      	ldr	r1, [pc, #164]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d028      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	0e1b      	lsrs	r3, r3, #24
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041d0:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	019a      	lsls	r2, r3, #6
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	431a      	orrs	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	071b      	lsls	r3, r3, #28
 80041f6:	4917      	ldr	r1, [pc, #92]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4911      	ldr	r1, [pc, #68]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800421a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fd fa24 	bl	800166c <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004228:	f7fd fa20 	bl	800166c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e007      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004246:	d1ef      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800

08004258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e049      	b.n	80042fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc ff46 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 f97c 	bl	8004594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b02      	cmp	r3, #2
 800431a:	d122      	bne.n	8004362 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d11b      	bne.n	8004362 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0202 	mvn.w	r2, #2
 8004332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f905 	bl	8004558 <HAL_TIM_IC_CaptureCallback>
 800434e:	e005      	b.n	800435c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8f7 	bl	8004544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f908 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b04      	cmp	r3, #4
 800436e:	d122      	bne.n	80043b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d11b      	bne.n	80043b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f06f 0204 	mvn.w	r2, #4
 8004386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f8db 	bl	8004558 <HAL_TIM_IC_CaptureCallback>
 80043a2:	e005      	b.n	80043b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8cd 	bl	8004544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8de 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d122      	bne.n	800440a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d11b      	bne.n	800440a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0208 	mvn.w	r2, #8
 80043da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2204      	movs	r2, #4
 80043e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8b1 	bl	8004558 <HAL_TIM_IC_CaptureCallback>
 80043f6:	e005      	b.n	8004404 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8a3 	bl	8004544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8b4 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b10      	cmp	r3, #16
 8004416:	d122      	bne.n	800445e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d11b      	bne.n	800445e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f06f 0210 	mvn.w	r2, #16
 800442e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2208      	movs	r2, #8
 8004434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f887 	bl	8004558 <HAL_TIM_IC_CaptureCallback>
 800444a:	e005      	b.n	8004458 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f879 	bl	8004544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f88a 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10e      	bne.n	800448a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f06f 0201 	mvn.w	r2, #1
 8004482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7fc fe0f 	bl	80010a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d10e      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d107      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f9a7 	bl	8004804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c4:	d10e      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d107      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f99a 	bl	8004818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f838 	bl	8004580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d10e      	bne.n	800453c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d107      	bne.n	800453c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0220 	mvn.w	r2, #32
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f95a 	bl	80047f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a40      	ldr	r2, [pc, #256]	; (80046a8 <TIM_Base_SetConfig+0x114>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3d      	ldr	r2, [pc, #244]	; (80046ac <TIM_Base_SetConfig+0x118>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3c      	ldr	r2, [pc, #240]	; (80046b0 <TIM_Base_SetConfig+0x11c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3b      	ldr	r2, [pc, #236]	; (80046b4 <TIM_Base_SetConfig+0x120>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3a      	ldr	r2, [pc, #232]	; (80046b8 <TIM_Base_SetConfig+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2f      	ldr	r2, [pc, #188]	; (80046a8 <TIM_Base_SetConfig+0x114>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d027      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <TIM_Base_SetConfig+0x118>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d023      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2b      	ldr	r2, [pc, #172]	; (80046b0 <TIM_Base_SetConfig+0x11c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2a      	ldr	r2, [pc, #168]	; (80046b4 <TIM_Base_SetConfig+0x120>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a29      	ldr	r2, [pc, #164]	; (80046b8 <TIM_Base_SetConfig+0x124>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d017      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a28      	ldr	r2, [pc, #160]	; (80046bc <TIM_Base_SetConfig+0x128>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <TIM_Base_SetConfig+0x12c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <TIM_Base_SetConfig+0x130>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a25      	ldr	r2, [pc, #148]	; (80046c8 <TIM_Base_SetConfig+0x134>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <TIM_Base_SetConfig+0x138>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <TIM_Base_SetConfig+0x13c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <TIM_Base_SetConfig+0x114>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0xf8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <TIM_Base_SetConfig+0x124>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d103      	bne.n	8004694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	615a      	str	r2, [r3, #20]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40010400 	.word	0x40010400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800
 80046c8:	40001800 	.word	0x40001800
 80046cc:	40001c00 	.word	0x40001c00
 80046d0:	40002000 	.word	0x40002000

080046d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e06d      	b.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2f      	ldr	r2, [pc, #188]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d108      	bne.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004726:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d01d      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1a      	ldr	r2, [pc, #104]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a15      	ldr	r2, [pc, #84]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d10c      	bne.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40001800 	.word	0x40001800

080047f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e040      	b.n	80048c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fc fc84 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fb7a 	bl	8004f64 <UART_SetConfig>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e022      	b.n	80048c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fdd0 	bl	8005428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fe57 	bl	800556c <UART_CheckIdleState>
 80048be:	4603      	mov	r3, r0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b08b      	sub	sp, #44	; 0x2c
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d156      	bne.n	800498c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_UART_Transmit_IT+0x22>
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e04f      	b.n	800498e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Transmit_IT+0x34>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e048      	b.n	800498e <HAL_UART_Transmit_IT+0xc6>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	88fa      	ldrh	r2, [r7, #6]
 800490e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2221      	movs	r2, #33	; 0x21
 800492c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d107      	bne.n	8004948 <HAL_UART_Transmit_IT+0x80>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a16      	ldr	r2, [pc, #88]	; (800499c <HAL_UART_Transmit_IT+0xd4>)
 8004944:	669a      	str	r2, [r3, #104]	; 0x68
 8004946:	e002      	b.n	800494e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <HAL_UART_Transmit_IT+0xd8>)
 800494c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	613b      	str	r3, [r7, #16]
   return(result);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	69f9      	ldr	r1, [r7, #28]
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	61bb      	str	r3, [r7, #24]
   return(result);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e6      	bne.n	8004956 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	372c      	adds	r7, #44	; 0x2c
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	08005903 	.word	0x08005903
 80049a0:	0800584d 	.word	0x0800584d

080049a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b0ba      	sub	sp, #232	; 0xe8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80049d2:	4013      	ands	r3, r2
 80049d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d115      	bne.n	8004a0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00f      	beq.n	8004a0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 828f 	beq.w	8004f20 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
      }
      return;
 8004a0a:	e289      	b.n	8004f20 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8117 	beq.w	8004c44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a26:	4b85      	ldr	r3, [pc, #532]	; (8004c3c <HAL_UART_IRQHandler+0x298>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 810a 	beq.w	8004c44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d011      	beq.n	8004a60 <HAL_UART_IRQHandler+0xbc>
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d011      	beq.n	8004a90 <HAL_UART_IRQHandler+0xec>
 8004a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d011      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x11c>
 8004a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2204      	movs	r2, #4
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab6:	f043 0202 	orr.w	r2, r3, #2
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d017      	beq.n	8004afc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004adc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00b      	beq.n	8004afc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af2:	f043 0208 	orr.w	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <HAL_UART_IRQHandler+0x18a>
 8004b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 81f5 	beq.w	8004f24 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d005      	beq.n	8004b86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04f      	beq.n	8004c26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fde7 	bl	800575a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d141      	bne.n	8004c1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1d9      	bne.n	8004b9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d013      	beq.n	8004c16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <HAL_UART_IRQHandler+0x29c>)
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fc fee7 	bl	80019ce <HAL_DMA_Abort_IT>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d017      	beq.n	8004c36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c10:	4610      	mov	r0, r2
 8004c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e00f      	b.n	8004c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f98e 	bl	8004f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e00b      	b.n	8004c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f98a 	bl	8004f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e007      	b.n	8004c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f986 	bl	8004f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c34:	e176      	b.n	8004f24 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c36:	bf00      	nop
    return;
 8004c38:	e174      	b.n	8004f24 <HAL_UART_IRQHandler+0x580>
 8004c3a:	bf00      	nop
 8004c3c:	04000120 	.word	0x04000120
 8004c40:	08005821 	.word	0x08005821

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	f040 8144 	bne.w	8004ed6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 813d 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8136 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2210      	movs	r2, #16
 8004c70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	f040 80b2 	bne.w	8004de6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8148 	beq.w	8004f28 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	f080 8140 	bcs.w	8004f28 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbc:	f000 8085 	beq.w	8004dca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1da      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e1      	bne.n	8004d0a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9a:	f023 0310 	bic.w	r3, r3, #16
 8004d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e4      	bne.n	8004d8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fc fd92 	bl	80018ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8b4 	bl	8004f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004de4:	e0a0      	b.n	8004f28 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8092 	beq.w	8004f2c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8004e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 808d 	beq.w	8004f2c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e34:	647b      	str	r3, [r7, #68]	; 0x44
 8004e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e4      	bne.n	8004e12 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	623b      	str	r3, [r7, #32]
   return(result);
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e3      	bne.n	8004e48 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0310 	bic.w	r3, r3, #16
 8004ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e4      	bne.n	8004e92 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f83c 	bl	8004f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ed4:	e02a      	b.n	8004f2c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00e      	beq.n	8004f00 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01c      	beq.n	8004f30 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
    }
    return;
 8004efe:	e017      	b.n	8004f30 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d012      	beq.n	8004f32 <HAL_UART_IRQHandler+0x58e>
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fd52 	bl	80059c2 <UART_EndTransmit_IT>
    return;
 8004f1e:	e008      	b.n	8004f32 <HAL_UART_IRQHandler+0x58e>
      return;
 8004f20:	bf00      	nop
 8004f22:	e006      	b.n	8004f32 <HAL_UART_IRQHandler+0x58e>
    return;
 8004f24:	bf00      	nop
 8004f26:	e004      	b.n	8004f32 <HAL_UART_IRQHandler+0x58e>
      return;
 8004f28:	bf00      	nop
 8004f2a:	e002      	b.n	8004f32 <HAL_UART_IRQHandler+0x58e>
      return;
 8004f2c:	bf00      	nop
 8004f2e:	e000      	b.n	8004f32 <HAL_UART_IRQHandler+0x58e>
    return;
 8004f30:	bf00      	nop
  }

}
 8004f32:	37e8      	adds	r7, #232	; 0xe8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4ba7      	ldr	r3, [pc, #668]	; (800522c <UART_SetConfig+0x2c8>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a95      	ldr	r2, [pc, #596]	; (8005230 <UART_SetConfig+0x2cc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d120      	bne.n	8005022 <UART_SetConfig+0xbe>
 8004fe0:	4b94      	ldr	r3, [pc, #592]	; (8005234 <UART_SetConfig+0x2d0>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d816      	bhi.n	800501c <UART_SetConfig+0xb8>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x90>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005011 	.word	0x08005011
 8004ffc:	0800500b 	.word	0x0800500b
 8005000:	08005017 	.word	0x08005017
 8005004:	2301      	movs	r3, #1
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e14f      	b.n	80052aa <UART_SetConfig+0x346>
 800500a:	2302      	movs	r3, #2
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e14c      	b.n	80052aa <UART_SetConfig+0x346>
 8005010:	2304      	movs	r3, #4
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e149      	b.n	80052aa <UART_SetConfig+0x346>
 8005016:	2308      	movs	r3, #8
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e146      	b.n	80052aa <UART_SetConfig+0x346>
 800501c:	2310      	movs	r3, #16
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e143      	b.n	80052aa <UART_SetConfig+0x346>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a84      	ldr	r2, [pc, #528]	; (8005238 <UART_SetConfig+0x2d4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d132      	bne.n	8005092 <UART_SetConfig+0x12e>
 800502c:	4b81      	ldr	r3, [pc, #516]	; (8005234 <UART_SetConfig+0x2d0>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d828      	bhi.n	800508c <UART_SetConfig+0x128>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0xdc>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005075 	.word	0x08005075
 8005044:	0800508d 	.word	0x0800508d
 8005048:	0800508d 	.word	0x0800508d
 800504c:	0800508d 	.word	0x0800508d
 8005050:	08005081 	.word	0x08005081
 8005054:	0800508d 	.word	0x0800508d
 8005058:	0800508d 	.word	0x0800508d
 800505c:	0800508d 	.word	0x0800508d
 8005060:	0800507b 	.word	0x0800507b
 8005064:	0800508d 	.word	0x0800508d
 8005068:	0800508d 	.word	0x0800508d
 800506c:	0800508d 	.word	0x0800508d
 8005070:	08005087 	.word	0x08005087
 8005074:	2300      	movs	r3, #0
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e117      	b.n	80052aa <UART_SetConfig+0x346>
 800507a:	2302      	movs	r3, #2
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e114      	b.n	80052aa <UART_SetConfig+0x346>
 8005080:	2304      	movs	r3, #4
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e111      	b.n	80052aa <UART_SetConfig+0x346>
 8005086:	2308      	movs	r3, #8
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e10e      	b.n	80052aa <UART_SetConfig+0x346>
 800508c:	2310      	movs	r3, #16
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e10b      	b.n	80052aa <UART_SetConfig+0x346>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a69      	ldr	r2, [pc, #420]	; (800523c <UART_SetConfig+0x2d8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d120      	bne.n	80050de <UART_SetConfig+0x17a>
 800509c:	4b65      	ldr	r3, [pc, #404]	; (8005234 <UART_SetConfig+0x2d0>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050a6:	2b30      	cmp	r3, #48	; 0x30
 80050a8:	d013      	beq.n	80050d2 <UART_SetConfig+0x16e>
 80050aa:	2b30      	cmp	r3, #48	; 0x30
 80050ac:	d814      	bhi.n	80050d8 <UART_SetConfig+0x174>
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d009      	beq.n	80050c6 <UART_SetConfig+0x162>
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d810      	bhi.n	80050d8 <UART_SetConfig+0x174>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <UART_SetConfig+0x15c>
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d006      	beq.n	80050cc <UART_SetConfig+0x168>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x174>
 80050c0:	2300      	movs	r3, #0
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e0f1      	b.n	80052aa <UART_SetConfig+0x346>
 80050c6:	2302      	movs	r3, #2
 80050c8:	77fb      	strb	r3, [r7, #31]
 80050ca:	e0ee      	b.n	80052aa <UART_SetConfig+0x346>
 80050cc:	2304      	movs	r3, #4
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e0eb      	b.n	80052aa <UART_SetConfig+0x346>
 80050d2:	2308      	movs	r3, #8
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e0e8      	b.n	80052aa <UART_SetConfig+0x346>
 80050d8:	2310      	movs	r3, #16
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e0e5      	b.n	80052aa <UART_SetConfig+0x346>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a57      	ldr	r2, [pc, #348]	; (8005240 <UART_SetConfig+0x2dc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d120      	bne.n	800512a <UART_SetConfig+0x1c6>
 80050e8:	4b52      	ldr	r3, [pc, #328]	; (8005234 <UART_SetConfig+0x2d0>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050f2:	2bc0      	cmp	r3, #192	; 0xc0
 80050f4:	d013      	beq.n	800511e <UART_SetConfig+0x1ba>
 80050f6:	2bc0      	cmp	r3, #192	; 0xc0
 80050f8:	d814      	bhi.n	8005124 <UART_SetConfig+0x1c0>
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d009      	beq.n	8005112 <UART_SetConfig+0x1ae>
 80050fe:	2b80      	cmp	r3, #128	; 0x80
 8005100:	d810      	bhi.n	8005124 <UART_SetConfig+0x1c0>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <UART_SetConfig+0x1a8>
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d006      	beq.n	8005118 <UART_SetConfig+0x1b4>
 800510a:	e00b      	b.n	8005124 <UART_SetConfig+0x1c0>
 800510c:	2300      	movs	r3, #0
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e0cb      	b.n	80052aa <UART_SetConfig+0x346>
 8005112:	2302      	movs	r3, #2
 8005114:	77fb      	strb	r3, [r7, #31]
 8005116:	e0c8      	b.n	80052aa <UART_SetConfig+0x346>
 8005118:	2304      	movs	r3, #4
 800511a:	77fb      	strb	r3, [r7, #31]
 800511c:	e0c5      	b.n	80052aa <UART_SetConfig+0x346>
 800511e:	2308      	movs	r3, #8
 8005120:	77fb      	strb	r3, [r7, #31]
 8005122:	e0c2      	b.n	80052aa <UART_SetConfig+0x346>
 8005124:	2310      	movs	r3, #16
 8005126:	77fb      	strb	r3, [r7, #31]
 8005128:	e0bf      	b.n	80052aa <UART_SetConfig+0x346>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a45      	ldr	r2, [pc, #276]	; (8005244 <UART_SetConfig+0x2e0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d125      	bne.n	8005180 <UART_SetConfig+0x21c>
 8005134:	4b3f      	ldr	r3, [pc, #252]	; (8005234 <UART_SetConfig+0x2d0>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005142:	d017      	beq.n	8005174 <UART_SetConfig+0x210>
 8005144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005148:	d817      	bhi.n	800517a <UART_SetConfig+0x216>
 800514a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514e:	d00b      	beq.n	8005168 <UART_SetConfig+0x204>
 8005150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005154:	d811      	bhi.n	800517a <UART_SetConfig+0x216>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <UART_SetConfig+0x1fe>
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	d006      	beq.n	800516e <UART_SetConfig+0x20a>
 8005160:	e00b      	b.n	800517a <UART_SetConfig+0x216>
 8005162:	2300      	movs	r3, #0
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e0a0      	b.n	80052aa <UART_SetConfig+0x346>
 8005168:	2302      	movs	r3, #2
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e09d      	b.n	80052aa <UART_SetConfig+0x346>
 800516e:	2304      	movs	r3, #4
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	e09a      	b.n	80052aa <UART_SetConfig+0x346>
 8005174:	2308      	movs	r3, #8
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e097      	b.n	80052aa <UART_SetConfig+0x346>
 800517a:	2310      	movs	r3, #16
 800517c:	77fb      	strb	r3, [r7, #31]
 800517e:	e094      	b.n	80052aa <UART_SetConfig+0x346>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a30      	ldr	r2, [pc, #192]	; (8005248 <UART_SetConfig+0x2e4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d125      	bne.n	80051d6 <UART_SetConfig+0x272>
 800518a:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <UART_SetConfig+0x2d0>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005198:	d017      	beq.n	80051ca <UART_SetConfig+0x266>
 800519a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800519e:	d817      	bhi.n	80051d0 <UART_SetConfig+0x26c>
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a4:	d00b      	beq.n	80051be <UART_SetConfig+0x25a>
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d811      	bhi.n	80051d0 <UART_SetConfig+0x26c>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <UART_SetConfig+0x254>
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	d006      	beq.n	80051c4 <UART_SetConfig+0x260>
 80051b6:	e00b      	b.n	80051d0 <UART_SetConfig+0x26c>
 80051b8:	2301      	movs	r3, #1
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e075      	b.n	80052aa <UART_SetConfig+0x346>
 80051be:	2302      	movs	r3, #2
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e072      	b.n	80052aa <UART_SetConfig+0x346>
 80051c4:	2304      	movs	r3, #4
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e06f      	b.n	80052aa <UART_SetConfig+0x346>
 80051ca:	2308      	movs	r3, #8
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e06c      	b.n	80052aa <UART_SetConfig+0x346>
 80051d0:	2310      	movs	r3, #16
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e069      	b.n	80052aa <UART_SetConfig+0x346>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1c      	ldr	r2, [pc, #112]	; (800524c <UART_SetConfig+0x2e8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d137      	bne.n	8005250 <UART_SetConfig+0x2ec>
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <UART_SetConfig+0x2d0>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80051ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051ee:	d017      	beq.n	8005220 <UART_SetConfig+0x2bc>
 80051f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051f4:	d817      	bhi.n	8005226 <UART_SetConfig+0x2c2>
 80051f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fa:	d00b      	beq.n	8005214 <UART_SetConfig+0x2b0>
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005200:	d811      	bhi.n	8005226 <UART_SetConfig+0x2c2>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <UART_SetConfig+0x2aa>
 8005206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520a:	d006      	beq.n	800521a <UART_SetConfig+0x2b6>
 800520c:	e00b      	b.n	8005226 <UART_SetConfig+0x2c2>
 800520e:	2300      	movs	r3, #0
 8005210:	77fb      	strb	r3, [r7, #31]
 8005212:	e04a      	b.n	80052aa <UART_SetConfig+0x346>
 8005214:	2302      	movs	r3, #2
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e047      	b.n	80052aa <UART_SetConfig+0x346>
 800521a:	2304      	movs	r3, #4
 800521c:	77fb      	strb	r3, [r7, #31]
 800521e:	e044      	b.n	80052aa <UART_SetConfig+0x346>
 8005220:	2308      	movs	r3, #8
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e041      	b.n	80052aa <UART_SetConfig+0x346>
 8005226:	2310      	movs	r3, #16
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e03e      	b.n	80052aa <UART_SetConfig+0x346>
 800522c:	efff69f3 	.word	0xefff69f3
 8005230:	40011000 	.word	0x40011000
 8005234:	40023800 	.word	0x40023800
 8005238:	40004400 	.word	0x40004400
 800523c:	40004800 	.word	0x40004800
 8005240:	40004c00 	.word	0x40004c00
 8005244:	40005000 	.word	0x40005000
 8005248:	40011400 	.word	0x40011400
 800524c:	40007800 	.word	0x40007800
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a71      	ldr	r2, [pc, #452]	; (800541c <UART_SetConfig+0x4b8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d125      	bne.n	80052a6 <UART_SetConfig+0x342>
 800525a:	4b71      	ldr	r3, [pc, #452]	; (8005420 <UART_SetConfig+0x4bc>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005264:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005268:	d017      	beq.n	800529a <UART_SetConfig+0x336>
 800526a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800526e:	d817      	bhi.n	80052a0 <UART_SetConfig+0x33c>
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	d00b      	beq.n	800528e <UART_SetConfig+0x32a>
 8005276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527a:	d811      	bhi.n	80052a0 <UART_SetConfig+0x33c>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <UART_SetConfig+0x324>
 8005280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005284:	d006      	beq.n	8005294 <UART_SetConfig+0x330>
 8005286:	e00b      	b.n	80052a0 <UART_SetConfig+0x33c>
 8005288:	2300      	movs	r3, #0
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e00d      	b.n	80052aa <UART_SetConfig+0x346>
 800528e:	2302      	movs	r3, #2
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e00a      	b.n	80052aa <UART_SetConfig+0x346>
 8005294:	2304      	movs	r3, #4
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e007      	b.n	80052aa <UART_SetConfig+0x346>
 800529a:	2308      	movs	r3, #8
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e004      	b.n	80052aa <UART_SetConfig+0x346>
 80052a0:	2310      	movs	r3, #16
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e001      	b.n	80052aa <UART_SetConfig+0x346>
 80052a6:	2310      	movs	r3, #16
 80052a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b2:	d15a      	bne.n	800536a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d827      	bhi.n	800530a <UART_SetConfig+0x3a6>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0x35c>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	0800530b 	.word	0x0800530b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	08005303 	.word	0x08005303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe fba0 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 80052e8:	61b8      	str	r0, [r7, #24]
        break;
 80052ea:	e013      	b.n	8005314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fe fbb0 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 80052f0:	61b8      	str	r0, [r7, #24]
        break;
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f4:	4b4b      	ldr	r3, [pc, #300]	; (8005424 <UART_SetConfig+0x4c0>)
 80052f6:	61bb      	str	r3, [r7, #24]
        break;
 80052f8:	e00c      	b.n	8005314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fa:	f7fe fad3 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 80052fe:	61b8      	str	r0, [r7, #24]
        break;
 8005300:	e008      	b.n	8005314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	61bb      	str	r3, [r7, #24]
        break;
 8005308:	e004      	b.n	8005314 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	77bb      	strb	r3, [r7, #30]
        break;
 8005312:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d074      	beq.n	8005404 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	441a      	add	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d916      	bls.n	8005364 <UART_SetConfig+0x400>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533c:	d212      	bcs.n	8005364 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	b29a      	uxth	r2, r3
 8005354:	89fb      	ldrh	r3, [r7, #14]
 8005356:	4313      	orrs	r3, r2
 8005358:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	89fa      	ldrh	r2, [r7, #14]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	e04f      	b.n	8005404 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	77bb      	strb	r3, [r7, #30]
 8005368:	e04c      	b.n	8005404 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800536a:	7ffb      	ldrb	r3, [r7, #31]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d828      	bhi.n	80053c2 <UART_SetConfig+0x45e>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x414>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053b3 	.word	0x080053b3
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053c3 	.word	0x080053c3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fe fb44 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 80053a0:	61b8      	str	r0, [r7, #24]
        break;
 80053a2:	e013      	b.n	80053cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fe fb54 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 80053a8:	61b8      	str	r0, [r7, #24]
        break;
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b1d      	ldr	r3, [pc, #116]	; (8005424 <UART_SetConfig+0x4c0>)
 80053ae:	61bb      	str	r3, [r7, #24]
        break;
 80053b0:	e00c      	b.n	80053cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fe fa77 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 80053b6:	61b8      	str	r0, [r7, #24]
        break;
 80053b8:	e008      	b.n	80053cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053be:	61bb      	str	r3, [r7, #24]
        break;
 80053c0:	e004      	b.n	80053cc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	77bb      	strb	r3, [r7, #30]
        break;
 80053ca:	bf00      	nop
    }

    if (pclk != 0U)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085a      	lsrs	r2, r3, #1
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d909      	bls.n	8005400 <UART_SetConfig+0x49c>
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f2:	d205      	bcs.n	8005400 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	e001      	b.n	8005404 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005410:	7fbb      	ldrb	r3, [r7, #30]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40007c00 	.word	0x40007c00
 8005420:	40023800 	.word	0x40023800
 8005424:	00f42400 	.word	0x00f42400

08005428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01a      	beq.n	800553e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005526:	d10a      	bne.n	800553e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800557c:	f7fc f876 	bl	800166c <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d10e      	bne.n	80055ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f817 	bl	80055d2 <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e00d      	b.n	80055ca <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e2:	e0a5      	b.n	8005730 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	f000 80a1 	beq.w	8005730 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ee:	f7fc f83d 	bl	800166c <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d302      	bcc.n	8005604 <UART_WaitOnFlagUntilTimeout+0x32>
 80055fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005600:	2b00      	cmp	r3, #0
 8005602:	d13e      	bne.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005618:	667b      	str	r3, [r7, #100]	; 0x64
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005624:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e6      	bne.n	8005604 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	663b      	str	r3, [r7, #96]	; 0x60
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005656:	64ba      	str	r2, [r7, #72]	; 0x48
 8005658:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800565c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e067      	b.n	8005752 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d04f      	beq.n	8005730 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569e:	d147      	bne.n	8005730 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e6      	bne.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	613b      	str	r3, [r7, #16]
   return(result);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3308      	adds	r3, #8
 80056fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056fc:	623a      	str	r2, [r7, #32]
 80056fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	69f9      	ldr	r1, [r7, #28]
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	61bb      	str	r3, [r7, #24]
   return(result);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e010      	b.n	8005752 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	429a      	cmp	r2, r3
 800574c:	f43f af4a 	beq.w	80055e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3770      	adds	r7, #112	; 0x70
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800575a:	b480      	push	{r7}
 800575c:	b095      	sub	sp, #84	; 0x54
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
 8005782:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e6      	bne.n	8005762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3308      	adds	r3, #8
 800579a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d118      	bne.n	8005802 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f023 0310 	bic.w	r3, r3, #16
 80057e4:	647b      	str	r3, [r7, #68]	; 0x44
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6979      	ldr	r1, [r7, #20]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	613b      	str	r3, [r7, #16]
   return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e6      	bne.n	80057d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005814:	bf00      	nop
 8005816:	3754      	adds	r7, #84	; 0x54
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fb7a 	bl	8004f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b08f      	sub	sp, #60	; 0x3c
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005858:	2b21      	cmp	r3, #33	; 0x21
 800585a:	d14c      	bne.n	80058f6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d132      	bne.n	80058ce <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	61fb      	str	r3, [r7, #28]
   return(result);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005888:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ae:	633b      	str	r3, [r7, #48]	; 0x30
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6979      	ldr	r1, [r7, #20]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e6      	bne.n	800589a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80058cc:	e013      	b.n	80058f6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058f6:	bf00      	nop
 80058f8:	373c      	adds	r7, #60	; 0x3c
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005902:	b480      	push	{r7}
 8005904:	b091      	sub	sp, #68	; 0x44
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800590e:	2b21      	cmp	r3, #33	; 0x21
 8005910:	d151      	bne.n	80059b6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d132      	bne.n	8005984 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	623b      	str	r3, [r7, #32]
   return(result);
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
 800593e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	60fb      	str	r3, [r7, #12]
   return(result);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	617b      	str	r3, [r7, #20]
   return(result);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005982:	e018      	b.n	80059b6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005998:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	1c9a      	adds	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80059b6:	bf00      	nop
 80059b8:	3744      	adds	r7, #68	; 0x44
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b088      	sub	sp, #32
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	613b      	str	r3, [r7, #16]
   return(result);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fb fb43 	bl	8001094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0e:	bf00      	nop
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005a1e:	4b8d      	ldr	r3, [pc, #564]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a20:	22c0      	movs	r2, #192	; 0xc0
 8005a22:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005a24:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a26:	22a8      	movs	r2, #168	; 0xa8
 8005a28:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005a2a:	4b8a      	ldr	r3, [pc, #552]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8005a30:	4b88      	ldr	r3, [pc, #544]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a32:	226f      	movs	r2, #111	; 0x6f
 8005a34:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005a36:	4b88      	ldr	r3, [pc, #544]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005a38:	22ff      	movs	r2, #255	; 0xff
 8005a3a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005a3c:	4b86      	ldr	r3, [pc, #536]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005a3e:	22ff      	movs	r2, #255	; 0xff
 8005a40:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005a42:	4b85      	ldr	r3, [pc, #532]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005a48:	4b83      	ldr	r3, [pc, #524]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005a4e:	4b83      	ldr	r3, [pc, #524]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005a50:	22c0      	movs	r2, #192	; 0xc0
 8005a52:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005a54:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005a56:	22a8      	movs	r2, #168	; 0xa8
 8005a58:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005a5a:	4b80      	ldr	r3, [pc, #512]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005a60:	4b7e      	ldr	r3, [pc, #504]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005a66:	f000 fcb5 	bl	80063d4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005a6a:	4b7a      	ldr	r3, [pc, #488]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	061a      	lsls	r2, r3, #24
 8005a70:	4b78      	ldr	r3, [pc, #480]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	431a      	orrs	r2, r3
 8005a78:	4b76      	ldr	r3, [pc, #472]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a7a:	789b      	ldrb	r3, [r3, #2]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	4a74      	ldr	r2, [pc, #464]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a82:	78d2      	ldrb	r2, [r2, #3]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	061a      	lsls	r2, r3, #24
 8005a88:	4b72      	ldr	r3, [pc, #456]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	0619      	lsls	r1, r3, #24
 8005a8e:	4b71      	ldr	r3, [pc, #452]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	4319      	orrs	r1, r3
 8005a96:	4b6f      	ldr	r3, [pc, #444]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005a98:	789b      	ldrb	r3, [r3, #2]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	496d      	ldr	r1, [pc, #436]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005aa0:	78c9      	ldrb	r1, [r1, #3]
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	4b69      	ldr	r3, [pc, #420]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	0619      	lsls	r1, r3, #24
 8005ab2:	4b68      	ldr	r3, [pc, #416]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	041b      	lsls	r3, r3, #16
 8005ab8:	4319      	orrs	r1, r3
 8005aba:	4b66      	ldr	r3, [pc, #408]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005abc:	789b      	ldrb	r3, [r3, #2]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	4964      	ldr	r1, [pc, #400]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005ac4:	78c9      	ldrb	r1, [r1, #3]
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	4b60      	ldr	r3, [pc, #384]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	0619      	lsls	r1, r3, #24
 8005ad6:	4b5f      	ldr	r3, [pc, #380]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	4319      	orrs	r1, r3
 8005ade:	4b5d      	ldr	r3, [pc, #372]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005ae0:	789b      	ldrb	r3, [r3, #2]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	495b      	ldr	r1, [pc, #364]	; (8005c54 <MX_LWIP_Init+0x23c>)
 8005ae8:	78c9      	ldrb	r1, [r1, #3]
 8005aea:	430b      	orrs	r3, r1
 8005aec:	0e1b      	lsrs	r3, r3, #24
 8005aee:	4313      	orrs	r3, r2
 8005af0:	4a5b      	ldr	r2, [pc, #364]	; (8005c60 <MX_LWIP_Init+0x248>)
 8005af2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005af4:	4b58      	ldr	r3, [pc, #352]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	061a      	lsls	r2, r3, #24
 8005afa:	4b57      	ldr	r3, [pc, #348]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	431a      	orrs	r2, r3
 8005b02:	4b55      	ldr	r3, [pc, #340]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b04:	789b      	ldrb	r3, [r3, #2]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	4a53      	ldr	r2, [pc, #332]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b0c:	78d2      	ldrb	r2, [r2, #3]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	061a      	lsls	r2, r3, #24
 8005b12:	4b51      	ldr	r3, [pc, #324]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	0619      	lsls	r1, r3, #24
 8005b18:	4b4f      	ldr	r3, [pc, #316]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	4319      	orrs	r1, r3
 8005b20:	4b4d      	ldr	r3, [pc, #308]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b22:	789b      	ldrb	r3, [r3, #2]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	430b      	orrs	r3, r1
 8005b28:	494b      	ldr	r1, [pc, #300]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b2a:	78c9      	ldrb	r1, [r1, #3]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b34:	431a      	orrs	r2, r3
 8005b36:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	0619      	lsls	r1, r3, #24
 8005b3c:	4b46      	ldr	r3, [pc, #280]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	041b      	lsls	r3, r3, #16
 8005b42:	4319      	orrs	r1, r3
 8005b44:	4b44      	ldr	r3, [pc, #272]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b46:	789b      	ldrb	r3, [r3, #2]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	4942      	ldr	r1, [pc, #264]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b4e:	78c9      	ldrb	r1, [r1, #3]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	0619      	lsls	r1, r3, #24
 8005b60:	4b3d      	ldr	r3, [pc, #244]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	4319      	orrs	r1, r3
 8005b68:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b6a:	789b      	ldrb	r3, [r3, #2]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	4939      	ldr	r1, [pc, #228]	; (8005c58 <MX_LWIP_Init+0x240>)
 8005b72:	78c9      	ldrb	r1, [r1, #3]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	0e1b      	lsrs	r3, r3, #24
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	4a3a      	ldr	r2, [pc, #232]	; (8005c64 <MX_LWIP_Init+0x24c>)
 8005b7c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005b7e:	4b37      	ldr	r3, [pc, #220]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	061a      	lsls	r2, r3, #24
 8005b84:	4b35      	ldr	r3, [pc, #212]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	041b      	lsls	r3, r3, #16
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	4b33      	ldr	r3, [pc, #204]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005b8e:	789b      	ldrb	r3, [r3, #2]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	4313      	orrs	r3, r2
 8005b94:	4a31      	ldr	r2, [pc, #196]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005b96:	78d2      	ldrb	r2, [r2, #3]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	061a      	lsls	r2, r3, #24
 8005b9c:	4b2f      	ldr	r3, [pc, #188]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	0619      	lsls	r1, r3, #24
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	4319      	orrs	r1, r3
 8005baa:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bac:	789b      	ldrb	r3, [r3, #2]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	492a      	ldr	r1, [pc, #168]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bb4:	78c9      	ldrb	r1, [r1, #3]
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	0619      	lsls	r1, r3, #24
 8005bc6:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	4319      	orrs	r1, r3
 8005bce:	4b23      	ldr	r3, [pc, #140]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bd0:	789b      	ldrb	r3, [r3, #2]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	4921      	ldr	r1, [pc, #132]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bd8:	78c9      	ldrb	r1, [r1, #3]
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005be2:	431a      	orrs	r2, r3
 8005be4:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	0619      	lsls	r1, r3, #24
 8005bea:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	041b      	lsls	r3, r3, #16
 8005bf0:	4319      	orrs	r1, r3
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bf4:	789b      	ldrb	r3, [r3, #2]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	4918      	ldr	r1, [pc, #96]	; (8005c5c <MX_LWIP_Init+0x244>)
 8005bfc:	78c9      	ldrb	r1, [r1, #3]
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	0e1b      	lsrs	r3, r3, #24
 8005c02:	4313      	orrs	r3, r2
 8005c04:	4a18      	ldr	r2, [pc, #96]	; (8005c68 <MX_LWIP_Init+0x250>)
 8005c06:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <MX_LWIP_Init+0x254>)
 8005c0a:	9302      	str	r3, [sp, #8]
 8005c0c:	4b18      	ldr	r3, [pc, #96]	; (8005c70 <MX_LWIP_Init+0x258>)
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <MX_LWIP_Init+0x250>)
 8005c16:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <MX_LWIP_Init+0x24c>)
 8005c18:	4911      	ldr	r1, [pc, #68]	; (8005c60 <MX_LWIP_Init+0x248>)
 8005c1a:	4816      	ldr	r0, [pc, #88]	; (8005c74 <MX_LWIP_Init+0x25c>)
 8005c1c:	f001 f880 	bl	8006d20 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005c20:	4814      	ldr	r0, [pc, #80]	; (8005c74 <MX_LWIP_Init+0x25c>)
 8005c22:	f001 fa2f 	bl	8007084 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <MX_LWIP_Init+0x25c>)
 8005c28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005c38:	480e      	ldr	r0, [pc, #56]	; (8005c74 <MX_LWIP_Init+0x25c>)
 8005c3a:	f001 fa33 	bl	80070a4 <netif_set_up>
 8005c3e:	e002      	b.n	8005c46 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005c40:	480c      	ldr	r0, [pc, #48]	; (8005c74 <MX_LWIP_Init+0x25c>)
 8005c42:	f001 fa9b 	bl	800717c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005c46:	490c      	ldr	r1, [pc, #48]	; (8005c78 <MX_LWIP_Init+0x260>)
 8005c48:	480a      	ldr	r0, [pc, #40]	; (8005c74 <MX_LWIP_Init+0x25c>)
 8005c4a:	f001 fac9 	bl	80071e0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c4e:	bf00      	nop
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	200003b0 	.word	0x200003b0
 8005c58:	200003ac 	.word	0x200003ac
 8005c5c:	20000370 	.word	0x20000370
 8005c60:	200003a8 	.word	0x200003a8
 8005c64:	200003b4 	.word	0x200003b4
 8005c68:	200003b8 	.word	0x200003b8
 8005c6c:	0800fa89 	.word	0x0800fa89
 8005c70:	08006201 	.word	0x08006201
 8005c74:	20000374 	.word	0x20000374
 8005c78:	0800626d 	.word	0x0800626d

08005c7c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08e      	sub	sp, #56	; 0x38
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	609a      	str	r2, [r3, #8]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a44      	ldr	r2, [pc, #272]	; (8005dac <HAL_ETH_MspInit+0x130>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	f040 8081 	bne.w	8005da2 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005ca0:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	4a42      	ldr	r2, [pc, #264]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005caa:	6313      	str	r3, [r2, #48]	; 0x30
 8005cac:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	4b3d      	ldr	r3, [pc, #244]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	4a3c      	ldr	r2, [pc, #240]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc4:	4b3a      	ldr	r3, [pc, #232]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4b37      	ldr	r3, [pc, #220]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	4a36      	ldr	r2, [pc, #216]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cda:	6313      	str	r3, [r2, #48]	; 0x30
 8005cdc:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ce8:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	4a30      	ldr	r2, [pc, #192]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005d06:	f043 0304 	orr.w	r3, r3, #4
 8005d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	4a24      	ldr	r2, [pc, #144]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	6313      	str	r3, [r2, #48]	; 0x30
 8005d24:	4b22      	ldr	r3, [pc, #136]	; (8005db0 <HAL_ETH_MspInit+0x134>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8005d30:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d36:	2302      	movs	r3, #2
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d42:	230b      	movs	r3, #11
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4819      	ldr	r0, [pc, #100]	; (8005db4 <HAL_ETH_MspInit+0x138>)
 8005d4e:	f7fc ffeb 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005d52:	2332      	movs	r3, #50	; 0x32
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d56:	2302      	movs	r3, #2
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d62:	230b      	movs	r3, #11
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4812      	ldr	r0, [pc, #72]	; (8005db8 <HAL_ETH_MspInit+0x13c>)
 8005d6e:	f7fc ffdb 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005d72:	2386      	movs	r3, #134	; 0x86
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d76:	2302      	movs	r3, #2
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d82:	230b      	movs	r3, #11
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	480b      	ldr	r0, [pc, #44]	; (8005dbc <HAL_ETH_MspInit+0x140>)
 8005d8e:	f7fc ffcb 	bl	8002d28 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005d92:	2200      	movs	r2, #0
 8005d94:	2100      	movs	r1, #0
 8005d96:	203d      	movs	r0, #61	; 0x3d
 8005d98:	f7fb fd73 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005d9c:	203d      	movs	r0, #61	; 0x3d
 8005d9e:	f7fb fd8c 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005da2:	bf00      	nop
 8005da4:	3738      	adds	r7, #56	; 0x38
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40028000 	.word	0x40028000
 8005db0:	40023800 	.word	0x40023800
 8005db4:	40021800 	.word	0x40021800
 8005db8:	40020800 	.word	0x40020800
 8005dbc:	40020000 	.word	0x40020000

08005dc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005dcc:	4b4d      	ldr	r3, [pc, #308]	; (8005f04 <low_level_init+0x144>)
 8005dce:	4a4e      	ldr	r2, [pc, #312]	; (8005f08 <low_level_init+0x148>)
 8005dd0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005dd2:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <low_level_init+0x144>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005dd8:	4b4a      	ldr	r3, [pc, #296]	; (8005f04 <low_level_init+0x144>)
 8005dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005dde:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005de0:	4b48      	ldr	r3, [pc, #288]	; (8005f04 <low_level_init+0x144>)
 8005de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005de8:	4b46      	ldr	r3, [pc, #280]	; (8005f04 <low_level_init+0x144>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005dee:	2300      	movs	r3, #0
 8005df0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005df6:	23e1      	movs	r3, #225	; 0xe1
 8005df8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005e02:	2300      	movs	r3, #0
 8005e04:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005e06:	4a3f      	ldr	r2, [pc, #252]	; (8005f04 <low_level_init+0x144>)
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <low_level_init+0x144>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005e14:	4b3b      	ldr	r3, [pc, #236]	; (8005f04 <low_level_init+0x144>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005e1a:	4b3a      	ldr	r3, [pc, #232]	; (8005f04 <low_level_init+0x144>)
 8005e1c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005e20:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e22:	4838      	ldr	r0, [pc, #224]	; (8005f04 <low_level_init+0x144>)
 8005e24:	f7fb fdf6 	bl	8001a14 <HAL_ETH_Init>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d108      	bne.n	8005e44 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e38:	f043 0304 	orr.w	r3, r3, #4
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005e44:	2304      	movs	r3, #4
 8005e46:	4a31      	ldr	r2, [pc, #196]	; (8005f0c <low_level_init+0x14c>)
 8005e48:	4931      	ldr	r1, [pc, #196]	; (8005f10 <low_level_init+0x150>)
 8005e4a:	482e      	ldr	r0, [pc, #184]	; (8005f04 <low_level_init+0x144>)
 8005e4c:	f7fb ff7c 	bl	8001d48 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005e50:	2304      	movs	r3, #4
 8005e52:	4a30      	ldr	r2, [pc, #192]	; (8005f14 <low_level_init+0x154>)
 8005e54:	4930      	ldr	r1, [pc, #192]	; (8005f18 <low_level_init+0x158>)
 8005e56:	482b      	ldr	r0, [pc, #172]	; (8005f04 <low_level_init+0x144>)
 8005e58:	f7fb ffdf 	bl	8001e1a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2206      	movs	r2, #6
 8005e60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005e64:	4b27      	ldr	r3, [pc, #156]	; (8005f04 <low_level_init+0x144>)
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005e70:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <low_level_init+0x144>)
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	785a      	ldrb	r2, [r3, #1]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005e7c:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <low_level_init+0x144>)
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	789a      	ldrb	r2, [r3, #2]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e88:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <low_level_init+0x144>)
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	78da      	ldrb	r2, [r3, #3]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005e94:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <low_level_init+0x144>)
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	791a      	ldrb	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ea0:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <low_level_init+0x144>)
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	795a      	ldrb	r2, [r3, #5]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005eb2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005eba:	f043 030a 	orr.w	r3, r3, #10
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005ec6:	480f      	ldr	r0, [pc, #60]	; (8005f04 <low_level_init+0x144>)
 8005ec8:	f7fc fad5 	bl	8002476 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005ecc:	f107 0310 	add.w	r3, r7, #16
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	211d      	movs	r1, #29
 8005ed4:	480b      	ldr	r0, [pc, #44]	; (8005f04 <low_level_init+0x144>)
 8005ed6:	f7fc fa00 	bl	80022da <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f043 030b 	orr.w	r3, r3, #11
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	211d      	movs	r1, #29
 8005ee8:	4806      	ldr	r0, [pc, #24]	; (8005f04 <low_level_init+0x144>)
 8005eea:	f7fc fa5e 	bl	80023aa <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005eee:	f107 0310 	add.w	r3, r7, #16
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	211d      	movs	r1, #29
 8005ef6:	4803      	ldr	r0, [pc, #12]	; (8005f04 <low_level_init+0x144>)
 8005ef8:	f7fc f9ef 	bl	80022da <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005efc:	bf00      	nop
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20001c8c 	.word	0x20001c8c
 8005f08:	40028000 	.word	0x40028000
 8005f0c:	20001cd4 	.word	0x20001cd4
 8005f10:	200003bc 	.word	0x200003bc
 8005f14:	2000043c 	.word	0x2000043c
 8005f18:	20001c0c 	.word	0x20001c0c

08005f1c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005f26:	4b4b      	ldr	r3, [pc, #300]	; (8006054 <low_level_output+0x138>)
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005f3e:	4b45      	ldr	r3, [pc, #276]	; (8006054 <low_level_output+0x138>)
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	623b      	str	r3, [r7, #32]
 8005f4c:	e05a      	b.n	8006004 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da03      	bge.n	8005f5e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005f56:	23f8      	movs	r3, #248	; 0xf8
 8005f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005f5c:	e05c      	b.n	8006018 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	895b      	ldrh	r3, [r3, #10]
 8005f62:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005f68:	e02f      	b.n	8005fca <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	18d0      	adds	r0, r2, r3
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	18d1      	adds	r1, r2, r3
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	f009 fe89 	bl	800fc98 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da03      	bge.n	8005f9c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005f94:	23f8      	movs	r3, #248	; 0xf8
 8005f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005f9a:	e03d      	b.n	8006018 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005fac:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005fb8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005fc4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d8c8      	bhi.n	8005f6a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	18d0      	adds	r0, r2, r3
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f009 fe55 	bl	800fc98 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	623b      	str	r3, [r7, #32]
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1a1      	bne.n	8005f4e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	4811      	ldr	r0, [pc, #68]	; (8006054 <low_level_output+0x138>)
 800600e:	f7fb ff71 	bl	8001ef4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006018:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <low_level_output+0x138>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f241 0314 	movw	r3, #4116	; 0x1014
 8006020:	4413      	add	r3, r2
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <low_level_output+0x138>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	f241 0314 	movw	r3, #4116	; 0x1014
 8006034:	4413      	add	r3, r2
 8006036:	2220      	movs	r2, #32
 8006038:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <low_level_output+0x138>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	f241 0304 	movw	r3, #4100	; 0x1004
 8006042:	4413      	add	r3, r2
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006048:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800604c:	4618      	mov	r0, r3
 800604e:	3728      	adds	r7, #40	; 0x28
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20001c8c 	.word	0x20001c8c

08006058 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	; 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006064:	2300      	movs	r3, #0
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800607c:	484f      	ldr	r0, [pc, #316]	; (80061bc <low_level_input+0x164>)
 800607e:	f7fc f823 	bl	80020c8 <HAL_ETH_GetReceivedFrame>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <low_level_input+0x34>

    return NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	e092      	b.n	80061b2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800608c:	4b4b      	ldr	r3, [pc, #300]	; (80061bc <low_level_input+0x164>)
 800608e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006090:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006092:	4b4a      	ldr	r3, [pc, #296]	; (80061bc <low_level_input+0x164>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80060a4:	4619      	mov	r1, r3
 80060a6:	2000      	movs	r0, #0
 80060a8:	f001 f936 	bl	8007318 <pbuf_alloc>
 80060ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d04b      	beq.n	800614c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80060b4:	4b41      	ldr	r3, [pc, #260]	; (80061bc <low_level_input+0x164>)
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c2:	e040      	b.n	8006146 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	895b      	ldrh	r3, [r3, #10]
 80060c8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80060ce:	e021      	b.n	8006114 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	18d0      	adds	r0, r2, r3
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	18d1      	adds	r1, r2, r3
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	461a      	mov	r2, r3
 80060e8:	f009 fdd6 	bl	800fc98 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4413      	add	r3, r2
 80060fe:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006102:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800610e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800611e:	4293      	cmp	r3, r2
 8006120:	d8d6      	bhi.n	80060d0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	18d0      	adds	r0, r2, r3
 800612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4619      	mov	r1, r3
 8006134:	f009 fdb0 	bl	800fc98 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1bb      	bne.n	80060c4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <low_level_input+0x164>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	e00b      	b.n	8006170 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3301      	adds	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <low_level_input+0x164>)
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3ee      	bcc.n	8006158 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <low_level_input+0x164>)
 800617c:	2200      	movs	r2, #0
 800617e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <low_level_input+0x164>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f241 0314 	movw	r3, #4116	; 0x1014
 8006188:	4413      	add	r3, r2
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006194:	4b09      	ldr	r3, [pc, #36]	; (80061bc <low_level_input+0x164>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	f241 0314 	movw	r3, #4116	; 0x1014
 800619c:	4413      	add	r3, r2
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <low_level_input+0x164>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	f241 0308 	movw	r3, #4104	; 0x1008
 80061aa:	4413      	add	r3, r2
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
  }
  return p;
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3730      	adds	r7, #48	; 0x30
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20001c8c 	.word	0x20001c8c

080061c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff ff45 	bl	8006058 <low_level_input>
 80061ce:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d010      	beq.n	80061f8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	4798      	blx	r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80061e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d006      	beq.n	80061fa <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f001 fb77 	bl	80078e0 <pbuf_free>
    p = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e000      	b.n	80061fa <ethernetif_input+0x3a>
  if (p == NULL) return;
 80061f8:	bf00      	nop
  }
}
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <ethernetif_init+0x1c>
 800620e:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <ethernetif_init+0x48>)
 8006210:	f240 220e 	movw	r2, #526	; 0x20e
 8006214:	490d      	ldr	r1, [pc, #52]	; (800624c <ethernetif_init+0x4c>)
 8006216:	480e      	ldr	r0, [pc, #56]	; (8006250 <ethernetif_init+0x50>)
 8006218:	f009 fd54 	bl	800fcc4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2273      	movs	r2, #115	; 0x73
 8006220:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2274      	movs	r2, #116	; 0x74
 8006228:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <ethernetif_init+0x54>)
 8006230:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a08      	ldr	r2, [pc, #32]	; (8006258 <ethernetif_init+0x58>)
 8006236:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fdc1 	bl	8005dc0 <low_level_init>

  return ERR_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	08010d10 	.word	0x08010d10
 800624c:	08010d2c 	.word	0x08010d2c
 8006250:	08010d3c 	.word	0x08010d3c
 8006254:	0800df4d 	.word	0x0800df4d
 8006258:	08005f1d 	.word	0x08005f1d

0800625c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006260:	f7fb fa04 	bl	800166c <HAL_GetTick>
 8006264:	4603      	mov	r3, r0
}
 8006266:	4618      	mov	r0, r3
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d05d      	beq.n	800634a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <ethernetif_update_config+0xf4>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d03f      	beq.n	8006316 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800629a:	2100      	movs	r1, #0
 800629c:	4830      	ldr	r0, [pc, #192]	; (8006360 <ethernetif_update_config+0xf4>)
 800629e:	f7fc f884 	bl	80023aa <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80062a2:	f7fb f9e3 	bl	800166c <HAL_GetTick>
 80062a6:	4603      	mov	r3, r0
 80062a8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80062aa:	f107 0308 	add.w	r3, r7, #8
 80062ae:	461a      	mov	r2, r3
 80062b0:	2101      	movs	r1, #1
 80062b2:	482b      	ldr	r0, [pc, #172]	; (8006360 <ethernetif_update_config+0xf4>)
 80062b4:	f7fc f811 	bl	80022da <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80062b8:	f7fb f9d8 	bl	800166c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c6:	d828      	bhi.n	800631a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0eb      	beq.n	80062aa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	461a      	mov	r2, r3
 80062d8:	2110      	movs	r1, #16
 80062da:	4821      	ldr	r0, [pc, #132]	; (8006360 <ethernetif_update_config+0xf4>)
 80062dc:	f7fb fffd 	bl	80022da <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80062ea:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <ethernetif_update_config+0xf4>)
 80062ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062f0:	60da      	str	r2, [r3, #12]
 80062f2:	e002      	b.n	80062fa <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <ethernetif_update_config+0xf4>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006304:	4b16      	ldr	r3, [pc, #88]	; (8006360 <ethernetif_update_config+0xf4>)
 8006306:	2200      	movs	r2, #0
 8006308:	609a      	str	r2, [r3, #8]
 800630a:	e016      	b.n	800633a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800630c:	4b14      	ldr	r3, [pc, #80]	; (8006360 <ethernetif_update_config+0xf4>)
 800630e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	e011      	b.n	800633a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006316:	bf00      	nop
 8006318:	e000      	b.n	800631c <ethernetif_update_config+0xb0>
          goto error;
 800631a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <ethernetif_update_config+0xf4>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	08db      	lsrs	r3, r3, #3
 8006322:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <ethernetif_update_config+0xf4>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800632c:	4313      	orrs	r3, r2
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	2100      	movs	r1, #0
 8006334:	480a      	ldr	r0, [pc, #40]	; (8006360 <ethernetif_update_config+0xf4>)
 8006336:	f7fc f838 	bl	80023aa <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800633a:	2100      	movs	r1, #0
 800633c:	4808      	ldr	r0, [pc, #32]	; (8006360 <ethernetif_update_config+0xf4>)
 800633e:	f7fc f8f9 	bl	8002534 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006342:	4807      	ldr	r0, [pc, #28]	; (8006360 <ethernetif_update_config+0xf4>)
 8006344:	f7fc f897 	bl	8002476 <HAL_ETH_Start>
 8006348:	e002      	b.n	8006350 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800634a:	4805      	ldr	r0, [pc, #20]	; (8006360 <ethernetif_update_config+0xf4>)
 800634c:	f7fc f8c2 	bl	80024d4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f807 	bl	8006364 <ethernetif_notify_conn_changed>
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20001c8c 	.word	0x20001c8c

08006364 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	b21a      	sxth	r2, r3
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	b29b      	uxth	r3, r3
 800638e:	b21b      	sxth	r3, r3
 8006390:	4313      	orrs	r3, r2
 8006392:	b21b      	sxth	r3, r3
 8006394:	b29b      	uxth	r3, r3
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	061a      	lsls	r2, r3, #24
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	0e1b      	lsrs	r3, r3, #24
 80063c6:	4313      	orrs	r3, r2
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80063de:	f000 f8d5 	bl	800658c <mem_init>
  memp_init();
 80063e2:	f000 fbdb 	bl	8006b9c <memp_init>
  pbuf_init();
  netif_init();
 80063e6:	f000 fc93 	bl	8006d10 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80063ea:	f006 ffa9 	bl	800d340 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80063ee:	f001 fd05 	bl	8007dfc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80063f2:	f006 ff1b 	bl	800d22c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <ptr_to_mem+0x20>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	4413      	add	r3, r2
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	200000a0 	.word	0x200000a0

08006424 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <mem_to_ptr+0x20>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	b29b      	uxth	r3, r3
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	200000a0 	.word	0x200000a0

08006448 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006450:	4b45      	ldr	r3, [pc, #276]	; (8006568 <plug_holes+0x120>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d206      	bcs.n	8006468 <plug_holes+0x20>
 800645a:	4b44      	ldr	r3, [pc, #272]	; (800656c <plug_holes+0x124>)
 800645c:	f240 12df 	movw	r2, #479	; 0x1df
 8006460:	4943      	ldr	r1, [pc, #268]	; (8006570 <plug_holes+0x128>)
 8006462:	4844      	ldr	r0, [pc, #272]	; (8006574 <plug_holes+0x12c>)
 8006464:	f009 fc2e 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006468:	4b43      	ldr	r3, [pc, #268]	; (8006578 <plug_holes+0x130>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	429a      	cmp	r2, r3
 8006470:	d306      	bcc.n	8006480 <plug_holes+0x38>
 8006472:	4b3e      	ldr	r3, [pc, #248]	; (800656c <plug_holes+0x124>)
 8006474:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006478:	4940      	ldr	r1, [pc, #256]	; (800657c <plug_holes+0x134>)
 800647a:	483e      	ldr	r0, [pc, #248]	; (8006574 <plug_holes+0x12c>)
 800647c:	f009 fc22 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	791b      	ldrb	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d006      	beq.n	8006496 <plug_holes+0x4e>
 8006488:	4b38      	ldr	r3, [pc, #224]	; (800656c <plug_holes+0x124>)
 800648a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800648e:	493c      	ldr	r1, [pc, #240]	; (8006580 <plug_holes+0x138>)
 8006490:	4838      	ldr	r0, [pc, #224]	; (8006574 <plug_holes+0x12c>)
 8006492:	f009 fc17 	bl	800fcc4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800649e:	d906      	bls.n	80064ae <plug_holes+0x66>
 80064a0:	4b32      	ldr	r3, [pc, #200]	; (800656c <plug_holes+0x124>)
 80064a2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80064a6:	4937      	ldr	r1, [pc, #220]	; (8006584 <plug_holes+0x13c>)
 80064a8:	4832      	ldr	r0, [pc, #200]	; (8006574 <plug_holes+0x12c>)
 80064aa:	f009 fc0b 	bl	800fcc4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff ffa4 	bl	8006400 <ptr_to_mem>
 80064b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d024      	beq.n	800650c <plug_holes+0xc4>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d120      	bne.n	800650c <plug_holes+0xc4>
 80064ca:	4b2b      	ldr	r3, [pc, #172]	; (8006578 <plug_holes+0x130>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d01b      	beq.n	800650c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80064d4:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <plug_holes+0x140>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d102      	bne.n	80064e4 <plug_holes+0x9c>
      lfree = mem;
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <plug_holes+0x140>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	881a      	ldrh	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80064f4:	d00a      	beq.n	800650c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ff80 	bl	8006400 <ptr_to_mem>
 8006500:	4604      	mov	r4, r0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff ff8e 	bl	8006424 <mem_to_ptr>
 8006508:	4603      	mov	r3, r0
 800650a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	885b      	ldrh	r3, [r3, #2]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff75 	bl	8006400 <ptr_to_mem>
 8006516:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d01f      	beq.n	8006560 <plug_holes+0x118>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	791b      	ldrb	r3, [r3, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11b      	bne.n	8006560 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006528:	4b17      	ldr	r3, [pc, #92]	; (8006588 <plug_holes+0x140>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	429a      	cmp	r2, r3
 8006530:	d102      	bne.n	8006538 <plug_holes+0xf0>
      lfree = pmem;
 8006532:	4a15      	ldr	r2, [pc, #84]	; (8006588 <plug_holes+0x140>)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006548:	d00a      	beq.n	8006560 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff ff56 	bl	8006400 <ptr_to_mem>
 8006554:	4604      	mov	r4, r0
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f7ff ff64 	bl	8006424 <mem_to_ptr>
 800655c:	4603      	mov	r3, r0
 800655e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	bd90      	pop	{r4, r7, pc}
 8006568:	200000a0 	.word	0x200000a0
 800656c:	08010d64 	.word	0x08010d64
 8006570:	08010d94 	.word	0x08010d94
 8006574:	08010dac 	.word	0x08010dac
 8006578:	200000a4 	.word	0x200000a4
 800657c:	08010dd4 	.word	0x08010dd4
 8006580:	08010df0 	.word	0x08010df0
 8006584:	08010e0c 	.word	0x08010e0c
 8006588:	200000a8 	.word	0x200000a8

0800658c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <mem_init+0x68>)
 8006594:	3303      	adds	r3, #3
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	461a      	mov	r2, r3
 800659c:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <mem_init+0x6c>)
 800659e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80065a0:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <mem_init+0x6c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80065ac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80065ba:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80065be:	f7ff ff1f 	bl	8006400 <ptr_to_mem>
 80065c2:	4603      	mov	r3, r0
 80065c4:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <mem_init+0x70>)
 80065c6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <mem_init+0x70>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2201      	movs	r2, #1
 80065ce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <mem_init+0x70>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80065d8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80065da:	4b08      	ldr	r3, [pc, #32]	; (80065fc <mem_init+0x70>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80065e2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80065e4:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <mem_init+0x6c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a05      	ldr	r2, [pc, #20]	; (8006600 <mem_init+0x74>)
 80065ea:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	200034bc 	.word	0x200034bc
 80065f8:	200000a0 	.word	0x200000a0
 80065fc:	200000a4 	.word	0x200000a4
 8006600:	200000a8 	.word	0x200000a8

08006604 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff ff09 	bl	8006424 <mem_to_ptr>
 8006612:	4603      	mov	r3, r0
 8006614:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fef0 	bl	8006400 <ptr_to_mem>
 8006620:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	885b      	ldrh	r3, [r3, #2]
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff feea 	bl	8006400 <ptr_to_mem>
 800662c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006636:	d818      	bhi.n	800666a <mem_link_valid+0x66>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	885b      	ldrh	r3, [r3, #2]
 800663c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006640:	d813      	bhi.n	800666a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006646:	8afa      	ldrh	r2, [r7, #22]
 8006648:	429a      	cmp	r2, r3
 800664a:	d004      	beq.n	8006656 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	8afa      	ldrh	r2, [r7, #22]
 8006652:	429a      	cmp	r2, r3
 8006654:	d109      	bne.n	800666a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <mem_link_valid+0x74>)
 8006658:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	429a      	cmp	r2, r3
 800665e:	d006      	beq.n	800666e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	885b      	ldrh	r3, [r3, #2]
 8006664:	8afa      	ldrh	r2, [r7, #22]
 8006666:	429a      	cmp	r2, r3
 8006668:	d001      	beq.n	800666e <mem_link_valid+0x6a>
    return 0;
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <mem_link_valid+0x6c>
  }
  return 1;
 800666e:	2301      	movs	r3, #1
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200000a4 	.word	0x200000a4

0800667c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d04c      	beq.n	8006724 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006694:	4b25      	ldr	r3, [pc, #148]	; (800672c <mem_free+0xb0>)
 8006696:	f240 2273 	movw	r2, #627	; 0x273
 800669a:	4925      	ldr	r1, [pc, #148]	; (8006730 <mem_free+0xb4>)
 800669c:	4825      	ldr	r0, [pc, #148]	; (8006734 <mem_free+0xb8>)
 800669e:	f009 fb11 	bl	800fcc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066a2:	e040      	b.n	8006726 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3b08      	subs	r3, #8
 80066a8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80066aa:	4b23      	ldr	r3, [pc, #140]	; (8006738 <mem_free+0xbc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d306      	bcc.n	80066c2 <mem_free+0x46>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f103 020c 	add.w	r2, r3, #12
 80066ba:	4b20      	ldr	r3, [pc, #128]	; (800673c <mem_free+0xc0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d907      	bls.n	80066d2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80066c2:	4b1a      	ldr	r3, [pc, #104]	; (800672c <mem_free+0xb0>)
 80066c4:	f240 227f 	movw	r2, #639	; 0x27f
 80066c8:	491d      	ldr	r1, [pc, #116]	; (8006740 <mem_free+0xc4>)
 80066ca:	481a      	ldr	r0, [pc, #104]	; (8006734 <mem_free+0xb8>)
 80066cc:	f009 fafa 	bl	800fcc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066d0:	e029      	b.n	8006726 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	791b      	ldrb	r3, [r3, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d107      	bne.n	80066ea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80066da:	4b14      	ldr	r3, [pc, #80]	; (800672c <mem_free+0xb0>)
 80066dc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80066e0:	4918      	ldr	r1, [pc, #96]	; (8006744 <mem_free+0xc8>)
 80066e2:	4814      	ldr	r0, [pc, #80]	; (8006734 <mem_free+0xb8>)
 80066e4:	f009 faee 	bl	800fcc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066e8:	e01d      	b.n	8006726 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff ff8a 	bl	8006604 <mem_link_valid>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <mem_free+0xb0>)
 80066f8:	f240 2295 	movw	r2, #661	; 0x295
 80066fc:	4912      	ldr	r1, [pc, #72]	; (8006748 <mem_free+0xcc>)
 80066fe:	480d      	ldr	r0, [pc, #52]	; (8006734 <mem_free+0xb8>)
 8006700:	f009 fae0 	bl	800fcc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006704:	e00f      	b.n	8006726 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <mem_free+0xd0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	429a      	cmp	r2, r3
 8006714:	d202      	bcs.n	800671c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006716:	4a0d      	ldr	r2, [pc, #52]	; (800674c <mem_free+0xd0>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff fe93 	bl	8006448 <plug_holes>
 8006722:	e000      	b.n	8006726 <mem_free+0xaa>
    return;
 8006724:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	08010d64 	.word	0x08010d64
 8006730:	08010e38 	.word	0x08010e38
 8006734:	08010dac 	.word	0x08010dac
 8006738:	200000a0 	.word	0x200000a0
 800673c:	200000a4 	.word	0x200000a4
 8006740:	08010e5c 	.word	0x08010e5c
 8006744:	08010e78 	.word	0x08010e78
 8006748:	08010ea0 	.word	0x08010ea0
 800674c:	200000a8 	.word	0x200000a8

08006750 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800675c:	887b      	ldrh	r3, [r7, #2]
 800675e:	3303      	adds	r3, #3
 8006760:	b29b      	uxth	r3, r3
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006768:	8bfb      	ldrh	r3, [r7, #30]
 800676a:	2b0b      	cmp	r3, #11
 800676c:	d801      	bhi.n	8006772 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800676e:	230c      	movs	r3, #12
 8006770:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006772:	8bfb      	ldrh	r3, [r7, #30]
 8006774:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006778:	d803      	bhi.n	8006782 <mem_trim+0x32>
 800677a:	8bfa      	ldrh	r2, [r7, #30]
 800677c:	887b      	ldrh	r3, [r7, #2]
 800677e:	429a      	cmp	r2, r3
 8006780:	d201      	bcs.n	8006786 <mem_trim+0x36>
    return NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	e0cc      	b.n	8006920 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006786:	4b68      	ldr	r3, [pc, #416]	; (8006928 <mem_trim+0x1d8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d304      	bcc.n	800679a <mem_trim+0x4a>
 8006790:	4b66      	ldr	r3, [pc, #408]	; (800692c <mem_trim+0x1dc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	429a      	cmp	r2, r3
 8006798:	d306      	bcc.n	80067a8 <mem_trim+0x58>
 800679a:	4b65      	ldr	r3, [pc, #404]	; (8006930 <mem_trim+0x1e0>)
 800679c:	f240 22d1 	movw	r2, #721	; 0x2d1
 80067a0:	4964      	ldr	r1, [pc, #400]	; (8006934 <mem_trim+0x1e4>)
 80067a2:	4865      	ldr	r0, [pc, #404]	; (8006938 <mem_trim+0x1e8>)
 80067a4:	f009 fa8e 	bl	800fcc4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80067a8:	4b5f      	ldr	r3, [pc, #380]	; (8006928 <mem_trim+0x1d8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d304      	bcc.n	80067bc <mem_trim+0x6c>
 80067b2:	4b5e      	ldr	r3, [pc, #376]	; (800692c <mem_trim+0x1dc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d301      	bcc.n	80067c0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	e0af      	b.n	8006920 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3b08      	subs	r3, #8
 80067c4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80067c6:	69b8      	ldr	r0, [r7, #24]
 80067c8:	f7ff fe2c 	bl	8006424 <mem_to_ptr>
 80067cc:	4603      	mov	r3, r0
 80067ce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	881a      	ldrh	r2, [r3, #0]
 80067d4:	8afb      	ldrh	r3, [r7, #22]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b08      	subs	r3, #8
 80067dc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80067de:	8bfa      	ldrh	r2, [r7, #30]
 80067e0:	8abb      	ldrh	r3, [r7, #20]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d906      	bls.n	80067f4 <mem_trim+0xa4>
 80067e6:	4b52      	ldr	r3, [pc, #328]	; (8006930 <mem_trim+0x1e0>)
 80067e8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80067ec:	4953      	ldr	r1, [pc, #332]	; (800693c <mem_trim+0x1ec>)
 80067ee:	4852      	ldr	r0, [pc, #328]	; (8006938 <mem_trim+0x1e8>)
 80067f0:	f009 fa68 	bl	800fcc4 <iprintf>
  if (newsize > size) {
 80067f4:	8bfa      	ldrh	r2, [r7, #30]
 80067f6:	8abb      	ldrh	r3, [r7, #20]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d901      	bls.n	8006800 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e08f      	b.n	8006920 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006800:	8bfa      	ldrh	r2, [r7, #30]
 8006802:	8abb      	ldrh	r3, [r7, #20]
 8006804:	429a      	cmp	r2, r3
 8006806:	d101      	bne.n	800680c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	e089      	b.n	8006920 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fdf5 	bl	8006400 <ptr_to_mem>
 8006816:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	791b      	ldrb	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d13f      	bne.n	80068a0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006828:	d106      	bne.n	8006838 <mem_trim+0xe8>
 800682a:	4b41      	ldr	r3, [pc, #260]	; (8006930 <mem_trim+0x1e0>)
 800682c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006830:	4943      	ldr	r1, [pc, #268]	; (8006940 <mem_trim+0x1f0>)
 8006832:	4841      	ldr	r0, [pc, #260]	; (8006938 <mem_trim+0x1e8>)
 8006834:	f009 fa46 	bl	800fcc4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800683e:	8afa      	ldrh	r2, [r7, #22]
 8006840:	8bfb      	ldrh	r3, [r7, #30]
 8006842:	4413      	add	r3, r2
 8006844:	b29b      	uxth	r3, r3
 8006846:	3308      	adds	r3, #8
 8006848:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800684a:	4b3e      	ldr	r3, [pc, #248]	; (8006944 <mem_trim+0x1f4>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d106      	bne.n	8006862 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006854:	89fb      	ldrh	r3, [r7, #14]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fdd2 	bl	8006400 <ptr_to_mem>
 800685c:	4603      	mov	r3, r0
 800685e:	4a39      	ldr	r2, [pc, #228]	; (8006944 <mem_trim+0x1f4>)
 8006860:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006862:	89fb      	ldrh	r3, [r7, #14]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fdcb 	bl	8006400 <ptr_to_mem>
 800686a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2200      	movs	r2, #0
 8006870:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	89ba      	ldrh	r2, [r7, #12]
 8006876:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	8afa      	ldrh	r2, [r7, #22]
 800687c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	89fa      	ldrh	r2, [r7, #14]
 8006882:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800688c:	d047      	beq.n	800691e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fdb4 	bl	8006400 <ptr_to_mem>
 8006898:	4602      	mov	r2, r0
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	8053      	strh	r3, [r2, #2]
 800689e:	e03e      	b.n	800691e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80068a0:	8bfb      	ldrh	r3, [r7, #30]
 80068a2:	f103 0214 	add.w	r2, r3, #20
 80068a6:	8abb      	ldrh	r3, [r7, #20]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d838      	bhi.n	800691e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80068ac:	8afa      	ldrh	r2, [r7, #22]
 80068ae:	8bfb      	ldrh	r3, [r7, #30]
 80068b0:	4413      	add	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3308      	adds	r3, #8
 80068b6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80068c0:	d106      	bne.n	80068d0 <mem_trim+0x180>
 80068c2:	4b1b      	ldr	r3, [pc, #108]	; (8006930 <mem_trim+0x1e0>)
 80068c4:	f240 3216 	movw	r2, #790	; 0x316
 80068c8:	491d      	ldr	r1, [pc, #116]	; (8006940 <mem_trim+0x1f0>)
 80068ca:	481b      	ldr	r0, [pc, #108]	; (8006938 <mem_trim+0x1e8>)
 80068cc:	f009 f9fa 	bl	800fcc4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80068d0:	89fb      	ldrh	r3, [r7, #14]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fd94 	bl	8006400 <ptr_to_mem>
 80068d8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80068da:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <mem_trim+0x1f4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d202      	bcs.n	80068ea <mem_trim+0x19a>
      lfree = mem2;
 80068e4:	4a17      	ldr	r2, [pc, #92]	; (8006944 <mem_trim+0x1f4>)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2200      	movs	r2, #0
 80068ee:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	881a      	ldrh	r2, [r3, #0]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	8afa      	ldrh	r2, [r7, #22]
 80068fc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	89fa      	ldrh	r2, [r7, #14]
 8006902:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800690c:	d007      	beq.n	800691e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff fd74 	bl	8006400 <ptr_to_mem>
 8006918:	4602      	mov	r2, r0
 800691a:	89fb      	ldrh	r3, [r7, #14]
 800691c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800691e:	687b      	ldr	r3, [r7, #4]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	200000a0 	.word	0x200000a0
 800692c:	200000a4 	.word	0x200000a4
 8006930:	08010d64 	.word	0x08010d64
 8006934:	08010ed4 	.word	0x08010ed4
 8006938:	08010dac 	.word	0x08010dac
 800693c:	08010eec 	.word	0x08010eec
 8006940:	08010f0c 	.word	0x08010f0c
 8006944:	200000a8 	.word	0x200000a8

08006948 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <mem_malloc+0x14>
    return NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	e0d9      	b.n	8006b10 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	3303      	adds	r3, #3
 8006960:	b29b      	uxth	r3, r3
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006968:	8bbb      	ldrh	r3, [r7, #28]
 800696a:	2b0b      	cmp	r3, #11
 800696c:	d801      	bhi.n	8006972 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800696e:	230c      	movs	r3, #12
 8006970:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006972:	8bbb      	ldrh	r3, [r7, #28]
 8006974:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006978:	d803      	bhi.n	8006982 <mem_malloc+0x3a>
 800697a:	8bba      	ldrh	r2, [r7, #28]
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	429a      	cmp	r2, r3
 8006980:	d201      	bcs.n	8006986 <mem_malloc+0x3e>
    return NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	e0c4      	b.n	8006b10 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006986:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <mem_malloc+0x1d0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fd4a 	bl	8006424 <mem_to_ptr>
 8006990:	4603      	mov	r3, r0
 8006992:	83fb      	strh	r3, [r7, #30]
 8006994:	e0b4      	b.n	8006b00 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006996:	8bfb      	ldrh	r3, [r7, #30]
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fd31 	bl	8006400 <ptr_to_mem>
 800699e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	791b      	ldrb	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 80a4 	bne.w	8006af2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	8bfb      	ldrh	r3, [r7, #30]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f1a3 0208 	sub.w	r2, r3, #8
 80069b8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80069ba:	429a      	cmp	r2, r3
 80069bc:	f0c0 8099 	bcc.w	8006af2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	8bfb      	ldrh	r3, [r7, #30]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f1a3 0208 	sub.w	r2, r3, #8
 80069ce:	8bbb      	ldrh	r3, [r7, #28]
 80069d0:	3314      	adds	r3, #20
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d333      	bcc.n	8006a3e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80069d6:	8bfa      	ldrh	r2, [r7, #30]
 80069d8:	8bbb      	ldrh	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3308      	adds	r3, #8
 80069e0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80069e2:	8a7b      	ldrh	r3, [r7, #18]
 80069e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80069e8:	d106      	bne.n	80069f8 <mem_malloc+0xb0>
 80069ea:	4b4c      	ldr	r3, [pc, #304]	; (8006b1c <mem_malloc+0x1d4>)
 80069ec:	f240 3287 	movw	r2, #903	; 0x387
 80069f0:	494b      	ldr	r1, [pc, #300]	; (8006b20 <mem_malloc+0x1d8>)
 80069f2:	484c      	ldr	r0, [pc, #304]	; (8006b24 <mem_malloc+0x1dc>)
 80069f4:	f009 f966 	bl	800fcc4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80069f8:	8a7b      	ldrh	r3, [r7, #18]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fd00 	bl	8006400 <ptr_to_mem>
 8006a00:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8bfa      	ldrh	r2, [r7, #30]
 8006a14:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	8a7a      	ldrh	r2, [r7, #18]
 8006a1a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a2a:	d00b      	beq.n	8006a44 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fce5 	bl	8006400 <ptr_to_mem>
 8006a36:	4602      	mov	r2, r0
 8006a38:	8a7b      	ldrh	r3, [r7, #18]
 8006a3a:	8053      	strh	r3, [r2, #2]
 8006a3c:	e002      	b.n	8006a44 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2201      	movs	r2, #1
 8006a42:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006a44:	4b34      	ldr	r3, [pc, #208]	; (8006b18 <mem_malloc+0x1d0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d127      	bne.n	8006a9e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006a4e:	4b32      	ldr	r3, [pc, #200]	; (8006b18 <mem_malloc+0x1d0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006a54:	e005      	b.n	8006a62 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff fcd0 	bl	8006400 <ptr_to_mem>
 8006a60:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	791b      	ldrb	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <mem_malloc+0x12c>
 8006a6a:	4b2f      	ldr	r3, [pc, #188]	; (8006b28 <mem_malloc+0x1e0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d1f0      	bne.n	8006a56 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006a74:	4a28      	ldr	r2, [pc, #160]	; (8006b18 <mem_malloc+0x1d0>)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006a7a:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <mem_malloc+0x1d0>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b2a      	ldr	r3, [pc, #168]	; (8006b28 <mem_malloc+0x1e0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d00b      	beq.n	8006a9e <mem_malloc+0x156>
 8006a86:	4b24      	ldr	r3, [pc, #144]	; (8006b18 <mem_malloc+0x1d0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	791b      	ldrb	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d006      	beq.n	8006a9e <mem_malloc+0x156>
 8006a90:	4b22      	ldr	r3, [pc, #136]	; (8006b1c <mem_malloc+0x1d4>)
 8006a92:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006a96:	4925      	ldr	r1, [pc, #148]	; (8006b2c <mem_malloc+0x1e4>)
 8006a98:	4822      	ldr	r0, [pc, #136]	; (8006b24 <mem_malloc+0x1dc>)
 8006a9a:	f009 f913 	bl	800fcc4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006a9e:	8bba      	ldrh	r2, [r7, #28]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <mem_malloc+0x1e0>)
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d906      	bls.n	8006abc <mem_malloc+0x174>
 8006aae:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <mem_malloc+0x1d4>)
 8006ab0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006ab4:	491e      	ldr	r1, [pc, #120]	; (8006b30 <mem_malloc+0x1e8>)
 8006ab6:	481b      	ldr	r0, [pc, #108]	; (8006b24 <mem_malloc+0x1dc>)
 8006ab8:	f009 f904 	bl	800fcc4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d006      	beq.n	8006ad4 <mem_malloc+0x18c>
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <mem_malloc+0x1d4>)
 8006ac8:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006acc:	4919      	ldr	r1, [pc, #100]	; (8006b34 <mem_malloc+0x1ec>)
 8006ace:	4815      	ldr	r0, [pc, #84]	; (8006b24 <mem_malloc+0x1dc>)
 8006ad0:	f009 f8f8 	bl	800fcc4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d006      	beq.n	8006aec <mem_malloc+0x1a4>
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <mem_malloc+0x1d4>)
 8006ae0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006ae4:	4914      	ldr	r1, [pc, #80]	; (8006b38 <mem_malloc+0x1f0>)
 8006ae6:	480f      	ldr	r0, [pc, #60]	; (8006b24 <mem_malloc+0x1dc>)
 8006ae8:	f009 f8ec 	bl	800fcc4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3308      	adds	r3, #8
 8006af0:	e00e      	b.n	8006b10 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006af2:	8bfb      	ldrh	r3, [r7, #30]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fc83 	bl	8006400 <ptr_to_mem>
 8006afa:	4603      	mov	r3, r0
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b00:	8bfa      	ldrh	r2, [r7, #30]
 8006b02:	8bbb      	ldrh	r3, [r7, #28]
 8006b04:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	f4ff af44 	bcc.w	8006996 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200000a8 	.word	0x200000a8
 8006b1c:	08010d64 	.word	0x08010d64
 8006b20:	08010f0c 	.word	0x08010f0c
 8006b24:	08010dac 	.word	0x08010dac
 8006b28:	200000a4 	.word	0x200000a4
 8006b2c:	08010f20 	.word	0x08010f20
 8006b30:	08010f3c 	.word	0x08010f3c
 8006b34:	08010f6c 	.word	0x08010f6c
 8006b38:	08010f9c 	.word	0x08010f9c

08006b3c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	3303      	adds	r3, #3
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e011      	b.n	8006b82 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	461a      	mov	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	dbe7      	blt.n	8006b5e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	80fb      	strh	r3, [r7, #6]
 8006ba6:	e009      	b.n	8006bbc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006ba8:	88fb      	ldrh	r3, [r7, #6]
 8006baa:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <memp_init+0x30>)
 8006bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ffc3 	bl	8006b3c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	80fb      	strh	r3, [r7, #6]
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d9f2      	bls.n	8006ba8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	08013774 	.word	0x08013774

08006bd0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d012      	beq.n	8006c0c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d006      	beq.n	8006c08 <do_memp_malloc_pool+0x38>
 8006bfa:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <do_memp_malloc_pool+0x48>)
 8006bfc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006c00:	4906      	ldr	r1, [pc, #24]	; (8006c1c <do_memp_malloc_pool+0x4c>)
 8006c02:	4807      	ldr	r0, [pc, #28]	; (8006c20 <do_memp_malloc_pool+0x50>)
 8006c04:	f009 f85e 	bl	800fcc4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e000      	b.n	8006c0e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	08010fc0 	.word	0x08010fc0
 8006c1c:	08010ff0 	.word	0x08010ff0
 8006c20:	08011014 	.word	0x08011014

08006c24 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d908      	bls.n	8006c46 <memp_malloc+0x22>
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <memp_malloc+0x3c>)
 8006c36:	f240 1257 	movw	r2, #343	; 0x157
 8006c3a:	490a      	ldr	r1, [pc, #40]	; (8006c64 <memp_malloc+0x40>)
 8006c3c:	480a      	ldr	r0, [pc, #40]	; (8006c68 <memp_malloc+0x44>)
 8006c3e:	f009 f841 	bl	800fcc4 <iprintf>
 8006c42:	2300      	movs	r3, #0
 8006c44:	e008      	b.n	8006c58 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	4a08      	ldr	r2, [pc, #32]	; (8006c6c <memp_malloc+0x48>)
 8006c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff ffbe 	bl	8006bd0 <do_memp_malloc_pool>
 8006c54:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006c56:	68fb      	ldr	r3, [r7, #12]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	08010fc0 	.word	0x08010fc0
 8006c64:	08011050 	.word	0x08011050
 8006c68:	08011014 	.word	0x08011014
 8006c6c:	08013774 	.word	0x08013774

08006c70 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d006      	beq.n	8006c92 <do_memp_free_pool+0x22>
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <do_memp_free_pool+0x40>)
 8006c86:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006c8a:	490a      	ldr	r1, [pc, #40]	; (8006cb4 <do_memp_free_pool+0x44>)
 8006c8c:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <do_memp_free_pool+0x48>)
 8006c8e:	f009 f819 	bl	800fcc4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	08010fc0 	.word	0x08010fc0
 8006cb4:	08011070 	.word	0x08011070
 8006cb8:	08011014 	.word	0x08011014

08006cbc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6039      	str	r1, [r7, #0]
 8006cc6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d907      	bls.n	8006cde <memp_free+0x22>
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <memp_free+0x44>)
 8006cd0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006cd4:	490b      	ldr	r1, [pc, #44]	; (8006d04 <memp_free+0x48>)
 8006cd6:	480c      	ldr	r0, [pc, #48]	; (8006d08 <memp_free+0x4c>)
 8006cd8:	f008 fff4 	bl	800fcc4 <iprintf>
 8006cdc:	e00c      	b.n	8006cf8 <memp_free+0x3c>

  if (mem == NULL) {
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <memp_free+0x50>)
 8006ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff ffbe 	bl	8006c70 <do_memp_free_pool>
 8006cf4:	e000      	b.n	8006cf8 <memp_free+0x3c>
    return;
 8006cf6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	08010fc0 	.word	0x08010fc0
 8006d04:	08011090 	.word	0x08011090
 8006d08:	08011014 	.word	0x08011014
 8006d0c:	08013774 	.word	0x08013774

08006d10 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
	...

08006d20 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d108      	bne.n	8006d46 <netif_add+0x26>
 8006d34:	4b57      	ldr	r3, [pc, #348]	; (8006e94 <netif_add+0x174>)
 8006d36:	f240 1227 	movw	r2, #295	; 0x127
 8006d3a:	4957      	ldr	r1, [pc, #348]	; (8006e98 <netif_add+0x178>)
 8006d3c:	4857      	ldr	r0, [pc, #348]	; (8006e9c <netif_add+0x17c>)
 8006d3e:	f008 ffc1 	bl	800fcc4 <iprintf>
 8006d42:	2300      	movs	r3, #0
 8006d44:	e0a2      	b.n	8006e8c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <netif_add+0x3e>
 8006d4c:	4b51      	ldr	r3, [pc, #324]	; (8006e94 <netif_add+0x174>)
 8006d4e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006d52:	4953      	ldr	r1, [pc, #332]	; (8006ea0 <netif_add+0x180>)
 8006d54:	4851      	ldr	r0, [pc, #324]	; (8006e9c <netif_add+0x17c>)
 8006d56:	f008 ffb5 	bl	800fcc4 <iprintf>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e096      	b.n	8006e8c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006d64:	4b4f      	ldr	r3, [pc, #316]	; (8006ea4 <netif_add+0x184>)
 8006d66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006d6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <netif_add+0x184>)
 8006d70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006d78:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <netif_add+0x184>)
 8006d7a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4a45      	ldr	r2, [pc, #276]	; (8006ea8 <netif_add+0x188>)
 8006d92:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a3a      	ldr	r2, [r7, #32]
 8006dac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006dae:	4b3f      	ldr	r3, [pc, #252]	; (8006eac <netif_add+0x18c>)
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f913 	bl	8006ff0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	4798      	blx	r3
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <netif_add+0xba>
    return NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e058      	b.n	8006e8c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006de0:	2bff      	cmp	r3, #255	; 0xff
 8006de2:	d103      	bne.n	8006dec <netif_add+0xcc>
        netif->num = 0;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006df0:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <netif_add+0x190>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e02b      	b.n	8006e50 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d106      	bne.n	8006e0e <netif_add+0xee>
 8006e00:	4b24      	ldr	r3, [pc, #144]	; (8006e94 <netif_add+0x174>)
 8006e02:	f240 128b 	movw	r2, #395	; 0x18b
 8006e06:	492b      	ldr	r1, [pc, #172]	; (8006eb4 <netif_add+0x194>)
 8006e08:	4824      	ldr	r0, [pc, #144]	; (8006e9c <netif_add+0x17c>)
 8006e0a:	f008 ff5b 	bl	800fcc4 <iprintf>
        num_netifs++;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3301      	adds	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2bff      	cmp	r3, #255	; 0xff
 8006e18:	dd06      	ble.n	8006e28 <netif_add+0x108>
 8006e1a:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <netif_add+0x174>)
 8006e1c:	f240 128d 	movw	r2, #397	; 0x18d
 8006e20:	4925      	ldr	r1, [pc, #148]	; (8006eb8 <netif_add+0x198>)
 8006e22:	481e      	ldr	r0, [pc, #120]	; (8006e9c <netif_add+0x17c>)
 8006e24:	f008 ff4e 	bl	800fcc4 <iprintf>
        if (netif2->num == netif->num) {
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d108      	bne.n	8006e4a <netif_add+0x12a>
          netif->num++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e3e:	3301      	adds	r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006e48:	e005      	b.n	8006e56 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1d0      	bne.n	8006df8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1be      	bne.n	8006dda <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e62:	2bfe      	cmp	r3, #254	; 0xfe
 8006e64:	d103      	bne.n	8006e6e <netif_add+0x14e>
    netif_num = 0;
 8006e66:	4b11      	ldr	r3, [pc, #68]	; (8006eac <netif_add+0x18c>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	e006      	b.n	8006e7c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e74:	3301      	adds	r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <netif_add+0x18c>)
 8006e7a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <netif_add+0x190>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006e84:	4a0a      	ldr	r2, [pc, #40]	; (8006eb0 <netif_add+0x190>)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	080110ac 	.word	0x080110ac
 8006e98:	08011140 	.word	0x08011140
 8006e9c:	080110fc 	.word	0x080110fc
 8006ea0:	0801115c 	.word	0x0801115c
 8006ea4:	080137d8 	.word	0x080137d8
 8006ea8:	08007203 	.word	0x08007203
 8006eac:	200000d0 	.word	0x200000d0
 8006eb0:	20008b98 	.word	0x20008b98
 8006eb4:	08011180 	.word	0x08011180
 8006eb8:	08011194 	.word	0x08011194

08006ebc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f002 fadf 	bl	800948c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f006 fbbf 	bl	800d654 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <netif_do_set_ipaddr+0x20>
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <netif_do_set_ipaddr+0x88>)
 8006ef4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006ef8:	491c      	ldr	r1, [pc, #112]	; (8006f6c <netif_do_set_ipaddr+0x8c>)
 8006efa:	481d      	ldr	r0, [pc, #116]	; (8006f70 <netif_do_set_ipaddr+0x90>)
 8006efc:	f008 fee2 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <netif_do_set_ipaddr+0x34>
 8006f06:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <netif_do_set_ipaddr+0x88>)
 8006f08:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006f0c:	4917      	ldr	r1, [pc, #92]	; (8006f6c <netif_do_set_ipaddr+0x8c>)
 8006f0e:	4818      	ldr	r0, [pc, #96]	; (8006f70 <netif_do_set_ipaddr+0x90>)
 8006f10:	f008 fed8 	bl	800fcc4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d01c      	beq.n	8006f5c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006f32:	f107 0314 	add.w	r3, r7, #20
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff ffbf 	bl	8006ebc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <netif_do_set_ipaddr+0x6a>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	e000      	b.n	8006f4c <netif_do_set_ipaddr+0x6c>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006f50:	2101      	movs	r1, #1
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f8d2 	bl	80070fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	080110ac 	.word	0x080110ac
 8006f6c:	080111c4 	.word	0x080111c4
 8006f70:	080110fc 	.word	0x080110fc

08006f74 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3308      	adds	r3, #8
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d00a      	beq.n	8006fa4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <netif_do_set_netmask+0x26>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	e000      	b.n	8006f9c <netif_do_set_netmask+0x28>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d00a      	beq.n	8006fe2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <netif_do_set_gw+0x26>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	e000      	b.n	8006fda <netif_do_set_gw+0x28>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800700c:	4b1c      	ldr	r3, [pc, #112]	; (8007080 <netif_set_addr+0x90>)
 800700e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007016:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <netif_set_addr+0x90>)
 8007018:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <netif_set_addr+0x90>)
 8007022:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <netif_set_addr+0x42>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <netif_set_addr+0x46>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <netif_set_addr+0x48>
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
  if (remove) {
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d006      	beq.n	800704e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007040:	f107 0310 	add.w	r3, r7, #16
 8007044:	461a      	mov	r2, r3
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff ff49 	bl	8006ee0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7ff ff8e 	bl	8006f74 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff ffa8 	bl	8006fb2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007068:	f107 0310 	add.w	r3, r7, #16
 800706c:	461a      	mov	r2, r3
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff ff35 	bl	8006ee0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007076:	bf00      	nop
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	080137d8 	.word	0x080137d8

08007084 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800708c:	4a04      	ldr	r2, [pc, #16]	; (80070a0 <netif_set_default+0x1c>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20008b9c 	.word	0x20008b9c

080070a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <netif_set_up+0x1e>
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <netif_set_up+0x4c>)
 80070b4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80070b8:	490e      	ldr	r1, [pc, #56]	; (80070f4 <netif_set_up+0x50>)
 80070ba:	480f      	ldr	r0, [pc, #60]	; (80070f8 <netif_set_up+0x54>)
 80070bc:	f008 fe02 	bl	800fcc4 <iprintf>
 80070c0:	e013      	b.n	80070ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10c      	bne.n	80070ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80070e2:	2103      	movs	r1, #3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f809 	bl	80070fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	080110ac 	.word	0x080110ac
 80070f4:	08011234 	.word	0x08011234
 80070f8:	080110fc 	.word	0x080110fc

080070fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <netif_issue_reports+0x20>
 800710e:	4b18      	ldr	r3, [pc, #96]	; (8007170 <netif_issue_reports+0x74>)
 8007110:	f240 326d 	movw	r2, #877	; 0x36d
 8007114:	4917      	ldr	r1, [pc, #92]	; (8007174 <netif_issue_reports+0x78>)
 8007116:	4818      	ldr	r0, [pc, #96]	; (8007178 <netif_issue_reports+0x7c>)
 8007118:	f008 fdd4 	bl	800fcc4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01e      	beq.n	8007168 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007130:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007134:	2b00      	cmp	r3, #0
 8007136:	d017      	beq.n	8007168 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d013      	beq.n	800716a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3304      	adds	r3, #4
 8007146:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00e      	beq.n	800716a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f007 f9e1 	bl	800e528 <etharp_request>
 8007166:	e000      	b.n	800716a <netif_issue_reports+0x6e>
    return;
 8007168:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	080110ac 	.word	0x080110ac
 8007174:	08011250 	.word	0x08011250
 8007178:	080110fc 	.word	0x080110fc

0800717c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d107      	bne.n	800719a <netif_set_down+0x1e>
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <netif_set_down+0x58>)
 800718c:	f240 329b 	movw	r2, #923	; 0x39b
 8007190:	4911      	ldr	r1, [pc, #68]	; (80071d8 <netif_set_down+0x5c>)
 8007192:	4812      	ldr	r0, [pc, #72]	; (80071dc <netif_set_down+0x60>)
 8007194:	f008 fd96 	bl	800fcc4 <iprintf>
 8007198:	e019      	b.n	80071ce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d012      	beq.n	80071ce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f006 fd6b 	bl	800dca4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	080110ac 	.word	0x080110ac
 80071d8:	08011274 	.word	0x08011274
 80071dc:	080110fc 	.word	0x080110fc

080071e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	61da      	str	r2, [r3, #28]
  }
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800720e:	f06f 030b 	mvn.w	r3, #11
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d013      	beq.n	8007258 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <netif_get_by_index+0x48>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	e00c      	b.n	8007252 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800723e:	3301      	adds	r3, #1
 8007240:	b2db      	uxtb	r3, r3
 8007242:	79fa      	ldrb	r2, [r7, #7]
 8007244:	429a      	cmp	r2, r3
 8007246:	d101      	bne.n	800724c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	e006      	b.n	800725a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1ef      	bne.n	8007238 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20008b98 	.word	0x20008b98

0800726c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <pbuf_free_ooseq+0x38>)
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <pbuf_free_ooseq+0x3c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	e00a      	b.n	8007296 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f002 f93d 	bl	8009508 <tcp_free_ooseq>
      return;
 800728e:	e005      	b.n	800729c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f1      	bne.n	8007280 <pbuf_free_ooseq+0x14>
    }
  }
}
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20008ba0 	.word	0x20008ba0
 80072a8:	20008ba8 	.word	0x20008ba8

080072ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80072b0:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <pbuf_pool_is_empty+0x14>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80072b6:	bf00      	nop
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	20008ba0 	.word	0x20008ba0

080072c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4611      	mov	r1, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	460b      	mov	r3, r1
 80072d4:	80fb      	strh	r3, [r7, #6]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88ba      	ldrh	r2, [r7, #4]
 80072f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80072f2:	8b3b      	ldrh	r3, [r7, #24]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	7f3a      	ldrb	r2, [r7, #28]
 80072fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	73da      	strb	r2, [r3, #15]
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08c      	sub	sp, #48	; 0x30
 800731c:	af02      	add	r7, sp, #8
 800731e:	4603      	mov	r3, r0
 8007320:	71fb      	strb	r3, [r7, #7]
 8007322:	460b      	mov	r3, r1
 8007324:	80bb      	strh	r3, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800732e:	887b      	ldrh	r3, [r7, #2]
 8007330:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007334:	d07f      	beq.n	8007436 <pbuf_alloc+0x11e>
 8007336:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800733a:	f300 80c8 	bgt.w	80074ce <pbuf_alloc+0x1b6>
 800733e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007342:	d010      	beq.n	8007366 <pbuf_alloc+0x4e>
 8007344:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007348:	f300 80c1 	bgt.w	80074ce <pbuf_alloc+0x1b6>
 800734c:	2b01      	cmp	r3, #1
 800734e:	d002      	beq.n	8007356 <pbuf_alloc+0x3e>
 8007350:	2b41      	cmp	r3, #65	; 0x41
 8007352:	f040 80bc 	bne.w	80074ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007356:	887a      	ldrh	r2, [r7, #2]
 8007358:	88bb      	ldrh	r3, [r7, #4]
 800735a:	4619      	mov	r1, r3
 800735c:	2000      	movs	r0, #0
 800735e:	f000 f8d1 	bl	8007504 <pbuf_alloc_reference>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007364:	e0bd      	b.n	80074e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800736e:	88bb      	ldrh	r3, [r7, #4]
 8007370:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007372:	2008      	movs	r0, #8
 8007374:	f7ff fc56 	bl	8006c24 <memp_malloc>
 8007378:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007380:	f7ff ff94 	bl	80072ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <pbuf_alloc+0x78>
            pbuf_free(p);
 800738a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800738c:	f000 faa8 	bl	80078e0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007390:	2300      	movs	r3, #0
 8007392:	e0a7      	b.n	80074e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007396:	3303      	adds	r3, #3
 8007398:	b29b      	uxth	r3, r3
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8b7a      	ldrh	r2, [r7, #26]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	bf28      	it	cs
 80073ac:	4613      	movcs	r3, r2
 80073ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80073b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073b2:	3310      	adds	r3, #16
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4413      	add	r3, r2
 80073b8:	3303      	adds	r3, #3
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	4618      	mov	r0, r3
 80073c0:	89f9      	ldrh	r1, [r7, #14]
 80073c2:	8b7a      	ldrh	r2, [r7, #26]
 80073c4:	2300      	movs	r3, #0
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	887b      	ldrh	r3, [r7, #2]
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	460b      	mov	r3, r1
 80073ce:	4601      	mov	r1, r0
 80073d0:	6938      	ldr	r0, [r7, #16]
 80073d2:	f7ff ff77 	bl	80072c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d006      	beq.n	80073f0 <pbuf_alloc+0xd8>
 80073e2:	4b42      	ldr	r3, [pc, #264]	; (80074ec <pbuf_alloc+0x1d4>)
 80073e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073e8:	4941      	ldr	r1, [pc, #260]	; (80074f0 <pbuf_alloc+0x1d8>)
 80073ea:	4842      	ldr	r0, [pc, #264]	; (80074f4 <pbuf_alloc+0x1dc>)
 80073ec:	f008 fc6a 	bl	800fcc4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80073f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073f2:	3303      	adds	r3, #3
 80073f4:	f023 0303 	bic.w	r3, r3, #3
 80073f8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80073fc:	d106      	bne.n	800740c <pbuf_alloc+0xf4>
 80073fe:	4b3b      	ldr	r3, [pc, #236]	; (80074ec <pbuf_alloc+0x1d4>)
 8007400:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007404:	493c      	ldr	r1, [pc, #240]	; (80074f8 <pbuf_alloc+0x1e0>)
 8007406:	483b      	ldr	r0, [pc, #236]	; (80074f4 <pbuf_alloc+0x1dc>)
 8007408:	f008 fc5c 	bl	800fcc4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
 8007416:	e002      	b.n	800741e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007422:	8b7a      	ldrh	r2, [r7, #26]
 8007424:	89fb      	ldrh	r3, [r7, #14]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800742e:	8b7b      	ldrh	r3, [r7, #26]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d19e      	bne.n	8007372 <pbuf_alloc+0x5a>
      break;
 8007434:	e055      	b.n	80074e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007436:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007438:	3303      	adds	r3, #3
 800743a:	b29b      	uxth	r3, r3
 800743c:	f023 0303 	bic.w	r3, r3, #3
 8007440:	b29a      	uxth	r2, r3
 8007442:	88bb      	ldrh	r3, [r7, #4]
 8007444:	3303      	adds	r3, #3
 8007446:	b29b      	uxth	r3, r3
 8007448:	f023 0303 	bic.w	r3, r3, #3
 800744c:	b29b      	uxth	r3, r3
 800744e:	4413      	add	r3, r2
 8007450:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007452:	8b3b      	ldrh	r3, [r7, #24]
 8007454:	3310      	adds	r3, #16
 8007456:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007458:	8b3a      	ldrh	r2, [r7, #24]
 800745a:	88bb      	ldrh	r3, [r7, #4]
 800745c:	3303      	adds	r3, #3
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	429a      	cmp	r2, r3
 8007464:	d306      	bcc.n	8007474 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007466:	8afa      	ldrh	r2, [r7, #22]
 8007468:	88bb      	ldrh	r3, [r7, #4]
 800746a:	3303      	adds	r3, #3
 800746c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007470:	429a      	cmp	r2, r3
 8007472:	d201      	bcs.n	8007478 <pbuf_alloc+0x160>
        return NULL;
 8007474:	2300      	movs	r3, #0
 8007476:	e035      	b.n	80074e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007478:	8afb      	ldrh	r3, [r7, #22]
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fa64 	bl	8006948 <mem_malloc>
 8007480:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <pbuf_alloc+0x174>
        return NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	e02b      	b.n	80074e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800748c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800748e:	3310      	adds	r3, #16
 8007490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007492:	4413      	add	r3, r2
 8007494:	3303      	adds	r3, #3
 8007496:	f023 0303 	bic.w	r3, r3, #3
 800749a:	4618      	mov	r0, r3
 800749c:	88b9      	ldrh	r1, [r7, #4]
 800749e:	88ba      	ldrh	r2, [r7, #4]
 80074a0:	2300      	movs	r3, #0
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	887b      	ldrh	r3, [r7, #2]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	460b      	mov	r3, r1
 80074aa:	4601      	mov	r1, r0
 80074ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ae:	f7ff ff09 	bl	80072c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d010      	beq.n	80074e0 <pbuf_alloc+0x1c8>
 80074be:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <pbuf_alloc+0x1d4>)
 80074c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80074c4:	490d      	ldr	r1, [pc, #52]	; (80074fc <pbuf_alloc+0x1e4>)
 80074c6:	480b      	ldr	r0, [pc, #44]	; (80074f4 <pbuf_alloc+0x1dc>)
 80074c8:	f008 fbfc 	bl	800fcc4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80074cc:	e008      	b.n	80074e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <pbuf_alloc+0x1d4>)
 80074d0:	f240 1227 	movw	r2, #295	; 0x127
 80074d4:	490a      	ldr	r1, [pc, #40]	; (8007500 <pbuf_alloc+0x1e8>)
 80074d6:	4807      	ldr	r0, [pc, #28]	; (80074f4 <pbuf_alloc+0x1dc>)
 80074d8:	f008 fbf4 	bl	800fcc4 <iprintf>
      return NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	e001      	b.n	80074e4 <pbuf_alloc+0x1cc>
      break;
 80074e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3728      	adds	r7, #40	; 0x28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	080112dc 	.word	0x080112dc
 80074f0:	0801130c 	.word	0x0801130c
 80074f4:	0801133c 	.word	0x0801133c
 80074f8:	08011364 	.word	0x08011364
 80074fc:	08011398 	.word	0x08011398
 8007500:	080113c4 	.word	0x080113c4

08007504 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af02      	add	r7, sp, #8
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	807b      	strh	r3, [r7, #2]
 8007510:	4613      	mov	r3, r2
 8007512:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007514:	883b      	ldrh	r3, [r7, #0]
 8007516:	2b41      	cmp	r3, #65	; 0x41
 8007518:	d009      	beq.n	800752e <pbuf_alloc_reference+0x2a>
 800751a:	883b      	ldrh	r3, [r7, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d006      	beq.n	800752e <pbuf_alloc_reference+0x2a>
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <pbuf_alloc_reference+0x5c>)
 8007522:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007526:	490f      	ldr	r1, [pc, #60]	; (8007564 <pbuf_alloc_reference+0x60>)
 8007528:	480f      	ldr	r0, [pc, #60]	; (8007568 <pbuf_alloc_reference+0x64>)
 800752a:	f008 fbcb 	bl	800fcc4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800752e:	2007      	movs	r0, #7
 8007530:	f7ff fb78 	bl	8006c24 <memp_malloc>
 8007534:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800753c:	2300      	movs	r3, #0
 800753e:	e00b      	b.n	8007558 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007540:	8879      	ldrh	r1, [r7, #2]
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	2300      	movs	r3, #0
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	883b      	ldrh	r3, [r7, #0]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	460b      	mov	r3, r1
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff feb7 	bl	80072c4 <pbuf_init_alloced_pbuf>
  return p;
 8007556:	68fb      	ldr	r3, [r7, #12]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	080112dc 	.word	0x080112dc
 8007564:	080113e0 	.word	0x080113e0
 8007568:	0801133c 	.word	0x0801133c

0800756c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af02      	add	r7, sp, #8
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	460b      	mov	r3, r1
 800757a:	81bb      	strh	r3, [r7, #12]
 800757c:	4613      	mov	r3, r2
 800757e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007584:	8a7b      	ldrh	r3, [r7, #18]
 8007586:	3303      	adds	r3, #3
 8007588:	f023 0203 	bic.w	r2, r3, #3
 800758c:	89bb      	ldrh	r3, [r7, #12]
 800758e:	441a      	add	r2, r3
 8007590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007592:	429a      	cmp	r2, r3
 8007594:	d901      	bls.n	800759a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007596:	2300      	movs	r3, #0
 8007598:	e018      	b.n	80075cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80075a0:	8a7b      	ldrh	r3, [r7, #18]
 80075a2:	3303      	adds	r3, #3
 80075a4:	f023 0303 	bic.w	r3, r3, #3
 80075a8:	6a3a      	ldr	r2, [r7, #32]
 80075aa:	4413      	add	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	e001      	b.n	80075b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	89b9      	ldrh	r1, [r7, #12]
 80075b8:	89ba      	ldrh	r2, [r7, #12]
 80075ba:	2302      	movs	r3, #2
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	897b      	ldrh	r3, [r7, #10]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	460b      	mov	r3, r1
 80075c4:	6979      	ldr	r1, [r7, #20]
 80075c6:	f7ff fe7d 	bl	80072c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80075ca:	687b      	ldr	r3, [r7, #4]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <pbuf_realloc+0x20>
 80075e6:	4b3a      	ldr	r3, [pc, #232]	; (80076d0 <pbuf_realloc+0xfc>)
 80075e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80075ec:	4939      	ldr	r1, [pc, #228]	; (80076d4 <pbuf_realloc+0x100>)
 80075ee:	483a      	ldr	r0, [pc, #232]	; (80076d8 <pbuf_realloc+0x104>)
 80075f0:	f008 fb68 	bl	800fcc4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	891b      	ldrh	r3, [r3, #8]
 80075f8:	887a      	ldrh	r2, [r7, #2]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d263      	bcs.n	80076c6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	891a      	ldrh	r2, [r3, #8]
 8007602:	887b      	ldrh	r3, [r7, #2]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007608:	887b      	ldrh	r3, [r7, #2]
 800760a:	817b      	strh	r3, [r7, #10]
  q = p;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007610:	e018      	b.n	8007644 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	895b      	ldrh	r3, [r3, #10]
 8007616:	897a      	ldrh	r2, [r7, #10]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	891a      	ldrh	r2, [r3, #8]
 8007620:	893b      	ldrh	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <pbuf_realloc+0x70>
 8007636:	4b26      	ldr	r3, [pc, #152]	; (80076d0 <pbuf_realloc+0xfc>)
 8007638:	f240 12af 	movw	r2, #431	; 0x1af
 800763c:	4927      	ldr	r1, [pc, #156]	; (80076dc <pbuf_realloc+0x108>)
 800763e:	4826      	ldr	r0, [pc, #152]	; (80076d8 <pbuf_realloc+0x104>)
 8007640:	f008 fb40 	bl	800fcc4 <iprintf>
  while (rem_len > q->len) {
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	895b      	ldrh	r3, [r3, #10]
 8007648:	897a      	ldrh	r2, [r7, #10]
 800764a:	429a      	cmp	r2, r3
 800764c:	d8e1      	bhi.n	8007612 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	7b1b      	ldrb	r3, [r3, #12]
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	2b00      	cmp	r3, #0
 8007658:	d121      	bne.n	800769e <pbuf_realloc+0xca>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	895b      	ldrh	r3, [r3, #10]
 800765e:	897a      	ldrh	r2, [r7, #10]
 8007660:	429a      	cmp	r2, r3
 8007662:	d01c      	beq.n	800769e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	7b5b      	ldrb	r3, [r3, #13]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d116      	bne.n	800769e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	b29a      	uxth	r2, r3
 800767a:	897b      	ldrh	r3, [r7, #10]
 800767c:	4413      	add	r3, r2
 800767e:	b29b      	uxth	r3, r3
 8007680:	4619      	mov	r1, r3
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff f864 	bl	8006750 <mem_trim>
 8007688:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <pbuf_realloc+0xca>
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <pbuf_realloc+0xfc>)
 8007692:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007696:	4912      	ldr	r1, [pc, #72]	; (80076e0 <pbuf_realloc+0x10c>)
 8007698:	480f      	ldr	r0, [pc, #60]	; (80076d8 <pbuf_realloc+0x104>)
 800769a:	f008 fb13 	bl	800fcc4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	897a      	ldrh	r2, [r7, #10]
 80076a2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	895a      	ldrh	r2, [r3, #10]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 f911 	bl	80078e0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e000      	b.n	80076c8 <pbuf_realloc+0xf4>
    return;
 80076c6:	bf00      	nop

}
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	080112dc 	.word	0x080112dc
 80076d4:	080113f4 	.word	0x080113f4
 80076d8:	0801133c 	.word	0x0801133c
 80076dc:	0801140c 	.word	0x0801140c
 80076e0:	08011424 	.word	0x08011424

080076e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <pbuf_add_header_impl+0x22>
 80076f8:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <pbuf_add_header_impl+0xc4>)
 80076fa:	f240 12df 	movw	r2, #479	; 0x1df
 80076fe:	492b      	ldr	r1, [pc, #172]	; (80077ac <pbuf_add_header_impl+0xc8>)
 8007700:	482b      	ldr	r0, [pc, #172]	; (80077b0 <pbuf_add_header_impl+0xcc>)
 8007702:	f008 fadf 	bl	800fcc4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <pbuf_add_header_impl+0x30>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007712:	d301      	bcc.n	8007718 <pbuf_add_header_impl+0x34>
    return 1;
 8007714:	2301      	movs	r3, #1
 8007716:	e043      	b.n	80077a0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <pbuf_add_header_impl+0x3e>
    return 0;
 800771e:	2300      	movs	r3, #0
 8007720:	e03e      	b.n	80077a0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	891a      	ldrh	r2, [r3, #8]
 800772a:	8a7b      	ldrh	r3, [r7, #18]
 800772c:	4413      	add	r3, r2
 800772e:	b29b      	uxth	r3, r3
 8007730:	8a7a      	ldrh	r2, [r7, #18]
 8007732:	429a      	cmp	r2, r3
 8007734:	d901      	bls.n	800773a <pbuf_add_header_impl+0x56>
    return 1;
 8007736:	2301      	movs	r3, #1
 8007738:	e032      	b.n	80077a0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	7b1b      	ldrb	r3, [r3, #12]
 800773e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007740:	8a3b      	ldrh	r3, [r7, #16]
 8007742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	425b      	negs	r3, r3
 8007752:	4413      	add	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3310      	adds	r3, #16
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	429a      	cmp	r2, r3
 800775e:	d20d      	bcs.n	800777c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007760:	2301      	movs	r3, #1
 8007762:	e01d      	b.n	80077a0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d006      	beq.n	8007778 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	425b      	negs	r3, r3
 8007772:	4413      	add	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e001      	b.n	800777c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007778:	2301      	movs	r3, #1
 800777a:	e011      	b.n	80077a0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	895a      	ldrh	r2, [r3, #10]
 8007786:	8a7b      	ldrh	r3, [r7, #18]
 8007788:	4413      	add	r3, r2
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	891a      	ldrh	r2, [r3, #8]
 8007794:	8a7b      	ldrh	r3, [r7, #18]
 8007796:	4413      	add	r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	811a      	strh	r2, [r3, #8]


  return 0;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	080112dc 	.word	0x080112dc
 80077ac:	08011440 	.word	0x08011440
 80077b0:	0801133c 	.word	0x0801133c

080077b4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80077be:	2200      	movs	r2, #0
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff ff8e 	bl	80076e4 <pbuf_add_header_impl>
 80077c8:	4603      	mov	r3, r0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <pbuf_remove_header+0x1e>
 80077e4:	4b20      	ldr	r3, [pc, #128]	; (8007868 <pbuf_remove_header+0x94>)
 80077e6:	f240 224b 	movw	r2, #587	; 0x24b
 80077ea:	4920      	ldr	r1, [pc, #128]	; (800786c <pbuf_remove_header+0x98>)
 80077ec:	4820      	ldr	r0, [pc, #128]	; (8007870 <pbuf_remove_header+0x9c>)
 80077ee:	f008 fa69 	bl	800fcc4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <pbuf_remove_header+0x2c>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fe:	d301      	bcc.n	8007804 <pbuf_remove_header+0x30>
    return 1;
 8007800:	2301      	movs	r3, #1
 8007802:	e02c      	b.n	800785e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <pbuf_remove_header+0x3a>
    return 0;
 800780a:	2300      	movs	r3, #0
 800780c:	e027      	b.n	800785e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	895b      	ldrh	r3, [r3, #10]
 8007816:	89fa      	ldrh	r2, [r7, #14]
 8007818:	429a      	cmp	r2, r3
 800781a:	d908      	bls.n	800782e <pbuf_remove_header+0x5a>
 800781c:	4b12      	ldr	r3, [pc, #72]	; (8007868 <pbuf_remove_header+0x94>)
 800781e:	f240 2255 	movw	r2, #597	; 0x255
 8007822:	4914      	ldr	r1, [pc, #80]	; (8007874 <pbuf_remove_header+0xa0>)
 8007824:	4812      	ldr	r0, [pc, #72]	; (8007870 <pbuf_remove_header+0x9c>)
 8007826:	f008 fa4d 	bl	800fcc4 <iprintf>
 800782a:	2301      	movs	r3, #1
 800782c:	e017      	b.n	800785e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	441a      	add	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	895a      	ldrh	r2, [r3, #10]
 8007844:	89fb      	ldrh	r3, [r7, #14]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	891a      	ldrh	r2, [r3, #8]
 8007852:	89fb      	ldrh	r3, [r7, #14]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	080112dc 	.word	0x080112dc
 800786c:	08011440 	.word	0x08011440
 8007870:	0801133c 	.word	0x0801133c
 8007874:	0801144c 	.word	0x0801144c

08007878 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	807b      	strh	r3, [r7, #2]
 8007884:	4613      	mov	r3, r2
 8007886:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007888:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800788c:	2b00      	cmp	r3, #0
 800788e:	da08      	bge.n	80078a2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007890:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007894:	425b      	negs	r3, r3
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff ff9b 	bl	80077d4 <pbuf_remove_header>
 800789e:	4603      	mov	r3, r0
 80078a0:	e007      	b.n	80078b2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80078a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078a6:	787a      	ldrb	r2, [r7, #1]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff ff1a 	bl	80076e4 <pbuf_add_header_impl>
 80078b0:	4603      	mov	r3, r0
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80078c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078ca:	2201      	movs	r2, #1
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff ffd2 	bl	8007878 <pbuf_header_impl>
 80078d4:	4603      	mov	r3, r0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10b      	bne.n	8007906 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <pbuf_free+0x22>
 80078f4:	4b38      	ldr	r3, [pc, #224]	; (80079d8 <pbuf_free+0xf8>)
 80078f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80078fa:	4938      	ldr	r1, [pc, #224]	; (80079dc <pbuf_free+0xfc>)
 80078fc:	4838      	ldr	r0, [pc, #224]	; (80079e0 <pbuf_free+0x100>)
 80078fe:	f008 f9e1 	bl	800fcc4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007902:	2300      	movs	r3, #0
 8007904:	e063      	b.n	80079ce <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800790a:	e05c      	b.n	80079c6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7b9b      	ldrb	r3, [r3, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <pbuf_free+0x42>
 8007914:	4b30      	ldr	r3, [pc, #192]	; (80079d8 <pbuf_free+0xf8>)
 8007916:	f240 22f1 	movw	r2, #753	; 0x2f1
 800791a:	4932      	ldr	r1, [pc, #200]	; (80079e4 <pbuf_free+0x104>)
 800791c:	4830      	ldr	r0, [pc, #192]	; (80079e0 <pbuf_free+0x100>)
 800791e:	f008 f9d1 	bl	800fcc4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7b9b      	ldrb	r3, [r3, #14]
 8007926:	3b01      	subs	r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	739a      	strb	r2, [r3, #14]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7b9b      	ldrb	r3, [r3, #14]
 8007932:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007934:	7dbb      	ldrb	r3, [r7, #22]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d143      	bne.n	80079c2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7b1b      	ldrb	r3, [r3, #12]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	7b5b      	ldrb	r3, [r3, #13]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d011      	beq.n	800797a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <pbuf_free+0x90>
 8007962:	4b1d      	ldr	r3, [pc, #116]	; (80079d8 <pbuf_free+0xf8>)
 8007964:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007968:	491f      	ldr	r1, [pc, #124]	; (80079e8 <pbuf_free+0x108>)
 800796a:	481d      	ldr	r0, [pc, #116]	; (80079e0 <pbuf_free+0x100>)
 800796c:	f008 f9aa 	bl	800fcc4 <iprintf>
        pc->custom_free_function(p);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
 8007978:	e01d      	b.n	80079b6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d104      	bne.n	800798a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	2008      	movs	r0, #8
 8007984:	f7ff f99a 	bl	8006cbc <memp_free>
 8007988:	e015      	b.n	80079b6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d104      	bne.n	800799a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	2007      	movs	r0, #7
 8007994:	f7ff f992 	bl	8006cbc <memp_free>
 8007998:	e00d      	b.n	80079b6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d103      	bne.n	80079a8 <pbuf_free+0xc8>
          mem_free(p);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7fe fe6b 	bl	800667c <mem_free>
 80079a6:	e006      	b.n	80079b6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80079a8:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <pbuf_free+0xf8>)
 80079aa:	f240 320f 	movw	r2, #783	; 0x30f
 80079ae:	490f      	ldr	r1, [pc, #60]	; (80079ec <pbuf_free+0x10c>)
 80079b0:	480b      	ldr	r0, [pc, #44]	; (80079e0 <pbuf_free+0x100>)
 80079b2:	f008 f987 	bl	800fcc4 <iprintf>
        }
      }
      count++;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	3301      	adds	r3, #1
 80079ba:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	e001      	b.n	80079c6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d19f      	bne.n	800790c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	080112dc 	.word	0x080112dc
 80079dc:	08011440 	.word	0x08011440
 80079e0:	0801133c 	.word	0x0801133c
 80079e4:	0801146c 	.word	0x0801146c
 80079e8:	08011484 	.word	0x08011484
 80079ec:	080114a8 	.word	0x080114a8

080079f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80079fc:	e005      	b.n	8007a0a <pbuf_clen+0x1a>
    ++len;
 80079fe:	89fb      	ldrh	r3, [r7, #14]
 8007a00:	3301      	adds	r3, #1
 8007a02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1f6      	bne.n	80079fe <pbuf_clen+0xe>
  }
  return len;
 8007a10:	89fb      	ldrh	r3, [r7, #14]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d010      	beq.n	8007a50 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7b9b      	ldrb	r3, [r3, #14]
 8007a32:	3301      	adds	r3, #1
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	7b9b      	ldrb	r3, [r3, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <pbuf_ref+0x30>
 8007a42:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <pbuf_ref+0x38>)
 8007a44:	f240 3242 	movw	r2, #834	; 0x342
 8007a48:	4904      	ldr	r1, [pc, #16]	; (8007a5c <pbuf_ref+0x3c>)
 8007a4a:	4805      	ldr	r0, [pc, #20]	; (8007a60 <pbuf_ref+0x40>)
 8007a4c:	f008 f93a 	bl	800fcc4 <iprintf>
  }
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	080112dc 	.word	0x080112dc
 8007a5c:	080114bc 	.word	0x080114bc
 8007a60:	0801133c 	.word	0x0801133c

08007a64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <pbuf_cat+0x16>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d107      	bne.n	8007a8a <pbuf_cat+0x26>
 8007a7a:	4b20      	ldr	r3, [pc, #128]	; (8007afc <pbuf_cat+0x98>)
 8007a7c:	f240 3259 	movw	r2, #857	; 0x359
 8007a80:	491f      	ldr	r1, [pc, #124]	; (8007b00 <pbuf_cat+0x9c>)
 8007a82:	4820      	ldr	r0, [pc, #128]	; (8007b04 <pbuf_cat+0xa0>)
 8007a84:	f008 f91e 	bl	800fcc4 <iprintf>
 8007a88:	e034      	b.n	8007af4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e00a      	b.n	8007aa6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	891a      	ldrh	r2, [r3, #8]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	891b      	ldrh	r3, [r3, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	891a      	ldrh	r2, [r3, #8]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	895b      	ldrh	r3, [r3, #10]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d006      	beq.n	8007ac8 <pbuf_cat+0x64>
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <pbuf_cat+0x98>)
 8007abc:	f240 3262 	movw	r2, #866	; 0x362
 8007ac0:	4911      	ldr	r1, [pc, #68]	; (8007b08 <pbuf_cat+0xa4>)
 8007ac2:	4810      	ldr	r0, [pc, #64]	; (8007b04 <pbuf_cat+0xa0>)
 8007ac4:	f008 f8fe 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d006      	beq.n	8007ade <pbuf_cat+0x7a>
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <pbuf_cat+0x98>)
 8007ad2:	f240 3263 	movw	r2, #867	; 0x363
 8007ad6:	490d      	ldr	r1, [pc, #52]	; (8007b0c <pbuf_cat+0xa8>)
 8007ad8:	480a      	ldr	r0, [pc, #40]	; (8007b04 <pbuf_cat+0xa0>)
 8007ada:	f008 f8f3 	bl	800fcc4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	891a      	ldrh	r2, [r3, #8]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	891b      	ldrh	r3, [r3, #8]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	080112dc 	.word	0x080112dc
 8007b00:	080114d0 	.word	0x080114d0
 8007b04:	0801133c 	.word	0x0801133c
 8007b08:	08011508 	.word	0x08011508
 8007b0c:	08011538 	.word	0x08011538

08007b10 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <pbuf_copy+0x2a>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <pbuf_copy+0x2a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	891a      	ldrh	r2, [r3, #8]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	891b      	ldrh	r3, [r3, #8]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d209      	bcs.n	8007b4e <pbuf_copy+0x3e>
 8007b3a:	4b57      	ldr	r3, [pc, #348]	; (8007c98 <pbuf_copy+0x188>)
 8007b3c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007b40:	4956      	ldr	r1, [pc, #344]	; (8007c9c <pbuf_copy+0x18c>)
 8007b42:	4857      	ldr	r0, [pc, #348]	; (8007ca0 <pbuf_copy+0x190>)
 8007b44:	f008 f8be 	bl	800fcc4 <iprintf>
 8007b48:	f06f 030f 	mvn.w	r3, #15
 8007b4c:	e09f      	b.n	8007c8e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	895b      	ldrh	r3, [r3, #10]
 8007b52:	461a      	mov	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	895b      	ldrh	r3, [r3, #10]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1acb      	subs	r3, r1, r3
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d306      	bcc.n	8007b74 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	895b      	ldrh	r3, [r3, #10]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	e005      	b.n	8007b80 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	895b      	ldrh	r3, [r3, #10]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	18d0      	adds	r0, r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4619      	mov	r1, r3
 8007b94:	f008 f880 	bl	800fc98 <memcpy>
    offset_to += len;
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	895b      	ldrh	r3, [r3, #10]
 8007bac:	461a      	mov	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d906      	bls.n	8007bc2 <pbuf_copy+0xb2>
 8007bb4:	4b38      	ldr	r3, [pc, #224]	; (8007c98 <pbuf_copy+0x188>)
 8007bb6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007bba:	493a      	ldr	r1, [pc, #232]	; (8007ca4 <pbuf_copy+0x194>)
 8007bbc:	4838      	ldr	r0, [pc, #224]	; (8007ca0 <pbuf_copy+0x190>)
 8007bbe:	f008 f881 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	895b      	ldrh	r3, [r3, #10]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d906      	bls.n	8007bdc <pbuf_copy+0xcc>
 8007bce:	4b32      	ldr	r3, [pc, #200]	; (8007c98 <pbuf_copy+0x188>)
 8007bd0:	f240 32da 	movw	r2, #986	; 0x3da
 8007bd4:	4934      	ldr	r1, [pc, #208]	; (8007ca8 <pbuf_copy+0x198>)
 8007bd6:	4832      	ldr	r0, [pc, #200]	; (8007ca0 <pbuf_copy+0x190>)
 8007bd8:	f008 f874 	bl	800fcc4 <iprintf>
    if (offset_from >= p_from->len) {
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	895b      	ldrh	r3, [r3, #10]
 8007be0:	461a      	mov	r2, r3
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d304      	bcc.n	8007bf2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	895b      	ldrh	r3, [r3, #10]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d114      	bne.n	8007c28 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10c      	bne.n	8007c28 <pbuf_copy+0x118>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <pbuf_copy+0x118>
 8007c14:	4b20      	ldr	r3, [pc, #128]	; (8007c98 <pbuf_copy+0x188>)
 8007c16:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007c1a:	4924      	ldr	r1, [pc, #144]	; (8007cac <pbuf_copy+0x19c>)
 8007c1c:	4820      	ldr	r0, [pc, #128]	; (8007ca0 <pbuf_copy+0x190>)
 8007c1e:	f008 f851 	bl	800fcc4 <iprintf>
 8007c22:	f06f 030f 	mvn.w	r3, #15
 8007c26:	e032      	b.n	8007c8e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d013      	beq.n	8007c56 <pbuf_copy+0x146>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	895a      	ldrh	r2, [r3, #10]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	891b      	ldrh	r3, [r3, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d10d      	bne.n	8007c56 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <pbuf_copy+0x146>
 8007c42:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <pbuf_copy+0x188>)
 8007c44:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007c48:	4919      	ldr	r1, [pc, #100]	; (8007cb0 <pbuf_copy+0x1a0>)
 8007c4a:	4815      	ldr	r0, [pc, #84]	; (8007ca0 <pbuf_copy+0x190>)
 8007c4c:	f008 f83a 	bl	800fcc4 <iprintf>
 8007c50:	f06f 0305 	mvn.w	r3, #5
 8007c54:	e01b      	b.n	8007c8e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d013      	beq.n	8007c84 <pbuf_copy+0x174>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	895a      	ldrh	r2, [r3, #10]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	891b      	ldrh	r3, [r3, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d10d      	bne.n	8007c84 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <pbuf_copy+0x174>
 8007c70:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <pbuf_copy+0x188>)
 8007c72:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007c76:	490e      	ldr	r1, [pc, #56]	; (8007cb0 <pbuf_copy+0x1a0>)
 8007c78:	4809      	ldr	r0, [pc, #36]	; (8007ca0 <pbuf_copy+0x190>)
 8007c7a:	f008 f823 	bl	800fcc4 <iprintf>
 8007c7e:	f06f 0305 	mvn.w	r3, #5
 8007c82:	e004      	b.n	8007c8e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f47f af61 	bne.w	8007b4e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	080112dc 	.word	0x080112dc
 8007c9c:	08011584 	.word	0x08011584
 8007ca0:	0801133c 	.word	0x0801133c
 8007ca4:	080115b4 	.word	0x080115b4
 8007ca8:	080115cc 	.word	0x080115cc
 8007cac:	080115e8 	.word	0x080115e8
 8007cb0:	080115f8 	.word	0x080115f8

08007cb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	80fb      	strh	r3, [r7, #6]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <pbuf_copy_partial+0x36>
 8007cd8:	4b2b      	ldr	r3, [pc, #172]	; (8007d88 <pbuf_copy_partial+0xd4>)
 8007cda:	f240 420a 	movw	r2, #1034	; 0x40a
 8007cde:	492b      	ldr	r1, [pc, #172]	; (8007d8c <pbuf_copy_partial+0xd8>)
 8007ce0:	482b      	ldr	r0, [pc, #172]	; (8007d90 <pbuf_copy_partial+0xdc>)
 8007ce2:	f007 ffef 	bl	800fcc4 <iprintf>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e04a      	b.n	8007d80 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d108      	bne.n	8007d02 <pbuf_copy_partial+0x4e>
 8007cf0:	4b25      	ldr	r3, [pc, #148]	; (8007d88 <pbuf_copy_partial+0xd4>)
 8007cf2:	f240 420b 	movw	r2, #1035	; 0x40b
 8007cf6:	4927      	ldr	r1, [pc, #156]	; (8007d94 <pbuf_copy_partial+0xe0>)
 8007cf8:	4825      	ldr	r0, [pc, #148]	; (8007d90 <pbuf_copy_partial+0xdc>)
 8007cfa:	f007 ffe3 	bl	800fcc4 <iprintf>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e03e      	b.n	8007d80 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e034      	b.n	8007d72 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007d08:	88bb      	ldrh	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <pbuf_copy_partial+0x70>
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	895b      	ldrh	r3, [r3, #10]
 8007d12:	88ba      	ldrh	r2, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d305      	bcc.n	8007d24 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	895b      	ldrh	r3, [r3, #10]
 8007d1c:	88ba      	ldrh	r2, [r7, #4]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	80bb      	strh	r3, [r7, #4]
 8007d22:	e023      	b.n	8007d6c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	895a      	ldrh	r2, [r3, #10]
 8007d28:	88bb      	ldrh	r3, [r7, #4]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007d2e:	8b3a      	ldrh	r2, [r7, #24]
 8007d30:	88fb      	ldrh	r3, [r7, #6]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d901      	bls.n	8007d3a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007d3a:	8b7b      	ldrh	r3, [r7, #26]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	18d0      	adds	r0, r2, r3
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	88bb      	ldrh	r3, [r7, #4]
 8007d46:	4413      	add	r3, r2
 8007d48:	8b3a      	ldrh	r2, [r7, #24]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	f007 ffa4 	bl	800fc98 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007d50:	8afa      	ldrh	r2, [r7, #22]
 8007d52:	8b3b      	ldrh	r3, [r7, #24]
 8007d54:	4413      	add	r3, r2
 8007d56:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007d58:	8b7a      	ldrh	r2, [r7, #26]
 8007d5a:	8b3b      	ldrh	r3, [r7, #24]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007d60:	88fa      	ldrh	r2, [r7, #6]
 8007d62:	8b3b      	ldrh	r3, [r7, #24]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <pbuf_copy_partial+0xca>
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1c4      	bne.n	8007d08 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007d7e:	8afb      	ldrh	r3, [r7, #22]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	080112dc 	.word	0x080112dc
 8007d8c:	08011624 	.word	0x08011624
 8007d90:	0801133c 	.word	0x0801133c
 8007d94:	08011644 	.word	0x08011644

08007d98 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	603a      	str	r2, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
 8007da4:	460b      	mov	r3, r1
 8007da6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	8919      	ldrh	r1, [r3, #8]
 8007dac:	88ba      	ldrh	r2, [r7, #4]
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fab1 	bl	8007318 <pbuf_alloc>
 8007db6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <pbuf_clone+0x2a>
    return NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e011      	b.n	8007de6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fea3 	bl	8007b10 <pbuf_copy>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007dce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d006      	beq.n	8007de4 <pbuf_clone+0x4c>
 8007dd6:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <pbuf_clone+0x58>)
 8007dd8:	f240 5224 	movw	r2, #1316	; 0x524
 8007ddc:	4905      	ldr	r1, [pc, #20]	; (8007df4 <pbuf_clone+0x5c>)
 8007dde:	4806      	ldr	r0, [pc, #24]	; (8007df8 <pbuf_clone+0x60>)
 8007de0:	f007 ff70 	bl	800fcc4 <iprintf>
  return q;
 8007de4:	68fb      	ldr	r3, [r7, #12]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	080112dc 	.word	0x080112dc
 8007df4:	08011750 	.word	0x08011750
 8007df8:	0801133c 	.word	0x0801133c

08007dfc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007e00:	f007 ff78 	bl	800fcf4 <rand>
 8007e04:	4603      	mov	r3, r0
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	4b01      	ldr	r3, [pc, #4]	; (8007e1c <tcp_init+0x20>)
 8007e16:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007e18:	bf00      	nop
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000012 	.word	0x20000012

08007e20 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7d1b      	ldrb	r3, [r3, #20]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d105      	bne.n	8007e3c <tcp_free+0x1c>
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <tcp_free+0x2c>)
 8007e32:	22d4      	movs	r2, #212	; 0xd4
 8007e34:	4906      	ldr	r1, [pc, #24]	; (8007e50 <tcp_free+0x30>)
 8007e36:	4807      	ldr	r0, [pc, #28]	; (8007e54 <tcp_free+0x34>)
 8007e38:	f007 ff44 	bl	800fcc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f7fe ff3c 	bl	8006cbc <memp_free>
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	080117dc 	.word	0x080117dc
 8007e50:	0801180c 	.word	0x0801180c
 8007e54:	08011820 	.word	0x08011820

08007e58 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7d1b      	ldrb	r3, [r3, #20]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d105      	bne.n	8007e74 <tcp_free_listen+0x1c>
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <tcp_free_listen+0x2c>)
 8007e6a:	22df      	movs	r2, #223	; 0xdf
 8007e6c:	4906      	ldr	r1, [pc, #24]	; (8007e88 <tcp_free_listen+0x30>)
 8007e6e:	4807      	ldr	r0, [pc, #28]	; (8007e8c <tcp_free_listen+0x34>)
 8007e70:	f007 ff28 	bl	800fcc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	2002      	movs	r0, #2
 8007e78:	f7fe ff20 	bl	8006cbc <memp_free>
}
 8007e7c:	bf00      	nop
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	080117dc 	.word	0x080117dc
 8007e88:	08011848 	.word	0x08011848
 8007e8c:	08011820 	.word	0x08011820

08007e90 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007e94:	f000 fea2 	bl	8008bdc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <tcp_tmr+0x28>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <tcp_tmr+0x28>)
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <tcp_tmr+0x28>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007eb0:	f000 fb54 	bl	800855c <tcp_slowtmr>
  }
}
 8007eb4:	bf00      	nop
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	200000d1 	.word	0x200000d1

08007ebc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <tcp_remove_listener+0x1c>
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <tcp_remove_listener+0x48>)
 8007ece:	22ff      	movs	r2, #255	; 0xff
 8007ed0:	490d      	ldr	r1, [pc, #52]	; (8007f08 <tcp_remove_listener+0x4c>)
 8007ed2:	480e      	ldr	r0, [pc, #56]	; (8007f0c <tcp_remove_listener+0x50>)
 8007ed4:	f007 fef6 	bl	800fcc4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	e00a      	b.n	8007ef4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d102      	bne.n	8007eee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1f1      	bne.n	8007ede <tcp_remove_listener+0x22>
    }
  }
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	080117dc 	.word	0x080117dc
 8007f08:	08011864 	.word	0x08011864
 8007f0c:	08011820 	.word	0x08011820

08007f10 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <tcp_listen_closed+0x1c>
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <tcp_listen_closed+0x60>)
 8007f20:	f240 1211 	movw	r2, #273	; 0x111
 8007f24:	4913      	ldr	r1, [pc, #76]	; (8007f74 <tcp_listen_closed+0x64>)
 8007f26:	4814      	ldr	r0, [pc, #80]	; (8007f78 <tcp_listen_closed+0x68>)
 8007f28:	f007 fecc 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	7d1b      	ldrb	r3, [r3, #20]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d006      	beq.n	8007f42 <tcp_listen_closed+0x32>
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <tcp_listen_closed+0x60>)
 8007f36:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007f3a:	4910      	ldr	r1, [pc, #64]	; (8007f7c <tcp_listen_closed+0x6c>)
 8007f3c:	480e      	ldr	r0, [pc, #56]	; (8007f78 <tcp_listen_closed+0x68>)
 8007f3e:	f007 fec1 	bl	800fcc4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007f42:	2301      	movs	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e00b      	b.n	8007f60 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007f48:	4a0d      	ldr	r2, [pc, #52]	; (8007f80 <tcp_listen_closed+0x70>)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff ffb1 	bl	8007ebc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d9f0      	bls.n	8007f48 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	080117dc 	.word	0x080117dc
 8007f74:	0801188c 	.word	0x0801188c
 8007f78:	08011820 	.word	0x08011820
 8007f7c:	08011898 	.word	0x08011898
 8007f80:	080137b0 	.word	0x080137b0

08007f84 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007f84:	b5b0      	push	{r4, r5, r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af04      	add	r7, sp, #16
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <tcp_close_shutdown+0x20>
 8007f96:	4b63      	ldr	r3, [pc, #396]	; (8008124 <tcp_close_shutdown+0x1a0>)
 8007f98:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007f9c:	4962      	ldr	r1, [pc, #392]	; (8008128 <tcp_close_shutdown+0x1a4>)
 8007f9e:	4863      	ldr	r0, [pc, #396]	; (800812c <tcp_close_shutdown+0x1a8>)
 8007fa0:	f007 fe90 	bl	800fcc4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d066      	beq.n	8008078 <tcp_close_shutdown+0xf4>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7d1b      	ldrb	r3, [r3, #20]
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d003      	beq.n	8007fba <tcp_close_shutdown+0x36>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7d1b      	ldrb	r3, [r3, #20]
 8007fb6:	2b07      	cmp	r3, #7
 8007fb8:	d15e      	bne.n	8008078 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <tcp_close_shutdown+0x48>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007fca:	d055      	beq.n	8008078 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8b5b      	ldrh	r3, [r3, #26]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <tcp_close_shutdown+0x62>
 8007fd8:	4b52      	ldr	r3, [pc, #328]	; (8008124 <tcp_close_shutdown+0x1a0>)
 8007fda:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007fde:	4954      	ldr	r1, [pc, #336]	; (8008130 <tcp_close_shutdown+0x1ac>)
 8007fe0:	4852      	ldr	r0, [pc, #328]	; (800812c <tcp_close_shutdown+0x1a8>)
 8007fe2:	f007 fe6f 	bl	800fcc4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007fee:	687d      	ldr	r5, [r7, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	8ad2      	ldrh	r2, [r2, #22]
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	8b09      	ldrh	r1, [r1, #24]
 8007ffc:	9102      	str	r1, [sp, #8]
 8007ffe:	9201      	str	r2, [sp, #4]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	462b      	mov	r3, r5
 8008004:	4622      	mov	r2, r4
 8008006:	4601      	mov	r1, r0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f004 fe8d 	bl	800cd28 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 f8c6 	bl	80091a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008014:	4b47      	ldr	r3, [pc, #284]	; (8008134 <tcp_close_shutdown+0x1b0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d105      	bne.n	800802a <tcp_close_shutdown+0xa6>
 800801e:	4b45      	ldr	r3, [pc, #276]	; (8008134 <tcp_close_shutdown+0x1b0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	4a43      	ldr	r2, [pc, #268]	; (8008134 <tcp_close_shutdown+0x1b0>)
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e013      	b.n	8008052 <tcp_close_shutdown+0xce>
 800802a:	4b42      	ldr	r3, [pc, #264]	; (8008134 <tcp_close_shutdown+0x1b0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e00c      	b.n	800804c <tcp_close_shutdown+0xc8>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	d104      	bne.n	8008046 <tcp_close_shutdown+0xc2>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	60da      	str	r2, [r3, #12]
 8008044:	e005      	b.n	8008052 <tcp_close_shutdown+0xce>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1ef      	bne.n	8008032 <tcp_close_shutdown+0xae>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	60da      	str	r2, [r3, #12]
 8008058:	4b37      	ldr	r3, [pc, #220]	; (8008138 <tcp_close_shutdown+0x1b4>)
 800805a:	2201      	movs	r2, #1
 800805c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800805e:	4b37      	ldr	r3, [pc, #220]	; (800813c <tcp_close_shutdown+0x1b8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d102      	bne.n	800806e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008068:	f003 fd5a 	bl	800bb20 <tcp_trigger_input_pcb_close>
 800806c:	e002      	b.n	8008074 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fed6 	bl	8007e20 <tcp_free>
      }
      return ERR_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	e050      	b.n	800811a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7d1b      	ldrb	r3, [r3, #20]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d03b      	beq.n	80080f8 <tcp_close_shutdown+0x174>
 8008080:	2b02      	cmp	r3, #2
 8008082:	dc44      	bgt.n	800810e <tcp_close_shutdown+0x18a>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <tcp_close_shutdown+0x10a>
 8008088:	2b01      	cmp	r3, #1
 800808a:	d02a      	beq.n	80080e2 <tcp_close_shutdown+0x15e>
 800808c:	e03f      	b.n	800810e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	8adb      	ldrh	r3, [r3, #22]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d021      	beq.n	80080da <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008096:	4b2a      	ldr	r3, [pc, #168]	; (8008140 <tcp_close_shutdown+0x1bc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d105      	bne.n	80080ac <tcp_close_shutdown+0x128>
 80080a0:	4b27      	ldr	r3, [pc, #156]	; (8008140 <tcp_close_shutdown+0x1bc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	4a26      	ldr	r2, [pc, #152]	; (8008140 <tcp_close_shutdown+0x1bc>)
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e013      	b.n	80080d4 <tcp_close_shutdown+0x150>
 80080ac:	4b24      	ldr	r3, [pc, #144]	; (8008140 <tcp_close_shutdown+0x1bc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	e00c      	b.n	80080ce <tcp_close_shutdown+0x14a>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d104      	bne.n	80080c8 <tcp_close_shutdown+0x144>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	e005      	b.n	80080d4 <tcp_close_shutdown+0x150>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	60bb      	str	r3, [r7, #8]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1ef      	bne.n	80080b4 <tcp_close_shutdown+0x130>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff fea0 	bl	8007e20 <tcp_free>
      break;
 80080e0:	e01a      	b.n	8008118 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff ff14 	bl	8007f10 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	4816      	ldr	r0, [pc, #88]	; (8008144 <tcp_close_shutdown+0x1c0>)
 80080ec:	f001 f8a8 	bl	8009240 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff feb1 	bl	8007e58 <tcp_free_listen>
      break;
 80080f6:	e00f      	b.n	8008118 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	480e      	ldr	r0, [pc, #56]	; (8008134 <tcp_close_shutdown+0x1b0>)
 80080fc:	f001 f8a0 	bl	8009240 <tcp_pcb_remove>
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <tcp_close_shutdown+0x1b4>)
 8008102:	2201      	movs	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fe8a 	bl	8007e20 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800810c:	e004      	b.n	8008118 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f81a 	bl	8008148 <tcp_close_shutdown_fin>
 8008114:	4603      	mov	r3, r0
 8008116:	e000      	b.n	800811a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bdb0      	pop	{r4, r5, r7, pc}
 8008122:	bf00      	nop
 8008124:	080117dc 	.word	0x080117dc
 8008128:	080118b0 	.word	0x080118b0
 800812c:	08011820 	.word	0x08011820
 8008130:	080118d0 	.word	0x080118d0
 8008134:	20008ba8 	.word	0x20008ba8
 8008138:	20008ba4 	.word	0x20008ba4
 800813c:	20008bbc 	.word	0x20008bbc
 8008140:	20008bb4 	.word	0x20008bb4
 8008144:	20008bb0 	.word	0x20008bb0

08008148 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <tcp_close_shutdown_fin+0x1c>
 8008156:	4b2e      	ldr	r3, [pc, #184]	; (8008210 <tcp_close_shutdown_fin+0xc8>)
 8008158:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800815c:	492d      	ldr	r1, [pc, #180]	; (8008214 <tcp_close_shutdown_fin+0xcc>)
 800815e:	482e      	ldr	r0, [pc, #184]	; (8008218 <tcp_close_shutdown_fin+0xd0>)
 8008160:	f007 fdb0 	bl	800fcc4 <iprintf>

  switch (pcb->state) {
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	7d1b      	ldrb	r3, [r3, #20]
 8008168:	2b07      	cmp	r3, #7
 800816a:	d020      	beq.n	80081ae <tcp_close_shutdown_fin+0x66>
 800816c:	2b07      	cmp	r3, #7
 800816e:	dc2b      	bgt.n	80081c8 <tcp_close_shutdown_fin+0x80>
 8008170:	2b03      	cmp	r3, #3
 8008172:	d002      	beq.n	800817a <tcp_close_shutdown_fin+0x32>
 8008174:	2b04      	cmp	r3, #4
 8008176:	d00d      	beq.n	8008194 <tcp_close_shutdown_fin+0x4c>
 8008178:	e026      	b.n	80081c8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f003 fee2 	bl	800bf44 <tcp_send_fin>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11f      	bne.n	80081cc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2205      	movs	r2, #5
 8008190:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008192:	e01b      	b.n	80081cc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f003 fed5 	bl	800bf44 <tcp_send_fin>
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800819e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d114      	bne.n	80081d0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2205      	movs	r2, #5
 80081aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80081ac:	e010      	b.n	80081d0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f003 fec8 	bl	800bf44 <tcp_send_fin>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80081b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d109      	bne.n	80081d4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2209      	movs	r2, #9
 80081c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80081c6:	e005      	b.n	80081d4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e01c      	b.n	8008206 <tcp_close_shutdown_fin+0xbe>
      break;
 80081cc:	bf00      	nop
 80081ce:	e002      	b.n	80081d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80081d0:	bf00      	nop
 80081d2:	e000      	b.n	80081d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80081d4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80081d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d103      	bne.n	80081e6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f003 ffee 	bl	800c1c0 <tcp_output>
 80081e4:	e00d      	b.n	8008202 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80081e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d108      	bne.n	8008202 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	8b5b      	ldrh	r3, [r3, #26]
 80081f4:	f043 0308 	orr.w	r3, r3, #8
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	e001      	b.n	8008206 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	080117dc 	.word	0x080117dc
 8008214:	0801188c 	.word	0x0801188c
 8008218:	08011820 	.word	0x08011820

0800821c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <tcp_close+0x22>
 800822a:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <tcp_close+0x4c>)
 800822c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008230:	490e      	ldr	r1, [pc, #56]	; (800826c <tcp_close+0x50>)
 8008232:	480f      	ldr	r0, [pc, #60]	; (8008270 <tcp_close+0x54>)
 8008234:	f007 fd46 	bl	800fcc4 <iprintf>
 8008238:	f06f 030f 	mvn.w	r3, #15
 800823c:	e00f      	b.n	800825e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7d1b      	ldrb	r3, [r3, #20]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d006      	beq.n	8008254 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	8b5b      	ldrh	r3, [r3, #26]
 800824a:	f043 0310 	orr.w	r3, r3, #16
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008254:	2101      	movs	r1, #1
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff fe94 	bl	8007f84 <tcp_close_shutdown>
 800825c:	4603      	mov	r3, r0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	080117dc 	.word	0x080117dc
 800826c:	080118ec 	.word	0x080118ec
 8008270:	08011820 	.word	0x08011820

08008274 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08e      	sub	sp, #56	; 0x38
 8008278:	af04      	add	r7, sp, #16
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d107      	bne.n	8008294 <tcp_abandon+0x20>
 8008284:	4b52      	ldr	r3, [pc, #328]	; (80083d0 <tcp_abandon+0x15c>)
 8008286:	f240 223d 	movw	r2, #573	; 0x23d
 800828a:	4952      	ldr	r1, [pc, #328]	; (80083d4 <tcp_abandon+0x160>)
 800828c:	4852      	ldr	r0, [pc, #328]	; (80083d8 <tcp_abandon+0x164>)
 800828e:	f007 fd19 	bl	800fcc4 <iprintf>
 8008292:	e099      	b.n	80083c8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7d1b      	ldrb	r3, [r3, #20]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d106      	bne.n	80082aa <tcp_abandon+0x36>
 800829c:	4b4c      	ldr	r3, [pc, #304]	; (80083d0 <tcp_abandon+0x15c>)
 800829e:	f44f 7210 	mov.w	r2, #576	; 0x240
 80082a2:	494e      	ldr	r1, [pc, #312]	; (80083dc <tcp_abandon+0x168>)
 80082a4:	484c      	ldr	r0, [pc, #304]	; (80083d8 <tcp_abandon+0x164>)
 80082a6:	f007 fd0d 	bl	800fcc4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	7d1b      	ldrb	r3, [r3, #20]
 80082ae:	2b0a      	cmp	r3, #10
 80082b0:	d107      	bne.n	80082c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	484a      	ldr	r0, [pc, #296]	; (80083e0 <tcp_abandon+0x16c>)
 80082b6:	f000 ffc3 	bl	8009240 <tcp_pcb_remove>
    tcp_free(pcb);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fdb0 	bl	8007e20 <tcp_free>
 80082c0:	e082      	b.n	80083c8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	7d1b      	ldrb	r3, [r3, #20]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d126      	bne.n	800833a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	8adb      	ldrh	r3, [r3, #22]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d02e      	beq.n	8008352 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80082f4:	4b3b      	ldr	r3, [pc, #236]	; (80083e4 <tcp_abandon+0x170>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d105      	bne.n	800830a <tcp_abandon+0x96>
 80082fe:	4b39      	ldr	r3, [pc, #228]	; (80083e4 <tcp_abandon+0x170>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	4a37      	ldr	r2, [pc, #220]	; (80083e4 <tcp_abandon+0x170>)
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	e013      	b.n	8008332 <tcp_abandon+0xbe>
 800830a:	4b36      	ldr	r3, [pc, #216]	; (80083e4 <tcp_abandon+0x170>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e00c      	b.n	800832c <tcp_abandon+0xb8>
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	429a      	cmp	r2, r3
 800831a:	d104      	bne.n	8008326 <tcp_abandon+0xb2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	60da      	str	r2, [r3, #12]
 8008324:	e005      	b.n	8008332 <tcp_abandon+0xbe>
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1ef      	bne.n	8008312 <tcp_abandon+0x9e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	60da      	str	r2, [r3, #12]
 8008338:	e00b      	b.n	8008352 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	8adb      	ldrh	r3, [r3, #22]
 8008342:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	4828      	ldr	r0, [pc, #160]	; (80083e8 <tcp_abandon+0x174>)
 8008348:	f000 ff7a 	bl	8009240 <tcp_pcb_remove>
 800834c:	4b27      	ldr	r3, [pc, #156]	; (80083ec <tcp_abandon+0x178>)
 800834e:	2201      	movs	r2, #1
 8008350:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fd1c 	bl	8008d9c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d004      	beq.n	8008376 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fd13 	bl	8008d9c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008382:	4618      	mov	r0, r3
 8008384:	f000 fd0a 	bl	8008d9c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00e      	beq.n	80083ac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3304      	adds	r3, #4
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	8b12      	ldrh	r2, [r2, #24]
 8008398:	9202      	str	r2, [sp, #8]
 800839a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800839c:	9201      	str	r2, [sp, #4]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	460b      	mov	r3, r1
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	69b9      	ldr	r1, [r7, #24]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f004 fcbe 	bl	800cd28 <tcp_rst>
    }
    last_state = pcb->state;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7d1b      	ldrb	r3, [r3, #20]
 80083b0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff fd34 	bl	8007e20 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <tcp_abandon+0x154>
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f06f 010c 	mvn.w	r1, #12
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	4798      	blx	r3
  }
}
 80083c8:	3728      	adds	r7, #40	; 0x28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	080117dc 	.word	0x080117dc
 80083d4:	08011920 	.word	0x08011920
 80083d8:	08011820 	.word	0x08011820
 80083dc:	0801193c 	.word	0x0801193c
 80083e0:	20008bb8 	.word	0x20008bb8
 80083e4:	20008bb4 	.word	0x20008bb4
 80083e8:	20008ba8 	.word	0x20008ba8
 80083ec:	20008ba4 	.word	0x20008ba4

080083f0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80083f8:	2101      	movs	r1, #1
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff ff3a 	bl	8008274 <tcp_abandon>
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <tcp_update_rcv_ann_wnd+0x1c>
 8008416:	4b25      	ldr	r3, [pc, #148]	; (80084ac <tcp_update_rcv_ann_wnd+0xa4>)
 8008418:	f240 32a6 	movw	r2, #934	; 0x3a6
 800841c:	4924      	ldr	r1, [pc, #144]	; (80084b0 <tcp_update_rcv_ann_wnd+0xa8>)
 800841e:	4825      	ldr	r0, [pc, #148]	; (80084b4 <tcp_update_rcv_ann_wnd+0xac>)
 8008420:	f007 fc50 	bl	800fcc4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800842c:	4413      	add	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008438:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800843c:	bf28      	it	cs
 800843e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008442:	b292      	uxth	r2, r2
 8008444:	4413      	add	r3, r2
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	db08      	blt.n	8008460 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	e020      	b.n	80084a2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	dd03      	ble.n	8008476 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008474:	e014      	b.n	80084a0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008488:	d306      	bcc.n	8008498 <tcp_update_rcv_ann_wnd+0x90>
 800848a:	4b08      	ldr	r3, [pc, #32]	; (80084ac <tcp_update_rcv_ann_wnd+0xa4>)
 800848c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008490:	4909      	ldr	r1, [pc, #36]	; (80084b8 <tcp_update_rcv_ann_wnd+0xb0>)
 8008492:	4808      	ldr	r0, [pc, #32]	; (80084b4 <tcp_update_rcv_ann_wnd+0xac>)
 8008494:	f007 fc16 	bl	800fcc4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80084a0:	2300      	movs	r3, #0
  }
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	080117dc 	.word	0x080117dc
 80084b0:	08011a38 	.word	0x08011a38
 80084b4:	08011820 	.word	0x08011820
 80084b8:	08011a5c 	.word	0x08011a5c

080084bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d107      	bne.n	80084de <tcp_recved+0x22>
 80084ce:	4b1f      	ldr	r3, [pc, #124]	; (800854c <tcp_recved+0x90>)
 80084d0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80084d4:	491e      	ldr	r1, [pc, #120]	; (8008550 <tcp_recved+0x94>)
 80084d6:	481f      	ldr	r0, [pc, #124]	; (8008554 <tcp_recved+0x98>)
 80084d8:	f007 fbf4 	bl	800fcc4 <iprintf>
 80084dc:	e032      	b.n	8008544 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	7d1b      	ldrb	r3, [r3, #20]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d106      	bne.n	80084f4 <tcp_recved+0x38>
 80084e6:	4b19      	ldr	r3, [pc, #100]	; (800854c <tcp_recved+0x90>)
 80084e8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80084ec:	491a      	ldr	r1, [pc, #104]	; (8008558 <tcp_recved+0x9c>)
 80084ee:	4819      	ldr	r0, [pc, #100]	; (8008554 <tcp_recved+0x98>)
 80084f0:	f007 fbe8 	bl	800fcc4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80084f8:	887b      	ldrh	r3, [r7, #2]
 80084fa:	4413      	add	r3, r2
 80084fc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80084fe:	89fb      	ldrh	r3, [r7, #14]
 8008500:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008504:	d804      	bhi.n	8008510 <tcp_recved+0x54>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850a:	89fa      	ldrh	r2, [r7, #14]
 800850c:	429a      	cmp	r2, r3
 800850e:	d204      	bcs.n	800851a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008516:	851a      	strh	r2, [r3, #40]	; 0x28
 8008518:	e002      	b.n	8008520 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	89fa      	ldrh	r2, [r7, #14]
 800851e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ff71 	bl	8008408 <tcp_update_rcv_ann_wnd>
 8008526:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800852e:	d309      	bcc.n	8008544 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	8b5b      	ldrh	r3, [r3, #26]
 8008534:	f043 0302 	orr.w	r3, r3, #2
 8008538:	b29a      	uxth	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f003 fe3e 	bl	800c1c0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	080117dc 	.word	0x080117dc
 8008550:	08011a78 	.word	0x08011a78
 8008554:	08011820 	.word	0x08011820
 8008558:	08011a90 	.word	0x08011a90

0800855c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800855c:	b5b0      	push	{r4, r5, r7, lr}
 800855e:	b090      	sub	sp, #64	; 0x40
 8008560:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008568:	4b94      	ldr	r3, [pc, #592]	; (80087bc <tcp_slowtmr+0x260>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3301      	adds	r3, #1
 800856e:	4a93      	ldr	r2, [pc, #588]	; (80087bc <tcp_slowtmr+0x260>)
 8008570:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008572:	4b93      	ldr	r3, [pc, #588]	; (80087c0 <tcp_slowtmr+0x264>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	3301      	adds	r3, #1
 8008578:	b2da      	uxtb	r2, r3
 800857a:	4b91      	ldr	r3, [pc, #580]	; (80087c0 <tcp_slowtmr+0x264>)
 800857c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008582:	4b90      	ldr	r3, [pc, #576]	; (80087c4 <tcp_slowtmr+0x268>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008588:	e29d      	b.n	8008ac6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	7d1b      	ldrb	r3, [r3, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <tcp_slowtmr+0x44>
 8008592:	4b8d      	ldr	r3, [pc, #564]	; (80087c8 <tcp_slowtmr+0x26c>)
 8008594:	f240 42be 	movw	r2, #1214	; 0x4be
 8008598:	498c      	ldr	r1, [pc, #560]	; (80087cc <tcp_slowtmr+0x270>)
 800859a:	488d      	ldr	r0, [pc, #564]	; (80087d0 <tcp_slowtmr+0x274>)
 800859c:	f007 fb92 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	7d1b      	ldrb	r3, [r3, #20]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d106      	bne.n	80085b6 <tcp_slowtmr+0x5a>
 80085a8:	4b87      	ldr	r3, [pc, #540]	; (80087c8 <tcp_slowtmr+0x26c>)
 80085aa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80085ae:	4989      	ldr	r1, [pc, #548]	; (80087d4 <tcp_slowtmr+0x278>)
 80085b0:	4887      	ldr	r0, [pc, #540]	; (80087d0 <tcp_slowtmr+0x274>)
 80085b2:	f007 fb87 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	7d1b      	ldrb	r3, [r3, #20]
 80085ba:	2b0a      	cmp	r3, #10
 80085bc:	d106      	bne.n	80085cc <tcp_slowtmr+0x70>
 80085be:	4b82      	ldr	r3, [pc, #520]	; (80087c8 <tcp_slowtmr+0x26c>)
 80085c0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80085c4:	4984      	ldr	r1, [pc, #528]	; (80087d8 <tcp_slowtmr+0x27c>)
 80085c6:	4882      	ldr	r0, [pc, #520]	; (80087d0 <tcp_slowtmr+0x274>)
 80085c8:	f007 fb7c 	bl	800fcc4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ce:	7f9a      	ldrb	r2, [r3, #30]
 80085d0:	4b7b      	ldr	r3, [pc, #492]	; (80087c0 <tcp_slowtmr+0x264>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d105      	bne.n	80085e4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80085e2:	e270      	b.n	8008ac6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80085e4:	4b76      	ldr	r3, [pc, #472]	; (80087c0 <tcp_slowtmr+0x264>)
 80085e6:	781a      	ldrb	r2, [r3, #0]
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	7d1b      	ldrb	r3, [r3, #20]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d10a      	bne.n	8008616 <tcp_slowtmr+0xba>
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008606:	2b05      	cmp	r3, #5
 8008608:	d905      	bls.n	8008616 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800860a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800860e:	3301      	adds	r3, #1
 8008610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008614:	e11e      	b.n	8008854 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800861c:	2b0b      	cmp	r3, #11
 800861e:	d905      	bls.n	800862c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008624:	3301      	adds	r3, #1
 8008626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800862a:	e113      	b.n	8008854 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008632:	2b00      	cmp	r3, #0
 8008634:	d075      	beq.n	8008722 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863a:	2b00      	cmp	r3, #0
 800863c:	d006      	beq.n	800864c <tcp_slowtmr+0xf0>
 800863e:	4b62      	ldr	r3, [pc, #392]	; (80087c8 <tcp_slowtmr+0x26c>)
 8008640:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008644:	4965      	ldr	r1, [pc, #404]	; (80087dc <tcp_slowtmr+0x280>)
 8008646:	4862      	ldr	r0, [pc, #392]	; (80087d0 <tcp_slowtmr+0x274>)
 8008648:	f007 fb3c 	bl	800fcc4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d106      	bne.n	8008662 <tcp_slowtmr+0x106>
 8008654:	4b5c      	ldr	r3, [pc, #368]	; (80087c8 <tcp_slowtmr+0x26c>)
 8008656:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800865a:	4961      	ldr	r1, [pc, #388]	; (80087e0 <tcp_slowtmr+0x284>)
 800865c:	485c      	ldr	r0, [pc, #368]	; (80087d0 <tcp_slowtmr+0x274>)
 800865e:	f007 fb31 	bl	800fcc4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008668:	2b0b      	cmp	r3, #11
 800866a:	d905      	bls.n	8008678 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800866c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008670:	3301      	adds	r3, #1
 8008672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008676:	e0ed      	b.n	8008854 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800867e:	3b01      	subs	r3, #1
 8008680:	4a58      	ldr	r2, [pc, #352]	; (80087e4 <tcp_slowtmr+0x288>)
 8008682:	5cd3      	ldrb	r3, [r2, r3]
 8008684:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800868c:	7c7a      	ldrb	r2, [r7, #17]
 800868e:	429a      	cmp	r2, r3
 8008690:	d907      	bls.n	80086a2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008698:	3301      	adds	r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80086a8:	7c7a      	ldrb	r2, [r7, #17]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	f200 80d2 	bhi.w	8008854 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80086b0:	2301      	movs	r3, #1
 80086b2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d108      	bne.n	80086d0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80086be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086c0:	f004 fc26 	bl	800cf10 <tcp_zero_window_probe>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d014      	beq.n	80086f4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80086ca:	2300      	movs	r3, #0
 80086cc:	623b      	str	r3, [r7, #32]
 80086ce:	e011      	b.n	80086f4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086d6:	4619      	mov	r1, r3
 80086d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086da:	f003 faeb 	bl	800bcb4 <tcp_split_unsent_seg>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d107      	bne.n	80086f4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80086e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086e6:	f003 fd6b 	bl	800c1c0 <tcp_output>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80ac 	beq.w	8008854 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008706:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800870a:	2b06      	cmp	r3, #6
 800870c:	f200 80a2 	bhi.w	8008854 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008716:	3301      	adds	r3, #1
 8008718:	b2da      	uxtb	r2, r3
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008720:	e098      	b.n	8008854 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008728:	2b00      	cmp	r3, #0
 800872a:	db0f      	blt.n	800874c <tcp_slowtmr+0x1f0>
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008732:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008736:	4293      	cmp	r3, r2
 8008738:	d008      	beq.n	800874c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008740:	b29b      	uxth	r3, r3
 8008742:	3301      	adds	r3, #1
 8008744:	b29b      	uxth	r3, r3
 8008746:	b21a      	sxth	r2, r3
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008758:	429a      	cmp	r2, r3
 800875a:	db7b      	blt.n	8008854 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800875c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800875e:	f004 f821 	bl	800c7a4 <tcp_rexmit_rto_prepare>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d007      	beq.n	8008778 <tcp_slowtmr+0x21c>
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876c:	2b00      	cmp	r3, #0
 800876e:	d171      	bne.n	8008854 <tcp_slowtmr+0x2f8>
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d06d      	beq.n	8008854 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	7d1b      	ldrb	r3, [r3, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d03a      	beq.n	80087f6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008782:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008786:	2b0c      	cmp	r3, #12
 8008788:	bf28      	it	cs
 800878a:	230c      	movcs	r3, #12
 800878c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008794:	10db      	asrs	r3, r3, #3
 8008796:	b21b      	sxth	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80087a0:	4413      	add	r3, r2
 80087a2:	7efa      	ldrb	r2, [r7, #27]
 80087a4:	4910      	ldr	r1, [pc, #64]	; (80087e8 <tcp_slowtmr+0x28c>)
 80087a6:	5c8a      	ldrb	r2, [r1, r2]
 80087a8:	4093      	lsls	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80087b2:	4293      	cmp	r3, r2
 80087b4:	dc1a      	bgt.n	80087ec <tcp_slowtmr+0x290>
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	b21a      	sxth	r2, r3
 80087ba:	e019      	b.n	80087f0 <tcp_slowtmr+0x294>
 80087bc:	20008bac 	.word	0x20008bac
 80087c0:	200000d2 	.word	0x200000d2
 80087c4:	20008ba8 	.word	0x20008ba8
 80087c8:	080117dc 	.word	0x080117dc
 80087cc:	08011b20 	.word	0x08011b20
 80087d0:	08011820 	.word	0x08011820
 80087d4:	08011b4c 	.word	0x08011b4c
 80087d8:	08011b78 	.word	0x08011b78
 80087dc:	08011ba8 	.word	0x08011ba8
 80087e0:	08011bdc 	.word	0x08011bdc
 80087e4:	080137a8 	.word	0x080137a8
 80087e8:	08013798 	.word	0x08013798
 80087ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80087f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f8:	2200      	movs	r2, #0
 80087fa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008808:	4293      	cmp	r3, r2
 800880a:	bf28      	it	cs
 800880c:	4613      	movcs	r3, r2
 800880e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008810:	8a7b      	ldrh	r3, [r7, #18]
 8008812:	085b      	lsrs	r3, r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	b29b      	uxth	r3, r3
 800882a:	429a      	cmp	r2, r3
 800882c:	d206      	bcs.n	800883c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	2200      	movs	r2, #0
 800884a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800884e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008850:	f004 f818 	bl	800c884 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	7d1b      	ldrb	r3, [r3, #20]
 8008858:	2b06      	cmp	r3, #6
 800885a:	d111      	bne.n	8008880 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	8b5b      	ldrh	r3, [r3, #26]
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00b      	beq.n	8008880 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008868:	4b9c      	ldr	r3, [pc, #624]	; (8008adc <tcp_slowtmr+0x580>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b28      	cmp	r3, #40	; 0x28
 8008874:	d904      	bls.n	8008880 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800887a:	3301      	adds	r3, #1
 800887c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	7a5b      	ldrb	r3, [r3, #9]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d04a      	beq.n	8008922 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008890:	2b04      	cmp	r3, #4
 8008892:	d003      	beq.n	800889c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008898:	2b07      	cmp	r3, #7
 800889a:	d142      	bne.n	8008922 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800889c:	4b8f      	ldr	r3, [pc, #572]	; (8008adc <tcp_slowtmr+0x580>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80088ac:	4b8c      	ldr	r3, [pc, #560]	; (8008ae0 <tcp_slowtmr+0x584>)
 80088ae:	440b      	add	r3, r1
 80088b0:	498c      	ldr	r1, [pc, #560]	; (8008ae4 <tcp_slowtmr+0x588>)
 80088b2:	fba1 1303 	umull	r1, r3, r1, r3
 80088b6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d90a      	bls.n	80088d2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80088bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088c0:	3301      	adds	r3, #1
 80088c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80088c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088ca:	3301      	adds	r3, #1
 80088cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088d0:	e027      	b.n	8008922 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80088d2:	4b82      	ldr	r3, [pc, #520]	; (8008adc <tcp_slowtmr+0x580>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80088dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088de:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80088e8:	4618      	mov	r0, r3
 80088ea:	4b7f      	ldr	r3, [pc, #508]	; (8008ae8 <tcp_slowtmr+0x58c>)
 80088ec:	fb03 f300 	mul.w	r3, r3, r0
 80088f0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80088f2:	497c      	ldr	r1, [pc, #496]	; (8008ae4 <tcp_slowtmr+0x588>)
 80088f4:	fba1 1303 	umull	r1, r3, r1, r3
 80088f8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d911      	bls.n	8008922 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80088fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008900:	f004 fac6 	bl	800ce90 <tcp_keepalive>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800890a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800890e:	2b00      	cmp	r3, #0
 8008910:	d107      	bne.n	8008922 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008918:	3301      	adds	r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008926:	2b00      	cmp	r3, #0
 8008928:	d011      	beq.n	800894e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800892a:	4b6c      	ldr	r3, [pc, #432]	; (8008adc <tcp_slowtmr+0x580>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	1ad2      	subs	r2, r2, r3
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800893a:	4619      	mov	r1, r3
 800893c:	460b      	mov	r3, r1
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	440b      	add	r3, r1
 8008942:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008944:	429a      	cmp	r2, r3
 8008946:	d302      	bcc.n	800894e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800894a:	f000 fddd 	bl	8009508 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	7d1b      	ldrb	r3, [r3, #20]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d10b      	bne.n	800896e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008956:	4b61      	ldr	r3, [pc, #388]	; (8008adc <tcp_slowtmr+0x580>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b28      	cmp	r3, #40	; 0x28
 8008962:	d904      	bls.n	800896e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008968:	3301      	adds	r3, #1
 800896a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800896e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008970:	7d1b      	ldrb	r3, [r3, #20]
 8008972:	2b09      	cmp	r3, #9
 8008974:	d10b      	bne.n	800898e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008976:	4b59      	ldr	r3, [pc, #356]	; (8008adc <tcp_slowtmr+0x580>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2bf0      	cmp	r3, #240	; 0xf0
 8008982:	d904      	bls.n	800898e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008988:	3301      	adds	r3, #1
 800898a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800898e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008992:	2b00      	cmp	r3, #0
 8008994:	d060      	beq.n	8008a58 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800899c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800899e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a0:	f000 fbfe 	bl	80091a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d010      	beq.n	80089cc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80089aa:	4b50      	ldr	r3, [pc, #320]	; (8008aec <tcp_slowtmr+0x590>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d106      	bne.n	80089c2 <tcp_slowtmr+0x466>
 80089b4:	4b4e      	ldr	r3, [pc, #312]	; (8008af0 <tcp_slowtmr+0x594>)
 80089b6:	f240 526d 	movw	r2, #1389	; 0x56d
 80089ba:	494e      	ldr	r1, [pc, #312]	; (8008af4 <tcp_slowtmr+0x598>)
 80089bc:	484e      	ldr	r0, [pc, #312]	; (8008af8 <tcp_slowtmr+0x59c>)
 80089be:	f007 f981 	bl	800fcc4 <iprintf>
        prev->next = pcb->next;
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	60da      	str	r2, [r3, #12]
 80089ca:	e00f      	b.n	80089ec <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80089cc:	4b47      	ldr	r3, [pc, #284]	; (8008aec <tcp_slowtmr+0x590>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d006      	beq.n	80089e4 <tcp_slowtmr+0x488>
 80089d6:	4b46      	ldr	r3, [pc, #280]	; (8008af0 <tcp_slowtmr+0x594>)
 80089d8:	f240 5271 	movw	r2, #1393	; 0x571
 80089dc:	4947      	ldr	r1, [pc, #284]	; (8008afc <tcp_slowtmr+0x5a0>)
 80089de:	4846      	ldr	r0, [pc, #280]	; (8008af8 <tcp_slowtmr+0x59c>)
 80089e0:	f007 f970 	bl	800fcc4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	4a40      	ldr	r2, [pc, #256]	; (8008aec <tcp_slowtmr+0x590>)
 80089ea:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80089ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d013      	beq.n	8008a1c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80089fc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	3304      	adds	r3, #4
 8008a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a04:	8ad2      	ldrh	r2, [r2, #22]
 8008a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a08:	8b09      	ldrh	r1, [r1, #24]
 8008a0a:	9102      	str	r1, [sp, #8]
 8008a0c:	9201      	str	r2, [sp, #4]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	462b      	mov	r3, r5
 8008a12:	4622      	mov	r2, r4
 8008a14:	4601      	mov	r1, r0
 8008a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a18:	f004 f986 	bl	800cd28 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	7d1b      	ldrb	r3, [r3, #20]
 8008a26:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008a32:	6838      	ldr	r0, [r7, #0]
 8008a34:	f7ff f9f4 	bl	8007e20 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008a38:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <tcp_slowtmr+0x5a4>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <tcp_slowtmr+0x4f2>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f06f 010c 	mvn.w	r1, #12
 8008a4a:	68b8      	ldr	r0, [r7, #8]
 8008a4c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008a4e:	4b2c      	ldr	r3, [pc, #176]	; (8008b00 <tcp_slowtmr+0x5a4>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d037      	beq.n	8008ac6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008a56:	e592      	b.n	800857e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	7f1b      	ldrb	r3, [r3, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	7f1a      	ldrb	r2, [r3, #28]
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	7f5b      	ldrb	r3, [r3, #29]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d325      	bcc.n	8008ac6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008a80:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <tcp_slowtmr+0x5a4>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <tcp_slowtmr+0x54c>
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a98:	6912      	ldr	r2, [r2, #16]
 8008a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008aa6:	e002      	b.n	8008aae <tcp_slowtmr+0x552>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008aae:	4b14      	ldr	r3, [pc, #80]	; (8008b00 <tcp_slowtmr+0x5a4>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d000      	beq.n	8008ab8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008ab6:	e562      	b.n	800857e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008ab8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac2:	f003 fb7d 	bl	800c1c0 <tcp_output>
  while (pcb != NULL) {
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f ad5e 	bne.w	800858a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <tcp_slowtmr+0x5a8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008ad8:	e069      	b.n	8008bae <tcp_slowtmr+0x652>
 8008ada:	bf00      	nop
 8008adc:	20008bac 	.word	0x20008bac
 8008ae0:	000a4cb8 	.word	0x000a4cb8
 8008ae4:	10624dd3 	.word	0x10624dd3
 8008ae8:	000124f8 	.word	0x000124f8
 8008aec:	20008ba8 	.word	0x20008ba8
 8008af0:	080117dc 	.word	0x080117dc
 8008af4:	08011c14 	.word	0x08011c14
 8008af8:	08011820 	.word	0x08011820
 8008afc:	08011c40 	.word	0x08011c40
 8008b00:	20008ba4 	.word	0x20008ba4
 8008b04:	20008bb8 	.word	0x20008bb8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	7d1b      	ldrb	r3, [r3, #20]
 8008b0c:	2b0a      	cmp	r3, #10
 8008b0e:	d006      	beq.n	8008b1e <tcp_slowtmr+0x5c2>
 8008b10:	4b2b      	ldr	r3, [pc, #172]	; (8008bc0 <tcp_slowtmr+0x664>)
 8008b12:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008b16:	492b      	ldr	r1, [pc, #172]	; (8008bc4 <tcp_slowtmr+0x668>)
 8008b18:	482b      	ldr	r0, [pc, #172]	; (8008bc8 <tcp_slowtmr+0x66c>)
 8008b1a:	f007 f8d3 	bl	800fcc4 <iprintf>
    pcb_remove = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008b24:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <tcp_slowtmr+0x670>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2bf0      	cmp	r3, #240	; 0xf0
 8008b30:	d904      	bls.n	8008b3c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b36:	3301      	adds	r3, #1
 8008b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d02f      	beq.n	8008ba4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b46:	f000 fb2b 	bl	80091a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d010      	beq.n	8008b72 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008b50:	4b1f      	ldr	r3, [pc, #124]	; (8008bd0 <tcp_slowtmr+0x674>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d106      	bne.n	8008b68 <tcp_slowtmr+0x60c>
 8008b5a:	4b19      	ldr	r3, [pc, #100]	; (8008bc0 <tcp_slowtmr+0x664>)
 8008b5c:	f240 52af 	movw	r2, #1455	; 0x5af
 8008b60:	491c      	ldr	r1, [pc, #112]	; (8008bd4 <tcp_slowtmr+0x678>)
 8008b62:	4819      	ldr	r0, [pc, #100]	; (8008bc8 <tcp_slowtmr+0x66c>)
 8008b64:	f007 f8ae 	bl	800fcc4 <iprintf>
        prev->next = pcb->next;
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	60da      	str	r2, [r3, #12]
 8008b70:	e00f      	b.n	8008b92 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008b72:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <tcp_slowtmr+0x674>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d006      	beq.n	8008b8a <tcp_slowtmr+0x62e>
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <tcp_slowtmr+0x664>)
 8008b7e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008b82:	4915      	ldr	r1, [pc, #84]	; (8008bd8 <tcp_slowtmr+0x67c>)
 8008b84:	4810      	ldr	r0, [pc, #64]	; (8008bc8 <tcp_slowtmr+0x66c>)
 8008b86:	f007 f89d 	bl	800fcc4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	4a10      	ldr	r2, [pc, #64]	; (8008bd0 <tcp_slowtmr+0x674>)
 8008b90:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008b9c:	69f8      	ldr	r0, [r7, #28]
 8008b9e:	f7ff f93f 	bl	8007e20 <tcp_free>
 8008ba2:	e004      	b.n	8008bae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1a9      	bne.n	8008b08 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	3730      	adds	r7, #48	; 0x30
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	080117dc 	.word	0x080117dc
 8008bc4:	08011c6c 	.word	0x08011c6c
 8008bc8:	08011820 	.word	0x08011820
 8008bcc:	20008bac 	.word	0x20008bac
 8008bd0:	20008bb8 	.word	0x20008bb8
 8008bd4:	08011c9c 	.word	0x08011c9c
 8008bd8:	08011cc4 	.word	0x08011cc4

08008bdc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008be2:	4b2d      	ldr	r3, [pc, #180]	; (8008c98 <tcp_fasttmr+0xbc>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	4b2b      	ldr	r3, [pc, #172]	; (8008c98 <tcp_fasttmr+0xbc>)
 8008bec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008bee:	4b2b      	ldr	r3, [pc, #172]	; (8008c9c <tcp_fasttmr+0xc0>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008bf4:	e048      	b.n	8008c88 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	7f9a      	ldrb	r2, [r3, #30]
 8008bfa:	4b27      	ldr	r3, [pc, #156]	; (8008c98 <tcp_fasttmr+0xbc>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d03f      	beq.n	8008c82 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008c02:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <tcp_fasttmr+0xbc>)
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8b5b      	ldrh	r3, [r3, #26]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d010      	beq.n	8008c38 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	8b5b      	ldrh	r3, [r3, #26]
 8008c1a:	f043 0302 	orr.w	r3, r3, #2
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f003 facb 	bl	800c1c0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	8b5b      	ldrh	r3, [r3, #26]
 8008c2e:	f023 0303 	bic.w	r3, r3, #3
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	8b5b      	ldrh	r3, [r3, #26]
 8008c3c:	f003 0308 	and.w	r3, r3, #8
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	8b5b      	ldrh	r3, [r3, #26]
 8008c48:	f023 0308 	bic.w	r3, r3, #8
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff fa78 	bl	8008148 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008c66:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <tcp_fasttmr+0xc4>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f819 	bl	8008ca4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008c72:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <tcp_fasttmr+0xc4>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d000      	beq.n	8008c7c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008c7a:	e7b8      	b.n	8008bee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	607b      	str	r3, [r7, #4]
 8008c80:	e002      	b.n	8008c88 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1b3      	bne.n	8008bf6 <tcp_fasttmr+0x1a>
    }
  }
}
 8008c8e:	bf00      	nop
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	200000d2 	.word	0x200000d2
 8008c9c:	20008ba8 	.word	0x20008ba8
 8008ca0:	20008ba4 	.word	0x20008ba4

08008ca4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008ca4:	b590      	push	{r4, r7, lr}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <tcp_process_refused_data+0x22>
 8008cb2:	4b37      	ldr	r3, [pc, #220]	; (8008d90 <tcp_process_refused_data+0xec>)
 8008cb4:	f240 6209 	movw	r2, #1545	; 0x609
 8008cb8:	4936      	ldr	r1, [pc, #216]	; (8008d94 <tcp_process_refused_data+0xf0>)
 8008cba:	4837      	ldr	r0, [pc, #220]	; (8008d98 <tcp_process_refused_data+0xf4>)
 8008cbc:	f007 f802 	bl	800fcc4 <iprintf>
 8008cc0:	f06f 030f 	mvn.w	r3, #15
 8008cc4:	e060      	b.n	8008d88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cca:	7b5b      	ldrb	r3, [r3, #13]
 8008ccc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cd2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <tcp_process_refused_data+0x58>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6918      	ldr	r0, [r3, #16]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	47a0      	blx	r4
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
 8008cfa:	e007      	b.n	8008d0c <tcp_process_refused_data+0x68>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	2000      	movs	r0, #0
 8008d04:	f000 f8a4 	bl	8008e50 <tcp_recv_null>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d12a      	bne.n	8008d6a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d033      	beq.n	8008d86 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d22:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008d26:	d005      	beq.n	8008d34 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <tcp_process_refused_data+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6918      	ldr	r0, [r3, #16]
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	47a0      	blx	r4
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]
 8008d54:	e001      	b.n	8008d5a <tcp_process_refused_data+0xb6>
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d5e:	f113 0f0d 	cmn.w	r3, #13
 8008d62:	d110      	bne.n	8008d86 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008d64:	f06f 030c 	mvn.w	r3, #12
 8008d68:	e00e      	b.n	8008d88 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6e:	f113 0f0d 	cmn.w	r3, #13
 8008d72:	d102      	bne.n	8008d7a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008d74:	f06f 030c 	mvn.w	r3, #12
 8008d78:	e006      	b.n	8008d88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008d80:	f06f 0304 	mvn.w	r3, #4
 8008d84:	e000      	b.n	8008d88 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd90      	pop	{r4, r7, pc}
 8008d90:	080117dc 	.word	0x080117dc
 8008d94:	08011cec 	.word	0x08011cec
 8008d98:	08011820 	.word	0x08011820

08008d9c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008da4:	e007      	b.n	8008db6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f80a 	bl	8008dc6 <tcp_seg_free>
    seg = next;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1f4      	bne.n	8008da6 <tcp_segs_free+0xa>
  }
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d004      	beq.n	8008de6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fd7d 	bl	80078e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	2003      	movs	r0, #3
 8008dea:	f7fd ff67 	bl	8006cbc <memp_free>
  }
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <tcp_seg_copy+0x1c>
 8008e06:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <tcp_seg_copy+0x4c>)
 8008e08:	f240 6282 	movw	r2, #1666	; 0x682
 8008e0c:	490e      	ldr	r1, [pc, #56]	; (8008e48 <tcp_seg_copy+0x50>)
 8008e0e:	480f      	ldr	r0, [pc, #60]	; (8008e4c <tcp_seg_copy+0x54>)
 8008e10:	f006 ff58 	bl	800fcc4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008e14:	2003      	movs	r0, #3
 8008e16:	f7fd ff05 	bl	8006c24 <memp_malloc>
 8008e1a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <tcp_seg_copy+0x2e>
    return NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e00a      	b.n	8008e3c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008e26:	2210      	movs	r2, #16
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f006 ff34 	bl	800fc98 <memcpy>
  pbuf_ref(cseg->p);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fdf3 	bl	8007a20 <pbuf_ref>
  return cseg;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	080117dc 	.word	0x080117dc
 8008e48:	08011d30 	.word	0x08011d30
 8008e4c:	08011820 	.word	0x08011820

08008e50 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d109      	bne.n	8008e78 <tcp_recv_null+0x28>
 8008e64:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <tcp_recv_null+0x60>)
 8008e66:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008e6a:	4912      	ldr	r1, [pc, #72]	; (8008eb4 <tcp_recv_null+0x64>)
 8008e6c:	4812      	ldr	r0, [pc, #72]	; (8008eb8 <tcp_recv_null+0x68>)
 8008e6e:	f006 ff29 	bl	800fcc4 <iprintf>
 8008e72:	f06f 030f 	mvn.w	r3, #15
 8008e76:	e016      	b.n	8008ea6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	891b      	ldrh	r3, [r3, #8]
 8008e82:	4619      	mov	r1, r3
 8008e84:	68b8      	ldr	r0, [r7, #8]
 8008e86:	f7ff fb19 	bl	80084bc <tcp_recved>
    pbuf_free(p);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7fe fd28 	bl	80078e0 <pbuf_free>
 8008e90:	e008      	b.n	8008ea4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008e9a:	68b8      	ldr	r0, [r7, #8]
 8008e9c:	f7ff f9be 	bl	800821c <tcp_close>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	e000      	b.n	8008ea6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	080117dc 	.word	0x080117dc
 8008eb4:	08011d4c 	.word	0x08011d4c
 8008eb8:	08011820 	.word	0x08011820

08008ebc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	db01      	blt.n	8008ed2 <tcp_kill_prio+0x16>
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	e000      	b.n	8008ed4 <tcp_kill_prio+0x18>
 8008ed2:	237f      	movs	r3, #127	; 0x7f
 8008ed4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d034      	beq.n	8008f46 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <tcp_kill_prio+0x94>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	e01f      	b.n	8008f32 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	7d5b      	ldrb	r3, [r3, #21]
 8008ef6:	7afa      	ldrb	r2, [r7, #11]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d80c      	bhi.n	8008f16 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008f00:	7afa      	ldrb	r2, [r7, #11]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d112      	bne.n	8008f2c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008f06:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <tcp_kill_prio+0x98>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d80a      	bhi.n	8008f2c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <tcp_kill_prio+0x98>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	7d5b      	ldrb	r3, [r3, #21]
 8008f2a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1dc      	bne.n	8008ef2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008f3e:	6938      	ldr	r0, [r7, #16]
 8008f40:	f7ff fa56 	bl	80083f0 <tcp_abort>
 8008f44:	e000      	b.n	8008f48 <tcp_kill_prio+0x8c>
    return;
 8008f46:	bf00      	nop
  }
}
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20008ba8 	.word	0x20008ba8
 8008f54:	20008bac 	.word	0x20008bac

08008f58 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	2b08      	cmp	r3, #8
 8008f66:	d009      	beq.n	8008f7c <tcp_kill_state+0x24>
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d006      	beq.n	8008f7c <tcp_kill_state+0x24>
 8008f6e:	4b1a      	ldr	r3, [pc, #104]	; (8008fd8 <tcp_kill_state+0x80>)
 8008f70:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008f74:	4919      	ldr	r1, [pc, #100]	; (8008fdc <tcp_kill_state+0x84>)
 8008f76:	481a      	ldr	r0, [pc, #104]	; (8008fe0 <tcp_kill_state+0x88>)
 8008f78:	f006 fea4 	bl	800fcc4 <iprintf>

  inactivity = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f84:	4b17      	ldr	r3, [pc, #92]	; (8008fe4 <tcp_kill_state+0x8c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	e017      	b.n	8008fbc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	7d1b      	ldrb	r3, [r3, #20]
 8008f90:	79fa      	ldrb	r2, [r7, #7]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d10f      	bne.n	8008fb6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f96:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <tcp_kill_state+0x90>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d807      	bhi.n	8008fb6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <tcp_kill_state+0x90>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e4      	bne.n	8008f8c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008fc8:	2100      	movs	r1, #0
 8008fca:	6938      	ldr	r0, [r7, #16]
 8008fcc:	f7ff f952 	bl	8008274 <tcp_abandon>
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	080117dc 	.word	0x080117dc
 8008fdc:	08011d68 	.word	0x08011d68
 8008fe0:	08011820 	.word	0x08011820
 8008fe4:	20008ba8 	.word	0x20008ba8
 8008fe8:	20008bac 	.word	0x20008bac

08008fec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ffa:	4b12      	ldr	r3, [pc, #72]	; (8009044 <tcp_kill_timewait+0x58>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e012      	b.n	8009028 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009002:	4b11      	ldr	r3, [pc, #68]	; (8009048 <tcp_kill_timewait+0x5c>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	d807      	bhi.n	8009022 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009012:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <tcp_kill_timewait+0x5c>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e9      	bne.n	8009002 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009034:	68b8      	ldr	r0, [r7, #8]
 8009036:	f7ff f9db 	bl	80083f0 <tcp_abort>
  }
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20008bb8 	.word	0x20008bb8
 8009048:	20008bac 	.word	0x20008bac

0800904c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009052:	4b10      	ldr	r3, [pc, #64]	; (8009094 <tcp_handle_closepend+0x48>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009058:	e014      	b.n	8009084 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8b5b      	ldrh	r3, [r3, #26]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8b5b      	ldrh	r3, [r3, #26]
 8009070:	f023 0308 	bic.w	r3, r3, #8
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff f864 	bl	8008148 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e7      	bne.n	800905a <tcp_handle_closepend+0xe>
  }
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20008ba8 	.word	0x20008ba8

08009098 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80090a2:	2001      	movs	r0, #1
 80090a4:	f7fd fdbe 	bl	8006c24 <memp_malloc>
 80090a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d126      	bne.n	80090fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80090b0:	f7ff ffcc 	bl	800904c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80090b4:	f7ff ff9a 	bl	8008fec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80090b8:	2001      	movs	r0, #1
 80090ba:	f7fd fdb3 	bl	8006c24 <memp_malloc>
 80090be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d11b      	bne.n	80090fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80090c6:	2009      	movs	r0, #9
 80090c8:	f7ff ff46 	bl	8008f58 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80090cc:	2001      	movs	r0, #1
 80090ce:	f7fd fda9 	bl	8006c24 <memp_malloc>
 80090d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d111      	bne.n	80090fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80090da:	2008      	movs	r0, #8
 80090dc:	f7ff ff3c 	bl	8008f58 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80090e0:	2001      	movs	r0, #1
 80090e2:	f7fd fd9f 	bl	8006c24 <memp_malloc>
 80090e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d107      	bne.n	80090fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fee3 	bl	8008ebc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80090f6:	2001      	movs	r0, #1
 80090f8:	f7fd fd94 	bl	8006c24 <memp_malloc>
 80090fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d03f      	beq.n	8009184 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009104:	229c      	movs	r2, #156	; 0x9c
 8009106:	2100      	movs	r1, #0
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f006 fdd3 	bl	800fcb4 <memset>
    pcb->prio = prio;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	79fa      	ldrb	r2, [r7, #7]
 8009112:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800911a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009124:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	22ff      	movs	r2, #255	; 0xff
 8009132:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f44f 7206 	mov.w	r2, #536	; 0x218
 800913a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2206      	movs	r2, #6
 8009140:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2206      	movs	r2, #6
 8009148:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009150:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <tcp_alloc+0xf8>)
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <tcp_alloc+0xfc>)
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009170:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a08      	ldr	r2, [pc, #32]	; (8009198 <tcp_alloc+0x100>)
 8009178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4a07      	ldr	r2, [pc, #28]	; (800919c <tcp_alloc+0x104>)
 8009180:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20008bac 	.word	0x20008bac
 8009194:	200000d2 	.word	0x200000d2
 8009198:	08008e51 	.word	0x08008e51
 800919c:	006ddd00 	.word	0x006ddd00

080091a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d107      	bne.n	80091be <tcp_pcb_purge+0x1e>
 80091ae:	4b21      	ldr	r3, [pc, #132]	; (8009234 <tcp_pcb_purge+0x94>)
 80091b0:	f640 0251 	movw	r2, #2129	; 0x851
 80091b4:	4920      	ldr	r1, [pc, #128]	; (8009238 <tcp_pcb_purge+0x98>)
 80091b6:	4821      	ldr	r0, [pc, #132]	; (800923c <tcp_pcb_purge+0x9c>)
 80091b8:	f006 fd84 	bl	800fcc4 <iprintf>
 80091bc:	e037      	b.n	800922e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7d1b      	ldrb	r3, [r3, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d033      	beq.n	800922e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80091ca:	2b0a      	cmp	r3, #10
 80091cc:	d02f      	beq.n	800922e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d02b      	beq.n	800922e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d007      	beq.n	80091ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fb7c 	bl	80078e0 <pbuf_free>
      pcb->refused_data = NULL;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f986 	bl	8009508 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009202:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff fdc7 	bl	8008d9c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff fdc2 	bl	8008d9c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	66da      	str	r2, [r3, #108]	; 0x6c
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	080117dc 	.word	0x080117dc
 8009238:	08011e28 	.word	0x08011e28
 800923c:	08011820 	.word	0x08011820

08009240 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d106      	bne.n	800925e <tcp_pcb_remove+0x1e>
 8009250:	4b3e      	ldr	r3, [pc, #248]	; (800934c <tcp_pcb_remove+0x10c>)
 8009252:	f640 0283 	movw	r2, #2179	; 0x883
 8009256:	493e      	ldr	r1, [pc, #248]	; (8009350 <tcp_pcb_remove+0x110>)
 8009258:	483e      	ldr	r0, [pc, #248]	; (8009354 <tcp_pcb_remove+0x114>)
 800925a:	f006 fd33 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d106      	bne.n	8009272 <tcp_pcb_remove+0x32>
 8009264:	4b39      	ldr	r3, [pc, #228]	; (800934c <tcp_pcb_remove+0x10c>)
 8009266:	f640 0284 	movw	r2, #2180	; 0x884
 800926a:	493b      	ldr	r1, [pc, #236]	; (8009358 <tcp_pcb_remove+0x118>)
 800926c:	4839      	ldr	r0, [pc, #228]	; (8009354 <tcp_pcb_remove+0x114>)
 800926e:	f006 fd29 	bl	800fcc4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d105      	bne.n	8009288 <tcp_pcb_remove+0x48>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68da      	ldr	r2, [r3, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e013      	b.n	80092b0 <tcp_pcb_remove+0x70>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	e00c      	b.n	80092aa <tcp_pcb_remove+0x6a>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d104      	bne.n	80092a4 <tcp_pcb_remove+0x64>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	60da      	str	r2, [r3, #12]
 80092a2:	e005      	b.n	80092b0 <tcp_pcb_remove+0x70>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1ef      	bne.n	8009290 <tcp_pcb_remove+0x50>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2200      	movs	r2, #0
 80092b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80092b6:	6838      	ldr	r0, [r7, #0]
 80092b8:	f7ff ff72 	bl	80091a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	7d1b      	ldrb	r3, [r3, #20]
 80092c0:	2b0a      	cmp	r3, #10
 80092c2:	d013      	beq.n	80092ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d00f      	beq.n	80092ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	8b5b      	ldrh	r3, [r3, #26]
 80092d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d009      	beq.n	80092ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	8b5b      	ldrh	r3, [r3, #26]
 80092dc:	f043 0302 	orr.w	r3, r3, #2
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80092e6:	6838      	ldr	r0, [r7, #0]
 80092e8:	f002 ff6a 	bl	800c1c0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	7d1b      	ldrb	r3, [r3, #20]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d020      	beq.n	8009336 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d006      	beq.n	800930a <tcp_pcb_remove+0xca>
 80092fc:	4b13      	ldr	r3, [pc, #76]	; (800934c <tcp_pcb_remove+0x10c>)
 80092fe:	f640 0293 	movw	r2, #2195	; 0x893
 8009302:	4916      	ldr	r1, [pc, #88]	; (800935c <tcp_pcb_remove+0x11c>)
 8009304:	4813      	ldr	r0, [pc, #76]	; (8009354 <tcp_pcb_remove+0x114>)
 8009306:	f006 fcdd 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930e:	2b00      	cmp	r3, #0
 8009310:	d006      	beq.n	8009320 <tcp_pcb_remove+0xe0>
 8009312:	4b0e      	ldr	r3, [pc, #56]	; (800934c <tcp_pcb_remove+0x10c>)
 8009314:	f640 0294 	movw	r2, #2196	; 0x894
 8009318:	4911      	ldr	r1, [pc, #68]	; (8009360 <tcp_pcb_remove+0x120>)
 800931a:	480e      	ldr	r0, [pc, #56]	; (8009354 <tcp_pcb_remove+0x114>)
 800931c:	f006 fcd2 	bl	800fcc4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009324:	2b00      	cmp	r3, #0
 8009326:	d006      	beq.n	8009336 <tcp_pcb_remove+0xf6>
 8009328:	4b08      	ldr	r3, [pc, #32]	; (800934c <tcp_pcb_remove+0x10c>)
 800932a:	f640 0296 	movw	r2, #2198	; 0x896
 800932e:	490d      	ldr	r1, [pc, #52]	; (8009364 <tcp_pcb_remove+0x124>)
 8009330:	4808      	ldr	r0, [pc, #32]	; (8009354 <tcp_pcb_remove+0x114>)
 8009332:	f006 fcc7 	bl	800fcc4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2200      	movs	r2, #0
 800933a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	080117dc 	.word	0x080117dc
 8009350:	08011e44 	.word	0x08011e44
 8009354:	08011820 	.word	0x08011820
 8009358:	08011e60 	.word	0x08011e60
 800935c:	08011e80 	.word	0x08011e80
 8009360:	08011e98 	.word	0x08011e98
 8009364:	08011eb4 	.word	0x08011eb4

08009368 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d106      	bne.n	8009384 <tcp_next_iss+0x1c>
 8009376:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <tcp_next_iss+0x38>)
 8009378:	f640 02af 	movw	r2, #2223	; 0x8af
 800937c:	4909      	ldr	r1, [pc, #36]	; (80093a4 <tcp_next_iss+0x3c>)
 800937e:	480a      	ldr	r0, [pc, #40]	; (80093a8 <tcp_next_iss+0x40>)
 8009380:	f006 fca0 	bl	800fcc4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009384:	4b09      	ldr	r3, [pc, #36]	; (80093ac <tcp_next_iss+0x44>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <tcp_next_iss+0x48>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4413      	add	r3, r2
 800938e:	4a07      	ldr	r2, [pc, #28]	; (80093ac <tcp_next_iss+0x44>)
 8009390:	6013      	str	r3, [r2, #0]
  return iss;
 8009392:	4b06      	ldr	r3, [pc, #24]	; (80093ac <tcp_next_iss+0x44>)
 8009394:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	080117dc 	.word	0x080117dc
 80093a4:	08011ecc 	.word	0x08011ecc
 80093a8:	08011820 	.word	0x08011820
 80093ac:	20000014 	.word	0x20000014
 80093b0:	20008bac 	.word	0x20008bac

080093b4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d106      	bne.n	80093d6 <tcp_eff_send_mss_netif+0x22>
 80093c8:	4b14      	ldr	r3, [pc, #80]	; (800941c <tcp_eff_send_mss_netif+0x68>)
 80093ca:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80093ce:	4914      	ldr	r1, [pc, #80]	; (8009420 <tcp_eff_send_mss_netif+0x6c>)
 80093d0:	4814      	ldr	r0, [pc, #80]	; (8009424 <tcp_eff_send_mss_netif+0x70>)
 80093d2:	f006 fc77 	bl	800fcc4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80093dc:	89fb      	ldrh	r3, [r7, #14]
 80093de:	e019      	b.n	8009414 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80093e4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80093e6:	8afb      	ldrh	r3, [r7, #22]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d012      	beq.n	8009412 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80093ec:	2328      	movs	r3, #40	; 0x28
 80093ee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80093f0:	8afa      	ldrh	r2, [r7, #22]
 80093f2:	8abb      	ldrh	r3, [r7, #20]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d904      	bls.n	8009402 <tcp_eff_send_mss_netif+0x4e>
 80093f8:	8afa      	ldrh	r2, [r7, #22]
 80093fa:	8abb      	ldrh	r3, [r7, #20]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	b29b      	uxth	r3, r3
 8009400:	e000      	b.n	8009404 <tcp_eff_send_mss_netif+0x50>
 8009402:	2300      	movs	r3, #0
 8009404:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009406:	8a7a      	ldrh	r2, [r7, #18]
 8009408:	89fb      	ldrh	r3, [r7, #14]
 800940a:	4293      	cmp	r3, r2
 800940c:	bf28      	it	cs
 800940e:	4613      	movcs	r3, r2
 8009410:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009412:	89fb      	ldrh	r3, [r7, #14]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	080117dc 	.word	0x080117dc
 8009420:	08011ee8 	.word	0x08011ee8
 8009424:	08011820 	.word	0x08011820

08009428 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d119      	bne.n	8009470 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800943e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009442:	4910      	ldr	r1, [pc, #64]	; (8009484 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009444:	4810      	ldr	r0, [pc, #64]	; (8009488 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009446:	f006 fc3d 	bl	800fcc4 <iprintf>

  while (pcb != NULL) {
 800944a:	e011      	b.n	8009470 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d108      	bne.n	800946a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7fe ffc6 	bl	80083f0 <tcp_abort>
      pcb = next;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e002      	b.n	8009470 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1ea      	bne.n	800944c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009476:	bf00      	nop
 8009478:	bf00      	nop
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	080117dc 	.word	0x080117dc
 8009484:	08011f10 	.word	0x08011f10
 8009488:	08011820 	.word	0x08011820

0800948c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d02a      	beq.n	80094f2 <tcp_netif_ip_addr_changed+0x66>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d026      	beq.n	80094f2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80094a4:	4b15      	ldr	r3, [pc, #84]	; (80094fc <tcp_netif_ip_addr_changed+0x70>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff ffbc 	bl	8009428 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80094b0:	4b13      	ldr	r3, [pc, #76]	; (8009500 <tcp_netif_ip_addr_changed+0x74>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff ffb6 	bl	8009428 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d017      	beq.n	80094f2 <tcp_netif_ip_addr_changed+0x66>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d013      	beq.n	80094f2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80094ca:	4b0e      	ldr	r3, [pc, #56]	; (8009504 <tcp_netif_ip_addr_changed+0x78>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e00c      	b.n	80094ec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d103      	bne.n	80094e6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1ef      	bne.n	80094d2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20008ba8 	.word	0x20008ba8
 8009500:	20008bb4 	.word	0x20008bb4
 8009504:	20008bb0 	.word	0x20008bb0

08009508 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009514:	2b00      	cmp	r3, #0
 8009516:	d007      	beq.n	8009528 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff fc3d 	bl	8008d9c <tcp_segs_free>
    pcb->ooseq = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009530:	b590      	push	{r4, r7, lr}
 8009532:	b08d      	sub	sp, #52	; 0x34
 8009534:	af04      	add	r7, sp, #16
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <tcp_input+0x1c>
 8009540:	4b9b      	ldr	r3, [pc, #620]	; (80097b0 <tcp_input+0x280>)
 8009542:	2283      	movs	r2, #131	; 0x83
 8009544:	499b      	ldr	r1, [pc, #620]	; (80097b4 <tcp_input+0x284>)
 8009546:	489c      	ldr	r0, [pc, #624]	; (80097b8 <tcp_input+0x288>)
 8009548:	f006 fbbc 	bl	800fcc4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	4a9a      	ldr	r2, [pc, #616]	; (80097bc <tcp_input+0x28c>)
 8009552:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	895b      	ldrh	r3, [r3, #10]
 8009558:	2b13      	cmp	r3, #19
 800955a:	f240 83c4 	bls.w	8009ce6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800955e:	4b98      	ldr	r3, [pc, #608]	; (80097c0 <tcp_input+0x290>)
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	4a97      	ldr	r2, [pc, #604]	; (80097c0 <tcp_input+0x290>)
 8009564:	6812      	ldr	r2, [r2, #0]
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f005 fc13 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	f040 83ba 	bne.w	8009cea <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009576:	4b92      	ldr	r3, [pc, #584]	; (80097c0 <tcp_input+0x290>)
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800957e:	2be0      	cmp	r3, #224	; 0xe0
 8009580:	f000 83b3 	beq.w	8009cea <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009584:	4b8d      	ldr	r3, [pc, #564]	; (80097bc <tcp_input+0x28c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	899b      	ldrh	r3, [r3, #12]
 800958a:	b29b      	uxth	r3, r3
 800958c:	4618      	mov	r0, r3
 800958e:	f7fc fef3 	bl	8006378 <lwip_htons>
 8009592:	4603      	mov	r3, r0
 8009594:	0b1b      	lsrs	r3, r3, #12
 8009596:	b29b      	uxth	r3, r3
 8009598:	b2db      	uxtb	r3, r3
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800959e:	7cbb      	ldrb	r3, [r7, #18]
 80095a0:	2b13      	cmp	r3, #19
 80095a2:	f240 83a4 	bls.w	8009cee <tcp_input+0x7be>
 80095a6:	7cbb      	ldrb	r3, [r7, #18]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	891b      	ldrh	r3, [r3, #8]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	f200 839d 	bhi.w	8009cee <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80095b4:	7cbb      	ldrb	r3, [r7, #18]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	3b14      	subs	r3, #20
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	4b81      	ldr	r3, [pc, #516]	; (80097c4 <tcp_input+0x294>)
 80095be:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80095c0:	4b81      	ldr	r3, [pc, #516]	; (80097c8 <tcp_input+0x298>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	895a      	ldrh	r2, [r3, #10]
 80095ca:	7cbb      	ldrb	r3, [r7, #18]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d309      	bcc.n	80095e6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80095d2:	4b7c      	ldr	r3, [pc, #496]	; (80097c4 <tcp_input+0x294>)
 80095d4:	881a      	ldrh	r2, [r3, #0]
 80095d6:	4b7d      	ldr	r3, [pc, #500]	; (80097cc <tcp_input+0x29c>)
 80095d8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80095da:	7cbb      	ldrb	r3, [r7, #18]
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7fe f8f8 	bl	80077d4 <pbuf_remove_header>
 80095e4:	e04e      	b.n	8009684 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <tcp_input+0xca>
 80095ee:	4b70      	ldr	r3, [pc, #448]	; (80097b0 <tcp_input+0x280>)
 80095f0:	22c2      	movs	r2, #194	; 0xc2
 80095f2:	4977      	ldr	r1, [pc, #476]	; (80097d0 <tcp_input+0x2a0>)
 80095f4:	4870      	ldr	r0, [pc, #448]	; (80097b8 <tcp_input+0x288>)
 80095f6:	f006 fb65 	bl	800fcc4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80095fa:	2114      	movs	r1, #20
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fe f8e9 	bl	80077d4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	895a      	ldrh	r2, [r3, #10]
 8009606:	4b71      	ldr	r3, [pc, #452]	; (80097cc <tcp_input+0x29c>)
 8009608:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800960a:	4b6e      	ldr	r3, [pc, #440]	; (80097c4 <tcp_input+0x294>)
 800960c:	881a      	ldrh	r2, [r3, #0]
 800960e:	4b6f      	ldr	r3, [pc, #444]	; (80097cc <tcp_input+0x29c>)
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009616:	4b6d      	ldr	r3, [pc, #436]	; (80097cc <tcp_input+0x29c>)
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7fe f8d9 	bl	80077d4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	895b      	ldrh	r3, [r3, #10]
 8009628:	8a3a      	ldrh	r2, [r7, #16]
 800962a:	429a      	cmp	r2, r3
 800962c:	f200 8361 	bhi.w	8009cf2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4a64      	ldr	r2, [pc, #400]	; (80097c8 <tcp_input+0x298>)
 8009638:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	8a3a      	ldrh	r2, [r7, #16]
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe f8c6 	bl	80077d4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	891a      	ldrh	r2, [r3, #8]
 800964c:	8a3b      	ldrh	r3, [r7, #16]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	b29a      	uxth	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	895b      	ldrh	r3, [r3, #10]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <tcp_input+0x13a>
 800965e:	4b54      	ldr	r3, [pc, #336]	; (80097b0 <tcp_input+0x280>)
 8009660:	22df      	movs	r2, #223	; 0xdf
 8009662:	495c      	ldr	r1, [pc, #368]	; (80097d4 <tcp_input+0x2a4>)
 8009664:	4854      	ldr	r0, [pc, #336]	; (80097b8 <tcp_input+0x288>)
 8009666:	f006 fb2d 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	891a      	ldrh	r2, [r3, #8]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	891b      	ldrh	r3, [r3, #8]
 8009674:	429a      	cmp	r2, r3
 8009676:	d005      	beq.n	8009684 <tcp_input+0x154>
 8009678:	4b4d      	ldr	r3, [pc, #308]	; (80097b0 <tcp_input+0x280>)
 800967a:	22e0      	movs	r2, #224	; 0xe0
 800967c:	4956      	ldr	r1, [pc, #344]	; (80097d8 <tcp_input+0x2a8>)
 800967e:	484e      	ldr	r0, [pc, #312]	; (80097b8 <tcp_input+0x288>)
 8009680:	f006 fb20 	bl	800fcc4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009684:	4b4d      	ldr	r3, [pc, #308]	; (80097bc <tcp_input+0x28c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b29b      	uxth	r3, r3
 800968c:	4a4b      	ldr	r2, [pc, #300]	; (80097bc <tcp_input+0x28c>)
 800968e:	6814      	ldr	r4, [r2, #0]
 8009690:	4618      	mov	r0, r3
 8009692:	f7fc fe71 	bl	8006378 <lwip_htons>
 8009696:	4603      	mov	r3, r0
 8009698:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800969a:	4b48      	ldr	r3, [pc, #288]	; (80097bc <tcp_input+0x28c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	885b      	ldrh	r3, [r3, #2]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	4a46      	ldr	r2, [pc, #280]	; (80097bc <tcp_input+0x28c>)
 80096a4:	6814      	ldr	r4, [r2, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fc fe66 	bl	8006378 <lwip_htons>
 80096ac:	4603      	mov	r3, r0
 80096ae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80096b0:	4b42      	ldr	r3, [pc, #264]	; (80097bc <tcp_input+0x28c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	4a41      	ldr	r2, [pc, #260]	; (80097bc <tcp_input+0x28c>)
 80096b8:	6814      	ldr	r4, [r2, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fc fe71 	bl	80063a2 <lwip_htonl>
 80096c0:	4603      	mov	r3, r0
 80096c2:	6063      	str	r3, [r4, #4]
 80096c4:	6863      	ldr	r3, [r4, #4]
 80096c6:	4a45      	ldr	r2, [pc, #276]	; (80097dc <tcp_input+0x2ac>)
 80096c8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80096ca:	4b3c      	ldr	r3, [pc, #240]	; (80097bc <tcp_input+0x28c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	4a3a      	ldr	r2, [pc, #232]	; (80097bc <tcp_input+0x28c>)
 80096d2:	6814      	ldr	r4, [r2, #0]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fc fe64 	bl	80063a2 <lwip_htonl>
 80096da:	4603      	mov	r3, r0
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	4a3f      	ldr	r2, [pc, #252]	; (80097e0 <tcp_input+0x2b0>)
 80096e2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80096e4:	4b35      	ldr	r3, [pc, #212]	; (80097bc <tcp_input+0x28c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	89db      	ldrh	r3, [r3, #14]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4a33      	ldr	r2, [pc, #204]	; (80097bc <tcp_input+0x28c>)
 80096ee:	6814      	ldr	r4, [r2, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fc fe41 	bl	8006378 <lwip_htons>
 80096f6:	4603      	mov	r3, r0
 80096f8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80096fa:	4b30      	ldr	r3, [pc, #192]	; (80097bc <tcp_input+0x28c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	899b      	ldrh	r3, [r3, #12]
 8009700:	b29b      	uxth	r3, r3
 8009702:	4618      	mov	r0, r3
 8009704:	f7fc fe38 	bl	8006378 <lwip_htons>
 8009708:	4603      	mov	r3, r0
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009710:	b2da      	uxtb	r2, r3
 8009712:	4b34      	ldr	r3, [pc, #208]	; (80097e4 <tcp_input+0x2b4>)
 8009714:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	891a      	ldrh	r2, [r3, #8]
 800971a:	4b33      	ldr	r3, [pc, #204]	; (80097e8 <tcp_input+0x2b8>)
 800971c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800971e:	4b31      	ldr	r3, [pc, #196]	; (80097e4 <tcp_input+0x2b4>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00c      	beq.n	8009744 <tcp_input+0x214>
    tcplen++;
 800972a:	4b2f      	ldr	r3, [pc, #188]	; (80097e8 <tcp_input+0x2b8>)
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <tcp_input+0x2b8>)
 8009734:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	891a      	ldrh	r2, [r3, #8]
 800973a:	4b2b      	ldr	r3, [pc, #172]	; (80097e8 <tcp_input+0x2b8>)
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	f200 82d9 	bhi.w	8009cf6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009748:	4b28      	ldr	r3, [pc, #160]	; (80097ec <tcp_input+0x2bc>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	61fb      	str	r3, [r7, #28]
 800974e:	e09d      	b.n	800988c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	7d1b      	ldrb	r3, [r3, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d105      	bne.n	8009764 <tcp_input+0x234>
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <tcp_input+0x280>)
 800975a:	22fb      	movs	r2, #251	; 0xfb
 800975c:	4924      	ldr	r1, [pc, #144]	; (80097f0 <tcp_input+0x2c0>)
 800975e:	4816      	ldr	r0, [pc, #88]	; (80097b8 <tcp_input+0x288>)
 8009760:	f006 fab0 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	7d1b      	ldrb	r3, [r3, #20]
 8009768:	2b0a      	cmp	r3, #10
 800976a:	d105      	bne.n	8009778 <tcp_input+0x248>
 800976c:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <tcp_input+0x280>)
 800976e:	22fc      	movs	r2, #252	; 0xfc
 8009770:	4920      	ldr	r1, [pc, #128]	; (80097f4 <tcp_input+0x2c4>)
 8009772:	4811      	ldr	r0, [pc, #68]	; (80097b8 <tcp_input+0x288>)
 8009774:	f006 faa6 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	7d1b      	ldrb	r3, [r3, #20]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d105      	bne.n	800978c <tcp_input+0x25c>
 8009780:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <tcp_input+0x280>)
 8009782:	22fd      	movs	r2, #253	; 0xfd
 8009784:	491c      	ldr	r1, [pc, #112]	; (80097f8 <tcp_input+0x2c8>)
 8009786:	480c      	ldr	r0, [pc, #48]	; (80097b8 <tcp_input+0x288>)
 8009788:	f006 fa9c 	bl	800fcc4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	7a1b      	ldrb	r3, [r3, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d033      	beq.n	80097fc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	7a1a      	ldrb	r2, [r3, #8]
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <tcp_input+0x290>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097a0:	3301      	adds	r3, #1
 80097a2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d029      	beq.n	80097fc <tcp_input+0x2cc>
      prev = pcb;
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	61bb      	str	r3, [r7, #24]
      continue;
 80097ac:	e06b      	b.n	8009886 <tcp_input+0x356>
 80097ae:	bf00      	nop
 80097b0:	08011f44 	.word	0x08011f44
 80097b4:	08011f78 	.word	0x08011f78
 80097b8:	08011f90 	.word	0x08011f90
 80097bc:	200000e4 	.word	0x200000e4
 80097c0:	200034a4 	.word	0x200034a4
 80097c4:	200000e8 	.word	0x200000e8
 80097c8:	200000ec 	.word	0x200000ec
 80097cc:	200000ea 	.word	0x200000ea
 80097d0:	08011fb8 	.word	0x08011fb8
 80097d4:	08011fc8 	.word	0x08011fc8
 80097d8:	08011fd4 	.word	0x08011fd4
 80097dc:	200000f4 	.word	0x200000f4
 80097e0:	200000f8 	.word	0x200000f8
 80097e4:	20000100 	.word	0x20000100
 80097e8:	200000fe 	.word	0x200000fe
 80097ec:	20008ba8 	.word	0x20008ba8
 80097f0:	08011ff4 	.word	0x08011ff4
 80097f4:	0801201c 	.word	0x0801201c
 80097f8:	08012048 	.word	0x08012048
    }

    if (pcb->remote_port == tcphdr->src &&
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	8b1a      	ldrh	r2, [r3, #24]
 8009800:	4b94      	ldr	r3, [pc, #592]	; (8009a54 <tcp_input+0x524>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	b29b      	uxth	r3, r3
 8009808:	429a      	cmp	r2, r3
 800980a:	d13a      	bne.n	8009882 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	8ada      	ldrh	r2, [r3, #22]
 8009810:	4b90      	ldr	r3, [pc, #576]	; (8009a54 <tcp_input+0x524>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	885b      	ldrh	r3, [r3, #2]
 8009816:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009818:	429a      	cmp	r2, r3
 800981a:	d132      	bne.n	8009882 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	4b8d      	ldr	r3, [pc, #564]	; (8009a58 <tcp_input+0x528>)
 8009822:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009824:	429a      	cmp	r2, r3
 8009826:	d12c      	bne.n	8009882 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	4b8a      	ldr	r3, [pc, #552]	; (8009a58 <tcp_input+0x528>)
 800982e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009830:	429a      	cmp	r2, r3
 8009832:	d126      	bne.n	8009882 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	69fa      	ldr	r2, [r7, #28]
 800983a:	429a      	cmp	r2, r3
 800983c:	d106      	bne.n	800984c <tcp_input+0x31c>
 800983e:	4b87      	ldr	r3, [pc, #540]	; (8009a5c <tcp_input+0x52c>)
 8009840:	f240 120d 	movw	r2, #269	; 0x10d
 8009844:	4986      	ldr	r1, [pc, #536]	; (8009a60 <tcp_input+0x530>)
 8009846:	4887      	ldr	r0, [pc, #540]	; (8009a64 <tcp_input+0x534>)
 8009848:	f006 fa3c 	bl	800fcc4 <iprintf>
      if (prev != NULL) {
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00a      	beq.n	8009868 <tcp_input+0x338>
        prev->next = pcb->next;
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	68da      	ldr	r2, [r3, #12]
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800985a:	4b83      	ldr	r3, [pc, #524]	; (8009a68 <tcp_input+0x538>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009862:	4a81      	ldr	r2, [pc, #516]	; (8009a68 <tcp_input+0x538>)
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	69fa      	ldr	r2, [r7, #28]
 800986e:	429a      	cmp	r2, r3
 8009870:	d111      	bne.n	8009896 <tcp_input+0x366>
 8009872:	4b7a      	ldr	r3, [pc, #488]	; (8009a5c <tcp_input+0x52c>)
 8009874:	f240 1215 	movw	r2, #277	; 0x115
 8009878:	497c      	ldr	r1, [pc, #496]	; (8009a6c <tcp_input+0x53c>)
 800987a:	487a      	ldr	r0, [pc, #488]	; (8009a64 <tcp_input+0x534>)
 800987c:	f006 fa22 	bl	800fcc4 <iprintf>
      break;
 8009880:	e009      	b.n	8009896 <tcp_input+0x366>
    }
    prev = pcb;
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f47f af5e 	bne.w	8009750 <tcp_input+0x220>
 8009894:	e000      	b.n	8009898 <tcp_input+0x368>
      break;
 8009896:	bf00      	nop
  }

  if (pcb == NULL) {
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 8095 	bne.w	80099ca <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80098a0:	4b73      	ldr	r3, [pc, #460]	; (8009a70 <tcp_input+0x540>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	e03f      	b.n	8009928 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	7d1b      	ldrb	r3, [r3, #20]
 80098ac:	2b0a      	cmp	r3, #10
 80098ae:	d006      	beq.n	80098be <tcp_input+0x38e>
 80098b0:	4b6a      	ldr	r3, [pc, #424]	; (8009a5c <tcp_input+0x52c>)
 80098b2:	f240 121f 	movw	r2, #287	; 0x11f
 80098b6:	496f      	ldr	r1, [pc, #444]	; (8009a74 <tcp_input+0x544>)
 80098b8:	486a      	ldr	r0, [pc, #424]	; (8009a64 <tcp_input+0x534>)
 80098ba:	f006 fa03 	bl	800fcc4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	7a1b      	ldrb	r3, [r3, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	7a1a      	ldrb	r2, [r3, #8]
 80098ca:	4b63      	ldr	r3, [pc, #396]	; (8009a58 <tcp_input+0x528>)
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098d2:	3301      	adds	r3, #1
 80098d4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d122      	bne.n	8009920 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	8b1a      	ldrh	r2, [r3, #24]
 80098de:	4b5d      	ldr	r3, [pc, #372]	; (8009a54 <tcp_input+0x524>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d11b      	bne.n	8009922 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	8ada      	ldrh	r2, [r3, #22]
 80098ee:	4b59      	ldr	r3, [pc, #356]	; (8009a54 <tcp_input+0x524>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	885b      	ldrh	r3, [r3, #2]
 80098f4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d113      	bne.n	8009922 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	4b56      	ldr	r3, [pc, #344]	; (8009a58 <tcp_input+0x528>)
 8009900:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009902:	429a      	cmp	r2, r3
 8009904:	d10d      	bne.n	8009922 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4b53      	ldr	r3, [pc, #332]	; (8009a58 <tcp_input+0x528>)
 800990c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800990e:	429a      	cmp	r2, r3
 8009910:	d107      	bne.n	8009922 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009912:	69f8      	ldr	r0, [r7, #28]
 8009914:	f000 fb54 	bl	8009fc0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7fd ffe1 	bl	80078e0 <pbuf_free>
        return;
 800991e:	e1f0      	b.n	8009d02 <tcp_input+0x7d2>
        continue;
 8009920:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	61fb      	str	r3, [r7, #28]
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1bc      	bne.n	80098a8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800992e:	2300      	movs	r3, #0
 8009930:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009932:	4b51      	ldr	r3, [pc, #324]	; (8009a78 <tcp_input+0x548>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e02a      	b.n	8009990 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	7a1b      	ldrb	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00c      	beq.n	800995c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	7a1a      	ldrb	r2, [r3, #8]
 8009946:	4b44      	ldr	r3, [pc, #272]	; (8009a58 <tcp_input+0x528>)
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800994e:	3301      	adds	r3, #1
 8009950:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009952:	429a      	cmp	r2, r3
 8009954:	d002      	beq.n	800995c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	61bb      	str	r3, [r7, #24]
        continue;
 800995a:	e016      	b.n	800998a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	8ada      	ldrh	r2, [r3, #22]
 8009960:	4b3c      	ldr	r3, [pc, #240]	; (8009a54 <tcp_input+0x524>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	b29b      	uxth	r3, r3
 8009968:	429a      	cmp	r2, r3
 800996a:	d10c      	bne.n	8009986 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	4b39      	ldr	r3, [pc, #228]	; (8009a58 <tcp_input+0x528>)
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	429a      	cmp	r2, r3
 8009976:	d00f      	beq.n	8009998 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <tcp_input+0x46a>
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d009      	beq.n	800999a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1d1      	bne.n	800993a <tcp_input+0x40a>
 8009996:	e000      	b.n	800999a <tcp_input+0x46a>
            break;
 8009998:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d014      	beq.n	80099ca <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00a      	beq.n	80099bc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	68da      	ldr	r2, [r3, #12]
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80099ae:	4b32      	ldr	r3, [pc, #200]	; (8009a78 <tcp_input+0x548>)
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80099b6:	4a30      	ldr	r2, [pc, #192]	; (8009a78 <tcp_input+0x548>)
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80099bc:	6978      	ldr	r0, [r7, #20]
 80099be:	f000 fa01 	bl	8009dc4 <tcp_listen_input>
      }
      pbuf_free(p);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7fd ff8c 	bl	80078e0 <pbuf_free>
      return;
 80099c8:	e19b      	b.n	8009d02 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 8160 	beq.w	8009c92 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80099d2:	4b2a      	ldr	r3, [pc, #168]	; (8009a7c <tcp_input+0x54c>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	891a      	ldrh	r2, [r3, #8]
 80099dc:	4b27      	ldr	r3, [pc, #156]	; (8009a7c <tcp_input+0x54c>)
 80099de:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80099e0:	4a26      	ldr	r2, [pc, #152]	; (8009a7c <tcp_input+0x54c>)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80099e6:	4b1b      	ldr	r3, [pc, #108]	; (8009a54 <tcp_input+0x524>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a24      	ldr	r2, [pc, #144]	; (8009a7c <tcp_input+0x54c>)
 80099ec:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80099ee:	4b24      	ldr	r3, [pc, #144]	; (8009a80 <tcp_input+0x550>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80099f4:	4b23      	ldr	r3, [pc, #140]	; (8009a84 <tcp_input+0x554>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80099fa:	4b23      	ldr	r3, [pc, #140]	; (8009a88 <tcp_input+0x558>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009a00:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <tcp_input+0x55c>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 0308 	and.w	r3, r3, #8
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d006      	beq.n	8009a1a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7b5b      	ldrb	r3, [r3, #13]
 8009a10:	f043 0301 	orr.w	r3, r3, #1
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d038      	beq.n	8009a94 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009a22:	69f8      	ldr	r0, [r7, #28]
 8009a24:	f7ff f93e 	bl	8008ca4 <tcp_process_refused_data>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f113 0f0d 	cmn.w	r3, #13
 8009a2e:	d007      	beq.n	8009a40 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d02d      	beq.n	8009a94 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009a38:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <tcp_input+0x560>)
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d029      	beq.n	8009a94 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f040 8104 	bne.w	8009c52 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009a4a:	69f8      	ldr	r0, [r7, #28]
 8009a4c:	f003 f9be 	bl	800cdcc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009a50:	e0ff      	b.n	8009c52 <tcp_input+0x722>
 8009a52:	bf00      	nop
 8009a54:	200000e4 	.word	0x200000e4
 8009a58:	200034a4 	.word	0x200034a4
 8009a5c:	08011f44 	.word	0x08011f44
 8009a60:	08012070 	.word	0x08012070
 8009a64:	08011f90 	.word	0x08011f90
 8009a68:	20008ba8 	.word	0x20008ba8
 8009a6c:	0801209c 	.word	0x0801209c
 8009a70:	20008bb8 	.word	0x20008bb8
 8009a74:	080120c8 	.word	0x080120c8
 8009a78:	20008bb0 	.word	0x20008bb0
 8009a7c:	200000d4 	.word	0x200000d4
 8009a80:	20000104 	.word	0x20000104
 8009a84:	20000101 	.word	0x20000101
 8009a88:	200000fc 	.word	0x200000fc
 8009a8c:	20000100 	.word	0x20000100
 8009a90:	200000fe 	.word	0x200000fe
      }
    }
    tcp_input_pcb = pcb;
 8009a94:	4a9c      	ldr	r2, [pc, #624]	; (8009d08 <tcp_input+0x7d8>)
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009a9a:	69f8      	ldr	r0, [r7, #28]
 8009a9c:	f000 fb0a 	bl	800a0b4 <tcp_process>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009aa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009aa8:	f113 0f0d 	cmn.w	r3, #13
 8009aac:	f000 80d3 	beq.w	8009c56 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8009ab0:	4b96      	ldr	r3, [pc, #600]	; (8009d0c <tcp_input+0x7dc>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	f003 0308 	and.w	r3, r3, #8
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d015      	beq.n	8009ae8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d008      	beq.n	8009ad8 <tcp_input+0x5a8>
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	6912      	ldr	r2, [r2, #16]
 8009ad0:	f06f 010d 	mvn.w	r1, #13
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009ad8:	69f9      	ldr	r1, [r7, #28]
 8009ada:	488d      	ldr	r0, [pc, #564]	; (8009d10 <tcp_input+0x7e0>)
 8009adc:	f7ff fbb0 	bl	8009240 <tcp_pcb_remove>
        tcp_free(pcb);
 8009ae0:	69f8      	ldr	r0, [r7, #28]
 8009ae2:	f7fe f99d 	bl	8007e20 <tcp_free>
 8009ae6:	e0c1      	b.n	8009c6c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009aec:	4b89      	ldr	r3, [pc, #548]	; (8009d14 <tcp_input+0x7e4>)
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01d      	beq.n	8009b30 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009af4:	4b87      	ldr	r3, [pc, #540]	; (8009d14 <tcp_input+0x7e4>)
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <tcp_input+0x5ea>
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b0a:	69fa      	ldr	r2, [r7, #28]
 8009b0c:	6910      	ldr	r0, [r2, #16]
 8009b0e:	89fa      	ldrh	r2, [r7, #14]
 8009b10:	69f9      	ldr	r1, [r7, #28]
 8009b12:	4798      	blx	r3
 8009b14:	4603      	mov	r3, r0
 8009b16:	74fb      	strb	r3, [r7, #19]
 8009b18:	e001      	b.n	8009b1e <tcp_input+0x5ee>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009b1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b22:	f113 0f0d 	cmn.w	r3, #13
 8009b26:	f000 8098 	beq.w	8009c5a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009b2a:	4b7a      	ldr	r3, [pc, #488]	; (8009d14 <tcp_input+0x7e4>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009b30:	69f8      	ldr	r0, [r7, #28]
 8009b32:	f000 f907 	bl	8009d44 <tcp_input_delayed_close>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f040 8090 	bne.w	8009c5e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009b3e:	4b76      	ldr	r3, [pc, #472]	; (8009d18 <tcp_input+0x7e8>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d041      	beq.n	8009bca <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d006      	beq.n	8009b5c <tcp_input+0x62c>
 8009b4e:	4b73      	ldr	r3, [pc, #460]	; (8009d1c <tcp_input+0x7ec>)
 8009b50:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009b54:	4972      	ldr	r1, [pc, #456]	; (8009d20 <tcp_input+0x7f0>)
 8009b56:	4873      	ldr	r0, [pc, #460]	; (8009d24 <tcp_input+0x7f4>)
 8009b58:	f006 f8b4 	bl	800fcc4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	8b5b      	ldrh	r3, [r3, #26]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d008      	beq.n	8009b7a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009b68:	4b6b      	ldr	r3, [pc, #428]	; (8009d18 <tcp_input+0x7e8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fd feb7 	bl	80078e0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009b72:	69f8      	ldr	r0, [r7, #28]
 8009b74:	f7fe fc3c 	bl	80083f0 <tcp_abort>
            goto aborted;
 8009b78:	e078      	b.n	8009c6c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00c      	beq.n	8009b9e <tcp_input+0x66e>
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	6918      	ldr	r0, [r3, #16]
 8009b8e:	4b62      	ldr	r3, [pc, #392]	; (8009d18 <tcp_input+0x7e8>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	2300      	movs	r3, #0
 8009b94:	69f9      	ldr	r1, [r7, #28]
 8009b96:	47a0      	blx	r4
 8009b98:	4603      	mov	r3, r0
 8009b9a:	74fb      	strb	r3, [r7, #19]
 8009b9c:	e008      	b.n	8009bb0 <tcp_input+0x680>
 8009b9e:	4b5e      	ldr	r3, [pc, #376]	; (8009d18 <tcp_input+0x7e8>)
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	69f9      	ldr	r1, [r7, #28]
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f7ff f952 	bl	8008e50 <tcp_recv_null>
 8009bac:	4603      	mov	r3, r0
 8009bae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bb4:	f113 0f0d 	cmn.w	r3, #13
 8009bb8:	d053      	beq.n	8009c62 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009bba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009bc2:	4b55      	ldr	r3, [pc, #340]	; (8009d18 <tcp_input+0x7e8>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009bca:	4b50      	ldr	r3, [pc, #320]	; (8009d0c <tcp_input+0x7dc>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d030      	beq.n	8009c38 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d009      	beq.n	8009bf2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009be2:	7b5a      	ldrb	r2, [r3, #13]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009be8:	f042 0220 	orr.w	r2, r2, #32
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	735a      	strb	r2, [r3, #13]
 8009bf0:	e022      	b.n	8009c38 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009bfa:	d005      	beq.n	8009c08 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c00:	3301      	adds	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00b      	beq.n	8009c2a <tcp_input+0x6fa>
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	6918      	ldr	r0, [r3, #16]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2200      	movs	r2, #0
 8009c20:	69f9      	ldr	r1, [r7, #28]
 8009c22:	47a0      	blx	r4
 8009c24:	4603      	mov	r3, r0
 8009c26:	74fb      	strb	r3, [r7, #19]
 8009c28:	e001      	b.n	8009c2e <tcp_input+0x6fe>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c32:	f113 0f0d 	cmn.w	r3, #13
 8009c36:	d016      	beq.n	8009c66 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009c38:	4b33      	ldr	r3, [pc, #204]	; (8009d08 <tcp_input+0x7d8>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009c3e:	69f8      	ldr	r0, [r7, #28]
 8009c40:	f000 f880 	bl	8009d44 <tcp_input_delayed_close>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10f      	bne.n	8009c6a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009c4a:	69f8      	ldr	r0, [r7, #28]
 8009c4c:	f002 fab8 	bl	800c1c0 <tcp_output>
 8009c50:	e00c      	b.n	8009c6c <tcp_input+0x73c>
        goto aborted;
 8009c52:	bf00      	nop
 8009c54:	e00a      	b.n	8009c6c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009c56:	bf00      	nop
 8009c58:	e008      	b.n	8009c6c <tcp_input+0x73c>
              goto aborted;
 8009c5a:	bf00      	nop
 8009c5c:	e006      	b.n	8009c6c <tcp_input+0x73c>
          goto aborted;
 8009c5e:	bf00      	nop
 8009c60:	e004      	b.n	8009c6c <tcp_input+0x73c>
            goto aborted;
 8009c62:	bf00      	nop
 8009c64:	e002      	b.n	8009c6c <tcp_input+0x73c>
              goto aborted;
 8009c66:	bf00      	nop
 8009c68:	e000      	b.n	8009c6c <tcp_input+0x73c>
          goto aborted;
 8009c6a:	bf00      	nop
    tcp_input_pcb = NULL;
 8009c6c:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <tcp_input+0x7d8>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009c72:	4b29      	ldr	r3, [pc, #164]	; (8009d18 <tcp_input+0x7e8>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009c78:	4b2b      	ldr	r3, [pc, #172]	; (8009d28 <tcp_input+0x7f8>)
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d03f      	beq.n	8009d00 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8009c80:	4b29      	ldr	r3, [pc, #164]	; (8009d28 <tcp_input+0x7f8>)
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fd fe2b 	bl	80078e0 <pbuf_free>
      inseg.p = NULL;
 8009c8a:	4b27      	ldr	r3, [pc, #156]	; (8009d28 <tcp_input+0x7f8>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009c90:	e036      	b.n	8009d00 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009c92:	4b26      	ldr	r3, [pc, #152]	; (8009d2c <tcp_input+0x7fc>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	899b      	ldrh	r3, [r3, #12]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fc fb6c 	bl	8006378 <lwip_htons>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d118      	bne.n	8009cde <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cac:	4b20      	ldr	r3, [pc, #128]	; (8009d30 <tcp_input+0x800>)
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	4b20      	ldr	r3, [pc, #128]	; (8009d34 <tcp_input+0x804>)
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b20      	ldr	r3, [pc, #128]	; (8009d38 <tcp_input+0x808>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cbc:	4b1b      	ldr	r3, [pc, #108]	; (8009d2c <tcp_input+0x7fc>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cc4:	4a19      	ldr	r2, [pc, #100]	; (8009d2c <tcp_input+0x7fc>)
 8009cc6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cc8:	8812      	ldrh	r2, [r2, #0]
 8009cca:	b292      	uxth	r2, r2
 8009ccc:	9202      	str	r2, [sp, #8]
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <tcp_input+0x80c>)
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <tcp_input+0x810>)
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	2000      	movs	r0, #0
 8009cda:	f003 f825 	bl	800cd28 <tcp_rst>
    pbuf_free(p);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7fd fdfe 	bl	80078e0 <pbuf_free>
  return;
 8009ce4:	e00c      	b.n	8009d00 <tcp_input+0x7d0>
    goto dropped;
 8009ce6:	bf00      	nop
 8009ce8:	e006      	b.n	8009cf8 <tcp_input+0x7c8>
    goto dropped;
 8009cea:	bf00      	nop
 8009cec:	e004      	b.n	8009cf8 <tcp_input+0x7c8>
    goto dropped;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <tcp_input+0x7c8>
      goto dropped;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <tcp_input+0x7c8>
      goto dropped;
 8009cf6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7fd fdf1 	bl	80078e0 <pbuf_free>
 8009cfe:	e000      	b.n	8009d02 <tcp_input+0x7d2>
  return;
 8009d00:	bf00      	nop
}
 8009d02:	3724      	adds	r7, #36	; 0x24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd90      	pop	{r4, r7, pc}
 8009d08:	20008bbc 	.word	0x20008bbc
 8009d0c:	20000101 	.word	0x20000101
 8009d10:	20008ba8 	.word	0x20008ba8
 8009d14:	200000fc 	.word	0x200000fc
 8009d18:	20000104 	.word	0x20000104
 8009d1c:	08011f44 	.word	0x08011f44
 8009d20:	080120f8 	.word	0x080120f8
 8009d24:	08011f90 	.word	0x08011f90
 8009d28:	200000d4 	.word	0x200000d4
 8009d2c:	200000e4 	.word	0x200000e4
 8009d30:	200000f8 	.word	0x200000f8
 8009d34:	200000fe 	.word	0x200000fe
 8009d38:	200000f4 	.word	0x200000f4
 8009d3c:	200034b4 	.word	0x200034b4
 8009d40:	200034b8 	.word	0x200034b8

08009d44 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <tcp_input_delayed_close+0x1c>
 8009d52:	4b17      	ldr	r3, [pc, #92]	; (8009db0 <tcp_input_delayed_close+0x6c>)
 8009d54:	f240 225a 	movw	r2, #602	; 0x25a
 8009d58:	4916      	ldr	r1, [pc, #88]	; (8009db4 <tcp_input_delayed_close+0x70>)
 8009d5a:	4817      	ldr	r0, [pc, #92]	; (8009db8 <tcp_input_delayed_close+0x74>)
 8009d5c:	f005 ffb2 	bl	800fcc4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009d60:	4b16      	ldr	r3, [pc, #88]	; (8009dbc <tcp_input_delayed_close+0x78>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01c      	beq.n	8009da6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8b5b      	ldrh	r3, [r3, #26]
 8009d70:	f003 0310 	and.w	r3, r3, #16
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10d      	bne.n	8009d94 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d008      	beq.n	8009d94 <tcp_input_delayed_close+0x50>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6912      	ldr	r2, [r2, #16]
 8009d8c:	f06f 010e 	mvn.w	r1, #14
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009d94:	6879      	ldr	r1, [r7, #4]
 8009d96:	480a      	ldr	r0, [pc, #40]	; (8009dc0 <tcp_input_delayed_close+0x7c>)
 8009d98:	f7ff fa52 	bl	8009240 <tcp_pcb_remove>
    tcp_free(pcb);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fe f83f 	bl	8007e20 <tcp_free>
    return 1;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	08011f44 	.word	0x08011f44
 8009db4:	08012114 	.word	0x08012114
 8009db8:	08011f90 	.word	0x08011f90
 8009dbc:	20000101 	.word	0x20000101
 8009dc0:	20008ba8 	.word	0x20008ba8

08009dc4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009dc4:	b590      	push	{r4, r7, lr}
 8009dc6:	b08b      	sub	sp, #44	; 0x2c
 8009dc8:	af04      	add	r7, sp, #16
 8009dca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009dcc:	4b6f      	ldr	r3, [pc, #444]	; (8009f8c <tcp_listen_input+0x1c8>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 80d2 	bne.w	8009f7e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d106      	bne.n	8009dee <tcp_listen_input+0x2a>
 8009de0:	4b6b      	ldr	r3, [pc, #428]	; (8009f90 <tcp_listen_input+0x1cc>)
 8009de2:	f240 2281 	movw	r2, #641	; 0x281
 8009de6:	496b      	ldr	r1, [pc, #428]	; (8009f94 <tcp_listen_input+0x1d0>)
 8009de8:	486b      	ldr	r0, [pc, #428]	; (8009f98 <tcp_listen_input+0x1d4>)
 8009dea:	f005 ff6b 	bl	800fcc4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009dee:	4b67      	ldr	r3, [pc, #412]	; (8009f8c <tcp_listen_input+0x1c8>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d019      	beq.n	8009e2e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009dfa:	4b68      	ldr	r3, [pc, #416]	; (8009f9c <tcp_listen_input+0x1d8>)
 8009dfc:	6819      	ldr	r1, [r3, #0]
 8009dfe:	4b68      	ldr	r3, [pc, #416]	; (8009fa0 <tcp_listen_input+0x1dc>)
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	4b67      	ldr	r3, [pc, #412]	; (8009fa4 <tcp_listen_input+0x1e0>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e0a:	4b67      	ldr	r3, [pc, #412]	; (8009fa8 <tcp_listen_input+0x1e4>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e0e:	885b      	ldrh	r3, [r3, #2]
 8009e10:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e12:	4a65      	ldr	r2, [pc, #404]	; (8009fa8 <tcp_listen_input+0x1e4>)
 8009e14:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e16:	8812      	ldrh	r2, [r2, #0]
 8009e18:	b292      	uxth	r2, r2
 8009e1a:	9202      	str	r2, [sp, #8]
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	4b63      	ldr	r3, [pc, #396]	; (8009fac <tcp_listen_input+0x1e8>)
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	4b63      	ldr	r3, [pc, #396]	; (8009fb0 <tcp_listen_input+0x1ec>)
 8009e24:	4602      	mov	r2, r0
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f002 ff7e 	bl	800cd28 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009e2c:	e0a9      	b.n	8009f82 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009e2e:	4b57      	ldr	r3, [pc, #348]	; (8009f8c <tcp_listen_input+0x1c8>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80a3 	beq.w	8009f82 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	7d5b      	ldrb	r3, [r3, #21]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff f929 	bl	8009098 <tcp_alloc>
 8009e46:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d111      	bne.n	8009e72 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <tcp_listen_input+0xa8>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6910      	ldr	r0, [r2, #16]
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	2100      	movs	r1, #0
 8009e64:	4798      	blx	r3
 8009e66:	4603      	mov	r3, r0
 8009e68:	73bb      	strb	r3, [r7, #14]
      return;
 8009e6a:	e08b      	b.n	8009f84 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009e6c:	23f0      	movs	r3, #240	; 0xf0
 8009e6e:	73bb      	strb	r3, [r7, #14]
      return;
 8009e70:	e088      	b.n	8009f84 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009e72:	4b50      	ldr	r3, [pc, #320]	; (8009fb4 <tcp_listen_input+0x1f0>)
 8009e74:	695a      	ldr	r2, [r3, #20]
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009e7a:	4b4e      	ldr	r3, [pc, #312]	; (8009fb4 <tcp_listen_input+0x1f0>)
 8009e7c:	691a      	ldr	r2, [r3, #16]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	8ada      	ldrh	r2, [r3, #22]
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009e8a:	4b47      	ldr	r3, [pc, #284]	; (8009fa8 <tcp_listen_input+0x1e4>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2203      	movs	r2, #3
 8009e9a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009e9c:	4b41      	ldr	r3, [pc, #260]	; (8009fa4 <tcp_listen_input+0x1e0>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009eae:	6978      	ldr	r0, [r7, #20]
 8009eb0:	f7ff fa5a 	bl	8009368 <tcp_next_iss>
 8009eb4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009ece:	4b35      	ldr	r3, [pc, #212]	; (8009fa4 <tcp_listen_input+0x1e0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	1e5a      	subs	r2, r3, #1
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691a      	ldr	r2, [r3, #16]
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	7a5b      	ldrb	r3, [r3, #9]
 8009eea:	f003 030c 	and.w	r3, r3, #12
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7a1a      	ldrb	r2, [r3, #8]
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009efc:	4b2e      	ldr	r3, [pc, #184]	; (8009fb8 <tcp_listen_input+0x1f4>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	60da      	str	r2, [r3, #12]
 8009f04:	4a2c      	ldr	r2, [pc, #176]	; (8009fb8 <tcp_listen_input+0x1f4>)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	6013      	str	r3, [r2, #0]
 8009f0a:	f003 f8cf 	bl	800d0ac <tcp_timer_needed>
 8009f0e:	4b2b      	ldr	r3, [pc, #172]	; (8009fbc <tcp_listen_input+0x1f8>)
 8009f10:	2201      	movs	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009f14:	6978      	ldr	r0, [r7, #20]
 8009f16:	f001 fd8d 	bl	800ba34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009f1a:	4b23      	ldr	r3, [pc, #140]	; (8009fa8 <tcp_listen_input+0x1e4>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	89db      	ldrh	r3, [r3, #14]
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f004 fc93 	bl	800e868 <ip4_route>
 8009f42:	4601      	mov	r1, r0
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	3304      	adds	r3, #4
 8009f48:	461a      	mov	r2, r3
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f7ff fa32 	bl	80093b4 <tcp_eff_send_mss_netif>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009f58:	2112      	movs	r1, #18
 8009f5a:	6978      	ldr	r0, [r7, #20]
 8009f5c:	f002 f842 	bl	800bfe4 <tcp_enqueue_flags>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6978      	ldr	r0, [r7, #20]
 8009f70:	f7fe f980 	bl	8008274 <tcp_abandon>
      return;
 8009f74:	e006      	b.n	8009f84 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009f76:	6978      	ldr	r0, [r7, #20]
 8009f78:	f002 f922 	bl	800c1c0 <tcp_output>
  return;
 8009f7c:	e001      	b.n	8009f82 <tcp_listen_input+0x1be>
    return;
 8009f7e:	bf00      	nop
 8009f80:	e000      	b.n	8009f84 <tcp_listen_input+0x1c0>
  return;
 8009f82:	bf00      	nop
}
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd90      	pop	{r4, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000100 	.word	0x20000100
 8009f90:	08011f44 	.word	0x08011f44
 8009f94:	0801213c 	.word	0x0801213c
 8009f98:	08011f90 	.word	0x08011f90
 8009f9c:	200000f8 	.word	0x200000f8
 8009fa0:	200000fe 	.word	0x200000fe
 8009fa4:	200000f4 	.word	0x200000f4
 8009fa8:	200000e4 	.word	0x200000e4
 8009fac:	200034b4 	.word	0x200034b4
 8009fb0:	200034b8 	.word	0x200034b8
 8009fb4:	200034a4 	.word	0x200034a4
 8009fb8:	20008ba8 	.word	0x20008ba8
 8009fbc:	20008ba4 	.word	0x20008ba4

08009fc0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af04      	add	r7, sp, #16
 8009fc6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009fc8:	4b2f      	ldr	r3, [pc, #188]	; (800a088 <tcp_timewait_input+0xc8>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d153      	bne.n	800a07c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <tcp_timewait_input+0x28>
 8009fda:	4b2c      	ldr	r3, [pc, #176]	; (800a08c <tcp_timewait_input+0xcc>)
 8009fdc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009fe0:	492b      	ldr	r1, [pc, #172]	; (800a090 <tcp_timewait_input+0xd0>)
 8009fe2:	482c      	ldr	r0, [pc, #176]	; (800a094 <tcp_timewait_input+0xd4>)
 8009fe4:	f005 fe6e 	bl	800fcc4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009fe8:	4b27      	ldr	r3, [pc, #156]	; (800a088 <tcp_timewait_input+0xc8>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	f003 0302 	and.w	r3, r3, #2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d02a      	beq.n	800a04a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009ff4:	4b28      	ldr	r3, [pc, #160]	; (800a098 <tcp_timewait_input+0xd8>)
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	db2d      	blt.n	800a05e <tcp_timewait_input+0x9e>
 800a002:	4b25      	ldr	r3, [pc, #148]	; (800a098 <tcp_timewait_input+0xd8>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a00e:	440b      	add	r3, r1
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	dc23      	bgt.n	800a05e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a016:	4b21      	ldr	r3, [pc, #132]	; (800a09c <tcp_timewait_input+0xdc>)
 800a018:	6819      	ldr	r1, [r3, #0]
 800a01a:	4b21      	ldr	r3, [pc, #132]	; (800a0a0 <tcp_timewait_input+0xe0>)
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	4b1d      	ldr	r3, [pc, #116]	; (800a098 <tcp_timewait_input+0xd8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a026:	4b1f      	ldr	r3, [pc, #124]	; (800a0a4 <tcp_timewait_input+0xe4>)
 800a028:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a02a:	885b      	ldrh	r3, [r3, #2]
 800a02c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a02e:	4a1d      	ldr	r2, [pc, #116]	; (800a0a4 <tcp_timewait_input+0xe4>)
 800a030:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a032:	8812      	ldrh	r2, [r2, #0]
 800a034:	b292      	uxth	r2, r2
 800a036:	9202      	str	r2, [sp, #8]
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	4b1b      	ldr	r3, [pc, #108]	; (800a0a8 <tcp_timewait_input+0xe8>)
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	4b1b      	ldr	r3, [pc, #108]	; (800a0ac <tcp_timewait_input+0xec>)
 800a040:	4602      	mov	r2, r0
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f002 fe70 	bl	800cd28 <tcp_rst>
      return;
 800a048:	e01b      	b.n	800a082 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a04a:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <tcp_timewait_input+0xc8>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a056:	4b16      	ldr	r3, [pc, #88]	; (800a0b0 <tcp_timewait_input+0xf0>)
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a05e:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <tcp_timewait_input+0xe0>)
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00c      	beq.n	800a080 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	8b5b      	ldrh	r3, [r3, #26]
 800a06a:	f043 0302 	orr.w	r3, r3, #2
 800a06e:	b29a      	uxth	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f002 f8a3 	bl	800c1c0 <tcp_output>
  }
  return;
 800a07a:	e001      	b.n	800a080 <tcp_timewait_input+0xc0>
    return;
 800a07c:	bf00      	nop
 800a07e:	e000      	b.n	800a082 <tcp_timewait_input+0xc2>
  return;
 800a080:	bf00      	nop
}
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20000100 	.word	0x20000100
 800a08c:	08011f44 	.word	0x08011f44
 800a090:	0801215c 	.word	0x0801215c
 800a094:	08011f90 	.word	0x08011f90
 800a098:	200000f4 	.word	0x200000f4
 800a09c:	200000f8 	.word	0x200000f8
 800a0a0:	200000fe 	.word	0x200000fe
 800a0a4:	200000e4 	.word	0x200000e4
 800a0a8:	200034b4 	.word	0x200034b4
 800a0ac:	200034b8 	.word	0x200034b8
 800a0b0:	20008bac 	.word	0x20008bac

0800a0b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b08d      	sub	sp, #52	; 0x34
 800a0b8:	af04      	add	r7, sp, #16
 800a0ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <tcp_process+0x24>
 800a0ca:	4ba5      	ldr	r3, [pc, #660]	; (800a360 <tcp_process+0x2ac>)
 800a0cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a0d0:	49a4      	ldr	r1, [pc, #656]	; (800a364 <tcp_process+0x2b0>)
 800a0d2:	48a5      	ldr	r0, [pc, #660]	; (800a368 <tcp_process+0x2b4>)
 800a0d4:	f005 fdf6 	bl	800fcc4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a0d8:	4ba4      	ldr	r3, [pc, #656]	; (800a36c <tcp_process+0x2b8>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d04e      	beq.n	800a182 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7d1b      	ldrb	r3, [r3, #20]
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d108      	bne.n	800a0fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0f0:	4b9f      	ldr	r3, [pc, #636]	; (800a370 <tcp_process+0x2bc>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d123      	bne.n	800a140 <tcp_process+0x8c>
        acceptable = 1;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	76fb      	strb	r3, [r7, #27]
 800a0fc:	e020      	b.n	800a140 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a102:	4b9c      	ldr	r3, [pc, #624]	; (800a374 <tcp_process+0x2c0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d102      	bne.n	800a110 <tcp_process+0x5c>
        acceptable = 1;
 800a10a:	2301      	movs	r3, #1
 800a10c:	76fb      	strb	r3, [r7, #27]
 800a10e:	e017      	b.n	800a140 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a110:	4b98      	ldr	r3, [pc, #608]	; (800a374 <tcp_process+0x2c0>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	db10      	blt.n	800a140 <tcp_process+0x8c>
 800a11e:	4b95      	ldr	r3, [pc, #596]	; (800a374 <tcp_process+0x2c0>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a12a:	440b      	add	r3, r1
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	dc06      	bgt.n	800a140 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	8b5b      	ldrh	r3, [r3, #26]
 800a136:	f043 0302 	orr.w	r3, r3, #2
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a140:	7efb      	ldrb	r3, [r7, #27]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01b      	beq.n	800a17e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	7d1b      	ldrb	r3, [r3, #20]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <tcp_process+0xa8>
 800a14e:	4b84      	ldr	r3, [pc, #528]	; (800a360 <tcp_process+0x2ac>)
 800a150:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a154:	4988      	ldr	r1, [pc, #544]	; (800a378 <tcp_process+0x2c4>)
 800a156:	4884      	ldr	r0, [pc, #528]	; (800a368 <tcp_process+0x2b4>)
 800a158:	f005 fdb4 	bl	800fcc4 <iprintf>
      recv_flags |= TF_RESET;
 800a15c:	4b87      	ldr	r3, [pc, #540]	; (800a37c <tcp_process+0x2c8>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	f043 0308 	orr.w	r3, r3, #8
 800a164:	b2da      	uxtb	r2, r3
 800a166:	4b85      	ldr	r3, [pc, #532]	; (800a37c <tcp_process+0x2c8>)
 800a168:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8b5b      	ldrh	r3, [r3, #26]
 800a16e:	f023 0301 	bic.w	r3, r3, #1
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a178:	f06f 030d 	mvn.w	r3, #13
 800a17c:	e37a      	b.n	800a874 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	e378      	b.n	800a874 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a182:	4b7a      	ldr	r3, [pc, #488]	; (800a36c <tcp_process+0x2b8>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	f003 0302 	and.w	r3, r3, #2
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d010      	beq.n	800a1b0 <tcp_process+0xfc>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7d1b      	ldrb	r3, [r3, #20]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d00c      	beq.n	800a1b0 <tcp_process+0xfc>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7d1b      	ldrb	r3, [r3, #20]
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d008      	beq.n	800a1b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	8b5b      	ldrh	r3, [r3, #26]
 800a1a2:	f043 0302 	orr.w	r3, r3, #2
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	e361      	b.n	800a874 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	8b5b      	ldrh	r3, [r3, #26]
 800a1b4:	f003 0310 	and.w	r3, r3, #16
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d103      	bne.n	800a1c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a1bc:	4b70      	ldr	r3, [pc, #448]	; (800a380 <tcp_process+0x2cc>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f001 fc2d 	bl	800ba34 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	7d1b      	ldrb	r3, [r3, #20]
 800a1de:	3b02      	subs	r3, #2
 800a1e0:	2b07      	cmp	r3, #7
 800a1e2:	f200 8337 	bhi.w	800a854 <tcp_process+0x7a0>
 800a1e6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <tcp_process+0x138>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a20d 	.word	0x0800a20d
 800a1f0:	0800a43d 	.word	0x0800a43d
 800a1f4:	0800a5b5 	.word	0x0800a5b5
 800a1f8:	0800a5df 	.word	0x0800a5df
 800a1fc:	0800a703 	.word	0x0800a703
 800a200:	0800a5b5 	.word	0x0800a5b5
 800a204:	0800a78f 	.word	0x0800a78f
 800a208:	0800a81f 	.word	0x0800a81f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a20c:	4b57      	ldr	r3, [pc, #348]	; (800a36c <tcp_process+0x2b8>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 0310 	and.w	r3, r3, #16
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 80e4 	beq.w	800a3e2 <tcp_process+0x32e>
 800a21a:	4b54      	ldr	r3, [pc, #336]	; (800a36c <tcp_process+0x2b8>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 80dd 	beq.w	800a3e2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	4b50      	ldr	r3, [pc, #320]	; (800a370 <tcp_process+0x2bc>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	f040 80d5 	bne.w	800a3e2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a238:	4b4e      	ldr	r3, [pc, #312]	; (800a374 <tcp_process+0x2c0>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a24a:	4b49      	ldr	r3, [pc, #292]	; (800a370 <tcp_process+0x2bc>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a252:	4b4c      	ldr	r3, [pc, #304]	; (800a384 <tcp_process+0x2d0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	89db      	ldrh	r3, [r3, #14]
 800a258:	b29a      	uxth	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a26c:	4b41      	ldr	r3, [pc, #260]	; (800a374 <tcp_process+0x2c0>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	1e5a      	subs	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2204      	movs	r2, #4
 800a27a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	4618      	mov	r0, r3
 800a286:	f004 faef 	bl	800e868 <ip4_route>
 800a28a:	4601      	mov	r1, r0
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3304      	adds	r3, #4
 800a290:	461a      	mov	r2, r3
 800a292:	4620      	mov	r0, r4
 800a294:	f7ff f88e 	bl	80093b4 <tcp_eff_send_mss_netif>
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2a4:	009a      	lsls	r2, r3, #2
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	f241 111c 	movw	r1, #4380	; 0x111c
 800a2b0:	428b      	cmp	r3, r1
 800a2b2:	bf38      	it	cc
 800a2b4:	460b      	movcc	r3, r1
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d204      	bcs.n	800a2c4 <tcp_process+0x210>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	e00d      	b.n	800a2e0 <tcp_process+0x22c>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	f241 121c 	movw	r2, #4380	; 0x111c
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d904      	bls.n	800a2dc <tcp_process+0x228>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	e001      	b.n	800a2e0 <tcp_process+0x22c>
 800a2dc:	f241 131c 	movw	r3, #4380	; 0x111c
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <tcp_process+0x24a>
 800a2f0:	4b1b      	ldr	r3, [pc, #108]	; (800a360 <tcp_process+0x2ac>)
 800a2f2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a2f6:	4924      	ldr	r1, [pc, #144]	; (800a388 <tcp_process+0x2d4>)
 800a2f8:	481b      	ldr	r0, [pc, #108]	; (800a368 <tcp_process+0x2b4>)
 800a2fa:	f005 fce3 	bl	800fcc4 <iprintf>
        --pcb->snd_queuelen;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a312:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d111      	bne.n	800a33e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a31e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d106      	bne.n	800a334 <tcp_process+0x280>
 800a326:	4b0e      	ldr	r3, [pc, #56]	; (800a360 <tcp_process+0x2ac>)
 800a328:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a32c:	4917      	ldr	r1, [pc, #92]	; (800a38c <tcp_process+0x2d8>)
 800a32e:	480e      	ldr	r0, [pc, #56]	; (800a368 <tcp_process+0x2b4>)
 800a330:	f005 fcc8 	bl	800fcc4 <iprintf>
          pcb->unsent = rseg->next;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	66da      	str	r2, [r3, #108]	; 0x6c
 800a33c:	e003      	b.n	800a346 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a346:	69f8      	ldr	r0, [r7, #28]
 800a348:	f7fe fd3d 	bl	8008dc6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a350:	2b00      	cmp	r3, #0
 800a352:	d11d      	bne.n	800a390 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a35a:	861a      	strh	r2, [r3, #48]	; 0x30
 800a35c:	e01f      	b.n	800a39e <tcp_process+0x2ea>
 800a35e:	bf00      	nop
 800a360:	08011f44 	.word	0x08011f44
 800a364:	0801217c 	.word	0x0801217c
 800a368:	08011f90 	.word	0x08011f90
 800a36c:	20000100 	.word	0x20000100
 800a370:	200000f8 	.word	0x200000f8
 800a374:	200000f4 	.word	0x200000f4
 800a378:	08012198 	.word	0x08012198
 800a37c:	20000101 	.word	0x20000101
 800a380:	20008bac 	.word	0x20008bac
 800a384:	200000e4 	.word	0x200000e4
 800a388:	080121b8 	.word	0x080121b8
 800a38c:	080121d0 	.word	0x080121d0
        } else {
          pcb->rtime = 0;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00a      	beq.n	800a3be <tcp_process+0x30a>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	6910      	ldr	r0, [r2, #16]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	4798      	blx	r3
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	76bb      	strb	r3, [r7, #26]
 800a3bc:	e001      	b.n	800a3c2 <tcp_process+0x30e>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a3c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a3c6:	f113 0f0d 	cmn.w	r3, #13
 800a3ca:	d102      	bne.n	800a3d2 <tcp_process+0x31e>
          return ERR_ABRT;
 800a3cc:	f06f 030c 	mvn.w	r3, #12
 800a3d0:	e250      	b.n	800a874 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	8b5b      	ldrh	r3, [r3, #26]
 800a3d6:	f043 0302 	orr.w	r3, r3, #2
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a3e0:	e23a      	b.n	800a858 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a3e2:	4b9d      	ldr	r3, [pc, #628]	; (800a658 <tcp_process+0x5a4>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	f003 0310 	and.w	r3, r3, #16
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 8234 	beq.w	800a858 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3f0:	4b9a      	ldr	r3, [pc, #616]	; (800a65c <tcp_process+0x5a8>)
 800a3f2:	6819      	ldr	r1, [r3, #0]
 800a3f4:	4b9a      	ldr	r3, [pc, #616]	; (800a660 <tcp_process+0x5ac>)
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	4b9a      	ldr	r3, [pc, #616]	; (800a664 <tcp_process+0x5b0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a400:	4b99      	ldr	r3, [pc, #612]	; (800a668 <tcp_process+0x5b4>)
 800a402:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a404:	885b      	ldrh	r3, [r3, #2]
 800a406:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a408:	4a97      	ldr	r2, [pc, #604]	; (800a668 <tcp_process+0x5b4>)
 800a40a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a40c:	8812      	ldrh	r2, [r2, #0]
 800a40e:	b292      	uxth	r2, r2
 800a410:	9202      	str	r2, [sp, #8]
 800a412:	9301      	str	r3, [sp, #4]
 800a414:	4b95      	ldr	r3, [pc, #596]	; (800a66c <tcp_process+0x5b8>)
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	4b95      	ldr	r3, [pc, #596]	; (800a670 <tcp_process+0x5bc>)
 800a41a:	4602      	mov	r2, r0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f002 fc83 	bl	800cd28 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a428:	2b05      	cmp	r3, #5
 800a42a:	f200 8215 	bhi.w	800a858 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f002 fa4d 	bl	800c8d4 <tcp_rexmit_rto>
      break;
 800a43a:	e20d      	b.n	800a858 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a43c:	4b86      	ldr	r3, [pc, #536]	; (800a658 <tcp_process+0x5a4>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 80a1 	beq.w	800a58c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a44a:	4b84      	ldr	r3, [pc, #528]	; (800a65c <tcp_process+0x5a8>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	3b01      	subs	r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	db7e      	blt.n	800a558 <tcp_process+0x4a4>
 800a45a:	4b80      	ldr	r3, [pc, #512]	; (800a65c <tcp_process+0x5a8>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	dc77      	bgt.n	800a558 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2204      	movs	r2, #4
 800a46c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a476:	23fa      	movs	r3, #250	; 0xfa
 800a478:	76bb      	strb	r3, [r7, #26]
 800a47a:	e01d      	b.n	800a4b8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <tcp_process+0x3e0>
 800a486:	4b7b      	ldr	r3, [pc, #492]	; (800a674 <tcp_process+0x5c0>)
 800a488:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a48c:	497a      	ldr	r1, [pc, #488]	; (800a678 <tcp_process+0x5c4>)
 800a48e:	487b      	ldr	r0, [pc, #492]	; (800a67c <tcp_process+0x5c8>)
 800a490:	f005 fc18 	bl	800fcc4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <tcp_process+0x400>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6910      	ldr	r0, [r2, #16]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	4798      	blx	r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	76bb      	strb	r3, [r7, #26]
 800a4b2:	e001      	b.n	800a4b8 <tcp_process+0x404>
 800a4b4:	23f0      	movs	r3, #240	; 0xf0
 800a4b6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a4b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00a      	beq.n	800a4d6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a4c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a4c4:	f113 0f0d 	cmn.w	r3, #13
 800a4c8:	d002      	beq.n	800a4d0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7fd ff90 	bl	80083f0 <tcp_abort>
            }
            return ERR_ABRT;
 800a4d0:	f06f 030c 	mvn.w	r3, #12
 800a4d4:	e1ce      	b.n	800a874 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fae0 	bl	800aa9c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a4dc:	4b68      	ldr	r3, [pc, #416]	; (800a680 <tcp_process+0x5cc>)
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <tcp_process+0x43c>
            recv_acked--;
 800a4e4:	4b66      	ldr	r3, [pc, #408]	; (800a680 <tcp_process+0x5cc>)
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	4b64      	ldr	r3, [pc, #400]	; (800a680 <tcp_process+0x5cc>)
 800a4ee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4f4:	009a      	lsls	r2, r3, #2
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	f241 111c 	movw	r1, #4380	; 0x111c
 800a500:	428b      	cmp	r3, r1
 800a502:	bf38      	it	cc
 800a504:	460b      	movcc	r3, r1
 800a506:	429a      	cmp	r2, r3
 800a508:	d204      	bcs.n	800a514 <tcp_process+0x460>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	b29b      	uxth	r3, r3
 800a512:	e00d      	b.n	800a530 <tcp_process+0x47c>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	f241 121c 	movw	r2, #4380	; 0x111c
 800a51e:	4293      	cmp	r3, r2
 800a520:	d904      	bls.n	800a52c <tcp_process+0x478>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	b29b      	uxth	r3, r3
 800a52a:	e001      	b.n	800a530 <tcp_process+0x47c>
 800a52c:	f241 131c 	movw	r3, #4380	; 0x111c
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a536:	4b53      	ldr	r3, [pc, #332]	; (800a684 <tcp_process+0x5d0>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d037      	beq.n	800a5b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	8b5b      	ldrh	r3, [r3, #26]
 800a546:	f043 0302 	orr.w	r3, r3, #2
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2207      	movs	r2, #7
 800a554:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a556:	e02c      	b.n	800a5b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a558:	4b40      	ldr	r3, [pc, #256]	; (800a65c <tcp_process+0x5a8>)
 800a55a:	6819      	ldr	r1, [r3, #0]
 800a55c:	4b40      	ldr	r3, [pc, #256]	; (800a660 <tcp_process+0x5ac>)
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	4b40      	ldr	r3, [pc, #256]	; (800a664 <tcp_process+0x5b0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a568:	4b3f      	ldr	r3, [pc, #252]	; (800a668 <tcp_process+0x5b4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a56c:	885b      	ldrh	r3, [r3, #2]
 800a56e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a570:	4a3d      	ldr	r2, [pc, #244]	; (800a668 <tcp_process+0x5b4>)
 800a572:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a574:	8812      	ldrh	r2, [r2, #0]
 800a576:	b292      	uxth	r2, r2
 800a578:	9202      	str	r2, [sp, #8]
 800a57a:	9301      	str	r3, [sp, #4]
 800a57c:	4b3b      	ldr	r3, [pc, #236]	; (800a66c <tcp_process+0x5b8>)
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	4b3b      	ldr	r3, [pc, #236]	; (800a670 <tcp_process+0x5bc>)
 800a582:	4602      	mov	r2, r0
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f002 fbcf 	bl	800cd28 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a58a:	e167      	b.n	800a85c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a58c:	4b32      	ldr	r3, [pc, #200]	; (800a658 <tcp_process+0x5a4>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 8161 	beq.w	800a85c <tcp_process+0x7a8>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	1e5a      	subs	r2, r3, #1
 800a5a0:	4b30      	ldr	r3, [pc, #192]	; (800a664 <tcp_process+0x5b0>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	f040 8159 	bne.w	800a85c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f002 f9b4 	bl	800c918 <tcp_rexmit>
      break;
 800a5b0:	e154      	b.n	800a85c <tcp_process+0x7a8>
 800a5b2:	e153      	b.n	800a85c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fa71 	bl	800aa9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a5ba:	4b32      	ldr	r3, [pc, #200]	; (800a684 <tcp_process+0x5d0>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 814c 	beq.w	800a860 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	8b5b      	ldrh	r3, [r3, #26]
 800a5cc:	f043 0302 	orr.w	r3, r3, #2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2207      	movs	r2, #7
 800a5da:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a5dc:	e140      	b.n	800a860 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa5c 	bl	800aa9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a5e4:	4b27      	ldr	r3, [pc, #156]	; (800a684 <tcp_process+0x5d0>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	f003 0320 	and.w	r3, r3, #32
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d071      	beq.n	800a6d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a5f0:	4b19      	ldr	r3, [pc, #100]	; (800a658 <tcp_process+0x5a4>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 0310 	and.w	r3, r3, #16
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d060      	beq.n	800a6be <tcp_process+0x60a>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a600:	4b16      	ldr	r3, [pc, #88]	; (800a65c <tcp_process+0x5a8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	429a      	cmp	r2, r3
 800a606:	d15a      	bne.n	800a6be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d156      	bne.n	800a6be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	8b5b      	ldrh	r3, [r3, #26]
 800a614:	f043 0302 	orr.w	r3, r3, #2
 800a618:	b29a      	uxth	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7fe fdbe 	bl	80091a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a624:	4b18      	ldr	r3, [pc, #96]	; (800a688 <tcp_process+0x5d4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d105      	bne.n	800a63a <tcp_process+0x586>
 800a62e:	4b16      	ldr	r3, [pc, #88]	; (800a688 <tcp_process+0x5d4>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	4a14      	ldr	r2, [pc, #80]	; (800a688 <tcp_process+0x5d4>)
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	e02e      	b.n	800a698 <tcp_process+0x5e4>
 800a63a:	4b13      	ldr	r3, [pc, #76]	; (800a688 <tcp_process+0x5d4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	e027      	b.n	800a692 <tcp_process+0x5de>
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d11f      	bne.n	800a68c <tcp_process+0x5d8>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	e020      	b.n	800a698 <tcp_process+0x5e4>
 800a656:	bf00      	nop
 800a658:	20000100 	.word	0x20000100
 800a65c:	200000f8 	.word	0x200000f8
 800a660:	200000fe 	.word	0x200000fe
 800a664:	200000f4 	.word	0x200000f4
 800a668:	200000e4 	.word	0x200000e4
 800a66c:	200034b4 	.word	0x200034b4
 800a670:	200034b8 	.word	0x200034b8
 800a674:	08011f44 	.word	0x08011f44
 800a678:	080121e4 	.word	0x080121e4
 800a67c:	08011f90 	.word	0x08011f90
 800a680:	200000fc 	.word	0x200000fc
 800a684:	20000101 	.word	0x20000101
 800a688:	20008ba8 	.word	0x20008ba8
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	617b      	str	r3, [r7, #20]
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1d4      	bne.n	800a642 <tcp_process+0x58e>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	60da      	str	r2, [r3, #12]
 800a69e:	4b77      	ldr	r3, [pc, #476]	; (800a87c <tcp_process+0x7c8>)
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	220a      	movs	r2, #10
 800a6a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a6aa:	4b75      	ldr	r3, [pc, #468]	; (800a880 <tcp_process+0x7cc>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60da      	str	r2, [r3, #12]
 800a6b2:	4a73      	ldr	r2, [pc, #460]	; (800a880 <tcp_process+0x7cc>)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6013      	str	r3, [r2, #0]
 800a6b8:	f002 fcf8 	bl	800d0ac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a6bc:	e0d2      	b.n	800a864 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	8b5b      	ldrh	r3, [r3, #26]
 800a6c2:	f043 0302 	orr.w	r3, r3, #2
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2208      	movs	r2, #8
 800a6d0:	751a      	strb	r2, [r3, #20]
      break;
 800a6d2:	e0c7      	b.n	800a864 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a6d4:	4b6b      	ldr	r3, [pc, #428]	; (800a884 <tcp_process+0x7d0>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 80c1 	beq.w	800a864 <tcp_process+0x7b0>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6e6:	4b68      	ldr	r3, [pc, #416]	; (800a888 <tcp_process+0x7d4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	f040 80ba 	bne.w	800a864 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 80b5 	bne.w	800a864 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2206      	movs	r2, #6
 800a6fe:	751a      	strb	r2, [r3, #20]
      break;
 800a700:	e0b0      	b.n	800a864 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f9ca 	bl	800aa9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a708:	4b60      	ldr	r3, [pc, #384]	; (800a88c <tcp_process+0x7d8>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 0320 	and.w	r3, r3, #32
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80a9 	beq.w	800a868 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	8b5b      	ldrh	r3, [r3, #26]
 800a71a:	f043 0302 	orr.w	r3, r3, #2
 800a71e:	b29a      	uxth	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7fe fd3b 	bl	80091a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a72a:	4b59      	ldr	r3, [pc, #356]	; (800a890 <tcp_process+0x7dc>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	429a      	cmp	r2, r3
 800a732:	d105      	bne.n	800a740 <tcp_process+0x68c>
 800a734:	4b56      	ldr	r3, [pc, #344]	; (800a890 <tcp_process+0x7dc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	4a55      	ldr	r2, [pc, #340]	; (800a890 <tcp_process+0x7dc>)
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	e013      	b.n	800a768 <tcp_process+0x6b4>
 800a740:	4b53      	ldr	r3, [pc, #332]	; (800a890 <tcp_process+0x7dc>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	e00c      	b.n	800a762 <tcp_process+0x6ae>
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d104      	bne.n	800a75c <tcp_process+0x6a8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68da      	ldr	r2, [r3, #12]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	60da      	str	r2, [r3, #12]
 800a75a:	e005      	b.n	800a768 <tcp_process+0x6b4>
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	613b      	str	r3, [r7, #16]
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1ef      	bne.n	800a748 <tcp_process+0x694>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	60da      	str	r2, [r3, #12]
 800a76e:	4b43      	ldr	r3, [pc, #268]	; (800a87c <tcp_process+0x7c8>)
 800a770:	2201      	movs	r2, #1
 800a772:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	220a      	movs	r2, #10
 800a778:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a77a:	4b41      	ldr	r3, [pc, #260]	; (800a880 <tcp_process+0x7cc>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60da      	str	r2, [r3, #12]
 800a782:	4a3f      	ldr	r2, [pc, #252]	; (800a880 <tcp_process+0x7cc>)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	f002 fc90 	bl	800d0ac <tcp_timer_needed>
      }
      break;
 800a78c:	e06c      	b.n	800a868 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f984 	bl	800aa9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a794:	4b3b      	ldr	r3, [pc, #236]	; (800a884 <tcp_process+0x7d0>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f003 0310 	and.w	r3, r3, #16
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d065      	beq.n	800a86c <tcp_process+0x7b8>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7a4:	4b38      	ldr	r3, [pc, #224]	; (800a888 <tcp_process+0x7d4>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d15f      	bne.n	800a86c <tcp_process+0x7b8>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d15b      	bne.n	800a86c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7fe fcf3 	bl	80091a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a7ba:	4b35      	ldr	r3, [pc, #212]	; (800a890 <tcp_process+0x7dc>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d105      	bne.n	800a7d0 <tcp_process+0x71c>
 800a7c4:	4b32      	ldr	r3, [pc, #200]	; (800a890 <tcp_process+0x7dc>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	4a31      	ldr	r2, [pc, #196]	; (800a890 <tcp_process+0x7dc>)
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	e013      	b.n	800a7f8 <tcp_process+0x744>
 800a7d0:	4b2f      	ldr	r3, [pc, #188]	; (800a890 <tcp_process+0x7dc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	e00c      	b.n	800a7f2 <tcp_process+0x73e>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d104      	bne.n	800a7ec <tcp_process+0x738>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	60da      	str	r2, [r3, #12]
 800a7ea:	e005      	b.n	800a7f8 <tcp_process+0x744>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1ef      	bne.n	800a7d8 <tcp_process+0x724>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	60da      	str	r2, [r3, #12]
 800a7fe:	4b1f      	ldr	r3, [pc, #124]	; (800a87c <tcp_process+0x7c8>)
 800a800:	2201      	movs	r2, #1
 800a802:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	220a      	movs	r2, #10
 800a808:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a80a:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <tcp_process+0x7cc>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60da      	str	r2, [r3, #12]
 800a812:	4a1b      	ldr	r2, [pc, #108]	; (800a880 <tcp_process+0x7cc>)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	f002 fc48 	bl	800d0ac <tcp_timer_needed>
      }
      break;
 800a81c:	e026      	b.n	800a86c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f93c 	bl	800aa9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a824:	4b17      	ldr	r3, [pc, #92]	; (800a884 <tcp_process+0x7d0>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0310 	and.w	r3, r3, #16
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01f      	beq.n	800a870 <tcp_process+0x7bc>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a834:	4b14      	ldr	r3, [pc, #80]	; (800a888 <tcp_process+0x7d4>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d119      	bne.n	800a870 <tcp_process+0x7bc>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d115      	bne.n	800a870 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a844:	4b11      	ldr	r3, [pc, #68]	; (800a88c <tcp_process+0x7d8>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f043 0310 	orr.w	r3, r3, #16
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <tcp_process+0x7d8>)
 800a850:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a852:	e00d      	b.n	800a870 <tcp_process+0x7bc>
    default:
      break;
 800a854:	bf00      	nop
 800a856:	e00c      	b.n	800a872 <tcp_process+0x7be>
      break;
 800a858:	bf00      	nop
 800a85a:	e00a      	b.n	800a872 <tcp_process+0x7be>
      break;
 800a85c:	bf00      	nop
 800a85e:	e008      	b.n	800a872 <tcp_process+0x7be>
      break;
 800a860:	bf00      	nop
 800a862:	e006      	b.n	800a872 <tcp_process+0x7be>
      break;
 800a864:	bf00      	nop
 800a866:	e004      	b.n	800a872 <tcp_process+0x7be>
      break;
 800a868:	bf00      	nop
 800a86a:	e002      	b.n	800a872 <tcp_process+0x7be>
      break;
 800a86c:	bf00      	nop
 800a86e:	e000      	b.n	800a872 <tcp_process+0x7be>
      break;
 800a870:	bf00      	nop
  }
  return ERR_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3724      	adds	r7, #36	; 0x24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd90      	pop	{r4, r7, pc}
 800a87c:	20008ba4 	.word	0x20008ba4
 800a880:	20008bb8 	.word	0x20008bb8
 800a884:	20000100 	.word	0x20000100
 800a888:	200000f8 	.word	0x200000f8
 800a88c:	20000101 	.word	0x20000101
 800a890:	20008ba8 	.word	0x20008ba8

0800a894 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a894:	b590      	push	{r4, r7, lr}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d106      	bne.n	800a8b2 <tcp_oos_insert_segment+0x1e>
 800a8a4:	4b3b      	ldr	r3, [pc, #236]	; (800a994 <tcp_oos_insert_segment+0x100>)
 800a8a6:	f240 421f 	movw	r2, #1055	; 0x41f
 800a8aa:	493b      	ldr	r1, [pc, #236]	; (800a998 <tcp_oos_insert_segment+0x104>)
 800a8ac:	483b      	ldr	r0, [pc, #236]	; (800a99c <tcp_oos_insert_segment+0x108>)
 800a8ae:	f005 fa09 	bl	800fcc4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	899b      	ldrh	r3, [r3, #12]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fb fd5c 	bl	8006378 <lwip_htons>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d028      	beq.n	800a91e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a8cc:	6838      	ldr	r0, [r7, #0]
 800a8ce:	f7fe fa65 	bl	8008d9c <tcp_segs_free>
    next = NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	603b      	str	r3, [r7, #0]
 800a8d6:	e056      	b.n	800a986 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	899b      	ldrh	r3, [r3, #12]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fb fd49 	bl	8006378 <lwip_htons>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00d      	beq.n	800a90e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	899b      	ldrh	r3, [r3, #12]
 800a8f8:	b29c      	uxth	r4, r3
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f7fb fd3c 	bl	8006378 <lwip_htons>
 800a900:	4603      	mov	r3, r0
 800a902:	461a      	mov	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	4322      	orrs	r2, r4
 800a90a:	b292      	uxth	r2, r2
 800a90c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7fe fa54 	bl	8008dc6 <tcp_seg_free>
    while (next &&
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00e      	beq.n	800a942 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	891b      	ldrh	r3, [r3, #8]
 800a928:	461a      	mov	r2, r3
 800a92a:	4b1d      	ldr	r3, [pc, #116]	; (800a9a0 <tcp_oos_insert_segment+0x10c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	441a      	add	r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	8909      	ldrh	r1, [r1, #8]
 800a93a:	440b      	add	r3, r1
 800a93c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a93e:	2b00      	cmp	r3, #0
 800a940:	daca      	bge.n	800a8d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01e      	beq.n	800a986 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	891b      	ldrh	r3, [r3, #8]
 800a94c:	461a      	mov	r2, r3
 800a94e:	4b14      	ldr	r3, [pc, #80]	; (800a9a0 <tcp_oos_insert_segment+0x10c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	441a      	add	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd12      	ble.n	800a986 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	b29a      	uxth	r2, r3
 800a968:	4b0d      	ldr	r3, [pc, #52]	; (800a9a0 <tcp_oos_insert_segment+0x10c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	b29a      	uxth	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	891b      	ldrh	r3, [r3, #8]
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fc fe27 	bl	80075d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	601a      	str	r2, [r3, #0]
}
 800a98c:	bf00      	nop
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	bd90      	pop	{r4, r7, pc}
 800a994:	08011f44 	.word	0x08011f44
 800a998:	08012204 	.word	0x08012204
 800a99c:	08011f90 	.word	0x08011f90
 800a9a0:	200000f4 	.word	0x200000f4

0800a9a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a9a4:	b5b0      	push	{r4, r5, r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a9b2:	e03e      	b.n	800aa32 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fd f814 	bl	80079f0 <pbuf_clen>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9d2:	8a7a      	ldrh	r2, [r7, #18]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d906      	bls.n	800a9e6 <tcp_free_acked_segments+0x42>
 800a9d8:	4b2a      	ldr	r3, [pc, #168]	; (800aa84 <tcp_free_acked_segments+0xe0>)
 800a9da:	f240 4257 	movw	r2, #1111	; 0x457
 800a9de:	492a      	ldr	r1, [pc, #168]	; (800aa88 <tcp_free_acked_segments+0xe4>)
 800a9e0:	482a      	ldr	r0, [pc, #168]	; (800aa8c <tcp_free_acked_segments+0xe8>)
 800a9e2:	f005 f96f 	bl	800fcc4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a9ec:	8a7b      	ldrh	r3, [r7, #18]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	891a      	ldrh	r2, [r3, #8]
 800a9fc:	4b24      	ldr	r3, [pc, #144]	; (800aa90 <tcp_free_acked_segments+0xec>)
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	4413      	add	r3, r2
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	4b22      	ldr	r3, [pc, #136]	; (800aa90 <tcp_free_acked_segments+0xec>)
 800aa06:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800aa08:	6978      	ldr	r0, [r7, #20]
 800aa0a:	f7fe f9dc 	bl	8008dc6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00c      	beq.n	800aa32 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d109      	bne.n	800aa32 <tcp_free_acked_segments+0x8e>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d106      	bne.n	800aa32 <tcp_free_acked_segments+0x8e>
 800aa24:	4b17      	ldr	r3, [pc, #92]	; (800aa84 <tcp_free_acked_segments+0xe0>)
 800aa26:	f240 4261 	movw	r2, #1121	; 0x461
 800aa2a:	491a      	ldr	r1, [pc, #104]	; (800aa94 <tcp_free_acked_segments+0xf0>)
 800aa2c:	4817      	ldr	r0, [pc, #92]	; (800aa8c <tcp_free_acked_segments+0xe8>)
 800aa2e:	f005 f949 	bl	800fcc4 <iprintf>
  while (seg_list != NULL &&
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d020      	beq.n	800aa7a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fb fcaf 	bl	80063a2 <lwip_htonl>
 800aa44:	4604      	mov	r4, r0
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	891b      	ldrh	r3, [r3, #8]
 800aa4a:	461d      	mov	r5, r3
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	899b      	ldrh	r3, [r3, #12]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fb fc8f 	bl	8006378 <lwip_htons>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <tcp_free_acked_segments+0xc6>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <tcp_free_acked_segments+0xc8>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	442b      	add	r3, r5
 800aa6e:	18e2      	adds	r2, r4, r3
 800aa70:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <tcp_free_acked_segments+0xf4>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dd9c      	ble.n	800a9b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bdb0      	pop	{r4, r5, r7, pc}
 800aa84:	08011f44 	.word	0x08011f44
 800aa88:	0801222c 	.word	0x0801222c
 800aa8c:	08011f90 	.word	0x08011f90
 800aa90:	200000fc 	.word	0x200000fc
 800aa94:	08012254 	.word	0x08012254
 800aa98:	200000f8 	.word	0x200000f8

0800aa9c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800aa9c:	b5b0      	push	{r4, r5, r7, lr}
 800aa9e:	b094      	sub	sp, #80	; 0x50
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <tcp_receive+0x20>
 800aaae:	4ba6      	ldr	r3, [pc, #664]	; (800ad48 <tcp_receive+0x2ac>)
 800aab0:	f240 427b 	movw	r2, #1147	; 0x47b
 800aab4:	49a5      	ldr	r1, [pc, #660]	; (800ad4c <tcp_receive+0x2b0>)
 800aab6:	48a6      	ldr	r0, [pc, #664]	; (800ad50 <tcp_receive+0x2b4>)
 800aab8:	f005 f904 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	7d1b      	ldrb	r3, [r3, #20]
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d806      	bhi.n	800aad2 <tcp_receive+0x36>
 800aac4:	4ba0      	ldr	r3, [pc, #640]	; (800ad48 <tcp_receive+0x2ac>)
 800aac6:	f240 427c 	movw	r2, #1148	; 0x47c
 800aaca:	49a2      	ldr	r1, [pc, #648]	; (800ad54 <tcp_receive+0x2b8>)
 800aacc:	48a0      	ldr	r0, [pc, #640]	; (800ad50 <tcp_receive+0x2b4>)
 800aace:	f005 f8f9 	bl	800fcc4 <iprintf>

  if (flags & TCP_ACK) {
 800aad2:	4ba1      	ldr	r3, [pc, #644]	; (800ad58 <tcp_receive+0x2bc>)
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	f003 0310 	and.w	r3, r3, #16
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 8263 	beq.w	800afa6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aae6:	461a      	mov	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaec:	4413      	add	r3, r2
 800aaee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaf4:	4b99      	ldr	r3, [pc, #612]	; (800ad5c <tcp_receive+0x2c0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	db1b      	blt.n	800ab36 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab02:	4b96      	ldr	r3, [pc, #600]	; (800ad5c <tcp_receive+0x2c0>)
 800ab04:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d106      	bne.n	800ab18 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab0e:	4b94      	ldr	r3, [pc, #592]	; (800ad60 <tcp_receive+0x2c4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	db0e      	blt.n	800ab36 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab1c:	4b90      	ldr	r3, [pc, #576]	; (800ad60 <tcp_receive+0x2c4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d125      	bne.n	800ab70 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ab24:	4b8f      	ldr	r3, [pc, #572]	; (800ad64 <tcp_receive+0x2c8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	89db      	ldrh	r3, [r3, #14]
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d91c      	bls.n	800ab70 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ab36:	4b8b      	ldr	r3, [pc, #556]	; (800ad64 <tcp_receive+0x2c8>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	89db      	ldrh	r3, [r3, #14]
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d205      	bcs.n	800ab60 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ab60:	4b7e      	ldr	r3, [pc, #504]	; (800ad5c <tcp_receive+0x2c0>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ab68:	4b7d      	ldr	r3, [pc, #500]	; (800ad60 <tcp_receive+0x2c4>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ab70:	4b7b      	ldr	r3, [pc, #492]	; (800ad60 <tcp_receive+0x2c4>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	dc58      	bgt.n	800ac30 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ab7e:	4b7a      	ldr	r3, [pc, #488]	; (800ad68 <tcp_receive+0x2cc>)
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d14b      	bne.n	800ac1e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ab90:	4413      	add	r3, r2
 800ab92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d142      	bne.n	800ac1e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	db3d      	blt.n	800ac1e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aba6:	4b6e      	ldr	r3, [pc, #440]	; (800ad60 <tcp_receive+0x2c4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d137      	bne.n	800ac1e <tcp_receive+0x182>
              found_dupack = 1;
 800abae:	2301      	movs	r3, #1
 800abb0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abb8:	2bff      	cmp	r3, #255	; 0xff
 800abba:	d007      	beq.n	800abcc <tcp_receive+0x130>
                ++pcb->dupacks;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abc2:	3301      	adds	r3, #1
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d91b      	bls.n	800ac0e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abe0:	4413      	add	r3, r2
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800abea:	429a      	cmp	r2, r3
 800abec:	d30a      	bcc.n	800ac04 <tcp_receive+0x168>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abf8:	4413      	add	r3, r2
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ac02:	e004      	b.n	800ac0e <tcp_receive+0x172>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d902      	bls.n	800ac1e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 fee9 	bl	800c9f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ac1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 8160 	bne.w	800aee6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac2e:	e15a      	b.n	800aee6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac30:	4b4b      	ldr	r3, [pc, #300]	; (800ad60 <tcp_receive+0x2c4>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f2c0 814d 	blt.w	800aedc <tcp_receive+0x440>
 800ac42:	4b47      	ldr	r3, [pc, #284]	; (800ad60 <tcp_receive+0x2c4>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f300 8145 	bgt.w	800aedc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	8b5b      	ldrh	r3, [r3, #26]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d010      	beq.n	800ac80 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	8b5b      	ldrh	r3, [r3, #26]
 800ac62:	f023 0304 	bic.w	r3, r3, #4
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac8e:	10db      	asrs	r3, r3, #3
 800ac90:	b21b      	sxth	r3, r3
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	4413      	add	r3, r2
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	b21a      	sxth	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800aca8:	4b2d      	ldr	r3, [pc, #180]	; (800ad60 <tcp_receive+0x2c4>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	b29a      	uxth	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800acc0:	4b27      	ldr	r3, [pc, #156]	; (800ad60 <tcp_receive+0x2c4>)
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7d1b      	ldrb	r3, [r3, #20]
 800accc:	2b03      	cmp	r3, #3
 800acce:	f240 8096 	bls.w	800adfe <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800acde:	429a      	cmp	r2, r3
 800ace0:	d244      	bcs.n	800ad6c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	8b5b      	ldrh	r3, [r3, #26]
 800ace6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <tcp_receive+0x256>
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <tcp_receive+0x258>
 800acf2:	2302      	movs	r3, #2
 800acf4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800acf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad02:	fb12 f303 	smulbb	r3, r2, r3
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	bf28      	it	cs
 800ad0e:	4613      	movcs	r3, r2
 800ad10:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ad1a:	4413      	add	r3, r2
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d309      	bcc.n	800ad3c <tcp_receive+0x2a0>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ad30:	4413      	add	r3, r2
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ad3a:	e060      	b.n	800adfe <tcp_receive+0x362>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ad46:	e05a      	b.n	800adfe <tcp_receive+0x362>
 800ad48:	08011f44 	.word	0x08011f44
 800ad4c:	08012274 	.word	0x08012274
 800ad50:	08011f90 	.word	0x08011f90
 800ad54:	08012290 	.word	0x08012290
 800ad58:	20000100 	.word	0x20000100
 800ad5c:	200000f4 	.word	0x200000f4
 800ad60:	200000f8 	.word	0x200000f8
 800ad64:	200000e4 	.word	0x200000e4
 800ad68:	200000fe 	.word	0x200000fe
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ad72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad74:	4413      	add	r3, r2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d309      	bcc.n	800ad96 <tcp_receive+0x2fa>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ad88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad8a:	4413      	add	r3, r2
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad94:	e004      	b.n	800ada0 <tcp_receive+0x304>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800adac:	429a      	cmp	r2, r3
 800adae:	d326      	bcc.n	800adfe <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800add0:	4413      	add	r3, r2
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800adda:	429a      	cmp	r2, r3
 800addc:	d30a      	bcc.n	800adf4 <tcp_receive+0x358>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ade8:	4413      	add	r3, r2
 800adea:	b29a      	uxth	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800adf2:	e004      	b.n	800adfe <tcp_receive+0x362>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae06:	4a98      	ldr	r2, [pc, #608]	; (800b068 <tcp_receive+0x5cc>)
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fdcb 	bl	800a9a4 <tcp_free_acked_segments>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1c:	4a93      	ldr	r2, [pc, #588]	; (800b06c <tcp_receive+0x5d0>)
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff fdc0 	bl	800a9a4 <tcp_free_acked_segments>
 800ae24:	4602      	mov	r2, r0
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d104      	bne.n	800ae3c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae38:	861a      	strh	r2, [r3, #48]	; 0x30
 800ae3a:	e002      	b.n	800ae42 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d103      	bne.n	800ae58 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ae5e:	4b84      	ldr	r3, [pc, #528]	; (800b070 <tcp_receive+0x5d4>)
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	4413      	add	r3, r2
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8b5b      	ldrh	r3, [r3, #26]
 800ae70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d035      	beq.n	800aee4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d118      	bne.n	800aeb2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00c      	beq.n	800aea2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fb fa84 	bl	80063a2 <lwip_htonl>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dc20      	bgt.n	800aee4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	8b5b      	ldrh	r3, [r3, #26]
 800aea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aeb0:	e018      	b.n	800aee4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fb fa6f 	bl	80063a2 <lwip_htonl>
 800aec4:	4603      	mov	r3, r0
 800aec6:	1ae3      	subs	r3, r4, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dc0b      	bgt.n	800aee4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	8b5b      	ldrh	r3, [r3, #26]
 800aed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aeda:	e003      	b.n	800aee4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 ff75 	bl	800cdcc <tcp_send_empty_ack>
 800aee2:	e000      	b.n	800aee6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aee4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d05b      	beq.n	800afa6 <tcp_receive+0x50a>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef2:	4b60      	ldr	r3, [pc, #384]	; (800b074 <tcp_receive+0x5d8>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	da54      	bge.n	800afa6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aefc:	4b5e      	ldr	r3, [pc, #376]	; (800b078 <tcp_receive+0x5dc>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	b29a      	uxth	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af06:	b29b      	uxth	r3, r3
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800af10:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af1a:	10db      	asrs	r3, r3, #3
 800af1c:	b21b      	sxth	r3, r3
 800af1e:	b29b      	uxth	r3, r3
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	b29b      	uxth	r3, r3
 800af24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af2e:	b29a      	uxth	r2, r3
 800af30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af34:	4413      	add	r3, r2
 800af36:	b29b      	uxth	r3, r3
 800af38:	b21a      	sxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800af3e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800af42:	2b00      	cmp	r3, #0
 800af44:	da05      	bge.n	800af52 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800af46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af4a:	425b      	negs	r3, r3
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800af52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af5c:	109b      	asrs	r3, r3, #2
 800af5e:	b21b      	sxth	r3, r3
 800af60:	b29b      	uxth	r3, r3
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	b29b      	uxth	r3, r3
 800af66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af70:	b29a      	uxth	r2, r3
 800af72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af76:	4413      	add	r3, r2
 800af78:	b29b      	uxth	r3, r3
 800af7a:	b21a      	sxth	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af86:	10db      	asrs	r3, r3, #3
 800af88:	b21b      	sxth	r3, r3
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af92:	b29b      	uxth	r3, r3
 800af94:	4413      	add	r3, r2
 800af96:	b29b      	uxth	r3, r3
 800af98:	b21a      	sxth	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800afa6:	4b35      	ldr	r3, [pc, #212]	; (800b07c <tcp_receive+0x5e0>)
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 84e1 	beq.w	800b972 <tcp_receive+0xed6>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	7d1b      	ldrb	r3, [r3, #20]
 800afb4:	2b06      	cmp	r3, #6
 800afb6:	f200 84dc 	bhi.w	800b972 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afbe:	4b30      	ldr	r3, [pc, #192]	; (800b080 <tcp_receive+0x5e4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	3b01      	subs	r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f2c0 808e 	blt.w	800b0e8 <tcp_receive+0x64c>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afd0:	4b2a      	ldr	r3, [pc, #168]	; (800b07c <tcp_receive+0x5e0>)
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	4619      	mov	r1, r3
 800afd6:	4b2a      	ldr	r3, [pc, #168]	; (800b080 <tcp_receive+0x5e4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	440b      	add	r3, r1
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	3301      	adds	r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f300 8081 	bgt.w	800b0e8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800afe6:	4b27      	ldr	r3, [pc, #156]	; (800b084 <tcp_receive+0x5e8>)
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aff0:	4b23      	ldr	r3, [pc, #140]	; (800b080 <tcp_receive+0x5e4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aff8:	4b22      	ldr	r3, [pc, #136]	; (800b084 <tcp_receive+0x5e8>)
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <tcp_receive+0x572>
 800b000:	4b21      	ldr	r3, [pc, #132]	; (800b088 <tcp_receive+0x5ec>)
 800b002:	f240 5294 	movw	r2, #1428	; 0x594
 800b006:	4921      	ldr	r1, [pc, #132]	; (800b08c <tcp_receive+0x5f0>)
 800b008:	4821      	ldr	r0, [pc, #132]	; (800b090 <tcp_receive+0x5f4>)
 800b00a:	f004 fe5b 	bl	800fcc4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b014:	4293      	cmp	r3, r2
 800b016:	d906      	bls.n	800b026 <tcp_receive+0x58a>
 800b018:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <tcp_receive+0x5ec>)
 800b01a:	f240 5295 	movw	r2, #1429	; 0x595
 800b01e:	491d      	ldr	r1, [pc, #116]	; (800b094 <tcp_receive+0x5f8>)
 800b020:	481b      	ldr	r0, [pc, #108]	; (800b090 <tcp_receive+0x5f4>)
 800b022:	f004 fe4f 	bl	800fcc4 <iprintf>
      off = (u16_t)off32;
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b02c:	4b15      	ldr	r3, [pc, #84]	; (800b084 <tcp_receive+0x5e8>)
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	891b      	ldrh	r3, [r3, #8]
 800b032:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b036:	429a      	cmp	r2, r3
 800b038:	d906      	bls.n	800b048 <tcp_receive+0x5ac>
 800b03a:	4b13      	ldr	r3, [pc, #76]	; (800b088 <tcp_receive+0x5ec>)
 800b03c:	f240 5297 	movw	r2, #1431	; 0x597
 800b040:	4915      	ldr	r1, [pc, #84]	; (800b098 <tcp_receive+0x5fc>)
 800b042:	4813      	ldr	r0, [pc, #76]	; (800b090 <tcp_receive+0x5f4>)
 800b044:	f004 fe3e 	bl	800fcc4 <iprintf>
      inseg.len -= off;
 800b048:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <tcp_receive+0x5e8>)
 800b04a:	891a      	ldrh	r2, [r3, #8]
 800b04c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	b29a      	uxth	r2, r3
 800b054:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <tcp_receive+0x5e8>)
 800b056:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b058:	4b0a      	ldr	r3, [pc, #40]	; (800b084 <tcp_receive+0x5e8>)
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	891a      	ldrh	r2, [r3, #8]
 800b05e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b066:	e029      	b.n	800b0bc <tcp_receive+0x620>
 800b068:	080122ac 	.word	0x080122ac
 800b06c:	080122b4 	.word	0x080122b4
 800b070:	200000fc 	.word	0x200000fc
 800b074:	200000f8 	.word	0x200000f8
 800b078:	20008bac 	.word	0x20008bac
 800b07c:	200000fe 	.word	0x200000fe
 800b080:	200000f4 	.word	0x200000f4
 800b084:	200000d4 	.word	0x200000d4
 800b088:	08011f44 	.word	0x08011f44
 800b08c:	080122bc 	.word	0x080122bc
 800b090:	08011f90 	.word	0x08011f90
 800b094:	080122cc 	.word	0x080122cc
 800b098:	080122dc 	.word	0x080122dc
        off -= p->len;
 800b09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b09e:	895b      	ldrh	r3, [r3, #10]
 800b0a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b0ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b0bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0be:	895b      	ldrh	r3, [r3, #10]
 800b0c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d8e9      	bhi.n	800b09c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b0c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b0d0:	f7fc fb80 	bl	80077d4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	4a91      	ldr	r2, [pc, #580]	; (800b320 <tcp_receive+0x884>)
 800b0da:	6013      	str	r3, [r2, #0]
 800b0dc:	4b91      	ldr	r3, [pc, #580]	; (800b324 <tcp_receive+0x888>)
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	4a8f      	ldr	r2, [pc, #572]	; (800b320 <tcp_receive+0x884>)
 800b0e2:	6812      	ldr	r2, [r2, #0]
 800b0e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b0e6:	e00d      	b.n	800b104 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b0e8:	4b8d      	ldr	r3, [pc, #564]	; (800b320 <tcp_receive+0x884>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	da06      	bge.n	800b104 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	8b5b      	ldrh	r3, [r3, #26]
 800b0fa:	f043 0302 	orr.w	r3, r3, #2
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b104:	4b86      	ldr	r3, [pc, #536]	; (800b320 <tcp_receive+0x884>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f2c0 842a 	blt.w	800b968 <tcp_receive+0xecc>
 800b114:	4b82      	ldr	r3, [pc, #520]	; (800b320 <tcp_receive+0x884>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b120:	440b      	add	r3, r1
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	3301      	adds	r3, #1
 800b126:	2b00      	cmp	r3, #0
 800b128:	f300 841e 	bgt.w	800b968 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b130:	4b7b      	ldr	r3, [pc, #492]	; (800b320 <tcp_receive+0x884>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	f040 829a 	bne.w	800b66e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b13a:	4b7a      	ldr	r3, [pc, #488]	; (800b324 <tcp_receive+0x888>)
 800b13c:	891c      	ldrh	r4, [r3, #8]
 800b13e:	4b79      	ldr	r3, [pc, #484]	; (800b324 <tcp_receive+0x888>)
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	899b      	ldrh	r3, [r3, #12]
 800b144:	b29b      	uxth	r3, r3
 800b146:	4618      	mov	r0, r3
 800b148:	f7fb f916 	bl	8006378 <lwip_htons>
 800b14c:	4603      	mov	r3, r0
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <tcp_receive+0x6c0>
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <tcp_receive+0x6c2>
 800b15c:	2300      	movs	r3, #0
 800b15e:	4423      	add	r3, r4
 800b160:	b29a      	uxth	r2, r3
 800b162:	4b71      	ldr	r3, [pc, #452]	; (800b328 <tcp_receive+0x88c>)
 800b164:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b16a:	4b6f      	ldr	r3, [pc, #444]	; (800b328 <tcp_receive+0x88c>)
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d275      	bcs.n	800b25e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b172:	4b6c      	ldr	r3, [pc, #432]	; (800b324 <tcp_receive+0x888>)
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	899b      	ldrh	r3, [r3, #12]
 800b178:	b29b      	uxth	r3, r3
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fb f8fc 	bl	8006378 <lwip_htons>
 800b180:	4603      	mov	r3, r0
 800b182:	b2db      	uxtb	r3, r3
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d01f      	beq.n	800b1cc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b18c:	4b65      	ldr	r3, [pc, #404]	; (800b324 <tcp_receive+0x888>)
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	899b      	ldrh	r3, [r3, #12]
 800b192:	b29b      	uxth	r3, r3
 800b194:	b21b      	sxth	r3, r3
 800b196:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b19a:	b21c      	sxth	r4, r3
 800b19c:	4b61      	ldr	r3, [pc, #388]	; (800b324 <tcp_receive+0x888>)
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	899b      	ldrh	r3, [r3, #12]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fb f8e7 	bl	8006378 <lwip_htons>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fb f8de 	bl	8006378 <lwip_htons>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	b21b      	sxth	r3, r3
 800b1c0:	4323      	orrs	r3, r4
 800b1c2:	b21a      	sxth	r2, r3
 800b1c4:	4b57      	ldr	r3, [pc, #348]	; (800b324 <tcp_receive+0x888>)
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	b292      	uxth	r2, r2
 800b1ca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b1d0:	4b54      	ldr	r3, [pc, #336]	; (800b324 <tcp_receive+0x888>)
 800b1d2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b1d4:	4b53      	ldr	r3, [pc, #332]	; (800b324 <tcp_receive+0x888>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	899b      	ldrh	r3, [r3, #12]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fb f8cb 	bl	8006378 <lwip_htons>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	f003 0302 	and.w	r3, r3, #2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d005      	beq.n	800b1fa <tcp_receive+0x75e>
            inseg.len -= 1;
 800b1ee:	4b4d      	ldr	r3, [pc, #308]	; (800b324 <tcp_receive+0x888>)
 800b1f0:	891b      	ldrh	r3, [r3, #8]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	4b4b      	ldr	r3, [pc, #300]	; (800b324 <tcp_receive+0x888>)
 800b1f8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b1fa:	4b4a      	ldr	r3, [pc, #296]	; (800b324 <tcp_receive+0x888>)
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	4a49      	ldr	r2, [pc, #292]	; (800b324 <tcp_receive+0x888>)
 800b200:	8912      	ldrh	r2, [r2, #8]
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f7fc f9e5 	bl	80075d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b20a:	4b46      	ldr	r3, [pc, #280]	; (800b324 <tcp_receive+0x888>)
 800b20c:	891c      	ldrh	r4, [r3, #8]
 800b20e:	4b45      	ldr	r3, [pc, #276]	; (800b324 <tcp_receive+0x888>)
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	899b      	ldrh	r3, [r3, #12]
 800b214:	b29b      	uxth	r3, r3
 800b216:	4618      	mov	r0, r3
 800b218:	f7fb f8ae 	bl	8006378 <lwip_htons>
 800b21c:	4603      	mov	r3, r0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	f003 0303 	and.w	r3, r3, #3
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <tcp_receive+0x790>
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <tcp_receive+0x792>
 800b22c:	2300      	movs	r3, #0
 800b22e:	4423      	add	r3, r4
 800b230:	b29a      	uxth	r2, r3
 800b232:	4b3d      	ldr	r3, [pc, #244]	; (800b328 <tcp_receive+0x88c>)
 800b234:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b236:	4b3c      	ldr	r3, [pc, #240]	; (800b328 <tcp_receive+0x88c>)
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	4b38      	ldr	r3, [pc, #224]	; (800b320 <tcp_receive+0x884>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	441a      	add	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b24a:	440b      	add	r3, r1
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d006      	beq.n	800b25e <tcp_receive+0x7c2>
 800b250:	4b36      	ldr	r3, [pc, #216]	; (800b32c <tcp_receive+0x890>)
 800b252:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b256:	4936      	ldr	r1, [pc, #216]	; (800b330 <tcp_receive+0x894>)
 800b258:	4836      	ldr	r0, [pc, #216]	; (800b334 <tcp_receive+0x898>)
 800b25a:	f004 fd33 	bl	800fcc4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80e7 	beq.w	800b436 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b268:	4b2e      	ldr	r3, [pc, #184]	; (800b324 <tcp_receive+0x888>)
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	899b      	ldrh	r3, [r3, #12]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	4618      	mov	r0, r3
 800b272:	f7fb f881 	bl	8006378 <lwip_htons>
 800b276:	4603      	mov	r3, r0
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d010      	beq.n	800b2a4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b282:	e00a      	b.n	800b29a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b288:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f7fd fd96 	bl	8008dc6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1f0      	bne.n	800b284 <tcp_receive+0x7e8>
 800b2a2:	e0c8      	b.n	800b436 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b2aa:	e052      	b.n	800b352 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	899b      	ldrh	r3, [r3, #12]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fb f85f 	bl	8006378 <lwip_htons>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d03d      	beq.n	800b342 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b2c6:	4b17      	ldr	r3, [pc, #92]	; (800b324 <tcp_receive+0x888>)
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	899b      	ldrh	r3, [r3, #12]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fb f852 	bl	8006378 <lwip_htons>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d130      	bne.n	800b342 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b2e0:	4b10      	ldr	r3, [pc, #64]	; (800b324 <tcp_receive+0x888>)
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	899b      	ldrh	r3, [r3, #12]
 800b2e6:	b29c      	uxth	r4, r3
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	f7fb f845 	bl	8006378 <lwip_htons>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <tcp_receive+0x888>)
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	4322      	orrs	r2, r4
 800b2f8:	b292      	uxth	r2, r2
 800b2fa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b2fc:	4b09      	ldr	r3, [pc, #36]	; (800b324 <tcp_receive+0x888>)
 800b2fe:	891c      	ldrh	r4, [r3, #8]
 800b300:	4b08      	ldr	r3, [pc, #32]	; (800b324 <tcp_receive+0x888>)
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	899b      	ldrh	r3, [r3, #12]
 800b306:	b29b      	uxth	r3, r3
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fb f835 	bl	8006378 <lwip_htons>
 800b30e:	4603      	mov	r3, r0
 800b310:	b2db      	uxtb	r3, r3
 800b312:	f003 0303 	and.w	r3, r3, #3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00e      	beq.n	800b338 <tcp_receive+0x89c>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e00d      	b.n	800b33a <tcp_receive+0x89e>
 800b31e:	bf00      	nop
 800b320:	200000f4 	.word	0x200000f4
 800b324:	200000d4 	.word	0x200000d4
 800b328:	200000fe 	.word	0x200000fe
 800b32c:	08011f44 	.word	0x08011f44
 800b330:	080122ec 	.word	0x080122ec
 800b334:	08011f90 	.word	0x08011f90
 800b338:	2300      	movs	r3, #0
 800b33a:	4423      	add	r3, r4
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	4b98      	ldr	r3, [pc, #608]	; (800b5a0 <tcp_receive+0xb04>)
 800b340:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b344:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b34c:	6938      	ldr	r0, [r7, #16]
 800b34e:	f7fd fd3a 	bl	8008dc6 <tcp_seg_free>
            while (next &&
 800b352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00e      	beq.n	800b376 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b358:	4b91      	ldr	r3, [pc, #580]	; (800b5a0 <tcp_receive+0xb04>)
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	4b91      	ldr	r3, [pc, #580]	; (800b5a4 <tcp_receive+0xb08>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	441a      	add	r2, r3
 800b364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b36c:	8909      	ldrh	r1, [r1, #8]
 800b36e:	440b      	add	r3, r1
 800b370:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b372:	2b00      	cmp	r3, #0
 800b374:	da9a      	bge.n	800b2ac <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d059      	beq.n	800b430 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b37c:	4b88      	ldr	r3, [pc, #544]	; (800b5a0 <tcp_receive+0xb04>)
 800b37e:	881b      	ldrh	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	4b88      	ldr	r3, [pc, #544]	; (800b5a4 <tcp_receive+0xb08>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	441a      	add	r2, r3
 800b388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b390:	2b00      	cmp	r3, #0
 800b392:	dd4d      	ble.n	800b430 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	4b81      	ldr	r3, [pc, #516]	; (800b5a4 <tcp_receive+0xb08>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	4b80      	ldr	r3, [pc, #512]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3a8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b3aa:	4b7f      	ldr	r3, [pc, #508]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	899b      	ldrh	r3, [r3, #12]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fa ffe0 	bl	8006378 <lwip_htons>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	f003 0302 	and.w	r3, r3, #2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d005      	beq.n	800b3d0 <tcp_receive+0x934>
                inseg.len -= 1;
 800b3c4:	4b78      	ldr	r3, [pc, #480]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3c6:	891b      	ldrh	r3, [r3, #8]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	4b76      	ldr	r3, [pc, #472]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3ce:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b3d0:	4b75      	ldr	r3, [pc, #468]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	4a74      	ldr	r2, [pc, #464]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3d6:	8912      	ldrh	r2, [r2, #8]
 800b3d8:	4611      	mov	r1, r2
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fc f8fa 	bl	80075d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b3e0:	4b71      	ldr	r3, [pc, #452]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3e2:	891c      	ldrh	r4, [r3, #8]
 800b3e4:	4b70      	ldr	r3, [pc, #448]	; (800b5a8 <tcp_receive+0xb0c>)
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	899b      	ldrh	r3, [r3, #12]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fa ffc3 	bl	8006378 <lwip_htons>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <tcp_receive+0x966>
 800b3fe:	2301      	movs	r3, #1
 800b400:	e000      	b.n	800b404 <tcp_receive+0x968>
 800b402:	2300      	movs	r3, #0
 800b404:	4423      	add	r3, r4
 800b406:	b29a      	uxth	r2, r3
 800b408:	4b65      	ldr	r3, [pc, #404]	; (800b5a0 <tcp_receive+0xb04>)
 800b40a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b40c:	4b64      	ldr	r3, [pc, #400]	; (800b5a0 <tcp_receive+0xb04>)
 800b40e:	881b      	ldrh	r3, [r3, #0]
 800b410:	461a      	mov	r2, r3
 800b412:	4b64      	ldr	r3, [pc, #400]	; (800b5a4 <tcp_receive+0xb08>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	441a      	add	r2, r3
 800b418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d006      	beq.n	800b430 <tcp_receive+0x994>
 800b422:	4b62      	ldr	r3, [pc, #392]	; (800b5ac <tcp_receive+0xb10>)
 800b424:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b428:	4961      	ldr	r1, [pc, #388]	; (800b5b0 <tcp_receive+0xb14>)
 800b42a:	4862      	ldr	r0, [pc, #392]	; (800b5b4 <tcp_receive+0xb18>)
 800b42c:	f004 fc4a 	bl	800fcc4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b434:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b436:	4b5a      	ldr	r3, [pc, #360]	; (800b5a0 <tcp_receive+0xb04>)
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	4b59      	ldr	r3, [pc, #356]	; (800b5a4 <tcp_receive+0xb08>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	441a      	add	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b44a:	4b55      	ldr	r3, [pc, #340]	; (800b5a0 <tcp_receive+0xb04>)
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d206      	bcs.n	800b460 <tcp_receive+0x9c4>
 800b452:	4b56      	ldr	r3, [pc, #344]	; (800b5ac <tcp_receive+0xb10>)
 800b454:	f240 6207 	movw	r2, #1543	; 0x607
 800b458:	4957      	ldr	r1, [pc, #348]	; (800b5b8 <tcp_receive+0xb1c>)
 800b45a:	4856      	ldr	r0, [pc, #344]	; (800b5b4 <tcp_receive+0xb18>)
 800b45c:	f004 fc32 	bl	800fcc4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b464:	4b4e      	ldr	r3, [pc, #312]	; (800b5a0 <tcp_receive+0xb04>)
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fc ffc9 	bl	8008408 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b476:	4b4c      	ldr	r3, [pc, #304]	; (800b5a8 <tcp_receive+0xb0c>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	891b      	ldrh	r3, [r3, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d006      	beq.n	800b48e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b480:	4b49      	ldr	r3, [pc, #292]	; (800b5a8 <tcp_receive+0xb0c>)
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	4a4d      	ldr	r2, [pc, #308]	; (800b5bc <tcp_receive+0xb20>)
 800b486:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b488:	4b47      	ldr	r3, [pc, #284]	; (800b5a8 <tcp_receive+0xb0c>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b48e:	4b46      	ldr	r3, [pc, #280]	; (800b5a8 <tcp_receive+0xb0c>)
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	899b      	ldrh	r3, [r3, #12]
 800b494:	b29b      	uxth	r3, r3
 800b496:	4618      	mov	r0, r3
 800b498:	f7fa ff6e 	bl	8006378 <lwip_htons>
 800b49c:	4603      	mov	r3, r0
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80b8 	beq.w	800b61a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b4aa:	4b45      	ldr	r3, [pc, #276]	; (800b5c0 <tcp_receive+0xb24>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	f043 0320 	orr.w	r3, r3, #32
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	4b42      	ldr	r3, [pc, #264]	; (800b5c0 <tcp_receive+0xb24>)
 800b4b6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b4b8:	e0af      	b.n	800b61a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4be:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	4a36      	ldr	r2, [pc, #216]	; (800b5a4 <tcp_receive+0xb08>)
 800b4ca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	891b      	ldrh	r3, [r3, #8]
 800b4d0:	461c      	mov	r4, r3
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	899b      	ldrh	r3, [r3, #12]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fa ff4c 	bl	8006378 <lwip_htons>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	f003 0303 	and.w	r3, r3, #3
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <tcp_receive+0xa54>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e000      	b.n	800b4f2 <tcp_receive+0xa56>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	191a      	adds	r2, r3, r4
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f8:	441a      	add	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b502:	461c      	mov	r4, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	891b      	ldrh	r3, [r3, #8]
 800b508:	461d      	mov	r5, r3
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	899b      	ldrh	r3, [r3, #12]
 800b510:	b29b      	uxth	r3, r3
 800b512:	4618      	mov	r0, r3
 800b514:	f7fa ff30 	bl	8006378 <lwip_htons>
 800b518:	4603      	mov	r3, r0
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	f003 0303 	and.w	r3, r3, #3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <tcp_receive+0xa8c>
 800b524:	2301      	movs	r3, #1
 800b526:	e000      	b.n	800b52a <tcp_receive+0xa8e>
 800b528:	2300      	movs	r3, #0
 800b52a:	442b      	add	r3, r5
 800b52c:	429c      	cmp	r4, r3
 800b52e:	d206      	bcs.n	800b53e <tcp_receive+0xaa2>
 800b530:	4b1e      	ldr	r3, [pc, #120]	; (800b5ac <tcp_receive+0xb10>)
 800b532:	f240 622b 	movw	r2, #1579	; 0x62b
 800b536:	4923      	ldr	r1, [pc, #140]	; (800b5c4 <tcp_receive+0xb28>)
 800b538:	481e      	ldr	r0, [pc, #120]	; (800b5b4 <tcp_receive+0xb18>)
 800b53a:	f004 fbc3 	bl	800fcc4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	891b      	ldrh	r3, [r3, #8]
 800b542:	461c      	mov	r4, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	899b      	ldrh	r3, [r3, #12]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fa ff13 	bl	8006378 <lwip_htons>
 800b552:	4603      	mov	r3, r0
 800b554:	b2db      	uxtb	r3, r3
 800b556:	f003 0303 	and.w	r3, r3, #3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <tcp_receive+0xac6>
 800b55e:	2301      	movs	r3, #1
 800b560:	e000      	b.n	800b564 <tcp_receive+0xac8>
 800b562:	2300      	movs	r3, #0
 800b564:	1919      	adds	r1, r3, r4
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b56a:	b28b      	uxth	r3, r1
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	b29a      	uxth	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7fc ff47 	bl	8008408 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	891b      	ldrh	r3, [r3, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d028      	beq.n	800b5d6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b584:	4b0d      	ldr	r3, [pc, #52]	; (800b5bc <tcp_receive+0xb20>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d01d      	beq.n	800b5c8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b58c:	4b0b      	ldr	r3, [pc, #44]	; (800b5bc <tcp_receive+0xb20>)
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	f7fc fa64 	bl	8007a64 <pbuf_cat>
 800b59c:	e018      	b.n	800b5d0 <tcp_receive+0xb34>
 800b59e:	bf00      	nop
 800b5a0:	200000fe 	.word	0x200000fe
 800b5a4:	200000f4 	.word	0x200000f4
 800b5a8:	200000d4 	.word	0x200000d4
 800b5ac:	08011f44 	.word	0x08011f44
 800b5b0:	08012324 	.word	0x08012324
 800b5b4:	08011f90 	.word	0x08011f90
 800b5b8:	08012360 	.word	0x08012360
 800b5bc:	20000104 	.word	0x20000104
 800b5c0:	20000101 	.word	0x20000101
 800b5c4:	08012380 	.word	0x08012380
            } else {
              recv_data = cseg->p;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	4a70      	ldr	r2, [pc, #448]	; (800b790 <tcp_receive+0xcf4>)
 800b5ce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	899b      	ldrh	r3, [r3, #12]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fa feca 	bl	8006378 <lwip_htons>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00d      	beq.n	800b60c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b5f0:	4b68      	ldr	r3, [pc, #416]	; (800b794 <tcp_receive+0xcf8>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	f043 0320 	orr.w	r3, r3, #32
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	4b66      	ldr	r3, [pc, #408]	; (800b794 <tcp_receive+0xcf8>)
 800b5fc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7d1b      	ldrb	r3, [r3, #20]
 800b602:	2b04      	cmp	r3, #4
 800b604:	d102      	bne.n	800b60c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2207      	movs	r2, #7
 800b60a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b614:	68b8      	ldr	r0, [r7, #8]
 800b616:	f7fd fbd6 	bl	8008dc6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d008      	beq.n	800b634 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b62e:	429a      	cmp	r2, r3
 800b630:	f43f af43 	beq.w	800b4ba <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	8b5b      	ldrh	r3, [r3, #26]
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00e      	beq.n	800b65e <tcp_receive+0xbc2>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	8b5b      	ldrh	r3, [r3, #26]
 800b644:	f023 0301 	bic.w	r3, r3, #1
 800b648:	b29a      	uxth	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	835a      	strh	r2, [r3, #26]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	8b5b      	ldrh	r3, [r3, #26]
 800b652:	f043 0302 	orr.w	r3, r3, #2
 800b656:	b29a      	uxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b65c:	e188      	b.n	800b970 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	8b5b      	ldrh	r3, [r3, #26]
 800b662:	f043 0301 	orr.w	r3, r3, #1
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b66c:	e180      	b.n	800b970 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b672:	2b00      	cmp	r3, #0
 800b674:	d106      	bne.n	800b684 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b676:	4848      	ldr	r0, [pc, #288]	; (800b798 <tcp_receive+0xcfc>)
 800b678:	f7fd fbbe 	bl	8008df8 <tcp_seg_copy>
 800b67c:	4602      	mov	r2, r0
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	675a      	str	r2, [r3, #116]	; 0x74
 800b682:	e16d      	b.n	800b960 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b684:	2300      	movs	r3, #0
 800b686:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b68c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b68e:	e157      	b.n	800b940 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	4b41      	ldr	r3, [pc, #260]	; (800b79c <tcp_receive+0xd00>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d11d      	bne.n	800b6da <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b69e:	4b3e      	ldr	r3, [pc, #248]	; (800b798 <tcp_receive+0xcfc>)
 800b6a0:	891a      	ldrh	r2, [r3, #8]
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	891b      	ldrh	r3, [r3, #8]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	f240 814f 	bls.w	800b94a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b6ac:	483a      	ldr	r0, [pc, #232]	; (800b798 <tcp_receive+0xcfc>)
 800b6ae:	f7fd fba3 	bl	8008df8 <tcp_seg_copy>
 800b6b2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 8149 	beq.w	800b94e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	e002      	b.n	800b6d0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b6d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6d2:	6978      	ldr	r0, [r7, #20]
 800b6d4:	f7ff f8de 	bl	800a894 <tcp_oos_insert_segment>
                }
                break;
 800b6d8:	e139      	b.n	800b94e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d117      	bne.n	800b710 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b6e0:	4b2e      	ldr	r3, [pc, #184]	; (800b79c <tcp_receive+0xd00>)
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	da57      	bge.n	800b7a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b6f0:	4829      	ldr	r0, [pc, #164]	; (800b798 <tcp_receive+0xcfc>)
 800b6f2:	f7fd fb81 	bl	8008df8 <tcp_seg_copy>
 800b6f6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 8129 	beq.w	800b952 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	69ba      	ldr	r2, [r7, #24]
 800b704:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b708:	69b8      	ldr	r0, [r7, #24]
 800b70a:	f7ff f8c3 	bl	800a894 <tcp_oos_insert_segment>
                  }
                  break;
 800b70e:	e120      	b.n	800b952 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b710:	4b22      	ldr	r3, [pc, #136]	; (800b79c <tcp_receive+0xd00>)
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	3b01      	subs	r3, #1
 800b71e:	2b00      	cmp	r3, #0
 800b720:	db3e      	blt.n	800b7a0 <tcp_receive+0xd04>
 800b722:	4b1e      	ldr	r3, [pc, #120]	; (800b79c <tcp_receive+0xd00>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	3301      	adds	r3, #1
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc35      	bgt.n	800b7a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b734:	4818      	ldr	r0, [pc, #96]	; (800b798 <tcp_receive+0xcfc>)
 800b736:	f7fd fb5f 	bl	8008df8 <tcp_seg_copy>
 800b73a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 8109 	beq.w	800b956 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b74c:	8912      	ldrh	r2, [r2, #8]
 800b74e:	441a      	add	r2, r3
 800b750:	4b12      	ldr	r3, [pc, #72]	; (800b79c <tcp_receive+0xd00>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	dd12      	ble.n	800b780 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b75a:	4b10      	ldr	r3, [pc, #64]	; (800b79c <tcp_receive+0xd00>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	b29a      	uxth	r2, r3
 800b760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	b29b      	uxth	r3, r3
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	891b      	ldrh	r3, [r3, #8]
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f7fb ff2a 	bl	80075d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b788:	69f8      	ldr	r0, [r7, #28]
 800b78a:	f7ff f883 	bl	800a894 <tcp_oos_insert_segment>
                  }
                  break;
 800b78e:	e0e2      	b.n	800b956 <tcp_receive+0xeba>
 800b790:	20000104 	.word	0x20000104
 800b794:	20000101 	.word	0x20000101
 800b798:	200000d4 	.word	0x200000d4
 800b79c:	200000f4 	.word	0x200000f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f040 80c6 	bne.w	800b93a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b7ae:	4b80      	ldr	r3, [pc, #512]	; (800b9b0 <tcp_receive+0xf14>)
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f340 80bd 	ble.w	800b93a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	899b      	ldrh	r3, [r3, #12]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fa fdd5 	bl	8006378 <lwip_htons>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f040 80bf 	bne.w	800b95a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b7dc:	4875      	ldr	r0, [pc, #468]	; (800b9b4 <tcp_receive+0xf18>)
 800b7de:	f7fd fb0b 	bl	8008df8 <tcp_seg_copy>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 80b6 	beq.w	800b95e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7fa:	8912      	ldrh	r2, [r2, #8]
 800b7fc:	441a      	add	r2, r3
 800b7fe:	4b6c      	ldr	r3, [pc, #432]	; (800b9b0 <tcp_receive+0xf14>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	dd12      	ble.n	800b82e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b808:	4b69      	ldr	r3, [pc, #420]	; (800b9b0 <tcp_receive+0xf14>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	b29b      	uxth	r3, r3
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	b29a      	uxth	r2, r3
 800b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b824:	891b      	ldrh	r3, [r3, #8]
 800b826:	4619      	mov	r1, r3
 800b828:	4610      	mov	r0, r2
 800b82a:	f7fb fed3 	bl	80075d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b82e:	4b62      	ldr	r3, [pc, #392]	; (800b9b8 <tcp_receive+0xf1c>)
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	461a      	mov	r2, r3
 800b834:	4b5e      	ldr	r3, [pc, #376]	; (800b9b0 <tcp_receive+0xf14>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	441a      	add	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b842:	440b      	add	r3, r1
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	f340 8089 	ble.w	800b95e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	899b      	ldrh	r3, [r3, #12]
 800b854:	b29b      	uxth	r3, r3
 800b856:	4618      	mov	r0, r3
 800b858:	f7fa fd8e 	bl	8006378 <lwip_htons>
 800b85c:	4603      	mov	r3, r0
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	d022      	beq.n	800b8ae <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	899b      	ldrh	r3, [r3, #12]
 800b870:	b29b      	uxth	r3, r3
 800b872:	b21b      	sxth	r3, r3
 800b874:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b878:	b21c      	sxth	r4, r3
 800b87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	899b      	ldrh	r3, [r3, #12]
 800b882:	b29b      	uxth	r3, r3
 800b884:	4618      	mov	r0, r3
 800b886:	f7fa fd77 	bl	8006378 <lwip_htons>
 800b88a:	4603      	mov	r3, r0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	b29b      	uxth	r3, r3
 800b890:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b894:	b29b      	uxth	r3, r3
 800b896:	4618      	mov	r0, r3
 800b898:	f7fa fd6e 	bl	8006378 <lwip_htons>
 800b89c:	4603      	mov	r3, r0
 800b89e:	b21b      	sxth	r3, r3
 800b8a0:	4323      	orrs	r3, r4
 800b8a2:	b21a      	sxth	r2, r3
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	b292      	uxth	r2, r2
 800b8ac:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b8:	4413      	add	r3, r2
 800b8ba:	b299      	uxth	r1, r3
 800b8bc:	4b3c      	ldr	r3, [pc, #240]	; (800b9b0 <tcp_receive+0xf14>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	1a8a      	subs	r2, r1, r2
 800b8c8:	b292      	uxth	r2, r2
 800b8ca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	891b      	ldrh	r3, [r3, #8]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f7fb fe7a 	bl	80075d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	891c      	ldrh	r4, [r3, #8]
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	899b      	ldrh	r3, [r3, #12]
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fa fd41 	bl	8006378 <lwip_htons>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	f003 0303 	and.w	r3, r3, #3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <tcp_receive+0xe6a>
 800b902:	2301      	movs	r3, #1
 800b904:	e000      	b.n	800b908 <tcp_receive+0xe6c>
 800b906:	2300      	movs	r3, #0
 800b908:	4423      	add	r3, r4
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	4b2a      	ldr	r3, [pc, #168]	; (800b9b8 <tcp_receive+0xf1c>)
 800b90e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b910:	4b29      	ldr	r3, [pc, #164]	; (800b9b8 <tcp_receive+0xf1c>)
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	461a      	mov	r2, r3
 800b916:	4b26      	ldr	r3, [pc, #152]	; (800b9b0 <tcp_receive+0xf14>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	441a      	add	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b924:	440b      	add	r3, r1
 800b926:	429a      	cmp	r2, r3
 800b928:	d019      	beq.n	800b95e <tcp_receive+0xec2>
 800b92a:	4b24      	ldr	r3, [pc, #144]	; (800b9bc <tcp_receive+0xf20>)
 800b92c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b930:	4923      	ldr	r1, [pc, #140]	; (800b9c0 <tcp_receive+0xf24>)
 800b932:	4824      	ldr	r0, [pc, #144]	; (800b9c4 <tcp_receive+0xf28>)
 800b934:	f004 f9c6 	bl	800fcc4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b938:	e011      	b.n	800b95e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	2b00      	cmp	r3, #0
 800b944:	f47f aea4 	bne.w	800b690 <tcp_receive+0xbf4>
 800b948:	e00a      	b.n	800b960 <tcp_receive+0xec4>
                break;
 800b94a:	bf00      	nop
 800b94c:	e008      	b.n	800b960 <tcp_receive+0xec4>
                break;
 800b94e:	bf00      	nop
 800b950:	e006      	b.n	800b960 <tcp_receive+0xec4>
                  break;
 800b952:	bf00      	nop
 800b954:	e004      	b.n	800b960 <tcp_receive+0xec4>
                  break;
 800b956:	bf00      	nop
 800b958:	e002      	b.n	800b960 <tcp_receive+0xec4>
                  break;
 800b95a:	bf00      	nop
 800b95c:	e000      	b.n	800b960 <tcp_receive+0xec4>
                break;
 800b95e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f001 fa33 	bl	800cdcc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b966:	e003      	b.n	800b970 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f001 fa2f 	bl	800cdcc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b96e:	e01a      	b.n	800b9a6 <tcp_receive+0xf0a>
 800b970:	e019      	b.n	800b9a6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <tcp_receive+0xf14>)
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	db0a      	blt.n	800b996 <tcp_receive+0xefa>
 800b980:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <tcp_receive+0xf14>)
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	6879      	ldr	r1, [r7, #4]
 800b98a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b98c:	440b      	add	r3, r1
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	3301      	adds	r3, #1
 800b992:	2b00      	cmp	r3, #0
 800b994:	dd07      	ble.n	800b9a6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	8b5b      	ldrh	r3, [r3, #26]
 800b99a:	f043 0302 	orr.w	r3, r3, #2
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b9a4:	e7ff      	b.n	800b9a6 <tcp_receive+0xf0a>
 800b9a6:	bf00      	nop
 800b9a8:	3750      	adds	r7, #80	; 0x50
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200000f4 	.word	0x200000f4
 800b9b4:	200000d4 	.word	0x200000d4
 800b9b8:	200000fe 	.word	0x200000fe
 800b9bc:	08011f44 	.word	0x08011f44
 800b9c0:	080122ec 	.word	0x080122ec
 800b9c4:	08011f90 	.word	0x08011f90

0800b9c8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b9ce:	4b15      	ldr	r3, [pc, #84]	; (800ba24 <tcp_get_next_optbyte+0x5c>)
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	b291      	uxth	r1, r2
 800b9d6:	4a13      	ldr	r2, [pc, #76]	; (800ba24 <tcp_get_next_optbyte+0x5c>)
 800b9d8:	8011      	strh	r1, [r2, #0]
 800b9da:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9dc:	4b12      	ldr	r3, [pc, #72]	; (800ba28 <tcp_get_next_optbyte+0x60>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d004      	beq.n	800b9ee <tcp_get_next_optbyte+0x26>
 800b9e4:	4b11      	ldr	r3, [pc, #68]	; (800ba2c <tcp_get_next_optbyte+0x64>)
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	88fa      	ldrh	r2, [r7, #6]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d208      	bcs.n	800ba00 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b9ee:	4b10      	ldr	r3, [pc, #64]	; (800ba30 <tcp_get_next_optbyte+0x68>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3314      	adds	r3, #20
 800b9f4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b9f6:	88fb      	ldrh	r3, [r7, #6]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	e00b      	b.n	800ba18 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <tcp_get_next_optbyte+0x64>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ba0e:	4b06      	ldr	r3, [pc, #24]	; (800ba28 <tcp_get_next_optbyte+0x60>)
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	797b      	ldrb	r3, [r7, #5]
 800ba14:	4413      	add	r3, r2
 800ba16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	200000f0 	.word	0x200000f0
 800ba28:	200000ec 	.word	0x200000ec
 800ba2c:	200000ea 	.word	0x200000ea
 800ba30:	200000e4 	.word	0x200000e4

0800ba34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <tcp_parseopt+0x1c>
 800ba42:	4b32      	ldr	r3, [pc, #200]	; (800bb0c <tcp_parseopt+0xd8>)
 800ba44:	f240 727d 	movw	r2, #1917	; 0x77d
 800ba48:	4931      	ldr	r1, [pc, #196]	; (800bb10 <tcp_parseopt+0xdc>)
 800ba4a:	4832      	ldr	r0, [pc, #200]	; (800bb14 <tcp_parseopt+0xe0>)
 800ba4c:	f004 f93a 	bl	800fcc4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ba50:	4b31      	ldr	r3, [pc, #196]	; (800bb18 <tcp_parseopt+0xe4>)
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d055      	beq.n	800bb04 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ba58:	4b30      	ldr	r3, [pc, #192]	; (800bb1c <tcp_parseopt+0xe8>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	801a      	strh	r2, [r3, #0]
 800ba5e:	e045      	b.n	800baec <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ba60:	f7ff ffb2 	bl	800b9c8 <tcp_get_next_optbyte>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d006      	beq.n	800ba7c <tcp_parseopt+0x48>
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	dc2b      	bgt.n	800baca <tcp_parseopt+0x96>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d041      	beq.n	800bafa <tcp_parseopt+0xc6>
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d127      	bne.n	800baca <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ba7a:	e037      	b.n	800baec <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ba7c:	f7ff ffa4 	bl	800b9c8 <tcp_get_next_optbyte>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d13b      	bne.n	800bafe <tcp_parseopt+0xca>
 800ba86:	4b25      	ldr	r3, [pc, #148]	; (800bb1c <tcp_parseopt+0xe8>)
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	4a22      	ldr	r2, [pc, #136]	; (800bb18 <tcp_parseopt+0xe4>)
 800ba8e:	8812      	ldrh	r2, [r2, #0]
 800ba90:	4293      	cmp	r3, r2
 800ba92:	da34      	bge.n	800bafe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ba94:	f7ff ff98 	bl	800b9c8 <tcp_get_next_optbyte>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	021b      	lsls	r3, r3, #8
 800ba9e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800baa0:	f7ff ff92 	bl	800b9c8 <tcp_get_next_optbyte>
 800baa4:	4603      	mov	r3, r0
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	89bb      	ldrh	r3, [r7, #12]
 800baaa:	4313      	orrs	r3, r2
 800baac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800baae:	89bb      	ldrh	r3, [r7, #12]
 800bab0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bab4:	d804      	bhi.n	800bac0 <tcp_parseopt+0x8c>
 800bab6:	89bb      	ldrh	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <tcp_parseopt+0x8c>
 800babc:	89ba      	ldrh	r2, [r7, #12]
 800babe:	e001      	b.n	800bac4 <tcp_parseopt+0x90>
 800bac0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bac8:	e010      	b.n	800baec <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800baca:	f7ff ff7d 	bl	800b9c8 <tcp_get_next_optbyte>
 800bace:	4603      	mov	r3, r0
 800bad0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bad2:	7afb      	ldrb	r3, [r7, #11]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d914      	bls.n	800bb02 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bad8:	7afb      	ldrb	r3, [r7, #11]
 800bada:	b29a      	uxth	r2, r3
 800badc:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <tcp_parseopt+0xe8>)
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	4413      	add	r3, r2
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	3b02      	subs	r3, #2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	4b0c      	ldr	r3, [pc, #48]	; (800bb1c <tcp_parseopt+0xe8>)
 800baea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800baec:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <tcp_parseopt+0xe8>)
 800baee:	881a      	ldrh	r2, [r3, #0]
 800baf0:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <tcp_parseopt+0xe4>)
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d3b3      	bcc.n	800ba60 <tcp_parseopt+0x2c>
 800baf8:	e004      	b.n	800bb04 <tcp_parseopt+0xd0>
          return;
 800bafa:	bf00      	nop
 800bafc:	e002      	b.n	800bb04 <tcp_parseopt+0xd0>
            return;
 800bafe:	bf00      	nop
 800bb00:	e000      	b.n	800bb04 <tcp_parseopt+0xd0>
            return;
 800bb02:	bf00      	nop
      }
    }
  }
}
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	08011f44 	.word	0x08011f44
 800bb10:	080123a8 	.word	0x080123a8
 800bb14:	08011f90 	.word	0x08011f90
 800bb18:	200000e8 	.word	0x200000e8
 800bb1c:	200000f0 	.word	0x200000f0

0800bb20 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bb20:	b480      	push	{r7}
 800bb22:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <tcp_trigger_input_pcb_close+0x1c>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f043 0310 	orr.w	r3, r3, #16
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	4b03      	ldr	r3, [pc, #12]	; (800bb3c <tcp_trigger_input_pcb_close+0x1c>)
 800bb30:	701a      	strb	r2, [r3, #0]
}
 800bb32:	bf00      	nop
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	20000101 	.word	0x20000101

0800bb40 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00a      	beq.n	800bb68 <tcp_route+0x28>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	7a1b      	ldrb	r3, [r3, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d006      	beq.n	800bb68 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	7a1b      	ldrb	r3, [r3, #8]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fb fb5e 	bl	8007220 <netif_get_by_index>
 800bb64:	4603      	mov	r3, r0
 800bb66:	e003      	b.n	800bb70 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f002 fe7d 	bl	800e868 <ip4_route>
 800bb6e:	4603      	mov	r3, r0
  }
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bb78:	b590      	push	{r4, r7, lr}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	603b      	str	r3, [r7, #0]
 800bb84:	4613      	mov	r3, r2
 800bb86:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d105      	bne.n	800bb9a <tcp_create_segment+0x22>
 800bb8e:	4b44      	ldr	r3, [pc, #272]	; (800bca0 <tcp_create_segment+0x128>)
 800bb90:	22a3      	movs	r2, #163	; 0xa3
 800bb92:	4944      	ldr	r1, [pc, #272]	; (800bca4 <tcp_create_segment+0x12c>)
 800bb94:	4844      	ldr	r0, [pc, #272]	; (800bca8 <tcp_create_segment+0x130>)
 800bb96:	f004 f895 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <tcp_create_segment+0x34>
 800bba0:	4b3f      	ldr	r3, [pc, #252]	; (800bca0 <tcp_create_segment+0x128>)
 800bba2:	22a4      	movs	r2, #164	; 0xa4
 800bba4:	4941      	ldr	r1, [pc, #260]	; (800bcac <tcp_create_segment+0x134>)
 800bba6:	4840      	ldr	r0, [pc, #256]	; (800bca8 <tcp_create_segment+0x130>)
 800bba8:	f004 f88c 	bl	800fcc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bbac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0304 	and.w	r3, r3, #4
 800bbb8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bbba:	2003      	movs	r0, #3
 800bbbc:	f7fb f832 	bl	8006c24 <memp_malloc>
 800bbc0:	6138      	str	r0, [r7, #16]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d104      	bne.n	800bbd2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bbc8:	68b8      	ldr	r0, [r7, #8]
 800bbca:	f7fb fe89 	bl	80078e0 <pbuf_free>
    return NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e061      	b.n	800bc96 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bbd8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	891a      	ldrh	r2, [r3, #8]
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d205      	bcs.n	800bbfe <tcp_create_segment+0x86>
 800bbf2:	4b2b      	ldr	r3, [pc, #172]	; (800bca0 <tcp_create_segment+0x128>)
 800bbf4:	22b0      	movs	r2, #176	; 0xb0
 800bbf6:	492e      	ldr	r1, [pc, #184]	; (800bcb0 <tcp_create_segment+0x138>)
 800bbf8:	482b      	ldr	r0, [pc, #172]	; (800bca8 <tcp_create_segment+0x130>)
 800bbfa:	f004 f863 	bl	800fcc4 <iprintf>
  seg->len = p->tot_len - optlen;
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	891a      	ldrh	r2, [r3, #8]
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bc0e:	2114      	movs	r1, #20
 800bc10:	68b8      	ldr	r0, [r7, #8]
 800bc12:	f7fb fdcf 	bl	80077b4 <pbuf_add_header>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d004      	beq.n	800bc26 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bc1c:	6938      	ldr	r0, [r7, #16]
 800bc1e:	f7fd f8d2 	bl	8008dc6 <tcp_seg_free>
    return NULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	e037      	b.n	800bc96 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	8ada      	ldrh	r2, [r3, #22]
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	68dc      	ldr	r4, [r3, #12]
 800bc38:	4610      	mov	r0, r2
 800bc3a:	f7fa fb9d 	bl	8006378 <lwip_htons>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8b1a      	ldrh	r2, [r3, #24]
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	68dc      	ldr	r4, [r3, #12]
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	f7fa fb94 	bl	8006378 <lwip_htons>
 800bc50:	4603      	mov	r3, r0
 800bc52:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	68dc      	ldr	r4, [r3, #12]
 800bc58:	6838      	ldr	r0, [r7, #0]
 800bc5a:	f7fa fba2 	bl	80063a2 <lwip_htonl>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	089b      	lsrs	r3, r3, #2
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	3305      	adds	r3, #5
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	031b      	lsls	r3, r3, #12
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	4313      	orrs	r3, r2
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	68dc      	ldr	r4, [r3, #12]
 800bc7e:	4610      	mov	r0, r2
 800bc80:	f7fa fb7a 	bl	8006378 <lwip_htons>
 800bc84:	4603      	mov	r3, r0
 800bc86:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	749a      	strb	r2, [r3, #18]
 800bc90:	2200      	movs	r2, #0
 800bc92:	74da      	strb	r2, [r3, #19]
  return seg;
 800bc94:	693b      	ldr	r3, [r7, #16]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd90      	pop	{r4, r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	080123c4 	.word	0x080123c4
 800bca4:	080123f8 	.word	0x080123f8
 800bca8:	08012418 	.word	0x08012418
 800bcac:	08012440 	.word	0x08012440
 800bcb0:	08012464 	.word	0x08012464

0800bcb4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bcb4:	b590      	push	{r4, r7, lr}
 800bcb6:	b08b      	sub	sp, #44	; 0x2c
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	61fb      	str	r3, [r7, #28]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d106      	bne.n	800bce0 <tcp_split_unsent_seg+0x2c>
 800bcd2:	4b95      	ldr	r3, [pc, #596]	; (800bf28 <tcp_split_unsent_seg+0x274>)
 800bcd4:	f240 324b 	movw	r2, #843	; 0x34b
 800bcd8:	4994      	ldr	r1, [pc, #592]	; (800bf2c <tcp_split_unsent_seg+0x278>)
 800bcda:	4895      	ldr	r0, [pc, #596]	; (800bf30 <tcp_split_unsent_seg+0x27c>)
 800bcdc:	f003 fff2 	bl	800fcc4 <iprintf>

  useg = pcb->unsent;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d102      	bne.n	800bcf2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bcec:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf0:	e116      	b.n	800bf20 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bcf2:	887b      	ldrh	r3, [r7, #2]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d109      	bne.n	800bd0c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bcf8:	4b8b      	ldr	r3, [pc, #556]	; (800bf28 <tcp_split_unsent_seg+0x274>)
 800bcfa:	f240 3253 	movw	r2, #851	; 0x353
 800bcfe:	498d      	ldr	r1, [pc, #564]	; (800bf34 <tcp_split_unsent_seg+0x280>)
 800bd00:	488b      	ldr	r0, [pc, #556]	; (800bf30 <tcp_split_unsent_seg+0x27c>)
 800bd02:	f003 ffdf 	bl	800fcc4 <iprintf>
    return ERR_VAL;
 800bd06:	f06f 0305 	mvn.w	r3, #5
 800bd0a:	e109      	b.n	800bf20 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	891b      	ldrh	r3, [r3, #8]
 800bd10:	887a      	ldrh	r2, [r7, #2]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d301      	bcc.n	800bd1a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	e102      	b.n	800bf20 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd1e:	887a      	ldrh	r2, [r7, #2]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d906      	bls.n	800bd32 <tcp_split_unsent_seg+0x7e>
 800bd24:	4b80      	ldr	r3, [pc, #512]	; (800bf28 <tcp_split_unsent_seg+0x274>)
 800bd26:	f240 325b 	movw	r2, #859	; 0x35b
 800bd2a:	4983      	ldr	r1, [pc, #524]	; (800bf38 <tcp_split_unsent_seg+0x284>)
 800bd2c:	4880      	ldr	r0, [pc, #512]	; (800bf30 <tcp_split_unsent_seg+0x27c>)
 800bd2e:	f003 ffc9 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	891b      	ldrh	r3, [r3, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d106      	bne.n	800bd48 <tcp_split_unsent_seg+0x94>
 800bd3a:	4b7b      	ldr	r3, [pc, #492]	; (800bf28 <tcp_split_unsent_seg+0x274>)
 800bd3c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bd40:	497e      	ldr	r1, [pc, #504]	; (800bf3c <tcp_split_unsent_seg+0x288>)
 800bd42:	487b      	ldr	r0, [pc, #492]	; (800bf30 <tcp_split_unsent_seg+0x27c>)
 800bd44:	f003 ffbe 	bl	800fcc4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	7a9b      	ldrb	r3, [r3, #10]
 800bd4c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	891a      	ldrh	r2, [r3, #8]
 800bd5e:	887b      	ldrh	r3, [r7, #2]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	89bb      	ldrh	r3, [r7, #12]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd72:	4619      	mov	r1, r3
 800bd74:	2036      	movs	r0, #54	; 0x36
 800bd76:	f7fb facf 	bl	8007318 <pbuf_alloc>
 800bd7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 80b7 	beq.w	800bef2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	891a      	ldrh	r2, [r3, #8]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	891b      	ldrh	r3, [r3, #8]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	887b      	ldrh	r3, [r7, #2]
 800bd94:	4413      	add	r3, r2
 800bd96:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	6858      	ldr	r0, [r3, #4]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	18d1      	adds	r1, r2, r3
 800bda4:	897b      	ldrh	r3, [r7, #10]
 800bda6:	89ba      	ldrh	r2, [r7, #12]
 800bda8:	f7fb ff84 	bl	8007cb4 <pbuf_copy_partial>
 800bdac:	4603      	mov	r3, r0
 800bdae:	461a      	mov	r2, r3
 800bdb0:	89bb      	ldrh	r3, [r7, #12]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	f040 809f 	bne.w	800bef6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fa fad9 	bl	8006378 <lwip_htons>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdce:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bdd4:	7efb      	ldrb	r3, [r7, #27]
 800bdd6:	f003 0308 	and.w	r3, r3, #8
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d007      	beq.n	800bdee <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bdde:	7efb      	ldrb	r3, [r7, #27]
 800bde0:	f023 0308 	bic.w	r3, r3, #8
 800bde4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bde6:	7ebb      	ldrb	r3, [r7, #26]
 800bde8:	f043 0308 	orr.w	r3, r3, #8
 800bdec:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bdee:	7efb      	ldrb	r3, [r7, #27]
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d007      	beq.n	800be08 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bdf8:	7efb      	ldrb	r3, [r7, #27]
 800bdfa:	f023 0301 	bic.w	r3, r3, #1
 800bdfe:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800be00:	7ebb      	ldrb	r3, [r7, #26]
 800be02:	f043 0301 	orr.w	r3, r3, #1
 800be06:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fa fac7 	bl	80063a2 <lwip_htonl>
 800be14:	4602      	mov	r2, r0
 800be16:	887b      	ldrh	r3, [r7, #2]
 800be18:	18d1      	adds	r1, r2, r3
 800be1a:	7eba      	ldrb	r2, [r7, #26]
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	460b      	mov	r3, r1
 800be22:	6939      	ldr	r1, [r7, #16]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff fea7 	bl	800bb78 <tcp_create_segment>
 800be2a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d063      	beq.n	800befa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	4618      	mov	r0, r3
 800be38:	f7fb fdda 	bl	80079f0 <pbuf_clen>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be46:	1a9b      	subs	r3, r3, r2
 800be48:	b29a      	uxth	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	6858      	ldr	r0, [r3, #4]
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	891a      	ldrh	r2, [r3, #8]
 800be5a:	89bb      	ldrh	r3, [r7, #12]
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	b29b      	uxth	r3, r3
 800be60:	4619      	mov	r1, r3
 800be62:	f7fb fbb7 	bl	80075d4 <pbuf_realloc>
  useg->len -= remainder;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	891a      	ldrh	r2, [r3, #8]
 800be6a:	89bb      	ldrh	r3, [r7, #12]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	b29a      	uxth	r2, r3
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	899b      	ldrh	r3, [r3, #12]
 800be7a:	b29c      	uxth	r4, r3
 800be7c:	7efb      	ldrb	r3, [r7, #27]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	4618      	mov	r0, r3
 800be82:	f7fa fa79 	bl	8006378 <lwip_htons>
 800be86:	4603      	mov	r3, r0
 800be88:	461a      	mov	r2, r3
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	4322      	orrs	r2, r4
 800be90:	b292      	uxth	r2, r2
 800be92:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fb fda9 	bl	80079f0 <pbuf_clen>
 800be9e:	4603      	mov	r3, r0
 800bea0:	461a      	mov	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bea8:	4413      	add	r3, r2
 800beaa:	b29a      	uxth	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fb fd9a 	bl	80079f0 <pbuf_clen>
 800bebc:	4603      	mov	r3, r0
 800bebe:	461a      	mov	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bec6:	4413      	add	r3, r2
 800bec8:	b29a      	uxth	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d103      	bne.n	800beee <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	e016      	b.n	800bf20 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bef2:	bf00      	nop
 800bef4:	e002      	b.n	800befc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bef6:	bf00      	nop
 800bef8:	e000      	b.n	800befc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800befa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d006      	beq.n	800bf10 <tcp_split_unsent_seg+0x25c>
 800bf02:	4b09      	ldr	r3, [pc, #36]	; (800bf28 <tcp_split_unsent_seg+0x274>)
 800bf04:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bf08:	490d      	ldr	r1, [pc, #52]	; (800bf40 <tcp_split_unsent_seg+0x28c>)
 800bf0a:	4809      	ldr	r0, [pc, #36]	; (800bf30 <tcp_split_unsent_seg+0x27c>)
 800bf0c:	f003 feda 	bl	800fcc4 <iprintf>
  if (p != NULL) {
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d002      	beq.n	800bf1c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bf16:	6938      	ldr	r0, [r7, #16]
 800bf18:	f7fb fce2 	bl	80078e0 <pbuf_free>
  }

  return ERR_MEM;
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3724      	adds	r7, #36	; 0x24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd90      	pop	{r4, r7, pc}
 800bf28:	080123c4 	.word	0x080123c4
 800bf2c:	08012758 	.word	0x08012758
 800bf30:	08012418 	.word	0x08012418
 800bf34:	0801277c 	.word	0x0801277c
 800bf38:	080127a0 	.word	0x080127a0
 800bf3c:	080127b0 	.word	0x080127b0
 800bf40:	080127c0 	.word	0x080127c0

0800bf44 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bf44:	b590      	push	{r4, r7, lr}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <tcp_send_fin+0x1c>
 800bf52:	4b21      	ldr	r3, [pc, #132]	; (800bfd8 <tcp_send_fin+0x94>)
 800bf54:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bf58:	4920      	ldr	r1, [pc, #128]	; (800bfdc <tcp_send_fin+0x98>)
 800bf5a:	4821      	ldr	r0, [pc, #132]	; (800bfe0 <tcp_send_fin+0x9c>)
 800bf5c:	f003 feb2 	bl	800fcc4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d02e      	beq.n	800bfc6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf6c:	60fb      	str	r3, [r7, #12]
 800bf6e:	e002      	b.n	800bf76 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1f8      	bne.n	800bf70 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	899b      	ldrh	r3, [r3, #12]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fa f9f6 	bl	8006378 <lwip_htons>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	f003 0307 	and.w	r3, r3, #7
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d116      	bne.n	800bfc6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	899b      	ldrh	r3, [r3, #12]
 800bf9e:	b29c      	uxth	r4, r3
 800bfa0:	2001      	movs	r0, #1
 800bfa2:	f7fa f9e9 	bl	8006378 <lwip_htons>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	4322      	orrs	r2, r4
 800bfb0:	b292      	uxth	r2, r2
 800bfb2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8b5b      	ldrh	r3, [r3, #26]
 800bfb8:	f043 0320 	orr.w	r3, r3, #32
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e004      	b.n	800bfd0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f80b 	bl	800bfe4 <tcp_enqueue_flags>
 800bfce:	4603      	mov	r3, r0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd90      	pop	{r4, r7, pc}
 800bfd8:	080123c4 	.word	0x080123c4
 800bfdc:	080127cc 	.word	0x080127cc
 800bfe0:	08012418 	.word	0x08012418

0800bfe4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08a      	sub	sp, #40	; 0x28
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bff8:	78fb      	ldrb	r3, [r7, #3]
 800bffa:	f003 0303 	and.w	r3, r3, #3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <tcp_enqueue_flags+0x2c>
 800c002:	4b67      	ldr	r3, [pc, #412]	; (800c1a0 <tcp_enqueue_flags+0x1bc>)
 800c004:	f240 4211 	movw	r2, #1041	; 0x411
 800c008:	4966      	ldr	r1, [pc, #408]	; (800c1a4 <tcp_enqueue_flags+0x1c0>)
 800c00a:	4867      	ldr	r0, [pc, #412]	; (800c1a8 <tcp_enqueue_flags+0x1c4>)
 800c00c:	f003 fe5a 	bl	800fcc4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <tcp_enqueue_flags+0x40>
 800c016:	4b62      	ldr	r3, [pc, #392]	; (800c1a0 <tcp_enqueue_flags+0x1bc>)
 800c018:	f240 4213 	movw	r2, #1043	; 0x413
 800c01c:	4963      	ldr	r1, [pc, #396]	; (800c1ac <tcp_enqueue_flags+0x1c8>)
 800c01e:	4862      	ldr	r0, [pc, #392]	; (800c1a8 <tcp_enqueue_flags+0x1c4>)
 800c020:	f003 fe50 	bl	800fcc4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c024:	78fb      	ldrb	r3, [r7, #3]
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c02e:	2301      	movs	r3, #1
 800c030:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c032:	7ffb      	ldrb	r3, [r7, #31]
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 0304 	and.w	r3, r3, #4
 800c03c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	b29b      	uxth	r3, r3
 800c042:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c046:	4619      	mov	r1, r3
 800c048:	2036      	movs	r0, #54	; 0x36
 800c04a:	f7fb f965 	bl	8007318 <pbuf_alloc>
 800c04e:	6138      	str	r0, [r7, #16]
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d109      	bne.n	800c06a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8b5b      	ldrh	r3, [r3, #26]
 800c05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c064:	f04f 33ff 	mov.w	r3, #4294967295
 800c068:	e095      	b.n	800c196 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	895a      	ldrh	r2, [r3, #10]
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	b29b      	uxth	r3, r3
 800c072:	429a      	cmp	r2, r3
 800c074:	d206      	bcs.n	800c084 <tcp_enqueue_flags+0xa0>
 800c076:	4b4a      	ldr	r3, [pc, #296]	; (800c1a0 <tcp_enqueue_flags+0x1bc>)
 800c078:	f240 4239 	movw	r2, #1081	; 0x439
 800c07c:	494c      	ldr	r1, [pc, #304]	; (800c1b0 <tcp_enqueue_flags+0x1cc>)
 800c07e:	484a      	ldr	r0, [pc, #296]	; (800c1a8 <tcp_enqueue_flags+0x1c4>)
 800c080:	f003 fe20 	bl	800fcc4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c088:	78fa      	ldrb	r2, [r7, #3]
 800c08a:	7ffb      	ldrb	r3, [r7, #31]
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	460b      	mov	r3, r1
 800c090:	6939      	ldr	r1, [r7, #16]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff fd70 	bl	800bb78 <tcp_create_segment>
 800c098:	60f8      	str	r0, [r7, #12]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d109      	bne.n	800c0b4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	8b5b      	ldrh	r3, [r3, #26]
 800c0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b2:	e070      	b.n	800c196 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	f003 0303 	and.w	r3, r3, #3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d006      	beq.n	800c0ce <tcp_enqueue_flags+0xea>
 800c0c0:	4b37      	ldr	r3, [pc, #220]	; (800c1a0 <tcp_enqueue_flags+0x1bc>)
 800c0c2:	f240 4242 	movw	r2, #1090	; 0x442
 800c0c6:	493b      	ldr	r1, [pc, #236]	; (800c1b4 <tcp_enqueue_flags+0x1d0>)
 800c0c8:	4837      	ldr	r0, [pc, #220]	; (800c1a8 <tcp_enqueue_flags+0x1c4>)
 800c0ca:	f003 fdfb 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	891b      	ldrh	r3, [r3, #8]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d006      	beq.n	800c0e4 <tcp_enqueue_flags+0x100>
 800c0d6:	4b32      	ldr	r3, [pc, #200]	; (800c1a0 <tcp_enqueue_flags+0x1bc>)
 800c0d8:	f240 4243 	movw	r2, #1091	; 0x443
 800c0dc:	4936      	ldr	r1, [pc, #216]	; (800c1b8 <tcp_enqueue_flags+0x1d4>)
 800c0de:	4832      	ldr	r0, [pc, #200]	; (800c1a8 <tcp_enqueue_flags+0x1c4>)
 800c0e0:	f003 fdf0 	bl	800fcc4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d103      	bne.n	800c0f4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c0f2:	e00d      	b.n	800c110 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f8:	61bb      	str	r3, [r7, #24]
 800c0fa:	e002      	b.n	800c102 <tcp_enqueue_flags+0x11e>
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	61bb      	str	r3, [r7, #24]
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1f8      	bne.n	800c0fc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	f003 0302 	and.w	r3, r3, #2
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d104      	bne.n	800c12c <tcp_enqueue_flags+0x148>
 800c122:	78fb      	ldrb	r3, [r7, #3]
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d004      	beq.n	800c136 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d006      	beq.n	800c14e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	8b5b      	ldrh	r3, [r3, #26]
 800c144:	f043 0320 	orr.w	r3, r3, #32
 800c148:	b29a      	uxth	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	4618      	mov	r0, r3
 800c154:	f7fb fc4c 	bl	80079f0 <pbuf_clen>
 800c158:	4603      	mov	r3, r0
 800c15a:	461a      	mov	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c162:	4413      	add	r3, r2
 800c164:	b29a      	uxth	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00e      	beq.n	800c194 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10a      	bne.n	800c194 <tcp_enqueue_flags+0x1b0>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c182:	2b00      	cmp	r3, #0
 800c184:	d106      	bne.n	800c194 <tcp_enqueue_flags+0x1b0>
 800c186:	4b06      	ldr	r3, [pc, #24]	; (800c1a0 <tcp_enqueue_flags+0x1bc>)
 800c188:	f240 4265 	movw	r2, #1125	; 0x465
 800c18c:	490b      	ldr	r1, [pc, #44]	; (800c1bc <tcp_enqueue_flags+0x1d8>)
 800c18e:	4806      	ldr	r0, [pc, #24]	; (800c1a8 <tcp_enqueue_flags+0x1c4>)
 800c190:	f003 fd98 	bl	800fcc4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3720      	adds	r7, #32
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	080123c4 	.word	0x080123c4
 800c1a4:	080127e8 	.word	0x080127e8
 800c1a8:	08012418 	.word	0x08012418
 800c1ac:	08012840 	.word	0x08012840
 800c1b0:	08012860 	.word	0x08012860
 800c1b4:	0801289c 	.word	0x0801289c
 800c1b8:	080128b4 	.word	0x080128b4
 800c1bc:	080128e0 	.word	0x080128e0

0800c1c0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c1c0:	b5b0      	push	{r4, r5, r7, lr}
 800c1c2:	b08a      	sub	sp, #40	; 0x28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d106      	bne.n	800c1dc <tcp_output+0x1c>
 800c1ce:	4b9e      	ldr	r3, [pc, #632]	; (800c448 <tcp_output+0x288>)
 800c1d0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c1d4:	499d      	ldr	r1, [pc, #628]	; (800c44c <tcp_output+0x28c>)
 800c1d6:	489e      	ldr	r0, [pc, #632]	; (800c450 <tcp_output+0x290>)
 800c1d8:	f003 fd74 	bl	800fcc4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7d1b      	ldrb	r3, [r3, #20]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d106      	bne.n	800c1f2 <tcp_output+0x32>
 800c1e4:	4b98      	ldr	r3, [pc, #608]	; (800c448 <tcp_output+0x288>)
 800c1e6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c1ea:	499a      	ldr	r1, [pc, #616]	; (800c454 <tcp_output+0x294>)
 800c1ec:	4898      	ldr	r0, [pc, #608]	; (800c450 <tcp_output+0x290>)
 800c1ee:	f003 fd69 	bl	800fcc4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c1f2:	4b99      	ldr	r3, [pc, #612]	; (800c458 <tcp_output+0x298>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d101      	bne.n	800c200 <tcp_output+0x40>
    return ERR_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e1ce      	b.n	800c59e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c20c:	4293      	cmp	r3, r2
 800c20e:	bf28      	it	cs
 800c210:	4613      	movcs	r3, r2
 800c212:	b29b      	uxth	r3, r3
 800c214:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c21a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10b      	bne.n	800c23a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	8b5b      	ldrh	r3, [r3, #26]
 800c226:	f003 0302 	and.w	r3, r3, #2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f000 81aa 	beq.w	800c584 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fdcb 	bl	800cdcc <tcp_send_empty_ack>
 800c236:	4603      	mov	r3, r0
 800c238:	e1b1      	b.n	800c59e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	3304      	adds	r3, #4
 800c240:	461a      	mov	r2, r3
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff fc7c 	bl	800bb40 <tcp_route>
 800c248:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d102      	bne.n	800c256 <tcp_output+0x96>
    return ERR_RTE;
 800c250:	f06f 0303 	mvn.w	r3, #3
 800c254:	e1a3      	b.n	800c59e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <tcp_output+0xa4>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d111      	bne.n	800c288 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <tcp_output+0xb0>
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	3304      	adds	r3, #4
 800c26e:	e000      	b.n	800c272 <tcp_output+0xb2>
 800c270:	2300      	movs	r3, #0
 800c272:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d102      	bne.n	800c280 <tcp_output+0xc0>
      return ERR_RTE;
 800c27a:	f06f 0303 	mvn.w	r3, #3
 800c27e:	e18e      	b.n	800c59e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fa f887 	bl	80063a2 <lwip_htonl>
 800c294:	4602      	mov	r2, r0
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29e:	8912      	ldrh	r2, [r2, #8]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d227      	bcs.n	800c2f8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d114      	bne.n	800c2e0 <tcp_output+0x120>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d110      	bne.n	800c2e0 <tcp_output+0x120>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10b      	bne.n	800c2e0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	8b5b      	ldrh	r3, [r3, #26]
 800c2e4:	f003 0302 	and.w	r3, r3, #2
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 814d 	beq.w	800c588 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fd6c 	bl	800cdcc <tcp_send_empty_ack>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	e152      	b.n	800c59e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c304:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 811c 	beq.w	800c546 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c30e:	e002      	b.n	800c316 <tcp_output+0x156>
 800c310:	6a3b      	ldr	r3, [r7, #32]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	623b      	str	r3, [r7, #32]
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1f8      	bne.n	800c310 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c31e:	e112      	b.n	800c546 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	899b      	ldrh	r3, [r3, #12]
 800c326:	b29b      	uxth	r3, r3
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fa f825 	bl	8006378 <lwip_htons>
 800c32e:	4603      	mov	r3, r0
 800c330:	b2db      	uxtb	r3, r3
 800c332:	f003 0304 	and.w	r3, r3, #4
 800c336:	2b00      	cmp	r3, #0
 800c338:	d006      	beq.n	800c348 <tcp_output+0x188>
 800c33a:	4b43      	ldr	r3, [pc, #268]	; (800c448 <tcp_output+0x288>)
 800c33c:	f240 5236 	movw	r2, #1334	; 0x536
 800c340:	4946      	ldr	r1, [pc, #280]	; (800c45c <tcp_output+0x29c>)
 800c342:	4843      	ldr	r0, [pc, #268]	; (800c450 <tcp_output+0x290>)
 800c344:	f003 fcbe 	bl	800fcc4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d01f      	beq.n	800c390 <tcp_output+0x1d0>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	8b5b      	ldrh	r3, [r3, #26]
 800c354:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d119      	bne.n	800c390 <tcp_output+0x1d0>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00b      	beq.n	800c37c <tcp_output+0x1bc>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d110      	bne.n	800c390 <tcp_output+0x1d0>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c372:	891a      	ldrh	r2, [r3, #8]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c378:	429a      	cmp	r2, r3
 800c37a:	d209      	bcs.n	800c390 <tcp_output+0x1d0>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c382:	2b00      	cmp	r3, #0
 800c384:	d004      	beq.n	800c390 <tcp_output+0x1d0>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c38c:	2b08      	cmp	r3, #8
 800c38e:	d901      	bls.n	800c394 <tcp_output+0x1d4>
 800c390:	2301      	movs	r3, #1
 800c392:	e000      	b.n	800c396 <tcp_output+0x1d6>
 800c394:	2300      	movs	r3, #0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d106      	bne.n	800c3a8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	8b5b      	ldrh	r3, [r3, #26]
 800c39e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 80e4 	beq.w	800c570 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	7d1b      	ldrb	r3, [r3, #20]
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d00d      	beq.n	800c3cc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	899b      	ldrh	r3, [r3, #12]
 800c3b6:	b29c      	uxth	r4, r3
 800c3b8:	2010      	movs	r0, #16
 800c3ba:	f7f9 ffdd 	bl	8006378 <lwip_htons>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	4322      	orrs	r2, r4
 800c3c8:	b292      	uxth	r2, r2
 800c3ca:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3d2:	f000 f909 	bl	800c5e8 <tcp_output_segment>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d009      	beq.n	800c3f6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	8b5b      	ldrh	r3, [r3, #26]
 800c3e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	835a      	strh	r2, [r3, #26]
      return err;
 800c3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3f4:	e0d3      	b.n	800c59e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	7d1b      	ldrb	r3, [r3, #20]
 800c402:	2b02      	cmp	r3, #2
 800c404:	d006      	beq.n	800c414 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	8b5b      	ldrh	r3, [r3, #26]
 800c40a:	f023 0303 	bic.w	r3, r3, #3
 800c40e:	b29a      	uxth	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f9 ffc1 	bl	80063a2 <lwip_htonl>
 800c420:	4604      	mov	r4, r0
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	891b      	ldrh	r3, [r3, #8]
 800c426:	461d      	mov	r5, r3
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	899b      	ldrh	r3, [r3, #12]
 800c42e:	b29b      	uxth	r3, r3
 800c430:	4618      	mov	r0, r3
 800c432:	f7f9 ffa1 	bl	8006378 <lwip_htons>
 800c436:	4603      	mov	r3, r0
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	f003 0303 	and.w	r3, r3, #3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00e      	beq.n	800c460 <tcp_output+0x2a0>
 800c442:	2301      	movs	r3, #1
 800c444:	e00d      	b.n	800c462 <tcp_output+0x2a2>
 800c446:	bf00      	nop
 800c448:	080123c4 	.word	0x080123c4
 800c44c:	08012908 	.word	0x08012908
 800c450:	08012418 	.word	0x08012418
 800c454:	08012920 	.word	0x08012920
 800c458:	20008bbc 	.word	0x20008bbc
 800c45c:	08012948 	.word	0x08012948
 800c460:	2300      	movs	r3, #0
 800c462:	442b      	add	r3, r5
 800c464:	4423      	add	r3, r4
 800c466:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	da02      	bge.n	800c47a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	891b      	ldrh	r3, [r3, #8]
 800c47e:	461c      	mov	r4, r3
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	899b      	ldrh	r3, [r3, #12]
 800c486:	b29b      	uxth	r3, r3
 800c488:	4618      	mov	r0, r3
 800c48a:	f7f9 ff75 	bl	8006378 <lwip_htons>
 800c48e:	4603      	mov	r3, r0
 800c490:	b2db      	uxtb	r3, r3
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <tcp_output+0x2de>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e000      	b.n	800c4a0 <tcp_output+0x2e0>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	4423      	add	r3, r4
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d049      	beq.n	800c53a <tcp_output+0x37a>
      seg->next = NULL;
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <tcp_output+0x300>
        pcb->unacked = seg;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	623b      	str	r3, [r7, #32]
 800c4be:	e03f      	b.n	800c540 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7f9 ff6b 	bl	80063a2 <lwip_htonl>
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	6a3b      	ldr	r3, [r7, #32]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7f9 ff64 	bl	80063a2 <lwip_htonl>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	1ae3      	subs	r3, r4, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	da24      	bge.n	800c52c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3370      	adds	r3, #112	; 0x70
 800c4e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c4e8:	e002      	b.n	800c4f0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d011      	beq.n	800c51c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	4618      	mov	r0, r3
 800c502:	f7f9 ff4e 	bl	80063a2 <lwip_htonl>
 800c506:	4604      	mov	r4, r0
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7f9 ff47 	bl	80063a2 <lwip_htonl>
 800c514:	4603      	mov	r3, r0
 800c516:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c518:	2b00      	cmp	r3, #0
 800c51a:	dbe6      	blt.n	800c4ea <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	e009      	b.n	800c540 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c52c:	6a3b      	ldr	r3, [r7, #32]
 800c52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c530:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c532:	6a3b      	ldr	r3, [r7, #32]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	623b      	str	r3, [r7, #32]
 800c538:	e002      	b.n	800c540 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c53a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c53c:	f7fc fc43 	bl	8008dc6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d012      	beq.n	800c572 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	4618      	mov	r0, r3
 800c554:	f7f9 ff25 	bl	80063a2 <lwip_htonl>
 800c558:	4602      	mov	r2, r0
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c562:	8912      	ldrh	r2, [r2, #8]
 800c564:	4413      	add	r3, r2
  while (seg != NULL &&
 800c566:	69ba      	ldr	r2, [r7, #24]
 800c568:	429a      	cmp	r2, r3
 800c56a:	f4bf aed9 	bcs.w	800c320 <tcp_output+0x160>
 800c56e:	e000      	b.n	800c572 <tcp_output+0x3b2>
      break;
 800c570:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c576:	2b00      	cmp	r3, #0
 800c578:	d108      	bne.n	800c58c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c582:	e004      	b.n	800c58e <tcp_output+0x3ce>
    goto output_done;
 800c584:	bf00      	nop
 800c586:	e002      	b.n	800c58e <tcp_output+0x3ce>
    goto output_done;
 800c588:	bf00      	nop
 800c58a:	e000      	b.n	800c58e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c58c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	8b5b      	ldrh	r3, [r3, #26]
 800c592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c596:	b29a      	uxth	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3728      	adds	r7, #40	; 0x28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c5a6:	bf00      	nop

0800c5a8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d106      	bne.n	800c5c4 <tcp_output_segment_busy+0x1c>
 800c5b6:	4b09      	ldr	r3, [pc, #36]	; (800c5dc <tcp_output_segment_busy+0x34>)
 800c5b8:	f240 529a 	movw	r2, #1434	; 0x59a
 800c5bc:	4908      	ldr	r1, [pc, #32]	; (800c5e0 <tcp_output_segment_busy+0x38>)
 800c5be:	4809      	ldr	r0, [pc, #36]	; (800c5e4 <tcp_output_segment_busy+0x3c>)
 800c5c0:	f003 fb80 	bl	800fcc4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	7b9b      	ldrb	r3, [r3, #14]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d001      	beq.n	800c5d2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	080123c4 	.word	0x080123c4
 800c5e0:	08012960 	.word	0x08012960
 800c5e4:	08012418 	.word	0x08012418

0800c5e8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c5e8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ea:	b08c      	sub	sp, #48	; 0x30
 800c5ec:	af04      	add	r7, sp, #16
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d106      	bne.n	800c608 <tcp_output_segment+0x20>
 800c5fa:	4b63      	ldr	r3, [pc, #396]	; (800c788 <tcp_output_segment+0x1a0>)
 800c5fc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c600:	4962      	ldr	r1, [pc, #392]	; (800c78c <tcp_output_segment+0x1a4>)
 800c602:	4863      	ldr	r0, [pc, #396]	; (800c790 <tcp_output_segment+0x1a8>)
 800c604:	f003 fb5e 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d106      	bne.n	800c61c <tcp_output_segment+0x34>
 800c60e:	4b5e      	ldr	r3, [pc, #376]	; (800c788 <tcp_output_segment+0x1a0>)
 800c610:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c614:	495f      	ldr	r1, [pc, #380]	; (800c794 <tcp_output_segment+0x1ac>)
 800c616:	485e      	ldr	r0, [pc, #376]	; (800c790 <tcp_output_segment+0x1a8>)
 800c618:	f003 fb54 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d106      	bne.n	800c630 <tcp_output_segment+0x48>
 800c622:	4b59      	ldr	r3, [pc, #356]	; (800c788 <tcp_output_segment+0x1a0>)
 800c624:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c628:	495b      	ldr	r1, [pc, #364]	; (800c798 <tcp_output_segment+0x1b0>)
 800c62a:	4859      	ldr	r0, [pc, #356]	; (800c790 <tcp_output_segment+0x1a8>)
 800c62c:	f003 fb4a 	bl	800fcc4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f7ff ffb9 	bl	800c5a8 <tcp_output_segment_busy>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	e09f      	b.n	800c780 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	68dc      	ldr	r4, [r3, #12]
 800c648:	4610      	mov	r0, r2
 800c64a:	f7f9 feaa 	bl	80063a2 <lwip_htonl>
 800c64e:	4603      	mov	r3, r0
 800c650:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68dc      	ldr	r4, [r3, #12]
 800c65a:	4610      	mov	r0, r2
 800c65c:	f7f9 fe8c 	bl	8006378 <lwip_htons>
 800c660:	4603      	mov	r3, r0
 800c662:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c66c:	441a      	add	r2, r3
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	3314      	adds	r3, #20
 800c678:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	7a9b      	ldrb	r3, [r3, #10]
 800c67e:	f003 0301 	and.w	r3, r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	d015      	beq.n	800c6b2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	3304      	adds	r3, #4
 800c68a:	461a      	mov	r2, r3
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c692:	f7fc fe8f 	bl	80093b4 <tcp_eff_send_mss_netif>
 800c696:	4603      	mov	r3, r0
 800c698:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c69a:	8b7b      	ldrh	r3, [r7, #26]
 800c69c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f9 fe7e 	bl	80063a2 <lwip_htonl>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	da02      	bge.n	800c6c2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10c      	bne.n	800c6e4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c6ca:	4b34      	ldr	r3, [pc, #208]	; (800c79c <tcp_output_segment+0x1b4>)
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7f9 fe62 	bl	80063a2 <lwip_htonl>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	68da      	ldr	r2, [r3, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	8959      	ldrh	r1, [r3, #10]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	8b3a      	ldrh	r2, [r7, #24]
 800c6fe:	1a8a      	subs	r2, r1, r2
 800c700:	b292      	uxth	r2, r2
 800c702:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	8919      	ldrh	r1, [r3, #8]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	8b3a      	ldrh	r2, [r7, #24]
 800c710:	1a8a      	subs	r2, r1, r2
 800c712:	b292      	uxth	r2, r2
 800c714:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	68d2      	ldr	r2, [r2, #12]
 800c71e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	741a      	strb	r2, [r3, #16]
 800c728:	2200      	movs	r2, #0
 800c72a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f103 0214 	add.w	r2, r3, #20
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	7a9b      	ldrb	r3, [r3, #10]
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	f003 0304 	and.w	r3, r3, #4
 800c73e:	4413      	add	r3, r2
 800c740:	69fa      	ldr	r2, [r7, #28]
 800c742:	429a      	cmp	r2, r3
 800c744:	d006      	beq.n	800c754 <tcp_output_segment+0x16c>
 800c746:	4b10      	ldr	r3, [pc, #64]	; (800c788 <tcp_output_segment+0x1a0>)
 800c748:	f240 621c 	movw	r2, #1564	; 0x61c
 800c74c:	4914      	ldr	r1, [pc, #80]	; (800c7a0 <tcp_output_segment+0x1b8>)
 800c74e:	4810      	ldr	r0, [pc, #64]	; (800c790 <tcp_output_segment+0x1a8>)
 800c750:	f003 fab8 	bl	800fcc4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6858      	ldr	r0, [r3, #4]
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	1d1c      	adds	r4, r3, #4
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	7add      	ldrb	r5, [r3, #11]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	7a9b      	ldrb	r3, [r3, #10]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	9202      	str	r2, [sp, #8]
 800c76a:	2206      	movs	r2, #6
 800c76c:	9201      	str	r2, [sp, #4]
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	462b      	mov	r3, r5
 800c772:	4622      	mov	r2, r4
 800c774:	f002 fa36 	bl	800ebe4 <ip4_output_if>
 800c778:	4603      	mov	r3, r0
 800c77a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c77c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3720      	adds	r7, #32
 800c784:	46bd      	mov	sp, r7
 800c786:	bdb0      	pop	{r4, r5, r7, pc}
 800c788:	080123c4 	.word	0x080123c4
 800c78c:	08012988 	.word	0x08012988
 800c790:	08012418 	.word	0x08012418
 800c794:	080129a8 	.word	0x080129a8
 800c798:	080129c8 	.word	0x080129c8
 800c79c:	20008bac 	.word	0x20008bac
 800c7a0:	080129ec 	.word	0x080129ec

0800c7a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c7a4:	b5b0      	push	{r4, r5, r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d106      	bne.n	800c7c0 <tcp_rexmit_rto_prepare+0x1c>
 800c7b2:	4b31      	ldr	r3, [pc, #196]	; (800c878 <tcp_rexmit_rto_prepare+0xd4>)
 800c7b4:	f240 6263 	movw	r2, #1635	; 0x663
 800c7b8:	4930      	ldr	r1, [pc, #192]	; (800c87c <tcp_rexmit_rto_prepare+0xd8>)
 800c7ba:	4831      	ldr	r0, [pc, #196]	; (800c880 <tcp_rexmit_rto_prepare+0xdc>)
 800c7bc:	f003 fa82 	bl	800fcc4 <iprintf>

  if (pcb->unacked == NULL) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d102      	bne.n	800c7ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c7c8:	f06f 0305 	mvn.w	r3, #5
 800c7cc:	e050      	b.n	800c870 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	e00b      	b.n	800c7ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff fee6 	bl	800c5a8 <tcp_output_segment_busy>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c7e2:	f06f 0305 	mvn.w	r3, #5
 800c7e6:	e043      	b.n	800c870 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	60fb      	str	r3, [r7, #12]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1ef      	bne.n	800c7d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7ff fed6 	bl	800c5a8 <tcp_output_segment_busy>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d002      	beq.n	800c808 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c802:	f06f 0305 	mvn.w	r3, #5
 800c806:	e033      	b.n	800c870 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	8b5b      	ldrh	r3, [r3, #26]
 800c822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c826:	b29a      	uxth	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	4618      	mov	r0, r3
 800c834:	f7f9 fdb5 	bl	80063a2 <lwip_htonl>
 800c838:	4604      	mov	r4, r0
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	891b      	ldrh	r3, [r3, #8]
 800c83e:	461d      	mov	r5, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	899b      	ldrh	r3, [r3, #12]
 800c846:	b29b      	uxth	r3, r3
 800c848:	4618      	mov	r0, r3
 800c84a:	f7f9 fd95 	bl	8006378 <lwip_htons>
 800c84e:	4603      	mov	r3, r0
 800c850:	b2db      	uxtb	r3, r3
 800c852:	f003 0303 	and.w	r3, r3, #3
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <tcp_rexmit_rto_prepare+0xba>
 800c85a:	2301      	movs	r3, #1
 800c85c:	e000      	b.n	800c860 <tcp_rexmit_rto_prepare+0xbc>
 800c85e:	2300      	movs	r3, #0
 800c860:	442b      	add	r3, r5
 800c862:	18e2      	adds	r2, r4, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bdb0      	pop	{r4, r5, r7, pc}
 800c878:	080123c4 	.word	0x080123c4
 800c87c:	08012a00 	.word	0x08012a00
 800c880:	08012418 	.word	0x08012418

0800c884 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <tcp_rexmit_rto_commit+0x1c>
 800c892:	4b0d      	ldr	r3, [pc, #52]	; (800c8c8 <tcp_rexmit_rto_commit+0x44>)
 800c894:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c898:	490c      	ldr	r1, [pc, #48]	; (800c8cc <tcp_rexmit_rto_commit+0x48>)
 800c89a:	480d      	ldr	r0, [pc, #52]	; (800c8d0 <tcp_rexmit_rto_commit+0x4c>)
 800c89c:	f003 fa12 	bl	800fcc4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8a6:	2bff      	cmp	r3, #255	; 0xff
 800c8a8:	d007      	beq.n	800c8ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7ff fc80 	bl	800c1c0 <tcp_output>
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	080123c4 	.word	0x080123c4
 800c8cc:	08012a24 	.word	0x08012a24
 800c8d0:	08012418 	.word	0x08012418

0800c8d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <tcp_rexmit_rto+0x1c>
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <tcp_rexmit_rto+0x38>)
 800c8e4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c8e8:	4909      	ldr	r1, [pc, #36]	; (800c910 <tcp_rexmit_rto+0x3c>)
 800c8ea:	480a      	ldr	r0, [pc, #40]	; (800c914 <tcp_rexmit_rto+0x40>)
 800c8ec:	f003 f9ea 	bl	800fcc4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7ff ff57 	bl	800c7a4 <tcp_rexmit_rto_prepare>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff ffc1 	bl	800c884 <tcp_rexmit_rto_commit>
  }
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	080123c4 	.word	0x080123c4
 800c910:	08012a48 	.word	0x08012a48
 800c914:	08012418 	.word	0x08012418

0800c918 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c918:	b590      	push	{r4, r7, lr}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d106      	bne.n	800c934 <tcp_rexmit+0x1c>
 800c926:	4b2f      	ldr	r3, [pc, #188]	; (800c9e4 <tcp_rexmit+0xcc>)
 800c928:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c92c:	492e      	ldr	r1, [pc, #184]	; (800c9e8 <tcp_rexmit+0xd0>)
 800c92e:	482f      	ldr	r0, [pc, #188]	; (800c9ec <tcp_rexmit+0xd4>)
 800c930:	f003 f9c8 	bl	800fcc4 <iprintf>

  if (pcb->unacked == NULL) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d102      	bne.n	800c942 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c93c:	f06f 0305 	mvn.w	r3, #5
 800c940:	e04c      	b.n	800c9dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c946:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c948:	68b8      	ldr	r0, [r7, #8]
 800c94a:	f7ff fe2d 	bl	800c5a8 <tcp_output_segment_busy>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d002      	beq.n	800c95a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c954:	f06f 0305 	mvn.w	r3, #5
 800c958:	e040      	b.n	800c9dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	336c      	adds	r3, #108	; 0x6c
 800c966:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c968:	e002      	b.n	800c970 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d011      	beq.n	800c99c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	4618      	mov	r0, r3
 800c982:	f7f9 fd0e 	bl	80063a2 <lwip_htonl>
 800c986:	4604      	mov	r4, r0
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7f9 fd07 	bl	80063a2 <lwip_htonl>
 800c994:	4603      	mov	r3, r0
 800c996:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dbe6      	blt.n	800c96a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d103      	bne.n	800c9ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9c0:	2bff      	cmp	r3, #255	; 0xff
 800c9c2:	d007      	beq.n	800c9d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd90      	pop	{r4, r7, pc}
 800c9e4:	080123c4 	.word	0x080123c4
 800c9e8:	08012a64 	.word	0x08012a64
 800c9ec:	08012418 	.word	0x08012418

0800c9f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <tcp_rexmit_fast+0x1c>
 800c9fe:	4b2a      	ldr	r3, [pc, #168]	; (800caa8 <tcp_rexmit_fast+0xb8>)
 800ca00:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ca04:	4929      	ldr	r1, [pc, #164]	; (800caac <tcp_rexmit_fast+0xbc>)
 800ca06:	482a      	ldr	r0, [pc, #168]	; (800cab0 <tcp_rexmit_fast+0xc0>)
 800ca08:	f003 f95c 	bl	800fcc4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d045      	beq.n	800caa0 <tcp_rexmit_fast+0xb0>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	8b5b      	ldrh	r3, [r3, #26]
 800ca18:	f003 0304 	and.w	r3, r3, #4
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d13f      	bne.n	800caa0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff ff79 	bl	800c918 <tcp_rexmit>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d139      	bne.n	800caa0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	bf28      	it	cs
 800ca3c:	4613      	movcs	r3, r2
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	da00      	bge.n	800ca46 <tcp_rexmit_fast+0x56>
 800ca44:	3301      	adds	r3, #1
 800ca46:	105b      	asrs	r3, r3, #1
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ca56:	461a      	mov	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d206      	bcs.n	800ca70 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	0049      	lsls	r1, r1, #1
 800ca7e:	440b      	add	r3, r1
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	4413      	add	r3, r2
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	8b5b      	ldrh	r3, [r3, #26]
 800ca90:	f043 0304 	orr.w	r3, r3, #4
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	080123c4 	.word	0x080123c4
 800caac:	08012a7c 	.word	0x08012a7c
 800cab0:	08012418 	.word	0x08012418

0800cab4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	607b      	str	r3, [r7, #4]
 800cabe:	460b      	mov	r3, r1
 800cac0:	817b      	strh	r3, [r7, #10]
 800cac2:	4613      	mov	r3, r2
 800cac4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cac6:	897a      	ldrh	r2, [r7, #10]
 800cac8:	893b      	ldrh	r3, [r7, #8]
 800caca:	4413      	add	r3, r2
 800cacc:	b29b      	uxth	r3, r3
 800cace:	3314      	adds	r3, #20
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cad6:	4619      	mov	r1, r3
 800cad8:	2022      	movs	r0, #34	; 0x22
 800cada:	f7fa fc1d 	bl	8007318 <pbuf_alloc>
 800cade:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d04d      	beq.n	800cb82 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cae6:	897b      	ldrh	r3, [r7, #10]
 800cae8:	3313      	adds	r3, #19
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	8952      	ldrh	r2, [r2, #10]
 800caee:	4293      	cmp	r3, r2
 800caf0:	db06      	blt.n	800cb00 <tcp_output_alloc_header_common+0x4c>
 800caf2:	4b26      	ldr	r3, [pc, #152]	; (800cb8c <tcp_output_alloc_header_common+0xd8>)
 800caf4:	f240 7223 	movw	r2, #1827	; 0x723
 800caf8:	4925      	ldr	r1, [pc, #148]	; (800cb90 <tcp_output_alloc_header_common+0xdc>)
 800cafa:	4826      	ldr	r0, [pc, #152]	; (800cb94 <tcp_output_alloc_header_common+0xe0>)
 800cafc:	f003 f8e2 	bl	800fcc4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cb06:	8c3b      	ldrh	r3, [r7, #32]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f9 fc35 	bl	8006378 <lwip_htons>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	461a      	mov	r2, r3
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cb16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f9 fc2d 	bl	8006378 <lwip_htons>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	461a      	mov	r2, r3
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7f9 fc38 	bl	80063a2 <lwip_htonl>
 800cb32:	4602      	mov	r2, r0
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cb38:	897b      	ldrh	r3, [r7, #10]
 800cb3a:	089b      	lsrs	r3, r3, #2
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	3305      	adds	r3, #5
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	031b      	lsls	r3, r3, #12
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f9 fc11 	bl	8006378 <lwip_htons>
 800cb56:	4603      	mov	r3, r0
 800cb58:	461a      	mov	r2, r3
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cb5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7f9 fc09 	bl	8006378 <lwip_htons>
 800cb66:	4603      	mov	r3, r0
 800cb68:	461a      	mov	r2, r3
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	2200      	movs	r2, #0
 800cb72:	741a      	strb	r2, [r3, #16]
 800cb74:	2200      	movs	r2, #0
 800cb76:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	749a      	strb	r2, [r3, #18]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cb82:	697b      	ldr	r3, [r7, #20]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	080123c4 	.word	0x080123c4
 800cb90:	08012a9c 	.word	0x08012a9c
 800cb94:	08012418 	.word	0x08012418

0800cb98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cb98:	b5b0      	push	{r4, r5, r7, lr}
 800cb9a:	b08a      	sub	sp, #40	; 0x28
 800cb9c:	af04      	add	r7, sp, #16
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	607b      	str	r3, [r7, #4]
 800cba2:	460b      	mov	r3, r1
 800cba4:	817b      	strh	r3, [r7, #10]
 800cba6:	4613      	mov	r3, r2
 800cba8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d106      	bne.n	800cbbe <tcp_output_alloc_header+0x26>
 800cbb0:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <tcp_output_alloc_header+0x70>)
 800cbb2:	f240 7242 	movw	r2, #1858	; 0x742
 800cbb6:	4915      	ldr	r1, [pc, #84]	; (800cc0c <tcp_output_alloc_header+0x74>)
 800cbb8:	4815      	ldr	r0, [pc, #84]	; (800cc10 <tcp_output_alloc_header+0x78>)
 800cbba:	f003 f883 	bl	800fcc4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	8adb      	ldrh	r3, [r3, #22]
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	8b12      	ldrh	r2, [r2, #24]
 800cbca:	68f9      	ldr	r1, [r7, #12]
 800cbcc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cbce:	893d      	ldrh	r5, [r7, #8]
 800cbd0:	897c      	ldrh	r4, [r7, #10]
 800cbd2:	9103      	str	r1, [sp, #12]
 800cbd4:	2110      	movs	r1, #16
 800cbd6:	9102      	str	r1, [sp, #8]
 800cbd8:	9201      	str	r2, [sp, #4]
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	462a      	mov	r2, r5
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	f7ff ff67 	bl	800cab4 <tcp_output_alloc_header_common>
 800cbe6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d006      	beq.n	800cbfc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cbf6:	441a      	add	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cbfc:	697b      	ldr	r3, [r7, #20]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bdb0      	pop	{r4, r5, r7, pc}
 800cc06:	bf00      	nop
 800cc08:	080123c4 	.word	0x080123c4
 800cc0c:	08012acc 	.word	0x08012acc
 800cc10:	08012418 	.word	0x08012418

0800cc14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	4611      	mov	r1, r2
 800cc20:	461a      	mov	r2, r3
 800cc22:	460b      	mov	r3, r1
 800cc24:	71fb      	strb	r3, [r7, #7]
 800cc26:	4613      	mov	r3, r2
 800cc28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <tcp_output_fill_options+0x2e>
 800cc34:	4b13      	ldr	r3, [pc, #76]	; (800cc84 <tcp_output_fill_options+0x70>)
 800cc36:	f240 7256 	movw	r2, #1878	; 0x756
 800cc3a:	4913      	ldr	r1, [pc, #76]	; (800cc88 <tcp_output_fill_options+0x74>)
 800cc3c:	4813      	ldr	r0, [pc, #76]	; (800cc8c <tcp_output_fill_options+0x78>)
 800cc3e:	f003 f841 	bl	800fcc4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	3314      	adds	r3, #20
 800cc4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	f103 0214 	add.w	r2, r3, #20
 800cc54:	8bfb      	ldrh	r3, [r7, #30]
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4619      	mov	r1, r3
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	f003 0304 	and.w	r3, r3, #4
 800cc62:	440b      	add	r3, r1
 800cc64:	4413      	add	r3, r2
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d006      	beq.n	800cc7a <tcp_output_fill_options+0x66>
 800cc6c:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <tcp_output_fill_options+0x70>)
 800cc6e:	f240 7275 	movw	r2, #1909	; 0x775
 800cc72:	4907      	ldr	r1, [pc, #28]	; (800cc90 <tcp_output_fill_options+0x7c>)
 800cc74:	4805      	ldr	r0, [pc, #20]	; (800cc8c <tcp_output_fill_options+0x78>)
 800cc76:	f003 f825 	bl	800fcc4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cc7a:	bf00      	nop
 800cc7c:	3720      	adds	r7, #32
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	080123c4 	.word	0x080123c4
 800cc88:	08012af4 	.word	0x08012af4
 800cc8c:	08012418 	.word	0x08012418
 800cc90:	080129ec 	.word	0x080129ec

0800cc94 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08a      	sub	sp, #40	; 0x28
 800cc98:	af04      	add	r7, sp, #16
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d106      	bne.n	800ccb6 <tcp_output_control_segment+0x22>
 800cca8:	4b1c      	ldr	r3, [pc, #112]	; (800cd1c <tcp_output_control_segment+0x88>)
 800ccaa:	f240 7287 	movw	r2, #1927	; 0x787
 800ccae:	491c      	ldr	r1, [pc, #112]	; (800cd20 <tcp_output_control_segment+0x8c>)
 800ccb0:	481c      	ldr	r0, [pc, #112]	; (800cd24 <tcp_output_control_segment+0x90>)
 800ccb2:	f003 f807 	bl	800fcc4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f7fe ff40 	bl	800bb40 <tcp_route>
 800ccc0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ccc8:	23fc      	movs	r3, #252	; 0xfc
 800ccca:	75fb      	strb	r3, [r7, #23]
 800cccc:	e01c      	b.n	800cd08 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d006      	beq.n	800cce2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	7adb      	ldrb	r3, [r3, #11]
 800ccd8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	7a9b      	ldrb	r3, [r3, #10]
 800ccde:	757b      	strb	r3, [r7, #21]
 800cce0:	e003      	b.n	800ccea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cce2:	23ff      	movs	r3, #255	; 0xff
 800cce4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ccea:	7dba      	ldrb	r2, [r7, #22]
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	9302      	str	r3, [sp, #8]
 800ccf0:	2306      	movs	r3, #6
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	7d7b      	ldrb	r3, [r7, #21]
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	6879      	ldr	r1, [r7, #4]
 800ccfe:	68b8      	ldr	r0, [r7, #8]
 800cd00:	f001 ff70 	bl	800ebe4 <ip4_output_if>
 800cd04:	4603      	mov	r3, r0
 800cd06:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cd08:	68b8      	ldr	r0, [r7, #8]
 800cd0a:	f7fa fde9 	bl	80078e0 <pbuf_free>
  return err;
 800cd0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	080123c4 	.word	0x080123c4
 800cd20:	08012b1c 	.word	0x08012b1c
 800cd24:	08012418 	.word	0x08012418

0800cd28 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cd28:	b590      	push	{r4, r7, lr}
 800cd2a:	b08b      	sub	sp, #44	; 0x2c
 800cd2c:	af04      	add	r7, sp, #16
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
 800cd34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d106      	bne.n	800cd4a <tcp_rst+0x22>
 800cd3c:	4b1f      	ldr	r3, [pc, #124]	; (800cdbc <tcp_rst+0x94>)
 800cd3e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cd42:	491f      	ldr	r1, [pc, #124]	; (800cdc0 <tcp_rst+0x98>)
 800cd44:	481f      	ldr	r0, [pc, #124]	; (800cdc4 <tcp_rst+0x9c>)
 800cd46:	f002 ffbd 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d106      	bne.n	800cd5e <tcp_rst+0x36>
 800cd50:	4b1a      	ldr	r3, [pc, #104]	; (800cdbc <tcp_rst+0x94>)
 800cd52:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cd56:	491c      	ldr	r1, [pc, #112]	; (800cdc8 <tcp_rst+0xa0>)
 800cd58:	481a      	ldr	r0, [pc, #104]	; (800cdc4 <tcp_rst+0x9c>)
 800cd5a:	f002 ffb3 	bl	800fcc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cd62:	f246 0308 	movw	r3, #24584	; 0x6008
 800cd66:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	b29c      	uxth	r4, r3
 800cd6c:	68b8      	ldr	r0, [r7, #8]
 800cd6e:	f7f9 fb18 	bl	80063a2 <lwip_htonl>
 800cd72:	4602      	mov	r2, r0
 800cd74:	8abb      	ldrh	r3, [r7, #20]
 800cd76:	9303      	str	r3, [sp, #12]
 800cd78:	2314      	movs	r3, #20
 800cd7a:	9302      	str	r3, [sp, #8]
 800cd7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	2200      	movs	r2, #0
 800cd88:	4621      	mov	r1, r4
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff fe92 	bl	800cab4 <tcp_output_alloc_header_common>
 800cd90:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00c      	beq.n	800cdb2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	6939      	ldr	r1, [r7, #16]
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f7ff ff38 	bl	800cc14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	6939      	ldr	r1, [r7, #16]
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff ff72 	bl	800cc94 <tcp_output_control_segment>
 800cdb0:	e000      	b.n	800cdb4 <tcp_rst+0x8c>
    return;
 800cdb2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cdb4:	371c      	adds	r7, #28
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd90      	pop	{r4, r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	080123c4 	.word	0x080123c4
 800cdc0:	08012b48 	.word	0x08012b48
 800cdc4:	08012418 	.word	0x08012418
 800cdc8:	08012b64 	.word	0x08012b64

0800cdcc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cdcc:	b590      	push	{r4, r7, lr}
 800cdce:	b087      	sub	sp, #28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <tcp_send_empty_ack+0x24>
 800cde2:	4b28      	ldr	r3, [pc, #160]	; (800ce84 <tcp_send_empty_ack+0xb8>)
 800cde4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cde8:	4927      	ldr	r1, [pc, #156]	; (800ce88 <tcp_send_empty_ack+0xbc>)
 800cdea:	4828      	ldr	r0, [pc, #160]	; (800ce8c <tcp_send_empty_ack+0xc0>)
 800cdec:	f002 ff6a 	bl	800fcc4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cdf0:	7dfb      	ldrb	r3, [r7, #23]
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	f003 0304 	and.w	r3, r3, #4
 800cdfa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cdfc:	7d7b      	ldrb	r3, [r7, #21]
 800cdfe:	b29c      	uxth	r4, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f9 facc 	bl	80063a2 <lwip_htonl>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	4621      	mov	r1, r4
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff fec1 	bl	800cb98 <tcp_output_alloc_header>
 800ce16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d109      	bne.n	800ce32 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	8b5b      	ldrh	r3, [r3, #26]
 800ce22:	f043 0303 	orr.w	r3, r3, #3
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ce2c:	f06f 0301 	mvn.w	r3, #1
 800ce30:	e023      	b.n	800ce7a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ce32:	7dbb      	ldrb	r3, [r7, #22]
 800ce34:	7dfa      	ldrb	r2, [r7, #23]
 800ce36:	6939      	ldr	r1, [r7, #16]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff feeb 	bl	800cc14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	3304      	adds	r3, #4
 800ce44:	6939      	ldr	r1, [r7, #16]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff ff24 	bl	800cc94 <tcp_output_control_segment>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ce50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d007      	beq.n	800ce68 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	8b5b      	ldrh	r3, [r3, #26]
 800ce5c:	f043 0303 	orr.w	r3, r3, #3
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	835a      	strh	r2, [r3, #26]
 800ce66:	e006      	b.n	800ce76 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	8b5b      	ldrh	r3, [r3, #26]
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ce76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	371c      	adds	r7, #28
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd90      	pop	{r4, r7, pc}
 800ce82:	bf00      	nop
 800ce84:	080123c4 	.word	0x080123c4
 800ce88:	08012b80 	.word	0x08012b80
 800ce8c:	08012418 	.word	0x08012418

0800ce90 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ce90:	b590      	push	{r4, r7, lr}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ce98:	2300      	movs	r3, #0
 800ce9a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <tcp_keepalive+0x20>
 800cea2:	4b18      	ldr	r3, [pc, #96]	; (800cf04 <tcp_keepalive+0x74>)
 800cea4:	f640 0224 	movw	r2, #2084	; 0x824
 800cea8:	4917      	ldr	r1, [pc, #92]	; (800cf08 <tcp_keepalive+0x78>)
 800ceaa:	4818      	ldr	r0, [pc, #96]	; (800cf0c <tcp_keepalive+0x7c>)
 800ceac:	f002 ff0a 	bl	800fcc4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	b29c      	uxth	r4, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f9 fa71 	bl	80063a2 <lwip_htonl>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2200      	movs	r2, #0
 800cec4:	4621      	mov	r1, r4
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fe66 	bl	800cb98 <tcp_output_alloc_header>
 800cecc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ced4:	f04f 33ff 	mov.w	r3, #4294967295
 800ced8:	e010      	b.n	800cefc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
 800cedc:	2200      	movs	r2, #0
 800cede:	6939      	ldr	r1, [r7, #16]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff fe97 	bl	800cc14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3304      	adds	r3, #4
 800ceec:	6939      	ldr	r1, [r7, #16]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff fed0 	bl	800cc94 <tcp_output_control_segment>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	371c      	adds	r7, #28
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd90      	pop	{r4, r7, pc}
 800cf04:	080123c4 	.word	0x080123c4
 800cf08:	08012ba0 	.word	0x08012ba0
 800cf0c:	08012418 	.word	0x08012418

0800cf10 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cf10:	b590      	push	{r4, r7, lr}
 800cf12:	b08b      	sub	sp, #44	; 0x2c
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d106      	bne.n	800cf32 <tcp_zero_window_probe+0x22>
 800cf24:	4b4c      	ldr	r3, [pc, #304]	; (800d058 <tcp_zero_window_probe+0x148>)
 800cf26:	f640 024f 	movw	r2, #2127	; 0x84f
 800cf2a:	494c      	ldr	r1, [pc, #304]	; (800d05c <tcp_zero_window_probe+0x14c>)
 800cf2c:	484c      	ldr	r0, [pc, #304]	; (800d060 <tcp_zero_window_probe+0x150>)
 800cf2e:	f002 fec9 	bl	800fcc4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf36:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e086      	b.n	800d050 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cf48:	2bff      	cmp	r3, #255	; 0xff
 800cf4a:	d007      	beq.n	800cf5c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cf52:	3301      	adds	r3, #1
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	899b      	ldrh	r3, [r3, #12]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7f9 fa07 	bl	8006378 <lwip_htons>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d005      	beq.n	800cf82 <tcp_zero_window_probe+0x72>
 800cf76:	6a3b      	ldr	r3, [r7, #32]
 800cf78:	891b      	ldrh	r3, [r3, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <tcp_zero_window_probe+0x72>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e000      	b.n	800cf84 <tcp_zero_window_probe+0x74>
 800cf82:	2300      	movs	r3, #0
 800cf84:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cf86:	7ffb      	ldrb	r3, [r7, #31]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	bf0c      	ite	eq
 800cf8c:	2301      	moveq	r3, #1
 800cf8e:	2300      	movne	r3, #0
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cf94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf98:	b299      	uxth	r1, r3
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	8bba      	ldrh	r2, [r7, #28]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff fdf8 	bl	800cb98 <tcp_output_alloc_header>
 800cfa8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d102      	bne.n	800cfb6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800cfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfb4:	e04c      	b.n	800d050 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cfbc:	7ffb      	ldrb	r3, [r7, #31]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d011      	beq.n	800cfe6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	899b      	ldrh	r3, [r3, #12]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	b21b      	sxth	r3, r3
 800cfca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cfce:	b21c      	sxth	r4, r3
 800cfd0:	2011      	movs	r0, #17
 800cfd2:	f7f9 f9d1 	bl	8006378 <lwip_htons>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	b21b      	sxth	r3, r3
 800cfda:	4323      	orrs	r3, r4
 800cfdc:	b21b      	sxth	r3, r3
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	819a      	strh	r2, [r3, #12]
 800cfe4:	e010      	b.n	800d008 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	3314      	adds	r3, #20
 800cfec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cfee:	6a3b      	ldr	r3, [r7, #32]
 800cff0:	6858      	ldr	r0, [r3, #4]
 800cff2:	6a3b      	ldr	r3, [r7, #32]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	891a      	ldrh	r2, [r3, #8]
 800cff8:	6a3b      	ldr	r3, [r7, #32]
 800cffa:	891b      	ldrh	r3, [r3, #8]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	b29b      	uxth	r3, r3
 800d000:	2201      	movs	r2, #1
 800d002:	6939      	ldr	r1, [r7, #16]
 800d004:	f7fa fe56 	bl	8007cb4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f9 f9c7 	bl	80063a2 <lwip_htonl>
 800d014:	4603      	mov	r3, r0
 800d016:	3301      	adds	r3, #1
 800d018:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	da02      	bge.n	800d02c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d030:	2200      	movs	r2, #0
 800d032:	69b9      	ldr	r1, [r7, #24]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff fded 	bl	800cc14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	3304      	adds	r3, #4
 800d040:	69b9      	ldr	r1, [r7, #24]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff fe26 	bl	800cc94 <tcp_output_control_segment>
 800d048:	4603      	mov	r3, r0
 800d04a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d04c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d050:	4618      	mov	r0, r3
 800d052:	372c      	adds	r7, #44	; 0x2c
 800d054:	46bd      	mov	sp, r7
 800d056:	bd90      	pop	{r4, r7, pc}
 800d058:	080123c4 	.word	0x080123c4
 800d05c:	08012bbc 	.word	0x08012bbc
 800d060:	08012418 	.word	0x08012418

0800d064 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d06c:	f7fa ff10 	bl	8007e90 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d070:	4b0a      	ldr	r3, [pc, #40]	; (800d09c <tcpip_tcp_timer+0x38>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d103      	bne.n	800d080 <tcpip_tcp_timer+0x1c>
 800d078:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <tcpip_tcp_timer+0x3c>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d080:	2200      	movs	r2, #0
 800d082:	4908      	ldr	r1, [pc, #32]	; (800d0a4 <tcpip_tcp_timer+0x40>)
 800d084:	20fa      	movs	r0, #250	; 0xfa
 800d086:	f000 f8f3 	bl	800d270 <sys_timeout>
 800d08a:	e003      	b.n	800d094 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d08c:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <tcpip_tcp_timer+0x44>)
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]
  }
}
 800d092:	bf00      	nop
 800d094:	bf00      	nop
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	20008ba8 	.word	0x20008ba8
 800d0a0:	20008bb8 	.word	0x20008bb8
 800d0a4:	0800d065 	.word	0x0800d065
 800d0a8:	20000110 	.word	0x20000110

0800d0ac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d0b0:	4b0a      	ldr	r3, [pc, #40]	; (800d0dc <tcp_timer_needed+0x30>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10f      	bne.n	800d0d8 <tcp_timer_needed+0x2c>
 800d0b8:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <tcp_timer_needed+0x34>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <tcp_timer_needed+0x1c>
 800d0c0:	4b08      	ldr	r3, [pc, #32]	; (800d0e4 <tcp_timer_needed+0x38>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d007      	beq.n	800d0d8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <tcp_timer_needed+0x30>)
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	4905      	ldr	r1, [pc, #20]	; (800d0e8 <tcp_timer_needed+0x3c>)
 800d0d2:	20fa      	movs	r0, #250	; 0xfa
 800d0d4:	f000 f8cc 	bl	800d270 <sys_timeout>
  }
}
 800d0d8:	bf00      	nop
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	20000110 	.word	0x20000110
 800d0e0:	20008ba8 	.word	0x20008ba8
 800d0e4:	20008bb8 	.word	0x20008bb8
 800d0e8:	0800d065 	.word	0x0800d065

0800d0ec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b086      	sub	sp, #24
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d0f8:	2006      	movs	r0, #6
 800d0fa:	f7f9 fd93 	bl	8006c24 <memp_malloc>
 800d0fe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d109      	bne.n	800d11a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d151      	bne.n	800d1b0 <sys_timeout_abs+0xc4>
 800d10c:	4b2a      	ldr	r3, [pc, #168]	; (800d1b8 <sys_timeout_abs+0xcc>)
 800d10e:	22be      	movs	r2, #190	; 0xbe
 800d110:	492a      	ldr	r1, [pc, #168]	; (800d1bc <sys_timeout_abs+0xd0>)
 800d112:	482b      	ldr	r0, [pc, #172]	; (800d1c0 <sys_timeout_abs+0xd4>)
 800d114:	f002 fdd6 	bl	800fcc4 <iprintf>
    return;
 800d118:	e04a      	b.n	800d1b0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	2200      	movs	r2, #0
 800d11e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	68ba      	ldr	r2, [r7, #8]
 800d124:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d132:	4b24      	ldr	r3, [pc, #144]	; (800d1c4 <sys_timeout_abs+0xd8>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d103      	bne.n	800d142 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d13a:	4a22      	ldr	r2, [pc, #136]	; (800d1c4 <sys_timeout_abs+0xd8>)
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	6013      	str	r3, [r2, #0]
    return;
 800d140:	e037      	b.n	800d1b2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	685a      	ldr	r2, [r3, #4]
 800d146:	4b1f      	ldr	r3, [pc, #124]	; (800d1c4 <sys_timeout_abs+0xd8>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	0fdb      	lsrs	r3, r3, #31
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d007      	beq.n	800d16a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d15a:	4b1a      	ldr	r3, [pc, #104]	; (800d1c4 <sys_timeout_abs+0xd8>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d162:	4a18      	ldr	r2, [pc, #96]	; (800d1c4 <sys_timeout_abs+0xd8>)
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	e023      	b.n	800d1b2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d16a:	4b16      	ldr	r3, [pc, #88]	; (800d1c4 <sys_timeout_abs+0xd8>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	617b      	str	r3, [r7, #20]
 800d170:	e01a      	b.n	800d1a8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00b      	beq.n	800d192 <sys_timeout_abs+0xa6>
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	0fdb      	lsrs	r3, r3, #31
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d007      	beq.n	800d1a2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	601a      	str	r2, [r3, #0]
        break;
 800d1a0:	e007      	b.n	800d1b2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	617b      	str	r3, [r7, #20]
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1e1      	bne.n	800d172 <sys_timeout_abs+0x86>
 800d1ae:	e000      	b.n	800d1b2 <sys_timeout_abs+0xc6>
    return;
 800d1b0:	bf00      	nop
      }
    }
  }
}
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	08012be0 	.word	0x08012be0
 800d1bc:	08012c14 	.word	0x08012c14
 800d1c0:	08012c54 	.word	0x08012c54
 800d1c4:	20000108 	.word	0x20000108

0800d1c8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	4798      	blx	r3

  now = sys_now();
 800d1da:	f7f9 f83f 	bl	800625c <sys_now>
 800d1de:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <lwip_cyclic_timer+0x5c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	0fdb      	lsrs	r3, r3, #31
 800d1f4:	f003 0301 	and.w	r3, r3, #1
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d009      	beq.n	800d212 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	4413      	add	r3, r2
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	4907      	ldr	r1, [pc, #28]	; (800d228 <lwip_cyclic_timer+0x60>)
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7ff ff6e 	bl	800d0ec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d210:	e004      	b.n	800d21c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	4904      	ldr	r1, [pc, #16]	; (800d228 <lwip_cyclic_timer+0x60>)
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f7ff ff68 	bl	800d0ec <sys_timeout_abs>
}
 800d21c:	bf00      	nop
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	2000010c 	.word	0x2000010c
 800d228:	0800d1c9 	.word	0x0800d1c9

0800d22c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d232:	2301      	movs	r3, #1
 800d234:	607b      	str	r3, [r7, #4]
 800d236:	e00e      	b.n	800d256 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d238:	4a0b      	ldr	r2, [pc, #44]	; (800d268 <sys_timeouts_init+0x3c>)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	00db      	lsls	r3, r3, #3
 800d244:	4a08      	ldr	r2, [pc, #32]	; (800d268 <sys_timeouts_init+0x3c>)
 800d246:	4413      	add	r3, r2
 800d248:	461a      	mov	r2, r3
 800d24a:	4908      	ldr	r1, [pc, #32]	; (800d26c <sys_timeouts_init+0x40>)
 800d24c:	f000 f810 	bl	800d270 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	3301      	adds	r3, #1
 800d254:	607b      	str	r3, [r7, #4]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d9ed      	bls.n	800d238 <sys_timeouts_init+0xc>
  }
}
 800d25c:	bf00      	nop
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	080137c0 	.word	0x080137c0
 800d26c:	0800d1c9 	.word	0x0800d1c9

0800d270 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d282:	d306      	bcc.n	800d292 <sys_timeout+0x22>
 800d284:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <sys_timeout+0x40>)
 800d286:	f240 1229 	movw	r2, #297	; 0x129
 800d28a:	490a      	ldr	r1, [pc, #40]	; (800d2b4 <sys_timeout+0x44>)
 800d28c:	480a      	ldr	r0, [pc, #40]	; (800d2b8 <sys_timeout+0x48>)
 800d28e:	f002 fd19 	bl	800fcc4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d292:	f7f8 ffe3 	bl	800625c <sys_now>
 800d296:	4602      	mov	r2, r0
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	4413      	add	r3, r2
 800d29c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	68b9      	ldr	r1, [r7, #8]
 800d2a2:	6978      	ldr	r0, [r7, #20]
 800d2a4:	f7ff ff22 	bl	800d0ec <sys_timeout_abs>
#endif
}
 800d2a8:	bf00      	nop
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	08012be0 	.word	0x08012be0
 800d2b4:	08012c7c 	.word	0x08012c7c
 800d2b8:	08012c54 	.word	0x08012c54

0800d2bc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d2c2:	f7f8 ffcb 	bl	800625c <sys_now>
 800d2c6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	; (800d334 <sys_check_timeouts+0x78>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <sys_check_timeouts+0x1a>
 800d2d2:	f7f9 ffcb 	bl	800726c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <sys_check_timeouts+0x7c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d022      	beq.n	800d328 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	0fdb      	lsrs	r3, r3, #31
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d11a      	bne.n	800d32c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a0f      	ldr	r2, [pc, #60]	; (800d338 <sys_check_timeouts+0x7c>)
 800d2fc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	4a0b      	ldr	r2, [pc, #44]	; (800d33c <sys_check_timeouts+0x80>)
 800d310:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d312:	68b9      	ldr	r1, [r7, #8]
 800d314:	2006      	movs	r0, #6
 800d316:	f7f9 fcd1 	bl	8006cbc <memp_free>
    if (handler != NULL) {
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d0d3      	beq.n	800d2c8 <sys_check_timeouts+0xc>
      handler(arg);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6838      	ldr	r0, [r7, #0]
 800d324:	4798      	blx	r3
  do {
 800d326:	e7cf      	b.n	800d2c8 <sys_check_timeouts+0xc>
      return;
 800d328:	bf00      	nop
 800d32a:	e000      	b.n	800d32e <sys_check_timeouts+0x72>
      return;
 800d32c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	20008ba0 	.word	0x20008ba0
 800d338:	20000108 	.word	0x20000108
 800d33c:	2000010c 	.word	0x2000010c

0800d340 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d344:	f002 fcd6 	bl	800fcf4 <rand>
 800d348:	4603      	mov	r3, r0
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d350:	b29b      	uxth	r3, r3
 800d352:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d356:	b29a      	uxth	r2, r3
 800d358:	4b01      	ldr	r3, [pc, #4]	; (800d360 <udp_init+0x20>)
 800d35a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d35c:	bf00      	nop
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	20000018 	.word	0x20000018

0800d364 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	4613      	mov	r3, r2
 800d370:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d105      	bne.n	800d384 <udp_input_local_match+0x20>
 800d378:	4b27      	ldr	r3, [pc, #156]	; (800d418 <udp_input_local_match+0xb4>)
 800d37a:	2287      	movs	r2, #135	; 0x87
 800d37c:	4927      	ldr	r1, [pc, #156]	; (800d41c <udp_input_local_match+0xb8>)
 800d37e:	4828      	ldr	r0, [pc, #160]	; (800d420 <udp_input_local_match+0xbc>)
 800d380:	f002 fca0 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d105      	bne.n	800d396 <udp_input_local_match+0x32>
 800d38a:	4b23      	ldr	r3, [pc, #140]	; (800d418 <udp_input_local_match+0xb4>)
 800d38c:	2288      	movs	r2, #136	; 0x88
 800d38e:	4925      	ldr	r1, [pc, #148]	; (800d424 <udp_input_local_match+0xc0>)
 800d390:	4823      	ldr	r0, [pc, #140]	; (800d420 <udp_input_local_match+0xbc>)
 800d392:	f002 fc97 	bl	800fcc4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	7a1b      	ldrb	r3, [r3, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00b      	beq.n	800d3b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	7a1a      	ldrb	r2, [r3, #8]
 800d3a2:	4b21      	ldr	r3, [pc, #132]	; (800d428 <udp_input_local_match+0xc4>)
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d001      	beq.n	800d3b6 <udp_input_local_match+0x52>
    return 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e02b      	b.n	800d40e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d3b6:	79fb      	ldrb	r3, [r7, #7]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d018      	beq.n	800d3ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d013      	beq.n	800d3ea <udp_input_local_match+0x86>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00f      	beq.n	800d3ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d3ca:	4b17      	ldr	r3, [pc, #92]	; (800d428 <udp_input_local_match+0xc4>)
 800d3cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d00a      	beq.n	800d3ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	4b13      	ldr	r3, [pc, #76]	; (800d428 <udp_input_local_match+0xc4>)
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	405a      	eors	r2, r3
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d110      	bne.n	800d40c <udp_input_local_match+0xa8>
          return 1;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e00f      	b.n	800d40e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d009      	beq.n	800d408 <udp_input_local_match+0xa4>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d005      	beq.n	800d408 <udp_input_local_match+0xa4>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	4b09      	ldr	r3, [pc, #36]	; (800d428 <udp_input_local_match+0xc4>)
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	429a      	cmp	r2, r3
 800d406:	d101      	bne.n	800d40c <udp_input_local_match+0xa8>
        return 1;
 800d408:	2301      	movs	r3, #1
 800d40a:	e000      	b.n	800d40e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	08012cc8 	.word	0x08012cc8
 800d41c:	08012cf8 	.word	0x08012cf8
 800d420:	08012d1c 	.word	0x08012d1c
 800d424:	08012d44 	.word	0x08012d44
 800d428:	200034a4 	.word	0x200034a4

0800d42c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d42c:	b590      	push	{r4, r7, lr}
 800d42e:	b08d      	sub	sp, #52	; 0x34
 800d430:	af02      	add	r7, sp, #8
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d105      	bne.n	800d44c <udp_input+0x20>
 800d440:	4b7c      	ldr	r3, [pc, #496]	; (800d634 <udp_input+0x208>)
 800d442:	22cf      	movs	r2, #207	; 0xcf
 800d444:	497c      	ldr	r1, [pc, #496]	; (800d638 <udp_input+0x20c>)
 800d446:	487d      	ldr	r0, [pc, #500]	; (800d63c <udp_input+0x210>)
 800d448:	f002 fc3c 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d105      	bne.n	800d45e <udp_input+0x32>
 800d452:	4b78      	ldr	r3, [pc, #480]	; (800d634 <udp_input+0x208>)
 800d454:	22d0      	movs	r2, #208	; 0xd0
 800d456:	497a      	ldr	r1, [pc, #488]	; (800d640 <udp_input+0x214>)
 800d458:	4878      	ldr	r0, [pc, #480]	; (800d63c <udp_input+0x210>)
 800d45a:	f002 fc33 	bl	800fcc4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	895b      	ldrh	r3, [r3, #10]
 800d462:	2b07      	cmp	r3, #7
 800d464:	d803      	bhi.n	800d46e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7fa fa3a 	bl	80078e0 <pbuf_free>
    goto end;
 800d46c:	e0de      	b.n	800d62c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d474:	4b73      	ldr	r3, [pc, #460]	; (800d644 <udp_input+0x218>)
 800d476:	695b      	ldr	r3, [r3, #20]
 800d478:	4a72      	ldr	r2, [pc, #456]	; (800d644 <udp_input+0x218>)
 800d47a:	6812      	ldr	r2, [r2, #0]
 800d47c:	4611      	mov	r1, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f001 fc88 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800d484:	4603      	mov	r3, r0
 800d486:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	881b      	ldrh	r3, [r3, #0]
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f8 ff72 	bl	8006378 <lwip_htons>
 800d494:	4603      	mov	r3, r0
 800d496:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	885b      	ldrh	r3, [r3, #2]
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7f8 ff6a 	bl	8006378 <lwip_htons>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4b4:	4b64      	ldr	r3, [pc, #400]	; (800d648 <udp_input+0x21c>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ba:	e054      	b.n	800d566 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	8a5b      	ldrh	r3, [r3, #18]
 800d4c0:	89fa      	ldrh	r2, [r7, #14]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d14a      	bne.n	800d55c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d4c6:	7cfb      	ldrb	r3, [r7, #19]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6839      	ldr	r1, [r7, #0]
 800d4cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4ce:	f7ff ff49 	bl	800d364 <udp_input_local_match>
 800d4d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d041      	beq.n	800d55c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	7c1b      	ldrb	r3, [r3, #16]
 800d4dc:	f003 0304 	and.w	r3, r3, #4
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d11d      	bne.n	800d520 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d102      	bne.n	800d4f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ec:	61fb      	str	r3, [r7, #28]
 800d4ee:	e017      	b.n	800d520 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d4f0:	7cfb      	ldrb	r3, [r7, #19]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d014      	beq.n	800d520 <udp_input+0xf4>
 800d4f6:	4b53      	ldr	r3, [pc, #332]	; (800d644 <udp_input+0x218>)
 800d4f8:	695b      	ldr	r3, [r3, #20]
 800d4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fe:	d10f      	bne.n	800d520 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	3304      	adds	r3, #4
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d008      	beq.n	800d520 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	3304      	adds	r3, #4
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d101      	bne.n	800d520 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	8a9b      	ldrh	r3, [r3, #20]
 800d524:	8a3a      	ldrh	r2, [r7, #16]
 800d526:	429a      	cmp	r2, r3
 800d528:	d118      	bne.n	800d55c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d005      	beq.n	800d53e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	4b43      	ldr	r3, [pc, #268]	; (800d644 <udp_input+0x218>)
 800d538:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d10e      	bne.n	800d55c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d014      	beq.n	800d56e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	68da      	ldr	r2, [r3, #12]
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d54c:	4b3e      	ldr	r3, [pc, #248]	; (800d648 <udp_input+0x21c>)
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d554:	4a3c      	ldr	r2, [pc, #240]	; (800d648 <udp_input+0x21c>)
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d55a:	e008      	b.n	800d56e <udp_input+0x142>
      }
    }

    prev = pcb;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	627b      	str	r3, [r7, #36]	; 0x24
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1a7      	bne.n	800d4bc <udp_input+0x90>
 800d56c:	e000      	b.n	800d570 <udp_input+0x144>
        break;
 800d56e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	2b00      	cmp	r3, #0
 800d574:	d101      	bne.n	800d57a <udp_input+0x14e>
    pcb = uncon_pcb;
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <udp_input+0x15a>
    for_us = 1;
 800d580:	2301      	movs	r3, #1
 800d582:	76fb      	strb	r3, [r7, #27]
 800d584:	e00a      	b.n	800d59c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	3304      	adds	r3, #4
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	4b2d      	ldr	r3, [pc, #180]	; (800d644 <udp_input+0x218>)
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	429a      	cmp	r2, r3
 800d592:	bf0c      	ite	eq
 800d594:	2301      	moveq	r3, #1
 800d596:	2300      	movne	r3, #0
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d59c:	7efb      	ldrb	r3, [r7, #27]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d041      	beq.n	800d626 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d5a2:	2108      	movs	r1, #8
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7fa f915 	bl	80077d4 <pbuf_remove_header>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00a      	beq.n	800d5c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d5b0:	4b20      	ldr	r3, [pc, #128]	; (800d634 <udp_input+0x208>)
 800d5b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d5b6:	4925      	ldr	r1, [pc, #148]	; (800d64c <udp_input+0x220>)
 800d5b8:	4820      	ldr	r0, [pc, #128]	; (800d63c <udp_input+0x210>)
 800d5ba:	f002 fb83 	bl	800fcc4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7fa f98e 	bl	80078e0 <pbuf_free>
      goto end;
 800d5c4:	e032      	b.n	800d62c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d012      	beq.n	800d5f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00a      	beq.n	800d5ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	699c      	ldr	r4, [r3, #24]
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	69d8      	ldr	r0, [r3, #28]
 800d5dc:	8a3b      	ldrh	r3, [r7, #16]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <udp_input+0x224>)
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d5e8:	e021      	b.n	800d62e <udp_input+0x202>
        pbuf_free(p);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7fa f978 	bl	80078e0 <pbuf_free>
        goto end;
 800d5f0:	e01c      	b.n	800d62c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d5f2:	7cfb      	ldrb	r3, [r7, #19]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d112      	bne.n	800d61e <udp_input+0x1f2>
 800d5f8:	4b12      	ldr	r3, [pc, #72]	; (800d644 <udp_input+0x218>)
 800d5fa:	695b      	ldr	r3, [r3, #20]
 800d5fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d600:	2be0      	cmp	r3, #224	; 0xe0
 800d602:	d00c      	beq.n	800d61e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d604:	4b0f      	ldr	r3, [pc, #60]	; (800d644 <udp_input+0x218>)
 800d606:	899b      	ldrh	r3, [r3, #12]
 800d608:	3308      	adds	r3, #8
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	b21b      	sxth	r3, r3
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7fa f952 	bl	80078ba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d616:	2103      	movs	r1, #3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f001 f89b 	bl	800e754 <icmp_dest_unreach>
      pbuf_free(p);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7fa f95e 	bl	80078e0 <pbuf_free>
  return;
 800d624:	e003      	b.n	800d62e <udp_input+0x202>
    pbuf_free(p);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7fa f95a 	bl	80078e0 <pbuf_free>
  return;
 800d62c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d62e:	372c      	adds	r7, #44	; 0x2c
 800d630:	46bd      	mov	sp, r7
 800d632:	bd90      	pop	{r4, r7, pc}
 800d634:	08012cc8 	.word	0x08012cc8
 800d638:	08012d6c 	.word	0x08012d6c
 800d63c:	08012d1c 	.word	0x08012d1c
 800d640:	08012d84 	.word	0x08012d84
 800d644:	200034a4 	.word	0x200034a4
 800d648:	20008bc0 	.word	0x20008bc0
 800d64c:	08012da0 	.word	0x08012da0
 800d650:	200034b4 	.word	0x200034b4

0800d654 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d01e      	beq.n	800d6a2 <udp_netif_ip_addr_changed+0x4e>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01a      	beq.n	800d6a2 <udp_netif_ip_addr_changed+0x4e>
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d017      	beq.n	800d6a2 <udp_netif_ip_addr_changed+0x4e>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d013      	beq.n	800d6a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d67a:	4b0d      	ldr	r3, [pc, #52]	; (800d6b0 <udp_netif_ip_addr_changed+0x5c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	60fb      	str	r3, [r7, #12]
 800d680:	e00c      	b.n	800d69c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d103      	bne.n	800d696 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1ef      	bne.n	800d682 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d6a2:	bf00      	nop
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20008bc0 	.word	0x20008bc0

0800d6b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d6bc:	4915      	ldr	r1, [pc, #84]	; (800d714 <etharp_free_entry+0x60>)
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	4413      	add	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	440b      	add	r3, r1
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d013      	beq.n	800d6f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d6d0:	4910      	ldr	r1, [pc, #64]	; (800d714 <etharp_free_entry+0x60>)
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	440b      	add	r3, r1
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fa f8fd 	bl	80078e0 <pbuf_free>
    arp_table[i].q = NULL;
 800d6e6:	490b      	ldr	r1, [pc, #44]	; (800d714 <etharp_free_entry+0x60>)
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	4413      	add	r3, r2
 800d6f0:	00db      	lsls	r3, r3, #3
 800d6f2:	440b      	add	r3, r1
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d6f8:	4906      	ldr	r1, [pc, #24]	; (800d714 <etharp_free_entry+0x60>)
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	4413      	add	r3, r2
 800d702:	00db      	lsls	r3, r3, #3
 800d704:	440b      	add	r3, r1
 800d706:	3314      	adds	r3, #20
 800d708:	2200      	movs	r2, #0
 800d70a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d70c:	bf00      	nop
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	20000114 	.word	0x20000114

0800d718 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d71e:	2300      	movs	r3, #0
 800d720:	607b      	str	r3, [r7, #4]
 800d722:	e096      	b.n	800d852 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d724:	494f      	ldr	r1, [pc, #316]	; (800d864 <etharp_tmr+0x14c>)
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	4613      	mov	r3, r2
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	4413      	add	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	440b      	add	r3, r1
 800d732:	3314      	adds	r3, #20
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d738:	78fb      	ldrb	r3, [r7, #3]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f000 8086 	beq.w	800d84c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d740:	4948      	ldr	r1, [pc, #288]	; (800d864 <etharp_tmr+0x14c>)
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	4613      	mov	r3, r2
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	4413      	add	r3, r2
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	440b      	add	r3, r1
 800d74e:	3312      	adds	r3, #18
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	b298      	uxth	r0, r3
 800d756:	4943      	ldr	r1, [pc, #268]	; (800d864 <etharp_tmr+0x14c>)
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	4613      	mov	r3, r2
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	4413      	add	r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	440b      	add	r3, r1
 800d764:	3312      	adds	r3, #18
 800d766:	4602      	mov	r2, r0
 800d768:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d76a:	493e      	ldr	r1, [pc, #248]	; (800d864 <etharp_tmr+0x14c>)
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	4613      	mov	r3, r2
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	4413      	add	r3, r2
 800d774:	00db      	lsls	r3, r3, #3
 800d776:	440b      	add	r3, r1
 800d778:	3312      	adds	r3, #18
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d780:	d215      	bcs.n	800d7ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d782:	4938      	ldr	r1, [pc, #224]	; (800d864 <etharp_tmr+0x14c>)
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	4613      	mov	r3, r2
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	4413      	add	r3, r2
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	440b      	add	r3, r1
 800d790:	3314      	adds	r3, #20
 800d792:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d794:	2b01      	cmp	r3, #1
 800d796:	d10e      	bne.n	800d7b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d798:	4932      	ldr	r1, [pc, #200]	; (800d864 <etharp_tmr+0x14c>)
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	4613      	mov	r3, r2
 800d79e:	005b      	lsls	r3, r3, #1
 800d7a0:	4413      	add	r3, r2
 800d7a2:	00db      	lsls	r3, r3, #3
 800d7a4:	440b      	add	r3, r1
 800d7a6:	3312      	adds	r3, #18
 800d7a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d7aa:	2b04      	cmp	r3, #4
 800d7ac:	d903      	bls.n	800d7b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff ff80 	bl	800d6b4 <etharp_free_entry>
 800d7b4:	e04a      	b.n	800d84c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d7b6:	492b      	ldr	r1, [pc, #172]	; (800d864 <etharp_tmr+0x14c>)
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4413      	add	r3, r2
 800d7c0:	00db      	lsls	r3, r3, #3
 800d7c2:	440b      	add	r3, r1
 800d7c4:	3314      	adds	r3, #20
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d10a      	bne.n	800d7e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d7cc:	4925      	ldr	r1, [pc, #148]	; (800d864 <etharp_tmr+0x14c>)
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	4413      	add	r3, r2
 800d7d6:	00db      	lsls	r3, r3, #3
 800d7d8:	440b      	add	r3, r1
 800d7da:	3314      	adds	r3, #20
 800d7dc:	2204      	movs	r2, #4
 800d7de:	701a      	strb	r2, [r3, #0]
 800d7e0:	e034      	b.n	800d84c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d7e2:	4920      	ldr	r1, [pc, #128]	; (800d864 <etharp_tmr+0x14c>)
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	005b      	lsls	r3, r3, #1
 800d7ea:	4413      	add	r3, r2
 800d7ec:	00db      	lsls	r3, r3, #3
 800d7ee:	440b      	add	r3, r1
 800d7f0:	3314      	adds	r3, #20
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b04      	cmp	r3, #4
 800d7f6:	d10a      	bne.n	800d80e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d7f8:	491a      	ldr	r1, [pc, #104]	; (800d864 <etharp_tmr+0x14c>)
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	4413      	add	r3, r2
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	440b      	add	r3, r1
 800d806:	3314      	adds	r3, #20
 800d808:	2202      	movs	r2, #2
 800d80a:	701a      	strb	r2, [r3, #0]
 800d80c:	e01e      	b.n	800d84c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d80e:	4915      	ldr	r1, [pc, #84]	; (800d864 <etharp_tmr+0x14c>)
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	4613      	mov	r3, r2
 800d814:	005b      	lsls	r3, r3, #1
 800d816:	4413      	add	r3, r2
 800d818:	00db      	lsls	r3, r3, #3
 800d81a:	440b      	add	r3, r1
 800d81c:	3314      	adds	r3, #20
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d113      	bne.n	800d84c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d824:	490f      	ldr	r1, [pc, #60]	; (800d864 <etharp_tmr+0x14c>)
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	4613      	mov	r3, r2
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	4413      	add	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	440b      	add	r3, r1
 800d832:	3308      	adds	r3, #8
 800d834:	6818      	ldr	r0, [r3, #0]
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	4613      	mov	r3, r2
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	4413      	add	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	4a08      	ldr	r2, [pc, #32]	; (800d864 <etharp_tmr+0x14c>)
 800d842:	4413      	add	r3, r2
 800d844:	3304      	adds	r3, #4
 800d846:	4619      	mov	r1, r3
 800d848:	f000 fe6e 	bl	800e528 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3301      	adds	r3, #1
 800d850:	607b      	str	r3, [r7, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b09      	cmp	r3, #9
 800d856:	f77f af65 	ble.w	800d724 <etharp_tmr+0xc>
      }
    }
  }
}
 800d85a:	bf00      	nop
 800d85c:	bf00      	nop
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20000114 	.word	0x20000114

0800d868 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b08a      	sub	sp, #40	; 0x28
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	460b      	mov	r3, r1
 800d872:	607a      	str	r2, [r7, #4]
 800d874:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d876:	230a      	movs	r3, #10
 800d878:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d87a:	230a      	movs	r3, #10
 800d87c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d87e:	230a      	movs	r3, #10
 800d880:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d886:	230a      	movs	r3, #10
 800d888:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	83bb      	strh	r3, [r7, #28]
 800d88e:	2300      	movs	r3, #0
 800d890:	837b      	strh	r3, [r7, #26]
 800d892:	2300      	movs	r3, #0
 800d894:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d896:	2300      	movs	r3, #0
 800d898:	843b      	strh	r3, [r7, #32]
 800d89a:	e0ae      	b.n	800d9fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d89c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8a0:	49a6      	ldr	r1, [pc, #664]	; (800db3c <etharp_find_entry+0x2d4>)
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	4413      	add	r3, r2
 800d8a8:	00db      	lsls	r3, r3, #3
 800d8aa:	440b      	add	r3, r1
 800d8ac:	3314      	adds	r3, #20
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d8b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d8b6:	2b0a      	cmp	r3, #10
 800d8b8:	d105      	bne.n	800d8c6 <etharp_find_entry+0x5e>
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d102      	bne.n	800d8c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d8c0:	8c3b      	ldrh	r3, [r7, #32]
 800d8c2:	847b      	strh	r3, [r7, #34]	; 0x22
 800d8c4:	e095      	b.n	800d9f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	f000 8092 	beq.w	800d9f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d8ce:	7dfb      	ldrb	r3, [r7, #23]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d009      	beq.n	800d8e8 <etharp_find_entry+0x80>
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d806      	bhi.n	800d8e8 <etharp_find_entry+0x80>
 800d8da:	4b99      	ldr	r3, [pc, #612]	; (800db40 <etharp_find_entry+0x2d8>)
 800d8dc:	f240 1223 	movw	r2, #291	; 0x123
 800d8e0:	4998      	ldr	r1, [pc, #608]	; (800db44 <etharp_find_entry+0x2dc>)
 800d8e2:	4899      	ldr	r0, [pc, #612]	; (800db48 <etharp_find_entry+0x2e0>)
 800d8e4:	f002 f9ee 	bl	800fcc4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d020      	beq.n	800d930 <etharp_find_entry+0xc8>
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6819      	ldr	r1, [r3, #0]
 800d8f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8f6:	4891      	ldr	r0, [pc, #580]	; (800db3c <etharp_find_entry+0x2d4>)
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	4413      	add	r3, r2
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	4403      	add	r3, r0
 800d902:	3304      	adds	r3, #4
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4299      	cmp	r1, r3
 800d908:	d112      	bne.n	800d930 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00c      	beq.n	800d92a <etharp_find_entry+0xc2>
 800d910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d914:	4989      	ldr	r1, [pc, #548]	; (800db3c <etharp_find_entry+0x2d4>)
 800d916:	4613      	mov	r3, r2
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	4413      	add	r3, r2
 800d91c:	00db      	lsls	r3, r3, #3
 800d91e:	440b      	add	r3, r1
 800d920:	3308      	adds	r3, #8
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	429a      	cmp	r2, r3
 800d928:	d102      	bne.n	800d930 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d92a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d92e:	e100      	b.n	800db32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d930:	7dfb      	ldrb	r3, [r7, #23]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d140      	bne.n	800d9b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d93a:	4980      	ldr	r1, [pc, #512]	; (800db3c <etharp_find_entry+0x2d4>)
 800d93c:	4613      	mov	r3, r2
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	4413      	add	r3, r2
 800d942:	00db      	lsls	r3, r3, #3
 800d944:	440b      	add	r3, r1
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01a      	beq.n	800d982 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d94c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d950:	497a      	ldr	r1, [pc, #488]	; (800db3c <etharp_find_entry+0x2d4>)
 800d952:	4613      	mov	r3, r2
 800d954:	005b      	lsls	r3, r3, #1
 800d956:	4413      	add	r3, r2
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	440b      	add	r3, r1
 800d95c:	3312      	adds	r3, #18
 800d95e:	881b      	ldrh	r3, [r3, #0]
 800d960:	8bba      	ldrh	r2, [r7, #28]
 800d962:	429a      	cmp	r2, r3
 800d964:	d845      	bhi.n	800d9f2 <etharp_find_entry+0x18a>
            old_queue = i;
 800d966:	8c3b      	ldrh	r3, [r7, #32]
 800d968:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d96a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d96e:	4973      	ldr	r1, [pc, #460]	; (800db3c <etharp_find_entry+0x2d4>)
 800d970:	4613      	mov	r3, r2
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	4413      	add	r3, r2
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	440b      	add	r3, r1
 800d97a:	3312      	adds	r3, #18
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	83bb      	strh	r3, [r7, #28]
 800d980:	e037      	b.n	800d9f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d982:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d986:	496d      	ldr	r1, [pc, #436]	; (800db3c <etharp_find_entry+0x2d4>)
 800d988:	4613      	mov	r3, r2
 800d98a:	005b      	lsls	r3, r3, #1
 800d98c:	4413      	add	r3, r2
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	440b      	add	r3, r1
 800d992:	3312      	adds	r3, #18
 800d994:	881b      	ldrh	r3, [r3, #0]
 800d996:	8b7a      	ldrh	r2, [r7, #26]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d82a      	bhi.n	800d9f2 <etharp_find_entry+0x18a>
            old_pending = i;
 800d99c:	8c3b      	ldrh	r3, [r7, #32]
 800d99e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d9a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9a4:	4965      	ldr	r1, [pc, #404]	; (800db3c <etharp_find_entry+0x2d4>)
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	4413      	add	r3, r2
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	440b      	add	r3, r1
 800d9b0:	3312      	adds	r3, #18
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	837b      	strh	r3, [r7, #26]
 800d9b6:	e01c      	b.n	800d9f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d9b8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d919      	bls.n	800d9f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d9be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9c2:	495e      	ldr	r1, [pc, #376]	; (800db3c <etharp_find_entry+0x2d4>)
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	005b      	lsls	r3, r3, #1
 800d9c8:	4413      	add	r3, r2
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	440b      	add	r3, r1
 800d9ce:	3312      	adds	r3, #18
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	8b3a      	ldrh	r2, [r7, #24]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d80c      	bhi.n	800d9f2 <etharp_find_entry+0x18a>
            old_stable = i;
 800d9d8:	8c3b      	ldrh	r3, [r7, #32]
 800d9da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d9dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9e0:	4956      	ldr	r1, [pc, #344]	; (800db3c <etharp_find_entry+0x2d4>)
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	440b      	add	r3, r1
 800d9ec:	3312      	adds	r3, #18
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9f2:	8c3b      	ldrh	r3, [r7, #32]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	843b      	strh	r3, [r7, #32]
 800d9fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d9fe:	2b09      	cmp	r3, #9
 800da00:	f77f af4c 	ble.w	800d89c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800da04:	7afb      	ldrb	r3, [r7, #11]
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d108      	bne.n	800da20 <etharp_find_entry+0x1b8>
 800da0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800da12:	2b0a      	cmp	r3, #10
 800da14:	d107      	bne.n	800da26 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800da16:	7afb      	ldrb	r3, [r7, #11]
 800da18:	f003 0301 	and.w	r3, r3, #1
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d102      	bne.n	800da26 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800da20:	f04f 33ff 	mov.w	r3, #4294967295
 800da24:	e085      	b.n	800db32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800da26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800da2a:	2b09      	cmp	r3, #9
 800da2c:	dc02      	bgt.n	800da34 <etharp_find_entry+0x1cc>
    i = empty;
 800da2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da30:	843b      	strh	r3, [r7, #32]
 800da32:	e039      	b.n	800daa8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800da34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800da38:	2b09      	cmp	r3, #9
 800da3a:	dc14      	bgt.n	800da66 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800da3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da3e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800da40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da44:	493d      	ldr	r1, [pc, #244]	; (800db3c <etharp_find_entry+0x2d4>)
 800da46:	4613      	mov	r3, r2
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	4413      	add	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	440b      	add	r3, r1
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d018      	beq.n	800da88 <etharp_find_entry+0x220>
 800da56:	4b3a      	ldr	r3, [pc, #232]	; (800db40 <etharp_find_entry+0x2d8>)
 800da58:	f240 126d 	movw	r2, #365	; 0x16d
 800da5c:	493b      	ldr	r1, [pc, #236]	; (800db4c <etharp_find_entry+0x2e4>)
 800da5e:	483a      	ldr	r0, [pc, #232]	; (800db48 <etharp_find_entry+0x2e0>)
 800da60:	f002 f930 	bl	800fcc4 <iprintf>
 800da64:	e010      	b.n	800da88 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800da66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800da6a:	2b09      	cmp	r3, #9
 800da6c:	dc02      	bgt.n	800da74 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800da6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da70:	843b      	strh	r3, [r7, #32]
 800da72:	e009      	b.n	800da88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800da74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800da78:	2b09      	cmp	r3, #9
 800da7a:	dc02      	bgt.n	800da82 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800da7c:	8bfb      	ldrh	r3, [r7, #30]
 800da7e:	843b      	strh	r3, [r7, #32]
 800da80:	e002      	b.n	800da88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800da82:	f04f 33ff 	mov.w	r3, #4294967295
 800da86:	e054      	b.n	800db32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800da88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800da8c:	2b09      	cmp	r3, #9
 800da8e:	dd06      	ble.n	800da9e <etharp_find_entry+0x236>
 800da90:	4b2b      	ldr	r3, [pc, #172]	; (800db40 <etharp_find_entry+0x2d8>)
 800da92:	f240 127f 	movw	r2, #383	; 0x17f
 800da96:	492e      	ldr	r1, [pc, #184]	; (800db50 <etharp_find_entry+0x2e8>)
 800da98:	482b      	ldr	r0, [pc, #172]	; (800db48 <etharp_find_entry+0x2e0>)
 800da9a:	f002 f913 	bl	800fcc4 <iprintf>
    etharp_free_entry(i);
 800da9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff fe06 	bl	800d6b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800daa8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800daac:	2b09      	cmp	r3, #9
 800daae:	dd06      	ble.n	800dabe <etharp_find_entry+0x256>
 800dab0:	4b23      	ldr	r3, [pc, #140]	; (800db40 <etharp_find_entry+0x2d8>)
 800dab2:	f240 1283 	movw	r2, #387	; 0x183
 800dab6:	4926      	ldr	r1, [pc, #152]	; (800db50 <etharp_find_entry+0x2e8>)
 800dab8:	4823      	ldr	r0, [pc, #140]	; (800db48 <etharp_find_entry+0x2e0>)
 800daba:	f002 f903 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dabe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dac2:	491e      	ldr	r1, [pc, #120]	; (800db3c <etharp_find_entry+0x2d4>)
 800dac4:	4613      	mov	r3, r2
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	4413      	add	r3, r2
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	3314      	adds	r3, #20
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d006      	beq.n	800dae4 <etharp_find_entry+0x27c>
 800dad6:	4b1a      	ldr	r3, [pc, #104]	; (800db40 <etharp_find_entry+0x2d8>)
 800dad8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800dadc:	491d      	ldr	r1, [pc, #116]	; (800db54 <etharp_find_entry+0x2ec>)
 800dade:	481a      	ldr	r0, [pc, #104]	; (800db48 <etharp_find_entry+0x2e0>)
 800dae0:	f002 f8f0 	bl	800fcc4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00b      	beq.n	800db02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800daea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6819      	ldr	r1, [r3, #0]
 800daf2:	4812      	ldr	r0, [pc, #72]	; (800db3c <etharp_find_entry+0x2d4>)
 800daf4:	4613      	mov	r3, r2
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	4413      	add	r3, r2
 800dafa:	00db      	lsls	r3, r3, #3
 800dafc:	4403      	add	r3, r0
 800dafe:	3304      	adds	r3, #4
 800db00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800db02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db06:	490d      	ldr	r1, [pc, #52]	; (800db3c <etharp_find_entry+0x2d4>)
 800db08:	4613      	mov	r3, r2
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	4413      	add	r3, r2
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	440b      	add	r3, r1
 800db12:	3312      	adds	r3, #18
 800db14:	2200      	movs	r2, #0
 800db16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800db18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db1c:	4907      	ldr	r1, [pc, #28]	; (800db3c <etharp_find_entry+0x2d4>)
 800db1e:	4613      	mov	r3, r2
 800db20:	005b      	lsls	r3, r3, #1
 800db22:	4413      	add	r3, r2
 800db24:	00db      	lsls	r3, r3, #3
 800db26:	440b      	add	r3, r1
 800db28:	3308      	adds	r3, #8
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800db2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3728      	adds	r7, #40	; 0x28
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20000114 	.word	0x20000114
 800db40:	0801302c 	.word	0x0801302c
 800db44:	08013064 	.word	0x08013064
 800db48:	080130a4 	.word	0x080130a4
 800db4c:	080130cc 	.word	0x080130cc
 800db50:	080130e4 	.word	0x080130e4
 800db54:	080130f8 	.word	0x080130f8

0800db58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b088      	sub	sp, #32
 800db5c:	af02      	add	r7, sp, #8
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
 800db64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800db6c:	2b06      	cmp	r3, #6
 800db6e:	d006      	beq.n	800db7e <etharp_update_arp_entry+0x26>
 800db70:	4b48      	ldr	r3, [pc, #288]	; (800dc94 <etharp_update_arp_entry+0x13c>)
 800db72:	f240 12a9 	movw	r2, #425	; 0x1a9
 800db76:	4948      	ldr	r1, [pc, #288]	; (800dc98 <etharp_update_arp_entry+0x140>)
 800db78:	4848      	ldr	r0, [pc, #288]	; (800dc9c <etharp_update_arp_entry+0x144>)
 800db7a:	f002 f8a3 	bl	800fcc4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d012      	beq.n	800dbaa <etharp_update_arp_entry+0x52>
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00e      	beq.n	800dbaa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68f9      	ldr	r1, [r7, #12]
 800db92:	4618      	mov	r0, r3
 800db94:	f001 f8fe 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800db98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d105      	bne.n	800dbaa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dba6:	2be0      	cmp	r3, #224	; 0xe0
 800dba8:	d102      	bne.n	800dbb0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dbaa:	f06f 030f 	mvn.w	r3, #15
 800dbae:	e06c      	b.n	800dc8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	68b8      	ldr	r0, [r7, #8]
 800dbb8:	f7ff fe56 	bl	800d868 <etharp_find_entry>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dbc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	da02      	bge.n	800dbce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dbc8:	8afb      	ldrh	r3, [r7, #22]
 800dbca:	b25b      	sxtb	r3, r3
 800dbcc:	e05d      	b.n	800dc8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dbce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbd2:	4933      	ldr	r1, [pc, #204]	; (800dca0 <etharp_update_arp_entry+0x148>)
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	4413      	add	r3, r2
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	440b      	add	r3, r1
 800dbde:	3314      	adds	r3, #20
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dbe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbe8:	492d      	ldr	r1, [pc, #180]	; (800dca0 <etharp_update_arp_entry+0x148>)
 800dbea:	4613      	mov	r3, r2
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	4413      	add	r3, r2
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	440b      	add	r3, r1
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dbfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	005b      	lsls	r3, r3, #1
 800dc02:	4413      	add	r3, r2
 800dc04:	00db      	lsls	r3, r3, #3
 800dc06:	3308      	adds	r3, #8
 800dc08:	4a25      	ldr	r2, [pc, #148]	; (800dca0 <etharp_update_arp_entry+0x148>)
 800dc0a:	4413      	add	r3, r2
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	2206      	movs	r2, #6
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f002 f840 	bl	800fc98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dc18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc1c:	4920      	ldr	r1, [pc, #128]	; (800dca0 <etharp_update_arp_entry+0x148>)
 800dc1e:	4613      	mov	r3, r2
 800dc20:	005b      	lsls	r3, r3, #1
 800dc22:	4413      	add	r3, r2
 800dc24:	00db      	lsls	r3, r3, #3
 800dc26:	440b      	add	r3, r1
 800dc28:	3312      	adds	r3, #18
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dc2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc32:	491b      	ldr	r1, [pc, #108]	; (800dca0 <etharp_update_arp_entry+0x148>)
 800dc34:	4613      	mov	r3, r2
 800dc36:	005b      	lsls	r3, r3, #1
 800dc38:	4413      	add	r3, r2
 800dc3a:	00db      	lsls	r3, r3, #3
 800dc3c:	440b      	add	r3, r1
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d021      	beq.n	800dc88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dc44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc48:	4915      	ldr	r1, [pc, #84]	; (800dca0 <etharp_update_arp_entry+0x148>)
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	005b      	lsls	r3, r3, #1
 800dc4e:	4413      	add	r3, r2
 800dc50:	00db      	lsls	r3, r3, #3
 800dc52:	440b      	add	r3, r1
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800dc58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc5c:	4910      	ldr	r1, [pc, #64]	; (800dca0 <etharp_update_arp_entry+0x148>)
 800dc5e:	4613      	mov	r3, r2
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	4413      	add	r3, r2
 800dc64:	00db      	lsls	r3, r3, #3
 800dc66:	440b      	add	r3, r1
 800dc68:	2200      	movs	r2, #0
 800dc6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dc72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6939      	ldr	r1, [r7, #16]
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f001 ff91 	bl	800fba4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800dc82:	6938      	ldr	r0, [r7, #16]
 800dc84:	f7f9 fe2c 	bl	80078e0 <pbuf_free>
  }
  return ERR_OK;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	0801302c 	.word	0x0801302c
 800dc98:	08013124 	.word	0x08013124
 800dc9c:	080130a4 	.word	0x080130a4
 800dca0:	20000114 	.word	0x20000114

0800dca4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dcac:	2300      	movs	r3, #0
 800dcae:	60fb      	str	r3, [r7, #12]
 800dcb0:	e01e      	b.n	800dcf0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dcb2:	4913      	ldr	r1, [pc, #76]	; (800dd00 <etharp_cleanup_netif+0x5c>)
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	4413      	add	r3, r2
 800dcbc:	00db      	lsls	r3, r3, #3
 800dcbe:	440b      	add	r3, r1
 800dcc0:	3314      	adds	r3, #20
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dcc6:	7afb      	ldrb	r3, [r7, #11]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00e      	beq.n	800dcea <etharp_cleanup_netif+0x46>
 800dccc:	490c      	ldr	r1, [pc, #48]	; (800dd00 <etharp_cleanup_netif+0x5c>)
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	005b      	lsls	r3, r3, #1
 800dcd4:	4413      	add	r3, r2
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	440b      	add	r3, r1
 800dcda:	3308      	adds	r3, #8
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d102      	bne.n	800dcea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7ff fce5 	bl	800d6b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	3301      	adds	r3, #1
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b09      	cmp	r3, #9
 800dcf4:	dddd      	ble.n	800dcb2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800dcf6:	bf00      	nop
 800dcf8:	bf00      	nop
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	20000114 	.word	0x20000114

0800dd04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dd04:	b5b0      	push	{r4, r5, r7, lr}
 800dd06:	b08a      	sub	sp, #40	; 0x28
 800dd08:	af04      	add	r7, sp, #16
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d107      	bne.n	800dd24 <etharp_input+0x20>
 800dd14:	4b3d      	ldr	r3, [pc, #244]	; (800de0c <etharp_input+0x108>)
 800dd16:	f240 228a 	movw	r2, #650	; 0x28a
 800dd1a:	493d      	ldr	r1, [pc, #244]	; (800de10 <etharp_input+0x10c>)
 800dd1c:	483d      	ldr	r0, [pc, #244]	; (800de14 <etharp_input+0x110>)
 800dd1e:	f001 ffd1 	bl	800fcc4 <iprintf>
 800dd22:	e06f      	b.n	800de04 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	881b      	ldrh	r3, [r3, #0]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd34:	d10c      	bne.n	800dd50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dd3a:	2b06      	cmp	r3, #6
 800dd3c:	d108      	bne.n	800dd50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dd42:	2b04      	cmp	r3, #4
 800dd44:	d104      	bne.n	800dd50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	885b      	ldrh	r3, [r3, #2]
 800dd4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dd4c:	2b08      	cmp	r3, #8
 800dd4e:	d003      	beq.n	800dd58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7f9 fdc5 	bl	80078e0 <pbuf_free>
    return;
 800dd56:	e055      	b.n	800de04 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	330e      	adds	r3, #14
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	3318      	adds	r3, #24
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	3304      	adds	r3, #4
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d102      	bne.n	800dd78 <etharp_input+0x74>
    for_us = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	75fb      	strb	r3, [r7, #23]
 800dd76:	e009      	b.n	800dd8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	bf0c      	ite	eq
 800dd84:	2301      	moveq	r3, #1
 800dd86:	2300      	movne	r3, #0
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	f103 0208 	add.w	r2, r3, #8
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <etharp_input+0x98>
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e000      	b.n	800dd9e <etharp_input+0x9a>
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	f107 010c 	add.w	r1, r7, #12
 800dda2:	6838      	ldr	r0, [r7, #0]
 800dda4:	f7ff fed8 	bl	800db58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	88db      	ldrh	r3, [r3, #6]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddb2:	d003      	beq.n	800ddbc <etharp_input+0xb8>
 800ddb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb8:	d01e      	beq.n	800ddf8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ddba:	e020      	b.n	800ddfe <etharp_input+0xfa>
      if (for_us) {
 800ddbc:	7dfb      	ldrb	r3, [r7, #23]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d01c      	beq.n	800ddfc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ddd8:	693a      	ldr	r2, [r7, #16]
 800ddda:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dddc:	2102      	movs	r1, #2
 800ddde:	9103      	str	r1, [sp, #12]
 800dde0:	f107 010c 	add.w	r1, r7, #12
 800dde4:	9102      	str	r1, [sp, #8]
 800dde6:	9201      	str	r2, [sp, #4]
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	462b      	mov	r3, r5
 800ddec:	4622      	mov	r2, r4
 800ddee:	4601      	mov	r1, r0
 800ddf0:	6838      	ldr	r0, [r7, #0]
 800ddf2:	f000 faeb 	bl	800e3cc <etharp_raw>
      break;
 800ddf6:	e001      	b.n	800ddfc <etharp_input+0xf8>
      break;
 800ddf8:	bf00      	nop
 800ddfa:	e000      	b.n	800ddfe <etharp_input+0xfa>
      break;
 800ddfc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7f9 fd6e 	bl	80078e0 <pbuf_free>
}
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bdb0      	pop	{r4, r5, r7, pc}
 800de0a:	bf00      	nop
 800de0c:	0801302c 	.word	0x0801302c
 800de10:	0801317c 	.word	0x0801317c
 800de14:	080130a4 	.word	0x080130a4

0800de18 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af02      	add	r7, sp, #8
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	4613      	mov	r3, r2
 800de24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800de26:	79fa      	ldrb	r2, [r7, #7]
 800de28:	4944      	ldr	r1, [pc, #272]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800de2a:	4613      	mov	r3, r2
 800de2c:	005b      	lsls	r3, r3, #1
 800de2e:	4413      	add	r3, r2
 800de30:	00db      	lsls	r3, r3, #3
 800de32:	440b      	add	r3, r1
 800de34:	3314      	adds	r3, #20
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d806      	bhi.n	800de4a <etharp_output_to_arp_index+0x32>
 800de3c:	4b40      	ldr	r3, [pc, #256]	; (800df40 <etharp_output_to_arp_index+0x128>)
 800de3e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800de42:	4940      	ldr	r1, [pc, #256]	; (800df44 <etharp_output_to_arp_index+0x12c>)
 800de44:	4840      	ldr	r0, [pc, #256]	; (800df48 <etharp_output_to_arp_index+0x130>)
 800de46:	f001 ff3d 	bl	800fcc4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de4a:	79fa      	ldrb	r2, [r7, #7]
 800de4c:	493b      	ldr	r1, [pc, #236]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800de4e:	4613      	mov	r3, r2
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	4413      	add	r3, r2
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	440b      	add	r3, r1
 800de58:	3314      	adds	r3, #20
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d153      	bne.n	800df08 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800de60:	79fa      	ldrb	r2, [r7, #7]
 800de62:	4936      	ldr	r1, [pc, #216]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800de64:	4613      	mov	r3, r2
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	4413      	add	r3, r2
 800de6a:	00db      	lsls	r3, r3, #3
 800de6c:	440b      	add	r3, r1
 800de6e:	3312      	adds	r3, #18
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800de76:	d919      	bls.n	800deac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800de78:	79fa      	ldrb	r2, [r7, #7]
 800de7a:	4613      	mov	r3, r2
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	4413      	add	r3, r2
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	4a2e      	ldr	r2, [pc, #184]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800de84:	4413      	add	r3, r2
 800de86:	3304      	adds	r3, #4
 800de88:	4619      	mov	r1, r3
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f000 fb4c 	bl	800e528 <etharp_request>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d138      	bne.n	800df08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de96:	79fa      	ldrb	r2, [r7, #7]
 800de98:	4928      	ldr	r1, [pc, #160]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800de9a:	4613      	mov	r3, r2
 800de9c:	005b      	lsls	r3, r3, #1
 800de9e:	4413      	add	r3, r2
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	440b      	add	r3, r1
 800dea4:	3314      	adds	r3, #20
 800dea6:	2203      	movs	r2, #3
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	e02d      	b.n	800df08 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800deac:	79fa      	ldrb	r2, [r7, #7]
 800deae:	4923      	ldr	r1, [pc, #140]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800deb0:	4613      	mov	r3, r2
 800deb2:	005b      	lsls	r3, r3, #1
 800deb4:	4413      	add	r3, r2
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	440b      	add	r3, r1
 800deba:	3312      	adds	r3, #18
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dec2:	d321      	bcc.n	800df08 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dec4:	79fa      	ldrb	r2, [r7, #7]
 800dec6:	4613      	mov	r3, r2
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	4413      	add	r3, r2
 800decc:	00db      	lsls	r3, r3, #3
 800dece:	4a1b      	ldr	r2, [pc, #108]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800ded0:	4413      	add	r3, r2
 800ded2:	1d19      	adds	r1, r3, #4
 800ded4:	79fa      	ldrb	r2, [r7, #7]
 800ded6:	4613      	mov	r3, r2
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	4413      	add	r3, r2
 800dedc:	00db      	lsls	r3, r3, #3
 800dede:	3308      	adds	r3, #8
 800dee0:	4a16      	ldr	r2, [pc, #88]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800dee2:	4413      	add	r3, r2
 800dee4:	3304      	adds	r3, #4
 800dee6:	461a      	mov	r2, r3
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f000 fafb 	bl	800e4e4 <etharp_request_dst>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d109      	bne.n	800df08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800def4:	79fa      	ldrb	r2, [r7, #7]
 800def6:	4911      	ldr	r1, [pc, #68]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800def8:	4613      	mov	r3, r2
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	4413      	add	r3, r2
 800defe:	00db      	lsls	r3, r3, #3
 800df00:	440b      	add	r3, r1
 800df02:	3314      	adds	r3, #20
 800df04:	2203      	movs	r2, #3
 800df06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800df0e:	79fa      	ldrb	r2, [r7, #7]
 800df10:	4613      	mov	r3, r2
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	4413      	add	r3, r2
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	3308      	adds	r3, #8
 800df1a:	4a08      	ldr	r2, [pc, #32]	; (800df3c <etharp_output_to_arp_index+0x124>)
 800df1c:	4413      	add	r3, r2
 800df1e:	3304      	adds	r3, #4
 800df20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df24:	9200      	str	r2, [sp, #0]
 800df26:	460a      	mov	r2, r1
 800df28:	68b9      	ldr	r1, [r7, #8]
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f001 fe3a 	bl	800fba4 <ethernet_output>
 800df30:	4603      	mov	r3, r0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	20000114 	.word	0x20000114
 800df40:	0801302c 	.word	0x0801302c
 800df44:	0801319c 	.word	0x0801319c
 800df48:	080130a4 	.word	0x080130a4

0800df4c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	; 0x28
 800df50:	af02      	add	r7, sp, #8
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d106      	bne.n	800df70 <etharp_output+0x24>
 800df62:	4b73      	ldr	r3, [pc, #460]	; (800e130 <etharp_output+0x1e4>)
 800df64:	f240 321e 	movw	r2, #798	; 0x31e
 800df68:	4972      	ldr	r1, [pc, #456]	; (800e134 <etharp_output+0x1e8>)
 800df6a:	4873      	ldr	r0, [pc, #460]	; (800e138 <etharp_output+0x1ec>)
 800df6c:	f001 feaa 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <etharp_output+0x38>
 800df76:	4b6e      	ldr	r3, [pc, #440]	; (800e130 <etharp_output+0x1e4>)
 800df78:	f240 321f 	movw	r2, #799	; 0x31f
 800df7c:	496f      	ldr	r1, [pc, #444]	; (800e13c <etharp_output+0x1f0>)
 800df7e:	486e      	ldr	r0, [pc, #440]	; (800e138 <etharp_output+0x1ec>)
 800df80:	f001 fea0 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d106      	bne.n	800df98 <etharp_output+0x4c>
 800df8a:	4b69      	ldr	r3, [pc, #420]	; (800e130 <etharp_output+0x1e4>)
 800df8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800df90:	496b      	ldr	r1, [pc, #428]	; (800e140 <etharp_output+0x1f4>)
 800df92:	4869      	ldr	r0, [pc, #420]	; (800e138 <etharp_output+0x1ec>)
 800df94:	f001 fe96 	bl	800fcc4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68f9      	ldr	r1, [r7, #12]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 fef8 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dfaa:	4b66      	ldr	r3, [pc, #408]	; (800e144 <etharp_output+0x1f8>)
 800dfac:	61fb      	str	r3, [r7, #28]
 800dfae:	e0af      	b.n	800e110 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfb8:	2be0      	cmp	r3, #224	; 0xe0
 800dfba:	d118      	bne.n	800dfee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dfc4:	235e      	movs	r3, #94	; 0x5e
 800dfc6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	3302      	adds	r3, #2
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3303      	adds	r3, #3
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dfe6:	f107 0310 	add.w	r3, r7, #16
 800dfea:	61fb      	str	r3, [r7, #28]
 800dfec:	e090      	b.n	800e110 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	3304      	adds	r3, #4
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	405a      	eors	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	3308      	adds	r3, #8
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4013      	ands	r3, r2
 800e002:	2b00      	cmp	r3, #0
 800e004:	d012      	beq.n	800e02c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e00c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e010:	4293      	cmp	r3, r2
 800e012:	d00b      	beq.n	800e02c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	330c      	adds	r3, #12
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d003      	beq.n	800e026 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	330c      	adds	r3, #12
 800e022:	61bb      	str	r3, [r7, #24]
 800e024:	e002      	b.n	800e02c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e026:	f06f 0303 	mvn.w	r3, #3
 800e02a:	e07d      	b.n	800e128 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e02c:	4b46      	ldr	r3, [pc, #280]	; (800e148 <etharp_output+0x1fc>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	4619      	mov	r1, r3
 800e032:	4a46      	ldr	r2, [pc, #280]	; (800e14c <etharp_output+0x200>)
 800e034:	460b      	mov	r3, r1
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	440b      	add	r3, r1
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	4413      	add	r3, r2
 800e03e:	3314      	adds	r3, #20
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d925      	bls.n	800e092 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e046:	4b40      	ldr	r3, [pc, #256]	; (800e148 <etharp_output+0x1fc>)
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	4619      	mov	r1, r3
 800e04c:	4a3f      	ldr	r2, [pc, #252]	; (800e14c <etharp_output+0x200>)
 800e04e:	460b      	mov	r3, r1
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	440b      	add	r3, r1
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	4413      	add	r3, r2
 800e058:	3308      	adds	r3, #8
 800e05a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d117      	bne.n	800e092 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	4b38      	ldr	r3, [pc, #224]	; (800e148 <etharp_output+0x1fc>)
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	4618      	mov	r0, r3
 800e06c:	4937      	ldr	r1, [pc, #220]	; (800e14c <etharp_output+0x200>)
 800e06e:	4603      	mov	r3, r0
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4403      	add	r3, r0
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	440b      	add	r3, r1
 800e078:	3304      	adds	r3, #4
 800e07a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d108      	bne.n	800e092 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e080:	4b31      	ldr	r3, [pc, #196]	; (800e148 <etharp_output+0x1fc>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	461a      	mov	r2, r3
 800e086:	68b9      	ldr	r1, [r7, #8]
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f7ff fec5 	bl	800de18 <etharp_output_to_arp_index>
 800e08e:	4603      	mov	r3, r0
 800e090:	e04a      	b.n	800e128 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e092:	2300      	movs	r3, #0
 800e094:	75fb      	strb	r3, [r7, #23]
 800e096:	e031      	b.n	800e0fc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e098:	7dfa      	ldrb	r2, [r7, #23]
 800e09a:	492c      	ldr	r1, [pc, #176]	; (800e14c <etharp_output+0x200>)
 800e09c:	4613      	mov	r3, r2
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	4413      	add	r3, r2
 800e0a2:	00db      	lsls	r3, r3, #3
 800e0a4:	440b      	add	r3, r1
 800e0a6:	3314      	adds	r3, #20
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d923      	bls.n	800e0f6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e0ae:	7dfa      	ldrb	r2, [r7, #23]
 800e0b0:	4926      	ldr	r1, [pc, #152]	; (800e14c <etharp_output+0x200>)
 800e0b2:	4613      	mov	r3, r2
 800e0b4:	005b      	lsls	r3, r3, #1
 800e0b6:	4413      	add	r3, r2
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	440b      	add	r3, r1
 800e0bc:	3308      	adds	r3, #8
 800e0be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d117      	bne.n	800e0f6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	6819      	ldr	r1, [r3, #0]
 800e0ca:	7dfa      	ldrb	r2, [r7, #23]
 800e0cc:	481f      	ldr	r0, [pc, #124]	; (800e14c <etharp_output+0x200>)
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	4413      	add	r3, r2
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	4403      	add	r3, r0
 800e0d8:	3304      	adds	r3, #4
 800e0da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e0dc:	4299      	cmp	r1, r3
 800e0de:	d10a      	bne.n	800e0f6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e0e0:	4a19      	ldr	r2, [pc, #100]	; (800e148 <etharp_output+0x1fc>)
 800e0e2:	7dfb      	ldrb	r3, [r7, #23]
 800e0e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e0e6:	7dfb      	ldrb	r3, [r7, #23]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	68b9      	ldr	r1, [r7, #8]
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f7ff fe93 	bl	800de18 <etharp_output_to_arp_index>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	e018      	b.n	800e128 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	75fb      	strb	r3, [r7, #23]
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
 800e0fe:	2b09      	cmp	r3, #9
 800e100:	d9ca      	bls.n	800e098 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	69b9      	ldr	r1, [r7, #24]
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f000 f822 	bl	800e150 <etharp_query>
 800e10c:	4603      	mov	r3, r0
 800e10e:	e00b      	b.n	800e128 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	68b9      	ldr	r1, [r7, #8]
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f001 fd3f 	bl	800fba4 <ethernet_output>
 800e126:	4603      	mov	r3, r0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	0801302c 	.word	0x0801302c
 800e134:	0801317c 	.word	0x0801317c
 800e138:	080130a4 	.word	0x080130a4
 800e13c:	080131cc 	.word	0x080131cc
 800e140:	0801316c 	.word	0x0801316c
 800e144:	080137dc 	.word	0x080137dc
 800e148:	20000204 	.word	0x20000204
 800e14c:	20000114 	.word	0x20000114

0800e150 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b08c      	sub	sp, #48	; 0x30
 800e154:	af02      	add	r7, sp, #8
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	3326      	adds	r3, #38	; 0x26
 800e160:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e162:	23ff      	movs	r3, #255	; 0xff
 800e164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68f9      	ldr	r1, [r7, #12]
 800e172:	4618      	mov	r0, r3
 800e174:	f000 fe0e 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10c      	bne.n	800e198 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e186:	2be0      	cmp	r3, #224	; 0xe0
 800e188:	d006      	beq.n	800e198 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d003      	beq.n	800e198 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e198:	f06f 030f 	mvn.w	r3, #15
 800e19c:	e101      	b.n	800e3a2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	68b8      	ldr	r0, [r7, #8]
 800e1a4:	f7ff fb60 	bl	800d868 <etharp_find_entry>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e1ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	da02      	bge.n	800e1ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e1b4:	8a7b      	ldrh	r3, [r7, #18]
 800e1b6:	b25b      	sxtb	r3, r3
 800e1b8:	e0f3      	b.n	800e3a2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e1ba:	8a7b      	ldrh	r3, [r7, #18]
 800e1bc:	2b7e      	cmp	r3, #126	; 0x7e
 800e1be:	d906      	bls.n	800e1ce <etharp_query+0x7e>
 800e1c0:	4b7a      	ldr	r3, [pc, #488]	; (800e3ac <etharp_query+0x25c>)
 800e1c2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e1c6:	497a      	ldr	r1, [pc, #488]	; (800e3b0 <etharp_query+0x260>)
 800e1c8:	487a      	ldr	r0, [pc, #488]	; (800e3b4 <etharp_query+0x264>)
 800e1ca:	f001 fd7b 	bl	800fcc4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e1ce:	8a7b      	ldrh	r3, [r7, #18]
 800e1d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e1d2:	7c7a      	ldrb	r2, [r7, #17]
 800e1d4:	4978      	ldr	r1, [pc, #480]	; (800e3b8 <etharp_query+0x268>)
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	4413      	add	r3, r2
 800e1dc:	00db      	lsls	r3, r3, #3
 800e1de:	440b      	add	r3, r1
 800e1e0:	3314      	adds	r3, #20
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d115      	bne.n	800e214 <etharp_query+0xc4>
    is_new_entry = 1;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e1ec:	7c7a      	ldrb	r2, [r7, #17]
 800e1ee:	4972      	ldr	r1, [pc, #456]	; (800e3b8 <etharp_query+0x268>)
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	4413      	add	r3, r2
 800e1f6:	00db      	lsls	r3, r3, #3
 800e1f8:	440b      	add	r3, r1
 800e1fa:	3314      	adds	r3, #20
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e200:	7c7a      	ldrb	r2, [r7, #17]
 800e202:	496d      	ldr	r1, [pc, #436]	; (800e3b8 <etharp_query+0x268>)
 800e204:	4613      	mov	r3, r2
 800e206:	005b      	lsls	r3, r3, #1
 800e208:	4413      	add	r3, r2
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	440b      	add	r3, r1
 800e20e:	3308      	adds	r3, #8
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e214:	7c7a      	ldrb	r2, [r7, #17]
 800e216:	4968      	ldr	r1, [pc, #416]	; (800e3b8 <etharp_query+0x268>)
 800e218:	4613      	mov	r3, r2
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	4413      	add	r3, r2
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	440b      	add	r3, r1
 800e222:	3314      	adds	r3, #20
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	2b01      	cmp	r3, #1
 800e228:	d011      	beq.n	800e24e <etharp_query+0xfe>
 800e22a:	7c7a      	ldrb	r2, [r7, #17]
 800e22c:	4962      	ldr	r1, [pc, #392]	; (800e3b8 <etharp_query+0x268>)
 800e22e:	4613      	mov	r3, r2
 800e230:	005b      	lsls	r3, r3, #1
 800e232:	4413      	add	r3, r2
 800e234:	00db      	lsls	r3, r3, #3
 800e236:	440b      	add	r3, r1
 800e238:	3314      	adds	r3, #20
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d806      	bhi.n	800e24e <etharp_query+0xfe>
 800e240:	4b5a      	ldr	r3, [pc, #360]	; (800e3ac <etharp_query+0x25c>)
 800e242:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e246:	495d      	ldr	r1, [pc, #372]	; (800e3bc <etharp_query+0x26c>)
 800e248:	485a      	ldr	r0, [pc, #360]	; (800e3b4 <etharp_query+0x264>)
 800e24a:	f001 fd3b 	bl	800fcc4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d102      	bne.n	800e25a <etharp_query+0x10a>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10c      	bne.n	800e274 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e25a:	68b9      	ldr	r1, [r7, #8]
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f000 f963 	bl	800e528 <etharp_request>
 800e262:	4603      	mov	r3, r0
 800e264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d102      	bne.n	800e274 <etharp_query+0x124>
      return result;
 800e26e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e272:	e096      	b.n	800e3a2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d106      	bne.n	800e288 <etharp_query+0x138>
 800e27a:	4b4c      	ldr	r3, [pc, #304]	; (800e3ac <etharp_query+0x25c>)
 800e27c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e280:	494f      	ldr	r1, [pc, #316]	; (800e3c0 <etharp_query+0x270>)
 800e282:	484c      	ldr	r0, [pc, #304]	; (800e3b4 <etharp_query+0x264>)
 800e284:	f001 fd1e 	bl	800fcc4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e288:	7c7a      	ldrb	r2, [r7, #17]
 800e28a:	494b      	ldr	r1, [pc, #300]	; (800e3b8 <etharp_query+0x268>)
 800e28c:	4613      	mov	r3, r2
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	4413      	add	r3, r2
 800e292:	00db      	lsls	r3, r3, #3
 800e294:	440b      	add	r3, r1
 800e296:	3314      	adds	r3, #20
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d917      	bls.n	800e2ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e29e:	4a49      	ldr	r2, [pc, #292]	; (800e3c4 <etharp_query+0x274>)
 800e2a0:	7c7b      	ldrb	r3, [r7, #17]
 800e2a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e2a4:	7c7a      	ldrb	r2, [r7, #17]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	4413      	add	r3, r2
 800e2ac:	00db      	lsls	r3, r3, #3
 800e2ae:	3308      	adds	r3, #8
 800e2b0:	4a41      	ldr	r2, [pc, #260]	; (800e3b8 <etharp_query+0x268>)
 800e2b2:	4413      	add	r3, r2
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2ba:	9200      	str	r2, [sp, #0]
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f001 fc6f 	bl	800fba4 <ethernet_output>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2cc:	e067      	b.n	800e39e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e2ce:	7c7a      	ldrb	r2, [r7, #17]
 800e2d0:	4939      	ldr	r1, [pc, #228]	; (800e3b8 <etharp_query+0x268>)
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	4413      	add	r3, r2
 800e2d8:	00db      	lsls	r3, r3, #3
 800e2da:	440b      	add	r3, r1
 800e2dc:	3314      	adds	r3, #20
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d15c      	bne.n	800e39e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e2ec:	e01c      	b.n	800e328 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	895a      	ldrh	r2, [r3, #10]
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	891b      	ldrh	r3, [r3, #8]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d10a      	bne.n	800e310 <etharp_query+0x1c0>
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d006      	beq.n	800e310 <etharp_query+0x1c0>
 800e302:	4b2a      	ldr	r3, [pc, #168]	; (800e3ac <etharp_query+0x25c>)
 800e304:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e308:	492f      	ldr	r1, [pc, #188]	; (800e3c8 <etharp_query+0x278>)
 800e30a:	482a      	ldr	r0, [pc, #168]	; (800e3b4 <etharp_query+0x264>)
 800e30c:	f001 fcda 	bl	800fcc4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	7b1b      	ldrb	r3, [r3, #12]
 800e314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <etharp_query+0x1d2>
        copy_needed = 1;
 800e31c:	2301      	movs	r3, #1
 800e31e:	61bb      	str	r3, [r7, #24]
        break;
 800e320:	e005      	b.n	800e32e <etharp_query+0x1de>
      }
      p = p->next;
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1df      	bne.n	800e2ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d007      	beq.n	800e344 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e33a:	200e      	movs	r0, #14
 800e33c:	f7f9 fd2c 	bl	8007d98 <pbuf_clone>
 800e340:	61f8      	str	r0, [r7, #28]
 800e342:	e004      	b.n	800e34e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e348:	69f8      	ldr	r0, [r7, #28]
 800e34a:	f7f9 fb69 	bl	8007a20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d021      	beq.n	800e398 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e354:	7c7a      	ldrb	r2, [r7, #17]
 800e356:	4918      	ldr	r1, [pc, #96]	; (800e3b8 <etharp_query+0x268>)
 800e358:	4613      	mov	r3, r2
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	4413      	add	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	440b      	add	r3, r1
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d00a      	beq.n	800e37e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e368:	7c7a      	ldrb	r2, [r7, #17]
 800e36a:	4913      	ldr	r1, [pc, #76]	; (800e3b8 <etharp_query+0x268>)
 800e36c:	4613      	mov	r3, r2
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	4413      	add	r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	440b      	add	r3, r1
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4618      	mov	r0, r3
 800e37a:	f7f9 fab1 	bl	80078e0 <pbuf_free>
      }
      arp_table[i].q = p;
 800e37e:	7c7a      	ldrb	r2, [r7, #17]
 800e380:	490d      	ldr	r1, [pc, #52]	; (800e3b8 <etharp_query+0x268>)
 800e382:	4613      	mov	r3, r2
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	4413      	add	r3, r2
 800e388:	00db      	lsls	r3, r3, #3
 800e38a:	440b      	add	r3, r1
 800e38c:	69fa      	ldr	r2, [r7, #28]
 800e38e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e390:	2300      	movs	r3, #0
 800e392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e396:	e002      	b.n	800e39e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e398:	23ff      	movs	r3, #255	; 0xff
 800e39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e39e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3728      	adds	r7, #40	; 0x28
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	0801302c 	.word	0x0801302c
 800e3b0:	080131d8 	.word	0x080131d8
 800e3b4:	080130a4 	.word	0x080130a4
 800e3b8:	20000114 	.word	0x20000114
 800e3bc:	080131e8 	.word	0x080131e8
 800e3c0:	080131cc 	.word	0x080131cc
 800e3c4:	20000204 	.word	0x20000204
 800e3c8:	08013210 	.word	0x08013210

0800e3cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08a      	sub	sp, #40	; 0x28
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
 800e3d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d106      	bne.n	800e3f2 <etharp_raw+0x26>
 800e3e4:	4b3a      	ldr	r3, [pc, #232]	; (800e4d0 <etharp_raw+0x104>)
 800e3e6:	f240 4257 	movw	r2, #1111	; 0x457
 800e3ea:	493a      	ldr	r1, [pc, #232]	; (800e4d4 <etharp_raw+0x108>)
 800e3ec:	483a      	ldr	r0, [pc, #232]	; (800e4d8 <etharp_raw+0x10c>)
 800e3ee:	f001 fc69 	bl	800fcc4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e3f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3f6:	211c      	movs	r1, #28
 800e3f8:	200e      	movs	r0, #14
 800e3fa:	f7f8 ff8d 	bl	8007318 <pbuf_alloc>
 800e3fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d102      	bne.n	800e40c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e406:	f04f 33ff 	mov.w	r3, #4294967295
 800e40a:	e05d      	b.n	800e4c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	895b      	ldrh	r3, [r3, #10]
 800e410:	2b1b      	cmp	r3, #27
 800e412:	d806      	bhi.n	800e422 <etharp_raw+0x56>
 800e414:	4b2e      	ldr	r3, [pc, #184]	; (800e4d0 <etharp_raw+0x104>)
 800e416:	f240 4262 	movw	r2, #1122	; 0x462
 800e41a:	4930      	ldr	r1, [pc, #192]	; (800e4dc <etharp_raw+0x110>)
 800e41c:	482e      	ldr	r0, [pc, #184]	; (800e4d8 <etharp_raw+0x10c>)
 800e41e:	f001 fc51 	bl	800fcc4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e428:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f7 ffa4 	bl	8006378 <lwip_htons>
 800e430:	4603      	mov	r3, r0
 800e432:	461a      	mov	r2, r3
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e43e:	2b06      	cmp	r3, #6
 800e440:	d006      	beq.n	800e450 <etharp_raw+0x84>
 800e442:	4b23      	ldr	r3, [pc, #140]	; (800e4d0 <etharp_raw+0x104>)
 800e444:	f240 4269 	movw	r2, #1129	; 0x469
 800e448:	4925      	ldr	r1, [pc, #148]	; (800e4e0 <etharp_raw+0x114>)
 800e44a:	4823      	ldr	r0, [pc, #140]	; (800e4d8 <etharp_raw+0x10c>)
 800e44c:	f001 fc3a 	bl	800fcc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	3308      	adds	r3, #8
 800e454:	2206      	movs	r2, #6
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	4618      	mov	r0, r3
 800e45a:	f001 fc1d 	bl	800fc98 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	3312      	adds	r3, #18
 800e462:	2206      	movs	r2, #6
 800e464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e466:	4618      	mov	r0, r3
 800e468:	f001 fc16 	bl	800fc98 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	330e      	adds	r3, #14
 800e470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e472:	6812      	ldr	r2, [r2, #0]
 800e474:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	3318      	adds	r3, #24
 800e47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	2200      	movs	r2, #0
 800e484:	701a      	strb	r2, [r3, #0]
 800e486:	2200      	movs	r2, #0
 800e488:	f042 0201 	orr.w	r2, r2, #1
 800e48c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	2200      	movs	r2, #0
 800e492:	f042 0208 	orr.w	r2, r2, #8
 800e496:	709a      	strb	r2, [r3, #2]
 800e498:	2200      	movs	r2, #0
 800e49a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	2206      	movs	r2, #6
 800e4a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2204      	movs	r2, #4
 800e4a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e4a8:	f640 0306 	movw	r3, #2054	; 0x806
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	69b9      	ldr	r1, [r7, #24]
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f001 fb75 	bl	800fba4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e4ba:	69b8      	ldr	r0, [r7, #24]
 800e4bc:	f7f9 fa10 	bl	80078e0 <pbuf_free>
  p = NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e4c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	0801302c 	.word	0x0801302c
 800e4d4:	0801317c 	.word	0x0801317c
 800e4d8:	080130a4 	.word	0x080130a4
 800e4dc:	0801322c 	.word	0x0801322c
 800e4e0:	08013260 	.word	0x08013260

0800e4e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b088      	sub	sp, #32
 800e4e8:	af04      	add	r7, sp, #16
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e500:	2201      	movs	r2, #1
 800e502:	9203      	str	r2, [sp, #12]
 800e504:	68ba      	ldr	r2, [r7, #8]
 800e506:	9202      	str	r2, [sp, #8]
 800e508:	4a06      	ldr	r2, [pc, #24]	; (800e524 <etharp_request_dst+0x40>)
 800e50a:	9201      	str	r2, [sp, #4]
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	4603      	mov	r3, r0
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f7ff ff5a 	bl	800e3cc <etharp_raw>
 800e518:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	080137e4 	.word	0x080137e4

0800e528 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e532:	4a05      	ldr	r2, [pc, #20]	; (800e548 <etharp_request+0x20>)
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7ff ffd4 	bl	800e4e4 <etharp_request_dst>
 800e53c:	4603      	mov	r3, r0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	080137dc 	.word	0x080137dc

0800e54c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08e      	sub	sp, #56	; 0x38
 800e550:	af04      	add	r7, sp, #16
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e556:	4b79      	ldr	r3, [pc, #484]	; (800e73c <icmp_input+0x1f0>)
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 030f 	and.w	r3, r3, #15
 800e564:	b2db      	uxtb	r3, r3
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e56c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e56e:	2b13      	cmp	r3, #19
 800e570:	f240 80cd 	bls.w	800e70e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	895b      	ldrh	r3, [r3, #10]
 800e578:	2b03      	cmp	r3, #3
 800e57a:	f240 80ca 	bls.w	800e712 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e588:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 80b7 	beq.w	800e700 <icmp_input+0x1b4>
 800e592:	2b08      	cmp	r3, #8
 800e594:	f040 80b7 	bne.w	800e706 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e598:	4b69      	ldr	r3, [pc, #420]	; (800e740 <icmp_input+0x1f4>)
 800e59a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e59c:	4b67      	ldr	r3, [pc, #412]	; (800e73c <icmp_input+0x1f0>)
 800e59e:	695b      	ldr	r3, [r3, #20]
 800e5a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5a4:	2be0      	cmp	r3, #224	; 0xe0
 800e5a6:	f000 80bb 	beq.w	800e720 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e5aa:	4b64      	ldr	r3, [pc, #400]	; (800e73c <icmp_input+0x1f0>)
 800e5ac:	695b      	ldr	r3, [r3, #20]
 800e5ae:	4a63      	ldr	r2, [pc, #396]	; (800e73c <icmp_input+0x1f0>)
 800e5b0:	6812      	ldr	r2, [r2, #0]
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f000 fbed 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f040 80b1 	bne.w	800e724 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	891b      	ldrh	r3, [r3, #8]
 800e5c6:	2b07      	cmp	r3, #7
 800e5c8:	f240 80a5 	bls.w	800e716 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e5cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5ce:	330e      	adds	r3, #14
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7f9 f8ee 	bl	80077b4 <pbuf_add_header>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d04b      	beq.n	800e676 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	891a      	ldrh	r2, [r3, #8]
 800e5e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5e4:	4413      	add	r3, r2
 800e5e6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	891b      	ldrh	r3, [r3, #8]
 800e5ec:	8b7a      	ldrh	r2, [r7, #26]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	f0c0 809a 	bcc.w	800e728 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e5f4:	8b7b      	ldrh	r3, [r7, #26]
 800e5f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	200e      	movs	r0, #14
 800e5fe:	f7f8 fe8b 	bl	8007318 <pbuf_alloc>
 800e602:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 8090 	beq.w	800e72c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	895b      	ldrh	r3, [r3, #10]
 800e610:	461a      	mov	r2, r3
 800e612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e614:	3308      	adds	r3, #8
 800e616:	429a      	cmp	r2, r3
 800e618:	d203      	bcs.n	800e622 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e61a:	6978      	ldr	r0, [r7, #20]
 800e61c:	f7f9 f960 	bl	80078e0 <pbuf_free>
          goto icmperr;
 800e620:	e085      	b.n	800e72e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e62a:	4618      	mov	r0, r3
 800e62c:	f001 fb34 	bl	800fc98 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e632:	4619      	mov	r1, r3
 800e634:	6978      	ldr	r0, [r7, #20]
 800e636:	f7f9 f8cd 	bl	80077d4 <pbuf_remove_header>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d009      	beq.n	800e654 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e640:	4b40      	ldr	r3, [pc, #256]	; (800e744 <icmp_input+0x1f8>)
 800e642:	22b6      	movs	r2, #182	; 0xb6
 800e644:	4940      	ldr	r1, [pc, #256]	; (800e748 <icmp_input+0x1fc>)
 800e646:	4841      	ldr	r0, [pc, #260]	; (800e74c <icmp_input+0x200>)
 800e648:	f001 fb3c 	bl	800fcc4 <iprintf>
          pbuf_free(r);
 800e64c:	6978      	ldr	r0, [r7, #20]
 800e64e:	f7f9 f947 	bl	80078e0 <pbuf_free>
          goto icmperr;
 800e652:	e06c      	b.n	800e72e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	6978      	ldr	r0, [r7, #20]
 800e658:	f7f9 fa5a 	bl	8007b10 <pbuf_copy>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e662:	6978      	ldr	r0, [r7, #20]
 800e664:	f7f9 f93c 	bl	80078e0 <pbuf_free>
          goto icmperr;
 800e668:	e061      	b.n	800e72e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7f9 f938 	bl	80078e0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	607b      	str	r3, [r7, #4]
 800e674:	e00f      	b.n	800e696 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e676:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e678:	330e      	adds	r3, #14
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7f9 f8a9 	bl	80077d4 <pbuf_remove_header>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d006      	beq.n	800e696 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e688:	4b2e      	ldr	r3, [pc, #184]	; (800e744 <icmp_input+0x1f8>)
 800e68a:	22c7      	movs	r2, #199	; 0xc7
 800e68c:	4930      	ldr	r1, [pc, #192]	; (800e750 <icmp_input+0x204>)
 800e68e:	482f      	ldr	r0, [pc, #188]	; (800e74c <icmp_input+0x200>)
 800e690:	f001 fb18 	bl	800fcc4 <iprintf>
          goto icmperr;
 800e694:	e04b      	b.n	800e72e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e69c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e69e:	4619      	mov	r1, r3
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f7f9 f887 	bl	80077b4 <pbuf_add_header>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d12b      	bne.n	800e704 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e6ba:	4b20      	ldr	r3, [pc, #128]	; (800e73c <icmp_input+0x1f0>)
 800e6bc:	691a      	ldr	r2, [r3, #16]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	709a      	strb	r2, [r3, #2]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	22ff      	movs	r2, #255	; 0xff
 800e6d6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	729a      	strb	r2, [r3, #10]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	9302      	str	r3, [sp, #8]
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	9301      	str	r3, [sp, #4]
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	23ff      	movs	r3, #255	; 0xff
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	69f9      	ldr	r1, [r7, #28]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 fa75 	bl	800ebe4 <ip4_output_if>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e6fe:	e001      	b.n	800e704 <icmp_input+0x1b8>
      break;
 800e700:	bf00      	nop
 800e702:	e000      	b.n	800e706 <icmp_input+0x1ba>
      break;
 800e704:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7f9 f8ea 	bl	80078e0 <pbuf_free>
  return;
 800e70c:	e013      	b.n	800e736 <icmp_input+0x1ea>
    goto lenerr;
 800e70e:	bf00      	nop
 800e710:	e002      	b.n	800e718 <icmp_input+0x1cc>
    goto lenerr;
 800e712:	bf00      	nop
 800e714:	e000      	b.n	800e718 <icmp_input+0x1cc>
        goto lenerr;
 800e716:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7f9 f8e1 	bl	80078e0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e71e:	e00a      	b.n	800e736 <icmp_input+0x1ea>
        goto icmperr;
 800e720:	bf00      	nop
 800e722:	e004      	b.n	800e72e <icmp_input+0x1e2>
        goto icmperr;
 800e724:	bf00      	nop
 800e726:	e002      	b.n	800e72e <icmp_input+0x1e2>
          goto icmperr;
 800e728:	bf00      	nop
 800e72a:	e000      	b.n	800e72e <icmp_input+0x1e2>
          goto icmperr;
 800e72c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7f9 f8d6 	bl	80078e0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e734:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e736:	3728      	adds	r7, #40	; 0x28
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	200034a4 	.word	0x200034a4
 800e740:	200034b8 	.word	0x200034b8
 800e744:	080132a4 	.word	0x080132a4
 800e748:	080132dc 	.word	0x080132dc
 800e74c:	08013314 	.word	0x08013314
 800e750:	0801333c 	.word	0x0801333c

0800e754 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e760:	78fb      	ldrb	r3, [r7, #3]
 800e762:	461a      	mov	r2, r3
 800e764:	2103      	movs	r1, #3
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f814 	bl	800e794 <icmp_send_response>
}
 800e76c:	bf00      	nop
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e780:	78fb      	ldrb	r3, [r7, #3]
 800e782:	461a      	mov	r2, r3
 800e784:	210b      	movs	r1, #11
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f804 	bl	800e794 <icmp_send_response>
}
 800e78c:	bf00      	nop
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b08c      	sub	sp, #48	; 0x30
 800e798:	af04      	add	r7, sp, #16
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	70fb      	strb	r3, [r7, #3]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e7a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7a8:	2124      	movs	r1, #36	; 0x24
 800e7aa:	2022      	movs	r0, #34	; 0x22
 800e7ac:	f7f8 fdb4 	bl	8007318 <pbuf_alloc>
 800e7b0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d04c      	beq.n	800e852 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	895b      	ldrh	r3, [r3, #10]
 800e7bc:	2b23      	cmp	r3, #35	; 0x23
 800e7be:	d806      	bhi.n	800e7ce <icmp_send_response+0x3a>
 800e7c0:	4b26      	ldr	r3, [pc, #152]	; (800e85c <icmp_send_response+0xc8>)
 800e7c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e7c6:	4926      	ldr	r1, [pc, #152]	; (800e860 <icmp_send_response+0xcc>)
 800e7c8:	4826      	ldr	r0, [pc, #152]	; (800e864 <icmp_send_response+0xd0>)
 800e7ca:	f001 fa7b 	bl	800fcc4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	78fa      	ldrb	r2, [r7, #3]
 800e7de:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	78ba      	ldrb	r2, [r7, #2]
 800e7e4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	711a      	strb	r2, [r3, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	719a      	strb	r2, [r3, #6]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f103 0008 	add.w	r0, r3, #8
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	221c      	movs	r2, #28
 800e808:	4619      	mov	r1, r3
 800e80a:	f001 fa45 	bl	800fc98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e814:	f107 030c 	add.w	r3, r7, #12
 800e818:	4618      	mov	r0, r3
 800e81a:	f000 f825 	bl	800e868 <ip4_route>
 800e81e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d011      	beq.n	800e84a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2200      	movs	r2, #0
 800e82a:	709a      	strb	r2, [r3, #2]
 800e82c:	2200      	movs	r2, #0
 800e82e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e830:	f107 020c 	add.w	r2, r7, #12
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	9302      	str	r3, [sp, #8]
 800e838:	2301      	movs	r3, #1
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	2300      	movs	r3, #0
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	23ff      	movs	r3, #255	; 0xff
 800e842:	2100      	movs	r1, #0
 800e844:	69f8      	ldr	r0, [r7, #28]
 800e846:	f000 f9cd 	bl	800ebe4 <ip4_output_if>
  }
  pbuf_free(q);
 800e84a:	69f8      	ldr	r0, [r7, #28]
 800e84c:	f7f9 f848 	bl	80078e0 <pbuf_free>
 800e850:	e000      	b.n	800e854 <icmp_send_response+0xc0>
    return;
 800e852:	bf00      	nop
}
 800e854:	3720      	adds	r7, #32
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	080132a4 	.word	0x080132a4
 800e860:	08013370 	.word	0x08013370
 800e864:	08013314 	.word	0x08013314

0800e868 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e868:	b480      	push	{r7}
 800e86a:	b085      	sub	sp, #20
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e870:	4b33      	ldr	r3, [pc, #204]	; (800e940 <ip4_route+0xd8>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	60fb      	str	r3, [r7, #12]
 800e876:	e036      	b.n	800e8e6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e87e:	f003 0301 	and.w	r3, r3, #1
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d02b      	beq.n	800e8e0 <ip4_route+0x78>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e88e:	089b      	lsrs	r3, r3, #2
 800e890:	f003 0301 	and.w	r3, r3, #1
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d022      	beq.n	800e8e0 <ip4_route+0x78>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	3304      	adds	r3, #4
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d01d      	beq.n	800e8e0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	405a      	eors	r2, r3
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	3308      	adds	r3, #8
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4013      	ands	r3, r2
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d101      	bne.n	800e8c0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	e038      	b.n	800e932 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8c6:	f003 0302 	and.w	r3, r3, #2
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d108      	bne.n	800e8e0 <ip4_route+0x78>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	330c      	adds	r3, #12
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d101      	bne.n	800e8e0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	e028      	b.n	800e932 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	60fb      	str	r3, [r7, #12]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1c5      	bne.n	800e878 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8ec:	4b15      	ldr	r3, [pc, #84]	; (800e944 <ip4_route+0xdc>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d01a      	beq.n	800e92a <ip4_route+0xc2>
 800e8f4:	4b13      	ldr	r3, [pc, #76]	; (800e944 <ip4_route+0xdc>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	2b00      	cmp	r3, #0
 800e902:	d012      	beq.n	800e92a <ip4_route+0xc2>
 800e904:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <ip4_route+0xdc>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00a      	beq.n	800e92a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e914:	4b0b      	ldr	r3, [pc, #44]	; (800e944 <ip4_route+0xdc>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3304      	adds	r3, #4
 800e91a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d004      	beq.n	800e92a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b7f      	cmp	r3, #127	; 0x7f
 800e928:	d101      	bne.n	800e92e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e92a:	2300      	movs	r3, #0
 800e92c:	e001      	b.n	800e932 <ip4_route+0xca>
  }

  return netif_default;
 800e92e:	4b05      	ldr	r3, [pc, #20]	; (800e944 <ip4_route+0xdc>)
 800e930:	681b      	ldr	r3, [r3, #0]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3714      	adds	r7, #20
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	20008b98 	.word	0x20008b98
 800e944:	20008b9c 	.word	0x20008b9c

0800e948 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e956:	f003 0301 	and.w	r3, r3, #1
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d016      	beq.n	800e98e <ip4_input_accept+0x46>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3304      	adds	r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d011      	beq.n	800e98e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e96a:	4b0b      	ldr	r3, [pc, #44]	; (800e998 <ip4_input_accept+0x50>)
 800e96c:	695a      	ldr	r2, [r3, #20]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	3304      	adds	r3, #4
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	429a      	cmp	r2, r3
 800e976:	d008      	beq.n	800e98a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e978:	4b07      	ldr	r3, [pc, #28]	; (800e998 <ip4_input_accept+0x50>)
 800e97a:	695b      	ldr	r3, [r3, #20]
 800e97c:	6879      	ldr	r1, [r7, #4]
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 fa08 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800e984:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e000      	b.n	800e990 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	200034a4 	.word	0x200034a4

0800e99c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b086      	sub	sp, #24
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	091b      	lsrs	r3, r3, #4
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	2b04      	cmp	r3, #4
 800e9b6:	d004      	beq.n	800e9c2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7f8 ff91 	bl	80078e0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e107      	b.n	800ebd2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	f003 030f 	and.w	r3, r3, #15
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	885b      	ldrh	r3, [r3, #2]
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7f7 fccd 	bl	8006378 <lwip_htons>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	891b      	ldrh	r3, [r3, #8]
 800e9e6:	89ba      	ldrh	r2, [r7, #12]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d204      	bcs.n	800e9f6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e9ec:	89bb      	ldrh	r3, [r7, #12]
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7f8 fdef 	bl	80075d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	895b      	ldrh	r3, [r3, #10]
 800e9fa:	89fa      	ldrh	r2, [r7, #14]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d807      	bhi.n	800ea10 <ip4_input+0x74>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	891b      	ldrh	r3, [r3, #8]
 800ea04:	89ba      	ldrh	r2, [r7, #12]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d802      	bhi.n	800ea10 <ip4_input+0x74>
 800ea0a:	89fb      	ldrh	r3, [r7, #14]
 800ea0c:	2b13      	cmp	r3, #19
 800ea0e:	d804      	bhi.n	800ea1a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7f8 ff65 	bl	80078e0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ea16:	2300      	movs	r3, #0
 800ea18:	e0db      	b.n	800ebd2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	4a6f      	ldr	r2, [pc, #444]	; (800ebdc <ip4_input+0x240>)
 800ea20:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	4a6d      	ldr	r2, [pc, #436]	; (800ebdc <ip4_input+0x240>)
 800ea28:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea2a:	4b6c      	ldr	r3, [pc, #432]	; (800ebdc <ip4_input+0x240>)
 800ea2c:	695b      	ldr	r3, [r3, #20]
 800ea2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea32:	2be0      	cmp	r3, #224	; 0xe0
 800ea34:	d112      	bne.n	800ea5c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea3c:	f003 0301 	and.w	r3, r3, #1
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d007      	beq.n	800ea56 <ip4_input+0xba>
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <ip4_input+0xba>
      netif = inp;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	613b      	str	r3, [r7, #16]
 800ea54:	e02a      	b.n	800eaac <ip4_input+0x110>
    } else {
      netif = NULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	613b      	str	r3, [r7, #16]
 800ea5a:	e027      	b.n	800eaac <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ea5c:	6838      	ldr	r0, [r7, #0]
 800ea5e:	f7ff ff73 	bl	800e948 <ip4_input_accept>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <ip4_input+0xd2>
      netif = inp;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	613b      	str	r3, [r7, #16]
 800ea6c:	e01e      	b.n	800eaac <ip4_input+0x110>
    } else {
      netif = NULL;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ea72:	4b5a      	ldr	r3, [pc, #360]	; (800ebdc <ip4_input+0x240>)
 800ea74:	695b      	ldr	r3, [r3, #20]
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	2b7f      	cmp	r3, #127	; 0x7f
 800ea7a:	d017      	beq.n	800eaac <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ea7c:	4b58      	ldr	r3, [pc, #352]	; (800ebe0 <ip4_input+0x244>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	613b      	str	r3, [r7, #16]
 800ea82:	e00e      	b.n	800eaa2 <ip4_input+0x106>
          if (netif == inp) {
 800ea84:	693a      	ldr	r2, [r7, #16]
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d006      	beq.n	800ea9a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ea8c:	6938      	ldr	r0, [r7, #16]
 800ea8e:	f7ff ff5b 	bl	800e948 <ip4_input_accept>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d108      	bne.n	800eaaa <ip4_input+0x10e>
 800ea98:	e000      	b.n	800ea9c <ip4_input+0x100>
            continue;
 800ea9a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	613b      	str	r3, [r7, #16]
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1ed      	bne.n	800ea84 <ip4_input+0xe8>
 800eaa8:	e000      	b.n	800eaac <ip4_input+0x110>
            break;
 800eaaa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eaac:	4b4b      	ldr	r3, [pc, #300]	; (800ebdc <ip4_input+0x240>)
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	6839      	ldr	r1, [r7, #0]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 f96e 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d105      	bne.n	800eaca <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800eabe:	4b47      	ldr	r3, [pc, #284]	; (800ebdc <ip4_input+0x240>)
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eac6:	2be0      	cmp	r3, #224	; 0xe0
 800eac8:	d104      	bne.n	800ead4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7f8 ff08 	bl	80078e0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	e07e      	b.n	800ebd2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d104      	bne.n	800eae4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7f8 ff00 	bl	80078e0 <pbuf_free>
    return ERR_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	e076      	b.n	800ebd2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	88db      	ldrh	r3, [r3, #6]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	461a      	mov	r2, r3
 800eaec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00b      	beq.n	800eb0e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 fc92 	bl	800f420 <ip4_reass>
 800eafc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <ip4_input+0x16c>
      return ERR_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	e064      	b.n	800ebd2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800eb0e:	4a33      	ldr	r2, [pc, #204]	; (800ebdc <ip4_input+0x240>)
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eb14:	4a31      	ldr	r2, [pc, #196]	; (800ebdc <ip4_input+0x240>)
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eb1a:	4a30      	ldr	r2, [pc, #192]	; (800ebdc <ip4_input+0x240>)
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	f003 030f 	and.w	r3, r3, #15
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	4b2a      	ldr	r3, [pc, #168]	; (800ebdc <ip4_input+0x240>)
 800eb32:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800eb34:	89fb      	ldrh	r3, [r7, #14]
 800eb36:	4619      	mov	r1, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7f8 fe4b 	bl	80077d4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	7a5b      	ldrb	r3, [r3, #9]
 800eb42:	2b11      	cmp	r3, #17
 800eb44:	d006      	beq.n	800eb54 <ip4_input+0x1b8>
 800eb46:	2b11      	cmp	r3, #17
 800eb48:	dc13      	bgt.n	800eb72 <ip4_input+0x1d6>
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d00c      	beq.n	800eb68 <ip4_input+0x1cc>
 800eb4e:	2b06      	cmp	r3, #6
 800eb50:	d005      	beq.n	800eb5e <ip4_input+0x1c2>
 800eb52:	e00e      	b.n	800eb72 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800eb54:	6839      	ldr	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7fe fc68 	bl	800d42c <udp_input>
        break;
 800eb5c:	e026      	b.n	800ebac <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7fa fce5 	bl	8009530 <tcp_input>
        break;
 800eb66:	e021      	b.n	800ebac <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff fcee 	bl	800e54c <icmp_input>
        break;
 800eb70:	e01c      	b.n	800ebac <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eb72:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <ip4_input+0x240>)
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	6939      	ldr	r1, [r7, #16]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 f90b 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d10f      	bne.n	800eba4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eb84:	4b15      	ldr	r3, [pc, #84]	; (800ebdc <ip4_input+0x240>)
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eb8c:	2be0      	cmp	r3, #224	; 0xe0
 800eb8e:	d009      	beq.n	800eba4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800eb90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7f8 fe8f 	bl	80078ba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eb9c:	2102      	movs	r1, #2
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff fdd8 	bl	800e754 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7f8 fe9b 	bl	80078e0 <pbuf_free>
        break;
 800ebaa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ebac:	4b0b      	ldr	r3, [pc, #44]	; (800ebdc <ip4_input+0x240>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ebb2:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <ip4_input+0x240>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ebb8:	4b08      	ldr	r3, [pc, #32]	; (800ebdc <ip4_input+0x240>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ebbe:	4b07      	ldr	r3, [pc, #28]	; (800ebdc <ip4_input+0x240>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ebc4:	4b05      	ldr	r3, [pc, #20]	; (800ebdc <ip4_input+0x240>)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ebca:	4b04      	ldr	r3, [pc, #16]	; (800ebdc <ip4_input+0x240>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	200034a4 	.word	0x200034a4
 800ebe0:	20008b98 	.word	0x20008b98

0800ebe4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08a      	sub	sp, #40	; 0x28
 800ebe8:	af04      	add	r7, sp, #16
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
 800ebf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d009      	beq.n	800ec10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d003      	beq.n	800ec0a <ip4_output_if+0x26>
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d102      	bne.n	800ec10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ec10:	78fa      	ldrb	r2, [r7, #3]
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	9302      	str	r3, [sp, #8]
 800ec16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec1a:	9301      	str	r3, [sp, #4]
 800ec1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	4613      	mov	r3, r2
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	6979      	ldr	r1, [r7, #20]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f000 f805 	bl	800ec38 <ip4_output_if_src>
 800ec2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3718      	adds	r7, #24
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	7b9b      	ldrb	r3, [r3, #14]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d006      	beq.n	800ec5c <ip4_output_if_src+0x24>
 800ec4e:	4b4b      	ldr	r3, [pc, #300]	; (800ed7c <ip4_output_if_src+0x144>)
 800ec50:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ec54:	494a      	ldr	r1, [pc, #296]	; (800ed80 <ip4_output_if_src+0x148>)
 800ec56:	484b      	ldr	r0, [pc, #300]	; (800ed84 <ip4_output_if_src+0x14c>)
 800ec58:	f001 f834 	bl	800fcc4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d060      	beq.n	800ed24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ec62:	2314      	movs	r3, #20
 800ec64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ec66:	2114      	movs	r1, #20
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f7f8 fda3 	bl	80077b4 <pbuf_add_header>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d002      	beq.n	800ec7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ec74:	f06f 0301 	mvn.w	r3, #1
 800ec78:	e07c      	b.n	800ed74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	895b      	ldrh	r3, [r3, #10]
 800ec84:	2b13      	cmp	r3, #19
 800ec86:	d806      	bhi.n	800ec96 <ip4_output_if_src+0x5e>
 800ec88:	4b3c      	ldr	r3, [pc, #240]	; (800ed7c <ip4_output_if_src+0x144>)
 800ec8a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ec8e:	493e      	ldr	r1, [pc, #248]	; (800ed88 <ip4_output_if_src+0x150>)
 800ec90:	483c      	ldr	r0, [pc, #240]	; (800ed84 <ip4_output_if_src+0x14c>)
 800ec92:	f001 f817 	bl	800fcc4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	78fa      	ldrb	r2, [r7, #3]
 800ec9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eca2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ecac:	8b7b      	ldrh	r3, [r7, #26]
 800ecae:	089b      	lsrs	r3, r3, #2
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb8:	b2da      	uxtb	r2, r3
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ecc4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	891b      	ldrh	r3, [r3, #8]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f7 fb54 	bl	8006378 <lwip_htons>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	719a      	strb	r2, [r3, #6]
 800ecde:	2200      	movs	r2, #0
 800ece0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ece2:	4b2a      	ldr	r3, [pc, #168]	; (800ed8c <ip4_output_if_src+0x154>)
 800ece4:	881b      	ldrh	r3, [r3, #0]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7f7 fb46 	bl	8006378 <lwip_htons>
 800ecec:	4603      	mov	r3, r0
 800ecee:	461a      	mov	r2, r3
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ecf4:	4b25      	ldr	r3, [pc, #148]	; (800ed8c <ip4_output_if_src+0x154>)
 800ecf6:	881b      	ldrh	r3, [r3, #0]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	4b23      	ldr	r3, [pc, #140]	; (800ed8c <ip4_output_if_src+0x154>)
 800ecfe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d104      	bne.n	800ed10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ed06:	4b22      	ldr	r3, [pc, #136]	; (800ed90 <ip4_output_if_src+0x158>)
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	60da      	str	r2, [r3, #12]
 800ed0e:	e003      	b.n	800ed18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	729a      	strb	r2, [r3, #10]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	72da      	strb	r2, [r3, #11]
 800ed22:	e00f      	b.n	800ed44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	895b      	ldrh	r3, [r3, #10]
 800ed28:	2b13      	cmp	r3, #19
 800ed2a:	d802      	bhi.n	800ed32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ed2c:	f06f 0301 	mvn.w	r3, #1
 800ed30:	e020      	b.n	800ed74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ed3e:	f107 0314 	add.w	r3, r7, #20
 800ed42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ed44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00c      	beq.n	800ed66 <ip4_output_if_src+0x12e>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	891a      	ldrh	r2, [r3, #8]
 800ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d906      	bls.n	800ed66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f000 fd4d 	bl	800f7fc <ip4_frag>
 800ed62:	4603      	mov	r3, r0
 800ed64:	e006      	b.n	800ed74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	68f9      	ldr	r1, [r7, #12]
 800ed6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed70:	4798      	blx	r3
 800ed72:	4603      	mov	r3, r0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3720      	adds	r7, #32
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	0801339c 	.word	0x0801339c
 800ed80:	080133d0 	.word	0x080133d0
 800ed84:	080133dc 	.word	0x080133dc
 800ed88:	08013404 	.word	0x08013404
 800ed8c:	20000206 	.word	0x20000206
 800ed90:	080137d8 	.word	0x080137d8

0800ed94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda8:	d002      	beq.n	800edb0 <ip4_addr_isbroadcast_u32+0x1c>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d101      	bne.n	800edb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800edb0:	2301      	movs	r3, #1
 800edb2:	e02a      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edba:	f003 0302 	and.w	r3, r3, #2
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	e021      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	3304      	adds	r3, #4
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d101      	bne.n	800edd6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	e019      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	3304      	adds	r3, #4
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	405a      	eors	r2, r3
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	3308      	adds	r3, #8
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4013      	ands	r3, r2
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10d      	bne.n	800ee08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	3308      	adds	r3, #8
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	43da      	mvns	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	3308      	adds	r3, #8
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d101      	bne.n	800ee08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e000      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ee08:	2300      	movs	r3, #0
  }
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3714      	adds	r7, #20
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
	...

0800ee18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ee22:	4b12      	ldr	r3, [pc, #72]	; (800ee6c <ip_reass_tmr+0x54>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ee28:	e018      	b.n	800ee5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	7fdb      	ldrb	r3, [r3, #31]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00b      	beq.n	800ee4a <ip_reass_tmr+0x32>
      r->timer--;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	7fdb      	ldrb	r3, [r3, #31]
 800ee36:	3b01      	subs	r3, #1
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60fb      	str	r3, [r7, #12]
 800ee48:	e008      	b.n	800ee5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ee54:	68b9      	ldr	r1, [r7, #8]
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f80a 	bl	800ee70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1e3      	bne.n	800ee2a <ip_reass_tmr+0x12>
    }
  }
}
 800ee62:	bf00      	nop
 800ee64:	bf00      	nop
 800ee66:	3710      	adds	r7, #16
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	20000208 	.word	0x20000208

0800ee70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b088      	sub	sp, #32
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d105      	bne.n	800ee92 <ip_reass_free_complete_datagram+0x22>
 800ee86:	4b45      	ldr	r3, [pc, #276]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800ee88:	22ab      	movs	r2, #171	; 0xab
 800ee8a:	4945      	ldr	r1, [pc, #276]	; (800efa0 <ip_reass_free_complete_datagram+0x130>)
 800ee8c:	4845      	ldr	r0, [pc, #276]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ee8e:	f000 ff19 	bl	800fcc4 <iprintf>
  if (prev != NULL) {
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00a      	beq.n	800eeae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d005      	beq.n	800eeae <ip_reass_free_complete_datagram+0x3e>
 800eea2:	4b3e      	ldr	r3, [pc, #248]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800eea4:	22ad      	movs	r2, #173	; 0xad
 800eea6:	4940      	ldr	r1, [pc, #256]	; (800efa8 <ip_reass_free_complete_datagram+0x138>)
 800eea8:	483e      	ldr	r0, [pc, #248]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800eeaa:	f000 ff0b 	bl	800fcc4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	889b      	ldrh	r3, [r3, #4]
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d12a      	bne.n	800ef16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	6858      	ldr	r0, [r3, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	3308      	adds	r3, #8
 800eed6:	2214      	movs	r2, #20
 800eed8:	4619      	mov	r1, r3
 800eeda:	f000 fedd 	bl	800fc98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800eede:	2101      	movs	r1, #1
 800eee0:	69b8      	ldr	r0, [r7, #24]
 800eee2:	f7ff fc47 	bl	800e774 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800eee6:	69b8      	ldr	r0, [r7, #24]
 800eee8:	f7f8 fd82 	bl	80079f0 <pbuf_clen>
 800eeec:	4603      	mov	r3, r0
 800eeee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eef0:	8bfa      	ldrh	r2, [r7, #30]
 800eef2:	8a7b      	ldrh	r3, [r7, #18]
 800eef4:	4413      	add	r3, r2
 800eef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eefa:	db05      	blt.n	800ef08 <ip_reass_free_complete_datagram+0x98>
 800eefc:	4b27      	ldr	r3, [pc, #156]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800eefe:	22bc      	movs	r2, #188	; 0xbc
 800ef00:	492a      	ldr	r1, [pc, #168]	; (800efac <ip_reass_free_complete_datagram+0x13c>)
 800ef02:	4828      	ldr	r0, [pc, #160]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ef04:	f000 fede 	bl	800fcc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ef08:	8bfa      	ldrh	r2, [r7, #30]
 800ef0a:	8a7b      	ldrh	r3, [r7, #18]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ef10:	69b8      	ldr	r0, [r7, #24]
 800ef12:	f7f8 fce5 	bl	80078e0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ef1c:	e01f      	b.n	800ef5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f7f8 fd5e 	bl	80079f0 <pbuf_clen>
 800ef34:	4603      	mov	r3, r0
 800ef36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ef38:	8bfa      	ldrh	r2, [r7, #30]
 800ef3a:	8a7b      	ldrh	r3, [r7, #18]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef42:	db05      	blt.n	800ef50 <ip_reass_free_complete_datagram+0xe0>
 800ef44:	4b15      	ldr	r3, [pc, #84]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800ef46:	22cc      	movs	r2, #204	; 0xcc
 800ef48:	4918      	ldr	r1, [pc, #96]	; (800efac <ip_reass_free_complete_datagram+0x13c>)
 800ef4a:	4816      	ldr	r0, [pc, #88]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ef4c:	f000 feba 	bl	800fcc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ef50:	8bfa      	ldrh	r2, [r7, #30]
 800ef52:	8a7b      	ldrh	r3, [r7, #18]
 800ef54:	4413      	add	r3, r2
 800ef56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7f8 fcc1 	bl	80078e0 <pbuf_free>
  while (p != NULL) {
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1dc      	bne.n	800ef1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ef64:	6839      	ldr	r1, [r7, #0]
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f8c2 	bl	800f0f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ef6c:	4b10      	ldr	r3, [pc, #64]	; (800efb0 <ip_reass_free_complete_datagram+0x140>)
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	8bfa      	ldrh	r2, [r7, #30]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d905      	bls.n	800ef82 <ip_reass_free_complete_datagram+0x112>
 800ef76:	4b09      	ldr	r3, [pc, #36]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800ef78:	22d2      	movs	r2, #210	; 0xd2
 800ef7a:	490e      	ldr	r1, [pc, #56]	; (800efb4 <ip_reass_free_complete_datagram+0x144>)
 800ef7c:	4809      	ldr	r0, [pc, #36]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ef7e:	f000 fea1 	bl	800fcc4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ef82:	4b0b      	ldr	r3, [pc, #44]	; (800efb0 <ip_reass_free_complete_datagram+0x140>)
 800ef84:	881a      	ldrh	r2, [r3, #0]
 800ef86:	8bfb      	ldrh	r3, [r7, #30]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	4b08      	ldr	r3, [pc, #32]	; (800efb0 <ip_reass_free_complete_datagram+0x140>)
 800ef8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ef90:	8bfb      	ldrh	r3, [r7, #30]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3720      	adds	r7, #32
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	08013434 	.word	0x08013434
 800efa0:	08013470 	.word	0x08013470
 800efa4:	0801347c 	.word	0x0801347c
 800efa8:	080134a4 	.word	0x080134a4
 800efac:	080134b8 	.word	0x080134b8
 800efb0:	2000020c 	.word	0x2000020c
 800efb4:	080134d8 	.word	0x080134d8

0800efb8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b08a      	sub	sp, #40	; 0x28
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800efc2:	2300      	movs	r3, #0
 800efc4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800efca:	2300      	movs	r3, #0
 800efcc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800efd2:	2300      	movs	r3, #0
 800efd4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800efd6:	4b28      	ldr	r3, [pc, #160]	; (800f078 <ip_reass_remove_oldest_datagram+0xc0>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800efdc:	e030      	b.n	800f040 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	695a      	ldr	r2, [r3, #20]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d10c      	bne.n	800f004 <ip_reass_remove_oldest_datagram+0x4c>
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	699a      	ldr	r2, [r3, #24]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d106      	bne.n	800f004 <ip_reass_remove_oldest_datagram+0x4c>
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	899a      	ldrh	r2, [r3, #12]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	889b      	ldrh	r3, [r3, #4]
 800effe:	b29b      	uxth	r3, r3
 800f000:	429a      	cmp	r2, r3
 800f002:	d014      	beq.n	800f02e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	3301      	adds	r3, #1
 800f008:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f00a:	6a3b      	ldr	r3, [r7, #32]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d104      	bne.n	800f01a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	61bb      	str	r3, [r7, #24]
 800f018:	e009      	b.n	800f02e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	7fda      	ldrb	r2, [r3, #31]
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	7fdb      	ldrb	r3, [r3, #31]
 800f022:	429a      	cmp	r2, r3
 800f024:	d803      	bhi.n	800f02e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d001      	beq.n	800f03a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1cb      	bne.n	800efde <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d008      	beq.n	800f05e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f04c:	69b9      	ldr	r1, [r7, #24]
 800f04e:	6a38      	ldr	r0, [r7, #32]
 800f050:	f7ff ff0e 	bl	800ee70 <ip_reass_free_complete_datagram>
 800f054:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	4413      	add	r3, r2
 800f05c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f05e:	697a      	ldr	r2, [r7, #20]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	da02      	bge.n	800f06c <ip_reass_remove_oldest_datagram+0xb4>
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	dcac      	bgt.n	800efc6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f06c:	697b      	ldr	r3, [r7, #20]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3728      	adds	r7, #40	; 0x28
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	20000208 	.word	0x20000208

0800f07c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f086:	2004      	movs	r0, #4
 800f088:	f7f7 fdcc 	bl	8006c24 <memp_malloc>
 800f08c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d110      	bne.n	800f0b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f094:	6839      	ldr	r1, [r7, #0]
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff ff8e 	bl	800efb8 <ip_reass_remove_oldest_datagram>
 800f09c:	4602      	mov	r2, r0
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	dc03      	bgt.n	800f0ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f0a4:	2004      	movs	r0, #4
 800f0a6:	f7f7 fdbd 	bl	8006c24 <memp_malloc>
 800f0aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e016      	b.n	800f0e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 fdfa 	bl	800fcb4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	220f      	movs	r2, #15
 800f0c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f0c6:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <ip_reass_enqueue_new_datagram+0x70>)
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f0ce:	4a07      	ldr	r2, [pc, #28]	; (800f0ec <ip_reass_enqueue_new_datagram+0x70>)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	3308      	adds	r3, #8
 800f0d8:	2214      	movs	r2, #20
 800f0da:	6879      	ldr	r1, [r7, #4]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 fddb 	bl	800fc98 <memcpy>
  return ipr;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	20000208 	.word	0x20000208

0800f0f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f0fa:	4b10      	ldr	r3, [pc, #64]	; (800f13c <ip_reass_dequeue_datagram+0x4c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d104      	bne.n	800f10e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a0c      	ldr	r2, [pc, #48]	; (800f13c <ip_reass_dequeue_datagram+0x4c>)
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	e00d      	b.n	800f12a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <ip_reass_dequeue_datagram+0x32>
 800f114:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <ip_reass_dequeue_datagram+0x50>)
 800f116:	f240 1245 	movw	r2, #325	; 0x145
 800f11a:	490a      	ldr	r1, [pc, #40]	; (800f144 <ip_reass_dequeue_datagram+0x54>)
 800f11c:	480a      	ldr	r0, [pc, #40]	; (800f148 <ip_reass_dequeue_datagram+0x58>)
 800f11e:	f000 fdd1 	bl	800fcc4 <iprintf>
    prev->next = ipr->next;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f12a:	6879      	ldr	r1, [r7, #4]
 800f12c:	2004      	movs	r0, #4
 800f12e:	f7f7 fdc5 	bl	8006cbc <memp_free>
}
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20000208 	.word	0x20000208
 800f140:	08013434 	.word	0x08013434
 800f144:	080134fc 	.word	0x080134fc
 800f148:	0801347c 	.word	0x0801347c

0800f14c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08c      	sub	sp, #48	; 0x30
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f158:	2300      	movs	r3, #0
 800f15a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f15c:	2301      	movs	r3, #1
 800f15e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	885b      	ldrh	r3, [r3, #2]
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7f7 f903 	bl	8006378 <lwip_htons>
 800f172:	4603      	mov	r3, r0
 800f174:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	f003 030f 	and.w	r3, r3, #15
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f184:	7e7b      	ldrb	r3, [r7, #25]
 800f186:	b29b      	uxth	r3, r3
 800f188:	8b7a      	ldrh	r2, [r7, #26]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d202      	bcs.n	800f194 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f18e:	f04f 33ff 	mov.w	r3, #4294967295
 800f192:	e135      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f194:	7e7b      	ldrb	r3, [r7, #25]
 800f196:	b29b      	uxth	r3, r3
 800f198:	8b7a      	ldrh	r2, [r7, #26]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	88db      	ldrh	r3, [r3, #6]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7f7 f8e7 	bl	8006378 <lwip_htons>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	00db      	lsls	r3, r3, #3
 800f1b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	2200      	movs	r2, #0
 800f1c0:	701a      	strb	r2, [r3, #0]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	705a      	strb	r2, [r3, #1]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	709a      	strb	r2, [r3, #2]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d0:	8afa      	ldrh	r2, [r7, #22]
 800f1d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f1d4:	8afa      	ldrh	r2, [r7, #22]
 800f1d6:	8b7b      	ldrh	r3, [r7, #26]
 800f1d8:	4413      	add	r3, r2
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e2:	88db      	ldrh	r3, [r3, #6]
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	8afa      	ldrh	r2, [r7, #22]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d902      	bls.n	800f1f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f0:	e106      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f1f8:	e068      	b.n	800f2cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	889b      	ldrh	r3, [r3, #4]
 800f204:	b29a      	uxth	r2, r3
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	889b      	ldrh	r3, [r3, #4]
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d235      	bcs.n	800f27c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f214:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d020      	beq.n	800f25e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	889b      	ldrh	r3, [r3, #4]
 800f220:	b29a      	uxth	r2, r3
 800f222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f224:	88db      	ldrh	r3, [r3, #6]
 800f226:	b29b      	uxth	r3, r3
 800f228:	429a      	cmp	r2, r3
 800f22a:	d307      	bcc.n	800f23c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22e:	88db      	ldrh	r3, [r3, #6]
 800f230:	b29a      	uxth	r2, r3
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	889b      	ldrh	r3, [r3, #4]
 800f236:	b29b      	uxth	r3, r3
 800f238:	429a      	cmp	r2, r3
 800f23a:	d902      	bls.n	800f242 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f23c:	f04f 33ff 	mov.w	r3, #4294967295
 800f240:	e0de      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	88db      	ldrh	r3, [r3, #6]
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	889b      	ldrh	r3, [r3, #4]
 800f252:	b29b      	uxth	r3, r3
 800f254:	429a      	cmp	r2, r3
 800f256:	d03d      	beq.n	800f2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f25c:	e03a      	b.n	800f2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	88db      	ldrh	r3, [r3, #6]
 800f262:	b29a      	uxth	r2, r3
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	889b      	ldrh	r3, [r3, #4]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d902      	bls.n	800f274 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f26e:	f04f 33ff 	mov.w	r3, #4294967295
 800f272:	e0c5      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	605a      	str	r2, [r3, #4]
      break;
 800f27a:	e02b      	b.n	800f2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	889b      	ldrh	r3, [r3, #4]
 800f280:	b29a      	uxth	r2, r3
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	889b      	ldrh	r3, [r3, #4]
 800f286:	b29b      	uxth	r3, r3
 800f288:	429a      	cmp	r2, r3
 800f28a:	d102      	bne.n	800f292 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	e0b6      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	889b      	ldrh	r3, [r3, #4]
 800f296:	b29a      	uxth	r2, r3
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	88db      	ldrh	r3, [r3, #6]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d202      	bcs.n	800f2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a6:	e0ab      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d009      	beq.n	800f2c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b0:	88db      	ldrh	r3, [r3, #6]
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	889b      	ldrh	r3, [r3, #4]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d001      	beq.n	800f2c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d193      	bne.n	800f1fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f2d2:	e000      	b.n	800f2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f2d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d12d      	bne.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d01c      	beq.n	800f31c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e4:	88db      	ldrh	r3, [r3, #6]
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ea:	889b      	ldrh	r3, [r3, #4]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d906      	bls.n	800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f2f2:	4b45      	ldr	r3, [pc, #276]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f2f8:	4944      	ldr	r1, [pc, #272]	; (800f40c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f2fa:	4845      	ldr	r0, [pc, #276]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2fc:	f000 fce2 	bl	800fcc4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f308:	88db      	ldrh	r3, [r3, #6]
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	889b      	ldrh	r3, [r3, #4]
 800f310:	b29b      	uxth	r3, r3
 800f312:	429a      	cmp	r2, r3
 800f314:	d010      	beq.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f316:	2300      	movs	r3, #0
 800f318:	623b      	str	r3, [r7, #32]
 800f31a:	e00d      	b.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d006      	beq.n	800f332 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f324:	4b38      	ldr	r3, [pc, #224]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f326:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f32a:	493a      	ldr	r1, [pc, #232]	; (800f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f32c:	4838      	ldr	r0, [pc, #224]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f32e:	f000 fcc9 	bl	800fcc4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	7f9b      	ldrb	r3, [r3, #30]
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	2b00      	cmp	r3, #0
 800f348:	d059      	beq.n	800f3fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d04f      	beq.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d006      	beq.n	800f366 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	889b      	ldrh	r3, [r3, #4]
 800f360:	b29b      	uxth	r3, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	d002      	beq.n	800f36c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	623b      	str	r3, [r7, #32]
 800f36a:	e041      	b.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f376:	e012      	b.n	800f39e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	88db      	ldrh	r3, [r3, #6]
 800f382:	b29a      	uxth	r2, r3
 800f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f386:	889b      	ldrh	r3, [r3, #4]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d002      	beq.n	800f394 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f38e:	2300      	movs	r3, #0
 800f390:	623b      	str	r3, [r7, #32]
            break;
 800f392:	e007      	b.n	800f3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1e9      	bne.n	800f378 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f3a4:	6a3b      	ldr	r3, [r7, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d022      	beq.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f3b2:	4b15      	ldr	r3, [pc, #84]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3b4:	f240 12df 	movw	r2, #479	; 0x1df
 800f3b8:	4917      	ldr	r1, [pc, #92]	; (800f418 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f3ba:	4815      	ldr	r0, [pc, #84]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3bc:	f000 fc82 	bl	800fcc4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d106      	bne.n	800f3da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f3cc:	4b0e      	ldr	r3, [pc, #56]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f3d2:	4911      	ldr	r1, [pc, #68]	; (800f418 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f3d4:	480e      	ldr	r0, [pc, #56]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3d6:	f000 fc75 	bl	800fcc4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d006      	beq.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f3e2:	4b09      	ldr	r3, [pc, #36]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f3e8:	490c      	ldr	r1, [pc, #48]	; (800f41c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f3ea:	4809      	ldr	r0, [pc, #36]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3ec:	f000 fc6a 	bl	800fcc4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	bf14      	ite	ne
 800f3f6:	2301      	movne	r3, #1
 800f3f8:	2300      	moveq	r3, #0
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	e000      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3730      	adds	r7, #48	; 0x30
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	08013434 	.word	0x08013434
 800f40c:	08013518 	.word	0x08013518
 800f410:	0801347c 	.word	0x0801347c
 800f414:	08013538 	.word	0x08013538
 800f418:	08013570 	.word	0x08013570
 800f41c:	08013580 	.word	0x08013580

0800f420 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b08e      	sub	sp, #56	; 0x38
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	f003 030f 	and.w	r3, r3, #15
 800f436:	b2db      	uxtb	r3, r3
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b14      	cmp	r3, #20
 800f43e:	f040 8167 	bne.w	800f710 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f444:	88db      	ldrh	r3, [r3, #6]
 800f446:	b29b      	uxth	r3, r3
 800f448:	4618      	mov	r0, r3
 800f44a:	f7f6 ff95 	bl	8006378 <lwip_htons>
 800f44e:	4603      	mov	r3, r0
 800f450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f454:	b29b      	uxth	r3, r3
 800f456:	00db      	lsls	r3, r3, #3
 800f458:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	885b      	ldrh	r3, [r3, #2]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	4618      	mov	r0, r3
 800f462:	f7f6 ff89 	bl	8006378 <lwip_htons>
 800f466:	4603      	mov	r3, r0
 800f468:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	f003 030f 	and.w	r3, r3, #15
 800f472:	b2db      	uxtb	r3, r3
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f47a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f47e:	b29b      	uxth	r3, r3
 800f480:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f482:	429a      	cmp	r2, r3
 800f484:	f0c0 8146 	bcc.w	800f714 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7f8 faab 	bl	80079f0 <pbuf_clen>
 800f49a:	4603      	mov	r3, r0
 800f49c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f49e:	4b9f      	ldr	r3, [pc, #636]	; (800f71c <ip4_reass+0x2fc>)
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	8c3b      	ldrh	r3, [r7, #32]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	2b0a      	cmp	r3, #10
 800f4aa:	dd10      	ble.n	800f4ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f4ac:	8c3b      	ldrh	r3, [r7, #32]
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b2:	f7ff fd81 	bl	800efb8 <ip_reass_remove_oldest_datagram>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 812d 	beq.w	800f718 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f4be:	4b97      	ldr	r3, [pc, #604]	; (800f71c <ip4_reass+0x2fc>)
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	8c3b      	ldrh	r3, [r7, #32]
 800f4c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f4c8:	2b0a      	cmp	r3, #10
 800f4ca:	f300 8125 	bgt.w	800f718 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f4ce:	4b94      	ldr	r3, [pc, #592]	; (800f720 <ip4_reass+0x300>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	633b      	str	r3, [r7, #48]	; 0x30
 800f4d4:	e015      	b.n	800f502 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d8:	695a      	ldr	r2, [r3, #20]
 800f4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d10c      	bne.n	800f4fc <ip4_reass+0xdc>
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	699a      	ldr	r2, [r3, #24]
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d106      	bne.n	800f4fc <ip4_reass+0xdc>
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	899a      	ldrh	r2, [r3, #12]
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	889b      	ldrh	r3, [r3, #4]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d006      	beq.n	800f50a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	633b      	str	r3, [r7, #48]	; 0x30
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e6      	bne.n	800f4d6 <ip4_reass+0xb6>
 800f508:	e000      	b.n	800f50c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f50a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d109      	bne.n	800f526 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f512:	8c3b      	ldrh	r3, [r7, #32]
 800f514:	4619      	mov	r1, r3
 800f516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f518:	f7ff fdb0 	bl	800f07c <ip_reass_enqueue_new_datagram>
 800f51c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	2b00      	cmp	r3, #0
 800f522:	d11c      	bne.n	800f55e <ip4_reass+0x13e>
      goto nullreturn;
 800f524:	e109      	b.n	800f73a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	88db      	ldrh	r3, [r3, #6]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f6 ff23 	bl	8006378 <lwip_htons>
 800f532:	4603      	mov	r3, r0
 800f534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d110      	bne.n	800f55e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	89db      	ldrh	r3, [r3, #14]
 800f540:	4618      	mov	r0, r3
 800f542:	f7f6 ff19 	bl	8006378 <lwip_htons>
 800f546:	4603      	mov	r3, r0
 800f548:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d006      	beq.n	800f55e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f552:	3308      	adds	r3, #8
 800f554:	2214      	movs	r2, #20
 800f556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 fb9d 	bl	800fc98 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f560:	88db      	ldrh	r3, [r3, #6]
 800f562:	b29b      	uxth	r3, r3
 800f564:	f003 0320 	and.w	r3, r3, #32
 800f568:	2b00      	cmp	r3, #0
 800f56a:	bf0c      	ite	eq
 800f56c:	2301      	moveq	r3, #1
 800f56e:	2300      	movne	r3, #0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00e      	beq.n	800f598 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f57a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f57e:	4413      	add	r3, r2
 800f580:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f582:	8b7a      	ldrh	r2, [r7, #26]
 800f584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f586:	429a      	cmp	r2, r3
 800f588:	f0c0 80a0 	bcc.w	800f6cc <ip4_reass+0x2ac>
 800f58c:	8b7b      	ldrh	r3, [r7, #26]
 800f58e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f592:	4293      	cmp	r3, r2
 800f594:	f200 809a 	bhi.w	800f6cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f598:	69fa      	ldr	r2, [r7, #28]
 800f59a:	6879      	ldr	r1, [r7, #4]
 800f59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f59e:	f7ff fdd5 	bl	800f14c <ip_reass_chain_frag_into_datagram_and_validate>
 800f5a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	f000 8091 	beq.w	800f6d0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f5ae:	4b5b      	ldr	r3, [pc, #364]	; (800f71c <ip4_reass+0x2fc>)
 800f5b0:	881a      	ldrh	r2, [r3, #0]
 800f5b2:	8c3b      	ldrh	r3, [r7, #32]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	4b58      	ldr	r3, [pc, #352]	; (800f71c <ip4_reass+0x2fc>)
 800f5ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d00d      	beq.n	800f5de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f5c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f5c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5c6:	4413      	add	r3, r2
 800f5c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	8a7a      	ldrh	r2, [r7, #18]
 800f5ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d2:	7f9b      	ldrb	r3, [r3, #30]
 800f5d4:	f043 0301 	orr.w	r3, r3, #1
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d171      	bne.n	800f6c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	8b9b      	ldrh	r3, [r3, #28]
 800f5e8:	3314      	adds	r3, #20
 800f5ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	3308      	adds	r3, #8
 800f602:	2214      	movs	r2, #20
 800f604:	4619      	mov	r1, r3
 800f606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f608:	f000 fb46 	bl	800fc98 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f60c:	8a3b      	ldrh	r3, [r7, #16]
 800f60e:	4618      	mov	r0, r3
 800f610:	f7f6 feb2 	bl	8006378 <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	461a      	mov	r2, r3
 800f618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61e:	2200      	movs	r2, #0
 800f620:	719a      	strb	r2, [r3, #6]
 800f622:	2200      	movs	r2, #0
 800f624:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f628:	2200      	movs	r2, #0
 800f62a:	729a      	strb	r2, [r3, #10]
 800f62c:	2200      	movs	r2, #0
 800f62e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f636:	e00d      	b.n	800f654 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f63e:	2114      	movs	r1, #20
 800f640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f642:	f7f8 f8c7 	bl	80077d4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f646:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7f8 fa0b 	bl	8007a64 <pbuf_cat>
      r = iprh->next_pbuf;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1ee      	bne.n	800f638 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f65a:	4b31      	ldr	r3, [pc, #196]	; (800f720 <ip4_reass+0x300>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f660:	429a      	cmp	r2, r3
 800f662:	d102      	bne.n	800f66a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f664:	2300      	movs	r3, #0
 800f666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f668:	e010      	b.n	800f68c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f66a:	4b2d      	ldr	r3, [pc, #180]	; (800f720 <ip4_reass+0x300>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f670:	e007      	b.n	800f682 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f678:	429a      	cmp	r2, r3
 800f67a:	d006      	beq.n	800f68a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f684:	2b00      	cmp	r3, #0
 800f686:	d1f4      	bne.n	800f672 <ip4_reass+0x252>
 800f688:	e000      	b.n	800f68c <ip4_reass+0x26c>
          break;
 800f68a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f68c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f68e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f690:	f7ff fd2e 	bl	800f0f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7f8 f9ab 	bl	80079f0 <pbuf_clen>
 800f69a:	4603      	mov	r3, r0
 800f69c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f69e:	4b1f      	ldr	r3, [pc, #124]	; (800f71c <ip4_reass+0x2fc>)
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	8c3a      	ldrh	r2, [r7, #32]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d906      	bls.n	800f6b6 <ip4_reass+0x296>
 800f6a8:	4b1e      	ldr	r3, [pc, #120]	; (800f724 <ip4_reass+0x304>)
 800f6aa:	f240 229b 	movw	r2, #667	; 0x29b
 800f6ae:	491e      	ldr	r1, [pc, #120]	; (800f728 <ip4_reass+0x308>)
 800f6b0:	481e      	ldr	r0, [pc, #120]	; (800f72c <ip4_reass+0x30c>)
 800f6b2:	f000 fb07 	bl	800fcc4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f6b6:	4b19      	ldr	r3, [pc, #100]	; (800f71c <ip4_reass+0x2fc>)
 800f6b8:	881a      	ldrh	r2, [r3, #0]
 800f6ba:	8c3b      	ldrh	r3, [r7, #32]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	4b16      	ldr	r3, [pc, #88]	; (800f71c <ip4_reass+0x2fc>)
 800f6c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	e03c      	b.n	800f742 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	e03a      	b.n	800f742 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800f6cc:	bf00      	nop
 800f6ce:	e000      	b.n	800f6d2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f6d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d106      	bne.n	800f6e6 <ip4_reass+0x2c6>
 800f6d8:	4b12      	ldr	r3, [pc, #72]	; (800f724 <ip4_reass+0x304>)
 800f6da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f6de:	4914      	ldr	r1, [pc, #80]	; (800f730 <ip4_reass+0x310>)
 800f6e0:	4812      	ldr	r0, [pc, #72]	; (800f72c <ip4_reass+0x30c>)
 800f6e2:	f000 faef 	bl	800fcc4 <iprintf>
  if (ipr->p == NULL) {
 800f6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d124      	bne.n	800f738 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	; (800f720 <ip4_reass+0x300>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d006      	beq.n	800f706 <ip4_reass+0x2e6>
 800f6f8:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <ip4_reass+0x304>)
 800f6fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f6fe:	490d      	ldr	r1, [pc, #52]	; (800f734 <ip4_reass+0x314>)
 800f700:	480a      	ldr	r0, [pc, #40]	; (800f72c <ip4_reass+0x30c>)
 800f702:	f000 fadf 	bl	800fcc4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f706:	2100      	movs	r1, #0
 800f708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f70a:	f7ff fcf1 	bl	800f0f0 <ip_reass_dequeue_datagram>
 800f70e:	e014      	b.n	800f73a <ip4_reass+0x31a>
    goto nullreturn;
 800f710:	bf00      	nop
 800f712:	e012      	b.n	800f73a <ip4_reass+0x31a>
    goto nullreturn;
 800f714:	bf00      	nop
 800f716:	e010      	b.n	800f73a <ip4_reass+0x31a>
      goto nullreturn;
 800f718:	bf00      	nop
 800f71a:	e00e      	b.n	800f73a <ip4_reass+0x31a>
 800f71c:	2000020c 	.word	0x2000020c
 800f720:	20000208 	.word	0x20000208
 800f724:	08013434 	.word	0x08013434
 800f728:	080135a4 	.word	0x080135a4
 800f72c:	0801347c 	.word	0x0801347c
 800f730:	080135c0 	.word	0x080135c0
 800f734:	080135cc 	.word	0x080135cc
  }

nullreturn:
 800f738:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7f8 f8d0 	bl	80078e0 <pbuf_free>
  return NULL;
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	3738      	adds	r7, #56	; 0x38
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop

0800f74c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f750:	2005      	movs	r0, #5
 800f752:	f7f7 fa67 	bl	8006c24 <memp_malloc>
 800f756:	4603      	mov	r3, r0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d106      	bne.n	800f778 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f76a:	4b07      	ldr	r3, [pc, #28]	; (800f788 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f76c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f770:	4906      	ldr	r1, [pc, #24]	; (800f78c <ip_frag_free_pbuf_custom_ref+0x30>)
 800f772:	4807      	ldr	r0, [pc, #28]	; (800f790 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f774:	f000 faa6 	bl	800fcc4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f778:	6879      	ldr	r1, [r7, #4]
 800f77a:	2005      	movs	r0, #5
 800f77c:	f7f7 fa9e 	bl	8006cbc <memp_free>
}
 800f780:	bf00      	nop
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	08013434 	.word	0x08013434
 800f78c:	080135ec 	.word	0x080135ec
 800f790:	0801347c 	.word	0x0801347c

0800f794 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <ipfrag_free_pbuf_custom+0x20>
 800f7a6:	4b11      	ldr	r3, [pc, #68]	; (800f7ec <ipfrag_free_pbuf_custom+0x58>)
 800f7a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f7ac:	4910      	ldr	r1, [pc, #64]	; (800f7f0 <ipfrag_free_pbuf_custom+0x5c>)
 800f7ae:	4811      	ldr	r0, [pc, #68]	; (800f7f4 <ipfrag_free_pbuf_custom+0x60>)
 800f7b0:	f000 fa88 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d006      	beq.n	800f7ca <ipfrag_free_pbuf_custom+0x36>
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	; (800f7ec <ipfrag_free_pbuf_custom+0x58>)
 800f7be:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f7c2:	490d      	ldr	r1, [pc, #52]	; (800f7f8 <ipfrag_free_pbuf_custom+0x64>)
 800f7c4:	480b      	ldr	r0, [pc, #44]	; (800f7f4 <ipfrag_free_pbuf_custom+0x60>)
 800f7c6:	f000 fa7d 	bl	800fcc4 <iprintf>
  if (pcr->original != NULL) {
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	695b      	ldr	r3, [r3, #20]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d004      	beq.n	800f7dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f8 f882 	bl	80078e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	f7ff ffbd 	bl	800f75c <ip_frag_free_pbuf_custom_ref>
}
 800f7e2:	bf00      	nop
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	08013434 	.word	0x08013434
 800f7f0:	080135f8 	.word	0x080135f8
 800f7f4:	0801347c 	.word	0x0801347c
 800f7f8:	08013604 	.word	0x08013604

0800f7fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b094      	sub	sp, #80	; 0x50
 800f800:	af02      	add	r7, sp, #8
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f808:	2300      	movs	r3, #0
 800f80a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f812:	3b14      	subs	r3, #20
 800f814:	2b00      	cmp	r3, #0
 800f816:	da00      	bge.n	800f81a <ip4_frag+0x1e>
 800f818:	3307      	adds	r3, #7
 800f81a:	10db      	asrs	r3, r3, #3
 800f81c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f81e:	2314      	movs	r3, #20
 800f820:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	f003 030f 	and.w	r3, r3, #15
 800f834:	b2db      	uxtb	r3, r3
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	2b14      	cmp	r3, #20
 800f83c:	d002      	beq.n	800f844 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f83e:	f06f 0305 	mvn.w	r3, #5
 800f842:	e110      	b.n	800fa66 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	895b      	ldrh	r3, [r3, #10]
 800f848:	2b13      	cmp	r3, #19
 800f84a:	d809      	bhi.n	800f860 <ip4_frag+0x64>
 800f84c:	4b88      	ldr	r3, [pc, #544]	; (800fa70 <ip4_frag+0x274>)
 800f84e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f852:	4988      	ldr	r1, [pc, #544]	; (800fa74 <ip4_frag+0x278>)
 800f854:	4888      	ldr	r0, [pc, #544]	; (800fa78 <ip4_frag+0x27c>)
 800f856:	f000 fa35 	bl	800fcc4 <iprintf>
 800f85a:	f06f 0305 	mvn.w	r3, #5
 800f85e:	e102      	b.n	800fa66 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f862:	88db      	ldrh	r3, [r3, #6]
 800f864:	b29b      	uxth	r3, r3
 800f866:	4618      	mov	r0, r3
 800f868:	f7f6 fd86 	bl	8006378 <lwip_htons>
 800f86c:	4603      	mov	r3, r0
 800f86e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f870:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f87a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f87c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f880:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	891b      	ldrh	r3, [r3, #8]
 800f886:	3b14      	subs	r3, #20
 800f888:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f88c:	e0e1      	b.n	800fa52 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f88e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f890:	00db      	lsls	r3, r3, #3
 800f892:	b29b      	uxth	r3, r3
 800f894:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f898:	4293      	cmp	r3, r2
 800f89a:	bf28      	it	cs
 800f89c:	4613      	movcs	r3, r2
 800f89e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f8a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8a4:	2114      	movs	r1, #20
 800f8a6:	200e      	movs	r0, #14
 800f8a8:	f7f7 fd36 	bl	8007318 <pbuf_alloc>
 800f8ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 80d5 	beq.w	800fa60 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b8:	895b      	ldrh	r3, [r3, #10]
 800f8ba:	2b13      	cmp	r3, #19
 800f8bc:	d806      	bhi.n	800f8cc <ip4_frag+0xd0>
 800f8be:	4b6c      	ldr	r3, [pc, #432]	; (800fa70 <ip4_frag+0x274>)
 800f8c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f8c4:	496d      	ldr	r1, [pc, #436]	; (800fa7c <ip4_frag+0x280>)
 800f8c6:	486c      	ldr	r0, [pc, #432]	; (800fa78 <ip4_frag+0x27c>)
 800f8c8:	f000 f9fc 	bl	800fcc4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	2214      	movs	r2, #20
 800f8d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 f9df 	bl	800fc98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f8e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f8e6:	e064      	b.n	800f9b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	895a      	ldrh	r2, [r3, #10]
 800f8ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	895b      	ldrh	r3, [r3, #10]
 800f8f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d906      	bls.n	800f90a <ip4_frag+0x10e>
 800f8fc:	4b5c      	ldr	r3, [pc, #368]	; (800fa70 <ip4_frag+0x274>)
 800f8fe:	f240 322d 	movw	r2, #813	; 0x32d
 800f902:	495f      	ldr	r1, [pc, #380]	; (800fa80 <ip4_frag+0x284>)
 800f904:	485c      	ldr	r0, [pc, #368]	; (800fa78 <ip4_frag+0x27c>)
 800f906:	f000 f9dd 	bl	800fcc4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f90a:	8bfa      	ldrh	r2, [r7, #30]
 800f90c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f910:	4293      	cmp	r3, r2
 800f912:	bf28      	it	cs
 800f914:	4613      	movcs	r3, r2
 800f916:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f91a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d105      	bne.n	800f92e <ip4_frag+0x132>
        poff = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	60fb      	str	r3, [r7, #12]
        continue;
 800f92c:	e041      	b.n	800f9b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f92e:	f7ff ff0d 	bl	800f74c <ip_frag_alloc_pbuf_custom_ref>
 800f932:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d103      	bne.n	800f942 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f93a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f93c:	f7f7 ffd0 	bl	80078e0 <pbuf_free>
        goto memerr;
 800f940:	e08f      	b.n	800fa62 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f942:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f948:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f94a:	4413      	add	r3, r2
 800f94c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f950:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f954:	9201      	str	r2, [sp, #4]
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	4603      	mov	r3, r0
 800f95a:	2241      	movs	r2, #65	; 0x41
 800f95c:	2000      	movs	r0, #0
 800f95e:	f7f7 fe05 	bl	800756c <pbuf_alloced_custom>
 800f962:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f96a:	69b8      	ldr	r0, [r7, #24]
 800f96c:	f7ff fef6 	bl	800f75c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f972:	f7f7 ffb5 	bl	80078e0 <pbuf_free>
        goto memerr;
 800f976:	e074      	b.n	800fa62 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7f8 f851 	bl	8007a20 <pbuf_ref>
      pcr->original = p;
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	4a3f      	ldr	r2, [pc, #252]	; (800fa84 <ip4_frag+0x288>)
 800f988:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f98a:	6979      	ldr	r1, [r7, #20]
 800f98c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f98e:	f7f8 f869 	bl	8007a64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f992:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f99a:	1ad3      	subs	r3, r2, r3
 800f99c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f9a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d004      	beq.n	800f9b2 <ip4_frag+0x1b6>
        poff = 0;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f9b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d196      	bne.n	800f8e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f9ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f9bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f9c0:	4413      	add	r3, r2
 800f9c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f9c8:	f1a3 0213 	sub.w	r2, r3, #19
 800f9cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	bfcc      	ite	gt
 800f9d4:	2301      	movgt	r3, #1
 800f9d6:	2300      	movle	r3, #0
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f9dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f9e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d002      	beq.n	800f9f2 <ip4_frag+0x1f6>
 800f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f9f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f9f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f9f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f9fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f6 fcbb 	bl	8006378 <lwip_htons>
 800fa02:	4603      	mov	r3, r0
 800fa04:	461a      	mov	r2, r3
 800fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa08:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fa0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa0c:	3314      	adds	r3, #20
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7f6 fcb1 	bl	8006378 <lwip_htons>
 800fa16:	4603      	mov	r3, r0
 800fa18:	461a      	mov	r2, r3
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa20:	2200      	movs	r2, #0
 800fa22:	729a      	strb	r2, [r3, #10]
 800fa24:	2200      	movs	r2, #0
 800fa26:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	695b      	ldr	r3, [r3, #20]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa30:	68b8      	ldr	r0, [r7, #8]
 800fa32:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fa34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa36:	f7f7 ff53 	bl	80078e0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fa3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fa46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fa4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa4c:	4413      	add	r3, r2
 800fa4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fa52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f47f af19 	bne.w	800f88e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e002      	b.n	800fa66 <ip4_frag+0x26a>
      goto memerr;
 800fa60:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fa62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3748      	adds	r7, #72	; 0x48
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	08013434 	.word	0x08013434
 800fa74:	08013610 	.word	0x08013610
 800fa78:	0801347c 	.word	0x0801347c
 800fa7c:	0801362c 	.word	0x0801362c
 800fa80:	0801364c 	.word	0x0801364c
 800fa84:	0800f795 	.word	0x0800f795

0800fa88 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fa92:	230e      	movs	r3, #14
 800fa94:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	895b      	ldrh	r3, [r3, #10]
 800fa9a:	2b0e      	cmp	r3, #14
 800fa9c:	d96e      	bls.n	800fb7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	7bdb      	ldrb	r3, [r3, #15]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d106      	bne.n	800fab4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800faac:	3301      	adds	r3, #1
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	7b1a      	ldrb	r2, [r3, #12]
 800fabe:	7b5b      	ldrb	r3, [r3, #13]
 800fac0:	021b      	lsls	r3, r3, #8
 800fac2:	4313      	orrs	r3, r2
 800fac4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	2b00      	cmp	r3, #0
 800fad0:	d023      	beq.n	800fb1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d10f      	bne.n	800fafa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	785b      	ldrb	r3, [r3, #1]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d11b      	bne.n	800fb1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fae6:	2b5e      	cmp	r3, #94	; 0x5e
 800fae8:	d117      	bne.n	800fb1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	7b5b      	ldrb	r3, [r3, #13]
 800faee:	f043 0310 	orr.w	r3, r3, #16
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	735a      	strb	r2, [r3, #13]
 800faf8:	e00f      	b.n	800fb1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2206      	movs	r2, #6
 800fafe:	4928      	ldr	r1, [pc, #160]	; (800fba0 <ethernet_input+0x118>)
 800fb00:	4618      	mov	r0, r3
 800fb02:	f000 f8bb 	bl	800fc7c <memcmp>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	7b5b      	ldrb	r3, [r3, #13]
 800fb10:	f043 0308 	orr.w	r3, r3, #8
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fb1a:	89fb      	ldrh	r3, [r7, #14]
 800fb1c:	2b08      	cmp	r3, #8
 800fb1e:	d003      	beq.n	800fb28 <ethernet_input+0xa0>
 800fb20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fb24:	d014      	beq.n	800fb50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fb26:	e032      	b.n	800fb8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb2e:	f003 0308 	and.w	r3, r3, #8
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d024      	beq.n	800fb80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fb36:	8afb      	ldrh	r3, [r7, #22]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7f7 fe4a 	bl	80077d4 <pbuf_remove_header>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d11e      	bne.n	800fb84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7fe ff27 	bl	800e99c <ip4_input>
      break;
 800fb4e:	e013      	b.n	800fb78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb56:	f003 0308 	and.w	r3, r3, #8
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d014      	beq.n	800fb88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fb5e:	8afb      	ldrh	r3, [r7, #22]
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7f7 fe36 	bl	80077d4 <pbuf_remove_header>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d10e      	bne.n	800fb8c <ethernet_input+0x104>
        etharp_input(p, netif);
 800fb6e:	6839      	ldr	r1, [r7, #0]
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7fe f8c7 	bl	800dd04 <etharp_input>
      break;
 800fb76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	e00c      	b.n	800fb96 <ethernet_input+0x10e>
    goto free_and_return;
 800fb7c:	bf00      	nop
 800fb7e:	e006      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb80:	bf00      	nop
 800fb82:	e004      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb84:	bf00      	nop
 800fb86:	e002      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb88:	bf00      	nop
 800fb8a:	e000      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7f7 fea6 	bl	80078e0 <pbuf_free>
  return ERR_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3718      	adds	r7, #24
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	080137dc 	.word	0x080137dc

0800fba4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
 800fbb0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fbb2:	8c3b      	ldrh	r3, [r7, #32]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f6 fbdf 	bl	8006378 <lwip_htons>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fbbe:	210e      	movs	r1, #14
 800fbc0:	68b8      	ldr	r0, [r7, #8]
 800fbc2:	f7f7 fdf7 	bl	80077b4 <pbuf_add_header>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d125      	bne.n	800fc18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	8afa      	ldrh	r2, [r7, #22]
 800fbd6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	2206      	movs	r2, #6
 800fbdc:	6839      	ldr	r1, [r7, #0]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 f85a 	bl	800fc98 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	3306      	adds	r3, #6
 800fbe8:	2206      	movs	r2, #6
 800fbea:	6879      	ldr	r1, [r7, #4]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f853 	bl	800fc98 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fbf8:	2b06      	cmp	r3, #6
 800fbfa:	d006      	beq.n	800fc0a <ethernet_output+0x66>
 800fbfc:	4b0a      	ldr	r3, [pc, #40]	; (800fc28 <ethernet_output+0x84>)
 800fbfe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fc02:	490a      	ldr	r1, [pc, #40]	; (800fc2c <ethernet_output+0x88>)
 800fc04:	480a      	ldr	r0, [pc, #40]	; (800fc30 <ethernet_output+0x8c>)
 800fc06:	f000 f85d 	bl	800fcc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	699b      	ldr	r3, [r3, #24]
 800fc0e:	68b9      	ldr	r1, [r7, #8]
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	4798      	blx	r3
 800fc14:	4603      	mov	r3, r0
 800fc16:	e002      	b.n	800fc1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fc18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fc1a:	f06f 0301 	mvn.w	r3, #1
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3718      	adds	r7, #24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	0801365c 	.word	0x0801365c
 800fc2c:	08013694 	.word	0x08013694
 800fc30:	080136c8 	.word	0x080136c8

0800fc34 <__libc_init_array>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	4d0d      	ldr	r5, [pc, #52]	; (800fc6c <__libc_init_array+0x38>)
 800fc38:	4c0d      	ldr	r4, [pc, #52]	; (800fc70 <__libc_init_array+0x3c>)
 800fc3a:	1b64      	subs	r4, r4, r5
 800fc3c:	10a4      	asrs	r4, r4, #2
 800fc3e:	2600      	movs	r6, #0
 800fc40:	42a6      	cmp	r6, r4
 800fc42:	d109      	bne.n	800fc58 <__libc_init_array+0x24>
 800fc44:	4d0b      	ldr	r5, [pc, #44]	; (800fc74 <__libc_init_array+0x40>)
 800fc46:	4c0c      	ldr	r4, [pc, #48]	; (800fc78 <__libc_init_array+0x44>)
 800fc48:	f001 f856 	bl	8010cf8 <_init>
 800fc4c:	1b64      	subs	r4, r4, r5
 800fc4e:	10a4      	asrs	r4, r4, #2
 800fc50:	2600      	movs	r6, #0
 800fc52:	42a6      	cmp	r6, r4
 800fc54:	d105      	bne.n	800fc62 <__libc_init_array+0x2e>
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc5c:	4798      	blx	r3
 800fc5e:	3601      	adds	r6, #1
 800fc60:	e7ee      	b.n	800fc40 <__libc_init_array+0xc>
 800fc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc66:	4798      	blx	r3
 800fc68:	3601      	adds	r6, #1
 800fc6a:	e7f2      	b.n	800fc52 <__libc_init_array+0x1e>
 800fc6c:	08013940 	.word	0x08013940
 800fc70:	08013940 	.word	0x08013940
 800fc74:	08013940 	.word	0x08013940
 800fc78:	08013944 	.word	0x08013944

0800fc7c <memcmp>:
 800fc7c:	b530      	push	{r4, r5, lr}
 800fc7e:	3901      	subs	r1, #1
 800fc80:	2400      	movs	r4, #0
 800fc82:	42a2      	cmp	r2, r4
 800fc84:	d101      	bne.n	800fc8a <memcmp+0xe>
 800fc86:	2000      	movs	r0, #0
 800fc88:	e005      	b.n	800fc96 <memcmp+0x1a>
 800fc8a:	5d03      	ldrb	r3, [r0, r4]
 800fc8c:	3401      	adds	r4, #1
 800fc8e:	5d0d      	ldrb	r5, [r1, r4]
 800fc90:	42ab      	cmp	r3, r5
 800fc92:	d0f6      	beq.n	800fc82 <memcmp+0x6>
 800fc94:	1b58      	subs	r0, r3, r5
 800fc96:	bd30      	pop	{r4, r5, pc}

0800fc98 <memcpy>:
 800fc98:	440a      	add	r2, r1
 800fc9a:	4291      	cmp	r1, r2
 800fc9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fca0:	d100      	bne.n	800fca4 <memcpy+0xc>
 800fca2:	4770      	bx	lr
 800fca4:	b510      	push	{r4, lr}
 800fca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcae:	4291      	cmp	r1, r2
 800fcb0:	d1f9      	bne.n	800fca6 <memcpy+0xe>
 800fcb2:	bd10      	pop	{r4, pc}

0800fcb4 <memset>:
 800fcb4:	4402      	add	r2, r0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d100      	bne.n	800fcbe <memset+0xa>
 800fcbc:	4770      	bx	lr
 800fcbe:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc2:	e7f9      	b.n	800fcb8 <memset+0x4>

0800fcc4 <iprintf>:
 800fcc4:	b40f      	push	{r0, r1, r2, r3}
 800fcc6:	4b0a      	ldr	r3, [pc, #40]	; (800fcf0 <iprintf+0x2c>)
 800fcc8:	b513      	push	{r0, r1, r4, lr}
 800fcca:	681c      	ldr	r4, [r3, #0]
 800fccc:	b124      	cbz	r4, 800fcd8 <iprintf+0x14>
 800fcce:	69a3      	ldr	r3, [r4, #24]
 800fcd0:	b913      	cbnz	r3, 800fcd8 <iprintf+0x14>
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f000 f8c4 	bl	800fe60 <__sinit>
 800fcd8:	ab05      	add	r3, sp, #20
 800fcda:	9a04      	ldr	r2, [sp, #16]
 800fcdc:	68a1      	ldr	r1, [r4, #8]
 800fcde:	9301      	str	r3, [sp, #4]
 800fce0:	4620      	mov	r0, r4
 800fce2:	f000 fa4b 	bl	801017c <_vfiprintf_r>
 800fce6:	b002      	add	sp, #8
 800fce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcec:	b004      	add	sp, #16
 800fcee:	4770      	bx	lr
 800fcf0:	2000001c 	.word	0x2000001c

0800fcf4 <rand>:
 800fcf4:	4b17      	ldr	r3, [pc, #92]	; (800fd54 <rand+0x60>)
 800fcf6:	b510      	push	{r4, lr}
 800fcf8:	681c      	ldr	r4, [r3, #0]
 800fcfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fcfc:	b9b3      	cbnz	r3, 800fd2c <rand+0x38>
 800fcfe:	2018      	movs	r0, #24
 800fd00:	f000 f960 	bl	800ffc4 <malloc>
 800fd04:	63a0      	str	r0, [r4, #56]	; 0x38
 800fd06:	b928      	cbnz	r0, 800fd14 <rand+0x20>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <rand+0x64>)
 800fd0c:	4813      	ldr	r0, [pc, #76]	; (800fd5c <rand+0x68>)
 800fd0e:	214e      	movs	r1, #78	; 0x4e
 800fd10:	f000 f830 	bl	800fd74 <__assert_func>
 800fd14:	4a12      	ldr	r2, [pc, #72]	; (800fd60 <rand+0x6c>)
 800fd16:	4b13      	ldr	r3, [pc, #76]	; (800fd64 <rand+0x70>)
 800fd18:	e9c0 2300 	strd	r2, r3, [r0]
 800fd1c:	4b12      	ldr	r3, [pc, #72]	; (800fd68 <rand+0x74>)
 800fd1e:	6083      	str	r3, [r0, #8]
 800fd20:	230b      	movs	r3, #11
 800fd22:	8183      	strh	r3, [r0, #12]
 800fd24:	2201      	movs	r2, #1
 800fd26:	2300      	movs	r3, #0
 800fd28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fd2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd2e:	480f      	ldr	r0, [pc, #60]	; (800fd6c <rand+0x78>)
 800fd30:	690a      	ldr	r2, [r1, #16]
 800fd32:	694b      	ldr	r3, [r1, #20]
 800fd34:	4c0e      	ldr	r4, [pc, #56]	; (800fd70 <rand+0x7c>)
 800fd36:	4350      	muls	r0, r2
 800fd38:	fb04 0003 	mla	r0, r4, r3, r0
 800fd3c:	fba2 3404 	umull	r3, r4, r2, r4
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	4404      	add	r4, r0
 800fd44:	f144 0000 	adc.w	r0, r4, #0
 800fd48:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800fd4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	2000001c 	.word	0x2000001c
 800fd58:	080137f0 	.word	0x080137f0
 800fd5c:	08013807 	.word	0x08013807
 800fd60:	abcd330e 	.word	0xabcd330e
 800fd64:	e66d1234 	.word	0xe66d1234
 800fd68:	0005deec 	.word	0x0005deec
 800fd6c:	5851f42d 	.word	0x5851f42d
 800fd70:	4c957f2d 	.word	0x4c957f2d

0800fd74 <__assert_func>:
 800fd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd76:	4614      	mov	r4, r2
 800fd78:	461a      	mov	r2, r3
 800fd7a:	4b09      	ldr	r3, [pc, #36]	; (800fda0 <__assert_func+0x2c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4605      	mov	r5, r0
 800fd80:	68d8      	ldr	r0, [r3, #12]
 800fd82:	b14c      	cbz	r4, 800fd98 <__assert_func+0x24>
 800fd84:	4b07      	ldr	r3, [pc, #28]	; (800fda4 <__assert_func+0x30>)
 800fd86:	9100      	str	r1, [sp, #0]
 800fd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd8c:	4906      	ldr	r1, [pc, #24]	; (800fda8 <__assert_func+0x34>)
 800fd8e:	462b      	mov	r3, r5
 800fd90:	f000 f8e4 	bl	800ff5c <fiprintf>
 800fd94:	f000 fddc 	bl	8010950 <abort>
 800fd98:	4b04      	ldr	r3, [pc, #16]	; (800fdac <__assert_func+0x38>)
 800fd9a:	461c      	mov	r4, r3
 800fd9c:	e7f3      	b.n	800fd86 <__assert_func+0x12>
 800fd9e:	bf00      	nop
 800fda0:	2000001c 	.word	0x2000001c
 800fda4:	08013866 	.word	0x08013866
 800fda8:	08013873 	.word	0x08013873
 800fdac:	080138a1 	.word	0x080138a1

0800fdb0 <std>:
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	e9c0 3300 	strd	r3, r3, [r0]
 800fdba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdbe:	6083      	str	r3, [r0, #8]
 800fdc0:	8181      	strh	r1, [r0, #12]
 800fdc2:	6643      	str	r3, [r0, #100]	; 0x64
 800fdc4:	81c2      	strh	r2, [r0, #14]
 800fdc6:	6183      	str	r3, [r0, #24]
 800fdc8:	4619      	mov	r1, r3
 800fdca:	2208      	movs	r2, #8
 800fdcc:	305c      	adds	r0, #92	; 0x5c
 800fdce:	f7ff ff71 	bl	800fcb4 <memset>
 800fdd2:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <std+0x38>)
 800fdd4:	6263      	str	r3, [r4, #36]	; 0x24
 800fdd6:	4b05      	ldr	r3, [pc, #20]	; (800fdec <std+0x3c>)
 800fdd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdda:	4b05      	ldr	r3, [pc, #20]	; (800fdf0 <std+0x40>)
 800fddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdde:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <std+0x44>)
 800fde0:	6224      	str	r4, [r4, #32]
 800fde2:	6323      	str	r3, [r4, #48]	; 0x30
 800fde4:	bd10      	pop	{r4, pc}
 800fde6:	bf00      	nop
 800fde8:	08010725 	.word	0x08010725
 800fdec:	08010747 	.word	0x08010747
 800fdf0:	0801077f 	.word	0x0801077f
 800fdf4:	080107a3 	.word	0x080107a3

0800fdf8 <_cleanup_r>:
 800fdf8:	4901      	ldr	r1, [pc, #4]	; (800fe00 <_cleanup_r+0x8>)
 800fdfa:	f000 b8c1 	b.w	800ff80 <_fwalk_reent>
 800fdfe:	bf00      	nop
 800fe00:	08010a8d 	.word	0x08010a8d

0800fe04 <__sfmoreglue>:
 800fe04:	b570      	push	{r4, r5, r6, lr}
 800fe06:	1e4a      	subs	r2, r1, #1
 800fe08:	2568      	movs	r5, #104	; 0x68
 800fe0a:	4355      	muls	r5, r2
 800fe0c:	460e      	mov	r6, r1
 800fe0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe12:	f000 f92f 	bl	8010074 <_malloc_r>
 800fe16:	4604      	mov	r4, r0
 800fe18:	b140      	cbz	r0, 800fe2c <__sfmoreglue+0x28>
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	e9c0 1600 	strd	r1, r6, [r0]
 800fe20:	300c      	adds	r0, #12
 800fe22:	60a0      	str	r0, [r4, #8]
 800fe24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe28:	f7ff ff44 	bl	800fcb4 <memset>
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	bd70      	pop	{r4, r5, r6, pc}

0800fe30 <__sfp_lock_acquire>:
 800fe30:	4801      	ldr	r0, [pc, #4]	; (800fe38 <__sfp_lock_acquire+0x8>)
 800fe32:	f000 b8c5 	b.w	800ffc0 <__retarget_lock_acquire_recursive>
 800fe36:	bf00      	nop
 800fe38:	20008bd0 	.word	0x20008bd0

0800fe3c <__sfp_lock_release>:
 800fe3c:	4801      	ldr	r0, [pc, #4]	; (800fe44 <__sfp_lock_release+0x8>)
 800fe3e:	f000 b8c0 	b.w	800ffc2 <__retarget_lock_release_recursive>
 800fe42:	bf00      	nop
 800fe44:	20008bd0 	.word	0x20008bd0

0800fe48 <__sinit_lock_acquire>:
 800fe48:	4801      	ldr	r0, [pc, #4]	; (800fe50 <__sinit_lock_acquire+0x8>)
 800fe4a:	f000 b8b9 	b.w	800ffc0 <__retarget_lock_acquire_recursive>
 800fe4e:	bf00      	nop
 800fe50:	20008bcb 	.word	0x20008bcb

0800fe54 <__sinit_lock_release>:
 800fe54:	4801      	ldr	r0, [pc, #4]	; (800fe5c <__sinit_lock_release+0x8>)
 800fe56:	f000 b8b4 	b.w	800ffc2 <__retarget_lock_release_recursive>
 800fe5a:	bf00      	nop
 800fe5c:	20008bcb 	.word	0x20008bcb

0800fe60 <__sinit>:
 800fe60:	b510      	push	{r4, lr}
 800fe62:	4604      	mov	r4, r0
 800fe64:	f7ff fff0 	bl	800fe48 <__sinit_lock_acquire>
 800fe68:	69a3      	ldr	r3, [r4, #24]
 800fe6a:	b11b      	cbz	r3, 800fe74 <__sinit+0x14>
 800fe6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe70:	f7ff bff0 	b.w	800fe54 <__sinit_lock_release>
 800fe74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe78:	6523      	str	r3, [r4, #80]	; 0x50
 800fe7a:	4b13      	ldr	r3, [pc, #76]	; (800fec8 <__sinit+0x68>)
 800fe7c:	4a13      	ldr	r2, [pc, #76]	; (800fecc <__sinit+0x6c>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe82:	42a3      	cmp	r3, r4
 800fe84:	bf04      	itt	eq
 800fe86:	2301      	moveq	r3, #1
 800fe88:	61a3      	streq	r3, [r4, #24]
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f000 f820 	bl	800fed0 <__sfp>
 800fe90:	6060      	str	r0, [r4, #4]
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 f81c 	bl	800fed0 <__sfp>
 800fe98:	60a0      	str	r0, [r4, #8]
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f000 f818 	bl	800fed0 <__sfp>
 800fea0:	2200      	movs	r2, #0
 800fea2:	60e0      	str	r0, [r4, #12]
 800fea4:	2104      	movs	r1, #4
 800fea6:	6860      	ldr	r0, [r4, #4]
 800fea8:	f7ff ff82 	bl	800fdb0 <std>
 800feac:	68a0      	ldr	r0, [r4, #8]
 800feae:	2201      	movs	r2, #1
 800feb0:	2109      	movs	r1, #9
 800feb2:	f7ff ff7d 	bl	800fdb0 <std>
 800feb6:	68e0      	ldr	r0, [r4, #12]
 800feb8:	2202      	movs	r2, #2
 800feba:	2112      	movs	r1, #18
 800febc:	f7ff ff78 	bl	800fdb0 <std>
 800fec0:	2301      	movs	r3, #1
 800fec2:	61a3      	str	r3, [r4, #24]
 800fec4:	e7d2      	b.n	800fe6c <__sinit+0xc>
 800fec6:	bf00      	nop
 800fec8:	080137ec 	.word	0x080137ec
 800fecc:	0800fdf9 	.word	0x0800fdf9

0800fed0 <__sfp>:
 800fed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed2:	4607      	mov	r7, r0
 800fed4:	f7ff ffac 	bl	800fe30 <__sfp_lock_acquire>
 800fed8:	4b1e      	ldr	r3, [pc, #120]	; (800ff54 <__sfp+0x84>)
 800feda:	681e      	ldr	r6, [r3, #0]
 800fedc:	69b3      	ldr	r3, [r6, #24]
 800fede:	b913      	cbnz	r3, 800fee6 <__sfp+0x16>
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7ff ffbd 	bl	800fe60 <__sinit>
 800fee6:	3648      	adds	r6, #72	; 0x48
 800fee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800feec:	3b01      	subs	r3, #1
 800feee:	d503      	bpl.n	800fef8 <__sfp+0x28>
 800fef0:	6833      	ldr	r3, [r6, #0]
 800fef2:	b30b      	cbz	r3, 800ff38 <__sfp+0x68>
 800fef4:	6836      	ldr	r6, [r6, #0]
 800fef6:	e7f7      	b.n	800fee8 <__sfp+0x18>
 800fef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fefc:	b9d5      	cbnz	r5, 800ff34 <__sfp+0x64>
 800fefe:	4b16      	ldr	r3, [pc, #88]	; (800ff58 <__sfp+0x88>)
 800ff00:	60e3      	str	r3, [r4, #12]
 800ff02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff06:	6665      	str	r5, [r4, #100]	; 0x64
 800ff08:	f000 f859 	bl	800ffbe <__retarget_lock_init_recursive>
 800ff0c:	f7ff ff96 	bl	800fe3c <__sfp_lock_release>
 800ff10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff18:	6025      	str	r5, [r4, #0]
 800ff1a:	61a5      	str	r5, [r4, #24]
 800ff1c:	2208      	movs	r2, #8
 800ff1e:	4629      	mov	r1, r5
 800ff20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff24:	f7ff fec6 	bl	800fcb4 <memset>
 800ff28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff30:	4620      	mov	r0, r4
 800ff32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff34:	3468      	adds	r4, #104	; 0x68
 800ff36:	e7d9      	b.n	800feec <__sfp+0x1c>
 800ff38:	2104      	movs	r1, #4
 800ff3a:	4638      	mov	r0, r7
 800ff3c:	f7ff ff62 	bl	800fe04 <__sfmoreglue>
 800ff40:	4604      	mov	r4, r0
 800ff42:	6030      	str	r0, [r6, #0]
 800ff44:	2800      	cmp	r0, #0
 800ff46:	d1d5      	bne.n	800fef4 <__sfp+0x24>
 800ff48:	f7ff ff78 	bl	800fe3c <__sfp_lock_release>
 800ff4c:	230c      	movs	r3, #12
 800ff4e:	603b      	str	r3, [r7, #0]
 800ff50:	e7ee      	b.n	800ff30 <__sfp+0x60>
 800ff52:	bf00      	nop
 800ff54:	080137ec 	.word	0x080137ec
 800ff58:	ffff0001 	.word	0xffff0001

0800ff5c <fiprintf>:
 800ff5c:	b40e      	push	{r1, r2, r3}
 800ff5e:	b503      	push	{r0, r1, lr}
 800ff60:	4601      	mov	r1, r0
 800ff62:	ab03      	add	r3, sp, #12
 800ff64:	4805      	ldr	r0, [pc, #20]	; (800ff7c <fiprintf+0x20>)
 800ff66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff6a:	6800      	ldr	r0, [r0, #0]
 800ff6c:	9301      	str	r3, [sp, #4]
 800ff6e:	f000 f905 	bl	801017c <_vfiprintf_r>
 800ff72:	b002      	add	sp, #8
 800ff74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff78:	b003      	add	sp, #12
 800ff7a:	4770      	bx	lr
 800ff7c:	2000001c 	.word	0x2000001c

0800ff80 <_fwalk_reent>:
 800ff80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff84:	4606      	mov	r6, r0
 800ff86:	4688      	mov	r8, r1
 800ff88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff8c:	2700      	movs	r7, #0
 800ff8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff92:	f1b9 0901 	subs.w	r9, r9, #1
 800ff96:	d505      	bpl.n	800ffa4 <_fwalk_reent+0x24>
 800ff98:	6824      	ldr	r4, [r4, #0]
 800ff9a:	2c00      	cmp	r4, #0
 800ff9c:	d1f7      	bne.n	800ff8e <_fwalk_reent+0xe>
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa4:	89ab      	ldrh	r3, [r5, #12]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d907      	bls.n	800ffba <_fwalk_reent+0x3a>
 800ffaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	d003      	beq.n	800ffba <_fwalk_reent+0x3a>
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	47c0      	blx	r8
 800ffb8:	4307      	orrs	r7, r0
 800ffba:	3568      	adds	r5, #104	; 0x68
 800ffbc:	e7e9      	b.n	800ff92 <_fwalk_reent+0x12>

0800ffbe <__retarget_lock_init_recursive>:
 800ffbe:	4770      	bx	lr

0800ffc0 <__retarget_lock_acquire_recursive>:
 800ffc0:	4770      	bx	lr

0800ffc2 <__retarget_lock_release_recursive>:
 800ffc2:	4770      	bx	lr

0800ffc4 <malloc>:
 800ffc4:	4b02      	ldr	r3, [pc, #8]	; (800ffd0 <malloc+0xc>)
 800ffc6:	4601      	mov	r1, r0
 800ffc8:	6818      	ldr	r0, [r3, #0]
 800ffca:	f000 b853 	b.w	8010074 <_malloc_r>
 800ffce:	bf00      	nop
 800ffd0:	2000001c 	.word	0x2000001c

0800ffd4 <_free_r>:
 800ffd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffd6:	2900      	cmp	r1, #0
 800ffd8:	d048      	beq.n	801006c <_free_r+0x98>
 800ffda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffde:	9001      	str	r0, [sp, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f1a1 0404 	sub.w	r4, r1, #4
 800ffe6:	bfb8      	it	lt
 800ffe8:	18e4      	addlt	r4, r4, r3
 800ffea:	f000 fe01 	bl	8010bf0 <__malloc_lock>
 800ffee:	4a20      	ldr	r2, [pc, #128]	; (8010070 <_free_r+0x9c>)
 800fff0:	9801      	ldr	r0, [sp, #4]
 800fff2:	6813      	ldr	r3, [r2, #0]
 800fff4:	4615      	mov	r5, r2
 800fff6:	b933      	cbnz	r3, 8010006 <_free_r+0x32>
 800fff8:	6063      	str	r3, [r4, #4]
 800fffa:	6014      	str	r4, [r2, #0]
 800fffc:	b003      	add	sp, #12
 800fffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010002:	f000 bdfb 	b.w	8010bfc <__malloc_unlock>
 8010006:	42a3      	cmp	r3, r4
 8010008:	d90b      	bls.n	8010022 <_free_r+0x4e>
 801000a:	6821      	ldr	r1, [r4, #0]
 801000c:	1862      	adds	r2, r4, r1
 801000e:	4293      	cmp	r3, r2
 8010010:	bf04      	itt	eq
 8010012:	681a      	ldreq	r2, [r3, #0]
 8010014:	685b      	ldreq	r3, [r3, #4]
 8010016:	6063      	str	r3, [r4, #4]
 8010018:	bf04      	itt	eq
 801001a:	1852      	addeq	r2, r2, r1
 801001c:	6022      	streq	r2, [r4, #0]
 801001e:	602c      	str	r4, [r5, #0]
 8010020:	e7ec      	b.n	800fffc <_free_r+0x28>
 8010022:	461a      	mov	r2, r3
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	b10b      	cbz	r3, 801002c <_free_r+0x58>
 8010028:	42a3      	cmp	r3, r4
 801002a:	d9fa      	bls.n	8010022 <_free_r+0x4e>
 801002c:	6811      	ldr	r1, [r2, #0]
 801002e:	1855      	adds	r5, r2, r1
 8010030:	42a5      	cmp	r5, r4
 8010032:	d10b      	bne.n	801004c <_free_r+0x78>
 8010034:	6824      	ldr	r4, [r4, #0]
 8010036:	4421      	add	r1, r4
 8010038:	1854      	adds	r4, r2, r1
 801003a:	42a3      	cmp	r3, r4
 801003c:	6011      	str	r1, [r2, #0]
 801003e:	d1dd      	bne.n	800fffc <_free_r+0x28>
 8010040:	681c      	ldr	r4, [r3, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	6053      	str	r3, [r2, #4]
 8010046:	4421      	add	r1, r4
 8010048:	6011      	str	r1, [r2, #0]
 801004a:	e7d7      	b.n	800fffc <_free_r+0x28>
 801004c:	d902      	bls.n	8010054 <_free_r+0x80>
 801004e:	230c      	movs	r3, #12
 8010050:	6003      	str	r3, [r0, #0]
 8010052:	e7d3      	b.n	800fffc <_free_r+0x28>
 8010054:	6825      	ldr	r5, [r4, #0]
 8010056:	1961      	adds	r1, r4, r5
 8010058:	428b      	cmp	r3, r1
 801005a:	bf04      	itt	eq
 801005c:	6819      	ldreq	r1, [r3, #0]
 801005e:	685b      	ldreq	r3, [r3, #4]
 8010060:	6063      	str	r3, [r4, #4]
 8010062:	bf04      	itt	eq
 8010064:	1949      	addeq	r1, r1, r5
 8010066:	6021      	streq	r1, [r4, #0]
 8010068:	6054      	str	r4, [r2, #4]
 801006a:	e7c7      	b.n	800fffc <_free_r+0x28>
 801006c:	b003      	add	sp, #12
 801006e:	bd30      	pop	{r4, r5, pc}
 8010070:	20000210 	.word	0x20000210

08010074 <_malloc_r>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	1ccd      	adds	r5, r1, #3
 8010078:	f025 0503 	bic.w	r5, r5, #3
 801007c:	3508      	adds	r5, #8
 801007e:	2d0c      	cmp	r5, #12
 8010080:	bf38      	it	cc
 8010082:	250c      	movcc	r5, #12
 8010084:	2d00      	cmp	r5, #0
 8010086:	4606      	mov	r6, r0
 8010088:	db01      	blt.n	801008e <_malloc_r+0x1a>
 801008a:	42a9      	cmp	r1, r5
 801008c:	d903      	bls.n	8010096 <_malloc_r+0x22>
 801008e:	230c      	movs	r3, #12
 8010090:	6033      	str	r3, [r6, #0]
 8010092:	2000      	movs	r0, #0
 8010094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010096:	f000 fdab 	bl	8010bf0 <__malloc_lock>
 801009a:	4921      	ldr	r1, [pc, #132]	; (8010120 <_malloc_r+0xac>)
 801009c:	680a      	ldr	r2, [r1, #0]
 801009e:	4614      	mov	r4, r2
 80100a0:	b99c      	cbnz	r4, 80100ca <_malloc_r+0x56>
 80100a2:	4f20      	ldr	r7, [pc, #128]	; (8010124 <_malloc_r+0xb0>)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	b923      	cbnz	r3, 80100b2 <_malloc_r+0x3e>
 80100a8:	4621      	mov	r1, r4
 80100aa:	4630      	mov	r0, r6
 80100ac:	f000 fb2a 	bl	8010704 <_sbrk_r>
 80100b0:	6038      	str	r0, [r7, #0]
 80100b2:	4629      	mov	r1, r5
 80100b4:	4630      	mov	r0, r6
 80100b6:	f000 fb25 	bl	8010704 <_sbrk_r>
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	d123      	bne.n	8010106 <_malloc_r+0x92>
 80100be:	230c      	movs	r3, #12
 80100c0:	6033      	str	r3, [r6, #0]
 80100c2:	4630      	mov	r0, r6
 80100c4:	f000 fd9a 	bl	8010bfc <__malloc_unlock>
 80100c8:	e7e3      	b.n	8010092 <_malloc_r+0x1e>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	1b5b      	subs	r3, r3, r5
 80100ce:	d417      	bmi.n	8010100 <_malloc_r+0x8c>
 80100d0:	2b0b      	cmp	r3, #11
 80100d2:	d903      	bls.n	80100dc <_malloc_r+0x68>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	441c      	add	r4, r3
 80100d8:	6025      	str	r5, [r4, #0]
 80100da:	e004      	b.n	80100e6 <_malloc_r+0x72>
 80100dc:	6863      	ldr	r3, [r4, #4]
 80100de:	42a2      	cmp	r2, r4
 80100e0:	bf0c      	ite	eq
 80100e2:	600b      	streq	r3, [r1, #0]
 80100e4:	6053      	strne	r3, [r2, #4]
 80100e6:	4630      	mov	r0, r6
 80100e8:	f000 fd88 	bl	8010bfc <__malloc_unlock>
 80100ec:	f104 000b 	add.w	r0, r4, #11
 80100f0:	1d23      	adds	r3, r4, #4
 80100f2:	f020 0007 	bic.w	r0, r0, #7
 80100f6:	1ac2      	subs	r2, r0, r3
 80100f8:	d0cc      	beq.n	8010094 <_malloc_r+0x20>
 80100fa:	1a1b      	subs	r3, r3, r0
 80100fc:	50a3      	str	r3, [r4, r2]
 80100fe:	e7c9      	b.n	8010094 <_malloc_r+0x20>
 8010100:	4622      	mov	r2, r4
 8010102:	6864      	ldr	r4, [r4, #4]
 8010104:	e7cc      	b.n	80100a0 <_malloc_r+0x2c>
 8010106:	1cc4      	adds	r4, r0, #3
 8010108:	f024 0403 	bic.w	r4, r4, #3
 801010c:	42a0      	cmp	r0, r4
 801010e:	d0e3      	beq.n	80100d8 <_malloc_r+0x64>
 8010110:	1a21      	subs	r1, r4, r0
 8010112:	4630      	mov	r0, r6
 8010114:	f000 faf6 	bl	8010704 <_sbrk_r>
 8010118:	3001      	adds	r0, #1
 801011a:	d1dd      	bne.n	80100d8 <_malloc_r+0x64>
 801011c:	e7cf      	b.n	80100be <_malloc_r+0x4a>
 801011e:	bf00      	nop
 8010120:	20000210 	.word	0x20000210
 8010124:	20000214 	.word	0x20000214

08010128 <__sfputc_r>:
 8010128:	6893      	ldr	r3, [r2, #8]
 801012a:	3b01      	subs	r3, #1
 801012c:	2b00      	cmp	r3, #0
 801012e:	b410      	push	{r4}
 8010130:	6093      	str	r3, [r2, #8]
 8010132:	da08      	bge.n	8010146 <__sfputc_r+0x1e>
 8010134:	6994      	ldr	r4, [r2, #24]
 8010136:	42a3      	cmp	r3, r4
 8010138:	db01      	blt.n	801013e <__sfputc_r+0x16>
 801013a:	290a      	cmp	r1, #10
 801013c:	d103      	bne.n	8010146 <__sfputc_r+0x1e>
 801013e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010142:	f000 bb33 	b.w	80107ac <__swbuf_r>
 8010146:	6813      	ldr	r3, [r2, #0]
 8010148:	1c58      	adds	r0, r3, #1
 801014a:	6010      	str	r0, [r2, #0]
 801014c:	7019      	strb	r1, [r3, #0]
 801014e:	4608      	mov	r0, r1
 8010150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010154:	4770      	bx	lr

08010156 <__sfputs_r>:
 8010156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010158:	4606      	mov	r6, r0
 801015a:	460f      	mov	r7, r1
 801015c:	4614      	mov	r4, r2
 801015e:	18d5      	adds	r5, r2, r3
 8010160:	42ac      	cmp	r4, r5
 8010162:	d101      	bne.n	8010168 <__sfputs_r+0x12>
 8010164:	2000      	movs	r0, #0
 8010166:	e007      	b.n	8010178 <__sfputs_r+0x22>
 8010168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801016c:	463a      	mov	r2, r7
 801016e:	4630      	mov	r0, r6
 8010170:	f7ff ffda 	bl	8010128 <__sfputc_r>
 8010174:	1c43      	adds	r3, r0, #1
 8010176:	d1f3      	bne.n	8010160 <__sfputs_r+0xa>
 8010178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801017c <_vfiprintf_r>:
 801017c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010180:	460d      	mov	r5, r1
 8010182:	b09d      	sub	sp, #116	; 0x74
 8010184:	4614      	mov	r4, r2
 8010186:	4698      	mov	r8, r3
 8010188:	4606      	mov	r6, r0
 801018a:	b118      	cbz	r0, 8010194 <_vfiprintf_r+0x18>
 801018c:	6983      	ldr	r3, [r0, #24]
 801018e:	b90b      	cbnz	r3, 8010194 <_vfiprintf_r+0x18>
 8010190:	f7ff fe66 	bl	800fe60 <__sinit>
 8010194:	4b89      	ldr	r3, [pc, #548]	; (80103bc <_vfiprintf_r+0x240>)
 8010196:	429d      	cmp	r5, r3
 8010198:	d11b      	bne.n	80101d2 <_vfiprintf_r+0x56>
 801019a:	6875      	ldr	r5, [r6, #4]
 801019c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801019e:	07d9      	lsls	r1, r3, #31
 80101a0:	d405      	bmi.n	80101ae <_vfiprintf_r+0x32>
 80101a2:	89ab      	ldrh	r3, [r5, #12]
 80101a4:	059a      	lsls	r2, r3, #22
 80101a6:	d402      	bmi.n	80101ae <_vfiprintf_r+0x32>
 80101a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101aa:	f7ff ff09 	bl	800ffc0 <__retarget_lock_acquire_recursive>
 80101ae:	89ab      	ldrh	r3, [r5, #12]
 80101b0:	071b      	lsls	r3, r3, #28
 80101b2:	d501      	bpl.n	80101b8 <_vfiprintf_r+0x3c>
 80101b4:	692b      	ldr	r3, [r5, #16]
 80101b6:	b9eb      	cbnz	r3, 80101f4 <_vfiprintf_r+0x78>
 80101b8:	4629      	mov	r1, r5
 80101ba:	4630      	mov	r0, r6
 80101bc:	f000 fb5a 	bl	8010874 <__swsetup_r>
 80101c0:	b1c0      	cbz	r0, 80101f4 <_vfiprintf_r+0x78>
 80101c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101c4:	07dc      	lsls	r4, r3, #31
 80101c6:	d50e      	bpl.n	80101e6 <_vfiprintf_r+0x6a>
 80101c8:	f04f 30ff 	mov.w	r0, #4294967295
 80101cc:	b01d      	add	sp, #116	; 0x74
 80101ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d2:	4b7b      	ldr	r3, [pc, #492]	; (80103c0 <_vfiprintf_r+0x244>)
 80101d4:	429d      	cmp	r5, r3
 80101d6:	d101      	bne.n	80101dc <_vfiprintf_r+0x60>
 80101d8:	68b5      	ldr	r5, [r6, #8]
 80101da:	e7df      	b.n	801019c <_vfiprintf_r+0x20>
 80101dc:	4b79      	ldr	r3, [pc, #484]	; (80103c4 <_vfiprintf_r+0x248>)
 80101de:	429d      	cmp	r5, r3
 80101e0:	bf08      	it	eq
 80101e2:	68f5      	ldreq	r5, [r6, #12]
 80101e4:	e7da      	b.n	801019c <_vfiprintf_r+0x20>
 80101e6:	89ab      	ldrh	r3, [r5, #12]
 80101e8:	0598      	lsls	r0, r3, #22
 80101ea:	d4ed      	bmi.n	80101c8 <_vfiprintf_r+0x4c>
 80101ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101ee:	f7ff fee8 	bl	800ffc2 <__retarget_lock_release_recursive>
 80101f2:	e7e9      	b.n	80101c8 <_vfiprintf_r+0x4c>
 80101f4:	2300      	movs	r3, #0
 80101f6:	9309      	str	r3, [sp, #36]	; 0x24
 80101f8:	2320      	movs	r3, #32
 80101fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010202:	2330      	movs	r3, #48	; 0x30
 8010204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80103c8 <_vfiprintf_r+0x24c>
 8010208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801020c:	f04f 0901 	mov.w	r9, #1
 8010210:	4623      	mov	r3, r4
 8010212:	469a      	mov	sl, r3
 8010214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010218:	b10a      	cbz	r2, 801021e <_vfiprintf_r+0xa2>
 801021a:	2a25      	cmp	r2, #37	; 0x25
 801021c:	d1f9      	bne.n	8010212 <_vfiprintf_r+0x96>
 801021e:	ebba 0b04 	subs.w	fp, sl, r4
 8010222:	d00b      	beq.n	801023c <_vfiprintf_r+0xc0>
 8010224:	465b      	mov	r3, fp
 8010226:	4622      	mov	r2, r4
 8010228:	4629      	mov	r1, r5
 801022a:	4630      	mov	r0, r6
 801022c:	f7ff ff93 	bl	8010156 <__sfputs_r>
 8010230:	3001      	adds	r0, #1
 8010232:	f000 80aa 	beq.w	801038a <_vfiprintf_r+0x20e>
 8010236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010238:	445a      	add	r2, fp
 801023a:	9209      	str	r2, [sp, #36]	; 0x24
 801023c:	f89a 3000 	ldrb.w	r3, [sl]
 8010240:	2b00      	cmp	r3, #0
 8010242:	f000 80a2 	beq.w	801038a <_vfiprintf_r+0x20e>
 8010246:	2300      	movs	r3, #0
 8010248:	f04f 32ff 	mov.w	r2, #4294967295
 801024c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010250:	f10a 0a01 	add.w	sl, sl, #1
 8010254:	9304      	str	r3, [sp, #16]
 8010256:	9307      	str	r3, [sp, #28]
 8010258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801025c:	931a      	str	r3, [sp, #104]	; 0x68
 801025e:	4654      	mov	r4, sl
 8010260:	2205      	movs	r2, #5
 8010262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010266:	4858      	ldr	r0, [pc, #352]	; (80103c8 <_vfiprintf_r+0x24c>)
 8010268:	f7ef ffd2 	bl	8000210 <memchr>
 801026c:	9a04      	ldr	r2, [sp, #16]
 801026e:	b9d8      	cbnz	r0, 80102a8 <_vfiprintf_r+0x12c>
 8010270:	06d1      	lsls	r1, r2, #27
 8010272:	bf44      	itt	mi
 8010274:	2320      	movmi	r3, #32
 8010276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801027a:	0713      	lsls	r3, r2, #28
 801027c:	bf44      	itt	mi
 801027e:	232b      	movmi	r3, #43	; 0x2b
 8010280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010284:	f89a 3000 	ldrb.w	r3, [sl]
 8010288:	2b2a      	cmp	r3, #42	; 0x2a
 801028a:	d015      	beq.n	80102b8 <_vfiprintf_r+0x13c>
 801028c:	9a07      	ldr	r2, [sp, #28]
 801028e:	4654      	mov	r4, sl
 8010290:	2000      	movs	r0, #0
 8010292:	f04f 0c0a 	mov.w	ip, #10
 8010296:	4621      	mov	r1, r4
 8010298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801029c:	3b30      	subs	r3, #48	; 0x30
 801029e:	2b09      	cmp	r3, #9
 80102a0:	d94e      	bls.n	8010340 <_vfiprintf_r+0x1c4>
 80102a2:	b1b0      	cbz	r0, 80102d2 <_vfiprintf_r+0x156>
 80102a4:	9207      	str	r2, [sp, #28]
 80102a6:	e014      	b.n	80102d2 <_vfiprintf_r+0x156>
 80102a8:	eba0 0308 	sub.w	r3, r0, r8
 80102ac:	fa09 f303 	lsl.w	r3, r9, r3
 80102b0:	4313      	orrs	r3, r2
 80102b2:	9304      	str	r3, [sp, #16]
 80102b4:	46a2      	mov	sl, r4
 80102b6:	e7d2      	b.n	801025e <_vfiprintf_r+0xe2>
 80102b8:	9b03      	ldr	r3, [sp, #12]
 80102ba:	1d19      	adds	r1, r3, #4
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	9103      	str	r1, [sp, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	bfbb      	ittet	lt
 80102c4:	425b      	neglt	r3, r3
 80102c6:	f042 0202 	orrlt.w	r2, r2, #2
 80102ca:	9307      	strge	r3, [sp, #28]
 80102cc:	9307      	strlt	r3, [sp, #28]
 80102ce:	bfb8      	it	lt
 80102d0:	9204      	strlt	r2, [sp, #16]
 80102d2:	7823      	ldrb	r3, [r4, #0]
 80102d4:	2b2e      	cmp	r3, #46	; 0x2e
 80102d6:	d10c      	bne.n	80102f2 <_vfiprintf_r+0x176>
 80102d8:	7863      	ldrb	r3, [r4, #1]
 80102da:	2b2a      	cmp	r3, #42	; 0x2a
 80102dc:	d135      	bne.n	801034a <_vfiprintf_r+0x1ce>
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	1d1a      	adds	r2, r3, #4
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	9203      	str	r2, [sp, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	bfb8      	it	lt
 80102ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80102ee:	3402      	adds	r4, #2
 80102f0:	9305      	str	r3, [sp, #20]
 80102f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80103d8 <_vfiprintf_r+0x25c>
 80102f6:	7821      	ldrb	r1, [r4, #0]
 80102f8:	2203      	movs	r2, #3
 80102fa:	4650      	mov	r0, sl
 80102fc:	f7ef ff88 	bl	8000210 <memchr>
 8010300:	b140      	cbz	r0, 8010314 <_vfiprintf_r+0x198>
 8010302:	2340      	movs	r3, #64	; 0x40
 8010304:	eba0 000a 	sub.w	r0, r0, sl
 8010308:	fa03 f000 	lsl.w	r0, r3, r0
 801030c:	9b04      	ldr	r3, [sp, #16]
 801030e:	4303      	orrs	r3, r0
 8010310:	3401      	adds	r4, #1
 8010312:	9304      	str	r3, [sp, #16]
 8010314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010318:	482c      	ldr	r0, [pc, #176]	; (80103cc <_vfiprintf_r+0x250>)
 801031a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801031e:	2206      	movs	r2, #6
 8010320:	f7ef ff76 	bl	8000210 <memchr>
 8010324:	2800      	cmp	r0, #0
 8010326:	d03f      	beq.n	80103a8 <_vfiprintf_r+0x22c>
 8010328:	4b29      	ldr	r3, [pc, #164]	; (80103d0 <_vfiprintf_r+0x254>)
 801032a:	bb1b      	cbnz	r3, 8010374 <_vfiprintf_r+0x1f8>
 801032c:	9b03      	ldr	r3, [sp, #12]
 801032e:	3307      	adds	r3, #7
 8010330:	f023 0307 	bic.w	r3, r3, #7
 8010334:	3308      	adds	r3, #8
 8010336:	9303      	str	r3, [sp, #12]
 8010338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801033a:	443b      	add	r3, r7
 801033c:	9309      	str	r3, [sp, #36]	; 0x24
 801033e:	e767      	b.n	8010210 <_vfiprintf_r+0x94>
 8010340:	fb0c 3202 	mla	r2, ip, r2, r3
 8010344:	460c      	mov	r4, r1
 8010346:	2001      	movs	r0, #1
 8010348:	e7a5      	b.n	8010296 <_vfiprintf_r+0x11a>
 801034a:	2300      	movs	r3, #0
 801034c:	3401      	adds	r4, #1
 801034e:	9305      	str	r3, [sp, #20]
 8010350:	4619      	mov	r1, r3
 8010352:	f04f 0c0a 	mov.w	ip, #10
 8010356:	4620      	mov	r0, r4
 8010358:	f810 2b01 	ldrb.w	r2, [r0], #1
 801035c:	3a30      	subs	r2, #48	; 0x30
 801035e:	2a09      	cmp	r2, #9
 8010360:	d903      	bls.n	801036a <_vfiprintf_r+0x1ee>
 8010362:	2b00      	cmp	r3, #0
 8010364:	d0c5      	beq.n	80102f2 <_vfiprintf_r+0x176>
 8010366:	9105      	str	r1, [sp, #20]
 8010368:	e7c3      	b.n	80102f2 <_vfiprintf_r+0x176>
 801036a:	fb0c 2101 	mla	r1, ip, r1, r2
 801036e:	4604      	mov	r4, r0
 8010370:	2301      	movs	r3, #1
 8010372:	e7f0      	b.n	8010356 <_vfiprintf_r+0x1da>
 8010374:	ab03      	add	r3, sp, #12
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	462a      	mov	r2, r5
 801037a:	4b16      	ldr	r3, [pc, #88]	; (80103d4 <_vfiprintf_r+0x258>)
 801037c:	a904      	add	r1, sp, #16
 801037e:	4630      	mov	r0, r6
 8010380:	f3af 8000 	nop.w
 8010384:	4607      	mov	r7, r0
 8010386:	1c78      	adds	r0, r7, #1
 8010388:	d1d6      	bne.n	8010338 <_vfiprintf_r+0x1bc>
 801038a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801038c:	07d9      	lsls	r1, r3, #31
 801038e:	d405      	bmi.n	801039c <_vfiprintf_r+0x220>
 8010390:	89ab      	ldrh	r3, [r5, #12]
 8010392:	059a      	lsls	r2, r3, #22
 8010394:	d402      	bmi.n	801039c <_vfiprintf_r+0x220>
 8010396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010398:	f7ff fe13 	bl	800ffc2 <__retarget_lock_release_recursive>
 801039c:	89ab      	ldrh	r3, [r5, #12]
 801039e:	065b      	lsls	r3, r3, #25
 80103a0:	f53f af12 	bmi.w	80101c8 <_vfiprintf_r+0x4c>
 80103a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103a6:	e711      	b.n	80101cc <_vfiprintf_r+0x50>
 80103a8:	ab03      	add	r3, sp, #12
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	462a      	mov	r2, r5
 80103ae:	4b09      	ldr	r3, [pc, #36]	; (80103d4 <_vfiprintf_r+0x258>)
 80103b0:	a904      	add	r1, sp, #16
 80103b2:	4630      	mov	r0, r6
 80103b4:	f000 f880 	bl	80104b8 <_printf_i>
 80103b8:	e7e4      	b.n	8010384 <_vfiprintf_r+0x208>
 80103ba:	bf00      	nop
 80103bc:	080138c4 	.word	0x080138c4
 80103c0:	080138e4 	.word	0x080138e4
 80103c4:	080138a4 	.word	0x080138a4
 80103c8:	08013904 	.word	0x08013904
 80103cc:	0801390e 	.word	0x0801390e
 80103d0:	00000000 	.word	0x00000000
 80103d4:	08010157 	.word	0x08010157
 80103d8:	0801390a 	.word	0x0801390a

080103dc <_printf_common>:
 80103dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103e0:	4616      	mov	r6, r2
 80103e2:	4699      	mov	r9, r3
 80103e4:	688a      	ldr	r2, [r1, #8]
 80103e6:	690b      	ldr	r3, [r1, #16]
 80103e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80103ec:	4293      	cmp	r3, r2
 80103ee:	bfb8      	it	lt
 80103f0:	4613      	movlt	r3, r2
 80103f2:	6033      	str	r3, [r6, #0]
 80103f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80103f8:	4607      	mov	r7, r0
 80103fa:	460c      	mov	r4, r1
 80103fc:	b10a      	cbz	r2, 8010402 <_printf_common+0x26>
 80103fe:	3301      	adds	r3, #1
 8010400:	6033      	str	r3, [r6, #0]
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	0699      	lsls	r1, r3, #26
 8010406:	bf42      	ittt	mi
 8010408:	6833      	ldrmi	r3, [r6, #0]
 801040a:	3302      	addmi	r3, #2
 801040c:	6033      	strmi	r3, [r6, #0]
 801040e:	6825      	ldr	r5, [r4, #0]
 8010410:	f015 0506 	ands.w	r5, r5, #6
 8010414:	d106      	bne.n	8010424 <_printf_common+0x48>
 8010416:	f104 0a19 	add.w	sl, r4, #25
 801041a:	68e3      	ldr	r3, [r4, #12]
 801041c:	6832      	ldr	r2, [r6, #0]
 801041e:	1a9b      	subs	r3, r3, r2
 8010420:	42ab      	cmp	r3, r5
 8010422:	dc26      	bgt.n	8010472 <_printf_common+0x96>
 8010424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010428:	1e13      	subs	r3, r2, #0
 801042a:	6822      	ldr	r2, [r4, #0]
 801042c:	bf18      	it	ne
 801042e:	2301      	movne	r3, #1
 8010430:	0692      	lsls	r2, r2, #26
 8010432:	d42b      	bmi.n	801048c <_printf_common+0xb0>
 8010434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010438:	4649      	mov	r1, r9
 801043a:	4638      	mov	r0, r7
 801043c:	47c0      	blx	r8
 801043e:	3001      	adds	r0, #1
 8010440:	d01e      	beq.n	8010480 <_printf_common+0xa4>
 8010442:	6823      	ldr	r3, [r4, #0]
 8010444:	68e5      	ldr	r5, [r4, #12]
 8010446:	6832      	ldr	r2, [r6, #0]
 8010448:	f003 0306 	and.w	r3, r3, #6
 801044c:	2b04      	cmp	r3, #4
 801044e:	bf08      	it	eq
 8010450:	1aad      	subeq	r5, r5, r2
 8010452:	68a3      	ldr	r3, [r4, #8]
 8010454:	6922      	ldr	r2, [r4, #16]
 8010456:	bf0c      	ite	eq
 8010458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801045c:	2500      	movne	r5, #0
 801045e:	4293      	cmp	r3, r2
 8010460:	bfc4      	itt	gt
 8010462:	1a9b      	subgt	r3, r3, r2
 8010464:	18ed      	addgt	r5, r5, r3
 8010466:	2600      	movs	r6, #0
 8010468:	341a      	adds	r4, #26
 801046a:	42b5      	cmp	r5, r6
 801046c:	d11a      	bne.n	80104a4 <_printf_common+0xc8>
 801046e:	2000      	movs	r0, #0
 8010470:	e008      	b.n	8010484 <_printf_common+0xa8>
 8010472:	2301      	movs	r3, #1
 8010474:	4652      	mov	r2, sl
 8010476:	4649      	mov	r1, r9
 8010478:	4638      	mov	r0, r7
 801047a:	47c0      	blx	r8
 801047c:	3001      	adds	r0, #1
 801047e:	d103      	bne.n	8010488 <_printf_common+0xac>
 8010480:	f04f 30ff 	mov.w	r0, #4294967295
 8010484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010488:	3501      	adds	r5, #1
 801048a:	e7c6      	b.n	801041a <_printf_common+0x3e>
 801048c:	18e1      	adds	r1, r4, r3
 801048e:	1c5a      	adds	r2, r3, #1
 8010490:	2030      	movs	r0, #48	; 0x30
 8010492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010496:	4422      	add	r2, r4
 8010498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801049c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104a0:	3302      	adds	r3, #2
 80104a2:	e7c7      	b.n	8010434 <_printf_common+0x58>
 80104a4:	2301      	movs	r3, #1
 80104a6:	4622      	mov	r2, r4
 80104a8:	4649      	mov	r1, r9
 80104aa:	4638      	mov	r0, r7
 80104ac:	47c0      	blx	r8
 80104ae:	3001      	adds	r0, #1
 80104b0:	d0e6      	beq.n	8010480 <_printf_common+0xa4>
 80104b2:	3601      	adds	r6, #1
 80104b4:	e7d9      	b.n	801046a <_printf_common+0x8e>
	...

080104b8 <_printf_i>:
 80104b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104bc:	460c      	mov	r4, r1
 80104be:	4691      	mov	r9, r2
 80104c0:	7e27      	ldrb	r7, [r4, #24]
 80104c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80104c4:	2f78      	cmp	r7, #120	; 0x78
 80104c6:	4680      	mov	r8, r0
 80104c8:	469a      	mov	sl, r3
 80104ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104ce:	d807      	bhi.n	80104e0 <_printf_i+0x28>
 80104d0:	2f62      	cmp	r7, #98	; 0x62
 80104d2:	d80a      	bhi.n	80104ea <_printf_i+0x32>
 80104d4:	2f00      	cmp	r7, #0
 80104d6:	f000 80d8 	beq.w	801068a <_printf_i+0x1d2>
 80104da:	2f58      	cmp	r7, #88	; 0x58
 80104dc:	f000 80a3 	beq.w	8010626 <_printf_i+0x16e>
 80104e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80104e8:	e03a      	b.n	8010560 <_printf_i+0xa8>
 80104ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80104ee:	2b15      	cmp	r3, #21
 80104f0:	d8f6      	bhi.n	80104e0 <_printf_i+0x28>
 80104f2:	a001      	add	r0, pc, #4	; (adr r0, 80104f8 <_printf_i+0x40>)
 80104f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80104f8:	08010551 	.word	0x08010551
 80104fc:	08010565 	.word	0x08010565
 8010500:	080104e1 	.word	0x080104e1
 8010504:	080104e1 	.word	0x080104e1
 8010508:	080104e1 	.word	0x080104e1
 801050c:	080104e1 	.word	0x080104e1
 8010510:	08010565 	.word	0x08010565
 8010514:	080104e1 	.word	0x080104e1
 8010518:	080104e1 	.word	0x080104e1
 801051c:	080104e1 	.word	0x080104e1
 8010520:	080104e1 	.word	0x080104e1
 8010524:	08010671 	.word	0x08010671
 8010528:	08010595 	.word	0x08010595
 801052c:	08010653 	.word	0x08010653
 8010530:	080104e1 	.word	0x080104e1
 8010534:	080104e1 	.word	0x080104e1
 8010538:	08010693 	.word	0x08010693
 801053c:	080104e1 	.word	0x080104e1
 8010540:	08010595 	.word	0x08010595
 8010544:	080104e1 	.word	0x080104e1
 8010548:	080104e1 	.word	0x080104e1
 801054c:	0801065b 	.word	0x0801065b
 8010550:	680b      	ldr	r3, [r1, #0]
 8010552:	1d1a      	adds	r2, r3, #4
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	600a      	str	r2, [r1, #0]
 8010558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801055c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010560:	2301      	movs	r3, #1
 8010562:	e0a3      	b.n	80106ac <_printf_i+0x1f4>
 8010564:	6825      	ldr	r5, [r4, #0]
 8010566:	6808      	ldr	r0, [r1, #0]
 8010568:	062e      	lsls	r6, r5, #24
 801056a:	f100 0304 	add.w	r3, r0, #4
 801056e:	d50a      	bpl.n	8010586 <_printf_i+0xce>
 8010570:	6805      	ldr	r5, [r0, #0]
 8010572:	600b      	str	r3, [r1, #0]
 8010574:	2d00      	cmp	r5, #0
 8010576:	da03      	bge.n	8010580 <_printf_i+0xc8>
 8010578:	232d      	movs	r3, #45	; 0x2d
 801057a:	426d      	negs	r5, r5
 801057c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010580:	485e      	ldr	r0, [pc, #376]	; (80106fc <_printf_i+0x244>)
 8010582:	230a      	movs	r3, #10
 8010584:	e019      	b.n	80105ba <_printf_i+0x102>
 8010586:	f015 0f40 	tst.w	r5, #64	; 0x40
 801058a:	6805      	ldr	r5, [r0, #0]
 801058c:	600b      	str	r3, [r1, #0]
 801058e:	bf18      	it	ne
 8010590:	b22d      	sxthne	r5, r5
 8010592:	e7ef      	b.n	8010574 <_printf_i+0xbc>
 8010594:	680b      	ldr	r3, [r1, #0]
 8010596:	6825      	ldr	r5, [r4, #0]
 8010598:	1d18      	adds	r0, r3, #4
 801059a:	6008      	str	r0, [r1, #0]
 801059c:	0628      	lsls	r0, r5, #24
 801059e:	d501      	bpl.n	80105a4 <_printf_i+0xec>
 80105a0:	681d      	ldr	r5, [r3, #0]
 80105a2:	e002      	b.n	80105aa <_printf_i+0xf2>
 80105a4:	0669      	lsls	r1, r5, #25
 80105a6:	d5fb      	bpl.n	80105a0 <_printf_i+0xe8>
 80105a8:	881d      	ldrh	r5, [r3, #0]
 80105aa:	4854      	ldr	r0, [pc, #336]	; (80106fc <_printf_i+0x244>)
 80105ac:	2f6f      	cmp	r7, #111	; 0x6f
 80105ae:	bf0c      	ite	eq
 80105b0:	2308      	moveq	r3, #8
 80105b2:	230a      	movne	r3, #10
 80105b4:	2100      	movs	r1, #0
 80105b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105ba:	6866      	ldr	r6, [r4, #4]
 80105bc:	60a6      	str	r6, [r4, #8]
 80105be:	2e00      	cmp	r6, #0
 80105c0:	bfa2      	ittt	ge
 80105c2:	6821      	ldrge	r1, [r4, #0]
 80105c4:	f021 0104 	bicge.w	r1, r1, #4
 80105c8:	6021      	strge	r1, [r4, #0]
 80105ca:	b90d      	cbnz	r5, 80105d0 <_printf_i+0x118>
 80105cc:	2e00      	cmp	r6, #0
 80105ce:	d04d      	beq.n	801066c <_printf_i+0x1b4>
 80105d0:	4616      	mov	r6, r2
 80105d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80105d6:	fb03 5711 	mls	r7, r3, r1, r5
 80105da:	5dc7      	ldrb	r7, [r0, r7]
 80105dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105e0:	462f      	mov	r7, r5
 80105e2:	42bb      	cmp	r3, r7
 80105e4:	460d      	mov	r5, r1
 80105e6:	d9f4      	bls.n	80105d2 <_printf_i+0x11a>
 80105e8:	2b08      	cmp	r3, #8
 80105ea:	d10b      	bne.n	8010604 <_printf_i+0x14c>
 80105ec:	6823      	ldr	r3, [r4, #0]
 80105ee:	07df      	lsls	r7, r3, #31
 80105f0:	d508      	bpl.n	8010604 <_printf_i+0x14c>
 80105f2:	6923      	ldr	r3, [r4, #16]
 80105f4:	6861      	ldr	r1, [r4, #4]
 80105f6:	4299      	cmp	r1, r3
 80105f8:	bfde      	ittt	le
 80105fa:	2330      	movle	r3, #48	; 0x30
 80105fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010600:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010604:	1b92      	subs	r2, r2, r6
 8010606:	6122      	str	r2, [r4, #16]
 8010608:	f8cd a000 	str.w	sl, [sp]
 801060c:	464b      	mov	r3, r9
 801060e:	aa03      	add	r2, sp, #12
 8010610:	4621      	mov	r1, r4
 8010612:	4640      	mov	r0, r8
 8010614:	f7ff fee2 	bl	80103dc <_printf_common>
 8010618:	3001      	adds	r0, #1
 801061a:	d14c      	bne.n	80106b6 <_printf_i+0x1fe>
 801061c:	f04f 30ff 	mov.w	r0, #4294967295
 8010620:	b004      	add	sp, #16
 8010622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010626:	4835      	ldr	r0, [pc, #212]	; (80106fc <_printf_i+0x244>)
 8010628:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	680e      	ldr	r6, [r1, #0]
 8010630:	061f      	lsls	r7, r3, #24
 8010632:	f856 5b04 	ldr.w	r5, [r6], #4
 8010636:	600e      	str	r6, [r1, #0]
 8010638:	d514      	bpl.n	8010664 <_printf_i+0x1ac>
 801063a:	07d9      	lsls	r1, r3, #31
 801063c:	bf44      	itt	mi
 801063e:	f043 0320 	orrmi.w	r3, r3, #32
 8010642:	6023      	strmi	r3, [r4, #0]
 8010644:	b91d      	cbnz	r5, 801064e <_printf_i+0x196>
 8010646:	6823      	ldr	r3, [r4, #0]
 8010648:	f023 0320 	bic.w	r3, r3, #32
 801064c:	6023      	str	r3, [r4, #0]
 801064e:	2310      	movs	r3, #16
 8010650:	e7b0      	b.n	80105b4 <_printf_i+0xfc>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	f043 0320 	orr.w	r3, r3, #32
 8010658:	6023      	str	r3, [r4, #0]
 801065a:	2378      	movs	r3, #120	; 0x78
 801065c:	4828      	ldr	r0, [pc, #160]	; (8010700 <_printf_i+0x248>)
 801065e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010662:	e7e3      	b.n	801062c <_printf_i+0x174>
 8010664:	065e      	lsls	r6, r3, #25
 8010666:	bf48      	it	mi
 8010668:	b2ad      	uxthmi	r5, r5
 801066a:	e7e6      	b.n	801063a <_printf_i+0x182>
 801066c:	4616      	mov	r6, r2
 801066e:	e7bb      	b.n	80105e8 <_printf_i+0x130>
 8010670:	680b      	ldr	r3, [r1, #0]
 8010672:	6826      	ldr	r6, [r4, #0]
 8010674:	6960      	ldr	r0, [r4, #20]
 8010676:	1d1d      	adds	r5, r3, #4
 8010678:	600d      	str	r5, [r1, #0]
 801067a:	0635      	lsls	r5, r6, #24
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	d501      	bpl.n	8010684 <_printf_i+0x1cc>
 8010680:	6018      	str	r0, [r3, #0]
 8010682:	e002      	b.n	801068a <_printf_i+0x1d2>
 8010684:	0671      	lsls	r1, r6, #25
 8010686:	d5fb      	bpl.n	8010680 <_printf_i+0x1c8>
 8010688:	8018      	strh	r0, [r3, #0]
 801068a:	2300      	movs	r3, #0
 801068c:	6123      	str	r3, [r4, #16]
 801068e:	4616      	mov	r6, r2
 8010690:	e7ba      	b.n	8010608 <_printf_i+0x150>
 8010692:	680b      	ldr	r3, [r1, #0]
 8010694:	1d1a      	adds	r2, r3, #4
 8010696:	600a      	str	r2, [r1, #0]
 8010698:	681e      	ldr	r6, [r3, #0]
 801069a:	6862      	ldr	r2, [r4, #4]
 801069c:	2100      	movs	r1, #0
 801069e:	4630      	mov	r0, r6
 80106a0:	f7ef fdb6 	bl	8000210 <memchr>
 80106a4:	b108      	cbz	r0, 80106aa <_printf_i+0x1f2>
 80106a6:	1b80      	subs	r0, r0, r6
 80106a8:	6060      	str	r0, [r4, #4]
 80106aa:	6863      	ldr	r3, [r4, #4]
 80106ac:	6123      	str	r3, [r4, #16]
 80106ae:	2300      	movs	r3, #0
 80106b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106b4:	e7a8      	b.n	8010608 <_printf_i+0x150>
 80106b6:	6923      	ldr	r3, [r4, #16]
 80106b8:	4632      	mov	r2, r6
 80106ba:	4649      	mov	r1, r9
 80106bc:	4640      	mov	r0, r8
 80106be:	47d0      	blx	sl
 80106c0:	3001      	adds	r0, #1
 80106c2:	d0ab      	beq.n	801061c <_printf_i+0x164>
 80106c4:	6823      	ldr	r3, [r4, #0]
 80106c6:	079b      	lsls	r3, r3, #30
 80106c8:	d413      	bmi.n	80106f2 <_printf_i+0x23a>
 80106ca:	68e0      	ldr	r0, [r4, #12]
 80106cc:	9b03      	ldr	r3, [sp, #12]
 80106ce:	4298      	cmp	r0, r3
 80106d0:	bfb8      	it	lt
 80106d2:	4618      	movlt	r0, r3
 80106d4:	e7a4      	b.n	8010620 <_printf_i+0x168>
 80106d6:	2301      	movs	r3, #1
 80106d8:	4632      	mov	r2, r6
 80106da:	4649      	mov	r1, r9
 80106dc:	4640      	mov	r0, r8
 80106de:	47d0      	blx	sl
 80106e0:	3001      	adds	r0, #1
 80106e2:	d09b      	beq.n	801061c <_printf_i+0x164>
 80106e4:	3501      	adds	r5, #1
 80106e6:	68e3      	ldr	r3, [r4, #12]
 80106e8:	9903      	ldr	r1, [sp, #12]
 80106ea:	1a5b      	subs	r3, r3, r1
 80106ec:	42ab      	cmp	r3, r5
 80106ee:	dcf2      	bgt.n	80106d6 <_printf_i+0x21e>
 80106f0:	e7eb      	b.n	80106ca <_printf_i+0x212>
 80106f2:	2500      	movs	r5, #0
 80106f4:	f104 0619 	add.w	r6, r4, #25
 80106f8:	e7f5      	b.n	80106e6 <_printf_i+0x22e>
 80106fa:	bf00      	nop
 80106fc:	08013915 	.word	0x08013915
 8010700:	08013926 	.word	0x08013926

08010704 <_sbrk_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4d06      	ldr	r5, [pc, #24]	; (8010720 <_sbrk_r+0x1c>)
 8010708:	2300      	movs	r3, #0
 801070a:	4604      	mov	r4, r0
 801070c:	4608      	mov	r0, r1
 801070e:	602b      	str	r3, [r5, #0]
 8010710:	f7f0 fee8 	bl	80014e4 <_sbrk>
 8010714:	1c43      	adds	r3, r0, #1
 8010716:	d102      	bne.n	801071e <_sbrk_r+0x1a>
 8010718:	682b      	ldr	r3, [r5, #0]
 801071a:	b103      	cbz	r3, 801071e <_sbrk_r+0x1a>
 801071c:	6023      	str	r3, [r4, #0]
 801071e:	bd38      	pop	{r3, r4, r5, pc}
 8010720:	20008bc4 	.word	0x20008bc4

08010724 <__sread>:
 8010724:	b510      	push	{r4, lr}
 8010726:	460c      	mov	r4, r1
 8010728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801072c:	f000 fa6c 	bl	8010c08 <_read_r>
 8010730:	2800      	cmp	r0, #0
 8010732:	bfab      	itete	ge
 8010734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010736:	89a3      	ldrhlt	r3, [r4, #12]
 8010738:	181b      	addge	r3, r3, r0
 801073a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801073e:	bfac      	ite	ge
 8010740:	6563      	strge	r3, [r4, #84]	; 0x54
 8010742:	81a3      	strhlt	r3, [r4, #12]
 8010744:	bd10      	pop	{r4, pc}

08010746 <__swrite>:
 8010746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074a:	461f      	mov	r7, r3
 801074c:	898b      	ldrh	r3, [r1, #12]
 801074e:	05db      	lsls	r3, r3, #23
 8010750:	4605      	mov	r5, r0
 8010752:	460c      	mov	r4, r1
 8010754:	4616      	mov	r6, r2
 8010756:	d505      	bpl.n	8010764 <__swrite+0x1e>
 8010758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801075c:	2302      	movs	r3, #2
 801075e:	2200      	movs	r2, #0
 8010760:	f000 f9d0 	bl	8010b04 <_lseek_r>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801076a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801076e:	81a3      	strh	r3, [r4, #12]
 8010770:	4632      	mov	r2, r6
 8010772:	463b      	mov	r3, r7
 8010774:	4628      	mov	r0, r5
 8010776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801077a:	f000 b869 	b.w	8010850 <_write_r>

0801077e <__sseek>:
 801077e:	b510      	push	{r4, lr}
 8010780:	460c      	mov	r4, r1
 8010782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010786:	f000 f9bd 	bl	8010b04 <_lseek_r>
 801078a:	1c43      	adds	r3, r0, #1
 801078c:	89a3      	ldrh	r3, [r4, #12]
 801078e:	bf15      	itete	ne
 8010790:	6560      	strne	r0, [r4, #84]	; 0x54
 8010792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801079a:	81a3      	strheq	r3, [r4, #12]
 801079c:	bf18      	it	ne
 801079e:	81a3      	strhne	r3, [r4, #12]
 80107a0:	bd10      	pop	{r4, pc}

080107a2 <__sclose>:
 80107a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107a6:	f000 b8db 	b.w	8010960 <_close_r>
	...

080107ac <__swbuf_r>:
 80107ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ae:	460e      	mov	r6, r1
 80107b0:	4614      	mov	r4, r2
 80107b2:	4605      	mov	r5, r0
 80107b4:	b118      	cbz	r0, 80107be <__swbuf_r+0x12>
 80107b6:	6983      	ldr	r3, [r0, #24]
 80107b8:	b90b      	cbnz	r3, 80107be <__swbuf_r+0x12>
 80107ba:	f7ff fb51 	bl	800fe60 <__sinit>
 80107be:	4b21      	ldr	r3, [pc, #132]	; (8010844 <__swbuf_r+0x98>)
 80107c0:	429c      	cmp	r4, r3
 80107c2:	d12b      	bne.n	801081c <__swbuf_r+0x70>
 80107c4:	686c      	ldr	r4, [r5, #4]
 80107c6:	69a3      	ldr	r3, [r4, #24]
 80107c8:	60a3      	str	r3, [r4, #8]
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	071a      	lsls	r2, r3, #28
 80107ce:	d52f      	bpl.n	8010830 <__swbuf_r+0x84>
 80107d0:	6923      	ldr	r3, [r4, #16]
 80107d2:	b36b      	cbz	r3, 8010830 <__swbuf_r+0x84>
 80107d4:	6923      	ldr	r3, [r4, #16]
 80107d6:	6820      	ldr	r0, [r4, #0]
 80107d8:	1ac0      	subs	r0, r0, r3
 80107da:	6963      	ldr	r3, [r4, #20]
 80107dc:	b2f6      	uxtb	r6, r6
 80107de:	4283      	cmp	r3, r0
 80107e0:	4637      	mov	r7, r6
 80107e2:	dc04      	bgt.n	80107ee <__swbuf_r+0x42>
 80107e4:	4621      	mov	r1, r4
 80107e6:	4628      	mov	r0, r5
 80107e8:	f000 f950 	bl	8010a8c <_fflush_r>
 80107ec:	bb30      	cbnz	r0, 801083c <__swbuf_r+0x90>
 80107ee:	68a3      	ldr	r3, [r4, #8]
 80107f0:	3b01      	subs	r3, #1
 80107f2:	60a3      	str	r3, [r4, #8]
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	1c5a      	adds	r2, r3, #1
 80107f8:	6022      	str	r2, [r4, #0]
 80107fa:	701e      	strb	r6, [r3, #0]
 80107fc:	6963      	ldr	r3, [r4, #20]
 80107fe:	3001      	adds	r0, #1
 8010800:	4283      	cmp	r3, r0
 8010802:	d004      	beq.n	801080e <__swbuf_r+0x62>
 8010804:	89a3      	ldrh	r3, [r4, #12]
 8010806:	07db      	lsls	r3, r3, #31
 8010808:	d506      	bpl.n	8010818 <__swbuf_r+0x6c>
 801080a:	2e0a      	cmp	r6, #10
 801080c:	d104      	bne.n	8010818 <__swbuf_r+0x6c>
 801080e:	4621      	mov	r1, r4
 8010810:	4628      	mov	r0, r5
 8010812:	f000 f93b 	bl	8010a8c <_fflush_r>
 8010816:	b988      	cbnz	r0, 801083c <__swbuf_r+0x90>
 8010818:	4638      	mov	r0, r7
 801081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801081c:	4b0a      	ldr	r3, [pc, #40]	; (8010848 <__swbuf_r+0x9c>)
 801081e:	429c      	cmp	r4, r3
 8010820:	d101      	bne.n	8010826 <__swbuf_r+0x7a>
 8010822:	68ac      	ldr	r4, [r5, #8]
 8010824:	e7cf      	b.n	80107c6 <__swbuf_r+0x1a>
 8010826:	4b09      	ldr	r3, [pc, #36]	; (801084c <__swbuf_r+0xa0>)
 8010828:	429c      	cmp	r4, r3
 801082a:	bf08      	it	eq
 801082c:	68ec      	ldreq	r4, [r5, #12]
 801082e:	e7ca      	b.n	80107c6 <__swbuf_r+0x1a>
 8010830:	4621      	mov	r1, r4
 8010832:	4628      	mov	r0, r5
 8010834:	f000 f81e 	bl	8010874 <__swsetup_r>
 8010838:	2800      	cmp	r0, #0
 801083a:	d0cb      	beq.n	80107d4 <__swbuf_r+0x28>
 801083c:	f04f 37ff 	mov.w	r7, #4294967295
 8010840:	e7ea      	b.n	8010818 <__swbuf_r+0x6c>
 8010842:	bf00      	nop
 8010844:	080138c4 	.word	0x080138c4
 8010848:	080138e4 	.word	0x080138e4
 801084c:	080138a4 	.word	0x080138a4

08010850 <_write_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4d07      	ldr	r5, [pc, #28]	; (8010870 <_write_r+0x20>)
 8010854:	4604      	mov	r4, r0
 8010856:	4608      	mov	r0, r1
 8010858:	4611      	mov	r1, r2
 801085a:	2200      	movs	r2, #0
 801085c:	602a      	str	r2, [r5, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	f7f0 fdef 	bl	8001442 <_write>
 8010864:	1c43      	adds	r3, r0, #1
 8010866:	d102      	bne.n	801086e <_write_r+0x1e>
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	b103      	cbz	r3, 801086e <_write_r+0x1e>
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	20008bc4 	.word	0x20008bc4

08010874 <__swsetup_r>:
 8010874:	4b32      	ldr	r3, [pc, #200]	; (8010940 <__swsetup_r+0xcc>)
 8010876:	b570      	push	{r4, r5, r6, lr}
 8010878:	681d      	ldr	r5, [r3, #0]
 801087a:	4606      	mov	r6, r0
 801087c:	460c      	mov	r4, r1
 801087e:	b125      	cbz	r5, 801088a <__swsetup_r+0x16>
 8010880:	69ab      	ldr	r3, [r5, #24]
 8010882:	b913      	cbnz	r3, 801088a <__swsetup_r+0x16>
 8010884:	4628      	mov	r0, r5
 8010886:	f7ff faeb 	bl	800fe60 <__sinit>
 801088a:	4b2e      	ldr	r3, [pc, #184]	; (8010944 <__swsetup_r+0xd0>)
 801088c:	429c      	cmp	r4, r3
 801088e:	d10f      	bne.n	80108b0 <__swsetup_r+0x3c>
 8010890:	686c      	ldr	r4, [r5, #4]
 8010892:	89a3      	ldrh	r3, [r4, #12]
 8010894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010898:	0719      	lsls	r1, r3, #28
 801089a:	d42c      	bmi.n	80108f6 <__swsetup_r+0x82>
 801089c:	06dd      	lsls	r5, r3, #27
 801089e:	d411      	bmi.n	80108c4 <__swsetup_r+0x50>
 80108a0:	2309      	movs	r3, #9
 80108a2:	6033      	str	r3, [r6, #0]
 80108a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80108a8:	81a3      	strh	r3, [r4, #12]
 80108aa:	f04f 30ff 	mov.w	r0, #4294967295
 80108ae:	e03e      	b.n	801092e <__swsetup_r+0xba>
 80108b0:	4b25      	ldr	r3, [pc, #148]	; (8010948 <__swsetup_r+0xd4>)
 80108b2:	429c      	cmp	r4, r3
 80108b4:	d101      	bne.n	80108ba <__swsetup_r+0x46>
 80108b6:	68ac      	ldr	r4, [r5, #8]
 80108b8:	e7eb      	b.n	8010892 <__swsetup_r+0x1e>
 80108ba:	4b24      	ldr	r3, [pc, #144]	; (801094c <__swsetup_r+0xd8>)
 80108bc:	429c      	cmp	r4, r3
 80108be:	bf08      	it	eq
 80108c0:	68ec      	ldreq	r4, [r5, #12]
 80108c2:	e7e6      	b.n	8010892 <__swsetup_r+0x1e>
 80108c4:	0758      	lsls	r0, r3, #29
 80108c6:	d512      	bpl.n	80108ee <__swsetup_r+0x7a>
 80108c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108ca:	b141      	cbz	r1, 80108de <__swsetup_r+0x6a>
 80108cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108d0:	4299      	cmp	r1, r3
 80108d2:	d002      	beq.n	80108da <__swsetup_r+0x66>
 80108d4:	4630      	mov	r0, r6
 80108d6:	f7ff fb7d 	bl	800ffd4 <_free_r>
 80108da:	2300      	movs	r3, #0
 80108dc:	6363      	str	r3, [r4, #52]	; 0x34
 80108de:	89a3      	ldrh	r3, [r4, #12]
 80108e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108e4:	81a3      	strh	r3, [r4, #12]
 80108e6:	2300      	movs	r3, #0
 80108e8:	6063      	str	r3, [r4, #4]
 80108ea:	6923      	ldr	r3, [r4, #16]
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	89a3      	ldrh	r3, [r4, #12]
 80108f0:	f043 0308 	orr.w	r3, r3, #8
 80108f4:	81a3      	strh	r3, [r4, #12]
 80108f6:	6923      	ldr	r3, [r4, #16]
 80108f8:	b94b      	cbnz	r3, 801090e <__swsetup_r+0x9a>
 80108fa:	89a3      	ldrh	r3, [r4, #12]
 80108fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010904:	d003      	beq.n	801090e <__swsetup_r+0x9a>
 8010906:	4621      	mov	r1, r4
 8010908:	4630      	mov	r0, r6
 801090a:	f000 f931 	bl	8010b70 <__smakebuf_r>
 801090e:	89a0      	ldrh	r0, [r4, #12]
 8010910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010914:	f010 0301 	ands.w	r3, r0, #1
 8010918:	d00a      	beq.n	8010930 <__swsetup_r+0xbc>
 801091a:	2300      	movs	r3, #0
 801091c:	60a3      	str	r3, [r4, #8]
 801091e:	6963      	ldr	r3, [r4, #20]
 8010920:	425b      	negs	r3, r3
 8010922:	61a3      	str	r3, [r4, #24]
 8010924:	6923      	ldr	r3, [r4, #16]
 8010926:	b943      	cbnz	r3, 801093a <__swsetup_r+0xc6>
 8010928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801092c:	d1ba      	bne.n	80108a4 <__swsetup_r+0x30>
 801092e:	bd70      	pop	{r4, r5, r6, pc}
 8010930:	0781      	lsls	r1, r0, #30
 8010932:	bf58      	it	pl
 8010934:	6963      	ldrpl	r3, [r4, #20]
 8010936:	60a3      	str	r3, [r4, #8]
 8010938:	e7f4      	b.n	8010924 <__swsetup_r+0xb0>
 801093a:	2000      	movs	r0, #0
 801093c:	e7f7      	b.n	801092e <__swsetup_r+0xba>
 801093e:	bf00      	nop
 8010940:	2000001c 	.word	0x2000001c
 8010944:	080138c4 	.word	0x080138c4
 8010948:	080138e4 	.word	0x080138e4
 801094c:	080138a4 	.word	0x080138a4

08010950 <abort>:
 8010950:	b508      	push	{r3, lr}
 8010952:	2006      	movs	r0, #6
 8010954:	f000 f992 	bl	8010c7c <raise>
 8010958:	2001      	movs	r0, #1
 801095a:	f7f0 fd4b 	bl	80013f4 <_exit>
	...

08010960 <_close_r>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4d06      	ldr	r5, [pc, #24]	; (801097c <_close_r+0x1c>)
 8010964:	2300      	movs	r3, #0
 8010966:	4604      	mov	r4, r0
 8010968:	4608      	mov	r0, r1
 801096a:	602b      	str	r3, [r5, #0]
 801096c:	f7f0 fd85 	bl	800147a <_close>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	d102      	bne.n	801097a <_close_r+0x1a>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	b103      	cbz	r3, 801097a <_close_r+0x1a>
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	bd38      	pop	{r3, r4, r5, pc}
 801097c:	20008bc4 	.word	0x20008bc4

08010980 <__sflush_r>:
 8010980:	898a      	ldrh	r2, [r1, #12]
 8010982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010986:	4605      	mov	r5, r0
 8010988:	0710      	lsls	r0, r2, #28
 801098a:	460c      	mov	r4, r1
 801098c:	d458      	bmi.n	8010a40 <__sflush_r+0xc0>
 801098e:	684b      	ldr	r3, [r1, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	dc05      	bgt.n	80109a0 <__sflush_r+0x20>
 8010994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010996:	2b00      	cmp	r3, #0
 8010998:	dc02      	bgt.n	80109a0 <__sflush_r+0x20>
 801099a:	2000      	movs	r0, #0
 801099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109a2:	2e00      	cmp	r6, #0
 80109a4:	d0f9      	beq.n	801099a <__sflush_r+0x1a>
 80109a6:	2300      	movs	r3, #0
 80109a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109ac:	682f      	ldr	r7, [r5, #0]
 80109ae:	602b      	str	r3, [r5, #0]
 80109b0:	d032      	beq.n	8010a18 <__sflush_r+0x98>
 80109b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	075a      	lsls	r2, r3, #29
 80109b8:	d505      	bpl.n	80109c6 <__sflush_r+0x46>
 80109ba:	6863      	ldr	r3, [r4, #4]
 80109bc:	1ac0      	subs	r0, r0, r3
 80109be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109c0:	b10b      	cbz	r3, 80109c6 <__sflush_r+0x46>
 80109c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109c4:	1ac0      	subs	r0, r0, r3
 80109c6:	2300      	movs	r3, #0
 80109c8:	4602      	mov	r2, r0
 80109ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109cc:	6a21      	ldr	r1, [r4, #32]
 80109ce:	4628      	mov	r0, r5
 80109d0:	47b0      	blx	r6
 80109d2:	1c43      	adds	r3, r0, #1
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	d106      	bne.n	80109e6 <__sflush_r+0x66>
 80109d8:	6829      	ldr	r1, [r5, #0]
 80109da:	291d      	cmp	r1, #29
 80109dc:	d82c      	bhi.n	8010a38 <__sflush_r+0xb8>
 80109de:	4a2a      	ldr	r2, [pc, #168]	; (8010a88 <__sflush_r+0x108>)
 80109e0:	40ca      	lsrs	r2, r1
 80109e2:	07d6      	lsls	r6, r2, #31
 80109e4:	d528      	bpl.n	8010a38 <__sflush_r+0xb8>
 80109e6:	2200      	movs	r2, #0
 80109e8:	6062      	str	r2, [r4, #4]
 80109ea:	04d9      	lsls	r1, r3, #19
 80109ec:	6922      	ldr	r2, [r4, #16]
 80109ee:	6022      	str	r2, [r4, #0]
 80109f0:	d504      	bpl.n	80109fc <__sflush_r+0x7c>
 80109f2:	1c42      	adds	r2, r0, #1
 80109f4:	d101      	bne.n	80109fa <__sflush_r+0x7a>
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	b903      	cbnz	r3, 80109fc <__sflush_r+0x7c>
 80109fa:	6560      	str	r0, [r4, #84]	; 0x54
 80109fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109fe:	602f      	str	r7, [r5, #0]
 8010a00:	2900      	cmp	r1, #0
 8010a02:	d0ca      	beq.n	801099a <__sflush_r+0x1a>
 8010a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a08:	4299      	cmp	r1, r3
 8010a0a:	d002      	beq.n	8010a12 <__sflush_r+0x92>
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	f7ff fae1 	bl	800ffd4 <_free_r>
 8010a12:	2000      	movs	r0, #0
 8010a14:	6360      	str	r0, [r4, #52]	; 0x34
 8010a16:	e7c1      	b.n	801099c <__sflush_r+0x1c>
 8010a18:	6a21      	ldr	r1, [r4, #32]
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	47b0      	blx	r6
 8010a20:	1c41      	adds	r1, r0, #1
 8010a22:	d1c7      	bne.n	80109b4 <__sflush_r+0x34>
 8010a24:	682b      	ldr	r3, [r5, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d0c4      	beq.n	80109b4 <__sflush_r+0x34>
 8010a2a:	2b1d      	cmp	r3, #29
 8010a2c:	d001      	beq.n	8010a32 <__sflush_r+0xb2>
 8010a2e:	2b16      	cmp	r3, #22
 8010a30:	d101      	bne.n	8010a36 <__sflush_r+0xb6>
 8010a32:	602f      	str	r7, [r5, #0]
 8010a34:	e7b1      	b.n	801099a <__sflush_r+0x1a>
 8010a36:	89a3      	ldrh	r3, [r4, #12]
 8010a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a3c:	81a3      	strh	r3, [r4, #12]
 8010a3e:	e7ad      	b.n	801099c <__sflush_r+0x1c>
 8010a40:	690f      	ldr	r7, [r1, #16]
 8010a42:	2f00      	cmp	r7, #0
 8010a44:	d0a9      	beq.n	801099a <__sflush_r+0x1a>
 8010a46:	0793      	lsls	r3, r2, #30
 8010a48:	680e      	ldr	r6, [r1, #0]
 8010a4a:	bf08      	it	eq
 8010a4c:	694b      	ldreq	r3, [r1, #20]
 8010a4e:	600f      	str	r7, [r1, #0]
 8010a50:	bf18      	it	ne
 8010a52:	2300      	movne	r3, #0
 8010a54:	eba6 0807 	sub.w	r8, r6, r7
 8010a58:	608b      	str	r3, [r1, #8]
 8010a5a:	f1b8 0f00 	cmp.w	r8, #0
 8010a5e:	dd9c      	ble.n	801099a <__sflush_r+0x1a>
 8010a60:	6a21      	ldr	r1, [r4, #32]
 8010a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a64:	4643      	mov	r3, r8
 8010a66:	463a      	mov	r2, r7
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b0      	blx	r6
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	dc06      	bgt.n	8010a7e <__sflush_r+0xfe>
 8010a70:	89a3      	ldrh	r3, [r4, #12]
 8010a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a76:	81a3      	strh	r3, [r4, #12]
 8010a78:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7c:	e78e      	b.n	801099c <__sflush_r+0x1c>
 8010a7e:	4407      	add	r7, r0
 8010a80:	eba8 0800 	sub.w	r8, r8, r0
 8010a84:	e7e9      	b.n	8010a5a <__sflush_r+0xda>
 8010a86:	bf00      	nop
 8010a88:	20400001 	.word	0x20400001

08010a8c <_fflush_r>:
 8010a8c:	b538      	push	{r3, r4, r5, lr}
 8010a8e:	690b      	ldr	r3, [r1, #16]
 8010a90:	4605      	mov	r5, r0
 8010a92:	460c      	mov	r4, r1
 8010a94:	b913      	cbnz	r3, 8010a9c <_fflush_r+0x10>
 8010a96:	2500      	movs	r5, #0
 8010a98:	4628      	mov	r0, r5
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	b118      	cbz	r0, 8010aa6 <_fflush_r+0x1a>
 8010a9e:	6983      	ldr	r3, [r0, #24]
 8010aa0:	b90b      	cbnz	r3, 8010aa6 <_fflush_r+0x1a>
 8010aa2:	f7ff f9dd 	bl	800fe60 <__sinit>
 8010aa6:	4b14      	ldr	r3, [pc, #80]	; (8010af8 <_fflush_r+0x6c>)
 8010aa8:	429c      	cmp	r4, r3
 8010aaa:	d11b      	bne.n	8010ae4 <_fflush_r+0x58>
 8010aac:	686c      	ldr	r4, [r5, #4]
 8010aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d0ef      	beq.n	8010a96 <_fflush_r+0xa>
 8010ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ab8:	07d0      	lsls	r0, r2, #31
 8010aba:	d404      	bmi.n	8010ac6 <_fflush_r+0x3a>
 8010abc:	0599      	lsls	r1, r3, #22
 8010abe:	d402      	bmi.n	8010ac6 <_fflush_r+0x3a>
 8010ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ac2:	f7ff fa7d 	bl	800ffc0 <__retarget_lock_acquire_recursive>
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	4621      	mov	r1, r4
 8010aca:	f7ff ff59 	bl	8010980 <__sflush_r>
 8010ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ad0:	07da      	lsls	r2, r3, #31
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	d4e0      	bmi.n	8010a98 <_fflush_r+0xc>
 8010ad6:	89a3      	ldrh	r3, [r4, #12]
 8010ad8:	059b      	lsls	r3, r3, #22
 8010ada:	d4dd      	bmi.n	8010a98 <_fflush_r+0xc>
 8010adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ade:	f7ff fa70 	bl	800ffc2 <__retarget_lock_release_recursive>
 8010ae2:	e7d9      	b.n	8010a98 <_fflush_r+0xc>
 8010ae4:	4b05      	ldr	r3, [pc, #20]	; (8010afc <_fflush_r+0x70>)
 8010ae6:	429c      	cmp	r4, r3
 8010ae8:	d101      	bne.n	8010aee <_fflush_r+0x62>
 8010aea:	68ac      	ldr	r4, [r5, #8]
 8010aec:	e7df      	b.n	8010aae <_fflush_r+0x22>
 8010aee:	4b04      	ldr	r3, [pc, #16]	; (8010b00 <_fflush_r+0x74>)
 8010af0:	429c      	cmp	r4, r3
 8010af2:	bf08      	it	eq
 8010af4:	68ec      	ldreq	r4, [r5, #12]
 8010af6:	e7da      	b.n	8010aae <_fflush_r+0x22>
 8010af8:	080138c4 	.word	0x080138c4
 8010afc:	080138e4 	.word	0x080138e4
 8010b00:	080138a4 	.word	0x080138a4

08010b04 <_lseek_r>:
 8010b04:	b538      	push	{r3, r4, r5, lr}
 8010b06:	4d07      	ldr	r5, [pc, #28]	; (8010b24 <_lseek_r+0x20>)
 8010b08:	4604      	mov	r4, r0
 8010b0a:	4608      	mov	r0, r1
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	2200      	movs	r2, #0
 8010b10:	602a      	str	r2, [r5, #0]
 8010b12:	461a      	mov	r2, r3
 8010b14:	f7f0 fcd8 	bl	80014c8 <_lseek>
 8010b18:	1c43      	adds	r3, r0, #1
 8010b1a:	d102      	bne.n	8010b22 <_lseek_r+0x1e>
 8010b1c:	682b      	ldr	r3, [r5, #0]
 8010b1e:	b103      	cbz	r3, 8010b22 <_lseek_r+0x1e>
 8010b20:	6023      	str	r3, [r4, #0]
 8010b22:	bd38      	pop	{r3, r4, r5, pc}
 8010b24:	20008bc4 	.word	0x20008bc4

08010b28 <__swhatbuf_r>:
 8010b28:	b570      	push	{r4, r5, r6, lr}
 8010b2a:	460e      	mov	r6, r1
 8010b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b30:	2900      	cmp	r1, #0
 8010b32:	b096      	sub	sp, #88	; 0x58
 8010b34:	4614      	mov	r4, r2
 8010b36:	461d      	mov	r5, r3
 8010b38:	da07      	bge.n	8010b4a <__swhatbuf_r+0x22>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	602b      	str	r3, [r5, #0]
 8010b3e:	89b3      	ldrh	r3, [r6, #12]
 8010b40:	061a      	lsls	r2, r3, #24
 8010b42:	d410      	bmi.n	8010b66 <__swhatbuf_r+0x3e>
 8010b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b48:	e00e      	b.n	8010b68 <__swhatbuf_r+0x40>
 8010b4a:	466a      	mov	r2, sp
 8010b4c:	f000 f8b2 	bl	8010cb4 <_fstat_r>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	dbf2      	blt.n	8010b3a <__swhatbuf_r+0x12>
 8010b54:	9a01      	ldr	r2, [sp, #4]
 8010b56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b5e:	425a      	negs	r2, r3
 8010b60:	415a      	adcs	r2, r3
 8010b62:	602a      	str	r2, [r5, #0]
 8010b64:	e7ee      	b.n	8010b44 <__swhatbuf_r+0x1c>
 8010b66:	2340      	movs	r3, #64	; 0x40
 8010b68:	2000      	movs	r0, #0
 8010b6a:	6023      	str	r3, [r4, #0]
 8010b6c:	b016      	add	sp, #88	; 0x58
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}

08010b70 <__smakebuf_r>:
 8010b70:	898b      	ldrh	r3, [r1, #12]
 8010b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b74:	079d      	lsls	r5, r3, #30
 8010b76:	4606      	mov	r6, r0
 8010b78:	460c      	mov	r4, r1
 8010b7a:	d507      	bpl.n	8010b8c <__smakebuf_r+0x1c>
 8010b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b80:	6023      	str	r3, [r4, #0]
 8010b82:	6123      	str	r3, [r4, #16]
 8010b84:	2301      	movs	r3, #1
 8010b86:	6163      	str	r3, [r4, #20]
 8010b88:	b002      	add	sp, #8
 8010b8a:	bd70      	pop	{r4, r5, r6, pc}
 8010b8c:	ab01      	add	r3, sp, #4
 8010b8e:	466a      	mov	r2, sp
 8010b90:	f7ff ffca 	bl	8010b28 <__swhatbuf_r>
 8010b94:	9900      	ldr	r1, [sp, #0]
 8010b96:	4605      	mov	r5, r0
 8010b98:	4630      	mov	r0, r6
 8010b9a:	f7ff fa6b 	bl	8010074 <_malloc_r>
 8010b9e:	b948      	cbnz	r0, 8010bb4 <__smakebuf_r+0x44>
 8010ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ba4:	059a      	lsls	r2, r3, #22
 8010ba6:	d4ef      	bmi.n	8010b88 <__smakebuf_r+0x18>
 8010ba8:	f023 0303 	bic.w	r3, r3, #3
 8010bac:	f043 0302 	orr.w	r3, r3, #2
 8010bb0:	81a3      	strh	r3, [r4, #12]
 8010bb2:	e7e3      	b.n	8010b7c <__smakebuf_r+0xc>
 8010bb4:	4b0d      	ldr	r3, [pc, #52]	; (8010bec <__smakebuf_r+0x7c>)
 8010bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010bb8:	89a3      	ldrh	r3, [r4, #12]
 8010bba:	6020      	str	r0, [r4, #0]
 8010bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bc0:	81a3      	strh	r3, [r4, #12]
 8010bc2:	9b00      	ldr	r3, [sp, #0]
 8010bc4:	6163      	str	r3, [r4, #20]
 8010bc6:	9b01      	ldr	r3, [sp, #4]
 8010bc8:	6120      	str	r0, [r4, #16]
 8010bca:	b15b      	cbz	r3, 8010be4 <__smakebuf_r+0x74>
 8010bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	f000 f881 	bl	8010cd8 <_isatty_r>
 8010bd6:	b128      	cbz	r0, 8010be4 <__smakebuf_r+0x74>
 8010bd8:	89a3      	ldrh	r3, [r4, #12]
 8010bda:	f023 0303 	bic.w	r3, r3, #3
 8010bde:	f043 0301 	orr.w	r3, r3, #1
 8010be2:	81a3      	strh	r3, [r4, #12]
 8010be4:	89a0      	ldrh	r0, [r4, #12]
 8010be6:	4305      	orrs	r5, r0
 8010be8:	81a5      	strh	r5, [r4, #12]
 8010bea:	e7cd      	b.n	8010b88 <__smakebuf_r+0x18>
 8010bec:	0800fdf9 	.word	0x0800fdf9

08010bf0 <__malloc_lock>:
 8010bf0:	4801      	ldr	r0, [pc, #4]	; (8010bf8 <__malloc_lock+0x8>)
 8010bf2:	f7ff b9e5 	b.w	800ffc0 <__retarget_lock_acquire_recursive>
 8010bf6:	bf00      	nop
 8010bf8:	20008bcc 	.word	0x20008bcc

08010bfc <__malloc_unlock>:
 8010bfc:	4801      	ldr	r0, [pc, #4]	; (8010c04 <__malloc_unlock+0x8>)
 8010bfe:	f7ff b9e0 	b.w	800ffc2 <__retarget_lock_release_recursive>
 8010c02:	bf00      	nop
 8010c04:	20008bcc 	.word	0x20008bcc

08010c08 <_read_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4d07      	ldr	r5, [pc, #28]	; (8010c28 <_read_r+0x20>)
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	4608      	mov	r0, r1
 8010c10:	4611      	mov	r1, r2
 8010c12:	2200      	movs	r2, #0
 8010c14:	602a      	str	r2, [r5, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	f7f0 fbf6 	bl	8001408 <_read>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d102      	bne.n	8010c26 <_read_r+0x1e>
 8010c20:	682b      	ldr	r3, [r5, #0]
 8010c22:	b103      	cbz	r3, 8010c26 <_read_r+0x1e>
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	bd38      	pop	{r3, r4, r5, pc}
 8010c28:	20008bc4 	.word	0x20008bc4

08010c2c <_raise_r>:
 8010c2c:	291f      	cmp	r1, #31
 8010c2e:	b538      	push	{r3, r4, r5, lr}
 8010c30:	4604      	mov	r4, r0
 8010c32:	460d      	mov	r5, r1
 8010c34:	d904      	bls.n	8010c40 <_raise_r+0x14>
 8010c36:	2316      	movs	r3, #22
 8010c38:	6003      	str	r3, [r0, #0]
 8010c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3e:	bd38      	pop	{r3, r4, r5, pc}
 8010c40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c42:	b112      	cbz	r2, 8010c4a <_raise_r+0x1e>
 8010c44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c48:	b94b      	cbnz	r3, 8010c5e <_raise_r+0x32>
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f000 f830 	bl	8010cb0 <_getpid_r>
 8010c50:	462a      	mov	r2, r5
 8010c52:	4601      	mov	r1, r0
 8010c54:	4620      	mov	r0, r4
 8010c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c5a:	f000 b817 	b.w	8010c8c <_kill_r>
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d00a      	beq.n	8010c78 <_raise_r+0x4c>
 8010c62:	1c59      	adds	r1, r3, #1
 8010c64:	d103      	bne.n	8010c6e <_raise_r+0x42>
 8010c66:	2316      	movs	r3, #22
 8010c68:	6003      	str	r3, [r0, #0]
 8010c6a:	2001      	movs	r0, #1
 8010c6c:	e7e7      	b.n	8010c3e <_raise_r+0x12>
 8010c6e:	2400      	movs	r4, #0
 8010c70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c74:	4628      	mov	r0, r5
 8010c76:	4798      	blx	r3
 8010c78:	2000      	movs	r0, #0
 8010c7a:	e7e0      	b.n	8010c3e <_raise_r+0x12>

08010c7c <raise>:
 8010c7c:	4b02      	ldr	r3, [pc, #8]	; (8010c88 <raise+0xc>)
 8010c7e:	4601      	mov	r1, r0
 8010c80:	6818      	ldr	r0, [r3, #0]
 8010c82:	f7ff bfd3 	b.w	8010c2c <_raise_r>
 8010c86:	bf00      	nop
 8010c88:	2000001c 	.word	0x2000001c

08010c8c <_kill_r>:
 8010c8c:	b538      	push	{r3, r4, r5, lr}
 8010c8e:	4d07      	ldr	r5, [pc, #28]	; (8010cac <_kill_r+0x20>)
 8010c90:	2300      	movs	r3, #0
 8010c92:	4604      	mov	r4, r0
 8010c94:	4608      	mov	r0, r1
 8010c96:	4611      	mov	r1, r2
 8010c98:	602b      	str	r3, [r5, #0]
 8010c9a:	f7f0 fb99 	bl	80013d0 <_kill>
 8010c9e:	1c43      	adds	r3, r0, #1
 8010ca0:	d102      	bne.n	8010ca8 <_kill_r+0x1c>
 8010ca2:	682b      	ldr	r3, [r5, #0]
 8010ca4:	b103      	cbz	r3, 8010ca8 <_kill_r+0x1c>
 8010ca6:	6023      	str	r3, [r4, #0]
 8010ca8:	bd38      	pop	{r3, r4, r5, pc}
 8010caa:	bf00      	nop
 8010cac:	20008bc4 	.word	0x20008bc4

08010cb0 <_getpid_r>:
 8010cb0:	f7f0 bb86 	b.w	80013c0 <_getpid>

08010cb4 <_fstat_r>:
 8010cb4:	b538      	push	{r3, r4, r5, lr}
 8010cb6:	4d07      	ldr	r5, [pc, #28]	; (8010cd4 <_fstat_r+0x20>)
 8010cb8:	2300      	movs	r3, #0
 8010cba:	4604      	mov	r4, r0
 8010cbc:	4608      	mov	r0, r1
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	602b      	str	r3, [r5, #0]
 8010cc2:	f7f0 fbe6 	bl	8001492 <_fstat>
 8010cc6:	1c43      	adds	r3, r0, #1
 8010cc8:	d102      	bne.n	8010cd0 <_fstat_r+0x1c>
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	b103      	cbz	r3, 8010cd0 <_fstat_r+0x1c>
 8010cce:	6023      	str	r3, [r4, #0]
 8010cd0:	bd38      	pop	{r3, r4, r5, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20008bc4 	.word	0x20008bc4

08010cd8 <_isatty_r>:
 8010cd8:	b538      	push	{r3, r4, r5, lr}
 8010cda:	4d06      	ldr	r5, [pc, #24]	; (8010cf4 <_isatty_r+0x1c>)
 8010cdc:	2300      	movs	r3, #0
 8010cde:	4604      	mov	r4, r0
 8010ce0:	4608      	mov	r0, r1
 8010ce2:	602b      	str	r3, [r5, #0]
 8010ce4:	f7f0 fbe5 	bl	80014b2 <_isatty>
 8010ce8:	1c43      	adds	r3, r0, #1
 8010cea:	d102      	bne.n	8010cf2 <_isatty_r+0x1a>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	b103      	cbz	r3, 8010cf2 <_isatty_r+0x1a>
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	bd38      	pop	{r3, r4, r5, pc}
 8010cf4:	20008bc4 	.word	0x20008bc4

08010cf8 <_init>:
 8010cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfa:	bf00      	nop
 8010cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cfe:	bc08      	pop	{r3}
 8010d00:	469e      	mov	lr, r3
 8010d02:	4770      	bx	lr

08010d04 <_fini>:
 8010d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d06:	bf00      	nop
 8010d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d0a:	bc08      	pop	{r3}
 8010d0c:	469e      	mov	lr, r3
 8010d0e:	4770      	bx	lr
